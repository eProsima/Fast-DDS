// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file HelloWorldPubSubTypes.h
 * This header file contains the declaration of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#ifndef _HELLOWORLD_PUBSUBTYPES_H_
#define _HELLOWORLD_PUBSUBTYPES_H_

#include <fastdds/dds/topic/TopicDataType.hpp>

#include <fastdds/dds/topic/TypeSupport.hpp>

#include "HelloWorld.h"

/*!
 * @brief This class represents the TopicDataType of the type HelloWorld defined by the user in the IDL file.
 * @ingroup HELLOWORLD
 */
class HelloWorldPubSubType : public  eprosima::fastdds::dds::TopicDataType {
public:
        typedef HelloWorld type;

    HelloWorldPubSubType();
    virtual ~HelloWorldPubSubType();
    bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
    bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
        std::function<uint32_t()> getSerializedSizeProvider(void* data);
    bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle, bool force_md5);
    void* createData();
    void deleteData(void * data);
    MD5 m_md5;
    unsigned char* m_keyBuffer;
};

class HelloWorldTypeSupport : public eprosima::fastdds::dds::TypeSupport
{
private:
    using eprosima::fastdds::dds::TypeSupport::TypeSupport;

public:
    HelloWorldTypeSupport()
        : eprosima::fastdds::dds::TypeSupport(new HelloWorldPubSubType())
    {}

    eprosima::fastrtps::types::ReturnCode_t register_type(
            eprosima::fastdds::dds::DomainParticipant* participant,
            std::string type_name) const
    {
        return eprosima::fastdds::dds::TypeSupport::register_type(participant, type_name);
    }

    virtual ~HelloWorldTypeSupport() {}
};

#endif // _HelloWorld_PUBSUBTYPE_H_
