// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file HelloWorldTypeObject.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "HelloWorld.h"
#include "HelloWorldTypeObject.h"
#include <utility>
#include <sstream>
#include <fastrtps/rtps/common/SerializedPayload.h>
#include <fastrtps/utils/md5.h>
#include <fastrtps/types/TypeObjectFactory.h>
#include <fastrtps/types/TypeNamesGenerator.h>
#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

using namespace eprosima::fastrtps::rtps;

HelloWorldTypeFactory::HelloWorldTypeFactory()
{
    registerTypes();
}

HelloWorldTypeFactory::~HelloWorldTypeFactory()
{
}

void HelloWorldTypeFactory::registerTypes()
{
    TypeObjectFactory *factory = TypeObjectFactory::GetInstance();
    factory->AddTypeObject("HelloWorld", GetHelloWorldIdentifier(), GetHelloWorldObject());
}

const TypeIdentifier* HelloWorldTypeFactory::GetTypeIdentifier(const std::string &type_name)
{
    // Try general factory
    const TypeIdentifier *type_id = TypeObjectFactory::GetInstance()->GetTypeIdentifier(type_name);
    if (type_id == nullptr)
    {
        if (m_Aliases.find(type_name) != m_Aliases.end())
        {
            return GetTypeIdentifier(m_Aliases.at(type_name));
        }

        // Try users types.
        if (type_name == "HelloWorld") return GetHelloWorldIdentifier();
    }
    else
    {
        return type_id;
    }

    return nullptr;
}

const TypeObject* HelloWorldTypeFactory::GetTypeObject(const std::string &type_name)
{
    // Try general factory
    const TypeObject *type_id = TypeObjectFactory::GetInstance()->GetTypeObject(type_name);
    if (type_id == nullptr)
    {
        if (m_Aliases.find(type_name) != m_Aliases.end())
        {
            return GetTypeObject(m_Aliases.at(type_name));
        }

        // Try users types.
        if (type_name == "HelloWorld")
        {
            GetHelloWorldIdentifier();
            return GetTypeObject("HelloWorld");
        }
    }

    return type_id;
}

const TypeIdentifier* HelloWorldTypeFactory::GetHelloWorldIdentifier()
{
    const TypeIdentifier * c_identifier = GetTypeIdentifier("HelloWorld");
    if (c_identifier != nullptr)
    {
        return c_identifier;
    }

    const TypeObject* c_type_object = GetTypeObject("HelloWorld");
    if (c_type_object != nullptr)
    {
        return &(c_type_object->minimal().struct_type().header().base_type());
    }
    else
    {
        const TypeObject* type_object = GetHelloWorldObject();
        // Just for other methods
        return &(type_object->minimal().struct_type().header().base_type());
    }
}

const TypeObject* HelloWorldTypeFactory::GetHelloWorldObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::GetInstance()->GetTypeObject("HelloWorld");
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false);

    MemberId memberId = 0;
    MinimalStructMember mst_index;
    mst_index.common().member_id(memberId++);
    mst_index.common().member_flags().TRY_CONSTRUCT1(false);
    mst_index.common().member_flags().TRY_CONSTRUCT2(false);
    mst_index.common().member_flags().IS_EXTERNAL(false);
    mst_index.common().member_flags().IS_OPTIONAL(false);
    mst_index.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_index.common().member_flags().IS_KEY(false);
    mst_index.common().member_flags().IS_DEFAULT(false);
    {
        std::string cppType = "uint32_t";
        if (cppType == "long double")
        {
            cppType = "longdouble";
        }
        mst_index.common().member_type_id(*GetTypeIdentifier(cppType));
    }

    MD5 index_hash("index");
    for(int i = 0; i < 4; ++i)
    {
        mst_index.detail().name_hash()[i] = index_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_index);

    MinimalStructMember mst_message;
    mst_message.common().member_id(memberId++);
    mst_message.common().member_flags().TRY_CONSTRUCT1(false);
    mst_message.common().member_flags().TRY_CONSTRUCT2(false);
    mst_message.common().member_flags().IS_EXTERNAL(false);
    mst_message.common().member_flags().IS_OPTIONAL(false);
    mst_message.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_message.common().member_flags().IS_KEY(false);
    mst_message.common().member_flags().IS_DEFAULT(false);
    mst_message.common().member_type_id(*TypeObjectFactory::GetInstance()->GetStringIdentifier(255, false));


    MD5 message_hash("message");
    for(int i = 0; i < 4; ++i)
    {
        mst_message.detail().name_hash()[i] = message_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_message);


    // Header
    type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];
    // TODO De momento lo haremos sólo con miembros... ¿también con flags?
    // Como no soportamos de momento tipos recursivos, esto debería bastar.
    SerializedPayload_t payload(static_cast<uint32_t>(
        type_object->minimal().struct_type().member_seq().size() * sizeof(MinimalStructMember) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size); // Object that manages the raw buffer.

    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
            eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;
    // Serialize encapsulation

    for (MinimalStructMember &st : type_object->minimal().struct_type().member_seq())
    {
        ser << st;
    }
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        type_object->minimal().struct_type().header().base_type().equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::GetInstance()->AddTypeObject("HelloWorld", &(type_object->minimal().struct_type().header().base_type()), type_object);
    delete type_object;
    return GetTypeObject("HelloWorld");
}
