// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group Common;

fileHeader(ctx, file, description) ::= <<
// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file $file$
 * $description$
 *
 * This file was generated by the tool $ctx.product$gen.
 */
>>

paramRetType(typecode) ::= <<
$if(typecode)$
$typecode.cppTypename$
$else$
void
$endif$
>>

paramTypeByRef(typecode) ::= <<
$typecode.cppTypename$&
>>

paramDeclsByValue(params, separatorInicial) ::= <<
$if(params)$$separatorInicial$$endif$$params : {param |/*$param.comment$*/ $paramTypeByValue(typecode=param.typecode)$ $param.name$}; separator=", "$
>>

paramDeclsByRef(params, separatorInicial) ::= <<
$if(params)$$separatorInicial$$endif$$params : {param |/*$param.comment$*/ $paramTypeByRef(typecode=param.typecode)$ $param.name$}; separator=", "$
>>

paramDeclsOnlyOutByRef(params, separatorInicial) ::= <<
$if(params)$$separatorInicial$$endif$$params : {param | /*$param.comment$*/ $if(param.output)$$paramTypeByRef(typecode=param.typecode)$$else$$paramTypeByValue(typecode=param.typecode)$$endif$ $param.name$}; separator=", "$
>>

extractParams(params, separatorInicial) ::= <<
$if(params)$$separatorInicial$$endif$$params : {param | $param.name$};separator=", "$
>>

/** Extensions **/

keyFunctionHeaders(type) ::= <<
/*!
 * @brief This function returns the maximum serialized size of the Key of an object
 * depending on the buffer alignment.
 * @param current_alignment Buffer alignment.
 * @return Maximum serialized size.
 */
eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

/*!
 * @brief This function tells you if the Key has been defined for this type
 */
eProsima_user_DllExport static bool isKeyDefined();

/*!
 * @brief This function serializes the key members of an object using CDR serialization.
 * @param cdr CDR serialization object.
 */
eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
>>

keyFunctionHeadersStruct(ctx, parent, struct) ::= <<
$keyFunctionHeaders(struct)$
>>

keyFunctionHeadersUnion(ctx, parent, union) ::= <<
$keyFunctionHeaders(union)$
>>

keyFunctionSourcesStruct(ctx, parent, struct) ::= <<
size_t $struct.scopedname$::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;

    $if(struct.inheritances)$    $struct.inheritances : {current_alignment += $it.scopedname$::getKeyMaxCdrSerializedSize(current_alignment);}; separator="\n"$ $endif$

    $struct.members : { member | $if(boolean_converter.(member.annotations.("Key").values.("value").value))$ $max_serialized_size(ctx=ctx, typecode=member.typecode, var="current_align")$ $endif$}; separator="\n"$

    return current_align;
}

bool $struct.scopedname$::isKeyDefined()
{
    $if(struct.inheritances)$    $struct.inheritances : {if ($it.scopedname$::isKeyDefined())$\n$        return true;$\n$}; separator="    else\n    "$ $endif$   return $if(struct.hasKey)$true$else$false$endif$;
}

void $struct.scopedname$::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
    $if(struct.inheritances)$    $struct.inheritances : {$it.scopedname$::serializeKey(scdr);}; separator="\n"$ $endif$
	$struct.members : { member |$if(boolean_converter.(member.annotations.("Key").values.("value").value))$ $object_serialization(ctx=ctx, object=member, preffix="m_")$ $endif$ }; separator="\n"$
}

>>

fwd_decl(ctx, parent, type) ::= <<
class $type.name$;

>>

boolean_converter ::= [
    "true":"true",
    default:
]

/**** NEW OUR_TYPES ****/
