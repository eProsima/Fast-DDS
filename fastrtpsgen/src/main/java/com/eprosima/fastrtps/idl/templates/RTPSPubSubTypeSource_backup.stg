// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group ProtocolHeader;

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "RTPSPubSubType.cpp"], description=["This header file contains the implementation of the serialization functions."])$


#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

#include "$ctx.filename$PubSubType.h"

$ctx.filename$PubSubType::$ctx.filename$PubSubType()
{
	setName("$ctx.m_lastStructure$");
	m_typeSize = (uint32_t)$ctx.m_lastStructure$::getMaxCdrSerializedSize();
	m_isGetKeyDefined = $ctx.m_lastStructure$::isKeyDefined();
	m_keyBuffer = (unsigned char*)malloc($ctx.m_lastStructure$::getKeyMaxCdrSerializedSize()>16 ? $ctx.m_lastStructure$::getKeyMaxCdrSerializedSize() : 16);
}

$ctx.filename$PubSubType::~$ctx.filename$PubSubType()
{
	if(m_keyBuffer!=nullptr)
		delete(m_keyBuffer);
}

bool $ctx.filename$PubSubType::serialize(void *data, SerializedPayload_t *payload)
{
	$ctx.m_lastStructure$ *p_type = ($ctx.m_lastStructure$*) data;

	// Object that manages the raw buffer.
	eprosima::fastcdr::FastBuffer fastbuffer((char*) payload->data, payload->max_size);
	// Object that serializes the data.
	eprosima::fastcdr::Cdr ser(fastbuffer,eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS);
	//Select the correct endianess
	payload->encapsulation = CDR_LE;
	// Serialize the object:
	p_type->serialize(ser);
	//Get the serialized length
    payload->length = (uint16_t)ser.getSerializedDataLength();

	return true;
}

bool $ctx.filename$PubSubType::deserialize(SerializedPayload_t* payload, void* data)
{
	//CONVERT DATA to pointer of your type
	$ctx.m_lastStructure$* p_type = ($ctx.m_lastStructure$*) data;

	// Object that manages the raw buffer.
	eprosima::fastcdr::FastBuffer fastbuffer((char*)payload->data, payload->length);
	//select the correct endianess
	eprosima::fastcdr::Cdr::Endianness endian = payload->encapsulation == CDR_LE ? eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS : eprosima::fastcdr::Cdr::BIG_ENDIANNESS;
	// Object that deserializes the data.
	eprosima::fastcdr::Cdr deser(fastbuffer,endian);
	//deserialize the object:
	p_type->deserialize(deser);
	return true;
}

void* $ctx.filename$PubSubType::createData()
{
	return (void*)new $ctx.m_lastStructure$();
}

void $ctx.filename$PubSubType::deleteData(void* data)
{
	delete(($ctx.m_lastStructure$*)data);
}

bool $ctx.filename$PubSubType::getKey(void *data, InstanceHandle_t* handle)
{
	if(!m_isGetKeyDefined)
		return false;

	$ctx.m_lastStructure$* p_type = ($ctx.m_lastStructure$*) data;

	// Object that manages the raw buffer.
	eprosima::fastcdr::FastBuffer fastbuffer((char*)m_keyBuffer,$ctx.m_lastStructure$::getKeyMaxCdrSerializedSize());
	// Object that serializes the data.
	eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS);

	p_type->serializeKey(ser);
	if($ctx.m_lastStructure$::getKeyMaxCdrSerializedSize()>16)
	{
		m_md5.init();
		m_md5.update(m_keyBuffer,(unsigned int)ser.getSerializedDataLength());
		m_md5.finalize();
		for(uint8_t i = 0;i<16;++i)
    	{
        	handle->value[i] = m_md5.digest[i];
    	}
    	}
    else
    {
    	for(uint8_t i = 0;i<16;++i)
    	{
        	handle->value[i] = m_keyBuffer[i];
    	}
    }

	return true;
}

>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$

>>

annotation(ctx, annotation) ::= <<>>

interface(ctx, parent, interface, export_list) ::= <<
$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$

>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>

bitmask_type(ctx, parent, bitmask) ::= <<>>

bitset_type(ctx, parent, bitset) ::= <<>>
