// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group ProtocolHeader;

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "SerializationSource.cpp"], description=["This file contains serialization code."])$

#include "$ctx.filename$Serialization.h"

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <inttypes.h>
#include <string.h>

$ctx.directIncludeDependencies:{#include "$it$Serialization.h"}; separator="\n"$

$definitions; separator="\n"$

>>

struct_type(ctx, parent, struct) ::= <<
void print$struct.name$($struct.name$* topic)
{
    printf("$struct.name$: { \n");
    $struct.members:{$member_print(typecode=it.typecode, name=it.name, name=it.name)$}; separator="\n"$
    printf("}\n");
}

void initialize$struct.name$($struct.name$* topic)
{
    $struct.members:{$member_assignment(typecode=it.typecode, name=it.name, name=it.name)$}; separator="\n"$
}

int compare$struct.name$($struct.name$* a, $struct.name$* b)
{
    $struct.members:{$member_comparision(typecode=it.typecode, name=it.name, name=it.name)$}; separator="\n"$
    return 1;
}

>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>

// ========================================================================================
//                                      ASSIGNMENT
// ========================================================================================
member_assignment(typecode, name, originName) ::= <<
$if(typecode.isType_7)$
topic->$name$(static_cast<$typecode.cTypename$>(rand()%2==1));
$elseif(typecode.primitive)$
topic->$name$(static_cast<$typecode.cTypename$>(rand()));
$elseif(typecode.isType_d)$
topic->$name$("AAAAA");
$elseif(typecode.isType_e)$
$sequence_assigment(typecode=typecode, name=name)$
$elseif(typecode.isType_f)$
$array_assigment(typecode=typecode, name=name, originName=originName, dimensions=typecode.dimensions)$
$else$
initialize$typecode.cTypename$(&topic->$name$());
$endif$
>>

array_member_assignment(typecode, name, originName) ::= <<
$if(typecode.isType_7)$
topic->$name$ = static_cast<$typecode.cTypename$>(rand()%2==1);
$elseif(typecode.primitive)$
topic->$name$ = static_cast<$typecode.cTypename$>(rand());
$elseif(typecode.isType_d)$
topic->$name$ = "AAAAA";
$elseif(typecode.isType_e)$
$sequence_assigment(typecode=typecode, name=name)$
$elseif(typecode.isType_f)$
$array_assigment(typecode=typecode, name=name, originName=originName, dimensions=typecode.dimensions)$
$else$
initialize$typecode.cTypename$(&topic->$name$);
$endif$
>>

sequence_member_assignment(typecode, name, originName) ::= <<
$if(typecode.isType_7)$
topic->$name$().push_back(static_cast<$typecode.cTypename$>(rand()%2==1));
$elseif(typecode.primitive)$
topic->$name$().push_back(static_cast<$typecode.cTypename$>(rand()));
$elseif(typecode.isType_d)$
topic->$name$().push_back("AAAAA");
$elseif(typecode.isType_e)$
$sequence_assigment(typecode=typecode, name=name)$
$elseif(typecode.isType_f)$
$array_assigment(typecode=typecode, name=name, originName=originName, dimensions=typecode.dimensions)$
$else$
$typecode.cTypename$ aux$typecode.cTypename$_$name$;
initialize$typecode.cTypename$(&aux$typecode.cTypename$_$name$);
topic->$name$().push_back(aux$typecode.cTypename$_$name$);
$endif$
>>

sequence_assigment(typecode, name) ::= <<
for(int i = 0; i < $typecode.maxsize$; ++i)
{
    $sequence_member_assignment(typecode=typecode.contentTypeCode, name=name, originName=name)$
}
>>

array_assigment(typecode, name, originalName, dimensions) ::= <<
$if(rest(dimensions))$
for(int i$length(dimensions)$ = 0; i$length(dimensions)$ < topic->$name$().size(); ++i$length(dimensions)$)
{
    $array_assigment(typecode=typecode, name=indexName(name=name, suffix=length(dimensions)), originName=originName, dimensions=rest(dimensions))$
}
$elseif(typecode.contentTypeCode.primitive)$
memset(&topic->$name$(), static_cast<$typecode.cTypename$>(rand()), sizeof(topic->$name$()));
$elseif(typecode.contentTypeCode.isType_d)$
for(int i = 0; i < topic->$name$().size(); ++i)
{
    $array_member_assignment(typecode=typecode.contentTypeCode, name=indexName(name=name), originName=name)$
}
$else$
for(int i = 0; i < topic->$name$().size(); ++i)
{
    $array_member_assignment(typecode=typecode.contentTypeCode, name=indexName(name=name), originName=name)$
}
$endif$
>>

// ========================================================================================
//                                         PRINT
// ========================================================================================
member_print(typecode, name, originName) ::= <<
$if(typecode.primitive)$
printf("$name$: 0x%" PRIx64 "\n", (uint64_t)topic->$name$());
$elseif(typecode.isType_d)$
printf("$name$: %s\n", topic->$name$().c_str());
$elseif(typecode.isType_e)$
$sequence_print(typecode=typecode, name=name)$
$elseif(typecode.isType_f)$
$array_print(typecode=typecode, name=name, originName=originName, dimensions=typecode.dimensions)$
$else$
print$typecode.cTypename$(&topic->$name$());
$endif$
>>

array_member_print(typecode, name, originName) ::= <<
$if(typecode.primitive)$
printf("$name$: 0x%" PRIx64 "\n", (uint64_t)topic->$name$);
$elseif(typecode.isType_d)$
printf("$name$: %s\n", topic->$name$.c_str());
$elseif(typecode.isType_e)$
$sequence_print(typecode=typecode, name=name)$
$elseif(typecode.isType_f)$
$array_print(typecode=typecode, name=name, originName=originName, dimensions=typecode.dimensions)$
$else$
print$typecode.cTypename$(&topic->$name$);
$endif$
>>

sequence_print(typecode, name) ::= <<
printf("$name$_size: 0x%" PRIx64 "\n", (uint64_t)topic->$name$().size());
$if(typecode.contentTypeCode.primitive)$
printf("$name$: ");
$print_sequence(name)$
$else$
printf("$name$: \n");
for(int i = 0; i < topic->$name$().size(); ++i)
{
    $array_member_print(typecode=typecode.contentTypeCode, name=indexName(name=name), originName=name)$
}
$endif$
>>

array_print(typecode, name, originalName, dimensions) ::= <<
$if(rest(dimensions))$
printf("$name$: \n");
for(int i$length(dimensions)$ = 0; i$length(dimensions)$ < topic->$name$().size(); ++i$length(dimensions)$)
{
    $array_print(typecode=typecode, name=indexName(name=name, suffix=length(dimensions)), originName=originName, dimensions=rest(dimensions))$
}
$elseif(typecode.contentTypeCode.primitive)$
printf("$name$: ");
$print_array(name=name)$
$elseif(typecode.contentTypeCode.isType_d)$
printf("$name$: \n");
for(int i = 0; i < topic->$name$().size(); ++i)
{
    $array_member_print(typecode=typecode.contentTypeCode, name=indexName(name=name), originName=name)$
}
$else$
printf("$name$: \n");
for(int i = 0; i < topic->$name$().size(); ++i)
{
    $array_member_print(typecode=typecode.contentTypeCode, name=indexName(name=name), originName=name)$
}
$endif$
>>

print_sequence(name) ::= <<
for(int i = 0; i < topic->$name$().size(); ++i)
{
    printf("%" PRIx64 " ", (uint64_t)topic->$name$()[i]);
}
printf("\n");
>>

print_array(name) ::= <<
for(int i = 0; i < topic->$name$().size(); ++i)
{
    printf("%" PRIx64 " ", (uint64_t)topic->$name$()[i]);
}
printf("\n");
>>

// ========================================================================================
//                                      COMPARISION
// ========================================================================================
member_comparision(typecode, name, originName) ::= <<
$if(typecode.primitive)$
if (a->$name$() != b->$name$()) return 0;
$elseif(typecode.isType_d)$
if (a->$name$() != b->$name$()) return 0;
$elseif(typecode.isType_e)$
$sequence_comparision(typecode=typecode, name=name)$
$elseif(typecode.isType_f)$
$array_comparision(typecode=typecode, name=name, originName=originName, dimensions=typecode.dimensions)$
$else$
if (!compare$typecode.cTypename$(&a->$name$(), &b->$name$())) return 0;
$endif$
>>

array_member_comparision(typecode, name, originName) ::= <<
$if(typecode.primitive)$
if (a->$name$ != b->$name$) return 0;
$elseif(typecode.isType_d)$
if (a->$name$ != b->$name$) return 0;
$elseif(typecode.isType_e)$
$sequence_comparision(typecode=typecode, name=name)$
$elseif(typecode.isType_f)$
$array_comparision(typecode=typecode, name=name, originName=originName, dimensions=typecode.dimensions)$
$else$
if (!compare$typecode.cTypename$(&a->$name$, &b->$name$)) return 0;
$endif$
>>

sequence_comparision(typecode, name) ::= <<
for(int i = 0; i < a->$name$().size(); ++i)
{
    $array_member_comparision(typecode=typecode.contentTypeCode, name=indexName(name=name), originName=name)$
}
>>

array_comparision(typecode, name, originalName, dimensions) ::= <<
$if(rest(dimensions))$
for(int i$length(dimensions)$ = 0; i$length(dimensions)$ < a->$name$().size(); ++i$length(dimensions)$)
{
    $array_comparision(typecode=typecode, name=indexName(name=name, suffix=length(dimensions)), originName=originName, dimensions=rest(dimensions))$
}
$elseif(typecode.contentTypeCode.primitive)$
if (memcmp(&a->$name$(), &b->$name$(), sizeof(a->$name$())) != 0) return 0;
$elseif(typecode.contentTypeCode.isType_d)$
for(int i = 0; i < a->$name$().size(); ++i)
{
    $array_member_comparision(typecode=typecode.contentTypeCode, name=indexName(name=name), originName=name)$
}
$else$
for(int i = 0; i < a->$name$().size(); ++i)
{
    $array_member_comparision(typecode=typecode.contentTypeCode, name=indexName(name=name), originName=name)$
}
$endif$
>>

// ========================================================================================
//                                      AUXILIAR
// ========================================================================================
indexName(name, suffix) ::= <<$name$()[i$suffix$]>>