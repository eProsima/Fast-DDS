// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TypeObject.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_EPROSIMA_FASTDDS_DDS_XTYPES_TYPEOBJECT_H_
#define _FAST_DDS_GENERATED_EPROSIMA_FASTDDS_DDS_XTYPES_TYPEOBJECT_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/optional.hpp>



#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(TYPEOBJECT_SOURCE)
#define TYPEOBJECT_DllAPI __declspec( dllexport )
#else
#define TYPEOBJECT_DllAPI __declspec( dllimport )
#endif // TYPEOBJECT_SOURCE
#else
#define TYPEOBJECT_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define TYPEOBJECT_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima



namespace eprosima {
    namespace fastdds {
        namespace dds {
            namespace xtypes {
                typedef uint8_t EquivalenceKind;

                const uint8_t EK_MINIMAL = 0xF1;
                const uint8_t EK_COMPLETE = 0xF2;
                const uint8_t EK_BOTH = 0xF3;
                typedef uint8_t TypeKind;

                const uint8_t TK_NONE = 0x00;
                const uint8_t TK_BOOLEAN = 0x01;
                const uint8_t TK_BYTE = 0x02;
                const uint8_t TK_INT16 = 0x03;
                const uint8_t TK_INT32 = 0x04;
                const uint8_t TK_INT64 = 0x05;
                const uint8_t TK_UINT16 = 0x06;
                const uint8_t TK_UINT32 = 0x07;
                const uint8_t TK_UINT64 = 0x08;
                const uint8_t TK_FLOAT32 = 0x09;
                const uint8_t TK_FLOAT64 = 0x0A;
                const uint8_t TK_FLOAT128 = 0x0B;
                const uint8_t TK_INT8 = 0x0C;
                const uint8_t TK_UINT8 = 0x0D;
                const uint8_t TK_CHAR8 = 0x10;
                const uint8_t TK_CHAR16 = 0x11;
                const uint8_t TK_STRING8 = 0x20;
                const uint8_t TK_STRING16 = 0x21;
                const uint8_t TK_ALIAS = 0x30;
                const uint8_t TK_ENUM = 0x40;
                const uint8_t TK_BITMASK = 0x41;
                const uint8_t TK_ANNOTATION = 0x50;
                const uint8_t TK_STRUCTURE = 0x51;
                const uint8_t TK_UNION = 0x52;
                const uint8_t TK_BITSET = 0x53;
                const uint8_t TK_SEQUENCE = 0x60;
                const uint8_t TK_ARRAY = 0x61;
                const uint8_t TK_MAP = 0x62;
                typedef uint8_t TypeIdentiferKind;

                const uint8_t TI_STRING8_SMALL = 0x70;
                const uint8_t TI_STRING8_LARGE = 0x71;
                const uint8_t TI_STRING16_SMALL = 0x72;
                const uint8_t TI_STRING16_LARGE = 0x73;
                const uint8_t TI_PLAIN_SEQUENCE_SMALL = 0x80;
                const uint8_t TI_PLAIN_SEQUENCE_LARGE = 0x81;
                const uint8_t TI_PLAIN_ARRAY_SMALL = 0x90;
                const uint8_t TI_PLAIN_ARRAY_LARGE = 0x91;
                const uint8_t TI_PLAIN_MAP_SMALL = 0xA0;
                const uint8_t TI_PLAIN_MAP_LARGE = 0xA1;
                const uint8_t TI_STRONGLY_CONNECTED_COMPONENT = 0xB0;
                const int32_t MEMBER_NAME_MAX_LENGTH = 256;
                typedef eprosima::fastcdr::fixed_string<256> MemberName;

                const int32_t TYPE_NAME_MAX_LENGTH = 256;
                typedef eprosima::fastcdr::fixed_string<256> QualifiedTypeName;

                typedef uint8_t PrimitiveTypeId;

                typedef std::array<uint8_t, 14> EquivalenceHash;

                typedef std::array<uint8_t, 4> NameHash;

                typedef uint32_t LBound;

                typedef std::vector<eprosima::fastdds::dds::xtypes::LBound> LBoundSeq;

                const eprosima::fastdds::dds::xtypes::LBound INVALID_LBOUND = 0;
                typedef uint8_t SBound;

                typedef std::vector<eprosima::fastdds::dds::xtypes::SBound> SBoundSeq;

                const eprosima::fastdds::dds::xtypes::SBound INVALID_SBOUND = 0;
                /*!
                 * @brief This class represents the union TypeObjectHashId defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class TypeObjectHashId
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport TypeObjectHashId();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~TypeObjectHashId();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::TypeObjectHashId that will be copied.
                     */
                    eProsima_user_DllExport TypeObjectHashId(
                            const TypeObjectHashId& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::TypeObjectHashId that will be copied.
                     */
                    eProsima_user_DllExport TypeObjectHashId(
                            TypeObjectHashId&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::TypeObjectHashId that will be copied.
                     */
                    eProsima_user_DllExport TypeObjectHashId& operator =(
                            const TypeObjectHashId& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::TypeObjectHashId that will be copied.
                     */
                    eProsima_user_DllExport TypeObjectHashId& operator =(
                            TypeObjectHashId&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::TypeObjectHashId object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const TypeObjectHashId& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::TypeObjectHashId object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const TypeObjectHashId& x) const;

                    /*!
                     * @brief This function sets the discriminator value.
                     * @param __d New value for the discriminator.
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
                     */
                    eProsima_user_DllExport void _d(
                            uint8_t __d);

                    /*!
                     * @brief This function returns the value of the discriminator.
                     * @return Value of the discriminator
                     */
                    eProsima_user_DllExport uint8_t _d() const;

                    /*!
                     * @brief This function returns a reference to the discriminator.
                     * @return Reference to the discriminator.
                     */
                    eProsima_user_DllExport uint8_t& _d();

                    /*!
                     * @brief This function copies the value in member hash
                     * @param _hash New value to be copied in member hash
                     */
                    eProsima_user_DllExport void hash(
                            const eprosima::fastdds::dds::xtypes::EquivalenceHash& _hash);

                    /*!
                     * @brief This function moves the value in member hash
                     * @param _hash New value to be moved in member hash
                     */
                    eProsima_user_DllExport void hash(
                            eprosima::fastdds::dds::xtypes::EquivalenceHash&& _hash);

                    /*!
                     * @brief This function returns a constant reference to member hash
                     * @return Constant reference to member hash
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::EquivalenceHash& hash() const;

                    /*!
                     * @brief This function returns a reference to member hash
                     * @return Reference to member hash
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::EquivalenceHash& hash();

                private:

                    uint8_t m__d;

                    eprosima::fastdds::dds::xtypes::EquivalenceHash m_hash{0};
                };
                /*!
                 * @brief This enumeration represents the MemberFlag bitflags defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                enum MemberFlagBits : uint16_t
                {
                    TRY_CONSTRUCT1 = 0x01ull << 0,
                    TRY_CONSTRUCT2 = 0x01ull << 1,
                    IS_EXTERNAL = 0x01ull << 2,
                    IS_OPTIONAL = 0x01ull << 3,
                    IS_MUST_UNDERSTAND = 0x01ull << 4,
                    IS_KEY = 0x01ull << 5,
                    IS_DEFAULT = 0x01ull << 6
                };
                typedef uint16_t MemberFlag;
                typedef eprosima::fastdds::dds::xtypes::MemberFlag CollectionElementFlag;

                typedef eprosima::fastdds::dds::xtypes::MemberFlag StructMemberFlag;

                typedef eprosima::fastdds::dds::xtypes::MemberFlag UnionMemberFlag;

                typedef eprosima::fastdds::dds::xtypes::MemberFlag UnionDiscriminatorFlag;

                typedef eprosima::fastdds::dds::xtypes::MemberFlag EnumeratedLiteralFlag;

                typedef eprosima::fastdds::dds::xtypes::MemberFlag AnnotationParameterFlag;

                typedef eprosima::fastdds::dds::xtypes::MemberFlag AliasMemberFlag;

                typedef eprosima::fastdds::dds::xtypes::MemberFlag BitflagFlag;

                typedef eprosima::fastdds::dds::xtypes::MemberFlag BitsetMemberFlag;

                const uint16_t MemberFlagMinimalMask = 0x003f;
                /*!
                 * @brief This enumeration represents the TypeFlag bitflags defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                enum TypeFlagBits : uint16_t
                {
                    IS_FINAL = 0x01ull << 0,
                    IS_APPENDABLE = 0x01ull << 1,
                    IS_MUTABLE = 0x01ull << 2,
                    IS_NESTED = 0x01ull << 3,
                    IS_AUTOID_HASH = 0x01ull << 4
                };
                typedef uint16_t TypeFlag;
                typedef eprosima::fastdds::dds::xtypes::TypeFlag StructTypeFlag;

                typedef eprosima::fastdds::dds::xtypes::TypeFlag UnionTypeFlag;

                typedef eprosima::fastdds::dds::xtypes::TypeFlag CollectionTypeFlag;

                typedef eprosima::fastdds::dds::xtypes::TypeFlag AnnotationTypeFlag;

                typedef eprosima::fastdds::dds::xtypes::TypeFlag AliasTypeFlag;

                typedef eprosima::fastdds::dds::xtypes::TypeFlag EnumTypeFlag;

                typedef eprosima::fastdds::dds::xtypes::TypeFlag BitmaskTypeFlag;

                typedef eprosima::fastdds::dds::xtypes::TypeFlag BitsetTypeFlag;

                const uint16_t TypeFlagMinimalMask = 0x0007;
                class TypeIdentifier;

                /*!
                 * @brief This class represents the structure StringSTypeDefn defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class StringSTypeDefn
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport StringSTypeDefn();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~StringSTypeDefn();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::StringSTypeDefn that will be copied.
                     */
                    eProsima_user_DllExport StringSTypeDefn(
                            const StringSTypeDefn& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::StringSTypeDefn that will be copied.
                     */
                    eProsima_user_DllExport StringSTypeDefn(
                            StringSTypeDefn&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::StringSTypeDefn that will be copied.
                     */
                    eProsima_user_DllExport StringSTypeDefn& operator =(
                            const StringSTypeDefn& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::StringSTypeDefn that will be copied.
                     */
                    eProsima_user_DllExport StringSTypeDefn& operator =(
                            StringSTypeDefn&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::StringSTypeDefn object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const StringSTypeDefn& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::StringSTypeDefn object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const StringSTypeDefn& x) const;

                    /*!
                     * @brief This function sets a value in member bound
                     * @param _bound New value for member bound
                     */
                    eProsima_user_DllExport void bound(
                            eprosima::fastdds::dds::xtypes::SBound _bound);

                    /*!
                     * @brief This function returns the value of member bound
                     * @return Value of member bound
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::SBound bound() const;

                    /*!
                     * @brief This function returns a reference to member bound
                     * @return Reference to member bound
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::SBound& bound();

                private:

                    eprosima::fastdds::dds::xtypes::SBound m_bound{0};

                };
                /*!
                 * @brief This class represents the structure StringLTypeDefn defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class StringLTypeDefn
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport StringLTypeDefn();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~StringLTypeDefn();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::StringLTypeDefn that will be copied.
                     */
                    eProsima_user_DllExport StringLTypeDefn(
                            const StringLTypeDefn& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::StringLTypeDefn that will be copied.
                     */
                    eProsima_user_DllExport StringLTypeDefn(
                            StringLTypeDefn&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::StringLTypeDefn that will be copied.
                     */
                    eProsima_user_DllExport StringLTypeDefn& operator =(
                            const StringLTypeDefn& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::StringLTypeDefn that will be copied.
                     */
                    eProsima_user_DllExport StringLTypeDefn& operator =(
                            StringLTypeDefn&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::StringLTypeDefn object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const StringLTypeDefn& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::StringLTypeDefn object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const StringLTypeDefn& x) const;

                    /*!
                     * @brief This function sets a value in member bound
                     * @param _bound New value for member bound
                     */
                    eProsima_user_DllExport void bound(
                            eprosima::fastdds::dds::xtypes::LBound _bound);

                    /*!
                     * @brief This function returns the value of member bound
                     * @return Value of member bound
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::LBound bound() const;

                    /*!
                     * @brief This function returns a reference to member bound
                     * @return Reference to member bound
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::LBound& bound();

                private:

                    eprosima::fastdds::dds::xtypes::LBound m_bound{0};

                };
                /*!
                 * @brief This class represents the structure PlainCollectionHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class PlainCollectionHeader
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport PlainCollectionHeader();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~PlainCollectionHeader();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::PlainCollectionHeader that will be copied.
                     */
                    eProsima_user_DllExport PlainCollectionHeader(
                            const PlainCollectionHeader& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::PlainCollectionHeader that will be copied.
                     */
                    eProsima_user_DllExport PlainCollectionHeader(
                            PlainCollectionHeader&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::PlainCollectionHeader that will be copied.
                     */
                    eProsima_user_DllExport PlainCollectionHeader& operator =(
                            const PlainCollectionHeader& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::PlainCollectionHeader that will be copied.
                     */
                    eProsima_user_DllExport PlainCollectionHeader& operator =(
                            PlainCollectionHeader&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::PlainCollectionHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const PlainCollectionHeader& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::PlainCollectionHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const PlainCollectionHeader& x) const;

                    /*!
                     * @brief This function sets a value in member equiv_kind
                     * @param _equiv_kind New value for member equiv_kind
                     */
                    eProsima_user_DllExport void equiv_kind(
                            eprosima::fastdds::dds::xtypes::EquivalenceKind _equiv_kind);

                    /*!
                     * @brief This function returns the value of member equiv_kind
                     * @return Value of member equiv_kind
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::EquivalenceKind equiv_kind() const;

                    /*!
                     * @brief This function returns a reference to member equiv_kind
                     * @return Reference to member equiv_kind
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::EquivalenceKind& equiv_kind();


                    /*!
                     * @brief This function copies the value in member element_flags
                     * @param _element_flags New value to be copied in member element_flags
                     */
                    eProsima_user_DllExport void element_flags(
                            const eprosima::fastdds::dds::xtypes::CollectionElementFlag& _element_flags);

                    /*!
                     * @brief This function moves the value in member element_flags
                     * @param _element_flags New value to be moved in member element_flags
                     */
                    eProsima_user_DllExport void element_flags(
                            eprosima::fastdds::dds::xtypes::CollectionElementFlag&& _element_flags);

                    /*!
                     * @brief This function returns a constant reference to member element_flags
                     * @return Constant reference to member element_flags
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CollectionElementFlag& element_flags() const;

                    /*!
                     * @brief This function returns a reference to member element_flags
                     * @return Reference to member element_flags
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CollectionElementFlag& element_flags();

                private:

                    eprosima::fastdds::dds::xtypes::EquivalenceKind m_equiv_kind{0};
                    eprosima::fastdds::dds::xtypes::CollectionElementFlag m_element_flags{0};

                };
                /*!
                 * @brief This class represents the structure PlainSequenceSElemDefn defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class PlainSequenceSElemDefn
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport PlainSequenceSElemDefn();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~PlainSequenceSElemDefn();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn that will be copied.
                     */
                    eProsima_user_DllExport PlainSequenceSElemDefn(
                            const PlainSequenceSElemDefn& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn that will be copied.
                     */
                    eProsima_user_DllExport PlainSequenceSElemDefn(
                            PlainSequenceSElemDefn&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn that will be copied.
                     */
                    eProsima_user_DllExport PlainSequenceSElemDefn& operator =(
                            const PlainSequenceSElemDefn& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn that will be copied.
                     */
                    eProsima_user_DllExport PlainSequenceSElemDefn& operator =(
                            PlainSequenceSElemDefn&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const PlainSequenceSElemDefn& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const PlainSequenceSElemDefn& x) const;

                    /*!
                     * @brief This function copies the value in member header
                     * @param _header New value to be copied in member header
                     */
                    eProsima_user_DllExport void header(
                            const eprosima::fastdds::dds::xtypes::PlainCollectionHeader& _header);

                    /*!
                     * @brief This function moves the value in member header
                     * @param _header New value to be moved in member header
                     */
                    eProsima_user_DllExport void header(
                            eprosima::fastdds::dds::xtypes::PlainCollectionHeader&& _header);

                    /*!
                     * @brief This function returns a constant reference to member header
                     * @return Constant reference to member header
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::PlainCollectionHeader& header() const;

                    /*!
                     * @brief This function returns a reference to member header
                     * @return Reference to member header
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::PlainCollectionHeader& header();


                    /*!
                     * @brief This function sets a value in member bound
                     * @param _bound New value for member bound
                     */
                    eProsima_user_DllExport void bound(
                            eprosima::fastdds::dds::xtypes::SBound _bound);

                    /*!
                     * @brief This function returns the value of member bound
                     * @return Value of member bound
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::SBound bound() const;

                    /*!
                     * @brief This function returns a reference to member bound
                     * @return Reference to member bound
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::SBound& bound();


                    /*!
                     * @brief This function copies the value in member element_identifier
                     * @param _element_identifier New value to be copied in member element_identifier
                     */
                    eProsima_user_DllExport void element_identifier(
                            const eprosima::fastdds::dds::xtypes::TypeIdentifier& _element_identifier);

                    /*!
                     * @brief This function moves the value in member element_identifier
                     * @param _element_identifier New value to be moved in member element_identifier
                     */
                    eProsima_user_DllExport void element_identifier(
                            eprosima::fastdds::dds::xtypes::TypeIdentifier&& _element_identifier);

                    /*!
                     * @brief This function returns a constant reference to member element_identifier
                     * @return Constant reference to member element_identifier
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::TypeIdentifier& element_identifier() const;

                    /*!
                     * @brief This function returns a reference to member element_identifier
                     * @return Reference to member element_identifier
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::TypeIdentifier& element_identifier();

                private:

                    eprosima::fastdds::dds::xtypes::PlainCollectionHeader m_header;
                    eprosima::fastdds::dds::xtypes::SBound m_bound{0};
                    eprosima::fastdds::dds::xtypes::TypeIdentifier* m_element_identifier;

                };
                /*!
                 * @brief This class represents the structure PlainSequenceLElemDefn defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class PlainSequenceLElemDefn
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport PlainSequenceLElemDefn();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~PlainSequenceLElemDefn();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn that will be copied.
                     */
                    eProsima_user_DllExport PlainSequenceLElemDefn(
                            const PlainSequenceLElemDefn& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn that will be copied.
                     */
                    eProsima_user_DllExport PlainSequenceLElemDefn(
                            PlainSequenceLElemDefn&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn that will be copied.
                     */
                    eProsima_user_DllExport PlainSequenceLElemDefn& operator =(
                            const PlainSequenceLElemDefn& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn that will be copied.
                     */
                    eProsima_user_DllExport PlainSequenceLElemDefn& operator =(
                            PlainSequenceLElemDefn&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const PlainSequenceLElemDefn& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const PlainSequenceLElemDefn& x) const;

                    /*!
                     * @brief This function copies the value in member header
                     * @param _header New value to be copied in member header
                     */
                    eProsima_user_DllExport void header(
                            const eprosima::fastdds::dds::xtypes::PlainCollectionHeader& _header);

                    /*!
                     * @brief This function moves the value in member header
                     * @param _header New value to be moved in member header
                     */
                    eProsima_user_DllExport void header(
                            eprosima::fastdds::dds::xtypes::PlainCollectionHeader&& _header);

                    /*!
                     * @brief This function returns a constant reference to member header
                     * @return Constant reference to member header
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::PlainCollectionHeader& header() const;

                    /*!
                     * @brief This function returns a reference to member header
                     * @return Reference to member header
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::PlainCollectionHeader& header();


                    /*!
                     * @brief This function sets a value in member bound
                     * @param _bound New value for member bound
                     */
                    eProsima_user_DllExport void bound(
                            eprosima::fastdds::dds::xtypes::LBound _bound);

                    /*!
                     * @brief This function returns the value of member bound
                     * @return Value of member bound
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::LBound bound() const;

                    /*!
                     * @brief This function returns a reference to member bound
                     * @return Reference to member bound
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::LBound& bound();


                    /*!
                     * @brief This function copies the value in member element_identifier
                     * @param _element_identifier New value to be copied in member element_identifier
                     */
                    eProsima_user_DllExport void element_identifier(
                            const eprosima::fastdds::dds::xtypes::TypeIdentifier& _element_identifier);

                    /*!
                     * @brief This function moves the value in member element_identifier
                     * @param _element_identifier New value to be moved in member element_identifier
                     */
                    eProsima_user_DllExport void element_identifier(
                            eprosima::fastdds::dds::xtypes::TypeIdentifier&& _element_identifier);

                    /*!
                     * @brief This function returns a constant reference to member element_identifier
                     * @return Constant reference to member element_identifier
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::TypeIdentifier& element_identifier() const;

                    /*!
                     * @brief This function returns a reference to member element_identifier
                     * @return Reference to member element_identifier
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::TypeIdentifier& element_identifier();

                private:

                    eprosima::fastdds::dds::xtypes::PlainCollectionHeader m_header;
                    eprosima::fastdds::dds::xtypes::LBound m_bound{0};
                    eprosima::fastdds::dds::xtypes::TypeIdentifier* m_element_identifier;

                };
                /*!
                 * @brief This class represents the structure PlainArraySElemDefn defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class PlainArraySElemDefn
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport PlainArraySElemDefn();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~PlainArraySElemDefn();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::PlainArraySElemDefn that will be copied.
                     */
                    eProsima_user_DllExport PlainArraySElemDefn(
                            const PlainArraySElemDefn& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::PlainArraySElemDefn that will be copied.
                     */
                    eProsima_user_DllExport PlainArraySElemDefn(
                            PlainArraySElemDefn&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::PlainArraySElemDefn that will be copied.
                     */
                    eProsima_user_DllExport PlainArraySElemDefn& operator =(
                            const PlainArraySElemDefn& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::PlainArraySElemDefn that will be copied.
                     */
                    eProsima_user_DllExport PlainArraySElemDefn& operator =(
                            PlainArraySElemDefn&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::PlainArraySElemDefn object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const PlainArraySElemDefn& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::PlainArraySElemDefn object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const PlainArraySElemDefn& x) const;

                    /*!
                     * @brief This function copies the value in member header
                     * @param _header New value to be copied in member header
                     */
                    eProsima_user_DllExport void header(
                            const eprosima::fastdds::dds::xtypes::PlainCollectionHeader& _header);

                    /*!
                     * @brief This function moves the value in member header
                     * @param _header New value to be moved in member header
                     */
                    eProsima_user_DllExport void header(
                            eprosima::fastdds::dds::xtypes::PlainCollectionHeader&& _header);

                    /*!
                     * @brief This function returns a constant reference to member header
                     * @return Constant reference to member header
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::PlainCollectionHeader& header() const;

                    /*!
                     * @brief This function returns a reference to member header
                     * @return Reference to member header
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::PlainCollectionHeader& header();


                    /*!
                     * @brief This function copies the value in member array_bound_seq
                     * @param _array_bound_seq New value to be copied in member array_bound_seq
                     */
                    eProsima_user_DllExport void array_bound_seq(
                            const eprosima::fastdds::dds::xtypes::SBoundSeq& _array_bound_seq);

                    /*!
                     * @brief This function moves the value in member array_bound_seq
                     * @param _array_bound_seq New value to be moved in member array_bound_seq
                     */
                    eProsima_user_DllExport void array_bound_seq(
                            eprosima::fastdds::dds::xtypes::SBoundSeq&& _array_bound_seq);

                    /*!
                     * @brief This function returns a constant reference to member array_bound_seq
                     * @return Constant reference to member array_bound_seq
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::SBoundSeq& array_bound_seq() const;

                    /*!
                     * @brief This function returns a reference to member array_bound_seq
                     * @return Reference to member array_bound_seq
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::SBoundSeq& array_bound_seq();


                    /*!
                     * @brief This function copies the value in member element_identifier
                     * @param _element_identifier New value to be copied in member element_identifier
                     */
                    eProsima_user_DllExport void element_identifier(
                            const eprosima::fastdds::dds::xtypes::TypeIdentifier& _element_identifier);

                    /*!
                     * @brief This function moves the value in member element_identifier
                     * @param _element_identifier New value to be moved in member element_identifier
                     */
                    eProsima_user_DllExport void element_identifier(
                            eprosima::fastdds::dds::xtypes::TypeIdentifier&& _element_identifier);

                    /*!
                     * @brief This function returns a constant reference to member element_identifier
                     * @return Constant reference to member element_identifier
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::TypeIdentifier& element_identifier() const;

                    /*!
                     * @brief This function returns a reference to member element_identifier
                     * @return Reference to member element_identifier
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::TypeIdentifier& element_identifier();

                private:

                    eprosima::fastdds::dds::xtypes::PlainCollectionHeader m_header;
                    eprosima::fastdds::dds::xtypes::SBoundSeq m_array_bound_seq;
                    eprosima::fastdds::dds::xtypes::TypeIdentifier* m_element_identifier;

                };
                /*!
                 * @brief This class represents the structure PlainArrayLElemDefn defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class PlainArrayLElemDefn
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport PlainArrayLElemDefn();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~PlainArrayLElemDefn();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn that will be copied.
                     */
                    eProsima_user_DllExport PlainArrayLElemDefn(
                            const PlainArrayLElemDefn& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn that will be copied.
                     */
                    eProsima_user_DllExport PlainArrayLElemDefn(
                            PlainArrayLElemDefn&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn that will be copied.
                     */
                    eProsima_user_DllExport PlainArrayLElemDefn& operator =(
                            const PlainArrayLElemDefn& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn that will be copied.
                     */
                    eProsima_user_DllExport PlainArrayLElemDefn& operator =(
                            PlainArrayLElemDefn&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const PlainArrayLElemDefn& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const PlainArrayLElemDefn& x) const;

                    /*!
                     * @brief This function copies the value in member header
                     * @param _header New value to be copied in member header
                     */
                    eProsima_user_DllExport void header(
                            const eprosima::fastdds::dds::xtypes::PlainCollectionHeader& _header);

                    /*!
                     * @brief This function moves the value in member header
                     * @param _header New value to be moved in member header
                     */
                    eProsima_user_DllExport void header(
                            eprosima::fastdds::dds::xtypes::PlainCollectionHeader&& _header);

                    /*!
                     * @brief This function returns a constant reference to member header
                     * @return Constant reference to member header
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::PlainCollectionHeader& header() const;

                    /*!
                     * @brief This function returns a reference to member header
                     * @return Reference to member header
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::PlainCollectionHeader& header();


                    /*!
                     * @brief This function copies the value in member array_bound_seq
                     * @param _array_bound_seq New value to be copied in member array_bound_seq
                     */
                    eProsima_user_DllExport void array_bound_seq(
                            const eprosima::fastdds::dds::xtypes::LBoundSeq& _array_bound_seq);

                    /*!
                     * @brief This function moves the value in member array_bound_seq
                     * @param _array_bound_seq New value to be moved in member array_bound_seq
                     */
                    eProsima_user_DllExport void array_bound_seq(
                            eprosima::fastdds::dds::xtypes::LBoundSeq&& _array_bound_seq);

                    /*!
                     * @brief This function returns a constant reference to member array_bound_seq
                     * @return Constant reference to member array_bound_seq
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::LBoundSeq& array_bound_seq() const;

                    /*!
                     * @brief This function returns a reference to member array_bound_seq
                     * @return Reference to member array_bound_seq
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::LBoundSeq& array_bound_seq();


                    /*!
                     * @brief This function copies the value in member element_identifier
                     * @param _element_identifier New value to be copied in member element_identifier
                     */
                    eProsima_user_DllExport void element_identifier(
                            const eprosima::fastdds::dds::xtypes::TypeIdentifier& _element_identifier);

                    /*!
                     * @brief This function moves the value in member element_identifier
                     * @param _element_identifier New value to be moved in member element_identifier
                     */
                    eProsima_user_DllExport void element_identifier(
                            eprosima::fastdds::dds::xtypes::TypeIdentifier&& _element_identifier);

                    /*!
                     * @brief This function returns a constant reference to member element_identifier
                     * @return Constant reference to member element_identifier
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::TypeIdentifier& element_identifier() const;

                    /*!
                     * @brief This function returns a reference to member element_identifier
                     * @return Reference to member element_identifier
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::TypeIdentifier& element_identifier();

                private:

                    eprosima::fastdds::dds::xtypes::PlainCollectionHeader m_header;
                    eprosima::fastdds::dds::xtypes::LBoundSeq m_array_bound_seq;
                    eprosima::fastdds::dds::xtypes::TypeIdentifier* m_element_identifier;

                };
                /*!
                 * @brief This class represents the structure PlainMapSTypeDefn defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class PlainMapSTypeDefn
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport PlainMapSTypeDefn();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~PlainMapSTypeDefn();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn that will be copied.
                     */
                    eProsima_user_DllExport PlainMapSTypeDefn(
                            const PlainMapSTypeDefn& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn that will be copied.
                     */
                    eProsima_user_DllExport PlainMapSTypeDefn(
                            PlainMapSTypeDefn&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn that will be copied.
                     */
                    eProsima_user_DllExport PlainMapSTypeDefn& operator =(
                            const PlainMapSTypeDefn& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn that will be copied.
                     */
                    eProsima_user_DllExport PlainMapSTypeDefn& operator =(
                            PlainMapSTypeDefn&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const PlainMapSTypeDefn& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const PlainMapSTypeDefn& x) const;

                    /*!
                     * @brief This function copies the value in member header
                     * @param _header New value to be copied in member header
                     */
                    eProsima_user_DllExport void header(
                            const eprosima::fastdds::dds::xtypes::PlainCollectionHeader& _header);

                    /*!
                     * @brief This function moves the value in member header
                     * @param _header New value to be moved in member header
                     */
                    eProsima_user_DllExport void header(
                            eprosima::fastdds::dds::xtypes::PlainCollectionHeader&& _header);

                    /*!
                     * @brief This function returns a constant reference to member header
                     * @return Constant reference to member header
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::PlainCollectionHeader& header() const;

                    /*!
                     * @brief This function returns a reference to member header
                     * @return Reference to member header
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::PlainCollectionHeader& header();


                    /*!
                     * @brief This function sets a value in member bound
                     * @param _bound New value for member bound
                     */
                    eProsima_user_DllExport void bound(
                            eprosima::fastdds::dds::xtypes::SBound _bound);

                    /*!
                     * @brief This function returns the value of member bound
                     * @return Value of member bound
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::SBound bound() const;

                    /*!
                     * @brief This function returns a reference to member bound
                     * @return Reference to member bound
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::SBound& bound();


                    /*!
                     * @brief This function copies the value in member element_identifier
                     * @param _element_identifier New value to be copied in member element_identifier
                     */
                    eProsima_user_DllExport void element_identifier(
                            const eprosima::fastdds::dds::xtypes::TypeIdentifier& _element_identifier);

                    /*!
                     * @brief This function moves the value in member element_identifier
                     * @param _element_identifier New value to be moved in member element_identifier
                     */
                    eProsima_user_DllExport void element_identifier(
                            eprosima::fastdds::dds::xtypes::TypeIdentifier&& _element_identifier);

                    /*!
                     * @brief This function returns a constant reference to member element_identifier
                     * @return Constant reference to member element_identifier
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::TypeIdentifier& element_identifier() const;

                    /*!
                     * @brief This function returns a reference to member element_identifier
                     * @return Reference to member element_identifier
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::TypeIdentifier& element_identifier();


                    /*!
                     * @brief This function copies the value in member key_flags
                     * @param _key_flags New value to be copied in member key_flags
                     */
                    eProsima_user_DllExport void key_flags(
                            const eprosima::fastdds::dds::xtypes::CollectionElementFlag& _key_flags);

                    /*!
                     * @brief This function moves the value in member key_flags
                     * @param _key_flags New value to be moved in member key_flags
                     */
                    eProsima_user_DllExport void key_flags(
                            eprosima::fastdds::dds::xtypes::CollectionElementFlag&& _key_flags);

                    /*!
                     * @brief This function returns a constant reference to member key_flags
                     * @return Constant reference to member key_flags
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CollectionElementFlag& key_flags() const;

                    /*!
                     * @brief This function returns a reference to member key_flags
                     * @return Reference to member key_flags
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CollectionElementFlag& key_flags();


                    /*!
                     * @brief This function copies the value in member key_identifier
                     * @param _key_identifier New value to be copied in member key_identifier
                     */
                    eProsima_user_DllExport void key_identifier(
                            const eprosima::fastdds::dds::xtypes::TypeIdentifier& _key_identifier);

                    /*!
                     * @brief This function moves the value in member key_identifier
                     * @param _key_identifier New value to be moved in member key_identifier
                     */
                    eProsima_user_DllExport void key_identifier(
                            eprosima::fastdds::dds::xtypes::TypeIdentifier&& _key_identifier);

                    /*!
                     * @brief This function returns a constant reference to member key_identifier
                     * @return Constant reference to member key_identifier
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::TypeIdentifier& key_identifier() const;

                    /*!
                     * @brief This function returns a reference to member key_identifier
                     * @return Reference to member key_identifier
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::TypeIdentifier& key_identifier();

                private:

                    eprosima::fastdds::dds::xtypes::PlainCollectionHeader m_header;
                    eprosima::fastdds::dds::xtypes::SBound m_bound{0};
                    eprosima::fastdds::dds::xtypes::TypeIdentifier* m_element_identifier;
                    eprosima::fastdds::dds::xtypes::CollectionElementFlag m_key_flags{0};
                    eprosima::fastdds::dds::xtypes::TypeIdentifier* m_key_identifier;

                };
                /*!
                 * @brief This class represents the structure PlainMapLTypeDefn defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class PlainMapLTypeDefn
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport PlainMapLTypeDefn();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~PlainMapLTypeDefn();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn that will be copied.
                     */
                    eProsima_user_DllExport PlainMapLTypeDefn(
                            const PlainMapLTypeDefn& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn that will be copied.
                     */
                    eProsima_user_DllExport PlainMapLTypeDefn(
                            PlainMapLTypeDefn&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn that will be copied.
                     */
                    eProsima_user_DllExport PlainMapLTypeDefn& operator =(
                            const PlainMapLTypeDefn& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn that will be copied.
                     */
                    eProsima_user_DllExport PlainMapLTypeDefn& operator =(
                            PlainMapLTypeDefn&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const PlainMapLTypeDefn& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const PlainMapLTypeDefn& x) const;

                    /*!
                     * @brief This function copies the value in member header
                     * @param _header New value to be copied in member header
                     */
                    eProsima_user_DllExport void header(
                            const eprosima::fastdds::dds::xtypes::PlainCollectionHeader& _header);

                    /*!
                     * @brief This function moves the value in member header
                     * @param _header New value to be moved in member header
                     */
                    eProsima_user_DllExport void header(
                            eprosima::fastdds::dds::xtypes::PlainCollectionHeader&& _header);

                    /*!
                     * @brief This function returns a constant reference to member header
                     * @return Constant reference to member header
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::PlainCollectionHeader& header() const;

                    /*!
                     * @brief This function returns a reference to member header
                     * @return Reference to member header
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::PlainCollectionHeader& header();


                    /*!
                     * @brief This function sets a value in member bound
                     * @param _bound New value for member bound
                     */
                    eProsima_user_DllExport void bound(
                            eprosima::fastdds::dds::xtypes::LBound _bound);

                    /*!
                     * @brief This function returns the value of member bound
                     * @return Value of member bound
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::LBound bound() const;

                    /*!
                     * @brief This function returns a reference to member bound
                     * @return Reference to member bound
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::LBound& bound();


                    /*!
                     * @brief This function copies the value in member element_identifier
                     * @param _element_identifier New value to be copied in member element_identifier
                     */
                    eProsima_user_DllExport void element_identifier(
                            const eprosima::fastdds::dds::xtypes::TypeIdentifier& _element_identifier);

                    /*!
                     * @brief This function moves the value in member element_identifier
                     * @param _element_identifier New value to be moved in member element_identifier
                     */
                    eProsima_user_DllExport void element_identifier(
                            eprosima::fastdds::dds::xtypes::TypeIdentifier&& _element_identifier);

                    /*!
                     * @brief This function returns a constant reference to member element_identifier
                     * @return Constant reference to member element_identifier
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::TypeIdentifier& element_identifier() const;

                    /*!
                     * @brief This function returns a reference to member element_identifier
                     * @return Reference to member element_identifier
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::TypeIdentifier& element_identifier();


                    /*!
                     * @brief This function copies the value in member key_flags
                     * @param _key_flags New value to be copied in member key_flags
                     */
                    eProsima_user_DllExport void key_flags(
                            const eprosima::fastdds::dds::xtypes::CollectionElementFlag& _key_flags);

                    /*!
                     * @brief This function moves the value in member key_flags
                     * @param _key_flags New value to be moved in member key_flags
                     */
                    eProsima_user_DllExport void key_flags(
                            eprosima::fastdds::dds::xtypes::CollectionElementFlag&& _key_flags);

                    /*!
                     * @brief This function returns a constant reference to member key_flags
                     * @return Constant reference to member key_flags
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CollectionElementFlag& key_flags() const;

                    /*!
                     * @brief This function returns a reference to member key_flags
                     * @return Reference to member key_flags
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CollectionElementFlag& key_flags();


                    /*!
                     * @brief This function copies the value in member key_identifier
                     * @param _key_identifier New value to be copied in member key_identifier
                     */
                    eProsima_user_DllExport void key_identifier(
                            const eprosima::fastdds::dds::xtypes::TypeIdentifier& _key_identifier);

                    /*!
                     * @brief This function moves the value in member key_identifier
                     * @param _key_identifier New value to be moved in member key_identifier
                     */
                    eProsima_user_DllExport void key_identifier(
                            eprosima::fastdds::dds::xtypes::TypeIdentifier&& _key_identifier);

                    /*!
                     * @brief This function returns a constant reference to member key_identifier
                     * @return Constant reference to member key_identifier
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::TypeIdentifier& key_identifier() const;

                    /*!
                     * @brief This function returns a reference to member key_identifier
                     * @return Reference to member key_identifier
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::TypeIdentifier& key_identifier();

                private:

                    eprosima::fastdds::dds::xtypes::PlainCollectionHeader m_header;
                    eprosima::fastdds::dds::xtypes::LBound m_bound{0};
                    eprosima::fastdds::dds::xtypes::TypeIdentifier* m_element_identifier;
                    eprosima::fastdds::dds::xtypes::CollectionElementFlag m_key_flags{0};
                    eprosima::fastdds::dds::xtypes::TypeIdentifier* m_key_identifier;

                };
                /*!
                 * @brief This class represents the structure StronglyConnectedComponentId defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class StronglyConnectedComponentId
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport StronglyConnectedComponentId();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~StronglyConnectedComponentId();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId that will be copied.
                     */
                    eProsima_user_DllExport StronglyConnectedComponentId(
                            const StronglyConnectedComponentId& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId that will be copied.
                     */
                    eProsima_user_DllExport StronglyConnectedComponentId(
                            StronglyConnectedComponentId&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId that will be copied.
                     */
                    eProsima_user_DllExport StronglyConnectedComponentId& operator =(
                            const StronglyConnectedComponentId& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId that will be copied.
                     */
                    eProsima_user_DllExport StronglyConnectedComponentId& operator =(
                            StronglyConnectedComponentId&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const StronglyConnectedComponentId& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const StronglyConnectedComponentId& x) const;

                    /*!
                     * @brief This function copies the value in member sc_component_id
                     * @param _sc_component_id New value to be copied in member sc_component_id
                     */
                    eProsima_user_DllExport void sc_component_id(
                            const eprosima::fastdds::dds::xtypes::TypeObjectHashId& _sc_component_id);

                    /*!
                     * @brief This function moves the value in member sc_component_id
                     * @param _sc_component_id New value to be moved in member sc_component_id
                     */
                    eProsima_user_DllExport void sc_component_id(
                            eprosima::fastdds::dds::xtypes::TypeObjectHashId&& _sc_component_id);

                    /*!
                     * @brief This function returns a constant reference to member sc_component_id
                     * @return Constant reference to member sc_component_id
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::TypeObjectHashId& sc_component_id() const;

                    /*!
                     * @brief This function returns a reference to member sc_component_id
                     * @return Reference to member sc_component_id
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::TypeObjectHashId& sc_component_id();


                    /*!
                     * @brief This function sets a value in member scc_length
                     * @param _scc_length New value for member scc_length
                     */
                    eProsima_user_DllExport void scc_length(
                            int32_t _scc_length);

                    /*!
                     * @brief This function returns the value of member scc_length
                     * @return Value of member scc_length
                     */
                    eProsima_user_DllExport int32_t scc_length() const;

                    /*!
                     * @brief This function returns a reference to member scc_length
                     * @return Reference to member scc_length
                     */
                    eProsima_user_DllExport int32_t& scc_length();


                    /*!
                     * @brief This function sets a value in member scc_index
                     * @param _scc_index New value for member scc_index
                     */
                    eProsima_user_DllExport void scc_index(
                            int32_t _scc_index);

                    /*!
                     * @brief This function returns the value of member scc_index
                     * @return Value of member scc_index
                     */
                    eProsima_user_DllExport int32_t scc_index() const;

                    /*!
                     * @brief This function returns a reference to member scc_index
                     * @return Reference to member scc_index
                     */
                    eProsima_user_DllExport int32_t& scc_index();

                private:

                    eprosima::fastdds::dds::xtypes::TypeObjectHashId m_sc_component_id;
                    int32_t m_scc_length{0};
                    int32_t m_scc_index{0};

                };
                /*!
                 * @brief This class represents the structure ExtendedTypeDefn defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class ExtendedTypeDefn
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport ExtendedTypeDefn();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~ExtendedTypeDefn();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::ExtendedTypeDefn that will be copied.
                     */
                    eProsima_user_DllExport ExtendedTypeDefn(
                            const ExtendedTypeDefn& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::ExtendedTypeDefn that will be copied.
                     */
                    eProsima_user_DllExport ExtendedTypeDefn(
                            ExtendedTypeDefn&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::ExtendedTypeDefn that will be copied.
                     */
                    eProsima_user_DllExport ExtendedTypeDefn& operator =(
                            const ExtendedTypeDefn& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::ExtendedTypeDefn that will be copied.
                     */
                    eProsima_user_DllExport ExtendedTypeDefn& operator =(
                            ExtendedTypeDefn&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::ExtendedTypeDefn object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const ExtendedTypeDefn& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::ExtendedTypeDefn object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const ExtendedTypeDefn& x) const;

                private:


                };
                /*!
                 * @brief This class represents the union TypeIdentifier defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class TypeIdentifier
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport TypeIdentifier();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~TypeIdentifier();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::TypeIdentifier that will be copied.
                     */
                    eProsima_user_DllExport TypeIdentifier(
                            const TypeIdentifier& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::TypeIdentifier that will be copied.
                     */
                    eProsima_user_DllExport TypeIdentifier(
                            TypeIdentifier&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::TypeIdentifier that will be copied.
                     */
                    eProsima_user_DllExport TypeIdentifier& operator =(
                            const TypeIdentifier& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::TypeIdentifier that will be copied.
                     */
                    eProsima_user_DllExport TypeIdentifier& operator =(
                            TypeIdentifier&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::TypeIdentifier object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const TypeIdentifier& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::TypeIdentifier object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const TypeIdentifier& x) const;

                    /*!
                     * @brief This function sets the discriminator value.
                     * @param __d New value for the discriminator.
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
                     */
                    eProsima_user_DllExport void _d(
                            uint8_t __d);

                    /*!
                     * @brief This function returns the value of the discriminator.
                     * @return Value of the discriminator
                     */
                    eProsima_user_DllExport uint8_t _d() const;

                    /*!
                     * @brief This function returns a reference to the discriminator.
                     * @return Reference to the discriminator.
                     */
                    eProsima_user_DllExport uint8_t& _d();

                    /*!
                     * @brief This function copies the value in member string_sdefn
                     * @param _string_sdefn New value to be copied in member string_sdefn
                     */
                    eProsima_user_DllExport void string_sdefn(
                            const eprosima::fastdds::dds::xtypes::StringSTypeDefn& _string_sdefn);

                    /*!
                     * @brief This function moves the value in member string_sdefn
                     * @param _string_sdefn New value to be moved in member string_sdefn
                     */
                    eProsima_user_DllExport void string_sdefn(
                            eprosima::fastdds::dds::xtypes::StringSTypeDefn&& _string_sdefn);

                    /*!
                     * @brief This function returns a constant reference to member string_sdefn
                     * @return Constant reference to member string_sdefn
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::StringSTypeDefn& string_sdefn() const;

                    /*!
                     * @brief This function returns a reference to member string_sdefn
                     * @return Reference to member string_sdefn
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::StringSTypeDefn& string_sdefn();


                    /*!
                     * @brief This function copies the value in member string_ldefn
                     * @param _string_ldefn New value to be copied in member string_ldefn
                     */
                    eProsima_user_DllExport void string_ldefn(
                            const eprosima::fastdds::dds::xtypes::StringLTypeDefn& _string_ldefn);

                    /*!
                     * @brief This function moves the value in member string_ldefn
                     * @param _string_ldefn New value to be moved in member string_ldefn
                     */
                    eProsima_user_DllExport void string_ldefn(
                            eprosima::fastdds::dds::xtypes::StringLTypeDefn&& _string_ldefn);

                    /*!
                     * @brief This function returns a constant reference to member string_ldefn
                     * @return Constant reference to member string_ldefn
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::StringLTypeDefn& string_ldefn() const;

                    /*!
                     * @brief This function returns a reference to member string_ldefn
                     * @return Reference to member string_ldefn
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::StringLTypeDefn& string_ldefn();


                    /*!
                     * @brief This function copies the value in member seq_sdefn
                     * @param _seq_sdefn New value to be copied in member seq_sdefn
                     */
                    eProsima_user_DllExport void seq_sdefn(
                            const eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn& _seq_sdefn);

                    /*!
                     * @brief This function moves the value in member seq_sdefn
                     * @param _seq_sdefn New value to be moved in member seq_sdefn
                     */
                    eProsima_user_DllExport void seq_sdefn(
                            eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn&& _seq_sdefn);

                    /*!
                     * @brief This function returns a constant reference to member seq_sdefn
                     * @return Constant reference to member seq_sdefn
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn& seq_sdefn() const;

                    /*!
                     * @brief This function returns a reference to member seq_sdefn
                     * @return Reference to member seq_sdefn
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn& seq_sdefn();


                    /*!
                     * @brief This function copies the value in member seq_ldefn
                     * @param _seq_ldefn New value to be copied in member seq_ldefn
                     */
                    eProsima_user_DllExport void seq_ldefn(
                            const eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn& _seq_ldefn);

                    /*!
                     * @brief This function moves the value in member seq_ldefn
                     * @param _seq_ldefn New value to be moved in member seq_ldefn
                     */
                    eProsima_user_DllExport void seq_ldefn(
                            eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn&& _seq_ldefn);

                    /*!
                     * @brief This function returns a constant reference to member seq_ldefn
                     * @return Constant reference to member seq_ldefn
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn& seq_ldefn() const;

                    /*!
                     * @brief This function returns a reference to member seq_ldefn
                     * @return Reference to member seq_ldefn
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn& seq_ldefn();


                    /*!
                     * @brief This function copies the value in member array_sdefn
                     * @param _array_sdefn New value to be copied in member array_sdefn
                     */
                    eProsima_user_DllExport void array_sdefn(
                            const eprosima::fastdds::dds::xtypes::PlainArraySElemDefn& _array_sdefn);

                    /*!
                     * @brief This function moves the value in member array_sdefn
                     * @param _array_sdefn New value to be moved in member array_sdefn
                     */
                    eProsima_user_DllExport void array_sdefn(
                            eprosima::fastdds::dds::xtypes::PlainArraySElemDefn&& _array_sdefn);

                    /*!
                     * @brief This function returns a constant reference to member array_sdefn
                     * @return Constant reference to member array_sdefn
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::PlainArraySElemDefn& array_sdefn() const;

                    /*!
                     * @brief This function returns a reference to member array_sdefn
                     * @return Reference to member array_sdefn
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::PlainArraySElemDefn& array_sdefn();


                    /*!
                     * @brief This function copies the value in member array_ldefn
                     * @param _array_ldefn New value to be copied in member array_ldefn
                     */
                    eProsima_user_DllExport void array_ldefn(
                            const eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn& _array_ldefn);

                    /*!
                     * @brief This function moves the value in member array_ldefn
                     * @param _array_ldefn New value to be moved in member array_ldefn
                     */
                    eProsima_user_DllExport void array_ldefn(
                            eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn&& _array_ldefn);

                    /*!
                     * @brief This function returns a constant reference to member array_ldefn
                     * @return Constant reference to member array_ldefn
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn& array_ldefn() const;

                    /*!
                     * @brief This function returns a reference to member array_ldefn
                     * @return Reference to member array_ldefn
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn& array_ldefn();


                    /*!
                     * @brief This function copies the value in member map_sdefn
                     * @param _map_sdefn New value to be copied in member map_sdefn
                     */
                    eProsima_user_DllExport void map_sdefn(
                            const eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn& _map_sdefn);

                    /*!
                     * @brief This function moves the value in member map_sdefn
                     * @param _map_sdefn New value to be moved in member map_sdefn
                     */
                    eProsima_user_DllExport void map_sdefn(
                            eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn&& _map_sdefn);

                    /*!
                     * @brief This function returns a constant reference to member map_sdefn
                     * @return Constant reference to member map_sdefn
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn& map_sdefn() const;

                    /*!
                     * @brief This function returns a reference to member map_sdefn
                     * @return Reference to member map_sdefn
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn& map_sdefn();


                    /*!
                     * @brief This function copies the value in member map_ldefn
                     * @param _map_ldefn New value to be copied in member map_ldefn
                     */
                    eProsima_user_DllExport void map_ldefn(
                            const eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn& _map_ldefn);

                    /*!
                     * @brief This function moves the value in member map_ldefn
                     * @param _map_ldefn New value to be moved in member map_ldefn
                     */
                    eProsima_user_DllExport void map_ldefn(
                            eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn&& _map_ldefn);

                    /*!
                     * @brief This function returns a constant reference to member map_ldefn
                     * @return Constant reference to member map_ldefn
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn& map_ldefn() const;

                    /*!
                     * @brief This function returns a reference to member map_ldefn
                     * @return Reference to member map_ldefn
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn& map_ldefn();


                    /*!
                     * @brief This function copies the value in member sc_component_id
                     * @param _sc_component_id New value to be copied in member sc_component_id
                     */
                    eProsima_user_DllExport void sc_component_id(
                            const eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId& _sc_component_id);

                    /*!
                     * @brief This function moves the value in member sc_component_id
                     * @param _sc_component_id New value to be moved in member sc_component_id
                     */
                    eProsima_user_DllExport void sc_component_id(
                            eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId&& _sc_component_id);

                    /*!
                     * @brief This function returns a constant reference to member sc_component_id
                     * @return Constant reference to member sc_component_id
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId& sc_component_id() const;

                    /*!
                     * @brief This function returns a reference to member sc_component_id
                     * @return Reference to member sc_component_id
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId& sc_component_id();


                    /*!
                     * @brief This function copies the value in member equivalence_hash
                     * @param _equivalence_hash New value to be copied in member equivalence_hash
                     */
                    eProsima_user_DllExport void equivalence_hash(
                            const eprosima::fastdds::dds::xtypes::EquivalenceHash& _equivalence_hash);

                    /*!
                     * @brief This function moves the value in member equivalence_hash
                     * @param _equivalence_hash New value to be moved in member equivalence_hash
                     */
                    eProsima_user_DllExport void equivalence_hash(
                            eprosima::fastdds::dds::xtypes::EquivalenceHash&& _equivalence_hash);

                    /*!
                     * @brief This function returns a constant reference to member equivalence_hash
                     * @return Constant reference to member equivalence_hash
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::EquivalenceHash& equivalence_hash() const;

                    /*!
                     * @brief This function returns a reference to member equivalence_hash
                     * @return Reference to member equivalence_hash
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::EquivalenceHash& equivalence_hash();


                    /*!
                     * @brief This function copies the value in member extended_defn
                     * @param _extended_defn New value to be copied in member extended_defn
                     */
                    eProsima_user_DllExport void extended_defn(
                            const eprosima::fastdds::dds::xtypes::ExtendedTypeDefn& _extended_defn);

                    /*!
                     * @brief This function moves the value in member extended_defn
                     * @param _extended_defn New value to be moved in member extended_defn
                     */
                    eProsima_user_DllExport void extended_defn(
                            eprosima::fastdds::dds::xtypes::ExtendedTypeDefn&& _extended_defn);

                    /*!
                     * @brief This function returns a constant reference to member extended_defn
                     * @return Constant reference to member extended_defn
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::ExtendedTypeDefn& extended_defn() const;

                    /*!
                     * @brief This function returns a reference to member extended_defn
                     * @return Reference to member extended_defn
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::ExtendedTypeDefn& extended_defn();

                private:

                    uint8_t m__d;

                    eprosima::fastdds::dds::xtypes::StringSTypeDefn m_string_sdefn;
                    eprosima::fastdds::dds::xtypes::StringLTypeDefn m_string_ldefn;
                    eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn m_seq_sdefn;
                    eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn m_seq_ldefn;
                    eprosima::fastdds::dds::xtypes::PlainArraySElemDefn m_array_sdefn;
                    eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn m_array_ldefn;
                    eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn m_map_sdefn;
                    eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn m_map_ldefn;
                    eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId m_sc_component_id;
                    eprosima::fastdds::dds::xtypes::EquivalenceHash m_equivalence_hash{0};
                    eprosima::fastdds::dds::xtypes::ExtendedTypeDefn m_extended_defn;
                };
                typedef std::vector<eprosima::fastdds::dds::xtypes::TypeIdentifier> TypeIdentifierSeq;

                typedef uint32_t MemberId;

                const uint32_t ANNOTATION_STR_VALUE_MAX_LEN = 128;
                const uint32_t ANNOTATION_OCTETSEC_VALUE_MAX_LEN = 128;
                /*!
                 * @brief This class represents the structure ExtendedAnnotationParameterValue defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class ExtendedAnnotationParameterValue
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport ExtendedAnnotationParameterValue();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~ExtendedAnnotationParameterValue();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::ExtendedAnnotationParameterValue that will be copied.
                     */
                    eProsima_user_DllExport ExtendedAnnotationParameterValue(
                            const ExtendedAnnotationParameterValue& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::ExtendedAnnotationParameterValue that will be copied.
                     */
                    eProsima_user_DllExport ExtendedAnnotationParameterValue(
                            ExtendedAnnotationParameterValue&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::ExtendedAnnotationParameterValue that will be copied.
                     */
                    eProsima_user_DllExport ExtendedAnnotationParameterValue& operator =(
                            const ExtendedAnnotationParameterValue& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::ExtendedAnnotationParameterValue that will be copied.
                     */
                    eProsima_user_DllExport ExtendedAnnotationParameterValue& operator =(
                            ExtendedAnnotationParameterValue&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::ExtendedAnnotationParameterValue object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const ExtendedAnnotationParameterValue& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::ExtendedAnnotationParameterValue object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const ExtendedAnnotationParameterValue& x) const;

                private:


                };
                /*!
                 * @brief This class represents the union AnnotationParameterValue defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class AnnotationParameterValue
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport AnnotationParameterValue();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~AnnotationParameterValue();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::AnnotationParameterValue that will be copied.
                     */
                    eProsima_user_DllExport AnnotationParameterValue(
                            const AnnotationParameterValue& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::AnnotationParameterValue that will be copied.
                     */
                    eProsima_user_DllExport AnnotationParameterValue(
                            AnnotationParameterValue&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::AnnotationParameterValue that will be copied.
                     */
                    eProsima_user_DllExport AnnotationParameterValue& operator =(
                            const AnnotationParameterValue& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::AnnotationParameterValue that will be copied.
                     */
                    eProsima_user_DllExport AnnotationParameterValue& operator =(
                            AnnotationParameterValue&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::AnnotationParameterValue object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const AnnotationParameterValue& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::AnnotationParameterValue object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const AnnotationParameterValue& x) const;

                    /*!
                     * @brief This function sets the discriminator value.
                     * @param __d New value for the discriminator.
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
                     */
                    eProsima_user_DllExport void _d(
                            uint8_t __d);

                    /*!
                     * @brief This function returns the value of the discriminator.
                     * @return Value of the discriminator
                     */
                    eProsima_user_DllExport uint8_t _d() const;

                    /*!
                     * @brief This function returns a reference to the discriminator.
                     * @return Reference to the discriminator.
                     */
                    eProsima_user_DllExport uint8_t& _d();

                    /*!
                     * @brief This function sets a value in member boolean_value
                     * @param _boolean_value New value for member boolean_value
                     */
                    eProsima_user_DllExport void boolean_value(
                            bool _boolean_value);

                    /*!
                     * @brief This function returns the value of member boolean_value
                     * @return Value of member boolean_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport bool boolean_value() const;

                    /*!
                     * @brief This function returns a reference to member boolean_value
                     * @return Reference to member boolean_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport bool& boolean_value();


                    /*!
                     * @brief This function sets a value in member byte_value
                     * @param _byte_value New value for member byte_value
                     */
                    eProsima_user_DllExport void byte_value(
                            uint8_t _byte_value);

                    /*!
                     * @brief This function returns the value of member byte_value
                     * @return Value of member byte_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport uint8_t byte_value() const;

                    /*!
                     * @brief This function returns a reference to member byte_value
                     * @return Reference to member byte_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport uint8_t& byte_value();


                    /*!
                     * @brief This function sets a value in member int8_value
                     * @param _int8_value New value for member int8_value
                     */
                    eProsima_user_DllExport void int8_value(
                            int8_t _int8_value);

                    /*!
                     * @brief This function returns the value of member int8_value
                     * @return Value of member int8_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport int8_t int8_value() const;

                    /*!
                     * @brief This function returns a reference to member int8_value
                     * @return Reference to member int8_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport int8_t& int8_value();


                    /*!
                     * @brief This function sets a value in member uint8_value
                     * @param _uint8_value New value for member uint8_value
                     */
                    eProsima_user_DllExport void uint8_value(
                            uint8_t _uint8_value);

                    /*!
                     * @brief This function returns the value of member uint8_value
                     * @return Value of member uint8_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport uint8_t uint8_value() const;

                    /*!
                     * @brief This function returns a reference to member uint8_value
                     * @return Reference to member uint8_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport uint8_t& uint8_value();


                    /*!
                     * @brief This function sets a value in member int16_value
                     * @param _int16_value New value for member int16_value
                     */
                    eProsima_user_DllExport void int16_value(
                            int16_t _int16_value);

                    /*!
                     * @brief This function returns the value of member int16_value
                     * @return Value of member int16_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport int16_t int16_value() const;

                    /*!
                     * @brief This function returns a reference to member int16_value
                     * @return Reference to member int16_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport int16_t& int16_value();


                    /*!
                     * @brief This function sets a value in member uint_16_value
                     * @param _uint_16_value New value for member uint_16_value
                     */
                    eProsima_user_DllExport void uint_16_value(
                            uint16_t _uint_16_value);

                    /*!
                     * @brief This function returns the value of member uint_16_value
                     * @return Value of member uint_16_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport uint16_t uint_16_value() const;

                    /*!
                     * @brief This function returns a reference to member uint_16_value
                     * @return Reference to member uint_16_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport uint16_t& uint_16_value();


                    /*!
                     * @brief This function sets a value in member int32_value
                     * @param _int32_value New value for member int32_value
                     */
                    eProsima_user_DllExport void int32_value(
                            int32_t _int32_value);

                    /*!
                     * @brief This function returns the value of member int32_value
                     * @return Value of member int32_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport int32_t int32_value() const;

                    /*!
                     * @brief This function returns a reference to member int32_value
                     * @return Reference to member int32_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport int32_t& int32_value();


                    /*!
                     * @brief This function sets a value in member uint32_value
                     * @param _uint32_value New value for member uint32_value
                     */
                    eProsima_user_DllExport void uint32_value(
                            uint32_t _uint32_value);

                    /*!
                     * @brief This function returns the value of member uint32_value
                     * @return Value of member uint32_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport uint32_t uint32_value() const;

                    /*!
                     * @brief This function returns a reference to member uint32_value
                     * @return Reference to member uint32_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport uint32_t& uint32_value();


                    /*!
                     * @brief This function sets a value in member int64_value
                     * @param _int64_value New value for member int64_value
                     */
                    eProsima_user_DllExport void int64_value(
                            int64_t _int64_value);

                    /*!
                     * @brief This function returns the value of member int64_value
                     * @return Value of member int64_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport int64_t int64_value() const;

                    /*!
                     * @brief This function returns a reference to member int64_value
                     * @return Reference to member int64_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport int64_t& int64_value();


                    /*!
                     * @brief This function sets a value in member uint64_value
                     * @param _uint64_value New value for member uint64_value
                     */
                    eProsima_user_DllExport void uint64_value(
                            uint64_t _uint64_value);

                    /*!
                     * @brief This function returns the value of member uint64_value
                     * @return Value of member uint64_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport uint64_t uint64_value() const;

                    /*!
                     * @brief This function returns a reference to member uint64_value
                     * @return Reference to member uint64_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport uint64_t& uint64_value();


                    /*!
                     * @brief This function sets a value in member float32_value
                     * @param _float32_value New value for member float32_value
                     */
                    eProsima_user_DllExport void float32_value(
                            float _float32_value);

                    /*!
                     * @brief This function returns the value of member float32_value
                     * @return Value of member float32_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport float float32_value() const;

                    /*!
                     * @brief This function returns a reference to member float32_value
                     * @return Reference to member float32_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport float& float32_value();


                    /*!
                     * @brief This function sets a value in member float64_value
                     * @param _float64_value New value for member float64_value
                     */
                    eProsima_user_DllExport void float64_value(
                            double _float64_value);

                    /*!
                     * @brief This function returns the value of member float64_value
                     * @return Value of member float64_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport double float64_value() const;

                    /*!
                     * @brief This function returns a reference to member float64_value
                     * @return Reference to member float64_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport double& float64_value();


                    /*!
                     * @brief This function sets a value in member float128_value
                     * @param _float128_value New value for member float128_value
                     */
                    eProsima_user_DllExport void float128_value(
                            long double _float128_value);

                    /*!
                     * @brief This function returns the value of member float128_value
                     * @return Value of member float128_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport long double float128_value() const;

                    /*!
                     * @brief This function returns a reference to member float128_value
                     * @return Reference to member float128_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport long double& float128_value();


                    /*!
                     * @brief This function sets a value in member char_value
                     * @param _char_value New value for member char_value
                     */
                    eProsima_user_DllExport void char_value(
                            char _char_value);

                    /*!
                     * @brief This function returns the value of member char_value
                     * @return Value of member char_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport char char_value() const;

                    /*!
                     * @brief This function returns a reference to member char_value
                     * @return Reference to member char_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport char& char_value();


                    /*!
                     * @brief This function sets a value in member wchar_value
                     * @param _wchar_value New value for member wchar_value
                     */
                    eProsima_user_DllExport void wchar_value(
                            wchar_t _wchar_value);

                    /*!
                     * @brief This function returns the value of member wchar_value
                     * @return Value of member wchar_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport wchar_t wchar_value() const;

                    /*!
                     * @brief This function returns a reference to member wchar_value
                     * @return Reference to member wchar_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport wchar_t& wchar_value();


                    /*!
                     * @brief This function sets a value in member enumerated_value
                     * @param _enumerated_value New value for member enumerated_value
                     */
                    eProsima_user_DllExport void enumerated_value(
                            int32_t _enumerated_value);

                    /*!
                     * @brief This function returns the value of member enumerated_value
                     * @return Value of member enumerated_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport int32_t enumerated_value() const;

                    /*!
                     * @brief This function returns a reference to member enumerated_value
                     * @return Reference to member enumerated_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport int32_t& enumerated_value();


                    /*!
                     * @brief This function copies the value in member string8_value
                     * @param _string8_value New value to be copied in member string8_value
                     */
                    eProsima_user_DllExport void string8_value(
                            const eprosima::fastcdr::fixed_string<128>& _string8_value);

                    /*!
                     * @brief This function moves the value in member string8_value
                     * @param _string8_value New value to be moved in member string8_value
                     */
                    eProsima_user_DllExport void string8_value(
                            eprosima::fastcdr::fixed_string<128>&& _string8_value);

                    /*!
                     * @brief This function returns a constant reference to member string8_value
                     * @return Constant reference to member string8_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastcdr::fixed_string<128>& string8_value() const;

                    /*!
                     * @brief This function returns a reference to member string8_value
                     * @return Reference to member string8_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastcdr::fixed_string<128>& string8_value();


                    /*!
                     * @brief This function copies the value in member string16_value
                     * @param _string16_value New value to be copied in member string16_value
                     */
                    eProsima_user_DllExport void string16_value(
                            const std::wstring& _string16_value);

                    /*!
                     * @brief This function moves the value in member string16_value
                     * @param _string16_value New value to be moved in member string16_value
                     */
                    eProsima_user_DllExport void string16_value(
                            std::wstring&& _string16_value);

                    /*!
                     * @brief This function returns a constant reference to member string16_value
                     * @return Constant reference to member string16_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const std::wstring& string16_value() const;

                    /*!
                     * @brief This function returns a reference to member string16_value
                     * @return Reference to member string16_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport std::wstring& string16_value();


                    /*!
                     * @brief This function copies the value in member extended_value
                     * @param _extended_value New value to be copied in member extended_value
                     */
                    eProsima_user_DllExport void extended_value(
                            const eprosima::fastdds::dds::xtypes::ExtendedAnnotationParameterValue& _extended_value);

                    /*!
                     * @brief This function moves the value in member extended_value
                     * @param _extended_value New value to be moved in member extended_value
                     */
                    eProsima_user_DllExport void extended_value(
                            eprosima::fastdds::dds::xtypes::ExtendedAnnotationParameterValue&& _extended_value);

                    /*!
                     * @brief This function returns a constant reference to member extended_value
                     * @return Constant reference to member extended_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::ExtendedAnnotationParameterValue& extended_value() const;

                    /*!
                     * @brief This function returns a reference to member extended_value
                     * @return Reference to member extended_value
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::ExtendedAnnotationParameterValue& extended_value();

                private:

                    uint8_t m__d;

                    bool m_boolean_value{false};
                    uint8_t m_byte_value{0};
                    int8_t m_int8_value{0};
                    uint8_t m_uint8_value{0};
                    int16_t m_int16_value{0};
                    uint16_t m_uint_16_value{0};
                    int32_t m_int32_value{0};
                    uint32_t m_uint32_value{0};
                    int64_t m_int64_value{0};
                    uint64_t m_uint64_value{0};
                    float m_float32_value{0.0};
                    double m_float64_value{0.0};
                    long double m_float128_value{0.0};
                    char m_char_value{0};
                    wchar_t m_wchar_value{0};
                    int32_t m_enumerated_value{0};
                    eprosima::fastcdr::fixed_string<128> m_string8_value;
                    std::wstring m_string16_value;
                    eprosima::fastdds::dds::xtypes::ExtendedAnnotationParameterValue m_extended_value;
                };
                /*!
                 * @brief This class represents the structure AppliedAnnotationParameter defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class AppliedAnnotationParameter
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport AppliedAnnotationParameter();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~AppliedAnnotationParameter();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::AppliedAnnotationParameter that will be copied.
                     */
                    eProsima_user_DllExport AppliedAnnotationParameter(
                            const AppliedAnnotationParameter& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::AppliedAnnotationParameter that will be copied.
                     */
                    eProsima_user_DllExport AppliedAnnotationParameter(
                            AppliedAnnotationParameter&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::AppliedAnnotationParameter that will be copied.
                     */
                    eProsima_user_DllExport AppliedAnnotationParameter& operator =(
                            const AppliedAnnotationParameter& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::AppliedAnnotationParameter that will be copied.
                     */
                    eProsima_user_DllExport AppliedAnnotationParameter& operator =(
                            AppliedAnnotationParameter&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::AppliedAnnotationParameter object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const AppliedAnnotationParameter& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::AppliedAnnotationParameter object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const AppliedAnnotationParameter& x) const;

                    /*!
                     * @brief This function copies the value in member paramname_hash
                     * @param _paramname_hash New value to be copied in member paramname_hash
                     */
                    eProsima_user_DllExport void paramname_hash(
                            const eprosima::fastdds::dds::xtypes::NameHash& _paramname_hash);

                    /*!
                     * @brief This function moves the value in member paramname_hash
                     * @param _paramname_hash New value to be moved in member paramname_hash
                     */
                    eProsima_user_DllExport void paramname_hash(
                            eprosima::fastdds::dds::xtypes::NameHash&& _paramname_hash);

                    /*!
                     * @brief This function returns a constant reference to member paramname_hash
                     * @return Constant reference to member paramname_hash
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::NameHash& paramname_hash() const;

                    /*!
                     * @brief This function returns a reference to member paramname_hash
                     * @return Reference to member paramname_hash
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::NameHash& paramname_hash();


                    /*!
                     * @brief This function copies the value in member value
                     * @param _value New value to be copied in member value
                     */
                    eProsima_user_DllExport void value(
                            const eprosima::fastdds::dds::xtypes::AnnotationParameterValue& _value);

                    /*!
                     * @brief This function moves the value in member value
                     * @param _value New value to be moved in member value
                     */
                    eProsima_user_DllExport void value(
                            eprosima::fastdds::dds::xtypes::AnnotationParameterValue&& _value);

                    /*!
                     * @brief This function returns a constant reference to member value
                     * @return Constant reference to member value
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::AnnotationParameterValue& value() const;

                    /*!
                     * @brief This function returns a reference to member value
                     * @return Reference to member value
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::AnnotationParameterValue& value();

                private:

                    eprosima::fastdds::dds::xtypes::NameHash m_paramname_hash{0};
                    eprosima::fastdds::dds::xtypes::AnnotationParameterValue m_value;

                };
                typedef std::vector<eprosima::fastdds::dds::xtypes::AppliedAnnotationParameter> AppliedAnnotationParameterSeq;

                /*!
                 * @brief This class represents the structure AppliedAnnotation defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class AppliedAnnotation
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport AppliedAnnotation();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~AppliedAnnotation();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::AppliedAnnotation that will be copied.
                     */
                    eProsima_user_DllExport AppliedAnnotation(
                            const AppliedAnnotation& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::AppliedAnnotation that will be copied.
                     */
                    eProsima_user_DllExport AppliedAnnotation(
                            AppliedAnnotation&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::AppliedAnnotation that will be copied.
                     */
                    eProsima_user_DllExport AppliedAnnotation& operator =(
                            const AppliedAnnotation& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::AppliedAnnotation that will be copied.
                     */
                    eProsima_user_DllExport AppliedAnnotation& operator =(
                            AppliedAnnotation&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::AppliedAnnotation object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const AppliedAnnotation& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::AppliedAnnotation object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const AppliedAnnotation& x) const;

                    /*!
                     * @brief This function copies the value in member annotation_typeid
                     * @param _annotation_typeid New value to be copied in member annotation_typeid
                     */
                    eProsima_user_DllExport void annotation_typeid(
                            const eprosima::fastdds::dds::xtypes::TypeIdentifier& _annotation_typeid);

                    /*!
                     * @brief This function moves the value in member annotation_typeid
                     * @param _annotation_typeid New value to be moved in member annotation_typeid
                     */
                    eProsima_user_DllExport void annotation_typeid(
                            eprosima::fastdds::dds::xtypes::TypeIdentifier&& _annotation_typeid);

                    /*!
                     * @brief This function returns a constant reference to member annotation_typeid
                     * @return Constant reference to member annotation_typeid
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::TypeIdentifier& annotation_typeid() const;

                    /*!
                     * @brief This function returns a reference to member annotation_typeid
                     * @return Reference to member annotation_typeid
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::TypeIdentifier& annotation_typeid();


                    /*!
                     * @brief This function copies the value in member param_seq
                     * @param _param_seq New value to be copied in member param_seq
                     */
                    eProsima_user_DllExport void param_seq(
                            const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationParameterSeq>& _param_seq);

                    /*!
                     * @brief This function moves the value in member param_seq
                     * @param _param_seq New value to be moved in member param_seq
                     */
                    eProsima_user_DllExport void param_seq(
                            eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationParameterSeq>&& _param_seq);

                    /*!
                     * @brief This function returns a constant reference to member param_seq
                     * @return Constant reference to member param_seq
                     */
                    eProsima_user_DllExport const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationParameterSeq>& param_seq() const;

                    /*!
                     * @brief This function returns a reference to member param_seq
                     * @return Reference to member param_seq
                     */
                    eProsima_user_DllExport eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationParameterSeq>& param_seq();

                private:

                    eprosima::fastdds::dds::xtypes::TypeIdentifier* m_annotation_typeid;
                    eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationParameterSeq> m_param_seq;

                };
                typedef std::vector<eprosima::fastdds::dds::xtypes::AppliedAnnotation> AppliedAnnotationSeq;

                /*!
                 * @brief This class represents the structure AppliedVerbatimAnnotation defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class AppliedVerbatimAnnotation
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport AppliedVerbatimAnnotation();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~AppliedVerbatimAnnotation();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation that will be copied.
                     */
                    eProsima_user_DllExport AppliedVerbatimAnnotation(
                            const AppliedVerbatimAnnotation& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation that will be copied.
                     */
                    eProsima_user_DllExport AppliedVerbatimAnnotation(
                            AppliedVerbatimAnnotation&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation that will be copied.
                     */
                    eProsima_user_DllExport AppliedVerbatimAnnotation& operator =(
                            const AppliedVerbatimAnnotation& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation that will be copied.
                     */
                    eProsima_user_DllExport AppliedVerbatimAnnotation& operator =(
                            AppliedVerbatimAnnotation&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const AppliedVerbatimAnnotation& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const AppliedVerbatimAnnotation& x) const;

                    /*!
                     * @brief This function copies the value in member placement
                     * @param _placement New value to be copied in member placement
                     */
                    eProsima_user_DllExport void placement(
                            const eprosima::fastcdr::fixed_string<32>& _placement);

                    /*!
                     * @brief This function moves the value in member placement
                     * @param _placement New value to be moved in member placement
                     */
                    eProsima_user_DllExport void placement(
                            eprosima::fastcdr::fixed_string<32>&& _placement);

                    /*!
                     * @brief This function returns a constant reference to member placement
                     * @return Constant reference to member placement
                     */
                    eProsima_user_DllExport const eprosima::fastcdr::fixed_string<32>& placement() const;

                    /*!
                     * @brief This function returns a reference to member placement
                     * @return Reference to member placement
                     */
                    eProsima_user_DllExport eprosima::fastcdr::fixed_string<32>& placement();


                    /*!
                     * @brief This function copies the value in member language
                     * @param _language New value to be copied in member language
                     */
                    eProsima_user_DllExport void language(
                            const eprosima::fastcdr::fixed_string<32>& _language);

                    /*!
                     * @brief This function moves the value in member language
                     * @param _language New value to be moved in member language
                     */
                    eProsima_user_DllExport void language(
                            eprosima::fastcdr::fixed_string<32>&& _language);

                    /*!
                     * @brief This function returns a constant reference to member language
                     * @return Constant reference to member language
                     */
                    eProsima_user_DllExport const eprosima::fastcdr::fixed_string<32>& language() const;

                    /*!
                     * @brief This function returns a reference to member language
                     * @return Reference to member language
                     */
                    eProsima_user_DllExport eprosima::fastcdr::fixed_string<32>& language();


                    /*!
                     * @brief This function copies the value in member text
                     * @param _text New value to be copied in member text
                     */
                    eProsima_user_DllExport void text(
                            const std::string& _text);

                    /*!
                     * @brief This function moves the value in member text
                     * @param _text New value to be moved in member text
                     */
                    eProsima_user_DllExport void text(
                            std::string&& _text);

                    /*!
                     * @brief This function returns a constant reference to member text
                     * @return Constant reference to member text
                     */
                    eProsima_user_DllExport const std::string& text() const;

                    /*!
                     * @brief This function returns a reference to member text
                     * @return Reference to member text
                     */
                    eProsima_user_DllExport std::string& text();

                private:

                    eprosima::fastcdr::fixed_string<32> m_placement;
                    eprosima::fastcdr::fixed_string<32> m_language;
                    std::string m_text;

                };
                /*!
                 * @brief This class represents the structure AppliedBuiltinMemberAnnotations defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class AppliedBuiltinMemberAnnotations
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport AppliedBuiltinMemberAnnotations();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~AppliedBuiltinMemberAnnotations();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations that will be copied.
                     */
                    eProsima_user_DllExport AppliedBuiltinMemberAnnotations(
                            const AppliedBuiltinMemberAnnotations& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations that will be copied.
                     */
                    eProsima_user_DllExport AppliedBuiltinMemberAnnotations(
                            AppliedBuiltinMemberAnnotations&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations that will be copied.
                     */
                    eProsima_user_DllExport AppliedBuiltinMemberAnnotations& operator =(
                            const AppliedBuiltinMemberAnnotations& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations that will be copied.
                     */
                    eProsima_user_DllExport AppliedBuiltinMemberAnnotations& operator =(
                            AppliedBuiltinMemberAnnotations&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const AppliedBuiltinMemberAnnotations& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const AppliedBuiltinMemberAnnotations& x) const;

                    /*!
                     * @brief This function copies the value in member unit
                     * @param _unit New value to be copied in member unit
                     */
                    eProsima_user_DllExport void unit(
                            const eprosima::fastcdr::optional<std::string>& _unit);

                    /*!
                     * @brief This function moves the value in member unit
                     * @param _unit New value to be moved in member unit
                     */
                    eProsima_user_DllExport void unit(
                            eprosima::fastcdr::optional<std::string>&& _unit);

                    /*!
                     * @brief This function returns a constant reference to member unit
                     * @return Constant reference to member unit
                     */
                    eProsima_user_DllExport const eprosima::fastcdr::optional<std::string>& unit() const;

                    /*!
                     * @brief This function returns a reference to member unit
                     * @return Reference to member unit
                     */
                    eProsima_user_DllExport eprosima::fastcdr::optional<std::string>& unit();


                    /*!
                     * @brief This function copies the value in member min
                     * @param _min New value to be copied in member min
                     */
                    eProsima_user_DllExport void min(
                            const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AnnotationParameterValue>& _min);

                    /*!
                     * @brief This function moves the value in member min
                     * @param _min New value to be moved in member min
                     */
                    eProsima_user_DllExport void min(
                            eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AnnotationParameterValue>&& _min);

                    /*!
                     * @brief This function returns a constant reference to member min
                     * @return Constant reference to member min
                     */
                    eProsima_user_DllExport const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AnnotationParameterValue>& min() const;

                    /*!
                     * @brief This function returns a reference to member min
                     * @return Reference to member min
                     */
                    eProsima_user_DllExport eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AnnotationParameterValue>& min();


                    /*!
                     * @brief This function copies the value in member max
                     * @param _max New value to be copied in member max
                     */
                    eProsima_user_DllExport void max(
                            const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AnnotationParameterValue>& _max);

                    /*!
                     * @brief This function moves the value in member max
                     * @param _max New value to be moved in member max
                     */
                    eProsima_user_DllExport void max(
                            eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AnnotationParameterValue>&& _max);

                    /*!
                     * @brief This function returns a constant reference to member max
                     * @return Constant reference to member max
                     */
                    eProsima_user_DllExport const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AnnotationParameterValue>& max() const;

                    /*!
                     * @brief This function returns a reference to member max
                     * @return Reference to member max
                     */
                    eProsima_user_DllExport eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AnnotationParameterValue>& max();


                    /*!
                     * @brief This function copies the value in member hash_id
                     * @param _hash_id New value to be copied in member hash_id
                     */
                    eProsima_user_DllExport void hash_id(
                            const eprosima::fastcdr::optional<std::string>& _hash_id);

                    /*!
                     * @brief This function moves the value in member hash_id
                     * @param _hash_id New value to be moved in member hash_id
                     */
                    eProsima_user_DllExport void hash_id(
                            eprosima::fastcdr::optional<std::string>&& _hash_id);

                    /*!
                     * @brief This function returns a constant reference to member hash_id
                     * @return Constant reference to member hash_id
                     */
                    eProsima_user_DllExport const eprosima::fastcdr::optional<std::string>& hash_id() const;

                    /*!
                     * @brief This function returns a reference to member hash_id
                     * @return Reference to member hash_id
                     */
                    eProsima_user_DllExport eprosima::fastcdr::optional<std::string>& hash_id();

                private:

                    eprosima::fastcdr::optional<std::string> m_unit;
                    eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AnnotationParameterValue> m_min;
                    eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AnnotationParameterValue> m_max;
                    eprosima::fastcdr::optional<std::string> m_hash_id;

                };
                /*!
                 * @brief This class represents the structure CommonStructMember defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CommonStructMember
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CommonStructMember();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CommonStructMember();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonStructMember that will be copied.
                     */
                    eProsima_user_DllExport CommonStructMember(
                            const CommonStructMember& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonStructMember that will be copied.
                     */
                    eProsima_user_DllExport CommonStructMember(
                            CommonStructMember&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonStructMember that will be copied.
                     */
                    eProsima_user_DllExport CommonStructMember& operator =(
                            const CommonStructMember& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonStructMember that will be copied.
                     */
                    eProsima_user_DllExport CommonStructMember& operator =(
                            CommonStructMember&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CommonStructMember object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CommonStructMember& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CommonStructMember object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CommonStructMember& x) const;

                    /*!
                     * @brief This function sets a value in member member_id
                     * @param _member_id New value for member member_id
                     */
                    eProsima_user_DllExport void member_id(
                            eprosima::fastdds::dds::xtypes::MemberId _member_id);

                    /*!
                     * @brief This function returns the value of member member_id
                     * @return Value of member member_id
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MemberId member_id() const;

                    /*!
                     * @brief This function returns a reference to member member_id
                     * @return Reference to member member_id
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MemberId& member_id();


                    /*!
                     * @brief This function copies the value in member member_flags
                     * @param _member_flags New value to be copied in member member_flags
                     */
                    eProsima_user_DllExport void member_flags(
                            const eprosima::fastdds::dds::xtypes::StructMemberFlag& _member_flags);

                    /*!
                     * @brief This function moves the value in member member_flags
                     * @param _member_flags New value to be moved in member member_flags
                     */
                    eProsima_user_DllExport void member_flags(
                            eprosima::fastdds::dds::xtypes::StructMemberFlag&& _member_flags);

                    /*!
                     * @brief This function returns a constant reference to member member_flags
                     * @return Constant reference to member member_flags
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::StructMemberFlag& member_flags() const;

                    /*!
                     * @brief This function returns a reference to member member_flags
                     * @return Reference to member member_flags
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::StructMemberFlag& member_flags();


                    /*!
                     * @brief This function copies the value in member member_type_id
                     * @param _member_type_id New value to be copied in member member_type_id
                     */
                    eProsima_user_DllExport void member_type_id(
                            const eprosima::fastdds::dds::xtypes::TypeIdentifier& _member_type_id);

                    /*!
                     * @brief This function moves the value in member member_type_id
                     * @param _member_type_id New value to be moved in member member_type_id
                     */
                    eProsima_user_DllExport void member_type_id(
                            eprosima::fastdds::dds::xtypes::TypeIdentifier&& _member_type_id);

                    /*!
                     * @brief This function returns a constant reference to member member_type_id
                     * @return Constant reference to member member_type_id
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::TypeIdentifier& member_type_id() const;

                    /*!
                     * @brief This function returns a reference to member member_type_id
                     * @return Reference to member member_type_id
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::TypeIdentifier& member_type_id();

                private:

                    eprosima::fastdds::dds::xtypes::MemberId m_member_id{0};
                    eprosima::fastdds::dds::xtypes::StructMemberFlag m_member_flags{0};
                    eprosima::fastdds::dds::xtypes::TypeIdentifier* m_member_type_id;

                };
                /*!
                 * @brief This class represents the structure CompleteMemberDetail defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteMemberDetail
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CompleteMemberDetail();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CompleteMemberDetail();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteMemberDetail that will be copied.
                     */
                    eProsima_user_DllExport CompleteMemberDetail(
                            const CompleteMemberDetail& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteMemberDetail that will be copied.
                     */
                    eProsima_user_DllExport CompleteMemberDetail(
                            CompleteMemberDetail&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteMemberDetail that will be copied.
                     */
                    eProsima_user_DllExport CompleteMemberDetail& operator =(
                            const CompleteMemberDetail& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteMemberDetail that will be copied.
                     */
                    eProsima_user_DllExport CompleteMemberDetail& operator =(
                            CompleteMemberDetail&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteMemberDetail object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CompleteMemberDetail& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteMemberDetail object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CompleteMemberDetail& x) const;

                    /*!
                     * @brief This function copies the value in member name
                     * @param _name New value to be copied in member name
                     */
                    eProsima_user_DllExport void name(
                            const eprosima::fastdds::dds::xtypes::MemberName& _name);

                    /*!
                     * @brief This function moves the value in member name
                     * @param _name New value to be moved in member name
                     */
                    eProsima_user_DllExport void name(
                            eprosima::fastdds::dds::xtypes::MemberName&& _name);

                    /*!
                     * @brief This function returns a constant reference to member name
                     * @return Constant reference to member name
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MemberName& name() const;

                    /*!
                     * @brief This function returns a reference to member name
                     * @return Reference to member name
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MemberName& name();


                    /*!
                     * @brief This function copies the value in member ann_builtin
                     * @param _ann_builtin New value to be copied in member ann_builtin
                     */
                    eProsima_user_DllExport void ann_builtin(
                            const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations>& _ann_builtin);

                    /*!
                     * @brief This function moves the value in member ann_builtin
                     * @param _ann_builtin New value to be moved in member ann_builtin
                     */
                    eProsima_user_DllExport void ann_builtin(
                            eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations>&& _ann_builtin);

                    /*!
                     * @brief This function returns a constant reference to member ann_builtin
                     * @return Constant reference to member ann_builtin
                     */
                    eProsima_user_DllExport const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations>& ann_builtin() const;

                    /*!
                     * @brief This function returns a reference to member ann_builtin
                     * @return Reference to member ann_builtin
                     */
                    eProsima_user_DllExport eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations>& ann_builtin();


                    /*!
                     * @brief This function copies the value in member ann_custom
                     * @param _ann_custom New value to be copied in member ann_custom
                     */
                    eProsima_user_DllExport void ann_custom(
                            const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>& _ann_custom);

                    /*!
                     * @brief This function moves the value in member ann_custom
                     * @param _ann_custom New value to be moved in member ann_custom
                     */
                    eProsima_user_DllExport void ann_custom(
                            eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>&& _ann_custom);

                    /*!
                     * @brief This function returns a constant reference to member ann_custom
                     * @return Constant reference to member ann_custom
                     */
                    eProsima_user_DllExport const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>& ann_custom() const;

                    /*!
                     * @brief This function returns a reference to member ann_custom
                     * @return Reference to member ann_custom
                     */
                    eProsima_user_DllExport eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>& ann_custom();

                private:

                    eprosima::fastdds::dds::xtypes::MemberName m_name;
                    eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations> m_ann_builtin;
                    eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq> m_ann_custom;

                };
                /*!
                 * @brief This class represents the structure MinimalMemberDetail defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalMemberDetail
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport MinimalMemberDetail();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~MinimalMemberDetail();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalMemberDetail that will be copied.
                     */
                    eProsima_user_DllExport MinimalMemberDetail(
                            const MinimalMemberDetail& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalMemberDetail that will be copied.
                     */
                    eProsima_user_DllExport MinimalMemberDetail(
                            MinimalMemberDetail&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalMemberDetail that will be copied.
                     */
                    eProsima_user_DllExport MinimalMemberDetail& operator =(
                            const MinimalMemberDetail& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalMemberDetail that will be copied.
                     */
                    eProsima_user_DllExport MinimalMemberDetail& operator =(
                            MinimalMemberDetail&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalMemberDetail object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const MinimalMemberDetail& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalMemberDetail object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const MinimalMemberDetail& x) const;

                    /*!
                     * @brief This function copies the value in member name_hash
                     * @param _name_hash New value to be copied in member name_hash
                     */
                    eProsima_user_DllExport void name_hash(
                            const eprosima::fastdds::dds::xtypes::NameHash& _name_hash);

                    /*!
                     * @brief This function moves the value in member name_hash
                     * @param _name_hash New value to be moved in member name_hash
                     */
                    eProsima_user_DllExport void name_hash(
                            eprosima::fastdds::dds::xtypes::NameHash&& _name_hash);

                    /*!
                     * @brief This function returns a constant reference to member name_hash
                     * @return Constant reference to member name_hash
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::NameHash& name_hash() const;

                    /*!
                     * @brief This function returns a reference to member name_hash
                     * @return Reference to member name_hash
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::NameHash& name_hash();

                private:

                    eprosima::fastdds::dds::xtypes::NameHash m_name_hash{0};

                };
                /*!
                 * @brief This class represents the structure CompleteStructMember defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteStructMember
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CompleteStructMember();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CompleteStructMember();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteStructMember that will be copied.
                     */
                    eProsima_user_DllExport CompleteStructMember(
                            const CompleteStructMember& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteStructMember that will be copied.
                     */
                    eProsima_user_DllExport CompleteStructMember(
                            CompleteStructMember&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteStructMember that will be copied.
                     */
                    eProsima_user_DllExport CompleteStructMember& operator =(
                            const CompleteStructMember& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteStructMember that will be copied.
                     */
                    eProsima_user_DllExport CompleteStructMember& operator =(
                            CompleteStructMember&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteStructMember object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CompleteStructMember& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteStructMember object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CompleteStructMember& x) const;

                    /*!
                     * @brief This function copies the value in member common
                     * @param _common New value to be copied in member common
                     */
                    eProsima_user_DllExport void common(
                            const eprosima::fastdds::dds::xtypes::CommonStructMember& _common);

                    /*!
                     * @brief This function moves the value in member common
                     * @param _common New value to be moved in member common
                     */
                    eProsima_user_DllExport void common(
                            eprosima::fastdds::dds::xtypes::CommonStructMember&& _common);

                    /*!
                     * @brief This function returns a constant reference to member common
                     * @return Constant reference to member common
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CommonStructMember& common() const;

                    /*!
                     * @brief This function returns a reference to member common
                     * @return Reference to member common
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CommonStructMember& common();


                    /*!
                     * @brief This function copies the value in member detail
                     * @param _detail New value to be copied in member detail
                     */
                    eProsima_user_DllExport void detail(
                            const eprosima::fastdds::dds::xtypes::CompleteMemberDetail& _detail);

                    /*!
                     * @brief This function moves the value in member detail
                     * @param _detail New value to be moved in member detail
                     */
                    eProsima_user_DllExport void detail(
                            eprosima::fastdds::dds::xtypes::CompleteMemberDetail&& _detail);

                    /*!
                     * @brief This function returns a constant reference to member detail
                     * @return Constant reference to member detail
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteMemberDetail& detail() const;

                    /*!
                     * @brief This function returns a reference to member detail
                     * @return Reference to member detail
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteMemberDetail& detail();

                private:

                    eprosima::fastdds::dds::xtypes::CommonStructMember m_common;
                    eprosima::fastdds::dds::xtypes::CompleteMemberDetail m_detail;

                };
                typedef std::vector<eprosima::fastdds::dds::xtypes::CompleteStructMember> CompleteStructMemberSeq;

                /*!
                 * @brief This class represents the structure MinimalStructMember defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalStructMember
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport MinimalStructMember();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~MinimalStructMember();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalStructMember that will be copied.
                     */
                    eProsima_user_DllExport MinimalStructMember(
                            const MinimalStructMember& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalStructMember that will be copied.
                     */
                    eProsima_user_DllExport MinimalStructMember(
                            MinimalStructMember&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalStructMember that will be copied.
                     */
                    eProsima_user_DllExport MinimalStructMember& operator =(
                            const MinimalStructMember& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalStructMember that will be copied.
                     */
                    eProsima_user_DllExport MinimalStructMember& operator =(
                            MinimalStructMember&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalStructMember object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const MinimalStructMember& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalStructMember object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const MinimalStructMember& x) const;

                    /*!
                     * @brief This function copies the value in member common
                     * @param _common New value to be copied in member common
                     */
                    eProsima_user_DllExport void common(
                            const eprosima::fastdds::dds::xtypes::CommonStructMember& _common);

                    /*!
                     * @brief This function moves the value in member common
                     * @param _common New value to be moved in member common
                     */
                    eProsima_user_DllExport void common(
                            eprosima::fastdds::dds::xtypes::CommonStructMember&& _common);

                    /*!
                     * @brief This function returns a constant reference to member common
                     * @return Constant reference to member common
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CommonStructMember& common() const;

                    /*!
                     * @brief This function returns a reference to member common
                     * @return Reference to member common
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CommonStructMember& common();


                    /*!
                     * @brief This function copies the value in member detail
                     * @param _detail New value to be copied in member detail
                     */
                    eProsima_user_DllExport void detail(
                            const eprosima::fastdds::dds::xtypes::MinimalMemberDetail& _detail);

                    /*!
                     * @brief This function moves the value in member detail
                     * @param _detail New value to be moved in member detail
                     */
                    eProsima_user_DllExport void detail(
                            eprosima::fastdds::dds::xtypes::MinimalMemberDetail&& _detail);

                    /*!
                     * @brief This function returns a constant reference to member detail
                     * @return Constant reference to member detail
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalMemberDetail& detail() const;

                    /*!
                     * @brief This function returns a reference to member detail
                     * @return Reference to member detail
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalMemberDetail& detail();

                private:

                    eprosima::fastdds::dds::xtypes::CommonStructMember m_common;
                    eprosima::fastdds::dds::xtypes::MinimalMemberDetail m_detail;

                };
                typedef std::vector<eprosima::fastdds::dds::xtypes::MinimalStructMember> MinimalStructMemberSeq;

                /*!
                 * @brief This class represents the structure AppliedBuiltinTypeAnnotations defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class AppliedBuiltinTypeAnnotations
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport AppliedBuiltinTypeAnnotations();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~AppliedBuiltinTypeAnnotations();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations that will be copied.
                     */
                    eProsima_user_DllExport AppliedBuiltinTypeAnnotations(
                            const AppliedBuiltinTypeAnnotations& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations that will be copied.
                     */
                    eProsima_user_DllExport AppliedBuiltinTypeAnnotations(
                            AppliedBuiltinTypeAnnotations&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations that will be copied.
                     */
                    eProsima_user_DllExport AppliedBuiltinTypeAnnotations& operator =(
                            const AppliedBuiltinTypeAnnotations& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations that will be copied.
                     */
                    eProsima_user_DllExport AppliedBuiltinTypeAnnotations& operator =(
                            AppliedBuiltinTypeAnnotations&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const AppliedBuiltinTypeAnnotations& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const AppliedBuiltinTypeAnnotations& x) const;

                    /*!
                     * @brief This function copies the value in member verbatim
                     * @param _verbatim New value to be copied in member verbatim
                     */
                    eProsima_user_DllExport void verbatim(
                            const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation>& _verbatim);

                    /*!
                     * @brief This function moves the value in member verbatim
                     * @param _verbatim New value to be moved in member verbatim
                     */
                    eProsima_user_DllExport void verbatim(
                            eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation>&& _verbatim);

                    /*!
                     * @brief This function returns a constant reference to member verbatim
                     * @return Constant reference to member verbatim
                     */
                    eProsima_user_DllExport const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation>& verbatim() const;

                    /*!
                     * @brief This function returns a reference to member verbatim
                     * @return Reference to member verbatim
                     */
                    eProsima_user_DllExport eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation>& verbatim();

                private:

                    eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation> m_verbatim;

                };
                /*!
                 * @brief This class represents the structure MinimalTypeDetail defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalTypeDetail
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport MinimalTypeDetail();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~MinimalTypeDetail();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalTypeDetail that will be copied.
                     */
                    eProsima_user_DllExport MinimalTypeDetail(
                            const MinimalTypeDetail& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalTypeDetail that will be copied.
                     */
                    eProsima_user_DllExport MinimalTypeDetail(
                            MinimalTypeDetail&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalTypeDetail that will be copied.
                     */
                    eProsima_user_DllExport MinimalTypeDetail& operator =(
                            const MinimalTypeDetail& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalTypeDetail that will be copied.
                     */
                    eProsima_user_DllExport MinimalTypeDetail& operator =(
                            MinimalTypeDetail&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalTypeDetail object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const MinimalTypeDetail& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalTypeDetail object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const MinimalTypeDetail& x) const;

                private:


                };
                /*!
                 * @brief This class represents the structure CompleteTypeDetail defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteTypeDetail
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CompleteTypeDetail();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CompleteTypeDetail();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteTypeDetail that will be copied.
                     */
                    eProsima_user_DllExport CompleteTypeDetail(
                            const CompleteTypeDetail& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteTypeDetail that will be copied.
                     */
                    eProsima_user_DllExport CompleteTypeDetail(
                            CompleteTypeDetail&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteTypeDetail that will be copied.
                     */
                    eProsima_user_DllExport CompleteTypeDetail& operator =(
                            const CompleteTypeDetail& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteTypeDetail that will be copied.
                     */
                    eProsima_user_DllExport CompleteTypeDetail& operator =(
                            CompleteTypeDetail&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteTypeDetail object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CompleteTypeDetail& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteTypeDetail object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CompleteTypeDetail& x) const;

                    /*!
                     * @brief This function copies the value in member ann_builtin
                     * @param _ann_builtin New value to be copied in member ann_builtin
                     */
                    eProsima_user_DllExport void ann_builtin(
                            const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations>& _ann_builtin);

                    /*!
                     * @brief This function moves the value in member ann_builtin
                     * @param _ann_builtin New value to be moved in member ann_builtin
                     */
                    eProsima_user_DllExport void ann_builtin(
                            eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations>&& _ann_builtin);

                    /*!
                     * @brief This function returns a constant reference to member ann_builtin
                     * @return Constant reference to member ann_builtin
                     */
                    eProsima_user_DllExport const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations>& ann_builtin() const;

                    /*!
                     * @brief This function returns a reference to member ann_builtin
                     * @return Reference to member ann_builtin
                     */
                    eProsima_user_DllExport eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations>& ann_builtin();


                    /*!
                     * @brief This function copies the value in member ann_custom
                     * @param _ann_custom New value to be copied in member ann_custom
                     */
                    eProsima_user_DllExport void ann_custom(
                            const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>& _ann_custom);

                    /*!
                     * @brief This function moves the value in member ann_custom
                     * @param _ann_custom New value to be moved in member ann_custom
                     */
                    eProsima_user_DllExport void ann_custom(
                            eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>&& _ann_custom);

                    /*!
                     * @brief This function returns a constant reference to member ann_custom
                     * @return Constant reference to member ann_custom
                     */
                    eProsima_user_DllExport const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>& ann_custom() const;

                    /*!
                     * @brief This function returns a reference to member ann_custom
                     * @return Reference to member ann_custom
                     */
                    eProsima_user_DllExport eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>& ann_custom();


                    /*!
                     * @brief This function copies the value in member type_name
                     * @param _type_name New value to be copied in member type_name
                     */
                    eProsima_user_DllExport void type_name(
                            const eprosima::fastdds::dds::xtypes::QualifiedTypeName& _type_name);

                    /*!
                     * @brief This function moves the value in member type_name
                     * @param _type_name New value to be moved in member type_name
                     */
                    eProsima_user_DllExport void type_name(
                            eprosima::fastdds::dds::xtypes::QualifiedTypeName&& _type_name);

                    /*!
                     * @brief This function returns a constant reference to member type_name
                     * @return Constant reference to member type_name
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::QualifiedTypeName& type_name() const;

                    /*!
                     * @brief This function returns a reference to member type_name
                     * @return Reference to member type_name
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::QualifiedTypeName& type_name();

                private:

                    eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations> m_ann_builtin;
                    eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq> m_ann_custom;
                    eprosima::fastdds::dds::xtypes::QualifiedTypeName m_type_name;

                };
                /*!
                 * @brief This class represents the structure CompleteStructHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteStructHeader
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CompleteStructHeader();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CompleteStructHeader();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteStructHeader that will be copied.
                     */
                    eProsima_user_DllExport CompleteStructHeader(
                            const CompleteStructHeader& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteStructHeader that will be copied.
                     */
                    eProsima_user_DllExport CompleteStructHeader(
                            CompleteStructHeader&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteStructHeader that will be copied.
                     */
                    eProsima_user_DllExport CompleteStructHeader& operator =(
                            const CompleteStructHeader& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteStructHeader that will be copied.
                     */
                    eProsima_user_DllExport CompleteStructHeader& operator =(
                            CompleteStructHeader&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteStructHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CompleteStructHeader& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteStructHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CompleteStructHeader& x) const;

                    /*!
                     * @brief This function copies the value in member base_type
                     * @param _base_type New value to be copied in member base_type
                     */
                    eProsima_user_DllExport void base_type(
                            const eprosima::fastdds::dds::xtypes::TypeIdentifier& _base_type);

                    /*!
                     * @brief This function moves the value in member base_type
                     * @param _base_type New value to be moved in member base_type
                     */
                    eProsima_user_DllExport void base_type(
                            eprosima::fastdds::dds::xtypes::TypeIdentifier&& _base_type);

                    /*!
                     * @brief This function returns a constant reference to member base_type
                     * @return Constant reference to member base_type
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::TypeIdentifier& base_type() const;

                    /*!
                     * @brief This function returns a reference to member base_type
                     * @return Reference to member base_type
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::TypeIdentifier& base_type();


                    /*!
                     * @brief This function copies the value in member detail
                     * @param _detail New value to be copied in member detail
                     */
                    eProsima_user_DllExport void detail(
                            const eprosima::fastdds::dds::xtypes::CompleteTypeDetail& _detail);

                    /*!
                     * @brief This function moves the value in member detail
                     * @param _detail New value to be moved in member detail
                     */
                    eProsima_user_DllExport void detail(
                            eprosima::fastdds::dds::xtypes::CompleteTypeDetail&& _detail);

                    /*!
                     * @brief This function returns a constant reference to member detail
                     * @return Constant reference to member detail
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteTypeDetail& detail() const;

                    /*!
                     * @brief This function returns a reference to member detail
                     * @return Reference to member detail
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteTypeDetail& detail();

                private:

                    eprosima::fastdds::dds::xtypes::TypeIdentifier* m_base_type;
                    eprosima::fastdds::dds::xtypes::CompleteTypeDetail m_detail;

                };
                /*!
                 * @brief This class represents the structure MinimalStructHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalStructHeader
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport MinimalStructHeader();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~MinimalStructHeader();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalStructHeader that will be copied.
                     */
                    eProsima_user_DllExport MinimalStructHeader(
                            const MinimalStructHeader& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalStructHeader that will be copied.
                     */
                    eProsima_user_DllExport MinimalStructHeader(
                            MinimalStructHeader&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalStructHeader that will be copied.
                     */
                    eProsima_user_DllExport MinimalStructHeader& operator =(
                            const MinimalStructHeader& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalStructHeader that will be copied.
                     */
                    eProsima_user_DllExport MinimalStructHeader& operator =(
                            MinimalStructHeader&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalStructHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const MinimalStructHeader& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalStructHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const MinimalStructHeader& x) const;

                    /*!
                     * @brief This function copies the value in member base_type
                     * @param _base_type New value to be copied in member base_type
                     */
                    eProsima_user_DllExport void base_type(
                            const eprosima::fastdds::dds::xtypes::TypeIdentifier& _base_type);

                    /*!
                     * @brief This function moves the value in member base_type
                     * @param _base_type New value to be moved in member base_type
                     */
                    eProsima_user_DllExport void base_type(
                            eprosima::fastdds::dds::xtypes::TypeIdentifier&& _base_type);

                    /*!
                     * @brief This function returns a constant reference to member base_type
                     * @return Constant reference to member base_type
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::TypeIdentifier& base_type() const;

                    /*!
                     * @brief This function returns a reference to member base_type
                     * @return Reference to member base_type
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::TypeIdentifier& base_type();


                    /*!
                     * @brief This function copies the value in member detail
                     * @param _detail New value to be copied in member detail
                     */
                    eProsima_user_DllExport void detail(
                            const eprosima::fastdds::dds::xtypes::MinimalTypeDetail& _detail);

                    /*!
                     * @brief This function moves the value in member detail
                     * @param _detail New value to be moved in member detail
                     */
                    eProsima_user_DllExport void detail(
                            eprosima::fastdds::dds::xtypes::MinimalTypeDetail&& _detail);

                    /*!
                     * @brief This function returns a constant reference to member detail
                     * @return Constant reference to member detail
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalTypeDetail& detail() const;

                    /*!
                     * @brief This function returns a reference to member detail
                     * @return Reference to member detail
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalTypeDetail& detail();

                private:

                    eprosima::fastdds::dds::xtypes::TypeIdentifier* m_base_type;
                    eprosima::fastdds::dds::xtypes::MinimalTypeDetail m_detail;

                };
                /*!
                 * @brief This class represents the structure CompleteStructType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteStructType
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CompleteStructType();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CompleteStructType();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteStructType that will be copied.
                     */
                    eProsima_user_DllExport CompleteStructType(
                            const CompleteStructType& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteStructType that will be copied.
                     */
                    eProsima_user_DllExport CompleteStructType(
                            CompleteStructType&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteStructType that will be copied.
                     */
                    eProsima_user_DllExport CompleteStructType& operator =(
                            const CompleteStructType& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteStructType that will be copied.
                     */
                    eProsima_user_DllExport CompleteStructType& operator =(
                            CompleteStructType&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteStructType object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CompleteStructType& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteStructType object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CompleteStructType& x) const;

                    /*!
                     * @brief This function copies the value in member struct_flags
                     * @param _struct_flags New value to be copied in member struct_flags
                     */
                    eProsima_user_DllExport void struct_flags(
                            const eprosima::fastdds::dds::xtypes::StructTypeFlag& _struct_flags);

                    /*!
                     * @brief This function moves the value in member struct_flags
                     * @param _struct_flags New value to be moved in member struct_flags
                     */
                    eProsima_user_DllExport void struct_flags(
                            eprosima::fastdds::dds::xtypes::StructTypeFlag&& _struct_flags);

                    /*!
                     * @brief This function returns a constant reference to member struct_flags
                     * @return Constant reference to member struct_flags
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::StructTypeFlag& struct_flags() const;

                    /*!
                     * @brief This function returns a reference to member struct_flags
                     * @return Reference to member struct_flags
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::StructTypeFlag& struct_flags();


                    /*!
                     * @brief This function copies the value in member header
                     * @param _header New value to be copied in member header
                     */
                    eProsima_user_DllExport void header(
                            const eprosima::fastdds::dds::xtypes::CompleteStructHeader& _header);

                    /*!
                     * @brief This function moves the value in member header
                     * @param _header New value to be moved in member header
                     */
                    eProsima_user_DllExport void header(
                            eprosima::fastdds::dds::xtypes::CompleteStructHeader&& _header);

                    /*!
                     * @brief This function returns a constant reference to member header
                     * @return Constant reference to member header
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteStructHeader& header() const;

                    /*!
                     * @brief This function returns a reference to member header
                     * @return Reference to member header
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteStructHeader& header();


                    /*!
                     * @brief This function copies the value in member member_seq
                     * @param _member_seq New value to be copied in member member_seq
                     */
                    eProsima_user_DllExport void member_seq(
                            const eprosima::fastdds::dds::xtypes::CompleteStructMemberSeq& _member_seq);

                    /*!
                     * @brief This function moves the value in member member_seq
                     * @param _member_seq New value to be moved in member member_seq
                     */
                    eProsima_user_DllExport void member_seq(
                            eprosima::fastdds::dds::xtypes::CompleteStructMemberSeq&& _member_seq);

                    /*!
                     * @brief This function returns a constant reference to member member_seq
                     * @return Constant reference to member member_seq
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteStructMemberSeq& member_seq() const;

                    /*!
                     * @brief This function returns a reference to member member_seq
                     * @return Reference to member member_seq
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteStructMemberSeq& member_seq();

                private:

                    eprosima::fastdds::dds::xtypes::StructTypeFlag m_struct_flags{0};
                    eprosima::fastdds::dds::xtypes::CompleteStructHeader m_header;
                    eprosima::fastdds::dds::xtypes::CompleteStructMemberSeq m_member_seq;

                };
                /*!
                 * @brief This class represents the structure MinimalStructType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalStructType
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport MinimalStructType();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~MinimalStructType();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalStructType that will be copied.
                     */
                    eProsima_user_DllExport MinimalStructType(
                            const MinimalStructType& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalStructType that will be copied.
                     */
                    eProsima_user_DllExport MinimalStructType(
                            MinimalStructType&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalStructType that will be copied.
                     */
                    eProsima_user_DllExport MinimalStructType& operator =(
                            const MinimalStructType& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalStructType that will be copied.
                     */
                    eProsima_user_DllExport MinimalStructType& operator =(
                            MinimalStructType&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalStructType object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const MinimalStructType& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalStructType object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const MinimalStructType& x) const;

                    /*!
                     * @brief This function copies the value in member struct_flags
                     * @param _struct_flags New value to be copied in member struct_flags
                     */
                    eProsima_user_DllExport void struct_flags(
                            const eprosima::fastdds::dds::xtypes::StructTypeFlag& _struct_flags);

                    /*!
                     * @brief This function moves the value in member struct_flags
                     * @param _struct_flags New value to be moved in member struct_flags
                     */
                    eProsima_user_DllExport void struct_flags(
                            eprosima::fastdds::dds::xtypes::StructTypeFlag&& _struct_flags);

                    /*!
                     * @brief This function returns a constant reference to member struct_flags
                     * @return Constant reference to member struct_flags
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::StructTypeFlag& struct_flags() const;

                    /*!
                     * @brief This function returns a reference to member struct_flags
                     * @return Reference to member struct_flags
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::StructTypeFlag& struct_flags();


                    /*!
                     * @brief This function copies the value in member header
                     * @param _header New value to be copied in member header
                     */
                    eProsima_user_DllExport void header(
                            const eprosima::fastdds::dds::xtypes::MinimalStructHeader& _header);

                    /*!
                     * @brief This function moves the value in member header
                     * @param _header New value to be moved in member header
                     */
                    eProsima_user_DllExport void header(
                            eprosima::fastdds::dds::xtypes::MinimalStructHeader&& _header);

                    /*!
                     * @brief This function returns a constant reference to member header
                     * @return Constant reference to member header
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalStructHeader& header() const;

                    /*!
                     * @brief This function returns a reference to member header
                     * @return Reference to member header
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalStructHeader& header();


                    /*!
                     * @brief This function copies the value in member member_seq
                     * @param _member_seq New value to be copied in member member_seq
                     */
                    eProsima_user_DllExport void member_seq(
                            const eprosima::fastdds::dds::xtypes::MinimalStructMemberSeq& _member_seq);

                    /*!
                     * @brief This function moves the value in member member_seq
                     * @param _member_seq New value to be moved in member member_seq
                     */
                    eProsima_user_DllExport void member_seq(
                            eprosima::fastdds::dds::xtypes::MinimalStructMemberSeq&& _member_seq);

                    /*!
                     * @brief This function returns a constant reference to member member_seq
                     * @return Constant reference to member member_seq
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalStructMemberSeq& member_seq() const;

                    /*!
                     * @brief This function returns a reference to member member_seq
                     * @return Reference to member member_seq
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalStructMemberSeq& member_seq();

                private:

                    eprosima::fastdds::dds::xtypes::StructTypeFlag m_struct_flags{0};
                    eprosima::fastdds::dds::xtypes::MinimalStructHeader m_header;
                    eprosima::fastdds::dds::xtypes::MinimalStructMemberSeq m_member_seq;

                };
                typedef std::vector<int32_t> UnionCaseLabelSeq;

                /*!
                 * @brief This class represents the structure CommonUnionMember defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CommonUnionMember
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CommonUnionMember();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CommonUnionMember();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonUnionMember that will be copied.
                     */
                    eProsima_user_DllExport CommonUnionMember(
                            const CommonUnionMember& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonUnionMember that will be copied.
                     */
                    eProsima_user_DllExport CommonUnionMember(
                            CommonUnionMember&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonUnionMember that will be copied.
                     */
                    eProsima_user_DllExport CommonUnionMember& operator =(
                            const CommonUnionMember& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonUnionMember that will be copied.
                     */
                    eProsima_user_DllExport CommonUnionMember& operator =(
                            CommonUnionMember&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CommonUnionMember object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CommonUnionMember& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CommonUnionMember object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CommonUnionMember& x) const;

                    /*!
                     * @brief This function sets a value in member member_id
                     * @param _member_id New value for member member_id
                     */
                    eProsima_user_DllExport void member_id(
                            eprosima::fastdds::dds::xtypes::MemberId _member_id);

                    /*!
                     * @brief This function returns the value of member member_id
                     * @return Value of member member_id
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MemberId member_id() const;

                    /*!
                     * @brief This function returns a reference to member member_id
                     * @return Reference to member member_id
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MemberId& member_id();


                    /*!
                     * @brief This function copies the value in member member_flags
                     * @param _member_flags New value to be copied in member member_flags
                     */
                    eProsima_user_DllExport void member_flags(
                            const eprosima::fastdds::dds::xtypes::UnionMemberFlag& _member_flags);

                    /*!
                     * @brief This function moves the value in member member_flags
                     * @param _member_flags New value to be moved in member member_flags
                     */
                    eProsima_user_DllExport void member_flags(
                            eprosima::fastdds::dds::xtypes::UnionMemberFlag&& _member_flags);

                    /*!
                     * @brief This function returns a constant reference to member member_flags
                     * @return Constant reference to member member_flags
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::UnionMemberFlag& member_flags() const;

                    /*!
                     * @brief This function returns a reference to member member_flags
                     * @return Reference to member member_flags
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::UnionMemberFlag& member_flags();


                    /*!
                     * @brief This function copies the value in member type_id
                     * @param _type_id New value to be copied in member type_id
                     */
                    eProsima_user_DllExport void type_id(
                            const eprosima::fastdds::dds::xtypes::TypeIdentifier& _type_id);

                    /*!
                     * @brief This function moves the value in member type_id
                     * @param _type_id New value to be moved in member type_id
                     */
                    eProsima_user_DllExport void type_id(
                            eprosima::fastdds::dds::xtypes::TypeIdentifier&& _type_id);

                    /*!
                     * @brief This function returns a constant reference to member type_id
                     * @return Constant reference to member type_id
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::TypeIdentifier& type_id() const;

                    /*!
                     * @brief This function returns a reference to member type_id
                     * @return Reference to member type_id
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::TypeIdentifier& type_id();


                    /*!
                     * @brief This function copies the value in member label_seq
                     * @param _label_seq New value to be copied in member label_seq
                     */
                    eProsima_user_DllExport void label_seq(
                            const eprosima::fastdds::dds::xtypes::UnionCaseLabelSeq& _label_seq);

                    /*!
                     * @brief This function moves the value in member label_seq
                     * @param _label_seq New value to be moved in member label_seq
                     */
                    eProsima_user_DllExport void label_seq(
                            eprosima::fastdds::dds::xtypes::UnionCaseLabelSeq&& _label_seq);

                    /*!
                     * @brief This function returns a constant reference to member label_seq
                     * @return Constant reference to member label_seq
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::UnionCaseLabelSeq& label_seq() const;

                    /*!
                     * @brief This function returns a reference to member label_seq
                     * @return Reference to member label_seq
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::UnionCaseLabelSeq& label_seq();

                private:

                    eprosima::fastdds::dds::xtypes::MemberId m_member_id{0};
                    eprosima::fastdds::dds::xtypes::UnionMemberFlag m_member_flags{0};
                    eprosima::fastdds::dds::xtypes::TypeIdentifier* m_type_id;
                    eprosima::fastdds::dds::xtypes::UnionCaseLabelSeq m_label_seq;

                };
                /*!
                 * @brief This class represents the structure CompleteUnionMember defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteUnionMember
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CompleteUnionMember();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CompleteUnionMember();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteUnionMember that will be copied.
                     */
                    eProsima_user_DllExport CompleteUnionMember(
                            const CompleteUnionMember& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteUnionMember that will be copied.
                     */
                    eProsima_user_DllExport CompleteUnionMember(
                            CompleteUnionMember&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteUnionMember that will be copied.
                     */
                    eProsima_user_DllExport CompleteUnionMember& operator =(
                            const CompleteUnionMember& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteUnionMember that will be copied.
                     */
                    eProsima_user_DllExport CompleteUnionMember& operator =(
                            CompleteUnionMember&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteUnionMember object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CompleteUnionMember& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteUnionMember object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CompleteUnionMember& x) const;

                    /*!
                     * @brief This function copies the value in member common
                     * @param _common New value to be copied in member common
                     */
                    eProsima_user_DllExport void common(
                            const eprosima::fastdds::dds::xtypes::CommonUnionMember& _common);

                    /*!
                     * @brief This function moves the value in member common
                     * @param _common New value to be moved in member common
                     */
                    eProsima_user_DllExport void common(
                            eprosima::fastdds::dds::xtypes::CommonUnionMember&& _common);

                    /*!
                     * @brief This function returns a constant reference to member common
                     * @return Constant reference to member common
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CommonUnionMember& common() const;

                    /*!
                     * @brief This function returns a reference to member common
                     * @return Reference to member common
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CommonUnionMember& common();


                    /*!
                     * @brief This function copies the value in member detail
                     * @param _detail New value to be copied in member detail
                     */
                    eProsima_user_DllExport void detail(
                            const eprosima::fastdds::dds::xtypes::CompleteMemberDetail& _detail);

                    /*!
                     * @brief This function moves the value in member detail
                     * @param _detail New value to be moved in member detail
                     */
                    eProsima_user_DllExport void detail(
                            eprosima::fastdds::dds::xtypes::CompleteMemberDetail&& _detail);

                    /*!
                     * @brief This function returns a constant reference to member detail
                     * @return Constant reference to member detail
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteMemberDetail& detail() const;

                    /*!
                     * @brief This function returns a reference to member detail
                     * @return Reference to member detail
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteMemberDetail& detail();

                private:

                    eprosima::fastdds::dds::xtypes::CommonUnionMember m_common;
                    eprosima::fastdds::dds::xtypes::CompleteMemberDetail m_detail;

                };
                typedef std::vector<eprosima::fastdds::dds::xtypes::CompleteUnionMember> CompleteUnionMemberSeq;

                /*!
                 * @brief This class represents the structure MinimalUnionMember defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalUnionMember
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport MinimalUnionMember();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~MinimalUnionMember();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalUnionMember that will be copied.
                     */
                    eProsima_user_DllExport MinimalUnionMember(
                            const MinimalUnionMember& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalUnionMember that will be copied.
                     */
                    eProsima_user_DllExport MinimalUnionMember(
                            MinimalUnionMember&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalUnionMember that will be copied.
                     */
                    eProsima_user_DllExport MinimalUnionMember& operator =(
                            const MinimalUnionMember& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalUnionMember that will be copied.
                     */
                    eProsima_user_DllExport MinimalUnionMember& operator =(
                            MinimalUnionMember&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalUnionMember object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const MinimalUnionMember& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalUnionMember object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const MinimalUnionMember& x) const;

                    /*!
                     * @brief This function copies the value in member common
                     * @param _common New value to be copied in member common
                     */
                    eProsima_user_DllExport void common(
                            const eprosima::fastdds::dds::xtypes::CommonUnionMember& _common);

                    /*!
                     * @brief This function moves the value in member common
                     * @param _common New value to be moved in member common
                     */
                    eProsima_user_DllExport void common(
                            eprosima::fastdds::dds::xtypes::CommonUnionMember&& _common);

                    /*!
                     * @brief This function returns a constant reference to member common
                     * @return Constant reference to member common
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CommonUnionMember& common() const;

                    /*!
                     * @brief This function returns a reference to member common
                     * @return Reference to member common
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CommonUnionMember& common();


                    /*!
                     * @brief This function copies the value in member detail
                     * @param _detail New value to be copied in member detail
                     */
                    eProsima_user_DllExport void detail(
                            const eprosima::fastdds::dds::xtypes::MinimalMemberDetail& _detail);

                    /*!
                     * @brief This function moves the value in member detail
                     * @param _detail New value to be moved in member detail
                     */
                    eProsima_user_DllExport void detail(
                            eprosima::fastdds::dds::xtypes::MinimalMemberDetail&& _detail);

                    /*!
                     * @brief This function returns a constant reference to member detail
                     * @return Constant reference to member detail
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalMemberDetail& detail() const;

                    /*!
                     * @brief This function returns a reference to member detail
                     * @return Reference to member detail
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalMemberDetail& detail();

                private:

                    eprosima::fastdds::dds::xtypes::CommonUnionMember m_common;
                    eprosima::fastdds::dds::xtypes::MinimalMemberDetail m_detail;

                };
                typedef std::vector<eprosima::fastdds::dds::xtypes::MinimalUnionMember> MinimalUnionMemberSeq;

                /*!
                 * @brief This class represents the structure CommonDiscriminatorMember defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CommonDiscriminatorMember
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CommonDiscriminatorMember();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CommonDiscriminatorMember();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember that will be copied.
                     */
                    eProsima_user_DllExport CommonDiscriminatorMember(
                            const CommonDiscriminatorMember& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember that will be copied.
                     */
                    eProsima_user_DllExport CommonDiscriminatorMember(
                            CommonDiscriminatorMember&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember that will be copied.
                     */
                    eProsima_user_DllExport CommonDiscriminatorMember& operator =(
                            const CommonDiscriminatorMember& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember that will be copied.
                     */
                    eProsima_user_DllExport CommonDiscriminatorMember& operator =(
                            CommonDiscriminatorMember&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CommonDiscriminatorMember& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CommonDiscriminatorMember& x) const;

                    /*!
                     * @brief This function copies the value in member member_flags
                     * @param _member_flags New value to be copied in member member_flags
                     */
                    eProsima_user_DllExport void member_flags(
                            const eprosima::fastdds::dds::xtypes::UnionDiscriminatorFlag& _member_flags);

                    /*!
                     * @brief This function moves the value in member member_flags
                     * @param _member_flags New value to be moved in member member_flags
                     */
                    eProsima_user_DllExport void member_flags(
                            eprosima::fastdds::dds::xtypes::UnionDiscriminatorFlag&& _member_flags);

                    /*!
                     * @brief This function returns a constant reference to member member_flags
                     * @return Constant reference to member member_flags
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::UnionDiscriminatorFlag& member_flags() const;

                    /*!
                     * @brief This function returns a reference to member member_flags
                     * @return Reference to member member_flags
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::UnionDiscriminatorFlag& member_flags();


                    /*!
                     * @brief This function copies the value in member type_id
                     * @param _type_id New value to be copied in member type_id
                     */
                    eProsima_user_DllExport void type_id(
                            const eprosima::fastdds::dds::xtypes::TypeIdentifier& _type_id);

                    /*!
                     * @brief This function moves the value in member type_id
                     * @param _type_id New value to be moved in member type_id
                     */
                    eProsima_user_DllExport void type_id(
                            eprosima::fastdds::dds::xtypes::TypeIdentifier&& _type_id);

                    /*!
                     * @brief This function returns a constant reference to member type_id
                     * @return Constant reference to member type_id
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::TypeIdentifier& type_id() const;

                    /*!
                     * @brief This function returns a reference to member type_id
                     * @return Reference to member type_id
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::TypeIdentifier& type_id();

                private:

                    eprosima::fastdds::dds::xtypes::UnionDiscriminatorFlag m_member_flags{0};
                    eprosima::fastdds::dds::xtypes::TypeIdentifier* m_type_id;

                };
                /*!
                 * @brief This class represents the structure CompleteDiscriminatorMember defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteDiscriminatorMember
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CompleteDiscriminatorMember();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CompleteDiscriminatorMember();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember that will be copied.
                     */
                    eProsima_user_DllExport CompleteDiscriminatorMember(
                            const CompleteDiscriminatorMember& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember that will be copied.
                     */
                    eProsima_user_DllExport CompleteDiscriminatorMember(
                            CompleteDiscriminatorMember&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember that will be copied.
                     */
                    eProsima_user_DllExport CompleteDiscriminatorMember& operator =(
                            const CompleteDiscriminatorMember& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember that will be copied.
                     */
                    eProsima_user_DllExport CompleteDiscriminatorMember& operator =(
                            CompleteDiscriminatorMember&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CompleteDiscriminatorMember& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CompleteDiscriminatorMember& x) const;

                    /*!
                     * @brief This function copies the value in member common
                     * @param _common New value to be copied in member common
                     */
                    eProsima_user_DllExport void common(
                            const eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember& _common);

                    /*!
                     * @brief This function moves the value in member common
                     * @param _common New value to be moved in member common
                     */
                    eProsima_user_DllExport void common(
                            eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember&& _common);

                    /*!
                     * @brief This function returns a constant reference to member common
                     * @return Constant reference to member common
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember& common() const;

                    /*!
                     * @brief This function returns a reference to member common
                     * @return Reference to member common
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember& common();


                    /*!
                     * @brief This function copies the value in member ann_builtin
                     * @param _ann_builtin New value to be copied in member ann_builtin
                     */
                    eProsima_user_DllExport void ann_builtin(
                            const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations>& _ann_builtin);

                    /*!
                     * @brief This function moves the value in member ann_builtin
                     * @param _ann_builtin New value to be moved in member ann_builtin
                     */
                    eProsima_user_DllExport void ann_builtin(
                            eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations>&& _ann_builtin);

                    /*!
                     * @brief This function returns a constant reference to member ann_builtin
                     * @return Constant reference to member ann_builtin
                     */
                    eProsima_user_DllExport const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations>& ann_builtin() const;

                    /*!
                     * @brief This function returns a reference to member ann_builtin
                     * @return Reference to member ann_builtin
                     */
                    eProsima_user_DllExport eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations>& ann_builtin();


                    /*!
                     * @brief This function copies the value in member ann_custom
                     * @param _ann_custom New value to be copied in member ann_custom
                     */
                    eProsima_user_DllExport void ann_custom(
                            const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>& _ann_custom);

                    /*!
                     * @brief This function moves the value in member ann_custom
                     * @param _ann_custom New value to be moved in member ann_custom
                     */
                    eProsima_user_DllExport void ann_custom(
                            eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>&& _ann_custom);

                    /*!
                     * @brief This function returns a constant reference to member ann_custom
                     * @return Constant reference to member ann_custom
                     */
                    eProsima_user_DllExport const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>& ann_custom() const;

                    /*!
                     * @brief This function returns a reference to member ann_custom
                     * @return Reference to member ann_custom
                     */
                    eProsima_user_DllExport eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>& ann_custom();

                private:

                    eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember m_common;
                    eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations> m_ann_builtin;
                    eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq> m_ann_custom;

                };
                /*!
                 * @brief This class represents the structure MinimalDiscriminatorMember defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalDiscriminatorMember
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport MinimalDiscriminatorMember();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~MinimalDiscriminatorMember();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalDiscriminatorMember that will be copied.
                     */
                    eProsima_user_DllExport MinimalDiscriminatorMember(
                            const MinimalDiscriminatorMember& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalDiscriminatorMember that will be copied.
                     */
                    eProsima_user_DllExport MinimalDiscriminatorMember(
                            MinimalDiscriminatorMember&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalDiscriminatorMember that will be copied.
                     */
                    eProsima_user_DllExport MinimalDiscriminatorMember& operator =(
                            const MinimalDiscriminatorMember& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalDiscriminatorMember that will be copied.
                     */
                    eProsima_user_DllExport MinimalDiscriminatorMember& operator =(
                            MinimalDiscriminatorMember&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalDiscriminatorMember object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const MinimalDiscriminatorMember& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalDiscriminatorMember object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const MinimalDiscriminatorMember& x) const;

                    /*!
                     * @brief This function copies the value in member common
                     * @param _common New value to be copied in member common
                     */
                    eProsima_user_DllExport void common(
                            const eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember& _common);

                    /*!
                     * @brief This function moves the value in member common
                     * @param _common New value to be moved in member common
                     */
                    eProsima_user_DllExport void common(
                            eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember&& _common);

                    /*!
                     * @brief This function returns a constant reference to member common
                     * @return Constant reference to member common
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember& common() const;

                    /*!
                     * @brief This function returns a reference to member common
                     * @return Reference to member common
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember& common();

                private:

                    eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember m_common;

                };
                /*!
                 * @brief This class represents the structure CompleteUnionHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteUnionHeader
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CompleteUnionHeader();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CompleteUnionHeader();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteUnionHeader that will be copied.
                     */
                    eProsima_user_DllExport CompleteUnionHeader(
                            const CompleteUnionHeader& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteUnionHeader that will be copied.
                     */
                    eProsima_user_DllExport CompleteUnionHeader(
                            CompleteUnionHeader&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteUnionHeader that will be copied.
                     */
                    eProsima_user_DllExport CompleteUnionHeader& operator =(
                            const CompleteUnionHeader& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteUnionHeader that will be copied.
                     */
                    eProsima_user_DllExport CompleteUnionHeader& operator =(
                            CompleteUnionHeader&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteUnionHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CompleteUnionHeader& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteUnionHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CompleteUnionHeader& x) const;

                    /*!
                     * @brief This function copies the value in member detail
                     * @param _detail New value to be copied in member detail
                     */
                    eProsima_user_DllExport void detail(
                            const eprosima::fastdds::dds::xtypes::CompleteTypeDetail& _detail);

                    /*!
                     * @brief This function moves the value in member detail
                     * @param _detail New value to be moved in member detail
                     */
                    eProsima_user_DllExport void detail(
                            eprosima::fastdds::dds::xtypes::CompleteTypeDetail&& _detail);

                    /*!
                     * @brief This function returns a constant reference to member detail
                     * @return Constant reference to member detail
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteTypeDetail& detail() const;

                    /*!
                     * @brief This function returns a reference to member detail
                     * @return Reference to member detail
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteTypeDetail& detail();

                private:

                    eprosima::fastdds::dds::xtypes::CompleteTypeDetail m_detail;

                };
                /*!
                 * @brief This class represents the structure MinimalUnionHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalUnionHeader
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport MinimalUnionHeader();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~MinimalUnionHeader();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalUnionHeader that will be copied.
                     */
                    eProsima_user_DllExport MinimalUnionHeader(
                            const MinimalUnionHeader& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalUnionHeader that will be copied.
                     */
                    eProsima_user_DllExport MinimalUnionHeader(
                            MinimalUnionHeader&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalUnionHeader that will be copied.
                     */
                    eProsima_user_DllExport MinimalUnionHeader& operator =(
                            const MinimalUnionHeader& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalUnionHeader that will be copied.
                     */
                    eProsima_user_DllExport MinimalUnionHeader& operator =(
                            MinimalUnionHeader&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalUnionHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const MinimalUnionHeader& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalUnionHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const MinimalUnionHeader& x) const;

                    /*!
                     * @brief This function copies the value in member detail
                     * @param _detail New value to be copied in member detail
                     */
                    eProsima_user_DllExport void detail(
                            const eprosima::fastdds::dds::xtypes::MinimalTypeDetail& _detail);

                    /*!
                     * @brief This function moves the value in member detail
                     * @param _detail New value to be moved in member detail
                     */
                    eProsima_user_DllExport void detail(
                            eprosima::fastdds::dds::xtypes::MinimalTypeDetail&& _detail);

                    /*!
                     * @brief This function returns a constant reference to member detail
                     * @return Constant reference to member detail
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalTypeDetail& detail() const;

                    /*!
                     * @brief This function returns a reference to member detail
                     * @return Reference to member detail
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalTypeDetail& detail();

                private:

                    eprosima::fastdds::dds::xtypes::MinimalTypeDetail m_detail;

                };
                /*!
                 * @brief This class represents the structure CompleteUnionType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteUnionType
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CompleteUnionType();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CompleteUnionType();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteUnionType that will be copied.
                     */
                    eProsima_user_DllExport CompleteUnionType(
                            const CompleteUnionType& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteUnionType that will be copied.
                     */
                    eProsima_user_DllExport CompleteUnionType(
                            CompleteUnionType&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteUnionType that will be copied.
                     */
                    eProsima_user_DllExport CompleteUnionType& operator =(
                            const CompleteUnionType& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteUnionType that will be copied.
                     */
                    eProsima_user_DllExport CompleteUnionType& operator =(
                            CompleteUnionType&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteUnionType object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CompleteUnionType& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteUnionType object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CompleteUnionType& x) const;

                    /*!
                     * @brief This function copies the value in member union_flags
                     * @param _union_flags New value to be copied in member union_flags
                     */
                    eProsima_user_DllExport void union_flags(
                            const eprosima::fastdds::dds::xtypes::UnionTypeFlag& _union_flags);

                    /*!
                     * @brief This function moves the value in member union_flags
                     * @param _union_flags New value to be moved in member union_flags
                     */
                    eProsima_user_DllExport void union_flags(
                            eprosima::fastdds::dds::xtypes::UnionTypeFlag&& _union_flags);

                    /*!
                     * @brief This function returns a constant reference to member union_flags
                     * @return Constant reference to member union_flags
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::UnionTypeFlag& union_flags() const;

                    /*!
                     * @brief This function returns a reference to member union_flags
                     * @return Reference to member union_flags
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::UnionTypeFlag& union_flags();


                    /*!
                     * @brief This function copies the value in member header
                     * @param _header New value to be copied in member header
                     */
                    eProsima_user_DllExport void header(
                            const eprosima::fastdds::dds::xtypes::CompleteUnionHeader& _header);

                    /*!
                     * @brief This function moves the value in member header
                     * @param _header New value to be moved in member header
                     */
                    eProsima_user_DllExport void header(
                            eprosima::fastdds::dds::xtypes::CompleteUnionHeader&& _header);

                    /*!
                     * @brief This function returns a constant reference to member header
                     * @return Constant reference to member header
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteUnionHeader& header() const;

                    /*!
                     * @brief This function returns a reference to member header
                     * @return Reference to member header
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteUnionHeader& header();


                    /*!
                     * @brief This function copies the value in member discriminator
                     * @param _discriminator New value to be copied in member discriminator
                     */
                    eProsima_user_DllExport void discriminator(
                            const eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember& _discriminator);

                    /*!
                     * @brief This function moves the value in member discriminator
                     * @param _discriminator New value to be moved in member discriminator
                     */
                    eProsima_user_DllExport void discriminator(
                            eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember&& _discriminator);

                    /*!
                     * @brief This function returns a constant reference to member discriminator
                     * @return Constant reference to member discriminator
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember& discriminator() const;

                    /*!
                     * @brief This function returns a reference to member discriminator
                     * @return Reference to member discriminator
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember& discriminator();


                    /*!
                     * @brief This function copies the value in member member_seq
                     * @param _member_seq New value to be copied in member member_seq
                     */
                    eProsima_user_DllExport void member_seq(
                            const eprosima::fastdds::dds::xtypes::CompleteUnionMemberSeq& _member_seq);

                    /*!
                     * @brief This function moves the value in member member_seq
                     * @param _member_seq New value to be moved in member member_seq
                     */
                    eProsima_user_DllExport void member_seq(
                            eprosima::fastdds::dds::xtypes::CompleteUnionMemberSeq&& _member_seq);

                    /*!
                     * @brief This function returns a constant reference to member member_seq
                     * @return Constant reference to member member_seq
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteUnionMemberSeq& member_seq() const;

                    /*!
                     * @brief This function returns a reference to member member_seq
                     * @return Reference to member member_seq
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteUnionMemberSeq& member_seq();

                private:

                    eprosima::fastdds::dds::xtypes::UnionTypeFlag m_union_flags{0};
                    eprosima::fastdds::dds::xtypes::CompleteUnionHeader m_header;
                    eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember m_discriminator;
                    eprosima::fastdds::dds::xtypes::CompleteUnionMemberSeq m_member_seq;

                };
                /*!
                 * @brief This class represents the structure MinimalUnionType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalUnionType
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport MinimalUnionType();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~MinimalUnionType();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalUnionType that will be copied.
                     */
                    eProsima_user_DllExport MinimalUnionType(
                            const MinimalUnionType& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalUnionType that will be copied.
                     */
                    eProsima_user_DllExport MinimalUnionType(
                            MinimalUnionType&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalUnionType that will be copied.
                     */
                    eProsima_user_DllExport MinimalUnionType& operator =(
                            const MinimalUnionType& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalUnionType that will be copied.
                     */
                    eProsima_user_DllExport MinimalUnionType& operator =(
                            MinimalUnionType&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalUnionType object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const MinimalUnionType& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalUnionType object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const MinimalUnionType& x) const;

                    /*!
                     * @brief This function copies the value in member union_flags
                     * @param _union_flags New value to be copied in member union_flags
                     */
                    eProsima_user_DllExport void union_flags(
                            const eprosima::fastdds::dds::xtypes::UnionTypeFlag& _union_flags);

                    /*!
                     * @brief This function moves the value in member union_flags
                     * @param _union_flags New value to be moved in member union_flags
                     */
                    eProsima_user_DllExport void union_flags(
                            eprosima::fastdds::dds::xtypes::UnionTypeFlag&& _union_flags);

                    /*!
                     * @brief This function returns a constant reference to member union_flags
                     * @return Constant reference to member union_flags
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::UnionTypeFlag& union_flags() const;

                    /*!
                     * @brief This function returns a reference to member union_flags
                     * @return Reference to member union_flags
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::UnionTypeFlag& union_flags();


                    /*!
                     * @brief This function copies the value in member header
                     * @param _header New value to be copied in member header
                     */
                    eProsima_user_DllExport void header(
                            const eprosima::fastdds::dds::xtypes::MinimalUnionHeader& _header);

                    /*!
                     * @brief This function moves the value in member header
                     * @param _header New value to be moved in member header
                     */
                    eProsima_user_DllExport void header(
                            eprosima::fastdds::dds::xtypes::MinimalUnionHeader&& _header);

                    /*!
                     * @brief This function returns a constant reference to member header
                     * @return Constant reference to member header
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalUnionHeader& header() const;

                    /*!
                     * @brief This function returns a reference to member header
                     * @return Reference to member header
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalUnionHeader& header();


                    /*!
                     * @brief This function copies the value in member discriminator
                     * @param _discriminator New value to be copied in member discriminator
                     */
                    eProsima_user_DllExport void discriminator(
                            const eprosima::fastdds::dds::xtypes::MinimalDiscriminatorMember& _discriminator);

                    /*!
                     * @brief This function moves the value in member discriminator
                     * @param _discriminator New value to be moved in member discriminator
                     */
                    eProsima_user_DllExport void discriminator(
                            eprosima::fastdds::dds::xtypes::MinimalDiscriminatorMember&& _discriminator);

                    /*!
                     * @brief This function returns a constant reference to member discriminator
                     * @return Constant reference to member discriminator
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalDiscriminatorMember& discriminator() const;

                    /*!
                     * @brief This function returns a reference to member discriminator
                     * @return Reference to member discriminator
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalDiscriminatorMember& discriminator();


                    /*!
                     * @brief This function copies the value in member member_seq
                     * @param _member_seq New value to be copied in member member_seq
                     */
                    eProsima_user_DllExport void member_seq(
                            const eprosima::fastdds::dds::xtypes::MinimalUnionMemberSeq& _member_seq);

                    /*!
                     * @brief This function moves the value in member member_seq
                     * @param _member_seq New value to be moved in member member_seq
                     */
                    eProsima_user_DllExport void member_seq(
                            eprosima::fastdds::dds::xtypes::MinimalUnionMemberSeq&& _member_seq);

                    /*!
                     * @brief This function returns a constant reference to member member_seq
                     * @return Constant reference to member member_seq
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalUnionMemberSeq& member_seq() const;

                    /*!
                     * @brief This function returns a reference to member member_seq
                     * @return Reference to member member_seq
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalUnionMemberSeq& member_seq();

                private:

                    eprosima::fastdds::dds::xtypes::UnionTypeFlag m_union_flags{0};
                    eprosima::fastdds::dds::xtypes::MinimalUnionHeader m_header;
                    eprosima::fastdds::dds::xtypes::MinimalDiscriminatorMember m_discriminator;
                    eprosima::fastdds::dds::xtypes::MinimalUnionMemberSeq m_member_seq;

                };
                /*!
                 * @brief This class represents the structure CommonAnnotationParameter defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CommonAnnotationParameter
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CommonAnnotationParameter();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CommonAnnotationParameter();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonAnnotationParameter that will be copied.
                     */
                    eProsima_user_DllExport CommonAnnotationParameter(
                            const CommonAnnotationParameter& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonAnnotationParameter that will be copied.
                     */
                    eProsima_user_DllExport CommonAnnotationParameter(
                            CommonAnnotationParameter&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonAnnotationParameter that will be copied.
                     */
                    eProsima_user_DllExport CommonAnnotationParameter& operator =(
                            const CommonAnnotationParameter& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonAnnotationParameter that will be copied.
                     */
                    eProsima_user_DllExport CommonAnnotationParameter& operator =(
                            CommonAnnotationParameter&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CommonAnnotationParameter object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CommonAnnotationParameter& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CommonAnnotationParameter object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CommonAnnotationParameter& x) const;

                    /*!
                     * @brief This function copies the value in member member_flags
                     * @param _member_flags New value to be copied in member member_flags
                     */
                    eProsima_user_DllExport void member_flags(
                            const eprosima::fastdds::dds::xtypes::AnnotationParameterFlag& _member_flags);

                    /*!
                     * @brief This function moves the value in member member_flags
                     * @param _member_flags New value to be moved in member member_flags
                     */
                    eProsima_user_DllExport void member_flags(
                            eprosima::fastdds::dds::xtypes::AnnotationParameterFlag&& _member_flags);

                    /*!
                     * @brief This function returns a constant reference to member member_flags
                     * @return Constant reference to member member_flags
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::AnnotationParameterFlag& member_flags() const;

                    /*!
                     * @brief This function returns a reference to member member_flags
                     * @return Reference to member member_flags
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::AnnotationParameterFlag& member_flags();


                    /*!
                     * @brief This function copies the value in member member_type_id
                     * @param _member_type_id New value to be copied in member member_type_id
                     */
                    eProsima_user_DllExport void member_type_id(
                            const eprosima::fastdds::dds::xtypes::TypeIdentifier& _member_type_id);

                    /*!
                     * @brief This function moves the value in member member_type_id
                     * @param _member_type_id New value to be moved in member member_type_id
                     */
                    eProsima_user_DllExport void member_type_id(
                            eprosima::fastdds::dds::xtypes::TypeIdentifier&& _member_type_id);

                    /*!
                     * @brief This function returns a constant reference to member member_type_id
                     * @return Constant reference to member member_type_id
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::TypeIdentifier& member_type_id() const;

                    /*!
                     * @brief This function returns a reference to member member_type_id
                     * @return Reference to member member_type_id
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::TypeIdentifier& member_type_id();

                private:

                    eprosima::fastdds::dds::xtypes::AnnotationParameterFlag m_member_flags{0};
                    eprosima::fastdds::dds::xtypes::TypeIdentifier* m_member_type_id;

                };
                /*!
                 * @brief This class represents the structure CompleteAnnotationParameter defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteAnnotationParameter
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CompleteAnnotationParameter();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CompleteAnnotationParameter();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteAnnotationParameter that will be copied.
                     */
                    eProsima_user_DllExport CompleteAnnotationParameter(
                            const CompleteAnnotationParameter& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteAnnotationParameter that will be copied.
                     */
                    eProsima_user_DllExport CompleteAnnotationParameter(
                            CompleteAnnotationParameter&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteAnnotationParameter that will be copied.
                     */
                    eProsima_user_DllExport CompleteAnnotationParameter& operator =(
                            const CompleteAnnotationParameter& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteAnnotationParameter that will be copied.
                     */
                    eProsima_user_DllExport CompleteAnnotationParameter& operator =(
                            CompleteAnnotationParameter&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteAnnotationParameter object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CompleteAnnotationParameter& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteAnnotationParameter object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CompleteAnnotationParameter& x) const;

                    /*!
                     * @brief This function copies the value in member common
                     * @param _common New value to be copied in member common
                     */
                    eProsima_user_DllExport void common(
                            const eprosima::fastdds::dds::xtypes::CommonAnnotationParameter& _common);

                    /*!
                     * @brief This function moves the value in member common
                     * @param _common New value to be moved in member common
                     */
                    eProsima_user_DllExport void common(
                            eprosima::fastdds::dds::xtypes::CommonAnnotationParameter&& _common);

                    /*!
                     * @brief This function returns a constant reference to member common
                     * @return Constant reference to member common
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CommonAnnotationParameter& common() const;

                    /*!
                     * @brief This function returns a reference to member common
                     * @return Reference to member common
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CommonAnnotationParameter& common();


                    /*!
                     * @brief This function copies the value in member name
                     * @param _name New value to be copied in member name
                     */
                    eProsima_user_DllExport void name(
                            const eprosima::fastdds::dds::xtypes::MemberName& _name);

                    /*!
                     * @brief This function moves the value in member name
                     * @param _name New value to be moved in member name
                     */
                    eProsima_user_DllExport void name(
                            eprosima::fastdds::dds::xtypes::MemberName&& _name);

                    /*!
                     * @brief This function returns a constant reference to member name
                     * @return Constant reference to member name
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MemberName& name() const;

                    /*!
                     * @brief This function returns a reference to member name
                     * @return Reference to member name
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MemberName& name();


                    /*!
                     * @brief This function copies the value in member default_value
                     * @param _default_value New value to be copied in member default_value
                     */
                    eProsima_user_DllExport void default_value(
                            const eprosima::fastdds::dds::xtypes::AnnotationParameterValue& _default_value);

                    /*!
                     * @brief This function moves the value in member default_value
                     * @param _default_value New value to be moved in member default_value
                     */
                    eProsima_user_DllExport void default_value(
                            eprosima::fastdds::dds::xtypes::AnnotationParameterValue&& _default_value);

                    /*!
                     * @brief This function returns a constant reference to member default_value
                     * @return Constant reference to member default_value
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::AnnotationParameterValue& default_value() const;

                    /*!
                     * @brief This function returns a reference to member default_value
                     * @return Reference to member default_value
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::AnnotationParameterValue& default_value();

                private:

                    eprosima::fastdds::dds::xtypes::CommonAnnotationParameter m_common;
                    eprosima::fastdds::dds::xtypes::MemberName m_name;
                    eprosima::fastdds::dds::xtypes::AnnotationParameterValue m_default_value;

                };
                typedef std::vector<eprosima::fastdds::dds::xtypes::CompleteAnnotationParameter> CompleteAnnotationParameterSeq;

                /*!
                 * @brief This class represents the structure MinimalAnnotationParameter defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalAnnotationParameter
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport MinimalAnnotationParameter();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~MinimalAnnotationParameter();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalAnnotationParameter that will be copied.
                     */
                    eProsima_user_DllExport MinimalAnnotationParameter(
                            const MinimalAnnotationParameter& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalAnnotationParameter that will be copied.
                     */
                    eProsima_user_DllExport MinimalAnnotationParameter(
                            MinimalAnnotationParameter&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalAnnotationParameter that will be copied.
                     */
                    eProsima_user_DllExport MinimalAnnotationParameter& operator =(
                            const MinimalAnnotationParameter& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalAnnotationParameter that will be copied.
                     */
                    eProsima_user_DllExport MinimalAnnotationParameter& operator =(
                            MinimalAnnotationParameter&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalAnnotationParameter object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const MinimalAnnotationParameter& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalAnnotationParameter object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const MinimalAnnotationParameter& x) const;

                    /*!
                     * @brief This function copies the value in member common
                     * @param _common New value to be copied in member common
                     */
                    eProsima_user_DllExport void common(
                            const eprosima::fastdds::dds::xtypes::CommonAnnotationParameter& _common);

                    /*!
                     * @brief This function moves the value in member common
                     * @param _common New value to be moved in member common
                     */
                    eProsima_user_DllExport void common(
                            eprosima::fastdds::dds::xtypes::CommonAnnotationParameter&& _common);

                    /*!
                     * @brief This function returns a constant reference to member common
                     * @return Constant reference to member common
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CommonAnnotationParameter& common() const;

                    /*!
                     * @brief This function returns a reference to member common
                     * @return Reference to member common
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CommonAnnotationParameter& common();


                    /*!
                     * @brief This function copies the value in member name_hash
                     * @param _name_hash New value to be copied in member name_hash
                     */
                    eProsima_user_DllExport void name_hash(
                            const eprosima::fastdds::dds::xtypes::NameHash& _name_hash);

                    /*!
                     * @brief This function moves the value in member name_hash
                     * @param _name_hash New value to be moved in member name_hash
                     */
                    eProsima_user_DllExport void name_hash(
                            eprosima::fastdds::dds::xtypes::NameHash&& _name_hash);

                    /*!
                     * @brief This function returns a constant reference to member name_hash
                     * @return Constant reference to member name_hash
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::NameHash& name_hash() const;

                    /*!
                     * @brief This function returns a reference to member name_hash
                     * @return Reference to member name_hash
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::NameHash& name_hash();


                    /*!
                     * @brief This function copies the value in member default_value
                     * @param _default_value New value to be copied in member default_value
                     */
                    eProsima_user_DllExport void default_value(
                            const eprosima::fastdds::dds::xtypes::AnnotationParameterValue& _default_value);

                    /*!
                     * @brief This function moves the value in member default_value
                     * @param _default_value New value to be moved in member default_value
                     */
                    eProsima_user_DllExport void default_value(
                            eprosima::fastdds::dds::xtypes::AnnotationParameterValue&& _default_value);

                    /*!
                     * @brief This function returns a constant reference to member default_value
                     * @return Constant reference to member default_value
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::AnnotationParameterValue& default_value() const;

                    /*!
                     * @brief This function returns a reference to member default_value
                     * @return Reference to member default_value
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::AnnotationParameterValue& default_value();

                private:

                    eprosima::fastdds::dds::xtypes::CommonAnnotationParameter m_common;
                    eprosima::fastdds::dds::xtypes::NameHash m_name_hash{0};
                    eprosima::fastdds::dds::xtypes::AnnotationParameterValue m_default_value;

                };
                typedef std::vector<eprosima::fastdds::dds::xtypes::MinimalAnnotationParameter> MinimalAnnotationParameterSeq;

                /*!
                 * @brief This class represents the structure CompleteAnnotationHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteAnnotationHeader
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CompleteAnnotationHeader();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CompleteAnnotationHeader();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteAnnotationHeader that will be copied.
                     */
                    eProsima_user_DllExport CompleteAnnotationHeader(
                            const CompleteAnnotationHeader& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteAnnotationHeader that will be copied.
                     */
                    eProsima_user_DllExport CompleteAnnotationHeader(
                            CompleteAnnotationHeader&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteAnnotationHeader that will be copied.
                     */
                    eProsima_user_DllExport CompleteAnnotationHeader& operator =(
                            const CompleteAnnotationHeader& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteAnnotationHeader that will be copied.
                     */
                    eProsima_user_DllExport CompleteAnnotationHeader& operator =(
                            CompleteAnnotationHeader&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteAnnotationHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CompleteAnnotationHeader& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteAnnotationHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CompleteAnnotationHeader& x) const;

                    /*!
                     * @brief This function copies the value in member annotation_name
                     * @param _annotation_name New value to be copied in member annotation_name
                     */
                    eProsima_user_DllExport void annotation_name(
                            const eprosima::fastdds::dds::xtypes::QualifiedTypeName& _annotation_name);

                    /*!
                     * @brief This function moves the value in member annotation_name
                     * @param _annotation_name New value to be moved in member annotation_name
                     */
                    eProsima_user_DllExport void annotation_name(
                            eprosima::fastdds::dds::xtypes::QualifiedTypeName&& _annotation_name);

                    /*!
                     * @brief This function returns a constant reference to member annotation_name
                     * @return Constant reference to member annotation_name
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::QualifiedTypeName& annotation_name() const;

                    /*!
                     * @brief This function returns a reference to member annotation_name
                     * @return Reference to member annotation_name
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::QualifiedTypeName& annotation_name();

                private:

                    eprosima::fastdds::dds::xtypes::QualifiedTypeName m_annotation_name;

                };
                /*!
                 * @brief This class represents the structure MinimalAnnotationHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalAnnotationHeader
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport MinimalAnnotationHeader();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~MinimalAnnotationHeader();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalAnnotationHeader that will be copied.
                     */
                    eProsima_user_DllExport MinimalAnnotationHeader(
                            const MinimalAnnotationHeader& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalAnnotationHeader that will be copied.
                     */
                    eProsima_user_DllExport MinimalAnnotationHeader(
                            MinimalAnnotationHeader&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalAnnotationHeader that will be copied.
                     */
                    eProsima_user_DllExport MinimalAnnotationHeader& operator =(
                            const MinimalAnnotationHeader& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalAnnotationHeader that will be copied.
                     */
                    eProsima_user_DllExport MinimalAnnotationHeader& operator =(
                            MinimalAnnotationHeader&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalAnnotationHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const MinimalAnnotationHeader& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalAnnotationHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const MinimalAnnotationHeader& x) const;

                private:


                };
                /*!
                 * @brief This class represents the structure CompleteAnnotationType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteAnnotationType
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CompleteAnnotationType();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CompleteAnnotationType();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteAnnotationType that will be copied.
                     */
                    eProsima_user_DllExport CompleteAnnotationType(
                            const CompleteAnnotationType& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteAnnotationType that will be copied.
                     */
                    eProsima_user_DllExport CompleteAnnotationType(
                            CompleteAnnotationType&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteAnnotationType that will be copied.
                     */
                    eProsima_user_DllExport CompleteAnnotationType& operator =(
                            const CompleteAnnotationType& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteAnnotationType that will be copied.
                     */
                    eProsima_user_DllExport CompleteAnnotationType& operator =(
                            CompleteAnnotationType&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteAnnotationType object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CompleteAnnotationType& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteAnnotationType object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CompleteAnnotationType& x) const;

                    /*!
                     * @brief This function copies the value in member annotation_flag
                     * @param _annotation_flag New value to be copied in member annotation_flag
                     */
                    eProsima_user_DllExport void annotation_flag(
                            const eprosima::fastdds::dds::xtypes::AnnotationTypeFlag& _annotation_flag);

                    /*!
                     * @brief This function moves the value in member annotation_flag
                     * @param _annotation_flag New value to be moved in member annotation_flag
                     */
                    eProsima_user_DllExport void annotation_flag(
                            eprosima::fastdds::dds::xtypes::AnnotationTypeFlag&& _annotation_flag);

                    /*!
                     * @brief This function returns a constant reference to member annotation_flag
                     * @return Constant reference to member annotation_flag
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::AnnotationTypeFlag& annotation_flag() const;

                    /*!
                     * @brief This function returns a reference to member annotation_flag
                     * @return Reference to member annotation_flag
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::AnnotationTypeFlag& annotation_flag();


                    /*!
                     * @brief This function copies the value in member header
                     * @param _header New value to be copied in member header
                     */
                    eProsima_user_DllExport void header(
                            const eprosima::fastdds::dds::xtypes::CompleteAnnotationHeader& _header);

                    /*!
                     * @brief This function moves the value in member header
                     * @param _header New value to be moved in member header
                     */
                    eProsima_user_DllExport void header(
                            eprosima::fastdds::dds::xtypes::CompleteAnnotationHeader&& _header);

                    /*!
                     * @brief This function returns a constant reference to member header
                     * @return Constant reference to member header
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteAnnotationHeader& header() const;

                    /*!
                     * @brief This function returns a reference to member header
                     * @return Reference to member header
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteAnnotationHeader& header();


                    /*!
                     * @brief This function copies the value in member member_seq
                     * @param _member_seq New value to be copied in member member_seq
                     */
                    eProsima_user_DllExport void member_seq(
                            const eprosima::fastdds::dds::xtypes::CompleteAnnotationParameterSeq& _member_seq);

                    /*!
                     * @brief This function moves the value in member member_seq
                     * @param _member_seq New value to be moved in member member_seq
                     */
                    eProsima_user_DllExport void member_seq(
                            eprosima::fastdds::dds::xtypes::CompleteAnnotationParameterSeq&& _member_seq);

                    /*!
                     * @brief This function returns a constant reference to member member_seq
                     * @return Constant reference to member member_seq
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteAnnotationParameterSeq& member_seq() const;

                    /*!
                     * @brief This function returns a reference to member member_seq
                     * @return Reference to member member_seq
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteAnnotationParameterSeq& member_seq();

                private:

                    eprosima::fastdds::dds::xtypes::AnnotationTypeFlag m_annotation_flag{0};
                    eprosima::fastdds::dds::xtypes::CompleteAnnotationHeader m_header;
                    eprosima::fastdds::dds::xtypes::CompleteAnnotationParameterSeq m_member_seq;

                };
                /*!
                 * @brief This class represents the structure MinimalAnnotationType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalAnnotationType
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport MinimalAnnotationType();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~MinimalAnnotationType();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalAnnotationType that will be copied.
                     */
                    eProsima_user_DllExport MinimalAnnotationType(
                            const MinimalAnnotationType& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalAnnotationType that will be copied.
                     */
                    eProsima_user_DllExport MinimalAnnotationType(
                            MinimalAnnotationType&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalAnnotationType that will be copied.
                     */
                    eProsima_user_DllExport MinimalAnnotationType& operator =(
                            const MinimalAnnotationType& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalAnnotationType that will be copied.
                     */
                    eProsima_user_DllExport MinimalAnnotationType& operator =(
                            MinimalAnnotationType&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalAnnotationType object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const MinimalAnnotationType& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalAnnotationType object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const MinimalAnnotationType& x) const;

                    /*!
                     * @brief This function copies the value in member annotation_flag
                     * @param _annotation_flag New value to be copied in member annotation_flag
                     */
                    eProsima_user_DllExport void annotation_flag(
                            const eprosima::fastdds::dds::xtypes::AnnotationTypeFlag& _annotation_flag);

                    /*!
                     * @brief This function moves the value in member annotation_flag
                     * @param _annotation_flag New value to be moved in member annotation_flag
                     */
                    eProsima_user_DllExport void annotation_flag(
                            eprosima::fastdds::dds::xtypes::AnnotationTypeFlag&& _annotation_flag);

                    /*!
                     * @brief This function returns a constant reference to member annotation_flag
                     * @return Constant reference to member annotation_flag
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::AnnotationTypeFlag& annotation_flag() const;

                    /*!
                     * @brief This function returns a reference to member annotation_flag
                     * @return Reference to member annotation_flag
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::AnnotationTypeFlag& annotation_flag();


                    /*!
                     * @brief This function copies the value in member header
                     * @param _header New value to be copied in member header
                     */
                    eProsima_user_DllExport void header(
                            const eprosima::fastdds::dds::xtypes::MinimalAnnotationHeader& _header);

                    /*!
                     * @brief This function moves the value in member header
                     * @param _header New value to be moved in member header
                     */
                    eProsima_user_DllExport void header(
                            eprosima::fastdds::dds::xtypes::MinimalAnnotationHeader&& _header);

                    /*!
                     * @brief This function returns a constant reference to member header
                     * @return Constant reference to member header
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalAnnotationHeader& header() const;

                    /*!
                     * @brief This function returns a reference to member header
                     * @return Reference to member header
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalAnnotationHeader& header();


                    /*!
                     * @brief This function copies the value in member member_seq
                     * @param _member_seq New value to be copied in member member_seq
                     */
                    eProsima_user_DllExport void member_seq(
                            const eprosima::fastdds::dds::xtypes::MinimalAnnotationParameterSeq& _member_seq);

                    /*!
                     * @brief This function moves the value in member member_seq
                     * @param _member_seq New value to be moved in member member_seq
                     */
                    eProsima_user_DllExport void member_seq(
                            eprosima::fastdds::dds::xtypes::MinimalAnnotationParameterSeq&& _member_seq);

                    /*!
                     * @brief This function returns a constant reference to member member_seq
                     * @return Constant reference to member member_seq
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalAnnotationParameterSeq& member_seq() const;

                    /*!
                     * @brief This function returns a reference to member member_seq
                     * @return Reference to member member_seq
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalAnnotationParameterSeq& member_seq();

                private:

                    eprosima::fastdds::dds::xtypes::AnnotationTypeFlag m_annotation_flag{0};
                    eprosima::fastdds::dds::xtypes::MinimalAnnotationHeader m_header;
                    eprosima::fastdds::dds::xtypes::MinimalAnnotationParameterSeq m_member_seq;

                };
                /*!
                 * @brief This class represents the structure CommonAliasBody defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CommonAliasBody
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CommonAliasBody();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CommonAliasBody();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonAliasBody that will be copied.
                     */
                    eProsima_user_DllExport CommonAliasBody(
                            const CommonAliasBody& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonAliasBody that will be copied.
                     */
                    eProsima_user_DllExport CommonAliasBody(
                            CommonAliasBody&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonAliasBody that will be copied.
                     */
                    eProsima_user_DllExport CommonAliasBody& operator =(
                            const CommonAliasBody& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonAliasBody that will be copied.
                     */
                    eProsima_user_DllExport CommonAliasBody& operator =(
                            CommonAliasBody&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CommonAliasBody object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CommonAliasBody& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CommonAliasBody object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CommonAliasBody& x) const;

                    /*!
                     * @brief This function copies the value in member related_flags
                     * @param _related_flags New value to be copied in member related_flags
                     */
                    eProsima_user_DllExport void related_flags(
                            const eprosima::fastdds::dds::xtypes::AliasMemberFlag& _related_flags);

                    /*!
                     * @brief This function moves the value in member related_flags
                     * @param _related_flags New value to be moved in member related_flags
                     */
                    eProsima_user_DllExport void related_flags(
                            eprosima::fastdds::dds::xtypes::AliasMemberFlag&& _related_flags);

                    /*!
                     * @brief This function returns a constant reference to member related_flags
                     * @return Constant reference to member related_flags
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::AliasMemberFlag& related_flags() const;

                    /*!
                     * @brief This function returns a reference to member related_flags
                     * @return Reference to member related_flags
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::AliasMemberFlag& related_flags();


                    /*!
                     * @brief This function copies the value in member related_type
                     * @param _related_type New value to be copied in member related_type
                     */
                    eProsima_user_DllExport void related_type(
                            const eprosima::fastdds::dds::xtypes::TypeIdentifier& _related_type);

                    /*!
                     * @brief This function moves the value in member related_type
                     * @param _related_type New value to be moved in member related_type
                     */
                    eProsima_user_DllExport void related_type(
                            eprosima::fastdds::dds::xtypes::TypeIdentifier&& _related_type);

                    /*!
                     * @brief This function returns a constant reference to member related_type
                     * @return Constant reference to member related_type
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::TypeIdentifier& related_type() const;

                    /*!
                     * @brief This function returns a reference to member related_type
                     * @return Reference to member related_type
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::TypeIdentifier& related_type();

                private:

                    eprosima::fastdds::dds::xtypes::AliasMemberFlag m_related_flags{0};
                    eprosima::fastdds::dds::xtypes::TypeIdentifier* m_related_type;

                };
                /*!
                 * @brief This class represents the structure CompleteAliasBody defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteAliasBody
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CompleteAliasBody();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CompleteAliasBody();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteAliasBody that will be copied.
                     */
                    eProsima_user_DllExport CompleteAliasBody(
                            const CompleteAliasBody& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteAliasBody that will be copied.
                     */
                    eProsima_user_DllExport CompleteAliasBody(
                            CompleteAliasBody&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteAliasBody that will be copied.
                     */
                    eProsima_user_DllExport CompleteAliasBody& operator =(
                            const CompleteAliasBody& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteAliasBody that will be copied.
                     */
                    eProsima_user_DllExport CompleteAliasBody& operator =(
                            CompleteAliasBody&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteAliasBody object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CompleteAliasBody& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteAliasBody object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CompleteAliasBody& x) const;

                    /*!
                     * @brief This function copies the value in member common
                     * @param _common New value to be copied in member common
                     */
                    eProsima_user_DllExport void common(
                            const eprosima::fastdds::dds::xtypes::CommonAliasBody& _common);

                    /*!
                     * @brief This function moves the value in member common
                     * @param _common New value to be moved in member common
                     */
                    eProsima_user_DllExport void common(
                            eprosima::fastdds::dds::xtypes::CommonAliasBody&& _common);

                    /*!
                     * @brief This function returns a constant reference to member common
                     * @return Constant reference to member common
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CommonAliasBody& common() const;

                    /*!
                     * @brief This function returns a reference to member common
                     * @return Reference to member common
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CommonAliasBody& common();


                    /*!
                     * @brief This function copies the value in member ann_builtin
                     * @param _ann_builtin New value to be copied in member ann_builtin
                     */
                    eProsima_user_DllExport void ann_builtin(
                            const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations>& _ann_builtin);

                    /*!
                     * @brief This function moves the value in member ann_builtin
                     * @param _ann_builtin New value to be moved in member ann_builtin
                     */
                    eProsima_user_DllExport void ann_builtin(
                            eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations>&& _ann_builtin);

                    /*!
                     * @brief This function returns a constant reference to member ann_builtin
                     * @return Constant reference to member ann_builtin
                     */
                    eProsima_user_DllExport const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations>& ann_builtin() const;

                    /*!
                     * @brief This function returns a reference to member ann_builtin
                     * @return Reference to member ann_builtin
                     */
                    eProsima_user_DllExport eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations>& ann_builtin();


                    /*!
                     * @brief This function copies the value in member ann_custom
                     * @param _ann_custom New value to be copied in member ann_custom
                     */
                    eProsima_user_DllExport void ann_custom(
                            const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>& _ann_custom);

                    /*!
                     * @brief This function moves the value in member ann_custom
                     * @param _ann_custom New value to be moved in member ann_custom
                     */
                    eProsima_user_DllExport void ann_custom(
                            eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>&& _ann_custom);

                    /*!
                     * @brief This function returns a constant reference to member ann_custom
                     * @return Constant reference to member ann_custom
                     */
                    eProsima_user_DllExport const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>& ann_custom() const;

                    /*!
                     * @brief This function returns a reference to member ann_custom
                     * @return Reference to member ann_custom
                     */
                    eProsima_user_DllExport eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>& ann_custom();

                private:

                    eprosima::fastdds::dds::xtypes::CommonAliasBody m_common;
                    eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations> m_ann_builtin;
                    eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq> m_ann_custom;

                };
                /*!
                 * @brief This class represents the structure MinimalAliasBody defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalAliasBody
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport MinimalAliasBody();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~MinimalAliasBody();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalAliasBody that will be copied.
                     */
                    eProsima_user_DllExport MinimalAliasBody(
                            const MinimalAliasBody& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalAliasBody that will be copied.
                     */
                    eProsima_user_DllExport MinimalAliasBody(
                            MinimalAliasBody&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalAliasBody that will be copied.
                     */
                    eProsima_user_DllExport MinimalAliasBody& operator =(
                            const MinimalAliasBody& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalAliasBody that will be copied.
                     */
                    eProsima_user_DllExport MinimalAliasBody& operator =(
                            MinimalAliasBody&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalAliasBody object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const MinimalAliasBody& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalAliasBody object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const MinimalAliasBody& x) const;

                    /*!
                     * @brief This function copies the value in member common
                     * @param _common New value to be copied in member common
                     */
                    eProsima_user_DllExport void common(
                            const eprosima::fastdds::dds::xtypes::CommonAliasBody& _common);

                    /*!
                     * @brief This function moves the value in member common
                     * @param _common New value to be moved in member common
                     */
                    eProsima_user_DllExport void common(
                            eprosima::fastdds::dds::xtypes::CommonAliasBody&& _common);

                    /*!
                     * @brief This function returns a constant reference to member common
                     * @return Constant reference to member common
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CommonAliasBody& common() const;

                    /*!
                     * @brief This function returns a reference to member common
                     * @return Reference to member common
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CommonAliasBody& common();

                private:

                    eprosima::fastdds::dds::xtypes::CommonAliasBody m_common;

                };
                /*!
                 * @brief This class represents the structure CompleteAliasHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteAliasHeader
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CompleteAliasHeader();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CompleteAliasHeader();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteAliasHeader that will be copied.
                     */
                    eProsima_user_DllExport CompleteAliasHeader(
                            const CompleteAliasHeader& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteAliasHeader that will be copied.
                     */
                    eProsima_user_DllExport CompleteAliasHeader(
                            CompleteAliasHeader&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteAliasHeader that will be copied.
                     */
                    eProsima_user_DllExport CompleteAliasHeader& operator =(
                            const CompleteAliasHeader& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteAliasHeader that will be copied.
                     */
                    eProsima_user_DllExport CompleteAliasHeader& operator =(
                            CompleteAliasHeader&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteAliasHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CompleteAliasHeader& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteAliasHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CompleteAliasHeader& x) const;

                    /*!
                     * @brief This function copies the value in member detail
                     * @param _detail New value to be copied in member detail
                     */
                    eProsima_user_DllExport void detail(
                            const eprosima::fastdds::dds::xtypes::CompleteTypeDetail& _detail);

                    /*!
                     * @brief This function moves the value in member detail
                     * @param _detail New value to be moved in member detail
                     */
                    eProsima_user_DllExport void detail(
                            eprosima::fastdds::dds::xtypes::CompleteTypeDetail&& _detail);

                    /*!
                     * @brief This function returns a constant reference to member detail
                     * @return Constant reference to member detail
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteTypeDetail& detail() const;

                    /*!
                     * @brief This function returns a reference to member detail
                     * @return Reference to member detail
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteTypeDetail& detail();

                private:

                    eprosima::fastdds::dds::xtypes::CompleteTypeDetail m_detail;

                };
                /*!
                 * @brief This class represents the structure MinimalAliasHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalAliasHeader
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport MinimalAliasHeader();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~MinimalAliasHeader();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalAliasHeader that will be copied.
                     */
                    eProsima_user_DllExport MinimalAliasHeader(
                            const MinimalAliasHeader& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalAliasHeader that will be copied.
                     */
                    eProsima_user_DllExport MinimalAliasHeader(
                            MinimalAliasHeader&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalAliasHeader that will be copied.
                     */
                    eProsima_user_DllExport MinimalAliasHeader& operator =(
                            const MinimalAliasHeader& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalAliasHeader that will be copied.
                     */
                    eProsima_user_DllExport MinimalAliasHeader& operator =(
                            MinimalAliasHeader&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalAliasHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const MinimalAliasHeader& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalAliasHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const MinimalAliasHeader& x) const;

                private:


                };
                /*!
                 * @brief This class represents the structure CompleteAliasType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteAliasType
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CompleteAliasType();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CompleteAliasType();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteAliasType that will be copied.
                     */
                    eProsima_user_DllExport CompleteAliasType(
                            const CompleteAliasType& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteAliasType that will be copied.
                     */
                    eProsima_user_DllExport CompleteAliasType(
                            CompleteAliasType&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteAliasType that will be copied.
                     */
                    eProsima_user_DllExport CompleteAliasType& operator =(
                            const CompleteAliasType& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteAliasType that will be copied.
                     */
                    eProsima_user_DllExport CompleteAliasType& operator =(
                            CompleteAliasType&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteAliasType object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CompleteAliasType& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteAliasType object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CompleteAliasType& x) const;

                    /*!
                     * @brief This function copies the value in member alias_flags
                     * @param _alias_flags New value to be copied in member alias_flags
                     */
                    eProsima_user_DllExport void alias_flags(
                            const eprosima::fastdds::dds::xtypes::AliasTypeFlag& _alias_flags);

                    /*!
                     * @brief This function moves the value in member alias_flags
                     * @param _alias_flags New value to be moved in member alias_flags
                     */
                    eProsima_user_DllExport void alias_flags(
                            eprosima::fastdds::dds::xtypes::AliasTypeFlag&& _alias_flags);

                    /*!
                     * @brief This function returns a constant reference to member alias_flags
                     * @return Constant reference to member alias_flags
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::AliasTypeFlag& alias_flags() const;

                    /*!
                     * @brief This function returns a reference to member alias_flags
                     * @return Reference to member alias_flags
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::AliasTypeFlag& alias_flags();


                    /*!
                     * @brief This function copies the value in member header
                     * @param _header New value to be copied in member header
                     */
                    eProsima_user_DllExport void header(
                            const eprosima::fastdds::dds::xtypes::CompleteAliasHeader& _header);

                    /*!
                     * @brief This function moves the value in member header
                     * @param _header New value to be moved in member header
                     */
                    eProsima_user_DllExport void header(
                            eprosima::fastdds::dds::xtypes::CompleteAliasHeader&& _header);

                    /*!
                     * @brief This function returns a constant reference to member header
                     * @return Constant reference to member header
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteAliasHeader& header() const;

                    /*!
                     * @brief This function returns a reference to member header
                     * @return Reference to member header
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteAliasHeader& header();


                    /*!
                     * @brief This function copies the value in member body
                     * @param _body New value to be copied in member body
                     */
                    eProsima_user_DllExport void body(
                            const eprosima::fastdds::dds::xtypes::CompleteAliasBody& _body);

                    /*!
                     * @brief This function moves the value in member body
                     * @param _body New value to be moved in member body
                     */
                    eProsima_user_DllExport void body(
                            eprosima::fastdds::dds::xtypes::CompleteAliasBody&& _body);

                    /*!
                     * @brief This function returns a constant reference to member body
                     * @return Constant reference to member body
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteAliasBody& body() const;

                    /*!
                     * @brief This function returns a reference to member body
                     * @return Reference to member body
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteAliasBody& body();

                private:

                    eprosima::fastdds::dds::xtypes::AliasTypeFlag m_alias_flags{0};
                    eprosima::fastdds::dds::xtypes::CompleteAliasHeader m_header;
                    eprosima::fastdds::dds::xtypes::CompleteAliasBody m_body;

                };
                /*!
                 * @brief This class represents the structure MinimalAliasType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalAliasType
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport MinimalAliasType();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~MinimalAliasType();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalAliasType that will be copied.
                     */
                    eProsima_user_DllExport MinimalAliasType(
                            const MinimalAliasType& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalAliasType that will be copied.
                     */
                    eProsima_user_DllExport MinimalAliasType(
                            MinimalAliasType&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalAliasType that will be copied.
                     */
                    eProsima_user_DllExport MinimalAliasType& operator =(
                            const MinimalAliasType& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalAliasType that will be copied.
                     */
                    eProsima_user_DllExport MinimalAliasType& operator =(
                            MinimalAliasType&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalAliasType object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const MinimalAliasType& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalAliasType object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const MinimalAliasType& x) const;

                    /*!
                     * @brief This function copies the value in member alias_flags
                     * @param _alias_flags New value to be copied in member alias_flags
                     */
                    eProsima_user_DllExport void alias_flags(
                            const eprosima::fastdds::dds::xtypes::AliasTypeFlag& _alias_flags);

                    /*!
                     * @brief This function moves the value in member alias_flags
                     * @param _alias_flags New value to be moved in member alias_flags
                     */
                    eProsima_user_DllExport void alias_flags(
                            eprosima::fastdds::dds::xtypes::AliasTypeFlag&& _alias_flags);

                    /*!
                     * @brief This function returns a constant reference to member alias_flags
                     * @return Constant reference to member alias_flags
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::AliasTypeFlag& alias_flags() const;

                    /*!
                     * @brief This function returns a reference to member alias_flags
                     * @return Reference to member alias_flags
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::AliasTypeFlag& alias_flags();


                    /*!
                     * @brief This function copies the value in member header
                     * @param _header New value to be copied in member header
                     */
                    eProsima_user_DllExport void header(
                            const eprosima::fastdds::dds::xtypes::MinimalAliasHeader& _header);

                    /*!
                     * @brief This function moves the value in member header
                     * @param _header New value to be moved in member header
                     */
                    eProsima_user_DllExport void header(
                            eprosima::fastdds::dds::xtypes::MinimalAliasHeader&& _header);

                    /*!
                     * @brief This function returns a constant reference to member header
                     * @return Constant reference to member header
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalAliasHeader& header() const;

                    /*!
                     * @brief This function returns a reference to member header
                     * @return Reference to member header
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalAliasHeader& header();


                    /*!
                     * @brief This function copies the value in member body
                     * @param _body New value to be copied in member body
                     */
                    eProsima_user_DllExport void body(
                            const eprosima::fastdds::dds::xtypes::MinimalAliasBody& _body);

                    /*!
                     * @brief This function moves the value in member body
                     * @param _body New value to be moved in member body
                     */
                    eProsima_user_DllExport void body(
                            eprosima::fastdds::dds::xtypes::MinimalAliasBody&& _body);

                    /*!
                     * @brief This function returns a constant reference to member body
                     * @return Constant reference to member body
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalAliasBody& body() const;

                    /*!
                     * @brief This function returns a reference to member body
                     * @return Reference to member body
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalAliasBody& body();

                private:

                    eprosima::fastdds::dds::xtypes::AliasTypeFlag m_alias_flags{0};
                    eprosima::fastdds::dds::xtypes::MinimalAliasHeader m_header;
                    eprosima::fastdds::dds::xtypes::MinimalAliasBody m_body;

                };
                /*!
                 * @brief This class represents the structure CompleteElementDetail defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteElementDetail
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CompleteElementDetail();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CompleteElementDetail();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteElementDetail that will be copied.
                     */
                    eProsima_user_DllExport CompleteElementDetail(
                            const CompleteElementDetail& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteElementDetail that will be copied.
                     */
                    eProsima_user_DllExport CompleteElementDetail(
                            CompleteElementDetail&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteElementDetail that will be copied.
                     */
                    eProsima_user_DllExport CompleteElementDetail& operator =(
                            const CompleteElementDetail& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteElementDetail that will be copied.
                     */
                    eProsima_user_DllExport CompleteElementDetail& operator =(
                            CompleteElementDetail&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteElementDetail object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CompleteElementDetail& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteElementDetail object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CompleteElementDetail& x) const;

                    /*!
                     * @brief This function copies the value in member ann_builtin
                     * @param _ann_builtin New value to be copied in member ann_builtin
                     */
                    eProsima_user_DllExport void ann_builtin(
                            const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations>& _ann_builtin);

                    /*!
                     * @brief This function moves the value in member ann_builtin
                     * @param _ann_builtin New value to be moved in member ann_builtin
                     */
                    eProsima_user_DllExport void ann_builtin(
                            eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations>&& _ann_builtin);

                    /*!
                     * @brief This function returns a constant reference to member ann_builtin
                     * @return Constant reference to member ann_builtin
                     */
                    eProsima_user_DllExport const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations>& ann_builtin() const;

                    /*!
                     * @brief This function returns a reference to member ann_builtin
                     * @return Reference to member ann_builtin
                     */
                    eProsima_user_DllExport eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations>& ann_builtin();


                    /*!
                     * @brief This function copies the value in member ann_custom
                     * @param _ann_custom New value to be copied in member ann_custom
                     */
                    eProsima_user_DllExport void ann_custom(
                            const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>& _ann_custom);

                    /*!
                     * @brief This function moves the value in member ann_custom
                     * @param _ann_custom New value to be moved in member ann_custom
                     */
                    eProsima_user_DllExport void ann_custom(
                            eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>&& _ann_custom);

                    /*!
                     * @brief This function returns a constant reference to member ann_custom
                     * @return Constant reference to member ann_custom
                     */
                    eProsima_user_DllExport const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>& ann_custom() const;

                    /*!
                     * @brief This function returns a reference to member ann_custom
                     * @return Reference to member ann_custom
                     */
                    eProsima_user_DllExport eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>& ann_custom();

                private:

                    eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations> m_ann_builtin;
                    eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq> m_ann_custom;

                };
                /*!
                 * @brief This class represents the structure CommonCollectionElement defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CommonCollectionElement
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CommonCollectionElement();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CommonCollectionElement();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonCollectionElement that will be copied.
                     */
                    eProsima_user_DllExport CommonCollectionElement(
                            const CommonCollectionElement& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonCollectionElement that will be copied.
                     */
                    eProsima_user_DllExport CommonCollectionElement(
                            CommonCollectionElement&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonCollectionElement that will be copied.
                     */
                    eProsima_user_DllExport CommonCollectionElement& operator =(
                            const CommonCollectionElement& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonCollectionElement that will be copied.
                     */
                    eProsima_user_DllExport CommonCollectionElement& operator =(
                            CommonCollectionElement&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CommonCollectionElement object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CommonCollectionElement& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CommonCollectionElement object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CommonCollectionElement& x) const;

                    /*!
                     * @brief This function copies the value in member element_flags
                     * @param _element_flags New value to be copied in member element_flags
                     */
                    eProsima_user_DllExport void element_flags(
                            const eprosima::fastdds::dds::xtypes::CollectionElementFlag& _element_flags);

                    /*!
                     * @brief This function moves the value in member element_flags
                     * @param _element_flags New value to be moved in member element_flags
                     */
                    eProsima_user_DllExport void element_flags(
                            eprosima::fastdds::dds::xtypes::CollectionElementFlag&& _element_flags);

                    /*!
                     * @brief This function returns a constant reference to member element_flags
                     * @return Constant reference to member element_flags
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CollectionElementFlag& element_flags() const;

                    /*!
                     * @brief This function returns a reference to member element_flags
                     * @return Reference to member element_flags
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CollectionElementFlag& element_flags();


                    /*!
                     * @brief This function copies the value in member type
                     * @param _type New value to be copied in member type
                     */
                    eProsima_user_DllExport void type(
                            const eprosima::fastdds::dds::xtypes::TypeIdentifier& _type);

                    /*!
                     * @brief This function moves the value in member type
                     * @param _type New value to be moved in member type
                     */
                    eProsima_user_DllExport void type(
                            eprosima::fastdds::dds::xtypes::TypeIdentifier&& _type);

                    /*!
                     * @brief This function returns a constant reference to member type
                     * @return Constant reference to member type
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::TypeIdentifier& type() const;

                    /*!
                     * @brief This function returns a reference to member type
                     * @return Reference to member type
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::TypeIdentifier& type();

                private:

                    eprosima::fastdds::dds::xtypes::CollectionElementFlag m_element_flags{0};
                    eprosima::fastdds::dds::xtypes::TypeIdentifier* m_type;

                };
                /*!
                 * @brief This class represents the structure CompleteCollectionElement defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteCollectionElement
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CompleteCollectionElement();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CompleteCollectionElement();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteCollectionElement that will be copied.
                     */
                    eProsima_user_DllExport CompleteCollectionElement(
                            const CompleteCollectionElement& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteCollectionElement that will be copied.
                     */
                    eProsima_user_DllExport CompleteCollectionElement(
                            CompleteCollectionElement&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteCollectionElement that will be copied.
                     */
                    eProsima_user_DllExport CompleteCollectionElement& operator =(
                            const CompleteCollectionElement& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteCollectionElement that will be copied.
                     */
                    eProsima_user_DllExport CompleteCollectionElement& operator =(
                            CompleteCollectionElement&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteCollectionElement object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CompleteCollectionElement& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteCollectionElement object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CompleteCollectionElement& x) const;

                    /*!
                     * @brief This function copies the value in member common
                     * @param _common New value to be copied in member common
                     */
                    eProsima_user_DllExport void common(
                            const eprosima::fastdds::dds::xtypes::CommonCollectionElement& _common);

                    /*!
                     * @brief This function moves the value in member common
                     * @param _common New value to be moved in member common
                     */
                    eProsima_user_DllExport void common(
                            eprosima::fastdds::dds::xtypes::CommonCollectionElement&& _common);

                    /*!
                     * @brief This function returns a constant reference to member common
                     * @return Constant reference to member common
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CommonCollectionElement& common() const;

                    /*!
                     * @brief This function returns a reference to member common
                     * @return Reference to member common
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CommonCollectionElement& common();


                    /*!
                     * @brief This function copies the value in member detail
                     * @param _detail New value to be copied in member detail
                     */
                    eProsima_user_DllExport void detail(
                            const eprosima::fastdds::dds::xtypes::CompleteElementDetail& _detail);

                    /*!
                     * @brief This function moves the value in member detail
                     * @param _detail New value to be moved in member detail
                     */
                    eProsima_user_DllExport void detail(
                            eprosima::fastdds::dds::xtypes::CompleteElementDetail&& _detail);

                    /*!
                     * @brief This function returns a constant reference to member detail
                     * @return Constant reference to member detail
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteElementDetail& detail() const;

                    /*!
                     * @brief This function returns a reference to member detail
                     * @return Reference to member detail
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteElementDetail& detail();

                private:

                    eprosima::fastdds::dds::xtypes::CommonCollectionElement m_common;
                    eprosima::fastdds::dds::xtypes::CompleteElementDetail m_detail;

                };
                /*!
                 * @brief This class represents the structure MinimalCollectionElement defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalCollectionElement
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport MinimalCollectionElement();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~MinimalCollectionElement();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalCollectionElement that will be copied.
                     */
                    eProsima_user_DllExport MinimalCollectionElement(
                            const MinimalCollectionElement& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalCollectionElement that will be copied.
                     */
                    eProsima_user_DllExport MinimalCollectionElement(
                            MinimalCollectionElement&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalCollectionElement that will be copied.
                     */
                    eProsima_user_DllExport MinimalCollectionElement& operator =(
                            const MinimalCollectionElement& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalCollectionElement that will be copied.
                     */
                    eProsima_user_DllExport MinimalCollectionElement& operator =(
                            MinimalCollectionElement&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalCollectionElement object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const MinimalCollectionElement& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalCollectionElement object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const MinimalCollectionElement& x) const;

                    /*!
                     * @brief This function copies the value in member common
                     * @param _common New value to be copied in member common
                     */
                    eProsima_user_DllExport void common(
                            const eprosima::fastdds::dds::xtypes::CommonCollectionElement& _common);

                    /*!
                     * @brief This function moves the value in member common
                     * @param _common New value to be moved in member common
                     */
                    eProsima_user_DllExport void common(
                            eprosima::fastdds::dds::xtypes::CommonCollectionElement&& _common);

                    /*!
                     * @brief This function returns a constant reference to member common
                     * @return Constant reference to member common
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CommonCollectionElement& common() const;

                    /*!
                     * @brief This function returns a reference to member common
                     * @return Reference to member common
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CommonCollectionElement& common();

                private:

                    eprosima::fastdds::dds::xtypes::CommonCollectionElement m_common;

                };
                /*!
                 * @brief This class represents the structure CommonCollectionHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CommonCollectionHeader
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CommonCollectionHeader();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CommonCollectionHeader();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonCollectionHeader that will be copied.
                     */
                    eProsima_user_DllExport CommonCollectionHeader(
                            const CommonCollectionHeader& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonCollectionHeader that will be copied.
                     */
                    eProsima_user_DllExport CommonCollectionHeader(
                            CommonCollectionHeader&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonCollectionHeader that will be copied.
                     */
                    eProsima_user_DllExport CommonCollectionHeader& operator =(
                            const CommonCollectionHeader& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonCollectionHeader that will be copied.
                     */
                    eProsima_user_DllExport CommonCollectionHeader& operator =(
                            CommonCollectionHeader&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CommonCollectionHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CommonCollectionHeader& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CommonCollectionHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CommonCollectionHeader& x) const;

                    /*!
                     * @brief This function sets a value in member bound
                     * @param _bound New value for member bound
                     */
                    eProsima_user_DllExport void bound(
                            eprosima::fastdds::dds::xtypes::LBound _bound);

                    /*!
                     * @brief This function returns the value of member bound
                     * @return Value of member bound
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::LBound bound() const;

                    /*!
                     * @brief This function returns a reference to member bound
                     * @return Reference to member bound
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::LBound& bound();

                private:

                    eprosima::fastdds::dds::xtypes::LBound m_bound{0};

                };
                /*!
                 * @brief This class represents the structure CompleteCollectionHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteCollectionHeader
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CompleteCollectionHeader();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CompleteCollectionHeader();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteCollectionHeader that will be copied.
                     */
                    eProsima_user_DllExport CompleteCollectionHeader(
                            const CompleteCollectionHeader& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteCollectionHeader that will be copied.
                     */
                    eProsima_user_DllExport CompleteCollectionHeader(
                            CompleteCollectionHeader&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteCollectionHeader that will be copied.
                     */
                    eProsima_user_DllExport CompleteCollectionHeader& operator =(
                            const CompleteCollectionHeader& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteCollectionHeader that will be copied.
                     */
                    eProsima_user_DllExport CompleteCollectionHeader& operator =(
                            CompleteCollectionHeader&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteCollectionHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CompleteCollectionHeader& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteCollectionHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CompleteCollectionHeader& x) const;

                    /*!
                     * @brief This function copies the value in member common
                     * @param _common New value to be copied in member common
                     */
                    eProsima_user_DllExport void common(
                            const eprosima::fastdds::dds::xtypes::CommonCollectionHeader& _common);

                    /*!
                     * @brief This function moves the value in member common
                     * @param _common New value to be moved in member common
                     */
                    eProsima_user_DllExport void common(
                            eprosima::fastdds::dds::xtypes::CommonCollectionHeader&& _common);

                    /*!
                     * @brief This function returns a constant reference to member common
                     * @return Constant reference to member common
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CommonCollectionHeader& common() const;

                    /*!
                     * @brief This function returns a reference to member common
                     * @return Reference to member common
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CommonCollectionHeader& common();


                    /*!
                     * @brief This function copies the value in member detail
                     * @param _detail New value to be copied in member detail
                     */
                    eProsima_user_DllExport void detail(
                            const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::CompleteTypeDetail>& _detail);

                    /*!
                     * @brief This function moves the value in member detail
                     * @param _detail New value to be moved in member detail
                     */
                    eProsima_user_DllExport void detail(
                            eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::CompleteTypeDetail>&& _detail);

                    /*!
                     * @brief This function returns a constant reference to member detail
                     * @return Constant reference to member detail
                     */
                    eProsima_user_DllExport const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::CompleteTypeDetail>& detail() const;

                    /*!
                     * @brief This function returns a reference to member detail
                     * @return Reference to member detail
                     */
                    eProsima_user_DllExport eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::CompleteTypeDetail>& detail();

                private:

                    eprosima::fastdds::dds::xtypes::CommonCollectionHeader m_common;
                    eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::CompleteTypeDetail> m_detail;

                };
                /*!
                 * @brief This class represents the structure MinimalCollectionHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalCollectionHeader
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport MinimalCollectionHeader();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~MinimalCollectionHeader();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalCollectionHeader that will be copied.
                     */
                    eProsima_user_DllExport MinimalCollectionHeader(
                            const MinimalCollectionHeader& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalCollectionHeader that will be copied.
                     */
                    eProsima_user_DllExport MinimalCollectionHeader(
                            MinimalCollectionHeader&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalCollectionHeader that will be copied.
                     */
                    eProsima_user_DllExport MinimalCollectionHeader& operator =(
                            const MinimalCollectionHeader& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalCollectionHeader that will be copied.
                     */
                    eProsima_user_DllExport MinimalCollectionHeader& operator =(
                            MinimalCollectionHeader&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalCollectionHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const MinimalCollectionHeader& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalCollectionHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const MinimalCollectionHeader& x) const;

                    /*!
                     * @brief This function copies the value in member common
                     * @param _common New value to be copied in member common
                     */
                    eProsima_user_DllExport void common(
                            const eprosima::fastdds::dds::xtypes::CommonCollectionHeader& _common);

                    /*!
                     * @brief This function moves the value in member common
                     * @param _common New value to be moved in member common
                     */
                    eProsima_user_DllExport void common(
                            eprosima::fastdds::dds::xtypes::CommonCollectionHeader&& _common);

                    /*!
                     * @brief This function returns a constant reference to member common
                     * @return Constant reference to member common
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CommonCollectionHeader& common() const;

                    /*!
                     * @brief This function returns a reference to member common
                     * @return Reference to member common
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CommonCollectionHeader& common();

                private:

                    eprosima::fastdds::dds::xtypes::CommonCollectionHeader m_common;

                };
                /*!
                 * @brief This class represents the structure CompleteSequenceType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteSequenceType
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CompleteSequenceType();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CompleteSequenceType();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteSequenceType that will be copied.
                     */
                    eProsima_user_DllExport CompleteSequenceType(
                            const CompleteSequenceType& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteSequenceType that will be copied.
                     */
                    eProsima_user_DllExport CompleteSequenceType(
                            CompleteSequenceType&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteSequenceType that will be copied.
                     */
                    eProsima_user_DllExport CompleteSequenceType& operator =(
                            const CompleteSequenceType& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteSequenceType that will be copied.
                     */
                    eProsima_user_DllExport CompleteSequenceType& operator =(
                            CompleteSequenceType&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteSequenceType object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CompleteSequenceType& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteSequenceType object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CompleteSequenceType& x) const;

                    /*!
                     * @brief This function copies the value in member collection_flag
                     * @param _collection_flag New value to be copied in member collection_flag
                     */
                    eProsima_user_DllExport void collection_flag(
                            const eprosima::fastdds::dds::xtypes::CollectionTypeFlag& _collection_flag);

                    /*!
                     * @brief This function moves the value in member collection_flag
                     * @param _collection_flag New value to be moved in member collection_flag
                     */
                    eProsima_user_DllExport void collection_flag(
                            eprosima::fastdds::dds::xtypes::CollectionTypeFlag&& _collection_flag);

                    /*!
                     * @brief This function returns a constant reference to member collection_flag
                     * @return Constant reference to member collection_flag
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CollectionTypeFlag& collection_flag() const;

                    /*!
                     * @brief This function returns a reference to member collection_flag
                     * @return Reference to member collection_flag
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CollectionTypeFlag& collection_flag();


                    /*!
                     * @brief This function copies the value in member header
                     * @param _header New value to be copied in member header
                     */
                    eProsima_user_DllExport void header(
                            const eprosima::fastdds::dds::xtypes::CompleteCollectionHeader& _header);

                    /*!
                     * @brief This function moves the value in member header
                     * @param _header New value to be moved in member header
                     */
                    eProsima_user_DllExport void header(
                            eprosima::fastdds::dds::xtypes::CompleteCollectionHeader&& _header);

                    /*!
                     * @brief This function returns a constant reference to member header
                     * @return Constant reference to member header
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteCollectionHeader& header() const;

                    /*!
                     * @brief This function returns a reference to member header
                     * @return Reference to member header
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteCollectionHeader& header();


                    /*!
                     * @brief This function copies the value in member element
                     * @param _element New value to be copied in member element
                     */
                    eProsima_user_DllExport void element(
                            const eprosima::fastdds::dds::xtypes::CompleteCollectionElement& _element);

                    /*!
                     * @brief This function moves the value in member element
                     * @param _element New value to be moved in member element
                     */
                    eProsima_user_DllExport void element(
                            eprosima::fastdds::dds::xtypes::CompleteCollectionElement&& _element);

                    /*!
                     * @brief This function returns a constant reference to member element
                     * @return Constant reference to member element
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteCollectionElement& element() const;

                    /*!
                     * @brief This function returns a reference to member element
                     * @return Reference to member element
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteCollectionElement& element();

                private:

                    eprosima::fastdds::dds::xtypes::CollectionTypeFlag m_collection_flag{0};
                    eprosima::fastdds::dds::xtypes::CompleteCollectionHeader m_header;
                    eprosima::fastdds::dds::xtypes::CompleteCollectionElement m_element;

                };
                /*!
                 * @brief This class represents the structure MinimalSequenceType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalSequenceType
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport MinimalSequenceType();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~MinimalSequenceType();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalSequenceType that will be copied.
                     */
                    eProsima_user_DllExport MinimalSequenceType(
                            const MinimalSequenceType& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalSequenceType that will be copied.
                     */
                    eProsima_user_DllExport MinimalSequenceType(
                            MinimalSequenceType&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalSequenceType that will be copied.
                     */
                    eProsima_user_DllExport MinimalSequenceType& operator =(
                            const MinimalSequenceType& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalSequenceType that will be copied.
                     */
                    eProsima_user_DllExport MinimalSequenceType& operator =(
                            MinimalSequenceType&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalSequenceType object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const MinimalSequenceType& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalSequenceType object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const MinimalSequenceType& x) const;

                    /*!
                     * @brief This function copies the value in member collection_flag
                     * @param _collection_flag New value to be copied in member collection_flag
                     */
                    eProsima_user_DllExport void collection_flag(
                            const eprosima::fastdds::dds::xtypes::CollectionTypeFlag& _collection_flag);

                    /*!
                     * @brief This function moves the value in member collection_flag
                     * @param _collection_flag New value to be moved in member collection_flag
                     */
                    eProsima_user_DllExport void collection_flag(
                            eprosima::fastdds::dds::xtypes::CollectionTypeFlag&& _collection_flag);

                    /*!
                     * @brief This function returns a constant reference to member collection_flag
                     * @return Constant reference to member collection_flag
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CollectionTypeFlag& collection_flag() const;

                    /*!
                     * @brief This function returns a reference to member collection_flag
                     * @return Reference to member collection_flag
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CollectionTypeFlag& collection_flag();


                    /*!
                     * @brief This function copies the value in member header
                     * @param _header New value to be copied in member header
                     */
                    eProsima_user_DllExport void header(
                            const eprosima::fastdds::dds::xtypes::MinimalCollectionHeader& _header);

                    /*!
                     * @brief This function moves the value in member header
                     * @param _header New value to be moved in member header
                     */
                    eProsima_user_DllExport void header(
                            eprosima::fastdds::dds::xtypes::MinimalCollectionHeader&& _header);

                    /*!
                     * @brief This function returns a constant reference to member header
                     * @return Constant reference to member header
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalCollectionHeader& header() const;

                    /*!
                     * @brief This function returns a reference to member header
                     * @return Reference to member header
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalCollectionHeader& header();


                    /*!
                     * @brief This function copies the value in member element
                     * @param _element New value to be copied in member element
                     */
                    eProsima_user_DllExport void element(
                            const eprosima::fastdds::dds::xtypes::MinimalCollectionElement& _element);

                    /*!
                     * @brief This function moves the value in member element
                     * @param _element New value to be moved in member element
                     */
                    eProsima_user_DllExport void element(
                            eprosima::fastdds::dds::xtypes::MinimalCollectionElement&& _element);

                    /*!
                     * @brief This function returns a constant reference to member element
                     * @return Constant reference to member element
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalCollectionElement& element() const;

                    /*!
                     * @brief This function returns a reference to member element
                     * @return Reference to member element
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalCollectionElement& element();

                private:

                    eprosima::fastdds::dds::xtypes::CollectionTypeFlag m_collection_flag{0};
                    eprosima::fastdds::dds::xtypes::MinimalCollectionHeader m_header;
                    eprosima::fastdds::dds::xtypes::MinimalCollectionElement m_element;

                };
                /*!
                 * @brief This class represents the structure CommonArrayHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CommonArrayHeader
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CommonArrayHeader();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CommonArrayHeader();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonArrayHeader that will be copied.
                     */
                    eProsima_user_DllExport CommonArrayHeader(
                            const CommonArrayHeader& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonArrayHeader that will be copied.
                     */
                    eProsima_user_DllExport CommonArrayHeader(
                            CommonArrayHeader&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonArrayHeader that will be copied.
                     */
                    eProsima_user_DllExport CommonArrayHeader& operator =(
                            const CommonArrayHeader& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonArrayHeader that will be copied.
                     */
                    eProsima_user_DllExport CommonArrayHeader& operator =(
                            CommonArrayHeader&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CommonArrayHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CommonArrayHeader& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CommonArrayHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CommonArrayHeader& x) const;

                    /*!
                     * @brief This function copies the value in member bound_seq
                     * @param _bound_seq New value to be copied in member bound_seq
                     */
                    eProsima_user_DllExport void bound_seq(
                            const eprosima::fastdds::dds::xtypes::LBoundSeq& _bound_seq);

                    /*!
                     * @brief This function moves the value in member bound_seq
                     * @param _bound_seq New value to be moved in member bound_seq
                     */
                    eProsima_user_DllExport void bound_seq(
                            eprosima::fastdds::dds::xtypes::LBoundSeq&& _bound_seq);

                    /*!
                     * @brief This function returns a constant reference to member bound_seq
                     * @return Constant reference to member bound_seq
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::LBoundSeq& bound_seq() const;

                    /*!
                     * @brief This function returns a reference to member bound_seq
                     * @return Reference to member bound_seq
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::LBoundSeq& bound_seq();

                private:

                    eprosima::fastdds::dds::xtypes::LBoundSeq m_bound_seq;

                };
                /*!
                 * @brief This class represents the structure CompleteArrayHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteArrayHeader
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CompleteArrayHeader();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CompleteArrayHeader();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteArrayHeader that will be copied.
                     */
                    eProsima_user_DllExport CompleteArrayHeader(
                            const CompleteArrayHeader& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteArrayHeader that will be copied.
                     */
                    eProsima_user_DllExport CompleteArrayHeader(
                            CompleteArrayHeader&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteArrayHeader that will be copied.
                     */
                    eProsima_user_DllExport CompleteArrayHeader& operator =(
                            const CompleteArrayHeader& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteArrayHeader that will be copied.
                     */
                    eProsima_user_DllExport CompleteArrayHeader& operator =(
                            CompleteArrayHeader&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteArrayHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CompleteArrayHeader& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteArrayHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CompleteArrayHeader& x) const;

                    /*!
                     * @brief This function copies the value in member common
                     * @param _common New value to be copied in member common
                     */
                    eProsima_user_DllExport void common(
                            const eprosima::fastdds::dds::xtypes::CommonArrayHeader& _common);

                    /*!
                     * @brief This function moves the value in member common
                     * @param _common New value to be moved in member common
                     */
                    eProsima_user_DllExport void common(
                            eprosima::fastdds::dds::xtypes::CommonArrayHeader&& _common);

                    /*!
                     * @brief This function returns a constant reference to member common
                     * @return Constant reference to member common
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CommonArrayHeader& common() const;

                    /*!
                     * @brief This function returns a reference to member common
                     * @return Reference to member common
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CommonArrayHeader& common();


                    /*!
                     * @brief This function copies the value in member detail
                     * @param _detail New value to be copied in member detail
                     */
                    eProsima_user_DllExport void detail(
                            const eprosima::fastdds::dds::xtypes::CompleteTypeDetail& _detail);

                    /*!
                     * @brief This function moves the value in member detail
                     * @param _detail New value to be moved in member detail
                     */
                    eProsima_user_DllExport void detail(
                            eprosima::fastdds::dds::xtypes::CompleteTypeDetail&& _detail);

                    /*!
                     * @brief This function returns a constant reference to member detail
                     * @return Constant reference to member detail
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteTypeDetail& detail() const;

                    /*!
                     * @brief This function returns a reference to member detail
                     * @return Reference to member detail
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteTypeDetail& detail();

                private:

                    eprosima::fastdds::dds::xtypes::CommonArrayHeader m_common;
                    eprosima::fastdds::dds::xtypes::CompleteTypeDetail m_detail;

                };
                /*!
                 * @brief This class represents the structure MinimalArrayHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalArrayHeader
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport MinimalArrayHeader();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~MinimalArrayHeader();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalArrayHeader that will be copied.
                     */
                    eProsima_user_DllExport MinimalArrayHeader(
                            const MinimalArrayHeader& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalArrayHeader that will be copied.
                     */
                    eProsima_user_DllExport MinimalArrayHeader(
                            MinimalArrayHeader&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalArrayHeader that will be copied.
                     */
                    eProsima_user_DllExport MinimalArrayHeader& operator =(
                            const MinimalArrayHeader& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalArrayHeader that will be copied.
                     */
                    eProsima_user_DllExport MinimalArrayHeader& operator =(
                            MinimalArrayHeader&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalArrayHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const MinimalArrayHeader& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalArrayHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const MinimalArrayHeader& x) const;

                    /*!
                     * @brief This function copies the value in member common
                     * @param _common New value to be copied in member common
                     */
                    eProsima_user_DllExport void common(
                            const eprosima::fastdds::dds::xtypes::CommonArrayHeader& _common);

                    /*!
                     * @brief This function moves the value in member common
                     * @param _common New value to be moved in member common
                     */
                    eProsima_user_DllExport void common(
                            eprosima::fastdds::dds::xtypes::CommonArrayHeader&& _common);

                    /*!
                     * @brief This function returns a constant reference to member common
                     * @return Constant reference to member common
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CommonArrayHeader& common() const;

                    /*!
                     * @brief This function returns a reference to member common
                     * @return Reference to member common
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CommonArrayHeader& common();

                private:

                    eprosima::fastdds::dds::xtypes::CommonArrayHeader m_common;

                };
                /*!
                 * @brief This class represents the structure CompleteArrayType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteArrayType
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CompleteArrayType();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CompleteArrayType();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteArrayType that will be copied.
                     */
                    eProsima_user_DllExport CompleteArrayType(
                            const CompleteArrayType& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteArrayType that will be copied.
                     */
                    eProsima_user_DllExport CompleteArrayType(
                            CompleteArrayType&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteArrayType that will be copied.
                     */
                    eProsima_user_DllExport CompleteArrayType& operator =(
                            const CompleteArrayType& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteArrayType that will be copied.
                     */
                    eProsima_user_DllExport CompleteArrayType& operator =(
                            CompleteArrayType&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteArrayType object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CompleteArrayType& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteArrayType object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CompleteArrayType& x) const;

                    /*!
                     * @brief This function copies the value in member collection_flag
                     * @param _collection_flag New value to be copied in member collection_flag
                     */
                    eProsima_user_DllExport void collection_flag(
                            const eprosima::fastdds::dds::xtypes::CollectionTypeFlag& _collection_flag);

                    /*!
                     * @brief This function moves the value in member collection_flag
                     * @param _collection_flag New value to be moved in member collection_flag
                     */
                    eProsima_user_DllExport void collection_flag(
                            eprosima::fastdds::dds::xtypes::CollectionTypeFlag&& _collection_flag);

                    /*!
                     * @brief This function returns a constant reference to member collection_flag
                     * @return Constant reference to member collection_flag
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CollectionTypeFlag& collection_flag() const;

                    /*!
                     * @brief This function returns a reference to member collection_flag
                     * @return Reference to member collection_flag
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CollectionTypeFlag& collection_flag();


                    /*!
                     * @brief This function copies the value in member header
                     * @param _header New value to be copied in member header
                     */
                    eProsima_user_DllExport void header(
                            const eprosima::fastdds::dds::xtypes::CompleteArrayHeader& _header);

                    /*!
                     * @brief This function moves the value in member header
                     * @param _header New value to be moved in member header
                     */
                    eProsima_user_DllExport void header(
                            eprosima::fastdds::dds::xtypes::CompleteArrayHeader&& _header);

                    /*!
                     * @brief This function returns a constant reference to member header
                     * @return Constant reference to member header
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteArrayHeader& header() const;

                    /*!
                     * @brief This function returns a reference to member header
                     * @return Reference to member header
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteArrayHeader& header();


                    /*!
                     * @brief This function copies the value in member element
                     * @param _element New value to be copied in member element
                     */
                    eProsima_user_DllExport void element(
                            const eprosima::fastdds::dds::xtypes::CompleteCollectionElement& _element);

                    /*!
                     * @brief This function moves the value in member element
                     * @param _element New value to be moved in member element
                     */
                    eProsima_user_DllExport void element(
                            eprosima::fastdds::dds::xtypes::CompleteCollectionElement&& _element);

                    /*!
                     * @brief This function returns a constant reference to member element
                     * @return Constant reference to member element
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteCollectionElement& element() const;

                    /*!
                     * @brief This function returns a reference to member element
                     * @return Reference to member element
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteCollectionElement& element();

                private:

                    eprosima::fastdds::dds::xtypes::CollectionTypeFlag m_collection_flag{0};
                    eprosima::fastdds::dds::xtypes::CompleteArrayHeader m_header;
                    eprosima::fastdds::dds::xtypes::CompleteCollectionElement m_element;

                };
                /*!
                 * @brief This class represents the structure MinimalArrayType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalArrayType
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport MinimalArrayType();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~MinimalArrayType();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalArrayType that will be copied.
                     */
                    eProsima_user_DllExport MinimalArrayType(
                            const MinimalArrayType& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalArrayType that will be copied.
                     */
                    eProsima_user_DllExport MinimalArrayType(
                            MinimalArrayType&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalArrayType that will be copied.
                     */
                    eProsima_user_DllExport MinimalArrayType& operator =(
                            const MinimalArrayType& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalArrayType that will be copied.
                     */
                    eProsima_user_DllExport MinimalArrayType& operator =(
                            MinimalArrayType&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalArrayType object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const MinimalArrayType& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalArrayType object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const MinimalArrayType& x) const;

                    /*!
                     * @brief This function copies the value in member collection_flag
                     * @param _collection_flag New value to be copied in member collection_flag
                     */
                    eProsima_user_DllExport void collection_flag(
                            const eprosima::fastdds::dds::xtypes::CollectionTypeFlag& _collection_flag);

                    /*!
                     * @brief This function moves the value in member collection_flag
                     * @param _collection_flag New value to be moved in member collection_flag
                     */
                    eProsima_user_DllExport void collection_flag(
                            eprosima::fastdds::dds::xtypes::CollectionTypeFlag&& _collection_flag);

                    /*!
                     * @brief This function returns a constant reference to member collection_flag
                     * @return Constant reference to member collection_flag
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CollectionTypeFlag& collection_flag() const;

                    /*!
                     * @brief This function returns a reference to member collection_flag
                     * @return Reference to member collection_flag
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CollectionTypeFlag& collection_flag();


                    /*!
                     * @brief This function copies the value in member header
                     * @param _header New value to be copied in member header
                     */
                    eProsima_user_DllExport void header(
                            const eprosima::fastdds::dds::xtypes::MinimalArrayHeader& _header);

                    /*!
                     * @brief This function moves the value in member header
                     * @param _header New value to be moved in member header
                     */
                    eProsima_user_DllExport void header(
                            eprosima::fastdds::dds::xtypes::MinimalArrayHeader&& _header);

                    /*!
                     * @brief This function returns a constant reference to member header
                     * @return Constant reference to member header
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalArrayHeader& header() const;

                    /*!
                     * @brief This function returns a reference to member header
                     * @return Reference to member header
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalArrayHeader& header();


                    /*!
                     * @brief This function copies the value in member element
                     * @param _element New value to be copied in member element
                     */
                    eProsima_user_DllExport void element(
                            const eprosima::fastdds::dds::xtypes::MinimalCollectionElement& _element);

                    /*!
                     * @brief This function moves the value in member element
                     * @param _element New value to be moved in member element
                     */
                    eProsima_user_DllExport void element(
                            eprosima::fastdds::dds::xtypes::MinimalCollectionElement&& _element);

                    /*!
                     * @brief This function returns a constant reference to member element
                     * @return Constant reference to member element
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalCollectionElement& element() const;

                    /*!
                     * @brief This function returns a reference to member element
                     * @return Reference to member element
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalCollectionElement& element();

                private:

                    eprosima::fastdds::dds::xtypes::CollectionTypeFlag m_collection_flag{0};
                    eprosima::fastdds::dds::xtypes::MinimalArrayHeader m_header;
                    eprosima::fastdds::dds::xtypes::MinimalCollectionElement m_element;

                };
                /*!
                 * @brief This class represents the structure CompleteMapType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteMapType
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CompleteMapType();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CompleteMapType();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteMapType that will be copied.
                     */
                    eProsima_user_DllExport CompleteMapType(
                            const CompleteMapType& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteMapType that will be copied.
                     */
                    eProsima_user_DllExport CompleteMapType(
                            CompleteMapType&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteMapType that will be copied.
                     */
                    eProsima_user_DllExport CompleteMapType& operator =(
                            const CompleteMapType& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteMapType that will be copied.
                     */
                    eProsima_user_DllExport CompleteMapType& operator =(
                            CompleteMapType&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteMapType object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CompleteMapType& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteMapType object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CompleteMapType& x) const;

                    /*!
                     * @brief This function copies the value in member collection_flag
                     * @param _collection_flag New value to be copied in member collection_flag
                     */
                    eProsima_user_DllExport void collection_flag(
                            const eprosima::fastdds::dds::xtypes::CollectionTypeFlag& _collection_flag);

                    /*!
                     * @brief This function moves the value in member collection_flag
                     * @param _collection_flag New value to be moved in member collection_flag
                     */
                    eProsima_user_DllExport void collection_flag(
                            eprosima::fastdds::dds::xtypes::CollectionTypeFlag&& _collection_flag);

                    /*!
                     * @brief This function returns a constant reference to member collection_flag
                     * @return Constant reference to member collection_flag
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CollectionTypeFlag& collection_flag() const;

                    /*!
                     * @brief This function returns a reference to member collection_flag
                     * @return Reference to member collection_flag
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CollectionTypeFlag& collection_flag();


                    /*!
                     * @brief This function copies the value in member header
                     * @param _header New value to be copied in member header
                     */
                    eProsima_user_DllExport void header(
                            const eprosima::fastdds::dds::xtypes::CompleteCollectionHeader& _header);

                    /*!
                     * @brief This function moves the value in member header
                     * @param _header New value to be moved in member header
                     */
                    eProsima_user_DllExport void header(
                            eprosima::fastdds::dds::xtypes::CompleteCollectionHeader&& _header);

                    /*!
                     * @brief This function returns a constant reference to member header
                     * @return Constant reference to member header
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteCollectionHeader& header() const;

                    /*!
                     * @brief This function returns a reference to member header
                     * @return Reference to member header
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteCollectionHeader& header();


                    /*!
                     * @brief This function copies the value in member key
                     * @param _key New value to be copied in member key
                     */
                    eProsima_user_DllExport void key(
                            const eprosima::fastdds::dds::xtypes::CompleteCollectionElement& _key);

                    /*!
                     * @brief This function moves the value in member key
                     * @param _key New value to be moved in member key
                     */
                    eProsima_user_DllExport void key(
                            eprosima::fastdds::dds::xtypes::CompleteCollectionElement&& _key);

                    /*!
                     * @brief This function returns a constant reference to member key
                     * @return Constant reference to member key
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteCollectionElement& key() const;

                    /*!
                     * @brief This function returns a reference to member key
                     * @return Reference to member key
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteCollectionElement& key();


                    /*!
                     * @brief This function copies the value in member element
                     * @param _element New value to be copied in member element
                     */
                    eProsima_user_DllExport void element(
                            const eprosima::fastdds::dds::xtypes::CompleteCollectionElement& _element);

                    /*!
                     * @brief This function moves the value in member element
                     * @param _element New value to be moved in member element
                     */
                    eProsima_user_DllExport void element(
                            eprosima::fastdds::dds::xtypes::CompleteCollectionElement&& _element);

                    /*!
                     * @brief This function returns a constant reference to member element
                     * @return Constant reference to member element
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteCollectionElement& element() const;

                    /*!
                     * @brief This function returns a reference to member element
                     * @return Reference to member element
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteCollectionElement& element();

                private:

                    eprosima::fastdds::dds::xtypes::CollectionTypeFlag m_collection_flag{0};
                    eprosima::fastdds::dds::xtypes::CompleteCollectionHeader m_header;
                    eprosima::fastdds::dds::xtypes::CompleteCollectionElement m_key;
                    eprosima::fastdds::dds::xtypes::CompleteCollectionElement m_element;

                };
                /*!
                 * @brief This class represents the structure MinimalMapType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalMapType
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport MinimalMapType();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~MinimalMapType();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalMapType that will be copied.
                     */
                    eProsima_user_DllExport MinimalMapType(
                            const MinimalMapType& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalMapType that will be copied.
                     */
                    eProsima_user_DllExport MinimalMapType(
                            MinimalMapType&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalMapType that will be copied.
                     */
                    eProsima_user_DllExport MinimalMapType& operator =(
                            const MinimalMapType& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalMapType that will be copied.
                     */
                    eProsima_user_DllExport MinimalMapType& operator =(
                            MinimalMapType&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalMapType object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const MinimalMapType& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalMapType object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const MinimalMapType& x) const;

                    /*!
                     * @brief This function copies the value in member collection_flag
                     * @param _collection_flag New value to be copied in member collection_flag
                     */
                    eProsima_user_DllExport void collection_flag(
                            const eprosima::fastdds::dds::xtypes::CollectionTypeFlag& _collection_flag);

                    /*!
                     * @brief This function moves the value in member collection_flag
                     * @param _collection_flag New value to be moved in member collection_flag
                     */
                    eProsima_user_DllExport void collection_flag(
                            eprosima::fastdds::dds::xtypes::CollectionTypeFlag&& _collection_flag);

                    /*!
                     * @brief This function returns a constant reference to member collection_flag
                     * @return Constant reference to member collection_flag
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CollectionTypeFlag& collection_flag() const;

                    /*!
                     * @brief This function returns a reference to member collection_flag
                     * @return Reference to member collection_flag
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CollectionTypeFlag& collection_flag();


                    /*!
                     * @brief This function copies the value in member header
                     * @param _header New value to be copied in member header
                     */
                    eProsima_user_DllExport void header(
                            const eprosima::fastdds::dds::xtypes::MinimalCollectionHeader& _header);

                    /*!
                     * @brief This function moves the value in member header
                     * @param _header New value to be moved in member header
                     */
                    eProsima_user_DllExport void header(
                            eprosima::fastdds::dds::xtypes::MinimalCollectionHeader&& _header);

                    /*!
                     * @brief This function returns a constant reference to member header
                     * @return Constant reference to member header
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalCollectionHeader& header() const;

                    /*!
                     * @brief This function returns a reference to member header
                     * @return Reference to member header
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalCollectionHeader& header();


                    /*!
                     * @brief This function copies the value in member key
                     * @param _key New value to be copied in member key
                     */
                    eProsima_user_DllExport void key(
                            const eprosima::fastdds::dds::xtypes::MinimalCollectionElement& _key);

                    /*!
                     * @brief This function moves the value in member key
                     * @param _key New value to be moved in member key
                     */
                    eProsima_user_DllExport void key(
                            eprosima::fastdds::dds::xtypes::MinimalCollectionElement&& _key);

                    /*!
                     * @brief This function returns a constant reference to member key
                     * @return Constant reference to member key
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalCollectionElement& key() const;

                    /*!
                     * @brief This function returns a reference to member key
                     * @return Reference to member key
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalCollectionElement& key();


                    /*!
                     * @brief This function copies the value in member element
                     * @param _element New value to be copied in member element
                     */
                    eProsima_user_DllExport void element(
                            const eprosima::fastdds::dds::xtypes::MinimalCollectionElement& _element);

                    /*!
                     * @brief This function moves the value in member element
                     * @param _element New value to be moved in member element
                     */
                    eProsima_user_DllExport void element(
                            eprosima::fastdds::dds::xtypes::MinimalCollectionElement&& _element);

                    /*!
                     * @brief This function returns a constant reference to member element
                     * @return Constant reference to member element
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalCollectionElement& element() const;

                    /*!
                     * @brief This function returns a reference to member element
                     * @return Reference to member element
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalCollectionElement& element();

                private:

                    eprosima::fastdds::dds::xtypes::CollectionTypeFlag m_collection_flag{0};
                    eprosima::fastdds::dds::xtypes::MinimalCollectionHeader m_header;
                    eprosima::fastdds::dds::xtypes::MinimalCollectionElement m_key;
                    eprosima::fastdds::dds::xtypes::MinimalCollectionElement m_element;

                };
                typedef uint16_t BitBound;

                /*!
                 * @brief This class represents the structure CommonEnumeratedLiteral defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CommonEnumeratedLiteral
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CommonEnumeratedLiteral();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CommonEnumeratedLiteral();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral that will be copied.
                     */
                    eProsima_user_DllExport CommonEnumeratedLiteral(
                            const CommonEnumeratedLiteral& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral that will be copied.
                     */
                    eProsima_user_DllExport CommonEnumeratedLiteral(
                            CommonEnumeratedLiteral&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral that will be copied.
                     */
                    eProsima_user_DllExport CommonEnumeratedLiteral& operator =(
                            const CommonEnumeratedLiteral& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral that will be copied.
                     */
                    eProsima_user_DllExport CommonEnumeratedLiteral& operator =(
                            CommonEnumeratedLiteral&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CommonEnumeratedLiteral& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CommonEnumeratedLiteral& x) const;

                    /*!
                     * @brief This function sets a value in member value
                     * @param _value New value for member value
                     */
                    eProsima_user_DllExport void value(
                            int32_t _value);

                    /*!
                     * @brief This function returns the value of member value
                     * @return Value of member value
                     */
                    eProsima_user_DllExport int32_t value() const;

                    /*!
                     * @brief This function returns a reference to member value
                     * @return Reference to member value
                     */
                    eProsima_user_DllExport int32_t& value();


                    /*!
                     * @brief This function copies the value in member flags
                     * @param _flags New value to be copied in member flags
                     */
                    eProsima_user_DllExport void flags(
                            const eprosima::fastdds::dds::xtypes::EnumeratedLiteralFlag& _flags);

                    /*!
                     * @brief This function moves the value in member flags
                     * @param _flags New value to be moved in member flags
                     */
                    eProsima_user_DllExport void flags(
                            eprosima::fastdds::dds::xtypes::EnumeratedLiteralFlag&& _flags);

                    /*!
                     * @brief This function returns a constant reference to member flags
                     * @return Constant reference to member flags
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::EnumeratedLiteralFlag& flags() const;

                    /*!
                     * @brief This function returns a reference to member flags
                     * @return Reference to member flags
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::EnumeratedLiteralFlag& flags();

                private:

                    int32_t m_value{0};
                    eprosima::fastdds::dds::xtypes::EnumeratedLiteralFlag m_flags{0};

                };
                /*!
                 * @brief This class represents the structure CompleteEnumeratedLiteral defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteEnumeratedLiteral
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CompleteEnumeratedLiteral();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CompleteEnumeratedLiteral();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteral that will be copied.
                     */
                    eProsima_user_DllExport CompleteEnumeratedLiteral(
                            const CompleteEnumeratedLiteral& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteral that will be copied.
                     */
                    eProsima_user_DllExport CompleteEnumeratedLiteral(
                            CompleteEnumeratedLiteral&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteral that will be copied.
                     */
                    eProsima_user_DllExport CompleteEnumeratedLiteral& operator =(
                            const CompleteEnumeratedLiteral& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteral that will be copied.
                     */
                    eProsima_user_DllExport CompleteEnumeratedLiteral& operator =(
                            CompleteEnumeratedLiteral&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteral object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CompleteEnumeratedLiteral& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteral object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CompleteEnumeratedLiteral& x) const;

                    /*!
                     * @brief This function copies the value in member common
                     * @param _common New value to be copied in member common
                     */
                    eProsima_user_DllExport void common(
                            const eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral& _common);

                    /*!
                     * @brief This function moves the value in member common
                     * @param _common New value to be moved in member common
                     */
                    eProsima_user_DllExport void common(
                            eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral&& _common);

                    /*!
                     * @brief This function returns a constant reference to member common
                     * @return Constant reference to member common
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral& common() const;

                    /*!
                     * @brief This function returns a reference to member common
                     * @return Reference to member common
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral& common();


                    /*!
                     * @brief This function copies the value in member detail
                     * @param _detail New value to be copied in member detail
                     */
                    eProsima_user_DllExport void detail(
                            const eprosima::fastdds::dds::xtypes::CompleteMemberDetail& _detail);

                    /*!
                     * @brief This function moves the value in member detail
                     * @param _detail New value to be moved in member detail
                     */
                    eProsima_user_DllExport void detail(
                            eprosima::fastdds::dds::xtypes::CompleteMemberDetail&& _detail);

                    /*!
                     * @brief This function returns a constant reference to member detail
                     * @return Constant reference to member detail
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteMemberDetail& detail() const;

                    /*!
                     * @brief This function returns a reference to member detail
                     * @return Reference to member detail
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteMemberDetail& detail();

                private:

                    eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral m_common;
                    eprosima::fastdds::dds::xtypes::CompleteMemberDetail m_detail;

                };
                typedef std::vector<eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteral> CompleteEnumeratedLiteralSeq;

                /*!
                 * @brief This class represents the structure MinimalEnumeratedLiteral defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalEnumeratedLiteral
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport MinimalEnumeratedLiteral();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~MinimalEnumeratedLiteral();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteral that will be copied.
                     */
                    eProsima_user_DllExport MinimalEnumeratedLiteral(
                            const MinimalEnumeratedLiteral& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteral that will be copied.
                     */
                    eProsima_user_DllExport MinimalEnumeratedLiteral(
                            MinimalEnumeratedLiteral&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteral that will be copied.
                     */
                    eProsima_user_DllExport MinimalEnumeratedLiteral& operator =(
                            const MinimalEnumeratedLiteral& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteral that will be copied.
                     */
                    eProsima_user_DllExport MinimalEnumeratedLiteral& operator =(
                            MinimalEnumeratedLiteral&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteral object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const MinimalEnumeratedLiteral& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteral object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const MinimalEnumeratedLiteral& x) const;

                    /*!
                     * @brief This function copies the value in member common
                     * @param _common New value to be copied in member common
                     */
                    eProsima_user_DllExport void common(
                            const eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral& _common);

                    /*!
                     * @brief This function moves the value in member common
                     * @param _common New value to be moved in member common
                     */
                    eProsima_user_DllExport void common(
                            eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral&& _common);

                    /*!
                     * @brief This function returns a constant reference to member common
                     * @return Constant reference to member common
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral& common() const;

                    /*!
                     * @brief This function returns a reference to member common
                     * @return Reference to member common
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral& common();


                    /*!
                     * @brief This function copies the value in member detail
                     * @param _detail New value to be copied in member detail
                     */
                    eProsima_user_DllExport void detail(
                            const eprosima::fastdds::dds::xtypes::MinimalMemberDetail& _detail);

                    /*!
                     * @brief This function moves the value in member detail
                     * @param _detail New value to be moved in member detail
                     */
                    eProsima_user_DllExport void detail(
                            eprosima::fastdds::dds::xtypes::MinimalMemberDetail&& _detail);

                    /*!
                     * @brief This function returns a constant reference to member detail
                     * @return Constant reference to member detail
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalMemberDetail& detail() const;

                    /*!
                     * @brief This function returns a reference to member detail
                     * @return Reference to member detail
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalMemberDetail& detail();

                private:

                    eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral m_common;
                    eprosima::fastdds::dds::xtypes::MinimalMemberDetail m_detail;

                };
                typedef std::vector<eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteral> MinimalEnumeratedLiteralSeq;

                /*!
                 * @brief This class represents the structure CommonEnumeratedHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CommonEnumeratedHeader
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CommonEnumeratedHeader();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CommonEnumeratedHeader();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader that will be copied.
                     */
                    eProsima_user_DllExport CommonEnumeratedHeader(
                            const CommonEnumeratedHeader& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader that will be copied.
                     */
                    eProsima_user_DllExport CommonEnumeratedHeader(
                            CommonEnumeratedHeader&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader that will be copied.
                     */
                    eProsima_user_DllExport CommonEnumeratedHeader& operator =(
                            const CommonEnumeratedHeader& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader that will be copied.
                     */
                    eProsima_user_DllExport CommonEnumeratedHeader& operator =(
                            CommonEnumeratedHeader&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CommonEnumeratedHeader& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CommonEnumeratedHeader& x) const;

                    /*!
                     * @brief This function sets a value in member bit_bound
                     * @param _bit_bound New value for member bit_bound
                     */
                    eProsima_user_DllExport void bit_bound(
                            eprosima::fastdds::dds::xtypes::BitBound _bit_bound);

                    /*!
                     * @brief This function returns the value of member bit_bound
                     * @return Value of member bit_bound
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::BitBound bit_bound() const;

                    /*!
                     * @brief This function returns a reference to member bit_bound
                     * @return Reference to member bit_bound
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::BitBound& bit_bound();

                private:

                    eprosima::fastdds::dds::xtypes::BitBound m_bit_bound{0};

                };
                /*!
                 * @brief This class represents the structure CompleteEnumeratedHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteEnumeratedHeader
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CompleteEnumeratedHeader();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CompleteEnumeratedHeader();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader that will be copied.
                     */
                    eProsima_user_DllExport CompleteEnumeratedHeader(
                            const CompleteEnumeratedHeader& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader that will be copied.
                     */
                    eProsima_user_DllExport CompleteEnumeratedHeader(
                            CompleteEnumeratedHeader&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader that will be copied.
                     */
                    eProsima_user_DllExport CompleteEnumeratedHeader& operator =(
                            const CompleteEnumeratedHeader& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader that will be copied.
                     */
                    eProsima_user_DllExport CompleteEnumeratedHeader& operator =(
                            CompleteEnumeratedHeader&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CompleteEnumeratedHeader& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CompleteEnumeratedHeader& x) const;

                    /*!
                     * @brief This function copies the value in member common
                     * @param _common New value to be copied in member common
                     */
                    eProsima_user_DllExport void common(
                            const eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader& _common);

                    /*!
                     * @brief This function moves the value in member common
                     * @param _common New value to be moved in member common
                     */
                    eProsima_user_DllExport void common(
                            eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader&& _common);

                    /*!
                     * @brief This function returns a constant reference to member common
                     * @return Constant reference to member common
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader& common() const;

                    /*!
                     * @brief This function returns a reference to member common
                     * @return Reference to member common
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader& common();


                    /*!
                     * @brief This function copies the value in member detail
                     * @param _detail New value to be copied in member detail
                     */
                    eProsima_user_DllExport void detail(
                            const eprosima::fastdds::dds::xtypes::CompleteTypeDetail& _detail);

                    /*!
                     * @brief This function moves the value in member detail
                     * @param _detail New value to be moved in member detail
                     */
                    eProsima_user_DllExport void detail(
                            eprosima::fastdds::dds::xtypes::CompleteTypeDetail&& _detail);

                    /*!
                     * @brief This function returns a constant reference to member detail
                     * @return Constant reference to member detail
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteTypeDetail& detail() const;

                    /*!
                     * @brief This function returns a reference to member detail
                     * @return Reference to member detail
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteTypeDetail& detail();

                private:

                    eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader m_common;
                    eprosima::fastdds::dds::xtypes::CompleteTypeDetail m_detail;

                };
                /*!
                 * @brief This class represents the structure MinimalEnumeratedHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalEnumeratedHeader
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport MinimalEnumeratedHeader();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~MinimalEnumeratedHeader();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalEnumeratedHeader that will be copied.
                     */
                    eProsima_user_DllExport MinimalEnumeratedHeader(
                            const MinimalEnumeratedHeader& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalEnumeratedHeader that will be copied.
                     */
                    eProsima_user_DllExport MinimalEnumeratedHeader(
                            MinimalEnumeratedHeader&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalEnumeratedHeader that will be copied.
                     */
                    eProsima_user_DllExport MinimalEnumeratedHeader& operator =(
                            const MinimalEnumeratedHeader& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalEnumeratedHeader that will be copied.
                     */
                    eProsima_user_DllExport MinimalEnumeratedHeader& operator =(
                            MinimalEnumeratedHeader&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalEnumeratedHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const MinimalEnumeratedHeader& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalEnumeratedHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const MinimalEnumeratedHeader& x) const;

                    /*!
                     * @brief This function copies the value in member common
                     * @param _common New value to be copied in member common
                     */
                    eProsima_user_DllExport void common(
                            const eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader& _common);

                    /*!
                     * @brief This function moves the value in member common
                     * @param _common New value to be moved in member common
                     */
                    eProsima_user_DllExport void common(
                            eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader&& _common);

                    /*!
                     * @brief This function returns a constant reference to member common
                     * @return Constant reference to member common
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader& common() const;

                    /*!
                     * @brief This function returns a reference to member common
                     * @return Reference to member common
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader& common();

                private:

                    eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader m_common;

                };
                /*!
                 * @brief This class represents the structure CompleteEnumeratedType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteEnumeratedType
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CompleteEnumeratedType();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CompleteEnumeratedType();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteEnumeratedType that will be copied.
                     */
                    eProsima_user_DllExport CompleteEnumeratedType(
                            const CompleteEnumeratedType& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteEnumeratedType that will be copied.
                     */
                    eProsima_user_DllExport CompleteEnumeratedType(
                            CompleteEnumeratedType&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteEnumeratedType that will be copied.
                     */
                    eProsima_user_DllExport CompleteEnumeratedType& operator =(
                            const CompleteEnumeratedType& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteEnumeratedType that will be copied.
                     */
                    eProsima_user_DllExport CompleteEnumeratedType& operator =(
                            CompleteEnumeratedType&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteEnumeratedType object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CompleteEnumeratedType& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteEnumeratedType object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CompleteEnumeratedType& x) const;

                    /*!
                     * @brief This function copies the value in member enum_flags
                     * @param _enum_flags New value to be copied in member enum_flags
                     */
                    eProsima_user_DllExport void enum_flags(
                            const eprosima::fastdds::dds::xtypes::EnumTypeFlag& _enum_flags);

                    /*!
                     * @brief This function moves the value in member enum_flags
                     * @param _enum_flags New value to be moved in member enum_flags
                     */
                    eProsima_user_DllExport void enum_flags(
                            eprosima::fastdds::dds::xtypes::EnumTypeFlag&& _enum_flags);

                    /*!
                     * @brief This function returns a constant reference to member enum_flags
                     * @return Constant reference to member enum_flags
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::EnumTypeFlag& enum_flags() const;

                    /*!
                     * @brief This function returns a reference to member enum_flags
                     * @return Reference to member enum_flags
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::EnumTypeFlag& enum_flags();


                    /*!
                     * @brief This function copies the value in member header
                     * @param _header New value to be copied in member header
                     */
                    eProsima_user_DllExport void header(
                            const eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader& _header);

                    /*!
                     * @brief This function moves the value in member header
                     * @param _header New value to be moved in member header
                     */
                    eProsima_user_DllExport void header(
                            eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader&& _header);

                    /*!
                     * @brief This function returns a constant reference to member header
                     * @return Constant reference to member header
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader& header() const;

                    /*!
                     * @brief This function returns a reference to member header
                     * @return Reference to member header
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader& header();


                    /*!
                     * @brief This function copies the value in member literal_seq
                     * @param _literal_seq New value to be copied in member literal_seq
                     */
                    eProsima_user_DllExport void literal_seq(
                            const eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteralSeq& _literal_seq);

                    /*!
                     * @brief This function moves the value in member literal_seq
                     * @param _literal_seq New value to be moved in member literal_seq
                     */
                    eProsima_user_DllExport void literal_seq(
                            eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteralSeq&& _literal_seq);

                    /*!
                     * @brief This function returns a constant reference to member literal_seq
                     * @return Constant reference to member literal_seq
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteralSeq& literal_seq() const;

                    /*!
                     * @brief This function returns a reference to member literal_seq
                     * @return Reference to member literal_seq
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteralSeq& literal_seq();

                private:

                    eprosima::fastdds::dds::xtypes::EnumTypeFlag m_enum_flags{0};
                    eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader m_header;
                    eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteralSeq m_literal_seq;

                };
                /*!
                 * @brief This class represents the structure MinimalEnumeratedType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalEnumeratedType
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport MinimalEnumeratedType();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~MinimalEnumeratedType();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalEnumeratedType that will be copied.
                     */
                    eProsima_user_DllExport MinimalEnumeratedType(
                            const MinimalEnumeratedType& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalEnumeratedType that will be copied.
                     */
                    eProsima_user_DllExport MinimalEnumeratedType(
                            MinimalEnumeratedType&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalEnumeratedType that will be copied.
                     */
                    eProsima_user_DllExport MinimalEnumeratedType& operator =(
                            const MinimalEnumeratedType& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalEnumeratedType that will be copied.
                     */
                    eProsima_user_DllExport MinimalEnumeratedType& operator =(
                            MinimalEnumeratedType&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalEnumeratedType object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const MinimalEnumeratedType& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalEnumeratedType object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const MinimalEnumeratedType& x) const;

                    /*!
                     * @brief This function copies the value in member enum_flags
                     * @param _enum_flags New value to be copied in member enum_flags
                     */
                    eProsima_user_DllExport void enum_flags(
                            const eprosima::fastdds::dds::xtypes::EnumTypeFlag& _enum_flags);

                    /*!
                     * @brief This function moves the value in member enum_flags
                     * @param _enum_flags New value to be moved in member enum_flags
                     */
                    eProsima_user_DllExport void enum_flags(
                            eprosima::fastdds::dds::xtypes::EnumTypeFlag&& _enum_flags);

                    /*!
                     * @brief This function returns a constant reference to member enum_flags
                     * @return Constant reference to member enum_flags
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::EnumTypeFlag& enum_flags() const;

                    /*!
                     * @brief This function returns a reference to member enum_flags
                     * @return Reference to member enum_flags
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::EnumTypeFlag& enum_flags();


                    /*!
                     * @brief This function copies the value in member header
                     * @param _header New value to be copied in member header
                     */
                    eProsima_user_DllExport void header(
                            const eprosima::fastdds::dds::xtypes::MinimalEnumeratedHeader& _header);

                    /*!
                     * @brief This function moves the value in member header
                     * @param _header New value to be moved in member header
                     */
                    eProsima_user_DllExport void header(
                            eprosima::fastdds::dds::xtypes::MinimalEnumeratedHeader&& _header);

                    /*!
                     * @brief This function returns a constant reference to member header
                     * @return Constant reference to member header
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalEnumeratedHeader& header() const;

                    /*!
                     * @brief This function returns a reference to member header
                     * @return Reference to member header
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalEnumeratedHeader& header();


                    /*!
                     * @brief This function copies the value in member literal_seq
                     * @param _literal_seq New value to be copied in member literal_seq
                     */
                    eProsima_user_DllExport void literal_seq(
                            const eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteralSeq& _literal_seq);

                    /*!
                     * @brief This function moves the value in member literal_seq
                     * @param _literal_seq New value to be moved in member literal_seq
                     */
                    eProsima_user_DllExport void literal_seq(
                            eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteralSeq&& _literal_seq);

                    /*!
                     * @brief This function returns a constant reference to member literal_seq
                     * @return Constant reference to member literal_seq
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteralSeq& literal_seq() const;

                    /*!
                     * @brief This function returns a reference to member literal_seq
                     * @return Reference to member literal_seq
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteralSeq& literal_seq();

                private:

                    eprosima::fastdds::dds::xtypes::EnumTypeFlag m_enum_flags{0};
                    eprosima::fastdds::dds::xtypes::MinimalEnumeratedHeader m_header;
                    eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteralSeq m_literal_seq;

                };
                /*!
                 * @brief This class represents the structure CommonBitflag defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CommonBitflag
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CommonBitflag();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CommonBitflag();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonBitflag that will be copied.
                     */
                    eProsima_user_DllExport CommonBitflag(
                            const CommonBitflag& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonBitflag that will be copied.
                     */
                    eProsima_user_DllExport CommonBitflag(
                            CommonBitflag&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonBitflag that will be copied.
                     */
                    eProsima_user_DllExport CommonBitflag& operator =(
                            const CommonBitflag& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonBitflag that will be copied.
                     */
                    eProsima_user_DllExport CommonBitflag& operator =(
                            CommonBitflag&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CommonBitflag object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CommonBitflag& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CommonBitflag object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CommonBitflag& x) const;

                    /*!
                     * @brief This function sets a value in member position
                     * @param _position New value for member position
                     */
                    eProsima_user_DllExport void position(
                            uint16_t _position);

                    /*!
                     * @brief This function returns the value of member position
                     * @return Value of member position
                     */
                    eProsima_user_DllExport uint16_t position() const;

                    /*!
                     * @brief This function returns a reference to member position
                     * @return Reference to member position
                     */
                    eProsima_user_DllExport uint16_t& position();


                    /*!
                     * @brief This function copies the value in member flags
                     * @param _flags New value to be copied in member flags
                     */
                    eProsima_user_DllExport void flags(
                            const eprosima::fastdds::dds::xtypes::BitflagFlag& _flags);

                    /*!
                     * @brief This function moves the value in member flags
                     * @param _flags New value to be moved in member flags
                     */
                    eProsima_user_DllExport void flags(
                            eprosima::fastdds::dds::xtypes::BitflagFlag&& _flags);

                    /*!
                     * @brief This function returns a constant reference to member flags
                     * @return Constant reference to member flags
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::BitflagFlag& flags() const;

                    /*!
                     * @brief This function returns a reference to member flags
                     * @return Reference to member flags
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::BitflagFlag& flags();

                private:

                    uint16_t m_position{0};
                    eprosima::fastdds::dds::xtypes::BitflagFlag m_flags{0};

                };
                /*!
                 * @brief This class represents the structure CompleteBitflag defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteBitflag
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CompleteBitflag();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CompleteBitflag();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteBitflag that will be copied.
                     */
                    eProsima_user_DllExport CompleteBitflag(
                            const CompleteBitflag& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteBitflag that will be copied.
                     */
                    eProsima_user_DllExport CompleteBitflag(
                            CompleteBitflag&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteBitflag that will be copied.
                     */
                    eProsima_user_DllExport CompleteBitflag& operator =(
                            const CompleteBitflag& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteBitflag that will be copied.
                     */
                    eProsima_user_DllExport CompleteBitflag& operator =(
                            CompleteBitflag&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteBitflag object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CompleteBitflag& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteBitflag object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CompleteBitflag& x) const;

                    /*!
                     * @brief This function copies the value in member common
                     * @param _common New value to be copied in member common
                     */
                    eProsima_user_DllExport void common(
                            const eprosima::fastdds::dds::xtypes::CommonBitflag& _common);

                    /*!
                     * @brief This function moves the value in member common
                     * @param _common New value to be moved in member common
                     */
                    eProsima_user_DllExport void common(
                            eprosima::fastdds::dds::xtypes::CommonBitflag&& _common);

                    /*!
                     * @brief This function returns a constant reference to member common
                     * @return Constant reference to member common
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CommonBitflag& common() const;

                    /*!
                     * @brief This function returns a reference to member common
                     * @return Reference to member common
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CommonBitflag& common();


                    /*!
                     * @brief This function copies the value in member detail
                     * @param _detail New value to be copied in member detail
                     */
                    eProsima_user_DllExport void detail(
                            const eprosima::fastdds::dds::xtypes::CompleteMemberDetail& _detail);

                    /*!
                     * @brief This function moves the value in member detail
                     * @param _detail New value to be moved in member detail
                     */
                    eProsima_user_DllExport void detail(
                            eprosima::fastdds::dds::xtypes::CompleteMemberDetail&& _detail);

                    /*!
                     * @brief This function returns a constant reference to member detail
                     * @return Constant reference to member detail
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteMemberDetail& detail() const;

                    /*!
                     * @brief This function returns a reference to member detail
                     * @return Reference to member detail
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteMemberDetail& detail();

                private:

                    eprosima::fastdds::dds::xtypes::CommonBitflag m_common;
                    eprosima::fastdds::dds::xtypes::CompleteMemberDetail m_detail;

                };
                typedef std::vector<eprosima::fastdds::dds::xtypes::CompleteBitflag> CompleteBitflagSeq;

                /*!
                 * @brief This class represents the structure MinimalBitflag defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalBitflag
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport MinimalBitflag();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~MinimalBitflag();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalBitflag that will be copied.
                     */
                    eProsima_user_DllExport MinimalBitflag(
                            const MinimalBitflag& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalBitflag that will be copied.
                     */
                    eProsima_user_DllExport MinimalBitflag(
                            MinimalBitflag&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalBitflag that will be copied.
                     */
                    eProsima_user_DllExport MinimalBitflag& operator =(
                            const MinimalBitflag& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalBitflag that will be copied.
                     */
                    eProsima_user_DllExport MinimalBitflag& operator =(
                            MinimalBitflag&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalBitflag object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const MinimalBitflag& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalBitflag object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const MinimalBitflag& x) const;

                    /*!
                     * @brief This function copies the value in member common
                     * @param _common New value to be copied in member common
                     */
                    eProsima_user_DllExport void common(
                            const eprosima::fastdds::dds::xtypes::CommonBitflag& _common);

                    /*!
                     * @brief This function moves the value in member common
                     * @param _common New value to be moved in member common
                     */
                    eProsima_user_DllExport void common(
                            eprosima::fastdds::dds::xtypes::CommonBitflag&& _common);

                    /*!
                     * @brief This function returns a constant reference to member common
                     * @return Constant reference to member common
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CommonBitflag& common() const;

                    /*!
                     * @brief This function returns a reference to member common
                     * @return Reference to member common
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CommonBitflag& common();


                    /*!
                     * @brief This function copies the value in member detail
                     * @param _detail New value to be copied in member detail
                     */
                    eProsima_user_DllExport void detail(
                            const eprosima::fastdds::dds::xtypes::MinimalMemberDetail& _detail);

                    /*!
                     * @brief This function moves the value in member detail
                     * @param _detail New value to be moved in member detail
                     */
                    eProsima_user_DllExport void detail(
                            eprosima::fastdds::dds::xtypes::MinimalMemberDetail&& _detail);

                    /*!
                     * @brief This function returns a constant reference to member detail
                     * @return Constant reference to member detail
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalMemberDetail& detail() const;

                    /*!
                     * @brief This function returns a reference to member detail
                     * @return Reference to member detail
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalMemberDetail& detail();

                private:

                    eprosima::fastdds::dds::xtypes::CommonBitflag m_common;
                    eprosima::fastdds::dds::xtypes::MinimalMemberDetail m_detail;

                };
                typedef std::vector<eprosima::fastdds::dds::xtypes::MinimalBitflag> MinimalBitflagSeq;

                /*!
                 * @brief This class represents the structure CommonBitmaskHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CommonBitmaskHeader
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CommonBitmaskHeader();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CommonBitmaskHeader();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonBitmaskHeader that will be copied.
                     */
                    eProsima_user_DllExport CommonBitmaskHeader(
                            const CommonBitmaskHeader& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonBitmaskHeader that will be copied.
                     */
                    eProsima_user_DllExport CommonBitmaskHeader(
                            CommonBitmaskHeader&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonBitmaskHeader that will be copied.
                     */
                    eProsima_user_DllExport CommonBitmaskHeader& operator =(
                            const CommonBitmaskHeader& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonBitmaskHeader that will be copied.
                     */
                    eProsima_user_DllExport CommonBitmaskHeader& operator =(
                            CommonBitmaskHeader&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CommonBitmaskHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CommonBitmaskHeader& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CommonBitmaskHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CommonBitmaskHeader& x) const;

                    /*!
                     * @brief This function sets a value in member bit_bound
                     * @param _bit_bound New value for member bit_bound
                     */
                    eProsima_user_DllExport void bit_bound(
                            eprosima::fastdds::dds::xtypes::BitBound _bit_bound);

                    /*!
                     * @brief This function returns the value of member bit_bound
                     * @return Value of member bit_bound
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::BitBound bit_bound() const;

                    /*!
                     * @brief This function returns a reference to member bit_bound
                     * @return Reference to member bit_bound
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::BitBound& bit_bound();

                private:

                    eprosima::fastdds::dds::xtypes::BitBound m_bit_bound{0};

                };
                typedef eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader CompleteBitmaskHeader;

                typedef eprosima::fastdds::dds::xtypes::MinimalEnumeratedHeader MinimalBitmaskHeader;

                /*!
                 * @brief This class represents the structure CompleteBitmaskType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteBitmaskType
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CompleteBitmaskType();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CompleteBitmaskType();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteBitmaskType that will be copied.
                     */
                    eProsima_user_DllExport CompleteBitmaskType(
                            const CompleteBitmaskType& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteBitmaskType that will be copied.
                     */
                    eProsima_user_DllExport CompleteBitmaskType(
                            CompleteBitmaskType&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteBitmaskType that will be copied.
                     */
                    eProsima_user_DllExport CompleteBitmaskType& operator =(
                            const CompleteBitmaskType& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteBitmaskType that will be copied.
                     */
                    eProsima_user_DllExport CompleteBitmaskType& operator =(
                            CompleteBitmaskType&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteBitmaskType object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CompleteBitmaskType& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteBitmaskType object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CompleteBitmaskType& x) const;

                    /*!
                     * @brief This function copies the value in member bitmask_flags
                     * @param _bitmask_flags New value to be copied in member bitmask_flags
                     */
                    eProsima_user_DllExport void bitmask_flags(
                            const eprosima::fastdds::dds::xtypes::BitmaskTypeFlag& _bitmask_flags);

                    /*!
                     * @brief This function moves the value in member bitmask_flags
                     * @param _bitmask_flags New value to be moved in member bitmask_flags
                     */
                    eProsima_user_DllExport void bitmask_flags(
                            eprosima::fastdds::dds::xtypes::BitmaskTypeFlag&& _bitmask_flags);

                    /*!
                     * @brief This function returns a constant reference to member bitmask_flags
                     * @return Constant reference to member bitmask_flags
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::BitmaskTypeFlag& bitmask_flags() const;

                    /*!
                     * @brief This function returns a reference to member bitmask_flags
                     * @return Reference to member bitmask_flags
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::BitmaskTypeFlag& bitmask_flags();


                    /*!
                     * @brief This function copies the value in member header
                     * @param _header New value to be copied in member header
                     */
                    eProsima_user_DllExport void header(
                            const eprosima::fastdds::dds::xtypes::CompleteBitmaskHeader& _header);

                    /*!
                     * @brief This function moves the value in member header
                     * @param _header New value to be moved in member header
                     */
                    eProsima_user_DllExport void header(
                            eprosima::fastdds::dds::xtypes::CompleteBitmaskHeader&& _header);

                    /*!
                     * @brief This function returns a constant reference to member header
                     * @return Constant reference to member header
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteBitmaskHeader& header() const;

                    /*!
                     * @brief This function returns a reference to member header
                     * @return Reference to member header
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteBitmaskHeader& header();


                    /*!
                     * @brief This function copies the value in member flag_seq
                     * @param _flag_seq New value to be copied in member flag_seq
                     */
                    eProsima_user_DllExport void flag_seq(
                            const eprosima::fastdds::dds::xtypes::CompleteBitflagSeq& _flag_seq);

                    /*!
                     * @brief This function moves the value in member flag_seq
                     * @param _flag_seq New value to be moved in member flag_seq
                     */
                    eProsima_user_DllExport void flag_seq(
                            eprosima::fastdds::dds::xtypes::CompleteBitflagSeq&& _flag_seq);

                    /*!
                     * @brief This function returns a constant reference to member flag_seq
                     * @return Constant reference to member flag_seq
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteBitflagSeq& flag_seq() const;

                    /*!
                     * @brief This function returns a reference to member flag_seq
                     * @return Reference to member flag_seq
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteBitflagSeq& flag_seq();

                private:

                    eprosima::fastdds::dds::xtypes::BitmaskTypeFlag m_bitmask_flags{0};
                    eprosima::fastdds::dds::xtypes::CompleteBitmaskHeader m_header;
                    eprosima::fastdds::dds::xtypes::CompleteBitflagSeq m_flag_seq;

                };
                /*!
                 * @brief This class represents the structure MinimalBitmaskType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalBitmaskType
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport MinimalBitmaskType();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~MinimalBitmaskType();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalBitmaskType that will be copied.
                     */
                    eProsima_user_DllExport MinimalBitmaskType(
                            const MinimalBitmaskType& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalBitmaskType that will be copied.
                     */
                    eProsima_user_DllExport MinimalBitmaskType(
                            MinimalBitmaskType&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalBitmaskType that will be copied.
                     */
                    eProsima_user_DllExport MinimalBitmaskType& operator =(
                            const MinimalBitmaskType& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalBitmaskType that will be copied.
                     */
                    eProsima_user_DllExport MinimalBitmaskType& operator =(
                            MinimalBitmaskType&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalBitmaskType object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const MinimalBitmaskType& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalBitmaskType object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const MinimalBitmaskType& x) const;

                    /*!
                     * @brief This function copies the value in member bitmask_flags
                     * @param _bitmask_flags New value to be copied in member bitmask_flags
                     */
                    eProsima_user_DllExport void bitmask_flags(
                            const eprosima::fastdds::dds::xtypes::BitmaskTypeFlag& _bitmask_flags);

                    /*!
                     * @brief This function moves the value in member bitmask_flags
                     * @param _bitmask_flags New value to be moved in member bitmask_flags
                     */
                    eProsima_user_DllExport void bitmask_flags(
                            eprosima::fastdds::dds::xtypes::BitmaskTypeFlag&& _bitmask_flags);

                    /*!
                     * @brief This function returns a constant reference to member bitmask_flags
                     * @return Constant reference to member bitmask_flags
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::BitmaskTypeFlag& bitmask_flags() const;

                    /*!
                     * @brief This function returns a reference to member bitmask_flags
                     * @return Reference to member bitmask_flags
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::BitmaskTypeFlag& bitmask_flags();


                    /*!
                     * @brief This function copies the value in member header
                     * @param _header New value to be copied in member header
                     */
                    eProsima_user_DllExport void header(
                            const eprosima::fastdds::dds::xtypes::MinimalBitmaskHeader& _header);

                    /*!
                     * @brief This function moves the value in member header
                     * @param _header New value to be moved in member header
                     */
                    eProsima_user_DllExport void header(
                            eprosima::fastdds::dds::xtypes::MinimalBitmaskHeader&& _header);

                    /*!
                     * @brief This function returns a constant reference to member header
                     * @return Constant reference to member header
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalBitmaskHeader& header() const;

                    /*!
                     * @brief This function returns a reference to member header
                     * @return Reference to member header
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalBitmaskHeader& header();


                    /*!
                     * @brief This function copies the value in member flag_seq
                     * @param _flag_seq New value to be copied in member flag_seq
                     */
                    eProsima_user_DllExport void flag_seq(
                            const eprosima::fastdds::dds::xtypes::MinimalBitflagSeq& _flag_seq);

                    /*!
                     * @brief This function moves the value in member flag_seq
                     * @param _flag_seq New value to be moved in member flag_seq
                     */
                    eProsima_user_DllExport void flag_seq(
                            eprosima::fastdds::dds::xtypes::MinimalBitflagSeq&& _flag_seq);

                    /*!
                     * @brief This function returns a constant reference to member flag_seq
                     * @return Constant reference to member flag_seq
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalBitflagSeq& flag_seq() const;

                    /*!
                     * @brief This function returns a reference to member flag_seq
                     * @return Reference to member flag_seq
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalBitflagSeq& flag_seq();

                private:

                    eprosima::fastdds::dds::xtypes::BitmaskTypeFlag m_bitmask_flags{0};
                    eprosima::fastdds::dds::xtypes::MinimalBitmaskHeader m_header;
                    eprosima::fastdds::dds::xtypes::MinimalBitflagSeq m_flag_seq;

                };
                /*!
                 * @brief This class represents the structure CommonBitfield defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CommonBitfield
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CommonBitfield();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CommonBitfield();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonBitfield that will be copied.
                     */
                    eProsima_user_DllExport CommonBitfield(
                            const CommonBitfield& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonBitfield that will be copied.
                     */
                    eProsima_user_DllExport CommonBitfield(
                            CommonBitfield&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonBitfield that will be copied.
                     */
                    eProsima_user_DllExport CommonBitfield& operator =(
                            const CommonBitfield& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CommonBitfield that will be copied.
                     */
                    eProsima_user_DllExport CommonBitfield& operator =(
                            CommonBitfield&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CommonBitfield object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CommonBitfield& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CommonBitfield object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CommonBitfield& x) const;

                    /*!
                     * @brief This function sets a value in member position
                     * @param _position New value for member position
                     */
                    eProsima_user_DllExport void position(
                            uint16_t _position);

                    /*!
                     * @brief This function returns the value of member position
                     * @return Value of member position
                     */
                    eProsima_user_DllExport uint16_t position() const;

                    /*!
                     * @brief This function returns a reference to member position
                     * @return Reference to member position
                     */
                    eProsima_user_DllExport uint16_t& position();


                    /*!
                     * @brief This function copies the value in member flags
                     * @param _flags New value to be copied in member flags
                     */
                    eProsima_user_DllExport void flags(
                            const eprosima::fastdds::dds::xtypes::BitsetMemberFlag& _flags);

                    /*!
                     * @brief This function moves the value in member flags
                     * @param _flags New value to be moved in member flags
                     */
                    eProsima_user_DllExport void flags(
                            eprosima::fastdds::dds::xtypes::BitsetMemberFlag&& _flags);

                    /*!
                     * @brief This function returns a constant reference to member flags
                     * @return Constant reference to member flags
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::BitsetMemberFlag& flags() const;

                    /*!
                     * @brief This function returns a reference to member flags
                     * @return Reference to member flags
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::BitsetMemberFlag& flags();


                    /*!
                     * @brief This function sets a value in member bitcount
                     * @param _bitcount New value for member bitcount
                     */
                    eProsima_user_DllExport void bitcount(
                            uint8_t _bitcount);

                    /*!
                     * @brief This function returns the value of member bitcount
                     * @return Value of member bitcount
                     */
                    eProsima_user_DllExport uint8_t bitcount() const;

                    /*!
                     * @brief This function returns a reference to member bitcount
                     * @return Reference to member bitcount
                     */
                    eProsima_user_DllExport uint8_t& bitcount();


                    /*!
                     * @brief This function sets a value in member holder_type
                     * @param _holder_type New value for member holder_type
                     */
                    eProsima_user_DllExport void holder_type(
                            eprosima::fastdds::dds::xtypes::TypeKind _holder_type);

                    /*!
                     * @brief This function returns the value of member holder_type
                     * @return Value of member holder_type
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::TypeKind holder_type() const;

                    /*!
                     * @brief This function returns a reference to member holder_type
                     * @return Reference to member holder_type
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::TypeKind& holder_type();

                private:

                    uint16_t m_position{0};
                    eprosima::fastdds::dds::xtypes::BitsetMemberFlag m_flags{0};
                    uint8_t m_bitcount{0};
                    eprosima::fastdds::dds::xtypes::TypeKind m_holder_type{0};

                };
                /*!
                 * @brief This class represents the structure CompleteBitfield defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteBitfield
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CompleteBitfield();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CompleteBitfield();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteBitfield that will be copied.
                     */
                    eProsima_user_DllExport CompleteBitfield(
                            const CompleteBitfield& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteBitfield that will be copied.
                     */
                    eProsima_user_DllExport CompleteBitfield(
                            CompleteBitfield&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteBitfield that will be copied.
                     */
                    eProsima_user_DllExport CompleteBitfield& operator =(
                            const CompleteBitfield& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteBitfield that will be copied.
                     */
                    eProsima_user_DllExport CompleteBitfield& operator =(
                            CompleteBitfield&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteBitfield object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CompleteBitfield& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteBitfield object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CompleteBitfield& x) const;

                    /*!
                     * @brief This function copies the value in member common
                     * @param _common New value to be copied in member common
                     */
                    eProsima_user_DllExport void common(
                            const eprosima::fastdds::dds::xtypes::CommonBitfield& _common);

                    /*!
                     * @brief This function moves the value in member common
                     * @param _common New value to be moved in member common
                     */
                    eProsima_user_DllExport void common(
                            eprosima::fastdds::dds::xtypes::CommonBitfield&& _common);

                    /*!
                     * @brief This function returns a constant reference to member common
                     * @return Constant reference to member common
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CommonBitfield& common() const;

                    /*!
                     * @brief This function returns a reference to member common
                     * @return Reference to member common
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CommonBitfield& common();


                    /*!
                     * @brief This function copies the value in member detail
                     * @param _detail New value to be copied in member detail
                     */
                    eProsima_user_DllExport void detail(
                            const eprosima::fastdds::dds::xtypes::CompleteMemberDetail& _detail);

                    /*!
                     * @brief This function moves the value in member detail
                     * @param _detail New value to be moved in member detail
                     */
                    eProsima_user_DllExport void detail(
                            eprosima::fastdds::dds::xtypes::CompleteMemberDetail&& _detail);

                    /*!
                     * @brief This function returns a constant reference to member detail
                     * @return Constant reference to member detail
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteMemberDetail& detail() const;

                    /*!
                     * @brief This function returns a reference to member detail
                     * @return Reference to member detail
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteMemberDetail& detail();

                private:

                    eprosima::fastdds::dds::xtypes::CommonBitfield m_common;
                    eprosima::fastdds::dds::xtypes::CompleteMemberDetail m_detail;

                };
                typedef std::vector<eprosima::fastdds::dds::xtypes::CompleteBitfield> CompleteBitfieldSeq;

                /*!
                 * @brief This class represents the structure MinimalBitfield defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalBitfield
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport MinimalBitfield();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~MinimalBitfield();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalBitfield that will be copied.
                     */
                    eProsima_user_DllExport MinimalBitfield(
                            const MinimalBitfield& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalBitfield that will be copied.
                     */
                    eProsima_user_DllExport MinimalBitfield(
                            MinimalBitfield&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalBitfield that will be copied.
                     */
                    eProsima_user_DllExport MinimalBitfield& operator =(
                            const MinimalBitfield& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalBitfield that will be copied.
                     */
                    eProsima_user_DllExport MinimalBitfield& operator =(
                            MinimalBitfield&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalBitfield object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const MinimalBitfield& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalBitfield object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const MinimalBitfield& x) const;

                    /*!
                     * @brief This function copies the value in member common
                     * @param _common New value to be copied in member common
                     */
                    eProsima_user_DllExport void common(
                            const eprosima::fastdds::dds::xtypes::CommonBitfield& _common);

                    /*!
                     * @brief This function moves the value in member common
                     * @param _common New value to be moved in member common
                     */
                    eProsima_user_DllExport void common(
                            eprosima::fastdds::dds::xtypes::CommonBitfield&& _common);

                    /*!
                     * @brief This function returns a constant reference to member common
                     * @return Constant reference to member common
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CommonBitfield& common() const;

                    /*!
                     * @brief This function returns a reference to member common
                     * @return Reference to member common
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CommonBitfield& common();


                    /*!
                     * @brief This function copies the value in member name_hash
                     * @param _name_hash New value to be copied in member name_hash
                     */
                    eProsima_user_DllExport void name_hash(
                            const eprosima::fastdds::dds::xtypes::NameHash& _name_hash);

                    /*!
                     * @brief This function moves the value in member name_hash
                     * @param _name_hash New value to be moved in member name_hash
                     */
                    eProsima_user_DllExport void name_hash(
                            eprosima::fastdds::dds::xtypes::NameHash&& _name_hash);

                    /*!
                     * @brief This function returns a constant reference to member name_hash
                     * @return Constant reference to member name_hash
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::NameHash& name_hash() const;

                    /*!
                     * @brief This function returns a reference to member name_hash
                     * @return Reference to member name_hash
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::NameHash& name_hash();

                private:

                    eprosima::fastdds::dds::xtypes::CommonBitfield m_common;
                    eprosima::fastdds::dds::xtypes::NameHash m_name_hash{0};

                };
                typedef std::vector<eprosima::fastdds::dds::xtypes::MinimalBitfield> MinimalBitfieldSeq;

                /*!
                 * @brief This class represents the structure CompleteBitsetHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteBitsetHeader
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CompleteBitsetHeader();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CompleteBitsetHeader();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteBitsetHeader that will be copied.
                     */
                    eProsima_user_DllExport CompleteBitsetHeader(
                            const CompleteBitsetHeader& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteBitsetHeader that will be copied.
                     */
                    eProsima_user_DllExport CompleteBitsetHeader(
                            CompleteBitsetHeader&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteBitsetHeader that will be copied.
                     */
                    eProsima_user_DllExport CompleteBitsetHeader& operator =(
                            const CompleteBitsetHeader& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteBitsetHeader that will be copied.
                     */
                    eProsima_user_DllExport CompleteBitsetHeader& operator =(
                            CompleteBitsetHeader&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteBitsetHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CompleteBitsetHeader& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteBitsetHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CompleteBitsetHeader& x) const;

                    /*!
                     * @brief This function copies the value in member detail
                     * @param _detail New value to be copied in member detail
                     */
                    eProsima_user_DllExport void detail(
                            const eprosima::fastdds::dds::xtypes::CompleteTypeDetail& _detail);

                    /*!
                     * @brief This function moves the value in member detail
                     * @param _detail New value to be moved in member detail
                     */
                    eProsima_user_DllExport void detail(
                            eprosima::fastdds::dds::xtypes::CompleteTypeDetail&& _detail);

                    /*!
                     * @brief This function returns a constant reference to member detail
                     * @return Constant reference to member detail
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteTypeDetail& detail() const;

                    /*!
                     * @brief This function returns a reference to member detail
                     * @return Reference to member detail
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteTypeDetail& detail();

                private:

                    eprosima::fastdds::dds::xtypes::CompleteTypeDetail m_detail;

                };
                /*!
                 * @brief This class represents the structure MinimalBitsetHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalBitsetHeader
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport MinimalBitsetHeader();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~MinimalBitsetHeader();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalBitsetHeader that will be copied.
                     */
                    eProsima_user_DllExport MinimalBitsetHeader(
                            const MinimalBitsetHeader& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalBitsetHeader that will be copied.
                     */
                    eProsima_user_DllExport MinimalBitsetHeader(
                            MinimalBitsetHeader&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalBitsetHeader that will be copied.
                     */
                    eProsima_user_DllExport MinimalBitsetHeader& operator =(
                            const MinimalBitsetHeader& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalBitsetHeader that will be copied.
                     */
                    eProsima_user_DllExport MinimalBitsetHeader& operator =(
                            MinimalBitsetHeader&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalBitsetHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const MinimalBitsetHeader& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalBitsetHeader object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const MinimalBitsetHeader& x) const;

                private:


                };
                /*!
                 * @brief This class represents the structure CompleteBitsetType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteBitsetType
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CompleteBitsetType();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CompleteBitsetType();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteBitsetType that will be copied.
                     */
                    eProsima_user_DllExport CompleteBitsetType(
                            const CompleteBitsetType& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteBitsetType that will be copied.
                     */
                    eProsima_user_DllExport CompleteBitsetType(
                            CompleteBitsetType&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteBitsetType that will be copied.
                     */
                    eProsima_user_DllExport CompleteBitsetType& operator =(
                            const CompleteBitsetType& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteBitsetType that will be copied.
                     */
                    eProsima_user_DllExport CompleteBitsetType& operator =(
                            CompleteBitsetType&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteBitsetType object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CompleteBitsetType& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteBitsetType object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CompleteBitsetType& x) const;

                    /*!
                     * @brief This function copies the value in member bitset_flags
                     * @param _bitset_flags New value to be copied in member bitset_flags
                     */
                    eProsima_user_DllExport void bitset_flags(
                            const eprosima::fastdds::dds::xtypes::BitsetTypeFlag& _bitset_flags);

                    /*!
                     * @brief This function moves the value in member bitset_flags
                     * @param _bitset_flags New value to be moved in member bitset_flags
                     */
                    eProsima_user_DllExport void bitset_flags(
                            eprosima::fastdds::dds::xtypes::BitsetTypeFlag&& _bitset_flags);

                    /*!
                     * @brief This function returns a constant reference to member bitset_flags
                     * @return Constant reference to member bitset_flags
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::BitsetTypeFlag& bitset_flags() const;

                    /*!
                     * @brief This function returns a reference to member bitset_flags
                     * @return Reference to member bitset_flags
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::BitsetTypeFlag& bitset_flags();


                    /*!
                     * @brief This function copies the value in member header
                     * @param _header New value to be copied in member header
                     */
                    eProsima_user_DllExport void header(
                            const eprosima::fastdds::dds::xtypes::CompleteBitsetHeader& _header);

                    /*!
                     * @brief This function moves the value in member header
                     * @param _header New value to be moved in member header
                     */
                    eProsima_user_DllExport void header(
                            eprosima::fastdds::dds::xtypes::CompleteBitsetHeader&& _header);

                    /*!
                     * @brief This function returns a constant reference to member header
                     * @return Constant reference to member header
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteBitsetHeader& header() const;

                    /*!
                     * @brief This function returns a reference to member header
                     * @return Reference to member header
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteBitsetHeader& header();


                    /*!
                     * @brief This function copies the value in member field_seq
                     * @param _field_seq New value to be copied in member field_seq
                     */
                    eProsima_user_DllExport void field_seq(
                            const eprosima::fastdds::dds::xtypes::CompleteBitfieldSeq& _field_seq);

                    /*!
                     * @brief This function moves the value in member field_seq
                     * @param _field_seq New value to be moved in member field_seq
                     */
                    eProsima_user_DllExport void field_seq(
                            eprosima::fastdds::dds::xtypes::CompleteBitfieldSeq&& _field_seq);

                    /*!
                     * @brief This function returns a constant reference to member field_seq
                     * @return Constant reference to member field_seq
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteBitfieldSeq& field_seq() const;

                    /*!
                     * @brief This function returns a reference to member field_seq
                     * @return Reference to member field_seq
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteBitfieldSeq& field_seq();

                private:

                    eprosima::fastdds::dds::xtypes::BitsetTypeFlag m_bitset_flags{0};
                    eprosima::fastdds::dds::xtypes::CompleteBitsetHeader m_header;
                    eprosima::fastdds::dds::xtypes::CompleteBitfieldSeq m_field_seq;

                };
                /*!
                 * @brief This class represents the structure MinimalBitsetType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalBitsetType
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport MinimalBitsetType();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~MinimalBitsetType();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalBitsetType that will be copied.
                     */
                    eProsima_user_DllExport MinimalBitsetType(
                            const MinimalBitsetType& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalBitsetType that will be copied.
                     */
                    eProsima_user_DllExport MinimalBitsetType(
                            MinimalBitsetType&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalBitsetType that will be copied.
                     */
                    eProsima_user_DllExport MinimalBitsetType& operator =(
                            const MinimalBitsetType& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalBitsetType that will be copied.
                     */
                    eProsima_user_DllExport MinimalBitsetType& operator =(
                            MinimalBitsetType&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalBitsetType object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const MinimalBitsetType& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalBitsetType object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const MinimalBitsetType& x) const;

                    /*!
                     * @brief This function copies the value in member bitset_flags
                     * @param _bitset_flags New value to be copied in member bitset_flags
                     */
                    eProsima_user_DllExport void bitset_flags(
                            const eprosima::fastdds::dds::xtypes::BitsetTypeFlag& _bitset_flags);

                    /*!
                     * @brief This function moves the value in member bitset_flags
                     * @param _bitset_flags New value to be moved in member bitset_flags
                     */
                    eProsima_user_DllExport void bitset_flags(
                            eprosima::fastdds::dds::xtypes::BitsetTypeFlag&& _bitset_flags);

                    /*!
                     * @brief This function returns a constant reference to member bitset_flags
                     * @return Constant reference to member bitset_flags
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::BitsetTypeFlag& bitset_flags() const;

                    /*!
                     * @brief This function returns a reference to member bitset_flags
                     * @return Reference to member bitset_flags
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::BitsetTypeFlag& bitset_flags();


                    /*!
                     * @brief This function copies the value in member header
                     * @param _header New value to be copied in member header
                     */
                    eProsima_user_DllExport void header(
                            const eprosima::fastdds::dds::xtypes::MinimalBitsetHeader& _header);

                    /*!
                     * @brief This function moves the value in member header
                     * @param _header New value to be moved in member header
                     */
                    eProsima_user_DllExport void header(
                            eprosima::fastdds::dds::xtypes::MinimalBitsetHeader&& _header);

                    /*!
                     * @brief This function returns a constant reference to member header
                     * @return Constant reference to member header
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalBitsetHeader& header() const;

                    /*!
                     * @brief This function returns a reference to member header
                     * @return Reference to member header
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalBitsetHeader& header();


                    /*!
                     * @brief This function copies the value in member field_seq
                     * @param _field_seq New value to be copied in member field_seq
                     */
                    eProsima_user_DllExport void field_seq(
                            const eprosima::fastdds::dds::xtypes::MinimalBitfieldSeq& _field_seq);

                    /*!
                     * @brief This function moves the value in member field_seq
                     * @param _field_seq New value to be moved in member field_seq
                     */
                    eProsima_user_DllExport void field_seq(
                            eprosima::fastdds::dds::xtypes::MinimalBitfieldSeq&& _field_seq);

                    /*!
                     * @brief This function returns a constant reference to member field_seq
                     * @return Constant reference to member field_seq
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalBitfieldSeq& field_seq() const;

                    /*!
                     * @brief This function returns a reference to member field_seq
                     * @return Reference to member field_seq
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalBitfieldSeq& field_seq();

                private:

                    eprosima::fastdds::dds::xtypes::BitsetTypeFlag m_bitset_flags{0};
                    eprosima::fastdds::dds::xtypes::MinimalBitsetHeader m_header;
                    eprosima::fastdds::dds::xtypes::MinimalBitfieldSeq m_field_seq;

                };
                /*!
                 * @brief This class represents the structure CompleteExtendedType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteExtendedType
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CompleteExtendedType();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CompleteExtendedType();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteExtendedType that will be copied.
                     */
                    eProsima_user_DllExport CompleteExtendedType(
                            const CompleteExtendedType& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteExtendedType that will be copied.
                     */
                    eProsima_user_DllExport CompleteExtendedType(
                            CompleteExtendedType&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteExtendedType that will be copied.
                     */
                    eProsima_user_DllExport CompleteExtendedType& operator =(
                            const CompleteExtendedType& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteExtendedType that will be copied.
                     */
                    eProsima_user_DllExport CompleteExtendedType& operator =(
                            CompleteExtendedType&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteExtendedType object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CompleteExtendedType& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteExtendedType object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CompleteExtendedType& x) const;

                private:


                };
                /*!
                 * @brief This class represents the union CompleteTypeObject defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteTypeObject
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CompleteTypeObject();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CompleteTypeObject();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteTypeObject that will be copied.
                     */
                    eProsima_user_DllExport CompleteTypeObject(
                            const CompleteTypeObject& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteTypeObject that will be copied.
                     */
                    eProsima_user_DllExport CompleteTypeObject(
                            CompleteTypeObject&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteTypeObject that will be copied.
                     */
                    eProsima_user_DllExport CompleteTypeObject& operator =(
                            const CompleteTypeObject& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::CompleteTypeObject that will be copied.
                     */
                    eProsima_user_DllExport CompleteTypeObject& operator =(
                            CompleteTypeObject&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteTypeObject object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const CompleteTypeObject& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::CompleteTypeObject object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const CompleteTypeObject& x) const;

                    /*!
                     * @brief This function sets the discriminator value.
                     * @param __d New value for the discriminator.
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
                     */
                    eProsima_user_DllExport void _d(
                            uint8_t __d);

                    /*!
                     * @brief This function returns the value of the discriminator.
                     * @return Value of the discriminator
                     */
                    eProsima_user_DllExport uint8_t _d() const;

                    /*!
                     * @brief This function returns a reference to the discriminator.
                     * @return Reference to the discriminator.
                     */
                    eProsima_user_DllExport uint8_t& _d();

                    /*!
                     * @brief This function copies the value in member alias_type
                     * @param _alias_type New value to be copied in member alias_type
                     */
                    eProsima_user_DllExport void alias_type(
                            const eprosima::fastdds::dds::xtypes::CompleteAliasType& _alias_type);

                    /*!
                     * @brief This function moves the value in member alias_type
                     * @param _alias_type New value to be moved in member alias_type
                     */
                    eProsima_user_DllExport void alias_type(
                            eprosima::fastdds::dds::xtypes::CompleteAliasType&& _alias_type);

                    /*!
                     * @brief This function returns a constant reference to member alias_type
                     * @return Constant reference to member alias_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteAliasType& alias_type() const;

                    /*!
                     * @brief This function returns a reference to member alias_type
                     * @return Reference to member alias_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteAliasType& alias_type();


                    /*!
                     * @brief This function copies the value in member annotation_type
                     * @param _annotation_type New value to be copied in member annotation_type
                     */
                    eProsima_user_DllExport void annotation_type(
                            const eprosima::fastdds::dds::xtypes::CompleteAnnotationType& _annotation_type);

                    /*!
                     * @brief This function moves the value in member annotation_type
                     * @param _annotation_type New value to be moved in member annotation_type
                     */
                    eProsima_user_DllExport void annotation_type(
                            eprosima::fastdds::dds::xtypes::CompleteAnnotationType&& _annotation_type);

                    /*!
                     * @brief This function returns a constant reference to member annotation_type
                     * @return Constant reference to member annotation_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteAnnotationType& annotation_type() const;

                    /*!
                     * @brief This function returns a reference to member annotation_type
                     * @return Reference to member annotation_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteAnnotationType& annotation_type();


                    /*!
                     * @brief This function copies the value in member struct_type
                     * @param _struct_type New value to be copied in member struct_type
                     */
                    eProsima_user_DllExport void struct_type(
                            const eprosima::fastdds::dds::xtypes::CompleteStructType& _struct_type);

                    /*!
                     * @brief This function moves the value in member struct_type
                     * @param _struct_type New value to be moved in member struct_type
                     */
                    eProsima_user_DllExport void struct_type(
                            eprosima::fastdds::dds::xtypes::CompleteStructType&& _struct_type);

                    /*!
                     * @brief This function returns a constant reference to member struct_type
                     * @return Constant reference to member struct_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteStructType& struct_type() const;

                    /*!
                     * @brief This function returns a reference to member struct_type
                     * @return Reference to member struct_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteStructType& struct_type();


                    /*!
                     * @brief This function copies the value in member union_type
                     * @param _union_type New value to be copied in member union_type
                     */
                    eProsima_user_DllExport void union_type(
                            const eprosima::fastdds::dds::xtypes::CompleteUnionType& _union_type);

                    /*!
                     * @brief This function moves the value in member union_type
                     * @param _union_type New value to be moved in member union_type
                     */
                    eProsima_user_DllExport void union_type(
                            eprosima::fastdds::dds::xtypes::CompleteUnionType&& _union_type);

                    /*!
                     * @brief This function returns a constant reference to member union_type
                     * @return Constant reference to member union_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteUnionType& union_type() const;

                    /*!
                     * @brief This function returns a reference to member union_type
                     * @return Reference to member union_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteUnionType& union_type();


                    /*!
                     * @brief This function copies the value in member bitset_type
                     * @param _bitset_type New value to be copied in member bitset_type
                     */
                    eProsima_user_DllExport void bitset_type(
                            const eprosima::fastdds::dds::xtypes::CompleteBitsetType& _bitset_type);

                    /*!
                     * @brief This function moves the value in member bitset_type
                     * @param _bitset_type New value to be moved in member bitset_type
                     */
                    eProsima_user_DllExport void bitset_type(
                            eprosima::fastdds::dds::xtypes::CompleteBitsetType&& _bitset_type);

                    /*!
                     * @brief This function returns a constant reference to member bitset_type
                     * @return Constant reference to member bitset_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteBitsetType& bitset_type() const;

                    /*!
                     * @brief This function returns a reference to member bitset_type
                     * @return Reference to member bitset_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteBitsetType& bitset_type();


                    /*!
                     * @brief This function copies the value in member sequence_type
                     * @param _sequence_type New value to be copied in member sequence_type
                     */
                    eProsima_user_DllExport void sequence_type(
                            const eprosima::fastdds::dds::xtypes::CompleteSequenceType& _sequence_type);

                    /*!
                     * @brief This function moves the value in member sequence_type
                     * @param _sequence_type New value to be moved in member sequence_type
                     */
                    eProsima_user_DllExport void sequence_type(
                            eprosima::fastdds::dds::xtypes::CompleteSequenceType&& _sequence_type);

                    /*!
                     * @brief This function returns a constant reference to member sequence_type
                     * @return Constant reference to member sequence_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteSequenceType& sequence_type() const;

                    /*!
                     * @brief This function returns a reference to member sequence_type
                     * @return Reference to member sequence_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteSequenceType& sequence_type();


                    /*!
                     * @brief This function copies the value in member array_type
                     * @param _array_type New value to be copied in member array_type
                     */
                    eProsima_user_DllExport void array_type(
                            const eprosima::fastdds::dds::xtypes::CompleteArrayType& _array_type);

                    /*!
                     * @brief This function moves the value in member array_type
                     * @param _array_type New value to be moved in member array_type
                     */
                    eProsima_user_DllExport void array_type(
                            eprosima::fastdds::dds::xtypes::CompleteArrayType&& _array_type);

                    /*!
                     * @brief This function returns a constant reference to member array_type
                     * @return Constant reference to member array_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteArrayType& array_type() const;

                    /*!
                     * @brief This function returns a reference to member array_type
                     * @return Reference to member array_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteArrayType& array_type();


                    /*!
                     * @brief This function copies the value in member map_type
                     * @param _map_type New value to be copied in member map_type
                     */
                    eProsima_user_DllExport void map_type(
                            const eprosima::fastdds::dds::xtypes::CompleteMapType& _map_type);

                    /*!
                     * @brief This function moves the value in member map_type
                     * @param _map_type New value to be moved in member map_type
                     */
                    eProsima_user_DllExport void map_type(
                            eprosima::fastdds::dds::xtypes::CompleteMapType&& _map_type);

                    /*!
                     * @brief This function returns a constant reference to member map_type
                     * @return Constant reference to member map_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteMapType& map_type() const;

                    /*!
                     * @brief This function returns a reference to member map_type
                     * @return Reference to member map_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteMapType& map_type();


                    /*!
                     * @brief This function copies the value in member enumerated_type
                     * @param _enumerated_type New value to be copied in member enumerated_type
                     */
                    eProsima_user_DllExport void enumerated_type(
                            const eprosima::fastdds::dds::xtypes::CompleteEnumeratedType& _enumerated_type);

                    /*!
                     * @brief This function moves the value in member enumerated_type
                     * @param _enumerated_type New value to be moved in member enumerated_type
                     */
                    eProsima_user_DllExport void enumerated_type(
                            eprosima::fastdds::dds::xtypes::CompleteEnumeratedType&& _enumerated_type);

                    /*!
                     * @brief This function returns a constant reference to member enumerated_type
                     * @return Constant reference to member enumerated_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteEnumeratedType& enumerated_type() const;

                    /*!
                     * @brief This function returns a reference to member enumerated_type
                     * @return Reference to member enumerated_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteEnumeratedType& enumerated_type();


                    /*!
                     * @brief This function copies the value in member bitmask_type
                     * @param _bitmask_type New value to be copied in member bitmask_type
                     */
                    eProsima_user_DllExport void bitmask_type(
                            const eprosima::fastdds::dds::xtypes::CompleteBitmaskType& _bitmask_type);

                    /*!
                     * @brief This function moves the value in member bitmask_type
                     * @param _bitmask_type New value to be moved in member bitmask_type
                     */
                    eProsima_user_DllExport void bitmask_type(
                            eprosima::fastdds::dds::xtypes::CompleteBitmaskType&& _bitmask_type);

                    /*!
                     * @brief This function returns a constant reference to member bitmask_type
                     * @return Constant reference to member bitmask_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteBitmaskType& bitmask_type() const;

                    /*!
                     * @brief This function returns a reference to member bitmask_type
                     * @return Reference to member bitmask_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteBitmaskType& bitmask_type();


                    /*!
                     * @brief This function copies the value in member extended_type
                     * @param _extended_type New value to be copied in member extended_type
                     */
                    eProsima_user_DllExport void extended_type(
                            const eprosima::fastdds::dds::xtypes::CompleteExtendedType& _extended_type);

                    /*!
                     * @brief This function moves the value in member extended_type
                     * @param _extended_type New value to be moved in member extended_type
                     */
                    eProsima_user_DllExport void extended_type(
                            eprosima::fastdds::dds::xtypes::CompleteExtendedType&& _extended_type);

                    /*!
                     * @brief This function returns a constant reference to member extended_type
                     * @return Constant reference to member extended_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteExtendedType& extended_type() const;

                    /*!
                     * @brief This function returns a reference to member extended_type
                     * @return Reference to member extended_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteExtendedType& extended_type();

                private:

                    uint8_t m__d;

                    eprosima::fastdds::dds::xtypes::CompleteAliasType m_alias_type;
                    eprosima::fastdds::dds::xtypes::CompleteAnnotationType m_annotation_type;
                    eprosima::fastdds::dds::xtypes::CompleteStructType m_struct_type;
                    eprosima::fastdds::dds::xtypes::CompleteUnionType m_union_type;
                    eprosima::fastdds::dds::xtypes::CompleteBitsetType m_bitset_type;
                    eprosima::fastdds::dds::xtypes::CompleteSequenceType m_sequence_type;
                    eprosima::fastdds::dds::xtypes::CompleteArrayType m_array_type;
                    eprosima::fastdds::dds::xtypes::CompleteMapType m_map_type;
                    eprosima::fastdds::dds::xtypes::CompleteEnumeratedType m_enumerated_type;
                    eprosima::fastdds::dds::xtypes::CompleteBitmaskType m_bitmask_type;
                    eprosima::fastdds::dds::xtypes::CompleteExtendedType m_extended_type;
                };
                /*!
                 * @brief This class represents the structure MinimalExtendedType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalExtendedType
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport MinimalExtendedType();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~MinimalExtendedType();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalExtendedType that will be copied.
                     */
                    eProsima_user_DllExport MinimalExtendedType(
                            const MinimalExtendedType& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalExtendedType that will be copied.
                     */
                    eProsima_user_DllExport MinimalExtendedType(
                            MinimalExtendedType&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalExtendedType that will be copied.
                     */
                    eProsima_user_DllExport MinimalExtendedType& operator =(
                            const MinimalExtendedType& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalExtendedType that will be copied.
                     */
                    eProsima_user_DllExport MinimalExtendedType& operator =(
                            MinimalExtendedType&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalExtendedType object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const MinimalExtendedType& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalExtendedType object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const MinimalExtendedType& x) const;

                private:


                };
                /*!
                 * @brief This class represents the union MinimalTypeObject defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalTypeObject
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport MinimalTypeObject();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~MinimalTypeObject();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalTypeObject that will be copied.
                     */
                    eProsima_user_DllExport MinimalTypeObject(
                            const MinimalTypeObject& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalTypeObject that will be copied.
                     */
                    eProsima_user_DllExport MinimalTypeObject(
                            MinimalTypeObject&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalTypeObject that will be copied.
                     */
                    eProsima_user_DllExport MinimalTypeObject& operator =(
                            const MinimalTypeObject& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::MinimalTypeObject that will be copied.
                     */
                    eProsima_user_DllExport MinimalTypeObject& operator =(
                            MinimalTypeObject&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalTypeObject object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const MinimalTypeObject& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::MinimalTypeObject object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const MinimalTypeObject& x) const;

                    /*!
                     * @brief This function sets the discriminator value.
                     * @param __d New value for the discriminator.
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
                     */
                    eProsima_user_DllExport void _d(
                            uint8_t __d);

                    /*!
                     * @brief This function returns the value of the discriminator.
                     * @return Value of the discriminator
                     */
                    eProsima_user_DllExport uint8_t _d() const;

                    /*!
                     * @brief This function returns a reference to the discriminator.
                     * @return Reference to the discriminator.
                     */
                    eProsima_user_DllExport uint8_t& _d();

                    /*!
                     * @brief This function copies the value in member alias_type
                     * @param _alias_type New value to be copied in member alias_type
                     */
                    eProsima_user_DllExport void alias_type(
                            const eprosima::fastdds::dds::xtypes::MinimalAliasType& _alias_type);

                    /*!
                     * @brief This function moves the value in member alias_type
                     * @param _alias_type New value to be moved in member alias_type
                     */
                    eProsima_user_DllExport void alias_type(
                            eprosima::fastdds::dds::xtypes::MinimalAliasType&& _alias_type);

                    /*!
                     * @brief This function returns a constant reference to member alias_type
                     * @return Constant reference to member alias_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalAliasType& alias_type() const;

                    /*!
                     * @brief This function returns a reference to member alias_type
                     * @return Reference to member alias_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalAliasType& alias_type();


                    /*!
                     * @brief This function copies the value in member annotation_type
                     * @param _annotation_type New value to be copied in member annotation_type
                     */
                    eProsima_user_DllExport void annotation_type(
                            const eprosima::fastdds::dds::xtypes::MinimalAnnotationType& _annotation_type);

                    /*!
                     * @brief This function moves the value in member annotation_type
                     * @param _annotation_type New value to be moved in member annotation_type
                     */
                    eProsima_user_DllExport void annotation_type(
                            eprosima::fastdds::dds::xtypes::MinimalAnnotationType&& _annotation_type);

                    /*!
                     * @brief This function returns a constant reference to member annotation_type
                     * @return Constant reference to member annotation_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalAnnotationType& annotation_type() const;

                    /*!
                     * @brief This function returns a reference to member annotation_type
                     * @return Reference to member annotation_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalAnnotationType& annotation_type();


                    /*!
                     * @brief This function copies the value in member struct_type
                     * @param _struct_type New value to be copied in member struct_type
                     */
                    eProsima_user_DllExport void struct_type(
                            const eprosima::fastdds::dds::xtypes::MinimalStructType& _struct_type);

                    /*!
                     * @brief This function moves the value in member struct_type
                     * @param _struct_type New value to be moved in member struct_type
                     */
                    eProsima_user_DllExport void struct_type(
                            eprosima::fastdds::dds::xtypes::MinimalStructType&& _struct_type);

                    /*!
                     * @brief This function returns a constant reference to member struct_type
                     * @return Constant reference to member struct_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalStructType& struct_type() const;

                    /*!
                     * @brief This function returns a reference to member struct_type
                     * @return Reference to member struct_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalStructType& struct_type();


                    /*!
                     * @brief This function copies the value in member union_type
                     * @param _union_type New value to be copied in member union_type
                     */
                    eProsima_user_DllExport void union_type(
                            const eprosima::fastdds::dds::xtypes::MinimalUnionType& _union_type);

                    /*!
                     * @brief This function moves the value in member union_type
                     * @param _union_type New value to be moved in member union_type
                     */
                    eProsima_user_DllExport void union_type(
                            eprosima::fastdds::dds::xtypes::MinimalUnionType&& _union_type);

                    /*!
                     * @brief This function returns a constant reference to member union_type
                     * @return Constant reference to member union_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalUnionType& union_type() const;

                    /*!
                     * @brief This function returns a reference to member union_type
                     * @return Reference to member union_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalUnionType& union_type();


                    /*!
                     * @brief This function copies the value in member bitset_type
                     * @param _bitset_type New value to be copied in member bitset_type
                     */
                    eProsima_user_DllExport void bitset_type(
                            const eprosima::fastdds::dds::xtypes::MinimalBitsetType& _bitset_type);

                    /*!
                     * @brief This function moves the value in member bitset_type
                     * @param _bitset_type New value to be moved in member bitset_type
                     */
                    eProsima_user_DllExport void bitset_type(
                            eprosima::fastdds::dds::xtypes::MinimalBitsetType&& _bitset_type);

                    /*!
                     * @brief This function returns a constant reference to member bitset_type
                     * @return Constant reference to member bitset_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalBitsetType& bitset_type() const;

                    /*!
                     * @brief This function returns a reference to member bitset_type
                     * @return Reference to member bitset_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalBitsetType& bitset_type();


                    /*!
                     * @brief This function copies the value in member sequence_type
                     * @param _sequence_type New value to be copied in member sequence_type
                     */
                    eProsima_user_DllExport void sequence_type(
                            const eprosima::fastdds::dds::xtypes::MinimalSequenceType& _sequence_type);

                    /*!
                     * @brief This function moves the value in member sequence_type
                     * @param _sequence_type New value to be moved in member sequence_type
                     */
                    eProsima_user_DllExport void sequence_type(
                            eprosima::fastdds::dds::xtypes::MinimalSequenceType&& _sequence_type);

                    /*!
                     * @brief This function returns a constant reference to member sequence_type
                     * @return Constant reference to member sequence_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalSequenceType& sequence_type() const;

                    /*!
                     * @brief This function returns a reference to member sequence_type
                     * @return Reference to member sequence_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalSequenceType& sequence_type();


                    /*!
                     * @brief This function copies the value in member array_type
                     * @param _array_type New value to be copied in member array_type
                     */
                    eProsima_user_DllExport void array_type(
                            const eprosima::fastdds::dds::xtypes::MinimalArrayType& _array_type);

                    /*!
                     * @brief This function moves the value in member array_type
                     * @param _array_type New value to be moved in member array_type
                     */
                    eProsima_user_DllExport void array_type(
                            eprosima::fastdds::dds::xtypes::MinimalArrayType&& _array_type);

                    /*!
                     * @brief This function returns a constant reference to member array_type
                     * @return Constant reference to member array_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalArrayType& array_type() const;

                    /*!
                     * @brief This function returns a reference to member array_type
                     * @return Reference to member array_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalArrayType& array_type();


                    /*!
                     * @brief This function copies the value in member map_type
                     * @param _map_type New value to be copied in member map_type
                     */
                    eProsima_user_DllExport void map_type(
                            const eprosima::fastdds::dds::xtypes::MinimalMapType& _map_type);

                    /*!
                     * @brief This function moves the value in member map_type
                     * @param _map_type New value to be moved in member map_type
                     */
                    eProsima_user_DllExport void map_type(
                            eprosima::fastdds::dds::xtypes::MinimalMapType&& _map_type);

                    /*!
                     * @brief This function returns a constant reference to member map_type
                     * @return Constant reference to member map_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalMapType& map_type() const;

                    /*!
                     * @brief This function returns a reference to member map_type
                     * @return Reference to member map_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalMapType& map_type();


                    /*!
                     * @brief This function copies the value in member enumerated_type
                     * @param _enumerated_type New value to be copied in member enumerated_type
                     */
                    eProsima_user_DllExport void enumerated_type(
                            const eprosima::fastdds::dds::xtypes::MinimalEnumeratedType& _enumerated_type);

                    /*!
                     * @brief This function moves the value in member enumerated_type
                     * @param _enumerated_type New value to be moved in member enumerated_type
                     */
                    eProsima_user_DllExport void enumerated_type(
                            eprosima::fastdds::dds::xtypes::MinimalEnumeratedType&& _enumerated_type);

                    /*!
                     * @brief This function returns a constant reference to member enumerated_type
                     * @return Constant reference to member enumerated_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalEnumeratedType& enumerated_type() const;

                    /*!
                     * @brief This function returns a reference to member enumerated_type
                     * @return Reference to member enumerated_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalEnumeratedType& enumerated_type();


                    /*!
                     * @brief This function copies the value in member bitmask_type
                     * @param _bitmask_type New value to be copied in member bitmask_type
                     */
                    eProsima_user_DllExport void bitmask_type(
                            const eprosima::fastdds::dds::xtypes::MinimalBitmaskType& _bitmask_type);

                    /*!
                     * @brief This function moves the value in member bitmask_type
                     * @param _bitmask_type New value to be moved in member bitmask_type
                     */
                    eProsima_user_DllExport void bitmask_type(
                            eprosima::fastdds::dds::xtypes::MinimalBitmaskType&& _bitmask_type);

                    /*!
                     * @brief This function returns a constant reference to member bitmask_type
                     * @return Constant reference to member bitmask_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalBitmaskType& bitmask_type() const;

                    /*!
                     * @brief This function returns a reference to member bitmask_type
                     * @return Reference to member bitmask_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalBitmaskType& bitmask_type();


                    /*!
                     * @brief This function copies the value in member extended_type
                     * @param _extended_type New value to be copied in member extended_type
                     */
                    eProsima_user_DllExport void extended_type(
                            const eprosima::fastdds::dds::xtypes::MinimalExtendedType& _extended_type);

                    /*!
                     * @brief This function moves the value in member extended_type
                     * @param _extended_type New value to be moved in member extended_type
                     */
                    eProsima_user_DllExport void extended_type(
                            eprosima::fastdds::dds::xtypes::MinimalExtendedType&& _extended_type);

                    /*!
                     * @brief This function returns a constant reference to member extended_type
                     * @return Constant reference to member extended_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalExtendedType& extended_type() const;

                    /*!
                     * @brief This function returns a reference to member extended_type
                     * @return Reference to member extended_type
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalExtendedType& extended_type();

                private:

                    uint8_t m__d;

                    eprosima::fastdds::dds::xtypes::MinimalAliasType m_alias_type;
                    eprosima::fastdds::dds::xtypes::MinimalAnnotationType m_annotation_type;
                    eprosima::fastdds::dds::xtypes::MinimalStructType m_struct_type;
                    eprosima::fastdds::dds::xtypes::MinimalUnionType m_union_type;
                    eprosima::fastdds::dds::xtypes::MinimalBitsetType m_bitset_type;
                    eprosima::fastdds::dds::xtypes::MinimalSequenceType m_sequence_type;
                    eprosima::fastdds::dds::xtypes::MinimalArrayType m_array_type;
                    eprosima::fastdds::dds::xtypes::MinimalMapType m_map_type;
                    eprosima::fastdds::dds::xtypes::MinimalEnumeratedType m_enumerated_type;
                    eprosima::fastdds::dds::xtypes::MinimalBitmaskType m_bitmask_type;
                    eprosima::fastdds::dds::xtypes::MinimalExtendedType m_extended_type;
                };
                /*!
                 * @brief This class represents the union TypeObject defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class TypeObject
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport TypeObject();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~TypeObject();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::TypeObject that will be copied.
                     */
                    eProsima_user_DllExport TypeObject(
                            const TypeObject& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::TypeObject that will be copied.
                     */
                    eProsima_user_DllExport TypeObject(
                            TypeObject&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::TypeObject that will be copied.
                     */
                    eProsima_user_DllExport TypeObject& operator =(
                            const TypeObject& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::TypeObject that will be copied.
                     */
                    eProsima_user_DllExport TypeObject& operator =(
                            TypeObject&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::TypeObject object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const TypeObject& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::TypeObject object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const TypeObject& x) const;

                    /*!
                     * @brief This function sets the discriminator value.
                     * @param __d New value for the discriminator.
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
                     */
                    eProsima_user_DllExport void _d(
                            uint8_t __d);

                    /*!
                     * @brief This function returns the value of the discriminator.
                     * @return Value of the discriminator
                     */
                    eProsima_user_DllExport uint8_t _d() const;

                    /*!
                     * @brief This function returns a reference to the discriminator.
                     * @return Reference to the discriminator.
                     */
                    eProsima_user_DllExport uint8_t& _d();

                    /*!
                     * @brief This function copies the value in member complete
                     * @param _complete New value to be copied in member complete
                     */
                    eProsima_user_DllExport void complete(
                            const eprosima::fastdds::dds::xtypes::CompleteTypeObject& _complete);

                    /*!
                     * @brief This function moves the value in member complete
                     * @param _complete New value to be moved in member complete
                     */
                    eProsima_user_DllExport void complete(
                            eprosima::fastdds::dds::xtypes::CompleteTypeObject&& _complete);

                    /*!
                     * @brief This function returns a constant reference to member complete
                     * @return Constant reference to member complete
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::CompleteTypeObject& complete() const;

                    /*!
                     * @brief This function returns a reference to member complete
                     * @return Reference to member complete
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::CompleteTypeObject& complete();


                    /*!
                     * @brief This function copies the value in member minimal
                     * @param _minimal New value to be copied in member minimal
                     */
                    eProsima_user_DllExport void minimal(
                            const eprosima::fastdds::dds::xtypes::MinimalTypeObject& _minimal);

                    /*!
                     * @brief This function moves the value in member minimal
                     * @param _minimal New value to be moved in member minimal
                     */
                    eProsima_user_DllExport void minimal(
                            eprosima::fastdds::dds::xtypes::MinimalTypeObject&& _minimal);

                    /*!
                     * @brief This function returns a constant reference to member minimal
                     * @return Constant reference to member minimal
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::MinimalTypeObject& minimal() const;

                    /*!
                     * @brief This function returns a reference to member minimal
                     * @return Reference to member minimal
                     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::MinimalTypeObject& minimal();

                private:

                    uint8_t m__d;

                    eprosima::fastdds::dds::xtypes::CompleteTypeObject m_complete;
                    eprosima::fastdds::dds::xtypes::MinimalTypeObject m_minimal;
                };
                typedef std::vector<eprosima::fastdds::dds::xtypes::TypeObject> TypeObjectSeq;

                typedef eprosima::fastdds::dds::xtypes::TypeObjectSeq StronglyConnectedComponent;

                /*!
                 * @brief This class represents the structure TypeIdentifierTypeObjectPair defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class TypeIdentifierTypeObjectPair
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport TypeIdentifierTypeObjectPair();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~TypeIdentifierTypeObjectPair();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::TypeIdentifierTypeObjectPair that will be copied.
                     */
                    eProsima_user_DllExport TypeIdentifierTypeObjectPair(
                            const TypeIdentifierTypeObjectPair& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::TypeIdentifierTypeObjectPair that will be copied.
                     */
                    eProsima_user_DllExport TypeIdentifierTypeObjectPair(
                            TypeIdentifierTypeObjectPair&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::TypeIdentifierTypeObjectPair that will be copied.
                     */
                    eProsima_user_DllExport TypeIdentifierTypeObjectPair& operator =(
                            const TypeIdentifierTypeObjectPair& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::TypeIdentifierTypeObjectPair that will be copied.
                     */
                    eProsima_user_DllExport TypeIdentifierTypeObjectPair& operator =(
                            TypeIdentifierTypeObjectPair&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::TypeIdentifierTypeObjectPair object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const TypeIdentifierTypeObjectPair& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::TypeIdentifierTypeObjectPair object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const TypeIdentifierTypeObjectPair& x) const;

                    /*!
                     * @brief This function copies the value in member type_identifier
                     * @param _type_identifier New value to be copied in member type_identifier
                     */
                    eProsima_user_DllExport void type_identifier(
                            const eprosima::fastdds::dds::xtypes::TypeIdentifier& _type_identifier);

                    /*!
                     * @brief This function moves the value in member type_identifier
                     * @param _type_identifier New value to be moved in member type_identifier
                     */
                    eProsima_user_DllExport void type_identifier(
                            eprosima::fastdds::dds::xtypes::TypeIdentifier&& _type_identifier);

                    /*!
                     * @brief This function returns a constant reference to member type_identifier
                     * @return Constant reference to member type_identifier
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::TypeIdentifier& type_identifier() const;

                    /*!
                     * @brief This function returns a reference to member type_identifier
                     * @return Reference to member type_identifier
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::TypeIdentifier& type_identifier();


                    /*!
                     * @brief This function copies the value in member type_object
                     * @param _type_object New value to be copied in member type_object
                     */
                    eProsima_user_DllExport void type_object(
                            const eprosima::fastdds::dds::xtypes::TypeObject& _type_object);

                    /*!
                     * @brief This function moves the value in member type_object
                     * @param _type_object New value to be moved in member type_object
                     */
                    eProsima_user_DllExport void type_object(
                            eprosima::fastdds::dds::xtypes::TypeObject&& _type_object);

                    /*!
                     * @brief This function returns a constant reference to member type_object
                     * @return Constant reference to member type_object
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::TypeObject& type_object() const;

                    /*!
                     * @brief This function returns a reference to member type_object
                     * @return Reference to member type_object
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::TypeObject& type_object();

                private:

                    eprosima::fastdds::dds::xtypes::TypeIdentifier* m_type_identifier;
                    eprosima::fastdds::dds::xtypes::TypeObject m_type_object;

                };
                typedef std::vector<eprosima::fastdds::dds::xtypes::TypeIdentifierTypeObjectPair> TypeIdentifierTypeObjectPairSeq;

                /*!
                 * @brief This class represents the structure TypeIdentifierPair defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class TypeIdentifierPair
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport TypeIdentifierPair();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~TypeIdentifierPair();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::TypeIdentifierPair that will be copied.
                     */
                    eProsima_user_DllExport TypeIdentifierPair(
                            const TypeIdentifierPair& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::TypeIdentifierPair that will be copied.
                     */
                    eProsima_user_DllExport TypeIdentifierPair(
                            TypeIdentifierPair&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::TypeIdentifierPair that will be copied.
                     */
                    eProsima_user_DllExport TypeIdentifierPair& operator =(
                            const TypeIdentifierPair& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::TypeIdentifierPair that will be copied.
                     */
                    eProsima_user_DllExport TypeIdentifierPair& operator =(
                            TypeIdentifierPair&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::TypeIdentifierPair object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const TypeIdentifierPair& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::TypeIdentifierPair object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const TypeIdentifierPair& x) const;

                    /*!
                     * @brief This function copies the value in member type_identifier1
                     * @param _type_identifier1 New value to be copied in member type_identifier1
                     */
                    eProsima_user_DllExport void type_identifier1(
                            const eprosima::fastdds::dds::xtypes::TypeIdentifier& _type_identifier1);

                    /*!
                     * @brief This function moves the value in member type_identifier1
                     * @param _type_identifier1 New value to be moved in member type_identifier1
                     */
                    eProsima_user_DllExport void type_identifier1(
                            eprosima::fastdds::dds::xtypes::TypeIdentifier&& _type_identifier1);

                    /*!
                     * @brief This function returns a constant reference to member type_identifier1
                     * @return Constant reference to member type_identifier1
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::TypeIdentifier& type_identifier1() const;

                    /*!
                     * @brief This function returns a reference to member type_identifier1
                     * @return Reference to member type_identifier1
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::TypeIdentifier& type_identifier1();


                    /*!
                     * @brief This function copies the value in member type_identifier2
                     * @param _type_identifier2 New value to be copied in member type_identifier2
                     */
                    eProsima_user_DllExport void type_identifier2(
                            const eprosima::fastdds::dds::xtypes::TypeIdentifier& _type_identifier2);

                    /*!
                     * @brief This function moves the value in member type_identifier2
                     * @param _type_identifier2 New value to be moved in member type_identifier2
                     */
                    eProsima_user_DllExport void type_identifier2(
                            eprosima::fastdds::dds::xtypes::TypeIdentifier&& _type_identifier2);

                    /*!
                     * @brief This function returns a constant reference to member type_identifier2
                     * @return Constant reference to member type_identifier2
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::TypeIdentifier& type_identifier2() const;

                    /*!
                     * @brief This function returns a reference to member type_identifier2
                     * @return Reference to member type_identifier2
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::TypeIdentifier& type_identifier2();

                private:

                    eprosima::fastdds::dds::xtypes::TypeIdentifier* m_type_identifier1;
                    eprosima::fastdds::dds::xtypes::TypeIdentifier* m_type_identifier2;

                };
                typedef std::vector<eprosima::fastdds::dds::xtypes::TypeIdentifierPair> TypeIdentifierPairSeq;

                /*!
                 * @brief This class represents the structure TypeIdentfierWithSize defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class TypeIdentfierWithSize
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport TypeIdentfierWithSize();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~TypeIdentfierWithSize();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize that will be copied.
                     */
                    eProsima_user_DllExport TypeIdentfierWithSize(
                            const TypeIdentfierWithSize& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize that will be copied.
                     */
                    eProsima_user_DllExport TypeIdentfierWithSize(
                            TypeIdentfierWithSize&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize that will be copied.
                     */
                    eProsima_user_DllExport TypeIdentfierWithSize& operator =(
                            const TypeIdentfierWithSize& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize that will be copied.
                     */
                    eProsima_user_DllExport TypeIdentfierWithSize& operator =(
                            TypeIdentfierWithSize&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const TypeIdentfierWithSize& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const TypeIdentfierWithSize& x) const;

                    /*!
                     * @brief This function copies the value in member type_id
                     * @param _type_id New value to be copied in member type_id
                     */
                    eProsima_user_DllExport void type_id(
                            const eprosima::fastdds::dds::xtypes::TypeIdentifier& _type_id);

                    /*!
                     * @brief This function moves the value in member type_id
                     * @param _type_id New value to be moved in member type_id
                     */
                    eProsima_user_DllExport void type_id(
                            eprosima::fastdds::dds::xtypes::TypeIdentifier&& _type_id);

                    /*!
                     * @brief This function returns a constant reference to member type_id
                     * @return Constant reference to member type_id
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::TypeIdentifier& type_id() const;

                    /*!
                     * @brief This function returns a reference to member type_id
                     * @return Reference to member type_id
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::TypeIdentifier& type_id();


                    /*!
                     * @brief This function sets a value in member typeobject_serialized_size
                     * @param _typeobject_serialized_size New value for member typeobject_serialized_size
                     */
                    eProsima_user_DllExport void typeobject_serialized_size(
                            uint32_t _typeobject_serialized_size);

                    /*!
                     * @brief This function returns the value of member typeobject_serialized_size
                     * @return Value of member typeobject_serialized_size
                     */
                    eProsima_user_DllExport uint32_t typeobject_serialized_size() const;

                    /*!
                     * @brief This function returns a reference to member typeobject_serialized_size
                     * @return Reference to member typeobject_serialized_size
                     */
                    eProsima_user_DllExport uint32_t& typeobject_serialized_size();

                private:

                    eprosima::fastdds::dds::xtypes::TypeIdentifier* m_type_id;
                    uint32_t m_typeobject_serialized_size{0};

                };
                typedef std::vector<eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize> TypeIdentfierWithSizeSeq;

                /*!
                 * @brief This class represents the structure TypeIdentifierWithDependencies defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class TypeIdentifierWithDependencies
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport TypeIdentifierWithDependencies();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~TypeIdentifierWithDependencies();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies that will be copied.
                     */
                    eProsima_user_DllExport TypeIdentifierWithDependencies(
                            const TypeIdentifierWithDependencies& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies that will be copied.
                     */
                    eProsima_user_DllExport TypeIdentifierWithDependencies(
                            TypeIdentifierWithDependencies&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies that will be copied.
                     */
                    eProsima_user_DllExport TypeIdentifierWithDependencies& operator =(
                            const TypeIdentifierWithDependencies& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies that will be copied.
                     */
                    eProsima_user_DllExport TypeIdentifierWithDependencies& operator =(
                            TypeIdentifierWithDependencies&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const TypeIdentifierWithDependencies& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const TypeIdentifierWithDependencies& x) const;

                    /*!
                     * @brief This function copies the value in member typeid_with_size
                     * @param _typeid_with_size New value to be copied in member typeid_with_size
                     */
                    eProsima_user_DllExport void typeid_with_size(
                            const eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize& _typeid_with_size);

                    /*!
                     * @brief This function moves the value in member typeid_with_size
                     * @param _typeid_with_size New value to be moved in member typeid_with_size
                     */
                    eProsima_user_DllExport void typeid_with_size(
                            eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize&& _typeid_with_size);

                    /*!
                     * @brief This function returns a constant reference to member typeid_with_size
                     * @return Constant reference to member typeid_with_size
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize& typeid_with_size() const;

                    /*!
                     * @brief This function returns a reference to member typeid_with_size
                     * @return Reference to member typeid_with_size
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize& typeid_with_size();


                    /*!
                     * @brief This function sets a value in member dependent_typeid_count
                     * @param _dependent_typeid_count New value for member dependent_typeid_count
                     */
                    eProsima_user_DllExport void dependent_typeid_count(
                            int32_t _dependent_typeid_count);

                    /*!
                     * @brief This function returns the value of member dependent_typeid_count
                     * @return Value of member dependent_typeid_count
                     */
                    eProsima_user_DllExport int32_t dependent_typeid_count() const;

                    /*!
                     * @brief This function returns a reference to member dependent_typeid_count
                     * @return Reference to member dependent_typeid_count
                     */
                    eProsima_user_DllExport int32_t& dependent_typeid_count();


                    /*!
                     * @brief This function copies the value in member dependent_typeids
                     * @param _dependent_typeids New value to be copied in member dependent_typeids
                     */
                    eProsima_user_DllExport void dependent_typeids(
                            const std::vector<eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize>& _dependent_typeids);

                    /*!
                     * @brief This function moves the value in member dependent_typeids
                     * @param _dependent_typeids New value to be moved in member dependent_typeids
                     */
                    eProsima_user_DllExport void dependent_typeids(
                            std::vector<eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize>&& _dependent_typeids);

                    /*!
                     * @brief This function returns a constant reference to member dependent_typeids
                     * @return Constant reference to member dependent_typeids
                     */
                    eProsima_user_DllExport const std::vector<eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize>& dependent_typeids() const;

                    /*!
                     * @brief This function returns a reference to member dependent_typeids
                     * @return Reference to member dependent_typeids
                     */
                    eProsima_user_DllExport std::vector<eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize>& dependent_typeids();

                private:

                    eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize m_typeid_with_size;
                    int32_t m_dependent_typeid_count{0};
                    std::vector<eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize> m_dependent_typeids;

                };
                typedef std::vector<eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies> TypeIdentifierWithDependenciesSeq;

                /*!
                 * @brief This class represents the structure TypeInformation defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class TypeInformation
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport TypeInformation();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~TypeInformation();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::TypeInformation that will be copied.
                     */
                    eProsima_user_DllExport TypeInformation(
                            const TypeInformation& x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::TypeInformation that will be copied.
                     */
                    eProsima_user_DllExport TypeInformation(
                            TypeInformation&& x) noexcept;

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::TypeInformation that will be copied.
                     */
                    eProsima_user_DllExport TypeInformation& operator =(
                            const TypeInformation& x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object eprosima::fastdds::dds::xtypes::TypeInformation that will be copied.
                     */
                    eProsima_user_DllExport TypeInformation& operator =(
                            TypeInformation&& x) noexcept;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::TypeInformation object to compare.
                     */
                    eProsima_user_DllExport bool operator ==(
                            const TypeInformation& x) const;

                    /*!
                     * @brief Comparison operator.
                     * @param x eprosima::fastdds::dds::xtypes::TypeInformation object to compare.
                     */
                    eProsima_user_DllExport bool operator !=(
                            const TypeInformation& x) const;

                    /*!
                     * @brief This function copies the value in member minimal
                     * @param _minimal New value to be copied in member minimal
                     */
                    eProsima_user_DllExport void minimal(
                            const eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies& _minimal);

                    /*!
                     * @brief This function moves the value in member minimal
                     * @param _minimal New value to be moved in member minimal
                     */
                    eProsima_user_DllExport void minimal(
                            eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies&& _minimal);

                    /*!
                     * @brief This function returns a constant reference to member minimal
                     * @return Constant reference to member minimal
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies& minimal() const;

                    /*!
                     * @brief This function returns a reference to member minimal
                     * @return Reference to member minimal
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies& minimal();


                    /*!
                     * @brief This function copies the value in member complete
                     * @param _complete New value to be copied in member complete
                     */
                    eProsima_user_DllExport void complete(
                            const eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies& _complete);

                    /*!
                     * @brief This function moves the value in member complete
                     * @param _complete New value to be moved in member complete
                     */
                    eProsima_user_DllExport void complete(
                            eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies&& _complete);

                    /*!
                     * @brief This function returns a constant reference to member complete
                     * @return Constant reference to member complete
                     */
                    eProsima_user_DllExport const eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies& complete() const;

                    /*!
                     * @brief This function returns a reference to member complete
                     * @return Reference to member complete
                     */
                    eProsima_user_DllExport eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies& complete();

                private:

                    eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies m_minimal;
                    eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies m_complete;

                };
                typedef std::vector<eprosima::fastdds::dds::xtypes::TypeInformation> TypeInformationSeq;

            } // namespace xtypes
        } // namespace dds
    } // namespace fastdds
} // namespace eprosima

#endif // _FAST_DDS_GENERATED_EPROSIMA_FASTDDS_DDS_XTYPES_TYPEOBJECT_H_

