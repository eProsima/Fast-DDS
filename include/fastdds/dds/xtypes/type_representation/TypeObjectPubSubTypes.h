// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TypeObjectPubSubTypes.h
 * This header file contains the declaration of the serialization functions.
 *
 * This file was generated by the tool fastddsgen.
 */


#ifndef _FAST_DDS_GENERATED_EPROSIMA_FASTDDS_DDS_XTYPES1_3_TYPEOBJECT_PUBSUBTYPES_H_
#define _FAST_DDS_GENERATED_EPROSIMA_FASTDDS_DDS_XTYPES1_3_TYPEOBJECT_PUBSUBTYPES_H_

#include <fastdds/dds/core/policy/QosPolicies.hpp>
#include <fastdds/dds/topic/TopicDataType.hpp>
#include <fastdds/rtps/common/InstanceHandle.h>
#include <fastdds/rtps/common/SerializedPayload.h>
#include <fastrtps/utils/md5.h>

#include "TypeObject.h"


#if !defined(GEN_API_VER) || (GEN_API_VER != 2)
#error \
    Generated TypeObject is not compatible with current installed Fast DDS. Please, regenerate it with fastddsgen.
#endif  // GEN_API_VER

namespace eprosima
{
    namespace fastdds
    {
        namespace dds
        {
            namespace xtypes1_3
            {
                typedef uint8_t EquivalenceKind;






                typedef uint8_t TypeKind;
























































                typedef uint8_t TypeIdentiferKind;
























                typedef eprosima::fastcdr::fixed_string<MEMBER_NAME_MAX_LENGTH> MemberName;


                typedef eprosima::fastcdr::fixed_string<TYPE_NAME_MAX_LENGTH> QualifiedTypeName;
                typedef uint8_t PrimitiveTypeId;
                typedef std::array<uint8_t, 14> EquivalenceHash;
                typedef std::array<uint8_t, 4> NameHash;
                typedef uint32_t LBound;


                typedef std::vector<eprosima::fastdds::dds::xtypes1_3::LBound> LBoundSeq;


                typedef uint8_t SBound;


                typedef std::vector<eprosima::fastdds::dds::xtypes1_3::SBound> SBoundSeq;







                typedef eprosima::fastdds::dds::xtypes1_3::MemberFlag CollectionElementFlag;
                typedef eprosima::fastdds::dds::xtypes1_3::MemberFlag StructMemberFlag;
                typedef eprosima::fastdds::dds::xtypes1_3::MemberFlag UnionMemberFlag;
                typedef eprosima::fastdds::dds::xtypes1_3::MemberFlag UnionDiscriminatorFlag;
                typedef eprosima::fastdds::dds::xtypes1_3::MemberFlag EnumeratedLiteralFlag;
                typedef eprosima::fastdds::dds::xtypes1_3::MemberFlag AnnotationParameterFlag;
                typedef eprosima::fastdds::dds::xtypes1_3::MemberFlag AliasMemberFlag;
                typedef eprosima::fastdds::dds::xtypes1_3::MemberFlag BitflagFlag;
                typedef eprosima::fastdds::dds::xtypes1_3::MemberFlag BitsetMemberFlag;



                typedef eprosima::fastdds::dds::xtypes1_3::TypeFlag StructTypeFlag;
                typedef eprosima::fastdds::dds::xtypes1_3::TypeFlag UnionTypeFlag;
                typedef eprosima::fastdds::dds::xtypes1_3::TypeFlag CollectionTypeFlag;
                typedef eprosima::fastdds::dds::xtypes1_3::TypeFlag AnnotationTypeFlag;
                typedef eprosima::fastdds::dds::xtypes1_3::TypeFlag AliasTypeFlag;
                typedef eprosima::fastdds::dds::xtypes1_3::TypeFlag EnumTypeFlag;
                typedef eprosima::fastdds::dds::xtypes1_3::TypeFlag BitmaskTypeFlag;
                typedef eprosima::fastdds::dds::xtypes1_3::TypeFlag BitsetTypeFlag;






                /*!
                 * @brief This class represents the TopicDataType of the type StringSTypeDefn defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class StringSTypeDefnPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef StringSTypeDefn type;

                    eProsima_user_DllExport StringSTypeDefnPubSubType();

                    eProsima_user_DllExport ~StringSTypeDefnPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return true;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type StringLTypeDefn defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class StringLTypeDefnPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef StringLTypeDefn type;

                    eProsima_user_DllExport StringLTypeDefnPubSubType();

                    eProsima_user_DllExport ~StringLTypeDefnPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return true;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type PlainCollectionHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class PlainCollectionHeaderPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef PlainCollectionHeader type;

                    eProsima_user_DllExport PlainCollectionHeaderPubSubType();

                    eProsima_user_DllExport ~PlainCollectionHeaderPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return true;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type PlainSequenceSElemDefn defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class PlainSequenceSElemDefnPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef PlainSequenceSElemDefn type;

                    eProsima_user_DllExport PlainSequenceSElemDefnPubSubType();

                    eProsima_user_DllExport ~PlainSequenceSElemDefnPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return true;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type PlainSequenceLElemDefn defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class PlainSequenceLElemDefnPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef PlainSequenceLElemDefn type;

                    eProsima_user_DllExport PlainSequenceLElemDefnPubSubType();

                    eProsima_user_DllExport ~PlainSequenceLElemDefnPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return true;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type PlainArraySElemDefn defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class PlainArraySElemDefnPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef PlainArraySElemDefn type;

                    eProsima_user_DllExport PlainArraySElemDefnPubSubType();

                    eProsima_user_DllExport ~PlainArraySElemDefnPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type PlainArrayLElemDefn defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class PlainArrayLElemDefnPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef PlainArrayLElemDefn type;

                    eProsima_user_DllExport PlainArrayLElemDefnPubSubType();

                    eProsima_user_DllExport ~PlainArrayLElemDefnPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type PlainMapSTypeDefn defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class PlainMapSTypeDefnPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef PlainMapSTypeDefn type;

                    eProsima_user_DllExport PlainMapSTypeDefnPubSubType();

                    eProsima_user_DllExport ~PlainMapSTypeDefnPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return true;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type PlainMapLTypeDefn defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class PlainMapLTypeDefnPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef PlainMapLTypeDefn type;

                    eProsima_user_DllExport PlainMapLTypeDefnPubSubType();

                    eProsima_user_DllExport ~PlainMapLTypeDefnPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return true;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type StronglyConnectedComponentId defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class StronglyConnectedComponentIdPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef StronglyConnectedComponentId type;

                    eProsima_user_DllExport StronglyConnectedComponentIdPubSubType();

                    eProsima_user_DllExport ~StronglyConnectedComponentIdPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return true;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };

                /*!
                 * @brief This class represents the TopicDataType of the type ExtendedTypeDefn defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class ExtendedTypeDefnPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef ExtendedTypeDefn type;

                    eProsima_user_DllExport ExtendedTypeDefnPubSubType();

                    eProsima_user_DllExport ~ExtendedTypeDefnPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return true;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };






                typedef std::vector<eprosima::fastdds::dds::xtypes1_3::TypeIdentifier> TypeIdentifierSeq;
                typedef uint32_t MemberId;





                /*!
                 * @brief This class represents the TopicDataType of the type ExtendedAnnotationParameterValue defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class ExtendedAnnotationParameterValuePubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef ExtendedAnnotationParameterValue type;

                    eProsima_user_DllExport ExtendedAnnotationParameterValuePubSubType();

                    eProsima_user_DllExport ~ExtendedAnnotationParameterValuePubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return true;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };







                /*!
                 * @brief This class represents the TopicDataType of the type AppliedAnnotationParameter defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class AppliedAnnotationParameterPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef AppliedAnnotationParameter type;

                    eProsima_user_DllExport AppliedAnnotationParameterPubSubType();

                    eProsima_user_DllExport ~AppliedAnnotationParameterPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return true;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };


                typedef std::vector<eprosima::fastdds::dds::xtypes1_3::AppliedAnnotationParameter> AppliedAnnotationParameterSeq;



                /*!
                 * @brief This class represents the TopicDataType of the type AppliedAnnotation defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class AppliedAnnotationPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef AppliedAnnotation type;

                    eProsima_user_DllExport AppliedAnnotationPubSubType();

                    eProsima_user_DllExport ~AppliedAnnotationPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };


                typedef std::vector<eprosima::fastdds::dds::xtypes1_3::AppliedAnnotation> AppliedAnnotationSeq;



                /*!
                 * @brief This class represents the TopicDataType of the type AppliedVerbatimAnnotation defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class AppliedVerbatimAnnotationPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef AppliedVerbatimAnnotation type;

                    eProsima_user_DllExport AppliedVerbatimAnnotationPubSubType();

                    eProsima_user_DllExport ~AppliedVerbatimAnnotationPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type AppliedBuiltinMemberAnnotations defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class AppliedBuiltinMemberAnnotationsPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef AppliedBuiltinMemberAnnotations type;

                    eProsima_user_DllExport AppliedBuiltinMemberAnnotationsPubSubType();

                    eProsima_user_DllExport ~AppliedBuiltinMemberAnnotationsPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CommonStructMember defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CommonStructMemberPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CommonStructMember type;

                    eProsima_user_DllExport CommonStructMemberPubSubType();

                    eProsima_user_DllExport ~CommonStructMemberPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CompleteMemberDetail defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteMemberDetailPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CompleteMemberDetail type;

                    eProsima_user_DllExport CompleteMemberDetailPubSubType();

                    eProsima_user_DllExport ~CompleteMemberDetailPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type MinimalMemberDetail defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalMemberDetailPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef MinimalMemberDetail type;

                    eProsima_user_DllExport MinimalMemberDetailPubSubType();

                    eProsima_user_DllExport ~MinimalMemberDetailPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return true;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CompleteStructMember defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteStructMemberPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CompleteStructMember type;

                    eProsima_user_DllExport CompleteStructMemberPubSubType();

                    eProsima_user_DllExport ~CompleteStructMemberPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };


                typedef std::vector<eprosima::fastdds::dds::xtypes1_3::CompleteStructMember> CompleteStructMemberSeq;



                /*!
                 * @brief This class represents the TopicDataType of the type MinimalStructMember defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalStructMemberPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef MinimalStructMember type;

                    eProsima_user_DllExport MinimalStructMemberPubSubType();

                    eProsima_user_DllExport ~MinimalStructMemberPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };


                typedef std::vector<eprosima::fastdds::dds::xtypes1_3::MinimalStructMember> MinimalStructMemberSeq;



                /*!
                 * @brief This class represents the TopicDataType of the type AppliedBuiltinTypeAnnotations defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class AppliedBuiltinTypeAnnotationsPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef AppliedBuiltinTypeAnnotations type;

                    eProsima_user_DllExport AppliedBuiltinTypeAnnotationsPubSubType();

                    eProsima_user_DllExport ~AppliedBuiltinTypeAnnotationsPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };

                /*!
                 * @brief This class represents the TopicDataType of the type MinimalTypeDetail defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalTypeDetailPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef MinimalTypeDetail type;

                    eProsima_user_DllExport MinimalTypeDetailPubSubType();

                    eProsima_user_DllExport ~MinimalTypeDetailPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return true;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CompleteTypeDetail defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteTypeDetailPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CompleteTypeDetail type;

                    eProsima_user_DllExport CompleteTypeDetailPubSubType();

                    eProsima_user_DllExport ~CompleteTypeDetailPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CompleteStructHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteStructHeaderPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CompleteStructHeader type;

                    eProsima_user_DllExport CompleteStructHeaderPubSubType();

                    eProsima_user_DllExport ~CompleteStructHeaderPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type MinimalStructHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalStructHeaderPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef MinimalStructHeader type;

                    eProsima_user_DllExport MinimalStructHeaderPubSubType();

                    eProsima_user_DllExport ~MinimalStructHeaderPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CompleteStructType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteStructTypePubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CompleteStructType type;

                    eProsima_user_DllExport CompleteStructTypePubSubType();

                    eProsima_user_DllExport ~CompleteStructTypePubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type MinimalStructType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalStructTypePubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef MinimalStructType type;

                    eProsima_user_DllExport MinimalStructTypePubSubType();

                    eProsima_user_DllExport ~MinimalStructTypePubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };


                typedef std::vector<int32_t> UnionCaseLabelSeq;



                /*!
                 * @brief This class represents the TopicDataType of the type CommonUnionMember defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CommonUnionMemberPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CommonUnionMember type;

                    eProsima_user_DllExport CommonUnionMemberPubSubType();

                    eProsima_user_DllExport ~CommonUnionMemberPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CompleteUnionMember defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteUnionMemberPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CompleteUnionMember type;

                    eProsima_user_DllExport CompleteUnionMemberPubSubType();

                    eProsima_user_DllExport ~CompleteUnionMemberPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };


                typedef std::vector<eprosima::fastdds::dds::xtypes1_3::CompleteUnionMember> CompleteUnionMemberSeq;



                /*!
                 * @brief This class represents the TopicDataType of the type MinimalUnionMember defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalUnionMemberPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef MinimalUnionMember type;

                    eProsima_user_DllExport MinimalUnionMemberPubSubType();

                    eProsima_user_DllExport ~MinimalUnionMemberPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };


                typedef std::vector<eprosima::fastdds::dds::xtypes1_3::MinimalUnionMember> MinimalUnionMemberSeq;



                /*!
                 * @brief This class represents the TopicDataType of the type CommonDiscriminatorMember defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CommonDiscriminatorMemberPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CommonDiscriminatorMember type;

                    eProsima_user_DllExport CommonDiscriminatorMemberPubSubType();

                    eProsima_user_DllExport ~CommonDiscriminatorMemberPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CompleteDiscriminatorMember defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteDiscriminatorMemberPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CompleteDiscriminatorMember type;

                    eProsima_user_DllExport CompleteDiscriminatorMemberPubSubType();

                    eProsima_user_DllExport ~CompleteDiscriminatorMemberPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type MinimalDiscriminatorMember defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalDiscriminatorMemberPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef MinimalDiscriminatorMember type;

                    eProsima_user_DllExport MinimalDiscriminatorMemberPubSubType();

                    eProsima_user_DllExport ~MinimalDiscriminatorMemberPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CompleteUnionHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteUnionHeaderPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CompleteUnionHeader type;

                    eProsima_user_DllExport CompleteUnionHeaderPubSubType();

                    eProsima_user_DllExport ~CompleteUnionHeaderPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type MinimalUnionHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalUnionHeaderPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef MinimalUnionHeader type;

                    eProsima_user_DllExport MinimalUnionHeaderPubSubType();

                    eProsima_user_DllExport ~MinimalUnionHeaderPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return true;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CompleteUnionType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteUnionTypePubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CompleteUnionType type;

                    eProsima_user_DllExport CompleteUnionTypePubSubType();

                    eProsima_user_DllExport ~CompleteUnionTypePubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type MinimalUnionType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalUnionTypePubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef MinimalUnionType type;

                    eProsima_user_DllExport MinimalUnionTypePubSubType();

                    eProsima_user_DllExport ~MinimalUnionTypePubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CommonAnnotationParameter defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CommonAnnotationParameterPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CommonAnnotationParameter type;

                    eProsima_user_DllExport CommonAnnotationParameterPubSubType();

                    eProsima_user_DllExport ~CommonAnnotationParameterPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CompleteAnnotationParameter defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteAnnotationParameterPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CompleteAnnotationParameter type;

                    eProsima_user_DllExport CompleteAnnotationParameterPubSubType();

                    eProsima_user_DllExport ~CompleteAnnotationParameterPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };


                typedef std::vector<eprosima::fastdds::dds::xtypes1_3::CompleteAnnotationParameter> CompleteAnnotationParameterSeq;



                /*!
                 * @brief This class represents the TopicDataType of the type MinimalAnnotationParameter defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalAnnotationParameterPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef MinimalAnnotationParameter type;

                    eProsima_user_DllExport MinimalAnnotationParameterPubSubType();

                    eProsima_user_DllExport ~MinimalAnnotationParameterPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };


                typedef std::vector<eprosima::fastdds::dds::xtypes1_3::MinimalAnnotationParameter> MinimalAnnotationParameterSeq;



                /*!
                 * @brief This class represents the TopicDataType of the type CompleteAnnotationHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteAnnotationHeaderPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CompleteAnnotationHeader type;

                    eProsima_user_DllExport CompleteAnnotationHeaderPubSubType();

                    eProsima_user_DllExport ~CompleteAnnotationHeaderPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return true;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };

                /*!
                 * @brief This class represents the TopicDataType of the type MinimalAnnotationHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalAnnotationHeaderPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef MinimalAnnotationHeader type;

                    eProsima_user_DllExport MinimalAnnotationHeaderPubSubType();

                    eProsima_user_DllExport ~MinimalAnnotationHeaderPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return true;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CompleteAnnotationType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteAnnotationTypePubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CompleteAnnotationType type;

                    eProsima_user_DllExport CompleteAnnotationTypePubSubType();

                    eProsima_user_DllExport ~CompleteAnnotationTypePubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type MinimalAnnotationType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalAnnotationTypePubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef MinimalAnnotationType type;

                    eProsima_user_DllExport MinimalAnnotationTypePubSubType();

                    eProsima_user_DllExport ~MinimalAnnotationTypePubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CommonAliasBody defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CommonAliasBodyPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CommonAliasBody type;

                    eProsima_user_DllExport CommonAliasBodyPubSubType();

                    eProsima_user_DllExport ~CommonAliasBodyPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CompleteAliasBody defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteAliasBodyPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CompleteAliasBody type;

                    eProsima_user_DllExport CompleteAliasBodyPubSubType();

                    eProsima_user_DllExport ~CompleteAliasBodyPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type MinimalAliasBody defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalAliasBodyPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef MinimalAliasBody type;

                    eProsima_user_DllExport MinimalAliasBodyPubSubType();

                    eProsima_user_DllExport ~MinimalAliasBodyPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CompleteAliasHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteAliasHeaderPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CompleteAliasHeader type;

                    eProsima_user_DllExport CompleteAliasHeaderPubSubType();

                    eProsima_user_DllExport ~CompleteAliasHeaderPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };

                /*!
                 * @brief This class represents the TopicDataType of the type MinimalAliasHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalAliasHeaderPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef MinimalAliasHeader type;

                    eProsima_user_DllExport MinimalAliasHeaderPubSubType();

                    eProsima_user_DllExport ~MinimalAliasHeaderPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return true;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CompleteAliasType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteAliasTypePubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CompleteAliasType type;

                    eProsima_user_DllExport CompleteAliasTypePubSubType();

                    eProsima_user_DllExport ~CompleteAliasTypePubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type MinimalAliasType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalAliasTypePubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef MinimalAliasType type;

                    eProsima_user_DllExport MinimalAliasTypePubSubType();

                    eProsima_user_DllExport ~MinimalAliasTypePubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CompleteElementDetail defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteElementDetailPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CompleteElementDetail type;

                    eProsima_user_DllExport CompleteElementDetailPubSubType();

                    eProsima_user_DllExport ~CompleteElementDetailPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CommonCollectionElement defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CommonCollectionElementPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CommonCollectionElement type;

                    eProsima_user_DllExport CommonCollectionElementPubSubType();

                    eProsima_user_DllExport ~CommonCollectionElementPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CompleteCollectionElement defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteCollectionElementPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CompleteCollectionElement type;

                    eProsima_user_DllExport CompleteCollectionElementPubSubType();

                    eProsima_user_DllExport ~CompleteCollectionElementPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type MinimalCollectionElement defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalCollectionElementPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef MinimalCollectionElement type;

                    eProsima_user_DllExport MinimalCollectionElementPubSubType();

                    eProsima_user_DllExport ~MinimalCollectionElementPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CommonCollectionHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CommonCollectionHeaderPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CommonCollectionHeader type;

                    eProsima_user_DllExport CommonCollectionHeaderPubSubType();

                    eProsima_user_DllExport ~CommonCollectionHeaderPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return true;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CompleteCollectionHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteCollectionHeaderPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CompleteCollectionHeader type;

                    eProsima_user_DllExport CompleteCollectionHeaderPubSubType();

                    eProsima_user_DllExport ~CompleteCollectionHeaderPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type MinimalCollectionHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalCollectionHeaderPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef MinimalCollectionHeader type;

                    eProsima_user_DllExport MinimalCollectionHeaderPubSubType();

                    eProsima_user_DllExport ~MinimalCollectionHeaderPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return true;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CompleteSequenceType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteSequenceTypePubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CompleteSequenceType type;

                    eProsima_user_DllExport CompleteSequenceTypePubSubType();

                    eProsima_user_DllExport ~CompleteSequenceTypePubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type MinimalSequenceType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalSequenceTypePubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef MinimalSequenceType type;

                    eProsima_user_DllExport MinimalSequenceTypePubSubType();

                    eProsima_user_DllExport ~MinimalSequenceTypePubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CommonArrayHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CommonArrayHeaderPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CommonArrayHeader type;

                    eProsima_user_DllExport CommonArrayHeaderPubSubType();

                    eProsima_user_DllExport ~CommonArrayHeaderPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CompleteArrayHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteArrayHeaderPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CompleteArrayHeader type;

                    eProsima_user_DllExport CompleteArrayHeaderPubSubType();

                    eProsima_user_DllExport ~CompleteArrayHeaderPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type MinimalArrayHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalArrayHeaderPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef MinimalArrayHeader type;

                    eProsima_user_DllExport MinimalArrayHeaderPubSubType();

                    eProsima_user_DllExport ~MinimalArrayHeaderPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CompleteArrayType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteArrayTypePubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CompleteArrayType type;

                    eProsima_user_DllExport CompleteArrayTypePubSubType();

                    eProsima_user_DllExport ~CompleteArrayTypePubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type MinimalArrayType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalArrayTypePubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef MinimalArrayType type;

                    eProsima_user_DllExport MinimalArrayTypePubSubType();

                    eProsima_user_DllExport ~MinimalArrayTypePubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CompleteMapType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteMapTypePubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CompleteMapType type;

                    eProsima_user_DllExport CompleteMapTypePubSubType();

                    eProsima_user_DllExport ~CompleteMapTypePubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type MinimalMapType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalMapTypePubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef MinimalMapType type;

                    eProsima_user_DllExport MinimalMapTypePubSubType();

                    eProsima_user_DllExport ~MinimalMapTypePubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };
                typedef uint16_t BitBound;



                /*!
                 * @brief This class represents the TopicDataType of the type CommonEnumeratedLiteral defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CommonEnumeratedLiteralPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CommonEnumeratedLiteral type;

                    eProsima_user_DllExport CommonEnumeratedLiteralPubSubType();

                    eProsima_user_DllExport ~CommonEnumeratedLiteralPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return true;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CompleteEnumeratedLiteral defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteEnumeratedLiteralPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CompleteEnumeratedLiteral type;

                    eProsima_user_DllExport CompleteEnumeratedLiteralPubSubType();

                    eProsima_user_DllExport ~CompleteEnumeratedLiteralPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };


                typedef std::vector<eprosima::fastdds::dds::xtypes1_3::CompleteEnumeratedLiteral> CompleteEnumeratedLiteralSeq;



                /*!
                 * @brief This class represents the TopicDataType of the type MinimalEnumeratedLiteral defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalEnumeratedLiteralPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef MinimalEnumeratedLiteral type;

                    eProsima_user_DllExport MinimalEnumeratedLiteralPubSubType();

                    eProsima_user_DllExport ~MinimalEnumeratedLiteralPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return true;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };


                typedef std::vector<eprosima::fastdds::dds::xtypes1_3::MinimalEnumeratedLiteral> MinimalEnumeratedLiteralSeq;



                /*!
                 * @brief This class represents the TopicDataType of the type CommonEnumeratedHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CommonEnumeratedHeaderPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CommonEnumeratedHeader type;

                    eProsima_user_DllExport CommonEnumeratedHeaderPubSubType();

                    eProsima_user_DllExport ~CommonEnumeratedHeaderPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return true;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CompleteEnumeratedHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteEnumeratedHeaderPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CompleteEnumeratedHeader type;

                    eProsima_user_DllExport CompleteEnumeratedHeaderPubSubType();

                    eProsima_user_DllExport ~CompleteEnumeratedHeaderPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type MinimalEnumeratedHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalEnumeratedHeaderPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef MinimalEnumeratedHeader type;

                    eProsima_user_DllExport MinimalEnumeratedHeaderPubSubType();

                    eProsima_user_DllExport ~MinimalEnumeratedHeaderPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return true;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CompleteEnumeratedType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteEnumeratedTypePubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CompleteEnumeratedType type;

                    eProsima_user_DllExport CompleteEnumeratedTypePubSubType();

                    eProsima_user_DllExport ~CompleteEnumeratedTypePubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type MinimalEnumeratedType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalEnumeratedTypePubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef MinimalEnumeratedType type;

                    eProsima_user_DllExport MinimalEnumeratedTypePubSubType();

                    eProsima_user_DllExport ~MinimalEnumeratedTypePubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CommonBitflag defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CommonBitflagPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CommonBitflag type;

                    eProsima_user_DllExport CommonBitflagPubSubType();

                    eProsima_user_DllExport ~CommonBitflagPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return true;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CompleteBitflag defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteBitflagPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CompleteBitflag type;

                    eProsima_user_DllExport CompleteBitflagPubSubType();

                    eProsima_user_DllExport ~CompleteBitflagPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };


                typedef std::vector<eprosima::fastdds::dds::xtypes1_3::CompleteBitflag> CompleteBitflagSeq;



                /*!
                 * @brief This class represents the TopicDataType of the type MinimalBitflag defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalBitflagPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef MinimalBitflag type;

                    eProsima_user_DllExport MinimalBitflagPubSubType();

                    eProsima_user_DllExport ~MinimalBitflagPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return true;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };


                typedef std::vector<eprosima::fastdds::dds::xtypes1_3::MinimalBitflag> MinimalBitflagSeq;



                /*!
                 * @brief This class represents the TopicDataType of the type CommonBitmaskHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CommonBitmaskHeaderPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CommonBitmaskHeader type;

                    eProsima_user_DllExport CommonBitmaskHeaderPubSubType();

                    eProsima_user_DllExport ~CommonBitmaskHeaderPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return true;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };
                typedef eprosima::fastdds::dds::xtypes1_3::CompleteEnumeratedHeader CompleteBitmaskHeader;
                typedef eprosima::fastdds::dds::xtypes1_3::MinimalEnumeratedHeader MinimalBitmaskHeader;



                /*!
                 * @brief This class represents the TopicDataType of the type CompleteBitmaskType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteBitmaskTypePubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CompleteBitmaskType type;

                    eProsima_user_DllExport CompleteBitmaskTypePubSubType();

                    eProsima_user_DllExport ~CompleteBitmaskTypePubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type MinimalBitmaskType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalBitmaskTypePubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef MinimalBitmaskType type;

                    eProsima_user_DllExport MinimalBitmaskTypePubSubType();

                    eProsima_user_DllExport ~MinimalBitmaskTypePubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CommonBitfield defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CommonBitfieldPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CommonBitfield type;

                    eProsima_user_DllExport CommonBitfieldPubSubType();

                    eProsima_user_DllExport ~CommonBitfieldPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return true;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CompleteBitfield defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteBitfieldPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CompleteBitfield type;

                    eProsima_user_DllExport CompleteBitfieldPubSubType();

                    eProsima_user_DllExport ~CompleteBitfieldPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };


                typedef std::vector<eprosima::fastdds::dds::xtypes1_3::CompleteBitfield> CompleteBitfieldSeq;



                /*!
                 * @brief This class represents the TopicDataType of the type MinimalBitfield defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalBitfieldPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef MinimalBitfield type;

                    eProsima_user_DllExport MinimalBitfieldPubSubType();

                    eProsima_user_DllExport ~MinimalBitfieldPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return true;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };


                typedef std::vector<eprosima::fastdds::dds::xtypes1_3::MinimalBitfield> MinimalBitfieldSeq;



                /*!
                 * @brief This class represents the TopicDataType of the type CompleteBitsetHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteBitsetHeaderPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CompleteBitsetHeader type;

                    eProsima_user_DllExport CompleteBitsetHeaderPubSubType();

                    eProsima_user_DllExport ~CompleteBitsetHeaderPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };

                /*!
                 * @brief This class represents the TopicDataType of the type MinimalBitsetHeader defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalBitsetHeaderPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef MinimalBitsetHeader type;

                    eProsima_user_DllExport MinimalBitsetHeaderPubSubType();

                    eProsima_user_DllExport ~MinimalBitsetHeaderPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return true;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type CompleteBitsetType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteBitsetTypePubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CompleteBitsetType type;

                    eProsima_user_DllExport CompleteBitsetTypePubSubType();

                    eProsima_user_DllExport ~CompleteBitsetTypePubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };



                /*!
                 * @brief This class represents the TopicDataType of the type MinimalBitsetType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalBitsetTypePubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef MinimalBitsetType type;

                    eProsima_user_DllExport MinimalBitsetTypePubSubType();

                    eProsima_user_DllExport ~MinimalBitsetTypePubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };

                /*!
                 * @brief This class represents the TopicDataType of the type CompleteExtendedType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class CompleteExtendedTypePubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef CompleteExtendedType type;

                    eProsima_user_DllExport CompleteExtendedTypePubSubType();

                    eProsima_user_DllExport ~CompleteExtendedTypePubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return true;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };





                /*!
                 * @brief This class represents the TopicDataType of the type MinimalExtendedType defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class MinimalExtendedTypePubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef MinimalExtendedType type;

                    eProsima_user_DllExport MinimalExtendedTypePubSubType();

                    eProsima_user_DllExport ~MinimalExtendedTypePubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return true;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };










                typedef std::vector<eprosima::fastdds::dds::xtypes1_3::TypeObject> TypeObjectSeq;
                typedef eprosima::fastdds::dds::xtypes1_3::TypeObjectSeq StronglyConnectedComponent;



                /*!
                 * @brief This class represents the TopicDataType of the type TypeIdentifierTypeObjectPair defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class TypeIdentifierTypeObjectPairPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef TypeIdentifierTypeObjectPair type;

                    eProsima_user_DllExport TypeIdentifierTypeObjectPairPubSubType();

                    eProsima_user_DllExport ~TypeIdentifierTypeObjectPairPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };


                typedef std::vector<eprosima::fastdds::dds::xtypes1_3::TypeIdentifierTypeObjectPair> TypeIdentifierTypeObjectPairSeq;



                /*!
                 * @brief This class represents the TopicDataType of the type TypeIdentifierPair defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class TypeIdentifierPairPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef TypeIdentifierPair type;

                    eProsima_user_DllExport TypeIdentifierPairPubSubType();

                    eProsima_user_DllExport ~TypeIdentifierPairPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };


                typedef std::vector<eprosima::fastdds::dds::xtypes1_3::TypeIdentifierPair> TypeIdentifierPairSeq;



                /*!
                 * @brief This class represents the TopicDataType of the type TypeIdentfierWithSize defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class TypeIdentfierWithSizePubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef TypeIdentfierWithSize type;

                    eProsima_user_DllExport TypeIdentfierWithSizePubSubType();

                    eProsima_user_DllExport ~TypeIdentfierWithSizePubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };


                typedef std::vector<eprosima::fastdds::dds::xtypes1_3::TypeIdentfierWithSize> TypeIdentfierWithSizeSeq;





                /*!
                 * @brief This class represents the TopicDataType of the type TypeIdentifierWithDependencies defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class TypeIdentifierWithDependenciesPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef TypeIdentifierWithDependencies type;

                    eProsima_user_DllExport TypeIdentifierWithDependenciesPubSubType();

                    eProsima_user_DllExport ~TypeIdentifierWithDependenciesPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };


                typedef std::vector<eprosima::fastdds::dds::xtypes1_3::TypeIdentifierWithDependencies> TypeIdentifierWithDependenciesSeq;



                /*!
                 * @brief This class represents the TopicDataType of the type TypeInformation defined by the user in the IDL file.
                 * @ingroup TypeObject
                 */
                class TypeInformationPubSubType : public eprosima::fastdds::dds::TopicDataType
                {
                public:

                    typedef TypeInformation type;

                    eProsima_user_DllExport TypeInformationPubSubType();

                    eProsima_user_DllExport ~TypeInformationPubSubType() override;

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override
                    {
                        return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport bool serialize(
                            void* data,
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool deserialize(
                            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                            void* data) override;

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data) override
                    {
                        return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
                    }

                    eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
                            void* data,
                            eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;

                    eProsima_user_DllExport bool getKey(
                            void* data,
                            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                            bool force_md5 = false) override;

                    eProsima_user_DllExport void* createData() override;

                    eProsima_user_DllExport void deleteData(
                            void* data) override;

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                    eProsima_user_DllExport inline bool is_bounded() const override
                    {
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

                #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                    eProsima_user_DllExport inline bool is_plain() const override
                    {
                        return false;
                    }

                    eProsima_user_DllExport inline bool is_plain(
                        eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override
                    {
                        static_cast<void>(data_representation);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

                #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                    eProsima_user_DllExport inline bool construct_sample(
                            void* memory) const override
                    {
                        static_cast<void>(memory);
                        return false;
                    }

                #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                    MD5 m_md5;
                    unsigned char* m_keyBuffer;

                };


                typedef std::vector<eprosima::fastdds::dds::xtypes1_3::TypeInformation> TypeInformationSeq;
            }
        }
    }
}

#endif // _FAST_DDS_GENERATED_EPROSIMA_FASTDDS_DDS_XTYPES1_3_TYPEOBJECT_PUBSUBTYPES_H_

