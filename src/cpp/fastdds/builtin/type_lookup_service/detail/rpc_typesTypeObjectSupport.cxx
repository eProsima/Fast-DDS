// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file rpc_typesTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "rpc_typesTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "rpc_types.hpp"


using namespace eprosima::fastdds::dds::xtypes;

void register_rpc_types_type_objects()
{
    static std::once_flag once_flag;
    std::call_once(once_flag, []()
            {
                eprosima::fastdds::dds::register_eprosima_fastdds_dds_EntityId_t_type_identifier();

                eprosima::fastdds::dds::register_eprosima_fastdds_dds_GUID_t_type_identifier();

                eprosima::fastdds::dds::register_eprosima_fastdds_dds_SequenceNumber_t_type_identifier();

                eprosima::fastdds::dds::register_eprosima_fastdds_dds_SampleIdentity_type_identifier();

                eprosima::fastdds::dds::rpc::register_eprosima_fastdds_dds_rpc_RequestHeader_type_identifier();

                eprosima::fastdds::dds::rpc::register_eprosima_fastdds_dds_rpc_ReplyHeader_type_identifier();

            });
}

namespace eprosima {

namespace fastdds {

namespace dds {


void register_eprosima_fastdds_dds_EntityId_t_type_identifier()
{
    {
        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                true, false);
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        QualifiedTypeName type_name = "eprosima::fastdds::dds::EntityId_t";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        AppliedAnnotationSeq tmp_ann_custom;
        eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim;
        if (!tmp_ann_custom.empty())
        {
            ann_custom = tmp_ann_custom;
        }

        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteStructHeader header;
        header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
        CompleteStructMemberSeq member_seq;
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_uint8_t_3", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_byte", type_ids);

                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier {nullptr};
                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                {
                    element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                {
                    element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind = EK_COMPLETE;
                if (TK_NONE == type_ids.type_identifier2()._d())
                {
                    equiv_kind = EK_BOTH;
                }
                CollectionElementFlag element_flags = 0;
                PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(3));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_3"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_uint8_t_3 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(3));

                    PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_3"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_uint8_t_3 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_array_uint8_t_3", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_array_uint8_t_3: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure entityKey member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "entityKey";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_byte", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "entityKind Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000001;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure entityKind member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "entityKind";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "eprosima::fastdds::dds::EntityId_t already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "eprosima::fastdds::dds::EntityId_t", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "eprosima::fastdds::dds::EntityId_t: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_eprosima_fastdds_dds_GUID_t_type_identifier()
{
    {
        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                true, false);
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        QualifiedTypeName type_name = "eprosima::fastdds::dds::GUID_t";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        AppliedAnnotationSeq tmp_ann_custom;
        eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim;
        if (!tmp_ann_custom.empty())
        {
            ann_custom = tmp_ann_custom;
        }

        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteStructHeader header;
        header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
        CompleteStructMemberSeq member_seq;
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "eprosima::fastdds::dds::GuidPrefix_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                AliasTypeFlag alias_flags = 0;
                QualifiedTypeName type_name = "eprosima::fastdds::dds::GuidPrefix_t";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                AliasMemberFlag related_flags = 0;
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_array_uint8_t_12", type_ids);

                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_byte", type_ids);

                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    TypeIdentifier* element_identifier {nullptr};
                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                    {
                        element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                    {
                        element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier inconsistent.");
                        return;
                    }
                    EquivalenceKind equiv_kind = EK_COMPLETE;
                    if (TK_NONE == type_ids.type_identifier2()._d())
                    {
                        equiv_kind = EK_BOTH;
                    }
                    CollectionElementFlag element_flags = 0;
                    PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                    std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                    if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                    {
                        SBoundSeq array_bound_seq;
                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(12));

                        PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_12"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else
                    {
                        LBoundSeq array_bound_seq;
                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(12));

                        PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_12"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_array_uint8_t_12", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_array_uint8_t_12: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                CommonAliasBody common;
                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                {
                    common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                {
                    common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "eprosima::fastdds::dds::GuidPrefix_t related TypeIdentifier inconsistent.");
                    return;
                }
                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                ann_custom.reset();
                CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "eprosima::fastdds::dds::GuidPrefix_t already registered in TypeObjectRegistry for a different type.");
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "eprosima::fastdds::dds::GuidPrefix_t", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "eprosima::fastdds::dds::GuidPrefix_t: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure guidPrefix member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "guidPrefix";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "eprosima::fastdds::dds::EntityId_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            true, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    QualifiedTypeName type_name = "eprosima::fastdds::dds::EntityId_t";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    AppliedAnnotationSeq tmp_ann_custom;
                    eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim;
                    if (!tmp_ann_custom.empty())
                    {
                        ann_custom = tmp_ann_custom;
                    }

                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_array_uint8_t_3", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_byte", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            TypeIdentifier* element_identifier {nullptr};
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Array element TypeIdentifier inconsistent.");
                                return;
                            }
                            EquivalenceKind equiv_kind = EK_COMPLETE;
                            if (TK_NONE == type_ids.type_identifier2()._d())
                            {
                                equiv_kind = EK_BOTH;
                            }
                            CollectionElementFlag element_flags = 0;
                            PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                            std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                            if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                            {
                                SBoundSeq array_bound_seq;
                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(3));

                                PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_3"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_array_uint8_t_3 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                LBoundSeq array_bound_seq;
                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(3));

                                PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_3"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_array_uint8_t_3 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_array_uint8_t_3", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_array_uint8_t_3: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure entityKey member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "entityKey";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_byte", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "entityKind Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure entityKind member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "entityKind";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "eprosima::fastdds::dds::EntityId_t already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "eprosima::fastdds::dds::EntityId_t", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "eprosima::fastdds::dds::EntityId_t: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000001;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure entityId member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "entityId";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "eprosima::fastdds::dds::GUID_t already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "eprosima::fastdds::dds::GUID_t", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "eprosima::fastdds::dds::GUID_t: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_eprosima_fastdds_dds_SequenceNumber_t_type_identifier()
{
    {
        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                true, false);
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        QualifiedTypeName type_name = "eprosima::fastdds::dds::SequenceNumber_t";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        AppliedAnnotationSeq tmp_ann_custom;
        eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim;
        if (!tmp_ann_custom.empty())
        {
            ann_custom = tmp_ann_custom;
        }

        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteStructHeader header;
        header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
        CompleteStructMemberSeq member_seq;
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "high Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure high member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "high";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "low Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000001;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure low member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "low";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "eprosima::fastdds::dds::SequenceNumber_t already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "eprosima::fastdds::dds::SequenceNumber_t", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "eprosima::fastdds::dds::SequenceNumber_t: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_eprosima_fastdds_dds_SampleIdentity_type_identifier()
{
    {
        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                true, false);
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        QualifiedTypeName type_name = "eprosima::fastdds::dds::SampleIdentity";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        AppliedAnnotationSeq tmp_ann_custom;
        eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim;
        if (!tmp_ann_custom.empty())
        {
            ann_custom = tmp_ann_custom;
        }

        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteStructHeader header;
        header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
        CompleteStructMemberSeq member_seq;
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "eprosima::fastdds::dds::GUID_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            true, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    QualifiedTypeName type_name = "eprosima::fastdds::dds::GUID_t";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    AppliedAnnotationSeq tmp_ann_custom;
                    eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim;
                    if (!tmp_ann_custom.empty())
                    {
                        ann_custom = tmp_ann_custom;
                    }

                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::dds::GuidPrefix_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            AliasTypeFlag alias_flags = 0;
                            QualifiedTypeName type_name = "eprosima::fastdds::dds::GuidPrefix_t";
                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                            CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                            AliasMemberFlag related_flags = 0;
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_array_uint8_t_12", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_byte", type_ids);

                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                TypeIdentifier* element_identifier {nullptr};
                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                {
                                    element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                {
                                    element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Array element TypeIdentifier inconsistent.");
                                    return;
                                }
                                EquivalenceKind equiv_kind = EK_COMPLETE;
                                if (TK_NONE == type_ids.type_identifier2()._d())
                                {
                                    equiv_kind = EK_BOTH;
                                }
                                CollectionElementFlag element_flags = 0;
                                PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                {
                                    SBoundSeq array_bound_seq;
                                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(12));

                                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_12"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    LBoundSeq array_bound_seq;
                                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(12));

                                    PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_12"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_array_uint8_t_12", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_array_uint8_t_12: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            CommonAliasBody common;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "eprosima::fastdds::dds::GuidPrefix_t related TypeIdentifier inconsistent.");
                                return;
                            }
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                            CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "eprosima::fastdds::dds::GuidPrefix_t already registered in TypeObjectRegistry for a different type.");
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "eprosima::fastdds::dds::GuidPrefix_t", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::dds::GuidPrefix_t: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure guidPrefix member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "guidPrefix";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::dds::EntityId_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        true, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::dds::EntityId_t";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                AppliedAnnotationSeq tmp_ann_custom;
                                eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim;
                                if (!tmp_ann_custom.empty())
                                {
                                    ann_custom = tmp_ann_custom;
                                }

                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_array_uint8_t_3", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_byte", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        TypeIdentifier* element_identifier {nullptr};
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Array element TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        EquivalenceKind equiv_kind = EK_COMPLETE;
                                        if (TK_NONE == type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_BOTH;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                        if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                        {
                                            SBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(3));

                                            PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_3"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_3 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(3));

                                            PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_3"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_3 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_array_uint8_t_3", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_uint8_t_3: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure entityKey member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "entityKey";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_byte", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "entityKind Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000001;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure entityKind member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "entityKind";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::dds::EntityId_t already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::dds::EntityId_t", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::dds::EntityId_t: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure entityId member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "entityId";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "eprosima::fastdds::dds::GUID_t already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "eprosima::fastdds::dds::GUID_t", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "eprosima::fastdds::dds::GUID_t: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure writer_guid member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "writer_guid";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "eprosima::fastdds::dds::SequenceNumber_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            true, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    QualifiedTypeName type_name = "eprosima::fastdds::dds::SequenceNumber_t";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    AppliedAnnotationSeq tmp_ann_custom;
                    eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim;
                    if (!tmp_ann_custom.empty())
                    {
                        ann_custom = tmp_ann_custom;
                    }

                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "high Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure high member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "high";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_uint32_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "low Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure low member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "low";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "eprosima::fastdds::dds::SequenceNumber_t already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "eprosima::fastdds::dds::SequenceNumber_t", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "eprosima::fastdds::dds::SequenceNumber_t: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000001;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure sequence_number member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "sequence_number";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "eprosima::fastdds::dds::SampleIdentity already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "eprosima::fastdds::dds::SampleIdentity", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "eprosima::fastdds::dds::SampleIdentity: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
namespace rpc {
void register_eprosima_fastdds_dds_rpc_RequestHeader_type_identifier()
{
    {
        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                true, false);
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        QualifiedTypeName type_name = "eprosima::fastdds::dds::rpc::RequestHeader";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        AppliedAnnotationSeq tmp_ann_custom;
        eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim;
        if (!tmp_ann_custom.empty())
        {
            ann_custom = tmp_ann_custom;
        }

        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteStructHeader header;
        header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
        CompleteStructMemberSeq member_seq;
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "eprosima::fastdds::dds::SampleIdentity", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            true, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    QualifiedTypeName type_name = "eprosima::fastdds::dds::SampleIdentity";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    AppliedAnnotationSeq tmp_ann_custom;
                    eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim;
                    if (!tmp_ann_custom.empty())
                    {
                        ann_custom = tmp_ann_custom;
                    }

                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::dds::GUID_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        true, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::dds::GUID_t";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                AppliedAnnotationSeq tmp_ann_custom;
                                eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim;
                                if (!tmp_ann_custom.empty())
                                {
                                    ann_custom = tmp_ann_custom;
                                }

                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "eprosima::fastdds::dds::GuidPrefix_t", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        AliasTypeFlag alias_flags = 0;
                                        QualifiedTypeName type_name = "eprosima::fastdds::dds::GuidPrefix_t";
                                        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                        CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                                        AliasMemberFlag related_flags = 0;
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_array_uint8_t_12", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "_byte", type_ids);

                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                            TypeIdentifier* element_identifier {nullptr};
                                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                            {
                                                element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                            }
                                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                            {
                                                element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                            }
                                            else
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Array element TypeIdentifier inconsistent.");
                                                return;
                                            }
                                            EquivalenceKind equiv_kind = EK_COMPLETE;
                                            if (TK_NONE == type_ids.type_identifier2()._d())
                                            {
                                                equiv_kind = EK_BOTH;
                                            }
                                            CollectionElementFlag element_flags = 0;
                                            PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                            std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                            if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                            {
                                                SBoundSeq array_bound_seq;
                                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(12));

                                                PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                        TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_12"))
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                                }
                                            }
                                            else
                                            {
                                                LBoundSeq array_bound_seq;
                                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(12));

                                                PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                        TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_12"))
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                                }
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "anonymous_array_uint8_t_12", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "anonymous_array_uint8_t_12: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                        CommonAliasBody common;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "eprosima::fastdds::dds::GuidPrefix_t related TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                                        CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::dds::GuidPrefix_t already registered in TypeObjectRegistry for a different type.");
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "eprosima::fastdds::dds::GuidPrefix_t", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "eprosima::fastdds::dds::GuidPrefix_t: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure guidPrefix member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "guidPrefix";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "eprosima::fastdds::dds::EntityId_t", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        {
                                            StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                                    true, false);
                                            ReturnCode_t return_code;
                                            TypeIdentifierPair type_ids;
                                            QualifiedTypeName type_name = "eprosima::fastdds::dds::EntityId_t";
                                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                            AppliedAnnotationSeq tmp_ann_custom;
                                            eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim;
                                            if (!tmp_ann_custom.empty())
                                            {
                                                ann_custom = tmp_ann_custom;
                                            }

                                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                            CompleteStructHeader header;
                                            header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                            CompleteStructMemberSeq member_seq;
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "anonymous_array_uint8_t_3", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_byte", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    TypeIdentifier* element_identifier {nullptr};
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Array element TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    EquivalenceKind equiv_kind = EK_COMPLETE;
                                                    if (TK_NONE == type_ids.type_identifier2()._d())
                                                    {
                                                        equiv_kind = EK_BOTH;
                                                    }
                                                    CollectionElementFlag element_flags = 0;
                                                    PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                                    std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                                    if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                                    {
                                                        SBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(3));

                                                        PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_3"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_3 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        LBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(3));

                                                        PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_3"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_3 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "anonymous_array_uint8_t_3", type_ids);
                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "anonymous_array_uint8_t_3: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000000;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure entityKey member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "entityKey";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "_byte", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "entityKind Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                    return;
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000001;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure entityKind member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "entityKind";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "eprosima::fastdds::dds::EntityId_t already registered in TypeObjectRegistry for a different type.");
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "eprosima::fastdds::dds::EntityId_t", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "eprosima::fastdds::dds::EntityId_t: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000001;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure entityId member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "entityId";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::dds::GUID_t already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::dds::GUID_t", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::dds::GUID_t: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure writer_guid member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "writer_guid";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::dds::SequenceNumber_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        true, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::dds::SequenceNumber_t";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                AppliedAnnotationSeq tmp_ann_custom;
                                eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim;
                                if (!tmp_ann_custom.empty())
                                {
                                    ann_custom = tmp_ann_custom;
                                }

                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_int32_t", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "high Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure high member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "high";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_uint32_t", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "low Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000001;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure low member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "low";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::dds::SequenceNumber_t already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::dds::SequenceNumber_t", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::dds::SequenceNumber_t: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure sequence_number member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "sequence_number";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "eprosima::fastdds::dds::SampleIdentity already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "eprosima::fastdds::dds::SampleIdentity", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "eprosima::fastdds::dds::SampleIdentity: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure requestId member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "requestId";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "eprosima::fastdds::dds::rpc::InstanceName", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                AliasTypeFlag alias_flags = 0;
                QualifiedTypeName type_name = "eprosima::fastdds::dds::rpc::InstanceName";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                AliasMemberFlag related_flags = 0;
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_255", type_ids);

                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    std::string type_id_kind("TI_STRING8_SMALL");
                    if (type_id_kind == "TI_STRING8_SMALL")
                    {
                        SBound bound = static_cast<SBound>(255);
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_255"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_255 already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else if (type_id_kind == "TI_STRING8_LARGE")
                    {
                        LBound bound = 255;
                        StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                "anonymous_string_255"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_255 already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_string_255: Unknown String kind.");
                        return;
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_string_255", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_string_255: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                CommonAliasBody common;
                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                {
                    common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                {
                    common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "eprosima::fastdds::dds::rpc::InstanceName related TypeIdentifier inconsistent.");
                    return;
                }
                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                ann_custom.reset();
                CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "eprosima::fastdds::dds::rpc::InstanceName already registered in TypeObjectRegistry for a different type.");
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "eprosima::fastdds::dds::rpc::InstanceName", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "eprosima::fastdds::dds::rpc::InstanceName: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000001;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure instanceName member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "instanceName";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "eprosima::fastdds::dds::rpc::RequestHeader already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "eprosima::fastdds::dds::rpc::RequestHeader", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "eprosima::fastdds::dds::rpc::RequestHeader: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_eprosima_fastdds_dds_rpc_ReplyHeader_type_identifier()
{
    {
        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                true, false);
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        QualifiedTypeName type_name = "eprosima::fastdds::dds::rpc::ReplyHeader";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        AppliedAnnotationSeq tmp_ann_custom;
        eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim;
        if (!tmp_ann_custom.empty())
        {
            ann_custom = tmp_ann_custom;
        }

        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteStructHeader header;
        header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
        CompleteStructMemberSeq member_seq;
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "eprosima::fastdds::dds::SampleIdentity", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            true, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    QualifiedTypeName type_name = "eprosima::fastdds::dds::SampleIdentity";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    AppliedAnnotationSeq tmp_ann_custom;
                    eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim;
                    if (!tmp_ann_custom.empty())
                    {
                        ann_custom = tmp_ann_custom;
                    }

                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::dds::GUID_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        true, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::dds::GUID_t";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                AppliedAnnotationSeq tmp_ann_custom;
                                eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim;
                                if (!tmp_ann_custom.empty())
                                {
                                    ann_custom = tmp_ann_custom;
                                }

                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "eprosima::fastdds::dds::GuidPrefix_t", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        AliasTypeFlag alias_flags = 0;
                                        QualifiedTypeName type_name = "eprosima::fastdds::dds::GuidPrefix_t";
                                        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                        CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                                        AliasMemberFlag related_flags = 0;
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_array_uint8_t_12", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "_byte", type_ids);

                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                            TypeIdentifier* element_identifier {nullptr};
                                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                            {
                                                element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                            }
                                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                            {
                                                element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                            }
                                            else
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Array element TypeIdentifier inconsistent.");
                                                return;
                                            }
                                            EquivalenceKind equiv_kind = EK_COMPLETE;
                                            if (TK_NONE == type_ids.type_identifier2()._d())
                                            {
                                                equiv_kind = EK_BOTH;
                                            }
                                            CollectionElementFlag element_flags = 0;
                                            PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                            std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                            if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                            {
                                                SBoundSeq array_bound_seq;
                                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(12));

                                                PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                        TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_12"))
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                                }
                                            }
                                            else
                                            {
                                                LBoundSeq array_bound_seq;
                                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(12));

                                                PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                        TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_12"))
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                                }
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "anonymous_array_uint8_t_12", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "anonymous_array_uint8_t_12: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                        CommonAliasBody common;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "eprosima::fastdds::dds::GuidPrefix_t related TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                                        CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::dds::GuidPrefix_t already registered in TypeObjectRegistry for a different type.");
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "eprosima::fastdds::dds::GuidPrefix_t", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "eprosima::fastdds::dds::GuidPrefix_t: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure guidPrefix member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "guidPrefix";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "eprosima::fastdds::dds::EntityId_t", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        {
                                            StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                                    true, false);
                                            ReturnCode_t return_code;
                                            TypeIdentifierPair type_ids;
                                            QualifiedTypeName type_name = "eprosima::fastdds::dds::EntityId_t";
                                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                            AppliedAnnotationSeq tmp_ann_custom;
                                            eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim;
                                            if (!tmp_ann_custom.empty())
                                            {
                                                ann_custom = tmp_ann_custom;
                                            }

                                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                            CompleteStructHeader header;
                                            header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                            CompleteStructMemberSeq member_seq;
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "anonymous_array_uint8_t_3", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_byte", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    TypeIdentifier* element_identifier {nullptr};
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Array element TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    EquivalenceKind equiv_kind = EK_COMPLETE;
                                                    if (TK_NONE == type_ids.type_identifier2()._d())
                                                    {
                                                        equiv_kind = EK_BOTH;
                                                    }
                                                    CollectionElementFlag element_flags = 0;
                                                    PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                                    std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                                    if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                                    {
                                                        SBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(3));

                                                        PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_3"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_3 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        LBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(3));

                                                        PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_3"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_3 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "anonymous_array_uint8_t_3", type_ids);
                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "anonymous_array_uint8_t_3: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000000;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure entityKey member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "entityKey";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "_byte", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "entityKind Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                    return;
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000001;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure entityKind member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "entityKind";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "eprosima::fastdds::dds::EntityId_t already registered in TypeObjectRegistry for a different type.");
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "eprosima::fastdds::dds::EntityId_t", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "eprosima::fastdds::dds::EntityId_t: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000001;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure entityId member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "entityId";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::dds::GUID_t already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::dds::GUID_t", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::dds::GUID_t: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure writer_guid member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "writer_guid";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::dds::SequenceNumber_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        true, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::dds::SequenceNumber_t";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                AppliedAnnotationSeq tmp_ann_custom;
                                eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim;
                                if (!tmp_ann_custom.empty())
                                {
                                    ann_custom = tmp_ann_custom;
                                }

                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_int32_t", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "high Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure high member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "high";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_uint32_t", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "low Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000001;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure low member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "low";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::dds::SequenceNumber_t already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::dds::SequenceNumber_t", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::dds::SequenceNumber_t: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure sequence_number member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "sequence_number";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "eprosima::fastdds::dds::SampleIdentity already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "eprosima::fastdds::dds::SampleIdentity", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "eprosima::fastdds::dds::SampleIdentity: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure relatedRequestId member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "relatedRequestId";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "eprosima::fastdds::dds::rpc::RemoteExceptionCode_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EnumTypeFlag enum_flags = 0;
                BitBound bit_bound = 32;
                CommonEnumeratedHeader common = TypeObjectUtils::build_common_enumerated_header(bit_bound);
                QualifiedTypeName type_name = "eprosima::fastdds::dds::rpc::RemoteExceptionCode_t";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                CompleteEnumeratedHeader header = TypeObjectUtils::build_complete_enumerated_header(common, detail);
                CompleteEnumeratedLiteralSeq literal_seq;
                int32_t value = 0; // TODO(jlbueno): remove
                {
                    EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                    // TODO(jlbueno): getIndex
                    CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                    value++; // TODO(jlbueno): remove
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    MemberName name = "REMOTE_EX_OK";
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                }
                {
                    EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                    // TODO(jlbueno): getIndex
                    CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                    value++; // TODO(jlbueno): remove
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    MemberName name = "REMOTE_EX_UNSUPPORTED";
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                }
                {
                    EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                    // TODO(jlbueno): getIndex
                    CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                    value++; // TODO(jlbueno): remove
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    MemberName name = "REMOTE_EX_INVALID_ARGUMENT";
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                }
                {
                    EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                    // TODO(jlbueno): getIndex
                    CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                    value++; // TODO(jlbueno): remove
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    MemberName name = "REMOTE_EX_OUT_OF_RESOURCES";
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                }
                {
                    EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                    // TODO(jlbueno): getIndex
                    CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                    value++; // TODO(jlbueno): remove
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    MemberName name = "REMOTE_EX_UNKNOWN_OPERATION";
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                }
                {
                    EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                    // TODO(jlbueno): getIndex
                    CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                    value++; // TODO(jlbueno): remove
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    MemberName name = "REMOTE_EX_UNKNOWN_EXCEPTION";
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                }
                CompleteEnumeratedType enumerated_type = TypeObjectUtils::build_complete_enumerated_type(enum_flags, header,
                        literal_seq);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type, type_name.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "eprosima::fastdds::dds::rpc::RemoteExceptionCode_t already registered in TypeObjectRegistry for a different type.");
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "eprosima::fastdds::dds::rpc::RemoteExceptionCode_t", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "eprosima::fastdds::dds::rpc::RemoteExceptionCode_t: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000001;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure remoteEx member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "remoteEx";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "eprosima::fastdds::dds::rpc::ReplyHeader already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "eprosima::fastdds::dds::rpc::ReplyHeader", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "eprosima::fastdds::dds::rpc::ReplyHeader: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}

} // namespace rpc


} // namespace dds

} // namespace fastdds

} // namespace eprosima

