// Copyright 2023 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This IDL is intended to generate the Builtin Annotations TypeObject.
// Fast DDS-Gen does not support @annotation yet, so the TypeObject related to this IDL is not automatically generated

// IDL v4.2 Clause 8.3 Standardized Groups of Annotations

/* Clause 8.3.1 Group of Annotations General Purpose*/
// Clause 8.3.1.1 @id Annotation
@annotation id {
    unsigned long value;
};

// Clause 8.3.1.2 @autoid Annotation
@annotation autoid {
    enum AutoidKind {
        SEQUENTIAL,
        HASH
    };
    AutoidKind value default HASH;
};

// Clause 8.3.1.3 @optional Annotation
@annotation optional {
    boolean value default TRUE;
};

// Clause 8.3.1.4 @position Annotation
@annotation position {
    unsigned short value;
};

// Clause 8.3.1.5 @value Annotation
@annotation value {
    any value;
};

// Clause 8.3.1.6 @extensibility Annotation
@annotation extensibility {
    enum ExtensibilityKind {
        FINAL,
        APPENDABLE,
        MUTABLE
    };
    ExtensibilityKind value;
};

// Clause 8.3.1.7 @final Annotation
@annotation final {
};

// Clause 8.3.1.8 @appendable Annotation
@annotation appendable {
};

// Clause 8.3.1.9 @mutable Annotation
@annotation mutable {
};

/* Clause 8.3.2 Group of Annotations Data Modeling */
// Clause 8.3.2.1 @key annotation
@annotation key {
    boolean value default TRUE;
};

// Clause 8.3.2.2 @must_understand Annotation
@annotation must_understand {
    boolean value default TRUE;
};

// Clause 8.3.2.3 @default_literal Annotation
@annotation default_literal{
};

/* Clause 8.3.3 Group of Annotations: Units and Ranges*/
// Clause 8.3.3.1 @default Annotation
@annotation default {
    any value;
};

// Clause 8.3.3.2 @range Annotation
@annotation range {
    any min;
    any max;
};

// Clause 8.3.3.3 @min Annotation
@annotation min {
    any value;
};

// Clause 8.3.3.4 @max Annotation
@annotation max {
    any value;
};

// Clause 8.3.3.5 @unit Annotation
@annotation unit {
    string value;
};

/* Clause 8.3.4 Group of Annotations Data Implementation */
// Clause 8.3.4.1 @bit_bound Annotation
@annotation bit_bound {
    unsigned short value;
};

// Clause 8.3.4.2 @external Annotation
@annotation external {
    boolean value default TRUE;
};

// Clause 8.3.4.3 @nested Annotation
@annotation nested {
    boolean value default TRUE;
};

/* Clause 8.3.5 Group of Annotations Code Generation */
// Clause 8.3.5.1 @verbatim Annotation
@annotation verbatim {
    enum PlacementKind {
        BEGIN_FILE,
        BEFORE_DECLARATION,
        BEGIN_DECLARATION,
        END_DECLARATION,
        AFTER_DECLARATION,
        END_FILE
    };
    string language default "*";
    PlacementKind placement default BEFORE_DECLARATION;
    string text;
};

/* Clause 8.3.6 Group of Annotations Interfaces */
// Clause 8.3.6.1 @service Annotation
@annotation service {
    string platform default "*";
};

// Clause 8.3.6.2 @oneway Annotation
@annotation oneway {
    boolean value default TRUE;
};

// Clause 8.3.6.3 @ami Annotation
@annotation ami {
    boolean value default TRUE;
};

// XTypes v1.3 Clause 7.3.1.2.1 Built-in Annotations
// Clause 7.3.1.2.1.1 Member IDs
@annotation hashid {
    string value default "";
};

// Clause 7.3.1.2.1.7 Nested Types
@annotation default_nested {
    boolean value default TRUE;
};

// Clause 7.3.1.2.1.11 Ignore Literal Names for Enumeration
@annotation ignore_literal_names {
    boolean value default TRUE;
};

// Clause 7.3.1.2.1.12 TryConstruct Elements and Members
enum TryConstructFailAction {
    DISCARD,
    USE_DEFAULT,
    TRIM
};

@annotation try_construct {
    TryConstructFailAction value default USE_DEFAULT;
};

// Clause 7.3.1.2.1.14 Non-serialized Members
@annotation non_serialized {
    boolean value default TRUE;
};

// Clause 7.3.1.2.1.15 Constrained Data Representations
// Positions are defined to match the values of the DataRepresentationId_t
// XCDR_DATA_REPRESENTATION, XML_DATA_REPRESENTATION, and
// XCDR2_DATA_REPRESENTATION
@bit_bound(32)
bitmask DataRepresentationMask {
    @position(0) XCDR1,
    @position(1) XML,
    @position(2) XCDR2
}

@annotation data_representation {
    DataRepresentationMask allowed_kinds;
};

// Clause 7.3.1.2.1.16 Explicit declaration of Topic types
@annotation topic {
    string name default "";
    string platform default "*";
};
