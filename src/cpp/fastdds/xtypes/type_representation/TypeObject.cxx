// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TypeObject.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include <fastdds/dds/xtypes/type_representation/TypeObject.h>
#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


eprosima::fastdds::dds::xtypes::TypeObjectHashId::TypeObjectHashId()
{
    m__d = EK_COMPLETE;
}

eprosima::fastdds::dds::xtypes::TypeObjectHashId::~TypeObjectHashId()
{
}

eprosima::fastdds::dds::xtypes::TypeObjectHashId::TypeObjectHashId(
        const TypeObjectHashId& x)
{
    m__d = x.m__d;

    switch (m__d)
    {
        case EK_COMPLETE:
        case EK_MINIMAL:
            m_hash = x.m_hash;
            break;

        default:
            break;
    }
}

eprosima::fastdds::dds::xtypes::TypeObjectHashId::TypeObjectHashId(
        TypeObjectHashId&& x) noexcept
{
    m__d = x.m__d;

    switch (m__d)
    {
        case EK_COMPLETE:
        case EK_MINIMAL:
            m_hash = std::move(x.m_hash);

            break;

        default:
            break;
    }
}

eprosima::fastdds::dds::xtypes::TypeObjectHashId& eprosima::fastdds::dds::xtypes::TypeObjectHashId::operator =(
        const TypeObjectHashId& x)
{
    m__d = x.m__d;

    switch (m__d)
    {
        case EK_COMPLETE:
        case EK_MINIMAL:
            m_hash = x.m_hash;
            break;

        default:
            break;
    }

    return *this;
}

eprosima::fastdds::dds::xtypes::TypeObjectHashId& eprosima::fastdds::dds::xtypes::TypeObjectHashId::operator =(
        TypeObjectHashId&& x) noexcept
{
    m__d = x.m__d;

    switch (m__d)
    {
        case EK_COMPLETE:
        case EK_MINIMAL:
            m_hash = std::move(x.m_hash);

            break;

        default:
            break;
    }

    return *this;
}

bool eprosima::fastdds::dds::xtypes::TypeObjectHashId::operator ==(
        const TypeObjectHashId& x) const
{
    if (m__d != x.m__d)
    {
        return false;
    }

    switch (m__d)
    {
        case EK_COMPLETE:
        case EK_MINIMAL:
            return (m_hash == x.m_hash);
            break;

        default:
            break;
    }
    return false;
}

bool eprosima::fastdds::dds::xtypes::TypeObjectHashId::operator !=(
        const TypeObjectHashId& x) const
{
    return !(*this == x);
}

void eprosima::fastdds::dds::xtypes::TypeObjectHashId::_d(
        uint8_t __d)
{
    bool b = false;

    switch (m__d)
    {
        case EK_COMPLETE:
        case EK_MINIMAL:
            switch (__d)
            {
                case EK_COMPLETE:
                case EK_MINIMAL:
                    b = true;
                    break;
                default:
                    break;
            }
            break;

        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("Discriminator doesn't correspond with the selected union member");
    }

    m__d = __d;
}

uint8_t eprosima::fastdds::dds::xtypes::TypeObjectHashId::_d() const
{
    return m__d;
}

uint8_t& eprosima::fastdds::dds::xtypes::TypeObjectHashId::_d()
{
    return m__d;
}

void eprosima::fastdds::dds::xtypes::TypeObjectHashId::hash(
        const eprosima::fastdds::dds::xtypes::EquivalenceHash& _hash)
{
    m_hash = _hash;
    m__d = EK_COMPLETE;

}

void eprosima::fastdds::dds::xtypes::TypeObjectHashId::hash(
        eprosima::fastdds::dds::xtypes::EquivalenceHash&& _hash)
{
    m_hash = std::move(_hash);
    m__d = EK_COMPLETE;

}

const eprosima::fastdds::dds::xtypes::EquivalenceHash& eprosima::fastdds::dds::xtypes::TypeObjectHashId::hash() const
{
    bool b = false;

    switch (m__d)
    {
        case EK_COMPLETE:
        case EK_MINIMAL:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_hash;
}

eprosima::fastdds::dds::xtypes::EquivalenceHash& eprosima::fastdds::dds::xtypes::TypeObjectHashId::hash()
{
    bool b = false;

    switch (m__d)
    {
        case EK_COMPLETE:
        case EK_MINIMAL:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_hash;
}
























eprosima::fastdds::dds::xtypes::StringSTypeDefn::StringSTypeDefn()
{

}

eprosima::fastdds::dds::xtypes::StringSTypeDefn::~StringSTypeDefn()
{
}

eprosima::fastdds::dds::xtypes::StringSTypeDefn::StringSTypeDefn(
        const StringSTypeDefn& x)
{
    m_bound = x.m_bound;
}

eprosima::fastdds::dds::xtypes::StringSTypeDefn::StringSTypeDefn(
        StringSTypeDefn&& x) noexcept
{
    m_bound = x.m_bound;
}

eprosima::fastdds::dds::xtypes::StringSTypeDefn& eprosima::fastdds::dds::xtypes::StringSTypeDefn::operator =(
        const StringSTypeDefn& x)
{

    m_bound = x.m_bound;
    return *this;
}

eprosima::fastdds::dds::xtypes::StringSTypeDefn& eprosima::fastdds::dds::xtypes::StringSTypeDefn::operator =(
        StringSTypeDefn&& x) noexcept
{

    m_bound = x.m_bound;
    return *this;
}

bool eprosima::fastdds::dds::xtypes::StringSTypeDefn::operator ==(
        const StringSTypeDefn& x) const
{
    return (m_bound == x.m_bound);
}

bool eprosima::fastdds::dds::xtypes::StringSTypeDefn::operator !=(
        const StringSTypeDefn& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member bound
 * @param _bound New value for member bound
 */
void eprosima::fastdds::dds::xtypes::StringSTypeDefn::bound(
        eprosima::fastdds::dds::xtypes::SBound _bound)
{
    m_bound = _bound;
}

/*!
 * @brief This function returns the value of member bound
 * @return Value of member bound
 */
eprosima::fastdds::dds::xtypes::SBound eprosima::fastdds::dds::xtypes::StringSTypeDefn::bound() const
{
    return m_bound;
}

/*!
 * @brief This function returns a reference to member bound
 * @return Reference to member bound
 */
eprosima::fastdds::dds::xtypes::SBound& eprosima::fastdds::dds::xtypes::StringSTypeDefn::bound()
{
    return m_bound;
}


eprosima::fastdds::dds::xtypes::StringLTypeDefn::StringLTypeDefn()
{

}

eprosima::fastdds::dds::xtypes::StringLTypeDefn::~StringLTypeDefn()
{
}

eprosima::fastdds::dds::xtypes::StringLTypeDefn::StringLTypeDefn(
        const StringLTypeDefn& x)
{
    m_bound = x.m_bound;
}

eprosima::fastdds::dds::xtypes::StringLTypeDefn::StringLTypeDefn(
        StringLTypeDefn&& x) noexcept
{
    m_bound = x.m_bound;
}

eprosima::fastdds::dds::xtypes::StringLTypeDefn& eprosima::fastdds::dds::xtypes::StringLTypeDefn::operator =(
        const StringLTypeDefn& x)
{

    m_bound = x.m_bound;
    return *this;
}

eprosima::fastdds::dds::xtypes::StringLTypeDefn& eprosima::fastdds::dds::xtypes::StringLTypeDefn::operator =(
        StringLTypeDefn&& x) noexcept
{

    m_bound = x.m_bound;
    return *this;
}

bool eprosima::fastdds::dds::xtypes::StringLTypeDefn::operator ==(
        const StringLTypeDefn& x) const
{
    return (m_bound == x.m_bound);
}

bool eprosima::fastdds::dds::xtypes::StringLTypeDefn::operator !=(
        const StringLTypeDefn& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member bound
 * @param _bound New value for member bound
 */
void eprosima::fastdds::dds::xtypes::StringLTypeDefn::bound(
        eprosima::fastdds::dds::xtypes::LBound _bound)
{
    m_bound = _bound;
}

/*!
 * @brief This function returns the value of member bound
 * @return Value of member bound
 */
eprosima::fastdds::dds::xtypes::LBound eprosima::fastdds::dds::xtypes::StringLTypeDefn::bound() const
{
    return m_bound;
}

/*!
 * @brief This function returns a reference to member bound
 * @return Reference to member bound
 */
eprosima::fastdds::dds::xtypes::LBound& eprosima::fastdds::dds::xtypes::StringLTypeDefn::bound()
{
    return m_bound;
}


eprosima::fastdds::dds::xtypes::PlainCollectionHeader::PlainCollectionHeader()
{

}

eprosima::fastdds::dds::xtypes::PlainCollectionHeader::~PlainCollectionHeader()
{
}

eprosima::fastdds::dds::xtypes::PlainCollectionHeader::PlainCollectionHeader(
        const PlainCollectionHeader& x)
{
    m_equiv_kind = x.m_equiv_kind;
    m_element_flags = x.m_element_flags;
}

eprosima::fastdds::dds::xtypes::PlainCollectionHeader::PlainCollectionHeader(
        PlainCollectionHeader&& x) noexcept
{
    m_equiv_kind = x.m_equiv_kind;
    m_element_flags = std::move(x.m_element_flags);
}

eprosima::fastdds::dds::xtypes::PlainCollectionHeader& eprosima::fastdds::dds::xtypes::PlainCollectionHeader::operator =(
        const PlainCollectionHeader& x)
{

    m_equiv_kind = x.m_equiv_kind;
    m_element_flags = x.m_element_flags;
    return *this;
}

eprosima::fastdds::dds::xtypes::PlainCollectionHeader& eprosima::fastdds::dds::xtypes::PlainCollectionHeader::operator =(
        PlainCollectionHeader&& x) noexcept
{

    m_equiv_kind = x.m_equiv_kind;
    m_element_flags = std::move(x.m_element_flags);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::PlainCollectionHeader::operator ==(
        const PlainCollectionHeader& x) const
{
    return (m_equiv_kind == x.m_equiv_kind &&
           m_element_flags == x.m_element_flags);
}

bool eprosima::fastdds::dds::xtypes::PlainCollectionHeader::operator !=(
        const PlainCollectionHeader& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member equiv_kind
 * @param _equiv_kind New value for member equiv_kind
 */
void eprosima::fastdds::dds::xtypes::PlainCollectionHeader::equiv_kind(
        eprosima::fastdds::dds::xtypes::EquivalenceKind _equiv_kind)
{
    m_equiv_kind = _equiv_kind;
}

/*!
 * @brief This function returns the value of member equiv_kind
 * @return Value of member equiv_kind
 */
eprosima::fastdds::dds::xtypes::EquivalenceKind eprosima::fastdds::dds::xtypes::PlainCollectionHeader::equiv_kind() const
{
    return m_equiv_kind;
}

/*!
 * @brief This function returns a reference to member equiv_kind
 * @return Reference to member equiv_kind
 */
eprosima::fastdds::dds::xtypes::EquivalenceKind& eprosima::fastdds::dds::xtypes::PlainCollectionHeader::equiv_kind()
{
    return m_equiv_kind;
}


/*!
 * @brief This function copies the value in member element_flags
 * @param _element_flags New value to be copied in member element_flags
 */
void eprosima::fastdds::dds::xtypes::PlainCollectionHeader::element_flags(
        const eprosima::fastdds::dds::xtypes::CollectionElementFlag& _element_flags)
{
    m_element_flags = _element_flags;
}

/*!
 * @brief This function moves the value in member element_flags
 * @param _element_flags New value to be moved in member element_flags
 */
void eprosima::fastdds::dds::xtypes::PlainCollectionHeader::element_flags(
        eprosima::fastdds::dds::xtypes::CollectionElementFlag&& _element_flags)
{
    m_element_flags = std::move(_element_flags);
}

/*!
 * @brief This function returns a constant reference to member element_flags
 * @return Constant reference to member element_flags
 */
const eprosima::fastdds::dds::xtypes::CollectionElementFlag& eprosima::fastdds::dds::xtypes::PlainCollectionHeader::element_flags() const
{
    return m_element_flags;
}

/*!
 * @brief This function returns a reference to member element_flags
 * @return Reference to member element_flags
 */
eprosima::fastdds::dds::xtypes::CollectionElementFlag& eprosima::fastdds::dds::xtypes::PlainCollectionHeader::element_flags()
{
    return m_element_flags;
}


eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn::PlainSequenceSElemDefn()
{
    m_element_identifier = new eprosima::fastdds::dds::xtypes::TypeIdentifier();


}

eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn::~PlainSequenceSElemDefn()
{
    delete m_element_identifier;
}

eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn::PlainSequenceSElemDefn(
        const PlainSequenceSElemDefn& x)
{
    m_header = x.m_header;
    m_bound = x.m_bound;
    m_element_identifier = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_element_identifier = *x.m_element_identifier;
}

eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn::PlainSequenceSElemDefn(
        PlainSequenceSElemDefn&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_bound = x.m_bound;
    m_element_identifier = x.m_element_identifier;x.m_element_identifier = nullptr;
}

eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn& eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn::operator =(
        const PlainSequenceSElemDefn& x)
{

    m_header = x.m_header;
    m_bound = x.m_bound;
    m_element_identifier = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_element_identifier = *x.m_element_identifier;
    return *this;
}

eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn& eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn::operator =(
        PlainSequenceSElemDefn&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_bound = x.m_bound;
    m_element_identifier = x.m_element_identifier;x.m_element_identifier = nullptr;
    return *this;
}

bool eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn::operator ==(
        const PlainSequenceSElemDefn& x) const
{
    return (m_header == x.m_header &&
           m_bound == x.m_bound &&
           m_element_identifier == x.m_element_identifier);
}

bool eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn::operator !=(
        const PlainSequenceSElemDefn& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn::header(
        const eprosima::fastdds::dds::xtypes::PlainCollectionHeader& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn::header(
        eprosima::fastdds::dds::xtypes::PlainCollectionHeader&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const eprosima::fastdds::dds::xtypes::PlainCollectionHeader& eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
eprosima::fastdds::dds::xtypes::PlainCollectionHeader& eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn::header()
{
    return m_header;
}


/*!
 * @brief This function sets a value in member bound
 * @param _bound New value for member bound
 */
void eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn::bound(
        eprosima::fastdds::dds::xtypes::SBound _bound)
{
    m_bound = _bound;
}

/*!
 * @brief This function returns the value of member bound
 * @return Value of member bound
 */
eprosima::fastdds::dds::xtypes::SBound eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn::bound() const
{
    return m_bound;
}

/*!
 * @brief This function returns a reference to member bound
 * @return Reference to member bound
 */
eprosima::fastdds::dds::xtypes::SBound& eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn::bound()
{
    return m_bound;
}


/*!
 * @brief This function copies the value in member element_identifier
 * @param _element_identifier New value to be copied in member element_identifier
 */
void eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn::element_identifier(
        const eprosima::fastdds::dds::xtypes::TypeIdentifier& _element_identifier)
{
    *m_element_identifier = _element_identifier;
}

/*!
 * @brief This function moves the value in member element_identifier
 * @param _element_identifier New value to be moved in member element_identifier
 */
void eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn::element_identifier(
        eprosima::fastdds::dds::xtypes::TypeIdentifier&& _element_identifier)
{
    *m_element_identifier = std::move(_element_identifier);
}

/*!
 * @brief This function returns a constant reference to member element_identifier
 * @return Constant reference to member element_identifier
 */
const eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn::element_identifier() const
{
    return *m_element_identifier;
}

/*!
 * @brief This function returns a reference to member element_identifier
 * @return Reference to member element_identifier
 */
eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn::element_identifier()
{
    return *m_element_identifier;
}


eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn::PlainSequenceLElemDefn()
{
    m_element_identifier = new eprosima::fastdds::dds::xtypes::TypeIdentifier();


}

eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn::~PlainSequenceLElemDefn()
{
    delete m_element_identifier;
}

eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn::PlainSequenceLElemDefn(
        const PlainSequenceLElemDefn& x)
{
    m_header = x.m_header;
    m_bound = x.m_bound;
    m_element_identifier = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_element_identifier = *x.m_element_identifier;
}

eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn::PlainSequenceLElemDefn(
        PlainSequenceLElemDefn&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_bound = x.m_bound;
    m_element_identifier = x.m_element_identifier;x.m_element_identifier = nullptr;
}

eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn& eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn::operator =(
        const PlainSequenceLElemDefn& x)
{

    m_header = x.m_header;
    m_bound = x.m_bound;
    m_element_identifier = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_element_identifier = *x.m_element_identifier;
    return *this;
}

eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn& eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn::operator =(
        PlainSequenceLElemDefn&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_bound = x.m_bound;
    m_element_identifier = x.m_element_identifier;x.m_element_identifier = nullptr;
    return *this;
}

bool eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn::operator ==(
        const PlainSequenceLElemDefn& x) const
{
    return (m_header == x.m_header &&
           m_bound == x.m_bound &&
           m_element_identifier == x.m_element_identifier);
}

bool eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn::operator !=(
        const PlainSequenceLElemDefn& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn::header(
        const eprosima::fastdds::dds::xtypes::PlainCollectionHeader& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn::header(
        eprosima::fastdds::dds::xtypes::PlainCollectionHeader&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const eprosima::fastdds::dds::xtypes::PlainCollectionHeader& eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
eprosima::fastdds::dds::xtypes::PlainCollectionHeader& eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn::header()
{
    return m_header;
}


/*!
 * @brief This function sets a value in member bound
 * @param _bound New value for member bound
 */
void eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn::bound(
        eprosima::fastdds::dds::xtypes::LBound _bound)
{
    m_bound = _bound;
}

/*!
 * @brief This function returns the value of member bound
 * @return Value of member bound
 */
eprosima::fastdds::dds::xtypes::LBound eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn::bound() const
{
    return m_bound;
}

/*!
 * @brief This function returns a reference to member bound
 * @return Reference to member bound
 */
eprosima::fastdds::dds::xtypes::LBound& eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn::bound()
{
    return m_bound;
}


/*!
 * @brief This function copies the value in member element_identifier
 * @param _element_identifier New value to be copied in member element_identifier
 */
void eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn::element_identifier(
        const eprosima::fastdds::dds::xtypes::TypeIdentifier& _element_identifier)
{
    *m_element_identifier = _element_identifier;
}

/*!
 * @brief This function moves the value in member element_identifier
 * @param _element_identifier New value to be moved in member element_identifier
 */
void eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn::element_identifier(
        eprosima::fastdds::dds::xtypes::TypeIdentifier&& _element_identifier)
{
    *m_element_identifier = std::move(_element_identifier);
}

/*!
 * @brief This function returns a constant reference to member element_identifier
 * @return Constant reference to member element_identifier
 */
const eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn::element_identifier() const
{
    return *m_element_identifier;
}

/*!
 * @brief This function returns a reference to member element_identifier
 * @return Reference to member element_identifier
 */
eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn::element_identifier()
{
    return *m_element_identifier;
}


eprosima::fastdds::dds::xtypes::PlainArraySElemDefn::PlainArraySElemDefn()
{
    m_element_identifier = new eprosima::fastdds::dds::xtypes::TypeIdentifier();


}

eprosima::fastdds::dds::xtypes::PlainArraySElemDefn::~PlainArraySElemDefn()
{
    delete m_element_identifier;
}

eprosima::fastdds::dds::xtypes::PlainArraySElemDefn::PlainArraySElemDefn(
        const PlainArraySElemDefn& x)
{
    m_header = x.m_header;
    m_array_bound_seq = x.m_array_bound_seq;
    m_element_identifier = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_element_identifier = *x.m_element_identifier;
}

eprosima::fastdds::dds::xtypes::PlainArraySElemDefn::PlainArraySElemDefn(
        PlainArraySElemDefn&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_array_bound_seq = std::move(x.m_array_bound_seq);
    m_element_identifier = x.m_element_identifier;x.m_element_identifier = nullptr;
}

eprosima::fastdds::dds::xtypes::PlainArraySElemDefn& eprosima::fastdds::dds::xtypes::PlainArraySElemDefn::operator =(
        const PlainArraySElemDefn& x)
{

    m_header = x.m_header;
    m_array_bound_seq = x.m_array_bound_seq;
    m_element_identifier = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_element_identifier = *x.m_element_identifier;
    return *this;
}

eprosima::fastdds::dds::xtypes::PlainArraySElemDefn& eprosima::fastdds::dds::xtypes::PlainArraySElemDefn::operator =(
        PlainArraySElemDefn&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_array_bound_seq = std::move(x.m_array_bound_seq);
    m_element_identifier = x.m_element_identifier;x.m_element_identifier = nullptr;
    return *this;
}

bool eprosima::fastdds::dds::xtypes::PlainArraySElemDefn::operator ==(
        const PlainArraySElemDefn& x) const
{
    return (m_header == x.m_header &&
           m_array_bound_seq == x.m_array_bound_seq &&
           m_element_identifier == x.m_element_identifier);
}

bool eprosima::fastdds::dds::xtypes::PlainArraySElemDefn::operator !=(
        const PlainArraySElemDefn& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void eprosima::fastdds::dds::xtypes::PlainArraySElemDefn::header(
        const eprosima::fastdds::dds::xtypes::PlainCollectionHeader& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void eprosima::fastdds::dds::xtypes::PlainArraySElemDefn::header(
        eprosima::fastdds::dds::xtypes::PlainCollectionHeader&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const eprosima::fastdds::dds::xtypes::PlainCollectionHeader& eprosima::fastdds::dds::xtypes::PlainArraySElemDefn::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
eprosima::fastdds::dds::xtypes::PlainCollectionHeader& eprosima::fastdds::dds::xtypes::PlainArraySElemDefn::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member array_bound_seq
 * @param _array_bound_seq New value to be copied in member array_bound_seq
 */
void eprosima::fastdds::dds::xtypes::PlainArraySElemDefn::array_bound_seq(
        const eprosima::fastdds::dds::xtypes::SBoundSeq& _array_bound_seq)
{
    m_array_bound_seq = _array_bound_seq;
}

/*!
 * @brief This function moves the value in member array_bound_seq
 * @param _array_bound_seq New value to be moved in member array_bound_seq
 */
void eprosima::fastdds::dds::xtypes::PlainArraySElemDefn::array_bound_seq(
        eprosima::fastdds::dds::xtypes::SBoundSeq&& _array_bound_seq)
{
    m_array_bound_seq = std::move(_array_bound_seq);
}

/*!
 * @brief This function returns a constant reference to member array_bound_seq
 * @return Constant reference to member array_bound_seq
 */
const eprosima::fastdds::dds::xtypes::SBoundSeq& eprosima::fastdds::dds::xtypes::PlainArraySElemDefn::array_bound_seq() const
{
    return m_array_bound_seq;
}

/*!
 * @brief This function returns a reference to member array_bound_seq
 * @return Reference to member array_bound_seq
 */
eprosima::fastdds::dds::xtypes::SBoundSeq& eprosima::fastdds::dds::xtypes::PlainArraySElemDefn::array_bound_seq()
{
    return m_array_bound_seq;
}


/*!
 * @brief This function copies the value in member element_identifier
 * @param _element_identifier New value to be copied in member element_identifier
 */
void eprosima::fastdds::dds::xtypes::PlainArraySElemDefn::element_identifier(
        const eprosima::fastdds::dds::xtypes::TypeIdentifier& _element_identifier)
{
    *m_element_identifier = _element_identifier;
}

/*!
 * @brief This function moves the value in member element_identifier
 * @param _element_identifier New value to be moved in member element_identifier
 */
void eprosima::fastdds::dds::xtypes::PlainArraySElemDefn::element_identifier(
        eprosima::fastdds::dds::xtypes::TypeIdentifier&& _element_identifier)
{
    *m_element_identifier = std::move(_element_identifier);
}

/*!
 * @brief This function returns a constant reference to member element_identifier
 * @return Constant reference to member element_identifier
 */
const eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::PlainArraySElemDefn::element_identifier() const
{
    return *m_element_identifier;
}

/*!
 * @brief This function returns a reference to member element_identifier
 * @return Reference to member element_identifier
 */
eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::PlainArraySElemDefn::element_identifier()
{
    return *m_element_identifier;
}


eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn::PlainArrayLElemDefn()
{
    m_element_identifier = new eprosima::fastdds::dds::xtypes::TypeIdentifier();


}

eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn::~PlainArrayLElemDefn()
{
    delete m_element_identifier;
}

eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn::PlainArrayLElemDefn(
        const PlainArrayLElemDefn& x)
{
    m_header = x.m_header;
    m_array_bound_seq = x.m_array_bound_seq;
    m_element_identifier = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_element_identifier = *x.m_element_identifier;
}

eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn::PlainArrayLElemDefn(
        PlainArrayLElemDefn&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_array_bound_seq = std::move(x.m_array_bound_seq);
    m_element_identifier = x.m_element_identifier;x.m_element_identifier = nullptr;
}

eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn& eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn::operator =(
        const PlainArrayLElemDefn& x)
{

    m_header = x.m_header;
    m_array_bound_seq = x.m_array_bound_seq;
    m_element_identifier = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_element_identifier = *x.m_element_identifier;
    return *this;
}

eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn& eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn::operator =(
        PlainArrayLElemDefn&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_array_bound_seq = std::move(x.m_array_bound_seq);
    m_element_identifier = x.m_element_identifier;x.m_element_identifier = nullptr;
    return *this;
}

bool eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn::operator ==(
        const PlainArrayLElemDefn& x) const
{
    return (m_header == x.m_header &&
           m_array_bound_seq == x.m_array_bound_seq &&
           m_element_identifier == x.m_element_identifier);
}

bool eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn::operator !=(
        const PlainArrayLElemDefn& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn::header(
        const eprosima::fastdds::dds::xtypes::PlainCollectionHeader& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn::header(
        eprosima::fastdds::dds::xtypes::PlainCollectionHeader&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const eprosima::fastdds::dds::xtypes::PlainCollectionHeader& eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
eprosima::fastdds::dds::xtypes::PlainCollectionHeader& eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member array_bound_seq
 * @param _array_bound_seq New value to be copied in member array_bound_seq
 */
void eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn::array_bound_seq(
        const eprosima::fastdds::dds::xtypes::LBoundSeq& _array_bound_seq)
{
    m_array_bound_seq = _array_bound_seq;
}

/*!
 * @brief This function moves the value in member array_bound_seq
 * @param _array_bound_seq New value to be moved in member array_bound_seq
 */
void eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn::array_bound_seq(
        eprosima::fastdds::dds::xtypes::LBoundSeq&& _array_bound_seq)
{
    m_array_bound_seq = std::move(_array_bound_seq);
}

/*!
 * @brief This function returns a constant reference to member array_bound_seq
 * @return Constant reference to member array_bound_seq
 */
const eprosima::fastdds::dds::xtypes::LBoundSeq& eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn::array_bound_seq() const
{
    return m_array_bound_seq;
}

/*!
 * @brief This function returns a reference to member array_bound_seq
 * @return Reference to member array_bound_seq
 */
eprosima::fastdds::dds::xtypes::LBoundSeq& eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn::array_bound_seq()
{
    return m_array_bound_seq;
}


/*!
 * @brief This function copies the value in member element_identifier
 * @param _element_identifier New value to be copied in member element_identifier
 */
void eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn::element_identifier(
        const eprosima::fastdds::dds::xtypes::TypeIdentifier& _element_identifier)
{
    *m_element_identifier = _element_identifier;
}

/*!
 * @brief This function moves the value in member element_identifier
 * @param _element_identifier New value to be moved in member element_identifier
 */
void eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn::element_identifier(
        eprosima::fastdds::dds::xtypes::TypeIdentifier&& _element_identifier)
{
    *m_element_identifier = std::move(_element_identifier);
}

/*!
 * @brief This function returns a constant reference to member element_identifier
 * @return Constant reference to member element_identifier
 */
const eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn::element_identifier() const
{
    return *m_element_identifier;
}

/*!
 * @brief This function returns a reference to member element_identifier
 * @return Reference to member element_identifier
 */
eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn::element_identifier()
{
    return *m_element_identifier;
}


eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn::PlainMapSTypeDefn()
{
    m_element_identifier = new eprosima::fastdds::dds::xtypes::TypeIdentifier();



    m_key_identifier = new eprosima::fastdds::dds::xtypes::TypeIdentifier();


}

eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn::~PlainMapSTypeDefn()
{
    delete m_element_identifier;

    delete m_key_identifier;
}

eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn::PlainMapSTypeDefn(
        const PlainMapSTypeDefn& x)
{
    m_header = x.m_header;
    m_bound = x.m_bound;
    m_element_identifier = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_element_identifier = *x.m_element_identifier;
    m_key_flags = x.m_key_flags;
    m_key_identifier = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_key_identifier = *x.m_key_identifier;
}

eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn::PlainMapSTypeDefn(
        PlainMapSTypeDefn&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_bound = x.m_bound;
    m_element_identifier = x.m_element_identifier;x.m_element_identifier = nullptr;
    m_key_flags = std::move(x.m_key_flags);
    m_key_identifier = x.m_key_identifier;x.m_key_identifier = nullptr;
}

eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn& eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn::operator =(
        const PlainMapSTypeDefn& x)
{

    m_header = x.m_header;
    m_bound = x.m_bound;
    m_element_identifier = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_element_identifier = *x.m_element_identifier;
    m_key_flags = x.m_key_flags;
    m_key_identifier = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_key_identifier = *x.m_key_identifier;
    return *this;
}

eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn& eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn::operator =(
        PlainMapSTypeDefn&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_bound = x.m_bound;
    m_element_identifier = x.m_element_identifier;x.m_element_identifier = nullptr;
    m_key_flags = std::move(x.m_key_flags);
    m_key_identifier = x.m_key_identifier;x.m_key_identifier = nullptr;
    return *this;
}

bool eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn::operator ==(
        const PlainMapSTypeDefn& x) const
{
    return (m_header == x.m_header &&
           m_bound == x.m_bound &&
           m_element_identifier == x.m_element_identifier &&
           m_key_flags == x.m_key_flags &&
           m_key_identifier == x.m_key_identifier);
}

bool eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn::operator !=(
        const PlainMapSTypeDefn& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn::header(
        const eprosima::fastdds::dds::xtypes::PlainCollectionHeader& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn::header(
        eprosima::fastdds::dds::xtypes::PlainCollectionHeader&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const eprosima::fastdds::dds::xtypes::PlainCollectionHeader& eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
eprosima::fastdds::dds::xtypes::PlainCollectionHeader& eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn::header()
{
    return m_header;
}


/*!
 * @brief This function sets a value in member bound
 * @param _bound New value for member bound
 */
void eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn::bound(
        eprosima::fastdds::dds::xtypes::SBound _bound)
{
    m_bound = _bound;
}

/*!
 * @brief This function returns the value of member bound
 * @return Value of member bound
 */
eprosima::fastdds::dds::xtypes::SBound eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn::bound() const
{
    return m_bound;
}

/*!
 * @brief This function returns a reference to member bound
 * @return Reference to member bound
 */
eprosima::fastdds::dds::xtypes::SBound& eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn::bound()
{
    return m_bound;
}


/*!
 * @brief This function copies the value in member element_identifier
 * @param _element_identifier New value to be copied in member element_identifier
 */
void eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn::element_identifier(
        const eprosima::fastdds::dds::xtypes::TypeIdentifier& _element_identifier)
{
    *m_element_identifier = _element_identifier;
}

/*!
 * @brief This function moves the value in member element_identifier
 * @param _element_identifier New value to be moved in member element_identifier
 */
void eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn::element_identifier(
        eprosima::fastdds::dds::xtypes::TypeIdentifier&& _element_identifier)
{
    *m_element_identifier = std::move(_element_identifier);
}

/*!
 * @brief This function returns a constant reference to member element_identifier
 * @return Constant reference to member element_identifier
 */
const eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn::element_identifier() const
{
    return *m_element_identifier;
}

/*!
 * @brief This function returns a reference to member element_identifier
 * @return Reference to member element_identifier
 */
eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn::element_identifier()
{
    return *m_element_identifier;
}


/*!
 * @brief This function copies the value in member key_flags
 * @param _key_flags New value to be copied in member key_flags
 */
void eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn::key_flags(
        const eprosima::fastdds::dds::xtypes::CollectionElementFlag& _key_flags)
{
    m_key_flags = _key_flags;
}

/*!
 * @brief This function moves the value in member key_flags
 * @param _key_flags New value to be moved in member key_flags
 */
void eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn::key_flags(
        eprosima::fastdds::dds::xtypes::CollectionElementFlag&& _key_flags)
{
    m_key_flags = std::move(_key_flags);
}

/*!
 * @brief This function returns a constant reference to member key_flags
 * @return Constant reference to member key_flags
 */
const eprosima::fastdds::dds::xtypes::CollectionElementFlag& eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn::key_flags() const
{
    return m_key_flags;
}

/*!
 * @brief This function returns a reference to member key_flags
 * @return Reference to member key_flags
 */
eprosima::fastdds::dds::xtypes::CollectionElementFlag& eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn::key_flags()
{
    return m_key_flags;
}


/*!
 * @brief This function copies the value in member key_identifier
 * @param _key_identifier New value to be copied in member key_identifier
 */
void eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn::key_identifier(
        const eprosima::fastdds::dds::xtypes::TypeIdentifier& _key_identifier)
{
    *m_key_identifier = _key_identifier;
}

/*!
 * @brief This function moves the value in member key_identifier
 * @param _key_identifier New value to be moved in member key_identifier
 */
void eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn::key_identifier(
        eprosima::fastdds::dds::xtypes::TypeIdentifier&& _key_identifier)
{
    *m_key_identifier = std::move(_key_identifier);
}

/*!
 * @brief This function returns a constant reference to member key_identifier
 * @return Constant reference to member key_identifier
 */
const eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn::key_identifier() const
{
    return *m_key_identifier;
}

/*!
 * @brief This function returns a reference to member key_identifier
 * @return Reference to member key_identifier
 */
eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn::key_identifier()
{
    return *m_key_identifier;
}


eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn::PlainMapLTypeDefn()
{
    m_element_identifier = new eprosima::fastdds::dds::xtypes::TypeIdentifier();



    m_key_identifier = new eprosima::fastdds::dds::xtypes::TypeIdentifier();


}

eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn::~PlainMapLTypeDefn()
{
    delete m_element_identifier;

    delete m_key_identifier;
}

eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn::PlainMapLTypeDefn(
        const PlainMapLTypeDefn& x)
{
    m_header = x.m_header;
    m_bound = x.m_bound;
    m_element_identifier = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_element_identifier = *x.m_element_identifier;
    m_key_flags = x.m_key_flags;
    m_key_identifier = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_key_identifier = *x.m_key_identifier;
}

eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn::PlainMapLTypeDefn(
        PlainMapLTypeDefn&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_bound = x.m_bound;
    m_element_identifier = x.m_element_identifier;x.m_element_identifier = nullptr;
    m_key_flags = std::move(x.m_key_flags);
    m_key_identifier = x.m_key_identifier;x.m_key_identifier = nullptr;
}

eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn& eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn::operator =(
        const PlainMapLTypeDefn& x)
{

    m_header = x.m_header;
    m_bound = x.m_bound;
    m_element_identifier = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_element_identifier = *x.m_element_identifier;
    m_key_flags = x.m_key_flags;
    m_key_identifier = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_key_identifier = *x.m_key_identifier;
    return *this;
}

eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn& eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn::operator =(
        PlainMapLTypeDefn&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_bound = x.m_bound;
    m_element_identifier = x.m_element_identifier;x.m_element_identifier = nullptr;
    m_key_flags = std::move(x.m_key_flags);
    m_key_identifier = x.m_key_identifier;x.m_key_identifier = nullptr;
    return *this;
}

bool eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn::operator ==(
        const PlainMapLTypeDefn& x) const
{
    return (m_header == x.m_header &&
           m_bound == x.m_bound &&
           m_element_identifier == x.m_element_identifier &&
           m_key_flags == x.m_key_flags &&
           m_key_identifier == x.m_key_identifier);
}

bool eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn::operator !=(
        const PlainMapLTypeDefn& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn::header(
        const eprosima::fastdds::dds::xtypes::PlainCollectionHeader& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn::header(
        eprosima::fastdds::dds::xtypes::PlainCollectionHeader&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const eprosima::fastdds::dds::xtypes::PlainCollectionHeader& eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
eprosima::fastdds::dds::xtypes::PlainCollectionHeader& eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn::header()
{
    return m_header;
}


/*!
 * @brief This function sets a value in member bound
 * @param _bound New value for member bound
 */
void eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn::bound(
        eprosima::fastdds::dds::xtypes::LBound _bound)
{
    m_bound = _bound;
}

/*!
 * @brief This function returns the value of member bound
 * @return Value of member bound
 */
eprosima::fastdds::dds::xtypes::LBound eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn::bound() const
{
    return m_bound;
}

/*!
 * @brief This function returns a reference to member bound
 * @return Reference to member bound
 */
eprosima::fastdds::dds::xtypes::LBound& eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn::bound()
{
    return m_bound;
}


/*!
 * @brief This function copies the value in member element_identifier
 * @param _element_identifier New value to be copied in member element_identifier
 */
void eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn::element_identifier(
        const eprosima::fastdds::dds::xtypes::TypeIdentifier& _element_identifier)
{
    *m_element_identifier = _element_identifier;
}

/*!
 * @brief This function moves the value in member element_identifier
 * @param _element_identifier New value to be moved in member element_identifier
 */
void eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn::element_identifier(
        eprosima::fastdds::dds::xtypes::TypeIdentifier&& _element_identifier)
{
    *m_element_identifier = std::move(_element_identifier);
}

/*!
 * @brief This function returns a constant reference to member element_identifier
 * @return Constant reference to member element_identifier
 */
const eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn::element_identifier() const
{
    return *m_element_identifier;
}

/*!
 * @brief This function returns a reference to member element_identifier
 * @return Reference to member element_identifier
 */
eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn::element_identifier()
{
    return *m_element_identifier;
}


/*!
 * @brief This function copies the value in member key_flags
 * @param _key_flags New value to be copied in member key_flags
 */
void eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn::key_flags(
        const eprosima::fastdds::dds::xtypes::CollectionElementFlag& _key_flags)
{
    m_key_flags = _key_flags;
}

/*!
 * @brief This function moves the value in member key_flags
 * @param _key_flags New value to be moved in member key_flags
 */
void eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn::key_flags(
        eprosima::fastdds::dds::xtypes::CollectionElementFlag&& _key_flags)
{
    m_key_flags = std::move(_key_flags);
}

/*!
 * @brief This function returns a constant reference to member key_flags
 * @return Constant reference to member key_flags
 */
const eprosima::fastdds::dds::xtypes::CollectionElementFlag& eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn::key_flags() const
{
    return m_key_flags;
}

/*!
 * @brief This function returns a reference to member key_flags
 * @return Reference to member key_flags
 */
eprosima::fastdds::dds::xtypes::CollectionElementFlag& eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn::key_flags()
{
    return m_key_flags;
}


/*!
 * @brief This function copies the value in member key_identifier
 * @param _key_identifier New value to be copied in member key_identifier
 */
void eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn::key_identifier(
        const eprosima::fastdds::dds::xtypes::TypeIdentifier& _key_identifier)
{
    *m_key_identifier = _key_identifier;
}

/*!
 * @brief This function moves the value in member key_identifier
 * @param _key_identifier New value to be moved in member key_identifier
 */
void eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn::key_identifier(
        eprosima::fastdds::dds::xtypes::TypeIdentifier&& _key_identifier)
{
    *m_key_identifier = std::move(_key_identifier);
}

/*!
 * @brief This function returns a constant reference to member key_identifier
 * @return Constant reference to member key_identifier
 */
const eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn::key_identifier() const
{
    return *m_key_identifier;
}

/*!
 * @brief This function returns a reference to member key_identifier
 * @return Reference to member key_identifier
 */
eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn::key_identifier()
{
    return *m_key_identifier;
}


eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId::StronglyConnectedComponentId()
{

}

eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId::~StronglyConnectedComponentId()
{
}

eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId::StronglyConnectedComponentId(
        const StronglyConnectedComponentId& x)
{
    m_sc_component_id = x.m_sc_component_id;
    m_scc_length = x.m_scc_length;
    m_scc_index = x.m_scc_index;
}

eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId::StronglyConnectedComponentId(
        StronglyConnectedComponentId&& x) noexcept
{
    m_sc_component_id = std::move(x.m_sc_component_id);
    m_scc_length = x.m_scc_length;
    m_scc_index = x.m_scc_index;
}

eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId& eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId::operator =(
        const StronglyConnectedComponentId& x)
{

    m_sc_component_id = x.m_sc_component_id;
    m_scc_length = x.m_scc_length;
    m_scc_index = x.m_scc_index;
    return *this;
}

eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId& eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId::operator =(
        StronglyConnectedComponentId&& x) noexcept
{

    m_sc_component_id = std::move(x.m_sc_component_id);
    m_scc_length = x.m_scc_length;
    m_scc_index = x.m_scc_index;
    return *this;
}

bool eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId::operator ==(
        const StronglyConnectedComponentId& x) const
{
    return (m_sc_component_id == x.m_sc_component_id &&
           m_scc_length == x.m_scc_length &&
           m_scc_index == x.m_scc_index);
}

bool eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId::operator !=(
        const StronglyConnectedComponentId& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member sc_component_id
 * @param _sc_component_id New value to be copied in member sc_component_id
 */
void eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId::sc_component_id(
        const eprosima::fastdds::dds::xtypes::TypeObjectHashId& _sc_component_id)
{
    m_sc_component_id = _sc_component_id;
}

/*!
 * @brief This function moves the value in member sc_component_id
 * @param _sc_component_id New value to be moved in member sc_component_id
 */
void eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId::sc_component_id(
        eprosima::fastdds::dds::xtypes::TypeObjectHashId&& _sc_component_id)
{
    m_sc_component_id = std::move(_sc_component_id);
}

/*!
 * @brief This function returns a constant reference to member sc_component_id
 * @return Constant reference to member sc_component_id
 */
const eprosima::fastdds::dds::xtypes::TypeObjectHashId& eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId::sc_component_id() const
{
    return m_sc_component_id;
}

/*!
 * @brief This function returns a reference to member sc_component_id
 * @return Reference to member sc_component_id
 */
eprosima::fastdds::dds::xtypes::TypeObjectHashId& eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId::sc_component_id()
{
    return m_sc_component_id;
}


/*!
 * @brief This function sets a value in member scc_length
 * @param _scc_length New value for member scc_length
 */
void eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId::scc_length(
        int32_t _scc_length)
{
    m_scc_length = _scc_length;
}

/*!
 * @brief This function returns the value of member scc_length
 * @return Value of member scc_length
 */
int32_t eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId::scc_length() const
{
    return m_scc_length;
}

/*!
 * @brief This function returns a reference to member scc_length
 * @return Reference to member scc_length
 */
int32_t& eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId::scc_length()
{
    return m_scc_length;
}


/*!
 * @brief This function sets a value in member scc_index
 * @param _scc_index New value for member scc_index
 */
void eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId::scc_index(
        int32_t _scc_index)
{
    m_scc_index = _scc_index;
}

/*!
 * @brief This function returns the value of member scc_index
 * @return Value of member scc_index
 */
int32_t eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId::scc_index() const
{
    return m_scc_index;
}

/*!
 * @brief This function returns a reference to member scc_index
 * @return Reference to member scc_index
 */
int32_t& eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId::scc_index()
{
    return m_scc_index;
}


eprosima::fastdds::dds::xtypes::ExtendedTypeDefn::ExtendedTypeDefn()
{

}

eprosima::fastdds::dds::xtypes::ExtendedTypeDefn::~ExtendedTypeDefn()
{
}

eprosima::fastdds::dds::xtypes::ExtendedTypeDefn::ExtendedTypeDefn(
        const ExtendedTypeDefn& x)
{
    static_cast<void>(x);
}

eprosima::fastdds::dds::xtypes::ExtendedTypeDefn::ExtendedTypeDefn(
        ExtendedTypeDefn&& x) noexcept
{
    static_cast<void>(x);
}

eprosima::fastdds::dds::xtypes::ExtendedTypeDefn& eprosima::fastdds::dds::xtypes::ExtendedTypeDefn::operator =(
        const ExtendedTypeDefn& x)
{

    static_cast<void>(x);

    return *this;
}

eprosima::fastdds::dds::xtypes::ExtendedTypeDefn& eprosima::fastdds::dds::xtypes::ExtendedTypeDefn::operator =(
        ExtendedTypeDefn&& x) noexcept
{

    static_cast<void>(x);

    return *this;
}

bool eprosima::fastdds::dds::xtypes::ExtendedTypeDefn::operator ==(
        const ExtendedTypeDefn& x) const
{
    static_cast<void>(x);
    return true;
}

bool eprosima::fastdds::dds::xtypes::ExtendedTypeDefn::operator !=(
        const ExtendedTypeDefn& x) const
{
    return !(*this == x);
}


eprosima::fastdds::dds::xtypes::TypeIdentifier::TypeIdentifier()
{
    m__d = 0;
}

eprosima::fastdds::dds::xtypes::TypeIdentifier::~TypeIdentifier()
{
}

eprosima::fastdds::dds::xtypes::TypeIdentifier::TypeIdentifier(
        const TypeIdentifier& x)
{
    m__d = x.m__d;

    switch (m__d)
    {
        case TI_STRING8_SMALL:
        case TI_STRING16_SMALL:
            m_string_sdefn = x.m_string_sdefn;
            break;


        case TI_STRING8_LARGE:
        case TI_STRING16_LARGE:
            m_string_ldefn = x.m_string_ldefn;
            break;


        case TI_PLAIN_SEQUENCE_SMALL:
            m_seq_sdefn = x.m_seq_sdefn;
            break;


        case TI_PLAIN_SEQUENCE_LARGE:
            m_seq_ldefn = x.m_seq_ldefn;
            break;


        case TI_PLAIN_ARRAY_SMALL:
            m_array_sdefn = x.m_array_sdefn;
            break;


        case TI_PLAIN_ARRAY_LARGE:
            m_array_ldefn = x.m_array_ldefn;
            break;


        case TI_PLAIN_MAP_SMALL:
            m_map_sdefn = x.m_map_sdefn;
            break;


        case TI_PLAIN_MAP_LARGE:
            m_map_ldefn = x.m_map_ldefn;
            break;


        case TI_STRONGLY_CONNECTED_COMPONENT:
            m_sc_component_id = x.m_sc_component_id;
            break;


        case EK_COMPLETE:
        case EK_MINIMAL:
            m_equivalence_hash = x.m_equivalence_hash;
            break;


        default:
            m_extended_defn = x.m_extended_defn;

            break;
    }
}

eprosima::fastdds::dds::xtypes::TypeIdentifier::TypeIdentifier(
        TypeIdentifier&& x) noexcept
{
    m__d = x.m__d;

    switch (m__d)
    {
        case TI_STRING8_SMALL:
        case TI_STRING16_SMALL:
            m_string_sdefn = std::move(x.m_string_sdefn);

            break;


        case TI_STRING8_LARGE:
        case TI_STRING16_LARGE:
            m_string_ldefn = std::move(x.m_string_ldefn);

            break;


        case TI_PLAIN_SEQUENCE_SMALL:
            m_seq_sdefn = std::move(x.m_seq_sdefn);

            break;


        case TI_PLAIN_SEQUENCE_LARGE:
            m_seq_ldefn = std::move(x.m_seq_ldefn);

            break;


        case TI_PLAIN_ARRAY_SMALL:
            m_array_sdefn = std::move(x.m_array_sdefn);

            break;


        case TI_PLAIN_ARRAY_LARGE:
            m_array_ldefn = std::move(x.m_array_ldefn);

            break;


        case TI_PLAIN_MAP_SMALL:
            m_map_sdefn = std::move(x.m_map_sdefn);

            break;


        case TI_PLAIN_MAP_LARGE:
            m_map_ldefn = std::move(x.m_map_ldefn);

            break;


        case TI_STRONGLY_CONNECTED_COMPONENT:
            m_sc_component_id = std::move(x.m_sc_component_id);

            break;


        case EK_COMPLETE:
        case EK_MINIMAL:
            m_equivalence_hash = std::move(x.m_equivalence_hash);

            break;


        default:
            m_extended_defn = std::move(x.m_extended_defn);

            break;
    }
}

eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::TypeIdentifier::operator =(
        const TypeIdentifier& x)
{
    m__d = x.m__d;

    switch (m__d)
    {
        case TI_STRING8_SMALL:
        case TI_STRING16_SMALL:
            m_string_sdefn = x.m_string_sdefn;
            break;


        case TI_STRING8_LARGE:
        case TI_STRING16_LARGE:
            m_string_ldefn = x.m_string_ldefn;
            break;


        case TI_PLAIN_SEQUENCE_SMALL:
            m_seq_sdefn = x.m_seq_sdefn;
            break;


        case TI_PLAIN_SEQUENCE_LARGE:
            m_seq_ldefn = x.m_seq_ldefn;
            break;


        case TI_PLAIN_ARRAY_SMALL:
            m_array_sdefn = x.m_array_sdefn;
            break;


        case TI_PLAIN_ARRAY_LARGE:
            m_array_ldefn = x.m_array_ldefn;
            break;


        case TI_PLAIN_MAP_SMALL:
            m_map_sdefn = x.m_map_sdefn;
            break;


        case TI_PLAIN_MAP_LARGE:
            m_map_ldefn = x.m_map_ldefn;
            break;


        case TI_STRONGLY_CONNECTED_COMPONENT:
            m_sc_component_id = x.m_sc_component_id;
            break;


        case EK_COMPLETE:
        case EK_MINIMAL:
            m_equivalence_hash = x.m_equivalence_hash;
            break;


        default:
            m_extended_defn = x.m_extended_defn;

            break;
    }

    return *this;
}

eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::TypeIdentifier::operator =(
        TypeIdentifier&& x) noexcept
{
    m__d = x.m__d;

    switch (m__d)
    {
        case TI_STRING8_SMALL:
        case TI_STRING16_SMALL:
            m_string_sdefn = std::move(x.m_string_sdefn);

            break;


        case TI_STRING8_LARGE:
        case TI_STRING16_LARGE:
            m_string_ldefn = std::move(x.m_string_ldefn);

            break;


        case TI_PLAIN_SEQUENCE_SMALL:
            m_seq_sdefn = std::move(x.m_seq_sdefn);

            break;


        case TI_PLAIN_SEQUENCE_LARGE:
            m_seq_ldefn = std::move(x.m_seq_ldefn);

            break;


        case TI_PLAIN_ARRAY_SMALL:
            m_array_sdefn = std::move(x.m_array_sdefn);

            break;


        case TI_PLAIN_ARRAY_LARGE:
            m_array_ldefn = std::move(x.m_array_ldefn);

            break;


        case TI_PLAIN_MAP_SMALL:
            m_map_sdefn = std::move(x.m_map_sdefn);

            break;


        case TI_PLAIN_MAP_LARGE:
            m_map_ldefn = std::move(x.m_map_ldefn);

            break;


        case TI_STRONGLY_CONNECTED_COMPONENT:
            m_sc_component_id = std::move(x.m_sc_component_id);

            break;


        case EK_COMPLETE:
        case EK_MINIMAL:
            m_equivalence_hash = std::move(x.m_equivalence_hash);

            break;


        default:
            m_extended_defn = std::move(x.m_extended_defn);

            break;
    }

    return *this;
}

bool eprosima::fastdds::dds::xtypes::TypeIdentifier::operator ==(
        const TypeIdentifier& x) const
{
    if (m__d != x.m__d)
    {
        return false;
    }

    switch (m__d)
    {
        case TI_STRING8_SMALL:
        case TI_STRING16_SMALL:
            return (m_string_sdefn == x.m_string_sdefn);
            break;


        case TI_STRING8_LARGE:
        case TI_STRING16_LARGE:
            return (m_string_ldefn == x.m_string_ldefn);
            break;


        case TI_PLAIN_SEQUENCE_SMALL:
            return (m_seq_sdefn == x.m_seq_sdefn);
            break;


        case TI_PLAIN_SEQUENCE_LARGE:
            return (m_seq_ldefn == x.m_seq_ldefn);
            break;


        case TI_PLAIN_ARRAY_SMALL:
            return (m_array_sdefn == x.m_array_sdefn);
            break;


        case TI_PLAIN_ARRAY_LARGE:
            return (m_array_ldefn == x.m_array_ldefn);
            break;


        case TI_PLAIN_MAP_SMALL:
            return (m_map_sdefn == x.m_map_sdefn);
            break;


        case TI_PLAIN_MAP_LARGE:
            return (m_map_ldefn == x.m_map_ldefn);
            break;


        case TI_STRONGLY_CONNECTED_COMPONENT:
            return (m_sc_component_id == x.m_sc_component_id);
            break;


        case EK_COMPLETE:
        case EK_MINIMAL:
            return (m_equivalence_hash == x.m_equivalence_hash);
            break;


        default:
            return m_extended_defn == x.m_extended_defn;

            break;
    }
    return false;
}

bool eprosima::fastdds::dds::xtypes::TypeIdentifier::operator !=(
        const TypeIdentifier& x) const
{
    return !(*this == x);
}

void eprosima::fastdds::dds::xtypes::TypeIdentifier::_d(
        uint8_t __d)
{
    bool b = false;

    switch (m__d)
    {
        case TI_STRING8_SMALL:
        case TI_STRING16_SMALL:
            switch (__d)
            {
                case TI_STRING8_SMALL:
                case TI_STRING16_SMALL:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TI_STRING8_LARGE:
        case TI_STRING16_LARGE:
            switch (__d)
            {
                case TI_STRING8_LARGE:
                case TI_STRING16_LARGE:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TI_PLAIN_SEQUENCE_SMALL:
            switch (__d)
            {
                case TI_PLAIN_SEQUENCE_SMALL:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TI_PLAIN_SEQUENCE_LARGE:
            switch (__d)
            {
                case TI_PLAIN_SEQUENCE_LARGE:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TI_PLAIN_ARRAY_SMALL:
            switch (__d)
            {
                case TI_PLAIN_ARRAY_SMALL:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TI_PLAIN_ARRAY_LARGE:
            switch (__d)
            {
                case TI_PLAIN_ARRAY_LARGE:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TI_PLAIN_MAP_SMALL:
            switch (__d)
            {
                case TI_PLAIN_MAP_SMALL:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TI_PLAIN_MAP_LARGE:
            switch (__d)
            {
                case TI_PLAIN_MAP_LARGE:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TI_STRONGLY_CONNECTED_COMPONENT:
            switch (__d)
            {
                case TI_STRONGLY_CONNECTED_COMPONENT:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case EK_COMPLETE:
        case EK_MINIMAL:
            switch (__d)
            {
                case EK_COMPLETE:
                case EK_MINIMAL:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        default:
            b = true;
            switch (__d)
            {
                case TI_STRING8_SMALL:
                case TI_STRING16_SMALL:
                case TI_STRING8_LARGE:
                case TI_STRING16_LARGE:
                case TI_PLAIN_SEQUENCE_SMALL:
                case TI_PLAIN_SEQUENCE_LARGE:
                case TI_PLAIN_ARRAY_SMALL:
                case TI_PLAIN_ARRAY_LARGE:
                case TI_PLAIN_MAP_SMALL:
                case TI_PLAIN_MAP_LARGE:
                case TI_STRONGLY_CONNECTED_COMPONENT:
                case EK_COMPLETE:
                case EK_MINIMAL:
                    b = false;
                    break;
                default:
                    break;
            }
            break;

    }

    if (!b)
    {
        throw BadParamException("Discriminator doesn't correspond with the selected union member");
    }

    m__d = __d;
}

uint8_t eprosima::fastdds::dds::xtypes::TypeIdentifier::_d() const
{
    return m__d;
}

uint8_t& eprosima::fastdds::dds::xtypes::TypeIdentifier::_d()
{
    return m__d;
}

void eprosima::fastdds::dds::xtypes::TypeIdentifier::string_sdefn(
        const eprosima::fastdds::dds::xtypes::StringSTypeDefn& _string_sdefn)
{
    m_string_sdefn = _string_sdefn;
    m__d = TI_STRING8_SMALL;

}

void eprosima::fastdds::dds::xtypes::TypeIdentifier::string_sdefn(
        eprosima::fastdds::dds::xtypes::StringSTypeDefn&& _string_sdefn)
{
    m_string_sdefn = std::move(_string_sdefn);
    m__d = TI_STRING8_SMALL;

}

const eprosima::fastdds::dds::xtypes::StringSTypeDefn& eprosima::fastdds::dds::xtypes::TypeIdentifier::string_sdefn() const
{
    bool b = false;

    switch (m__d)
    {
        case TI_STRING8_SMALL:
        case TI_STRING16_SMALL:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_string_sdefn;
}

eprosima::fastdds::dds::xtypes::StringSTypeDefn& eprosima::fastdds::dds::xtypes::TypeIdentifier::string_sdefn()
{
    bool b = false;

    switch (m__d)
    {
        case TI_STRING8_SMALL:
        case TI_STRING16_SMALL:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_string_sdefn;
}


void eprosima::fastdds::dds::xtypes::TypeIdentifier::string_ldefn(
        const eprosima::fastdds::dds::xtypes::StringLTypeDefn& _string_ldefn)
{
    m_string_ldefn = _string_ldefn;
    m__d = TI_STRING8_LARGE;

}

void eprosima::fastdds::dds::xtypes::TypeIdentifier::string_ldefn(
        eprosima::fastdds::dds::xtypes::StringLTypeDefn&& _string_ldefn)
{
    m_string_ldefn = std::move(_string_ldefn);
    m__d = TI_STRING8_LARGE;

}

const eprosima::fastdds::dds::xtypes::StringLTypeDefn& eprosima::fastdds::dds::xtypes::TypeIdentifier::string_ldefn() const
{
    bool b = false;

    switch (m__d)
    {
        case TI_STRING8_LARGE:
        case TI_STRING16_LARGE:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_string_ldefn;
}

eprosima::fastdds::dds::xtypes::StringLTypeDefn& eprosima::fastdds::dds::xtypes::TypeIdentifier::string_ldefn()
{
    bool b = false;

    switch (m__d)
    {
        case TI_STRING8_LARGE:
        case TI_STRING16_LARGE:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_string_ldefn;
}


void eprosima::fastdds::dds::xtypes::TypeIdentifier::seq_sdefn(
        const eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn& _seq_sdefn)
{
    m_seq_sdefn = _seq_sdefn;
    m__d = TI_PLAIN_SEQUENCE_SMALL;

}

void eprosima::fastdds::dds::xtypes::TypeIdentifier::seq_sdefn(
        eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn&& _seq_sdefn)
{
    m_seq_sdefn = std::move(_seq_sdefn);
    m__d = TI_PLAIN_SEQUENCE_SMALL;

}

const eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn& eprosima::fastdds::dds::xtypes::TypeIdentifier::seq_sdefn() const
{
    bool b = false;

    switch (m__d)
    {
        case TI_PLAIN_SEQUENCE_SMALL:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_seq_sdefn;
}

eprosima::fastdds::dds::xtypes::PlainSequenceSElemDefn& eprosima::fastdds::dds::xtypes::TypeIdentifier::seq_sdefn()
{
    bool b = false;

    switch (m__d)
    {
        case TI_PLAIN_SEQUENCE_SMALL:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_seq_sdefn;
}


void eprosima::fastdds::dds::xtypes::TypeIdentifier::seq_ldefn(
        const eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn& _seq_ldefn)
{
    m_seq_ldefn = _seq_ldefn;
    m__d = TI_PLAIN_SEQUENCE_LARGE;

}

void eprosima::fastdds::dds::xtypes::TypeIdentifier::seq_ldefn(
        eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn&& _seq_ldefn)
{
    m_seq_ldefn = std::move(_seq_ldefn);
    m__d = TI_PLAIN_SEQUENCE_LARGE;

}

const eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn& eprosima::fastdds::dds::xtypes::TypeIdentifier::seq_ldefn() const
{
    bool b = false;

    switch (m__d)
    {
        case TI_PLAIN_SEQUENCE_LARGE:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_seq_ldefn;
}

eprosima::fastdds::dds::xtypes::PlainSequenceLElemDefn& eprosima::fastdds::dds::xtypes::TypeIdentifier::seq_ldefn()
{
    bool b = false;

    switch (m__d)
    {
        case TI_PLAIN_SEQUENCE_LARGE:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_seq_ldefn;
}


void eprosima::fastdds::dds::xtypes::TypeIdentifier::array_sdefn(
        const eprosima::fastdds::dds::xtypes::PlainArraySElemDefn& _array_sdefn)
{
    m_array_sdefn = _array_sdefn;
    m__d = TI_PLAIN_ARRAY_SMALL;

}

void eprosima::fastdds::dds::xtypes::TypeIdentifier::array_sdefn(
        eprosima::fastdds::dds::xtypes::PlainArraySElemDefn&& _array_sdefn)
{
    m_array_sdefn = std::move(_array_sdefn);
    m__d = TI_PLAIN_ARRAY_SMALL;

}

const eprosima::fastdds::dds::xtypes::PlainArraySElemDefn& eprosima::fastdds::dds::xtypes::TypeIdentifier::array_sdefn() const
{
    bool b = false;

    switch (m__d)
    {
        case TI_PLAIN_ARRAY_SMALL:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_array_sdefn;
}

eprosima::fastdds::dds::xtypes::PlainArraySElemDefn& eprosima::fastdds::dds::xtypes::TypeIdentifier::array_sdefn()
{
    bool b = false;

    switch (m__d)
    {
        case TI_PLAIN_ARRAY_SMALL:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_array_sdefn;
}


void eprosima::fastdds::dds::xtypes::TypeIdentifier::array_ldefn(
        const eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn& _array_ldefn)
{
    m_array_ldefn = _array_ldefn;
    m__d = TI_PLAIN_ARRAY_LARGE;

}

void eprosima::fastdds::dds::xtypes::TypeIdentifier::array_ldefn(
        eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn&& _array_ldefn)
{
    m_array_ldefn = std::move(_array_ldefn);
    m__d = TI_PLAIN_ARRAY_LARGE;

}

const eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn& eprosima::fastdds::dds::xtypes::TypeIdentifier::array_ldefn() const
{
    bool b = false;

    switch (m__d)
    {
        case TI_PLAIN_ARRAY_LARGE:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_array_ldefn;
}

eprosima::fastdds::dds::xtypes::PlainArrayLElemDefn& eprosima::fastdds::dds::xtypes::TypeIdentifier::array_ldefn()
{
    bool b = false;

    switch (m__d)
    {
        case TI_PLAIN_ARRAY_LARGE:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_array_ldefn;
}


void eprosima::fastdds::dds::xtypes::TypeIdentifier::map_sdefn(
        const eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn& _map_sdefn)
{
    m_map_sdefn = _map_sdefn;
    m__d = TI_PLAIN_MAP_SMALL;

}

void eprosima::fastdds::dds::xtypes::TypeIdentifier::map_sdefn(
        eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn&& _map_sdefn)
{
    m_map_sdefn = std::move(_map_sdefn);
    m__d = TI_PLAIN_MAP_SMALL;

}

const eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn& eprosima::fastdds::dds::xtypes::TypeIdentifier::map_sdefn() const
{
    bool b = false;

    switch (m__d)
    {
        case TI_PLAIN_MAP_SMALL:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_map_sdefn;
}

eprosima::fastdds::dds::xtypes::PlainMapSTypeDefn& eprosima::fastdds::dds::xtypes::TypeIdentifier::map_sdefn()
{
    bool b = false;

    switch (m__d)
    {
        case TI_PLAIN_MAP_SMALL:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_map_sdefn;
}


void eprosima::fastdds::dds::xtypes::TypeIdentifier::map_ldefn(
        const eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn& _map_ldefn)
{
    m_map_ldefn = _map_ldefn;
    m__d = TI_PLAIN_MAP_LARGE;

}

void eprosima::fastdds::dds::xtypes::TypeIdentifier::map_ldefn(
        eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn&& _map_ldefn)
{
    m_map_ldefn = std::move(_map_ldefn);
    m__d = TI_PLAIN_MAP_LARGE;

}

const eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn& eprosima::fastdds::dds::xtypes::TypeIdentifier::map_ldefn() const
{
    bool b = false;

    switch (m__d)
    {
        case TI_PLAIN_MAP_LARGE:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_map_ldefn;
}

eprosima::fastdds::dds::xtypes::PlainMapLTypeDefn& eprosima::fastdds::dds::xtypes::TypeIdentifier::map_ldefn()
{
    bool b = false;

    switch (m__d)
    {
        case TI_PLAIN_MAP_LARGE:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_map_ldefn;
}


void eprosima::fastdds::dds::xtypes::TypeIdentifier::sc_component_id(
        const eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId& _sc_component_id)
{
    m_sc_component_id = _sc_component_id;
    m__d = TI_STRONGLY_CONNECTED_COMPONENT;

}

void eprosima::fastdds::dds::xtypes::TypeIdentifier::sc_component_id(
        eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId&& _sc_component_id)
{
    m_sc_component_id = std::move(_sc_component_id);
    m__d = TI_STRONGLY_CONNECTED_COMPONENT;

}

const eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId& eprosima::fastdds::dds::xtypes::TypeIdentifier::sc_component_id() const
{
    bool b = false;

    switch (m__d)
    {
        case TI_STRONGLY_CONNECTED_COMPONENT:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_sc_component_id;
}

eprosima::fastdds::dds::xtypes::StronglyConnectedComponentId& eprosima::fastdds::dds::xtypes::TypeIdentifier::sc_component_id()
{
    bool b = false;

    switch (m__d)
    {
        case TI_STRONGLY_CONNECTED_COMPONENT:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_sc_component_id;
}


void eprosima::fastdds::dds::xtypes::TypeIdentifier::equivalence_hash(
        const eprosima::fastdds::dds::xtypes::EquivalenceHash& _equivalence_hash)
{
    m_equivalence_hash = _equivalence_hash;
    m__d = EK_COMPLETE;

}

void eprosima::fastdds::dds::xtypes::TypeIdentifier::equivalence_hash(
        eprosima::fastdds::dds::xtypes::EquivalenceHash&& _equivalence_hash)
{
    m_equivalence_hash = std::move(_equivalence_hash);
    m__d = EK_COMPLETE;

}

const eprosima::fastdds::dds::xtypes::EquivalenceHash& eprosima::fastdds::dds::xtypes::TypeIdentifier::equivalence_hash() const
{
    bool b = false;

    switch (m__d)
    {
        case EK_COMPLETE:
        case EK_MINIMAL:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_equivalence_hash;
}

eprosima::fastdds::dds::xtypes::EquivalenceHash& eprosima::fastdds::dds::xtypes::TypeIdentifier::equivalence_hash()
{
    bool b = false;

    switch (m__d)
    {
        case EK_COMPLETE:
        case EK_MINIMAL:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_equivalence_hash;
}


void eprosima::fastdds::dds::xtypes::TypeIdentifier::extended_defn(
        const eprosima::fastdds::dds::xtypes::ExtendedTypeDefn& _extended_defn)
{
    m_extended_defn = _extended_defn;
    m__d = 0;

}

void eprosima::fastdds::dds::xtypes::TypeIdentifier::extended_defn(
        eprosima::fastdds::dds::xtypes::ExtendedTypeDefn&& _extended_defn)
{
    m_extended_defn = std::move(_extended_defn);
    m__d = 0;

}

const eprosima::fastdds::dds::xtypes::ExtendedTypeDefn& eprosima::fastdds::dds::xtypes::TypeIdentifier::extended_defn() const
{
    bool b = true;

    switch (m__d)
    {
        case TI_STRING8_SMALL:
        case TI_STRING16_SMALL:
        case TI_STRING8_LARGE:
        case TI_STRING16_LARGE:
        case TI_PLAIN_SEQUENCE_SMALL:
        case TI_PLAIN_SEQUENCE_LARGE:
        case TI_PLAIN_ARRAY_SMALL:
        case TI_PLAIN_ARRAY_LARGE:
        case TI_PLAIN_MAP_SMALL:
        case TI_PLAIN_MAP_LARGE:
        case TI_STRONGLY_CONNECTED_COMPONENT:
        case EK_COMPLETE:
        case EK_MINIMAL:
            b = false;
            break;
        default:
            break;
    }
    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_extended_defn;
}

eprosima::fastdds::dds::xtypes::ExtendedTypeDefn& eprosima::fastdds::dds::xtypes::TypeIdentifier::extended_defn()
{
    bool b = true;

    switch (m__d)
    {
        case TI_STRING8_SMALL:
        case TI_STRING16_SMALL:
        case TI_STRING8_LARGE:
        case TI_STRING16_LARGE:
        case TI_PLAIN_SEQUENCE_SMALL:
        case TI_PLAIN_SEQUENCE_LARGE:
        case TI_PLAIN_ARRAY_SMALL:
        case TI_PLAIN_ARRAY_LARGE:
        case TI_PLAIN_MAP_SMALL:
        case TI_PLAIN_MAP_LARGE:
        case TI_STRONGLY_CONNECTED_COMPONENT:
        case EK_COMPLETE:
        case EK_MINIMAL:
            b = false;
            break;
        default:
            break;
    }
    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_extended_defn;
}






eprosima::fastdds::dds::xtypes::ExtendedAnnotationParameterValue::ExtendedAnnotationParameterValue()
{

}

eprosima::fastdds::dds::xtypes::ExtendedAnnotationParameterValue::~ExtendedAnnotationParameterValue()
{
}

eprosima::fastdds::dds::xtypes::ExtendedAnnotationParameterValue::ExtendedAnnotationParameterValue(
        const ExtendedAnnotationParameterValue& x)
{
    static_cast<void>(x);
}

eprosima::fastdds::dds::xtypes::ExtendedAnnotationParameterValue::ExtendedAnnotationParameterValue(
        ExtendedAnnotationParameterValue&& x) noexcept
{
    static_cast<void>(x);
}

eprosima::fastdds::dds::xtypes::ExtendedAnnotationParameterValue& eprosima::fastdds::dds::xtypes::ExtendedAnnotationParameterValue::operator =(
        const ExtendedAnnotationParameterValue& x)
{

    static_cast<void>(x);

    return *this;
}

eprosima::fastdds::dds::xtypes::ExtendedAnnotationParameterValue& eprosima::fastdds::dds::xtypes::ExtendedAnnotationParameterValue::operator =(
        ExtendedAnnotationParameterValue&& x) noexcept
{

    static_cast<void>(x);

    return *this;
}

bool eprosima::fastdds::dds::xtypes::ExtendedAnnotationParameterValue::operator ==(
        const ExtendedAnnotationParameterValue& x) const
{
    static_cast<void>(x);
    return true;
}

bool eprosima::fastdds::dds::xtypes::ExtendedAnnotationParameterValue::operator !=(
        const ExtendedAnnotationParameterValue& x) const
{
    return !(*this == x);
}


eprosima::fastdds::dds::xtypes::AnnotationParameterValue::AnnotationParameterValue()
{
    m__d = 0;
}

eprosima::fastdds::dds::xtypes::AnnotationParameterValue::~AnnotationParameterValue()
{
}

eprosima::fastdds::dds::xtypes::AnnotationParameterValue::AnnotationParameterValue(
        const AnnotationParameterValue& x)
{
    m__d = x.m__d;

    switch (m__d)
    {
        case TK_BOOLEAN:
            m_boolean_value = x.m_boolean_value;
            break;


        case TK_BYTE:
            m_byte_value = x.m_byte_value;
            break;


        case TK_INT8:
            m_int8_value = x.m_int8_value;
            break;


        case TK_UINT8:
            m_uint8_value = x.m_uint8_value;
            break;


        case TK_INT16:
            m_int16_value = x.m_int16_value;
            break;


        case TK_UINT16:
            m_uint_16_value = x.m_uint_16_value;
            break;


        case TK_INT32:
            m_int32_value = x.m_int32_value;
            break;


        case TK_UINT32:
            m_uint32_value = x.m_uint32_value;
            break;


        case TK_INT64:
            m_int64_value = x.m_int64_value;
            break;


        case TK_UINT64:
            m_uint64_value = x.m_uint64_value;
            break;


        case TK_FLOAT32:
            m_float32_value = x.m_float32_value;
            break;


        case TK_FLOAT64:
            m_float64_value = x.m_float64_value;
            break;


        case TK_FLOAT128:
            m_float128_value = x.m_float128_value;
            break;


        case TK_CHAR8:
            m_char_value = x.m_char_value;
            break;


        case TK_CHAR16:
            m_wchar_value = x.m_wchar_value;
            break;


        case TK_ENUM:
            m_enumerated_value = x.m_enumerated_value;
            break;


        case TK_STRING8:
            m_string8_value = x.m_string8_value;
            break;


        case TK_STRING16:
            m_string16_value = x.m_string16_value;
            break;


        default:
            m_extended_value = x.m_extended_value;

            break;
    }
}

eprosima::fastdds::dds::xtypes::AnnotationParameterValue::AnnotationParameterValue(
        AnnotationParameterValue&& x) noexcept
{
    m__d = x.m__d;

    switch (m__d)
    {
        case TK_BOOLEAN:
            m_boolean_value = x.m_boolean_value;
            break;


        case TK_BYTE:
            m_byte_value = x.m_byte_value;
            break;


        case TK_INT8:
            m_int8_value = x.m_int8_value;
            break;


        case TK_UINT8:
            m_uint8_value = x.m_uint8_value;
            break;


        case TK_INT16:
            m_int16_value = x.m_int16_value;
            break;


        case TK_UINT16:
            m_uint_16_value = x.m_uint_16_value;
            break;


        case TK_INT32:
            m_int32_value = x.m_int32_value;
            break;


        case TK_UINT32:
            m_uint32_value = x.m_uint32_value;
            break;


        case TK_INT64:
            m_int64_value = x.m_int64_value;
            break;


        case TK_UINT64:
            m_uint64_value = x.m_uint64_value;
            break;


        case TK_FLOAT32:
            m_float32_value = x.m_float32_value;
            break;


        case TK_FLOAT64:
            m_float64_value = x.m_float64_value;
            break;


        case TK_FLOAT128:
            m_float128_value = x.m_float128_value;
            break;


        case TK_CHAR8:
            m_char_value = x.m_char_value;
            break;


        case TK_CHAR16:
            m_wchar_value = x.m_wchar_value;
            break;


        case TK_ENUM:
            m_enumerated_value = x.m_enumerated_value;
            break;


        case TK_STRING8:
            m_string8_value = std::move(x.m_string8_value);

            break;


        case TK_STRING16:
            m_string16_value = std::move(x.m_string16_value);

            break;


        default:
            m_extended_value = std::move(x.m_extended_value);

            break;
    }
}

eprosima::fastdds::dds::xtypes::AnnotationParameterValue& eprosima::fastdds::dds::xtypes::AnnotationParameterValue::operator =(
        const AnnotationParameterValue& x)
{
    m__d = x.m__d;

    switch (m__d)
    {
        case TK_BOOLEAN:
            m_boolean_value = x.m_boolean_value;
            break;


        case TK_BYTE:
            m_byte_value = x.m_byte_value;
            break;


        case TK_INT8:
            m_int8_value = x.m_int8_value;
            break;


        case TK_UINT8:
            m_uint8_value = x.m_uint8_value;
            break;


        case TK_INT16:
            m_int16_value = x.m_int16_value;
            break;


        case TK_UINT16:
            m_uint_16_value = x.m_uint_16_value;
            break;


        case TK_INT32:
            m_int32_value = x.m_int32_value;
            break;


        case TK_UINT32:
            m_uint32_value = x.m_uint32_value;
            break;


        case TK_INT64:
            m_int64_value = x.m_int64_value;
            break;


        case TK_UINT64:
            m_uint64_value = x.m_uint64_value;
            break;


        case TK_FLOAT32:
            m_float32_value = x.m_float32_value;
            break;


        case TK_FLOAT64:
            m_float64_value = x.m_float64_value;
            break;


        case TK_FLOAT128:
            m_float128_value = x.m_float128_value;
            break;


        case TK_CHAR8:
            m_char_value = x.m_char_value;
            break;


        case TK_CHAR16:
            m_wchar_value = x.m_wchar_value;
            break;


        case TK_ENUM:
            m_enumerated_value = x.m_enumerated_value;
            break;


        case TK_STRING8:
            m_string8_value = x.m_string8_value;
            break;


        case TK_STRING16:
            m_string16_value = x.m_string16_value;
            break;


        default:
            m_extended_value = x.m_extended_value;

            break;
    }

    return *this;
}

eprosima::fastdds::dds::xtypes::AnnotationParameterValue& eprosima::fastdds::dds::xtypes::AnnotationParameterValue::operator =(
        AnnotationParameterValue&& x) noexcept
{
    m__d = x.m__d;

    switch (m__d)
    {
        case TK_BOOLEAN:
            m_boolean_value = x.m_boolean_value;
            break;


        case TK_BYTE:
            m_byte_value = x.m_byte_value;
            break;


        case TK_INT8:
            m_int8_value = x.m_int8_value;
            break;


        case TK_UINT8:
            m_uint8_value = x.m_uint8_value;
            break;


        case TK_INT16:
            m_int16_value = x.m_int16_value;
            break;


        case TK_UINT16:
            m_uint_16_value = x.m_uint_16_value;
            break;


        case TK_INT32:
            m_int32_value = x.m_int32_value;
            break;


        case TK_UINT32:
            m_uint32_value = x.m_uint32_value;
            break;


        case TK_INT64:
            m_int64_value = x.m_int64_value;
            break;


        case TK_UINT64:
            m_uint64_value = x.m_uint64_value;
            break;


        case TK_FLOAT32:
            m_float32_value = x.m_float32_value;
            break;


        case TK_FLOAT64:
            m_float64_value = x.m_float64_value;
            break;


        case TK_FLOAT128:
            m_float128_value = x.m_float128_value;
            break;


        case TK_CHAR8:
            m_char_value = x.m_char_value;
            break;


        case TK_CHAR16:
            m_wchar_value = x.m_wchar_value;
            break;


        case TK_ENUM:
            m_enumerated_value = x.m_enumerated_value;
            break;


        case TK_STRING8:
            m_string8_value = std::move(x.m_string8_value);

            break;


        case TK_STRING16:
            m_string16_value = std::move(x.m_string16_value);

            break;


        default:
            m_extended_value = std::move(x.m_extended_value);

            break;
    }

    return *this;
}

bool eprosima::fastdds::dds::xtypes::AnnotationParameterValue::operator ==(
        const AnnotationParameterValue& x) const
{
    if (m__d != x.m__d)
    {
        return false;
    }

    switch (m__d)
    {
        case TK_BOOLEAN:
            return (m_boolean_value == x.m_boolean_value);
            break;


        case TK_BYTE:
            return (m_byte_value == x.m_byte_value);
            break;


        case TK_INT8:
            return (m_int8_value == x.m_int8_value);
            break;


        case TK_UINT8:
            return (m_uint8_value == x.m_uint8_value);
            break;


        case TK_INT16:
            return (m_int16_value == x.m_int16_value);
            break;


        case TK_UINT16:
            return (m_uint_16_value == x.m_uint_16_value);
            break;


        case TK_INT32:
            return (m_int32_value == x.m_int32_value);
            break;


        case TK_UINT32:
            return (m_uint32_value == x.m_uint32_value);
            break;


        case TK_INT64:
            return (m_int64_value == x.m_int64_value);
            break;


        case TK_UINT64:
            return (m_uint64_value == x.m_uint64_value);
            break;


        case TK_FLOAT32:
            return (m_float32_value == x.m_float32_value);
            break;


        case TK_FLOAT64:
            return (m_float64_value == x.m_float64_value);
            break;


        case TK_FLOAT128:
            return (m_float128_value == x.m_float128_value);
            break;


        case TK_CHAR8:
            return (m_char_value == x.m_char_value);
            break;


        case TK_CHAR16:
            return (m_wchar_value == x.m_wchar_value);
            break;


        case TK_ENUM:
            return (m_enumerated_value == x.m_enumerated_value);
            break;


        case TK_STRING8:
            return (m_string8_value == x.m_string8_value);
            break;


        case TK_STRING16:
            return (m_string16_value == x.m_string16_value);
            break;


        default:
            return m_extended_value == x.m_extended_value;

            break;
    }
    return false;
}

bool eprosima::fastdds::dds::xtypes::AnnotationParameterValue::operator !=(
        const AnnotationParameterValue& x) const
{
    return !(*this == x);
}

void eprosima::fastdds::dds::xtypes::AnnotationParameterValue::_d(
        uint8_t __d)
{
    bool b = false;

    switch (m__d)
    {
        case TK_BOOLEAN:
            switch (__d)
            {
                case TK_BOOLEAN:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_BYTE:
            switch (__d)
            {
                case TK_BYTE:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_INT8:
            switch (__d)
            {
                case TK_INT8:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_UINT8:
            switch (__d)
            {
                case TK_UINT8:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_INT16:
            switch (__d)
            {
                case TK_INT16:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_UINT16:
            switch (__d)
            {
                case TK_UINT16:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_INT32:
            switch (__d)
            {
                case TK_INT32:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_UINT32:
            switch (__d)
            {
                case TK_UINT32:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_INT64:
            switch (__d)
            {
                case TK_INT64:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_UINT64:
            switch (__d)
            {
                case TK_UINT64:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_FLOAT32:
            switch (__d)
            {
                case TK_FLOAT32:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_FLOAT64:
            switch (__d)
            {
                case TK_FLOAT64:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_FLOAT128:
            switch (__d)
            {
                case TK_FLOAT128:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_CHAR8:
            switch (__d)
            {
                case TK_CHAR8:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_CHAR16:
            switch (__d)
            {
                case TK_CHAR16:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_ENUM:
            switch (__d)
            {
                case TK_ENUM:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_STRING8:
            switch (__d)
            {
                case TK_STRING8:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_STRING16:
            switch (__d)
            {
                case TK_STRING16:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        default:
            b = true;
            switch (__d)
            {
                case TK_BOOLEAN:
                case TK_BYTE:
                case TK_INT8:
                case TK_UINT8:
                case TK_INT16:
                case TK_UINT16:
                case TK_INT32:
                case TK_UINT32:
                case TK_INT64:
                case TK_UINT64:
                case TK_FLOAT32:
                case TK_FLOAT64:
                case TK_FLOAT128:
                case TK_CHAR8:
                case TK_CHAR16:
                case TK_ENUM:
                case TK_STRING8:
                case TK_STRING16:
                    b = false;
                    break;
                default:
                    break;
            }
            break;

    }

    if (!b)
    {
        throw BadParamException("Discriminator doesn't correspond with the selected union member");
    }

    m__d = __d;
}

uint8_t eprosima::fastdds::dds::xtypes::AnnotationParameterValue::_d() const
{
    return m__d;
}

uint8_t& eprosima::fastdds::dds::xtypes::AnnotationParameterValue::_d()
{
    return m__d;
}

void eprosima::fastdds::dds::xtypes::AnnotationParameterValue::boolean_value(
        bool _boolean_value)
{
    m_boolean_value = _boolean_value;
    m__d = TK_BOOLEAN;

}

bool eprosima::fastdds::dds::xtypes::AnnotationParameterValue::boolean_value() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_BOOLEAN:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_boolean_value;
}

bool& eprosima::fastdds::dds::xtypes::AnnotationParameterValue::boolean_value()
{
    bool b = false;

    switch (m__d)
    {
        case TK_BOOLEAN:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_boolean_value;
}


void eprosima::fastdds::dds::xtypes::AnnotationParameterValue::byte_value(
        uint8_t _byte_value)
{
    m_byte_value = _byte_value;
    m__d = TK_BYTE;

}

uint8_t eprosima::fastdds::dds::xtypes::AnnotationParameterValue::byte_value() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_BYTE:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_byte_value;
}

uint8_t& eprosima::fastdds::dds::xtypes::AnnotationParameterValue::byte_value()
{
    bool b = false;

    switch (m__d)
    {
        case TK_BYTE:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_byte_value;
}


void eprosima::fastdds::dds::xtypes::AnnotationParameterValue::int8_value(
        int8_t _int8_value)
{
    m_int8_value = _int8_value;
    m__d = TK_INT8;

}

int8_t eprosima::fastdds::dds::xtypes::AnnotationParameterValue::int8_value() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_INT8:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_int8_value;
}

int8_t& eprosima::fastdds::dds::xtypes::AnnotationParameterValue::int8_value()
{
    bool b = false;

    switch (m__d)
    {
        case TK_INT8:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_int8_value;
}


void eprosima::fastdds::dds::xtypes::AnnotationParameterValue::uint8_value(
        uint8_t _uint8_value)
{
    m_uint8_value = _uint8_value;
    m__d = TK_UINT8;

}

uint8_t eprosima::fastdds::dds::xtypes::AnnotationParameterValue::uint8_value() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_UINT8:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_uint8_value;
}

uint8_t& eprosima::fastdds::dds::xtypes::AnnotationParameterValue::uint8_value()
{
    bool b = false;

    switch (m__d)
    {
        case TK_UINT8:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_uint8_value;
}


void eprosima::fastdds::dds::xtypes::AnnotationParameterValue::int16_value(
        int16_t _int16_value)
{
    m_int16_value = _int16_value;
    m__d = TK_INT16;

}

int16_t eprosima::fastdds::dds::xtypes::AnnotationParameterValue::int16_value() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_INT16:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_int16_value;
}

int16_t& eprosima::fastdds::dds::xtypes::AnnotationParameterValue::int16_value()
{
    bool b = false;

    switch (m__d)
    {
        case TK_INT16:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_int16_value;
}


void eprosima::fastdds::dds::xtypes::AnnotationParameterValue::uint_16_value(
        uint16_t _uint_16_value)
{
    m_uint_16_value = _uint_16_value;
    m__d = TK_UINT16;

}

uint16_t eprosima::fastdds::dds::xtypes::AnnotationParameterValue::uint_16_value() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_UINT16:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_uint_16_value;
}

uint16_t& eprosima::fastdds::dds::xtypes::AnnotationParameterValue::uint_16_value()
{
    bool b = false;

    switch (m__d)
    {
        case TK_UINT16:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_uint_16_value;
}


void eprosima::fastdds::dds::xtypes::AnnotationParameterValue::int32_value(
        int32_t _int32_value)
{
    m_int32_value = _int32_value;
    m__d = TK_INT32;

}

int32_t eprosima::fastdds::dds::xtypes::AnnotationParameterValue::int32_value() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_INT32:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_int32_value;
}

int32_t& eprosima::fastdds::dds::xtypes::AnnotationParameterValue::int32_value()
{
    bool b = false;

    switch (m__d)
    {
        case TK_INT32:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_int32_value;
}


void eprosima::fastdds::dds::xtypes::AnnotationParameterValue::uint32_value(
        uint32_t _uint32_value)
{
    m_uint32_value = _uint32_value;
    m__d = TK_UINT32;

}

uint32_t eprosima::fastdds::dds::xtypes::AnnotationParameterValue::uint32_value() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_UINT32:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_uint32_value;
}

uint32_t& eprosima::fastdds::dds::xtypes::AnnotationParameterValue::uint32_value()
{
    bool b = false;

    switch (m__d)
    {
        case TK_UINT32:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_uint32_value;
}


void eprosima::fastdds::dds::xtypes::AnnotationParameterValue::int64_value(
        int64_t _int64_value)
{
    m_int64_value = _int64_value;
    m__d = TK_INT64;

}

int64_t eprosima::fastdds::dds::xtypes::AnnotationParameterValue::int64_value() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_INT64:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_int64_value;
}

int64_t& eprosima::fastdds::dds::xtypes::AnnotationParameterValue::int64_value()
{
    bool b = false;

    switch (m__d)
    {
        case TK_INT64:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_int64_value;
}


void eprosima::fastdds::dds::xtypes::AnnotationParameterValue::uint64_value(
        uint64_t _uint64_value)
{
    m_uint64_value = _uint64_value;
    m__d = TK_UINT64;

}

uint64_t eprosima::fastdds::dds::xtypes::AnnotationParameterValue::uint64_value() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_UINT64:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_uint64_value;
}

uint64_t& eprosima::fastdds::dds::xtypes::AnnotationParameterValue::uint64_value()
{
    bool b = false;

    switch (m__d)
    {
        case TK_UINT64:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_uint64_value;
}


void eprosima::fastdds::dds::xtypes::AnnotationParameterValue::float32_value(
        float _float32_value)
{
    m_float32_value = _float32_value;
    m__d = TK_FLOAT32;

}

float eprosima::fastdds::dds::xtypes::AnnotationParameterValue::float32_value() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_FLOAT32:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_float32_value;
}

float& eprosima::fastdds::dds::xtypes::AnnotationParameterValue::float32_value()
{
    bool b = false;

    switch (m__d)
    {
        case TK_FLOAT32:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_float32_value;
}


void eprosima::fastdds::dds::xtypes::AnnotationParameterValue::float64_value(
        double _float64_value)
{
    m_float64_value = _float64_value;
    m__d = TK_FLOAT64;

}

double eprosima::fastdds::dds::xtypes::AnnotationParameterValue::float64_value() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_FLOAT64:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_float64_value;
}

double& eprosima::fastdds::dds::xtypes::AnnotationParameterValue::float64_value()
{
    bool b = false;

    switch (m__d)
    {
        case TK_FLOAT64:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_float64_value;
}


void eprosima::fastdds::dds::xtypes::AnnotationParameterValue::float128_value(
        long double _float128_value)
{
    m_float128_value = _float128_value;
    m__d = TK_FLOAT128;

}

long double eprosima::fastdds::dds::xtypes::AnnotationParameterValue::float128_value() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_FLOAT128:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_float128_value;
}

long double& eprosima::fastdds::dds::xtypes::AnnotationParameterValue::float128_value()
{
    bool b = false;

    switch (m__d)
    {
        case TK_FLOAT128:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_float128_value;
}


void eprosima::fastdds::dds::xtypes::AnnotationParameterValue::char_value(
        char _char_value)
{
    m_char_value = _char_value;
    m__d = TK_CHAR8;

}

char eprosima::fastdds::dds::xtypes::AnnotationParameterValue::char_value() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_CHAR8:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_char_value;
}

char& eprosima::fastdds::dds::xtypes::AnnotationParameterValue::char_value()
{
    bool b = false;

    switch (m__d)
    {
        case TK_CHAR8:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_char_value;
}


void eprosima::fastdds::dds::xtypes::AnnotationParameterValue::wchar_value(
        wchar_t _wchar_value)
{
    m_wchar_value = _wchar_value;
    m__d = TK_CHAR16;

}

wchar_t eprosima::fastdds::dds::xtypes::AnnotationParameterValue::wchar_value() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_CHAR16:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_wchar_value;
}

wchar_t& eprosima::fastdds::dds::xtypes::AnnotationParameterValue::wchar_value()
{
    bool b = false;

    switch (m__d)
    {
        case TK_CHAR16:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_wchar_value;
}


void eprosima::fastdds::dds::xtypes::AnnotationParameterValue::enumerated_value(
        int32_t _enumerated_value)
{
    m_enumerated_value = _enumerated_value;
    m__d = TK_ENUM;

}

int32_t eprosima::fastdds::dds::xtypes::AnnotationParameterValue::enumerated_value() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_ENUM:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_enumerated_value;
}

int32_t& eprosima::fastdds::dds::xtypes::AnnotationParameterValue::enumerated_value()
{
    bool b = false;

    switch (m__d)
    {
        case TK_ENUM:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_enumerated_value;
}


void eprosima::fastdds::dds::xtypes::AnnotationParameterValue::string8_value(
        const eprosima::fastcdr::fixed_string<128>& _string8_value)
{
    m_string8_value = _string8_value;
    m__d = TK_STRING8;

}

void eprosima::fastdds::dds::xtypes::AnnotationParameterValue::string8_value(
        eprosima::fastcdr::fixed_string<128>&& _string8_value)
{
    m_string8_value = std::move(_string8_value);
    m__d = TK_STRING8;

}

const eprosima::fastcdr::fixed_string<128>& eprosima::fastdds::dds::xtypes::AnnotationParameterValue::string8_value() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_STRING8:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_string8_value;
}

eprosima::fastcdr::fixed_string<128>& eprosima::fastdds::dds::xtypes::AnnotationParameterValue::string8_value()
{
    bool b = false;

    switch (m__d)
    {
        case TK_STRING8:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_string8_value;
}


void eprosima::fastdds::dds::xtypes::AnnotationParameterValue::string16_value(
        const std::wstring& _string16_value)
{
    m_string16_value = _string16_value;
    m__d = TK_STRING16;

}

void eprosima::fastdds::dds::xtypes::AnnotationParameterValue::string16_value(
        std::wstring&& _string16_value)
{
    m_string16_value = std::move(_string16_value);
    m__d = TK_STRING16;

}

const std::wstring& eprosima::fastdds::dds::xtypes::AnnotationParameterValue::string16_value() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_STRING16:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_string16_value;
}

std::wstring& eprosima::fastdds::dds::xtypes::AnnotationParameterValue::string16_value()
{
    bool b = false;

    switch (m__d)
    {
        case TK_STRING16:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_string16_value;
}


void eprosima::fastdds::dds::xtypes::AnnotationParameterValue::extended_value(
        const eprosima::fastdds::dds::xtypes::ExtendedAnnotationParameterValue& _extended_value)
{
    m_extended_value = _extended_value;
    m__d = 0;

}

void eprosima::fastdds::dds::xtypes::AnnotationParameterValue::extended_value(
        eprosima::fastdds::dds::xtypes::ExtendedAnnotationParameterValue&& _extended_value)
{
    m_extended_value = std::move(_extended_value);
    m__d = 0;

}

const eprosima::fastdds::dds::xtypes::ExtendedAnnotationParameterValue& eprosima::fastdds::dds::xtypes::AnnotationParameterValue::extended_value() const
{
    bool b = true;

    switch (m__d)
    {
        case TK_BOOLEAN:
        case TK_BYTE:
        case TK_INT8:
        case TK_UINT8:
        case TK_INT16:
        case TK_UINT16:
        case TK_INT32:
        case TK_UINT32:
        case TK_INT64:
        case TK_UINT64:
        case TK_FLOAT32:
        case TK_FLOAT64:
        case TK_FLOAT128:
        case TK_CHAR8:
        case TK_CHAR16:
        case TK_ENUM:
        case TK_STRING8:
        case TK_STRING16:
            b = false;
            break;
        default:
            break;
    }
    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_extended_value;
}

eprosima::fastdds::dds::xtypes::ExtendedAnnotationParameterValue& eprosima::fastdds::dds::xtypes::AnnotationParameterValue::extended_value()
{
    bool b = true;

    switch (m__d)
    {
        case TK_BOOLEAN:
        case TK_BYTE:
        case TK_INT8:
        case TK_UINT8:
        case TK_INT16:
        case TK_UINT16:
        case TK_INT32:
        case TK_UINT32:
        case TK_INT64:
        case TK_UINT64:
        case TK_FLOAT32:
        case TK_FLOAT64:
        case TK_FLOAT128:
        case TK_CHAR8:
        case TK_CHAR16:
        case TK_ENUM:
        case TK_STRING8:
        case TK_STRING16:
            b = false;
            break;
        default:
            break;
    }
    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_extended_value;
}


eprosima::fastdds::dds::xtypes::AppliedAnnotationParameter::AppliedAnnotationParameter()
{

}

eprosima::fastdds::dds::xtypes::AppliedAnnotationParameter::~AppliedAnnotationParameter()
{
}

eprosima::fastdds::dds::xtypes::AppliedAnnotationParameter::AppliedAnnotationParameter(
        const AppliedAnnotationParameter& x)
{
    m_paramname_hash = x.m_paramname_hash;
    m_value = x.m_value;
}

eprosima::fastdds::dds::xtypes::AppliedAnnotationParameter::AppliedAnnotationParameter(
        AppliedAnnotationParameter&& x) noexcept
{
    m_paramname_hash = std::move(x.m_paramname_hash);
    m_value = std::move(x.m_value);
}

eprosima::fastdds::dds::xtypes::AppliedAnnotationParameter& eprosima::fastdds::dds::xtypes::AppliedAnnotationParameter::operator =(
        const AppliedAnnotationParameter& x)
{

    m_paramname_hash = x.m_paramname_hash;
    m_value = x.m_value;
    return *this;
}

eprosima::fastdds::dds::xtypes::AppliedAnnotationParameter& eprosima::fastdds::dds::xtypes::AppliedAnnotationParameter::operator =(
        AppliedAnnotationParameter&& x) noexcept
{

    m_paramname_hash = std::move(x.m_paramname_hash);
    m_value = std::move(x.m_value);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::AppliedAnnotationParameter::operator ==(
        const AppliedAnnotationParameter& x) const
{
    return (m_paramname_hash == x.m_paramname_hash &&
           m_value == x.m_value);
}

bool eprosima::fastdds::dds::xtypes::AppliedAnnotationParameter::operator !=(
        const AppliedAnnotationParameter& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member paramname_hash
 * @param _paramname_hash New value to be copied in member paramname_hash
 */
void eprosima::fastdds::dds::xtypes::AppliedAnnotationParameter::paramname_hash(
        const eprosima::fastdds::dds::xtypes::NameHash& _paramname_hash)
{
    m_paramname_hash = _paramname_hash;
}

/*!
 * @brief This function moves the value in member paramname_hash
 * @param _paramname_hash New value to be moved in member paramname_hash
 */
void eprosima::fastdds::dds::xtypes::AppliedAnnotationParameter::paramname_hash(
        eprosima::fastdds::dds::xtypes::NameHash&& _paramname_hash)
{
    m_paramname_hash = std::move(_paramname_hash);
}

/*!
 * @brief This function returns a constant reference to member paramname_hash
 * @return Constant reference to member paramname_hash
 */
const eprosima::fastdds::dds::xtypes::NameHash& eprosima::fastdds::dds::xtypes::AppliedAnnotationParameter::paramname_hash() const
{
    return m_paramname_hash;
}

/*!
 * @brief This function returns a reference to member paramname_hash
 * @return Reference to member paramname_hash
 */
eprosima::fastdds::dds::xtypes::NameHash& eprosima::fastdds::dds::xtypes::AppliedAnnotationParameter::paramname_hash()
{
    return m_paramname_hash;
}


/*!
 * @brief This function copies the value in member value
 * @param _value New value to be copied in member value
 */
void eprosima::fastdds::dds::xtypes::AppliedAnnotationParameter::value(
        const eprosima::fastdds::dds::xtypes::AnnotationParameterValue& _value)
{
    m_value = _value;
}

/*!
 * @brief This function moves the value in member value
 * @param _value New value to be moved in member value
 */
void eprosima::fastdds::dds::xtypes::AppliedAnnotationParameter::value(
        eprosima::fastdds::dds::xtypes::AnnotationParameterValue&& _value)
{
    m_value = std::move(_value);
}

/*!
 * @brief This function returns a constant reference to member value
 * @return Constant reference to member value
 */
const eprosima::fastdds::dds::xtypes::AnnotationParameterValue& eprosima::fastdds::dds::xtypes::AppliedAnnotationParameter::value() const
{
    return m_value;
}

/*!
 * @brief This function returns a reference to member value
 * @return Reference to member value
 */
eprosima::fastdds::dds::xtypes::AnnotationParameterValue& eprosima::fastdds::dds::xtypes::AppliedAnnotationParameter::value()
{
    return m_value;
}



eprosima::fastdds::dds::xtypes::AppliedAnnotation::AppliedAnnotation()
{
    m_annotation_typeid = new eprosima::fastdds::dds::xtypes::TypeIdentifier();



}

eprosima::fastdds::dds::xtypes::AppliedAnnotation::~AppliedAnnotation()
{
    delete m_annotation_typeid;

}

eprosima::fastdds::dds::xtypes::AppliedAnnotation::AppliedAnnotation(
        const AppliedAnnotation& x)
{
    m_annotation_typeid = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_annotation_typeid = *x.m_annotation_typeid;
    m_param_seq = x.m_param_seq;
}

eprosima::fastdds::dds::xtypes::AppliedAnnotation::AppliedAnnotation(
        AppliedAnnotation&& x) noexcept
{
    m_annotation_typeid = x.m_annotation_typeid;x.m_annotation_typeid = nullptr;
    m_param_seq = std::move(x.m_param_seq);
}

eprosima::fastdds::dds::xtypes::AppliedAnnotation& eprosima::fastdds::dds::xtypes::AppliedAnnotation::operator =(
        const AppliedAnnotation& x)
{

    m_annotation_typeid = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_annotation_typeid = *x.m_annotation_typeid;
    m_param_seq = x.m_param_seq;
    return *this;
}

eprosima::fastdds::dds::xtypes::AppliedAnnotation& eprosima::fastdds::dds::xtypes::AppliedAnnotation::operator =(
        AppliedAnnotation&& x) noexcept
{

    m_annotation_typeid = x.m_annotation_typeid;x.m_annotation_typeid = nullptr;
    m_param_seq = std::move(x.m_param_seq);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::AppliedAnnotation::operator ==(
        const AppliedAnnotation& x) const
{
    return (m_annotation_typeid == x.m_annotation_typeid &&
           m_param_seq == x.m_param_seq);
}

bool eprosima::fastdds::dds::xtypes::AppliedAnnotation::operator !=(
        const AppliedAnnotation& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member annotation_typeid
 * @param _annotation_typeid New value to be copied in member annotation_typeid
 */
void eprosima::fastdds::dds::xtypes::AppliedAnnotation::annotation_typeid(
        const eprosima::fastdds::dds::xtypes::TypeIdentifier& _annotation_typeid)
{
    *m_annotation_typeid = _annotation_typeid;
}

/*!
 * @brief This function moves the value in member annotation_typeid
 * @param _annotation_typeid New value to be moved in member annotation_typeid
 */
void eprosima::fastdds::dds::xtypes::AppliedAnnotation::annotation_typeid(
        eprosima::fastdds::dds::xtypes::TypeIdentifier&& _annotation_typeid)
{
    *m_annotation_typeid = std::move(_annotation_typeid);
}

/*!
 * @brief This function returns a constant reference to member annotation_typeid
 * @return Constant reference to member annotation_typeid
 */
const eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::AppliedAnnotation::annotation_typeid() const
{
    return *m_annotation_typeid;
}

/*!
 * @brief This function returns a reference to member annotation_typeid
 * @return Reference to member annotation_typeid
 */
eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::AppliedAnnotation::annotation_typeid()
{
    return *m_annotation_typeid;
}


/*!
 * @brief This function copies the value in member param_seq
 * @param _param_seq New value to be copied in member param_seq
 */
void eprosima::fastdds::dds::xtypes::AppliedAnnotation::param_seq(
        const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationParameterSeq>& _param_seq)
{
    m_param_seq = _param_seq;
}

/*!
 * @brief This function moves the value in member param_seq
 * @param _param_seq New value to be moved in member param_seq
 */
void eprosima::fastdds::dds::xtypes::AppliedAnnotation::param_seq(
        eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationParameterSeq>&& _param_seq)
{
    m_param_seq = std::move(_param_seq);
}

/*!
 * @brief This function returns a constant reference to member param_seq
 * @return Constant reference to member param_seq
 */
const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationParameterSeq>& eprosima::fastdds::dds::xtypes::AppliedAnnotation::param_seq() const
{
    return m_param_seq;
}

/*!
 * @brief This function returns a reference to member param_seq
 * @return Reference to member param_seq
 */
eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationParameterSeq>& eprosima::fastdds::dds::xtypes::AppliedAnnotation::param_seq()
{
    return m_param_seq;
}



eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation::AppliedVerbatimAnnotation()
{

}

eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation::~AppliedVerbatimAnnotation()
{
}

eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation::AppliedVerbatimAnnotation(
        const AppliedVerbatimAnnotation& x)
{
    m_placement = x.m_placement;
    m_language = x.m_language;
    m_text = x.m_text;
}

eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation::AppliedVerbatimAnnotation(
        AppliedVerbatimAnnotation&& x) noexcept
{
    m_placement = std::move(x.m_placement);
    m_language = std::move(x.m_language);
    m_text = std::move(x.m_text);
}

eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation& eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation::operator =(
        const AppliedVerbatimAnnotation& x)
{

    m_placement = x.m_placement;
    m_language = x.m_language;
    m_text = x.m_text;
    return *this;
}

eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation& eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation::operator =(
        AppliedVerbatimAnnotation&& x) noexcept
{

    m_placement = std::move(x.m_placement);
    m_language = std::move(x.m_language);
    m_text = std::move(x.m_text);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation::operator ==(
        const AppliedVerbatimAnnotation& x) const
{
    return (m_placement == x.m_placement &&
           m_language == x.m_language &&
           m_text == x.m_text);
}

bool eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation::operator !=(
        const AppliedVerbatimAnnotation& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member placement
 * @param _placement New value to be copied in member placement
 */
void eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation::placement(
        const eprosima::fastcdr::fixed_string<32>& _placement)
{
    m_placement = _placement;
}

/*!
 * @brief This function moves the value in member placement
 * @param _placement New value to be moved in member placement
 */
void eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation::placement(
        eprosima::fastcdr::fixed_string<32>&& _placement)
{
    m_placement = std::move(_placement);
}

/*!
 * @brief This function returns a constant reference to member placement
 * @return Constant reference to member placement
 */
const eprosima::fastcdr::fixed_string<32>& eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation::placement() const
{
    return m_placement;
}

/*!
 * @brief This function returns a reference to member placement
 * @return Reference to member placement
 */
eprosima::fastcdr::fixed_string<32>& eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation::placement()
{
    return m_placement;
}


/*!
 * @brief This function copies the value in member language
 * @param _language New value to be copied in member language
 */
void eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation::language(
        const eprosima::fastcdr::fixed_string<32>& _language)
{
    m_language = _language;
}

/*!
 * @brief This function moves the value in member language
 * @param _language New value to be moved in member language
 */
void eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation::language(
        eprosima::fastcdr::fixed_string<32>&& _language)
{
    m_language = std::move(_language);
}

/*!
 * @brief This function returns a constant reference to member language
 * @return Constant reference to member language
 */
const eprosima::fastcdr::fixed_string<32>& eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation::language() const
{
    return m_language;
}

/*!
 * @brief This function returns a reference to member language
 * @return Reference to member language
 */
eprosima::fastcdr::fixed_string<32>& eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation::language()
{
    return m_language;
}


/*!
 * @brief This function copies the value in member text
 * @param _text New value to be copied in member text
 */
void eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation::text(
        const std::string& _text)
{
    m_text = _text;
}

/*!
 * @brief This function moves the value in member text
 * @param _text New value to be moved in member text
 */
void eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation::text(
        std::string&& _text)
{
    m_text = std::move(_text);
}

/*!
 * @brief This function returns a constant reference to member text
 * @return Constant reference to member text
 */
const std::string& eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation::text() const
{
    return m_text;
}

/*!
 * @brief This function returns a reference to member text
 * @return Reference to member text
 */
std::string& eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation::text()
{
    return m_text;
}


eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations::AppliedBuiltinMemberAnnotations()
{

}

eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations::~AppliedBuiltinMemberAnnotations()
{
}

eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations::AppliedBuiltinMemberAnnotations(
        const AppliedBuiltinMemberAnnotations& x)
{
    m_unit = x.m_unit;
    m_min = x.m_min;
    m_max = x.m_max;
    m_hash_id = x.m_hash_id;
}

eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations::AppliedBuiltinMemberAnnotations(
        AppliedBuiltinMemberAnnotations&& x) noexcept
{
    m_unit = std::move(x.m_unit);
    m_min = std::move(x.m_min);
    m_max = std::move(x.m_max);
    m_hash_id = std::move(x.m_hash_id);
}

eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations& eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations::operator =(
        const AppliedBuiltinMemberAnnotations& x)
{

    m_unit = x.m_unit;
    m_min = x.m_min;
    m_max = x.m_max;
    m_hash_id = x.m_hash_id;
    return *this;
}

eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations& eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations::operator =(
        AppliedBuiltinMemberAnnotations&& x) noexcept
{

    m_unit = std::move(x.m_unit);
    m_min = std::move(x.m_min);
    m_max = std::move(x.m_max);
    m_hash_id = std::move(x.m_hash_id);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations::operator ==(
        const AppliedBuiltinMemberAnnotations& x) const
{
    return (m_unit == x.m_unit &&
           m_min == x.m_min &&
           m_max == x.m_max &&
           m_hash_id == x.m_hash_id);
}

bool eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations::operator !=(
        const AppliedBuiltinMemberAnnotations& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member unit
 * @param _unit New value to be copied in member unit
 */
void eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations::unit(
        const eprosima::fastcdr::optional<std::string>& _unit)
{
    m_unit = _unit;
}

/*!
 * @brief This function moves the value in member unit
 * @param _unit New value to be moved in member unit
 */
void eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations::unit(
        eprosima::fastcdr::optional<std::string>&& _unit)
{
    m_unit = std::move(_unit);
}

/*!
 * @brief This function returns a constant reference to member unit
 * @return Constant reference to member unit
 */
const eprosima::fastcdr::optional<std::string>& eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations::unit() const
{
    return m_unit;
}

/*!
 * @brief This function returns a reference to member unit
 * @return Reference to member unit
 */
eprosima::fastcdr::optional<std::string>& eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations::unit()
{
    return m_unit;
}


/*!
 * @brief This function copies the value in member min
 * @param _min New value to be copied in member min
 */
void eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations::min(
        const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AnnotationParameterValue>& _min)
{
    m_min = _min;
}

/*!
 * @brief This function moves the value in member min
 * @param _min New value to be moved in member min
 */
void eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations::min(
        eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AnnotationParameterValue>&& _min)
{
    m_min = std::move(_min);
}

/*!
 * @brief This function returns a constant reference to member min
 * @return Constant reference to member min
 */
const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AnnotationParameterValue>& eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations::min() const
{
    return m_min;
}

/*!
 * @brief This function returns a reference to member min
 * @return Reference to member min
 */
eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AnnotationParameterValue>& eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations::min()
{
    return m_min;
}


/*!
 * @brief This function copies the value in member max
 * @param _max New value to be copied in member max
 */
void eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations::max(
        const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AnnotationParameterValue>& _max)
{
    m_max = _max;
}

/*!
 * @brief This function moves the value in member max
 * @param _max New value to be moved in member max
 */
void eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations::max(
        eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AnnotationParameterValue>&& _max)
{
    m_max = std::move(_max);
}

/*!
 * @brief This function returns a constant reference to member max
 * @return Constant reference to member max
 */
const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AnnotationParameterValue>& eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations::max() const
{
    return m_max;
}

/*!
 * @brief This function returns a reference to member max
 * @return Reference to member max
 */
eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AnnotationParameterValue>& eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations::max()
{
    return m_max;
}


/*!
 * @brief This function copies the value in member hash_id
 * @param _hash_id New value to be copied in member hash_id
 */
void eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations::hash_id(
        const eprosima::fastcdr::optional<std::string>& _hash_id)
{
    m_hash_id = _hash_id;
}

/*!
 * @brief This function moves the value in member hash_id
 * @param _hash_id New value to be moved in member hash_id
 */
void eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations::hash_id(
        eprosima::fastcdr::optional<std::string>&& _hash_id)
{
    m_hash_id = std::move(_hash_id);
}

/*!
 * @brief This function returns a constant reference to member hash_id
 * @return Constant reference to member hash_id
 */
const eprosima::fastcdr::optional<std::string>& eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations::hash_id() const
{
    return m_hash_id;
}

/*!
 * @brief This function returns a reference to member hash_id
 * @return Reference to member hash_id
 */
eprosima::fastcdr::optional<std::string>& eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations::hash_id()
{
    return m_hash_id;
}


eprosima::fastdds::dds::xtypes::CommonStructMember::CommonStructMember()
{
    m_member_type_id = new eprosima::fastdds::dds::xtypes::TypeIdentifier();


}

eprosima::fastdds::dds::xtypes::CommonStructMember::~CommonStructMember()
{
    delete m_member_type_id;
}

eprosima::fastdds::dds::xtypes::CommonStructMember::CommonStructMember(
        const CommonStructMember& x)
{
    m_member_id = x.m_member_id;
    m_member_flags = x.m_member_flags;
    m_member_type_id = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_member_type_id = *x.m_member_type_id;
}

eprosima::fastdds::dds::xtypes::CommonStructMember::CommonStructMember(
        CommonStructMember&& x) noexcept
{
    m_member_id = x.m_member_id;
    m_member_flags = std::move(x.m_member_flags);
    m_member_type_id = x.m_member_type_id;x.m_member_type_id = nullptr;
}

eprosima::fastdds::dds::xtypes::CommonStructMember& eprosima::fastdds::dds::xtypes::CommonStructMember::operator =(
        const CommonStructMember& x)
{

    m_member_id = x.m_member_id;
    m_member_flags = x.m_member_flags;
    m_member_type_id = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_member_type_id = *x.m_member_type_id;
    return *this;
}

eprosima::fastdds::dds::xtypes::CommonStructMember& eprosima::fastdds::dds::xtypes::CommonStructMember::operator =(
        CommonStructMember&& x) noexcept
{

    m_member_id = x.m_member_id;
    m_member_flags = std::move(x.m_member_flags);
    m_member_type_id = x.m_member_type_id;x.m_member_type_id = nullptr;
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CommonStructMember::operator ==(
        const CommonStructMember& x) const
{
    return (m_member_id == x.m_member_id &&
           m_member_flags == x.m_member_flags &&
           m_member_type_id == x.m_member_type_id);
}

bool eprosima::fastdds::dds::xtypes::CommonStructMember::operator !=(
        const CommonStructMember& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member member_id
 * @param _member_id New value for member member_id
 */
void eprosima::fastdds::dds::xtypes::CommonStructMember::member_id(
        eprosima::fastdds::dds::xtypes::MemberId _member_id)
{
    m_member_id = _member_id;
}

/*!
 * @brief This function returns the value of member member_id
 * @return Value of member member_id
 */
eprosima::fastdds::dds::xtypes::MemberId eprosima::fastdds::dds::xtypes::CommonStructMember::member_id() const
{
    return m_member_id;
}

/*!
 * @brief This function returns a reference to member member_id
 * @return Reference to member member_id
 */
eprosima::fastdds::dds::xtypes::MemberId& eprosima::fastdds::dds::xtypes::CommonStructMember::member_id()
{
    return m_member_id;
}


/*!
 * @brief This function copies the value in member member_flags
 * @param _member_flags New value to be copied in member member_flags
 */
void eprosima::fastdds::dds::xtypes::CommonStructMember::member_flags(
        const eprosima::fastdds::dds::xtypes::StructMemberFlag& _member_flags)
{
    m_member_flags = _member_flags;
}

/*!
 * @brief This function moves the value in member member_flags
 * @param _member_flags New value to be moved in member member_flags
 */
void eprosima::fastdds::dds::xtypes::CommonStructMember::member_flags(
        eprosima::fastdds::dds::xtypes::StructMemberFlag&& _member_flags)
{
    m_member_flags = std::move(_member_flags);
}

/*!
 * @brief This function returns a constant reference to member member_flags
 * @return Constant reference to member member_flags
 */
const eprosima::fastdds::dds::xtypes::StructMemberFlag& eprosima::fastdds::dds::xtypes::CommonStructMember::member_flags() const
{
    return m_member_flags;
}

/*!
 * @brief This function returns a reference to member member_flags
 * @return Reference to member member_flags
 */
eprosima::fastdds::dds::xtypes::StructMemberFlag& eprosima::fastdds::dds::xtypes::CommonStructMember::member_flags()
{
    return m_member_flags;
}


/*!
 * @brief This function copies the value in member member_type_id
 * @param _member_type_id New value to be copied in member member_type_id
 */
void eprosima::fastdds::dds::xtypes::CommonStructMember::member_type_id(
        const eprosima::fastdds::dds::xtypes::TypeIdentifier& _member_type_id)
{
    *m_member_type_id = _member_type_id;
}

/*!
 * @brief This function moves the value in member member_type_id
 * @param _member_type_id New value to be moved in member member_type_id
 */
void eprosima::fastdds::dds::xtypes::CommonStructMember::member_type_id(
        eprosima::fastdds::dds::xtypes::TypeIdentifier&& _member_type_id)
{
    *m_member_type_id = std::move(_member_type_id);
}

/*!
 * @brief This function returns a constant reference to member member_type_id
 * @return Constant reference to member member_type_id
 */
const eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::CommonStructMember::member_type_id() const
{
    return *m_member_type_id;
}

/*!
 * @brief This function returns a reference to member member_type_id
 * @return Reference to member member_type_id
 */
eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::CommonStructMember::member_type_id()
{
    return *m_member_type_id;
}


eprosima::fastdds::dds::xtypes::CompleteMemberDetail::CompleteMemberDetail()
{

}

eprosima::fastdds::dds::xtypes::CompleteMemberDetail::~CompleteMemberDetail()
{
}

eprosima::fastdds::dds::xtypes::CompleteMemberDetail::CompleteMemberDetail(
        const CompleteMemberDetail& x)
{
    m_name = x.m_name;
    m_ann_builtin = x.m_ann_builtin;
    m_ann_custom = x.m_ann_custom;
}

eprosima::fastdds::dds::xtypes::CompleteMemberDetail::CompleteMemberDetail(
        CompleteMemberDetail&& x) noexcept
{
    m_name = std::move(x.m_name);
    m_ann_builtin = std::move(x.m_ann_builtin);
    m_ann_custom = std::move(x.m_ann_custom);
}

eprosima::fastdds::dds::xtypes::CompleteMemberDetail& eprosima::fastdds::dds::xtypes::CompleteMemberDetail::operator =(
        const CompleteMemberDetail& x)
{

    m_name = x.m_name;
    m_ann_builtin = x.m_ann_builtin;
    m_ann_custom = x.m_ann_custom;
    return *this;
}

eprosima::fastdds::dds::xtypes::CompleteMemberDetail& eprosima::fastdds::dds::xtypes::CompleteMemberDetail::operator =(
        CompleteMemberDetail&& x) noexcept
{

    m_name = std::move(x.m_name);
    m_ann_builtin = std::move(x.m_ann_builtin);
    m_ann_custom = std::move(x.m_ann_custom);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CompleteMemberDetail::operator ==(
        const CompleteMemberDetail& x) const
{
    return (m_name == x.m_name &&
           m_ann_builtin == x.m_ann_builtin &&
           m_ann_custom == x.m_ann_custom);
}

bool eprosima::fastdds::dds::xtypes::CompleteMemberDetail::operator !=(
        const CompleteMemberDetail& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member name
 * @param _name New value to be copied in member name
 */
void eprosima::fastdds::dds::xtypes::CompleteMemberDetail::name(
        const eprosima::fastdds::dds::xtypes::MemberName& _name)
{
    m_name = _name;
}

/*!
 * @brief This function moves the value in member name
 * @param _name New value to be moved in member name
 */
void eprosima::fastdds::dds::xtypes::CompleteMemberDetail::name(
        eprosima::fastdds::dds::xtypes::MemberName&& _name)
{
    m_name = std::move(_name);
}

/*!
 * @brief This function returns a constant reference to member name
 * @return Constant reference to member name
 */
const eprosima::fastdds::dds::xtypes::MemberName& eprosima::fastdds::dds::xtypes::CompleteMemberDetail::name() const
{
    return m_name;
}

/*!
 * @brief This function returns a reference to member name
 * @return Reference to member name
 */
eprosima::fastdds::dds::xtypes::MemberName& eprosima::fastdds::dds::xtypes::CompleteMemberDetail::name()
{
    return m_name;
}


/*!
 * @brief This function copies the value in member ann_builtin
 * @param _ann_builtin New value to be copied in member ann_builtin
 */
void eprosima::fastdds::dds::xtypes::CompleteMemberDetail::ann_builtin(
        const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations>& _ann_builtin)
{
    m_ann_builtin = _ann_builtin;
}

/*!
 * @brief This function moves the value in member ann_builtin
 * @param _ann_builtin New value to be moved in member ann_builtin
 */
void eprosima::fastdds::dds::xtypes::CompleteMemberDetail::ann_builtin(
        eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations>&& _ann_builtin)
{
    m_ann_builtin = std::move(_ann_builtin);
}

/*!
 * @brief This function returns a constant reference to member ann_builtin
 * @return Constant reference to member ann_builtin
 */
const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations>& eprosima::fastdds::dds::xtypes::CompleteMemberDetail::ann_builtin() const
{
    return m_ann_builtin;
}

/*!
 * @brief This function returns a reference to member ann_builtin
 * @return Reference to member ann_builtin
 */
eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations>& eprosima::fastdds::dds::xtypes::CompleteMemberDetail::ann_builtin()
{
    return m_ann_builtin;
}


/*!
 * @brief This function copies the value in member ann_custom
 * @param _ann_custom New value to be copied in member ann_custom
 */
void eprosima::fastdds::dds::xtypes::CompleteMemberDetail::ann_custom(
        const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>& _ann_custom)
{
    m_ann_custom = _ann_custom;
}

/*!
 * @brief This function moves the value in member ann_custom
 * @param _ann_custom New value to be moved in member ann_custom
 */
void eprosima::fastdds::dds::xtypes::CompleteMemberDetail::ann_custom(
        eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>&& _ann_custom)
{
    m_ann_custom = std::move(_ann_custom);
}

/*!
 * @brief This function returns a constant reference to member ann_custom
 * @return Constant reference to member ann_custom
 */
const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>& eprosima::fastdds::dds::xtypes::CompleteMemberDetail::ann_custom() const
{
    return m_ann_custom;
}

/*!
 * @brief This function returns a reference to member ann_custom
 * @return Reference to member ann_custom
 */
eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>& eprosima::fastdds::dds::xtypes::CompleteMemberDetail::ann_custom()
{
    return m_ann_custom;
}


eprosima::fastdds::dds::xtypes::MinimalMemberDetail::MinimalMemberDetail()
{

}

eprosima::fastdds::dds::xtypes::MinimalMemberDetail::~MinimalMemberDetail()
{
}

eprosima::fastdds::dds::xtypes::MinimalMemberDetail::MinimalMemberDetail(
        const MinimalMemberDetail& x)
{
    m_name_hash = x.m_name_hash;
}

eprosima::fastdds::dds::xtypes::MinimalMemberDetail::MinimalMemberDetail(
        MinimalMemberDetail&& x) noexcept
{
    m_name_hash = std::move(x.m_name_hash);
}

eprosima::fastdds::dds::xtypes::MinimalMemberDetail& eprosima::fastdds::dds::xtypes::MinimalMemberDetail::operator =(
        const MinimalMemberDetail& x)
{

    m_name_hash = x.m_name_hash;
    return *this;
}

eprosima::fastdds::dds::xtypes::MinimalMemberDetail& eprosima::fastdds::dds::xtypes::MinimalMemberDetail::operator =(
        MinimalMemberDetail&& x) noexcept
{

    m_name_hash = std::move(x.m_name_hash);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::MinimalMemberDetail::operator ==(
        const MinimalMemberDetail& x) const
{
    return (m_name_hash == x.m_name_hash);
}

bool eprosima::fastdds::dds::xtypes::MinimalMemberDetail::operator !=(
        const MinimalMemberDetail& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member name_hash
 * @param _name_hash New value to be copied in member name_hash
 */
void eprosima::fastdds::dds::xtypes::MinimalMemberDetail::name_hash(
        const eprosima::fastdds::dds::xtypes::NameHash& _name_hash)
{
    m_name_hash = _name_hash;
}

/*!
 * @brief This function moves the value in member name_hash
 * @param _name_hash New value to be moved in member name_hash
 */
void eprosima::fastdds::dds::xtypes::MinimalMemberDetail::name_hash(
        eprosima::fastdds::dds::xtypes::NameHash&& _name_hash)
{
    m_name_hash = std::move(_name_hash);
}

/*!
 * @brief This function returns a constant reference to member name_hash
 * @return Constant reference to member name_hash
 */
const eprosima::fastdds::dds::xtypes::NameHash& eprosima::fastdds::dds::xtypes::MinimalMemberDetail::name_hash() const
{
    return m_name_hash;
}

/*!
 * @brief This function returns a reference to member name_hash
 * @return Reference to member name_hash
 */
eprosima::fastdds::dds::xtypes::NameHash& eprosima::fastdds::dds::xtypes::MinimalMemberDetail::name_hash()
{
    return m_name_hash;
}


eprosima::fastdds::dds::xtypes::CompleteStructMember::CompleteStructMember()
{

}

eprosima::fastdds::dds::xtypes::CompleteStructMember::~CompleteStructMember()
{
}

eprosima::fastdds::dds::xtypes::CompleteStructMember::CompleteStructMember(
        const CompleteStructMember& x)
{
    m_common = x.m_common;
    m_detail = x.m_detail;
}

eprosima::fastdds::dds::xtypes::CompleteStructMember::CompleteStructMember(
        CompleteStructMember&& x) noexcept
{
    m_common = std::move(x.m_common);
    m_detail = std::move(x.m_detail);
}

eprosima::fastdds::dds::xtypes::CompleteStructMember& eprosima::fastdds::dds::xtypes::CompleteStructMember::operator =(
        const CompleteStructMember& x)
{

    m_common = x.m_common;
    m_detail = x.m_detail;
    return *this;
}

eprosima::fastdds::dds::xtypes::CompleteStructMember& eprosima::fastdds::dds::xtypes::CompleteStructMember::operator =(
        CompleteStructMember&& x) noexcept
{

    m_common = std::move(x.m_common);
    m_detail = std::move(x.m_detail);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CompleteStructMember::operator ==(
        const CompleteStructMember& x) const
{
    return (m_common == x.m_common &&
           m_detail == x.m_detail);
}

bool eprosima::fastdds::dds::xtypes::CompleteStructMember::operator !=(
        const CompleteStructMember& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member common
 * @param _common New value to be copied in member common
 */
void eprosima::fastdds::dds::xtypes::CompleteStructMember::common(
        const eprosima::fastdds::dds::xtypes::CommonStructMember& _common)
{
    m_common = _common;
}

/*!
 * @brief This function moves the value in member common
 * @param _common New value to be moved in member common
 */
void eprosima::fastdds::dds::xtypes::CompleteStructMember::common(
        eprosima::fastdds::dds::xtypes::CommonStructMember&& _common)
{
    m_common = std::move(_common);
}

/*!
 * @brief This function returns a constant reference to member common
 * @return Constant reference to member common
 */
const eprosima::fastdds::dds::xtypes::CommonStructMember& eprosima::fastdds::dds::xtypes::CompleteStructMember::common() const
{
    return m_common;
}

/*!
 * @brief This function returns a reference to member common
 * @return Reference to member common
 */
eprosima::fastdds::dds::xtypes::CommonStructMember& eprosima::fastdds::dds::xtypes::CompleteStructMember::common()
{
    return m_common;
}


/*!
 * @brief This function copies the value in member detail
 * @param _detail New value to be copied in member detail
 */
void eprosima::fastdds::dds::xtypes::CompleteStructMember::detail(
        const eprosima::fastdds::dds::xtypes::CompleteMemberDetail& _detail)
{
    m_detail = _detail;
}

/*!
 * @brief This function moves the value in member detail
 * @param _detail New value to be moved in member detail
 */
void eprosima::fastdds::dds::xtypes::CompleteStructMember::detail(
        eprosima::fastdds::dds::xtypes::CompleteMemberDetail&& _detail)
{
    m_detail = std::move(_detail);
}

/*!
 * @brief This function returns a constant reference to member detail
 * @return Constant reference to member detail
 */
const eprosima::fastdds::dds::xtypes::CompleteMemberDetail& eprosima::fastdds::dds::xtypes::CompleteStructMember::detail() const
{
    return m_detail;
}

/*!
 * @brief This function returns a reference to member detail
 * @return Reference to member detail
 */
eprosima::fastdds::dds::xtypes::CompleteMemberDetail& eprosima::fastdds::dds::xtypes::CompleteStructMember::detail()
{
    return m_detail;
}



eprosima::fastdds::dds::xtypes::MinimalStructMember::MinimalStructMember()
{

}

eprosima::fastdds::dds::xtypes::MinimalStructMember::~MinimalStructMember()
{
}

eprosima::fastdds::dds::xtypes::MinimalStructMember::MinimalStructMember(
        const MinimalStructMember& x)
{
    m_common = x.m_common;
    m_detail = x.m_detail;
}

eprosima::fastdds::dds::xtypes::MinimalStructMember::MinimalStructMember(
        MinimalStructMember&& x) noexcept
{
    m_common = std::move(x.m_common);
    m_detail = std::move(x.m_detail);
}

eprosima::fastdds::dds::xtypes::MinimalStructMember& eprosima::fastdds::dds::xtypes::MinimalStructMember::operator =(
        const MinimalStructMember& x)
{

    m_common = x.m_common;
    m_detail = x.m_detail;
    return *this;
}

eprosima::fastdds::dds::xtypes::MinimalStructMember& eprosima::fastdds::dds::xtypes::MinimalStructMember::operator =(
        MinimalStructMember&& x) noexcept
{

    m_common = std::move(x.m_common);
    m_detail = std::move(x.m_detail);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::MinimalStructMember::operator ==(
        const MinimalStructMember& x) const
{
    return (m_common == x.m_common &&
           m_detail == x.m_detail);
}

bool eprosima::fastdds::dds::xtypes::MinimalStructMember::operator !=(
        const MinimalStructMember& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member common
 * @param _common New value to be copied in member common
 */
void eprosima::fastdds::dds::xtypes::MinimalStructMember::common(
        const eprosima::fastdds::dds::xtypes::CommonStructMember& _common)
{
    m_common = _common;
}

/*!
 * @brief This function moves the value in member common
 * @param _common New value to be moved in member common
 */
void eprosima::fastdds::dds::xtypes::MinimalStructMember::common(
        eprosima::fastdds::dds::xtypes::CommonStructMember&& _common)
{
    m_common = std::move(_common);
}

/*!
 * @brief This function returns a constant reference to member common
 * @return Constant reference to member common
 */
const eprosima::fastdds::dds::xtypes::CommonStructMember& eprosima::fastdds::dds::xtypes::MinimalStructMember::common() const
{
    return m_common;
}

/*!
 * @brief This function returns a reference to member common
 * @return Reference to member common
 */
eprosima::fastdds::dds::xtypes::CommonStructMember& eprosima::fastdds::dds::xtypes::MinimalStructMember::common()
{
    return m_common;
}


/*!
 * @brief This function copies the value in member detail
 * @param _detail New value to be copied in member detail
 */
void eprosima::fastdds::dds::xtypes::MinimalStructMember::detail(
        const eprosima::fastdds::dds::xtypes::MinimalMemberDetail& _detail)
{
    m_detail = _detail;
}

/*!
 * @brief This function moves the value in member detail
 * @param _detail New value to be moved in member detail
 */
void eprosima::fastdds::dds::xtypes::MinimalStructMember::detail(
        eprosima::fastdds::dds::xtypes::MinimalMemberDetail&& _detail)
{
    m_detail = std::move(_detail);
}

/*!
 * @brief This function returns a constant reference to member detail
 * @return Constant reference to member detail
 */
const eprosima::fastdds::dds::xtypes::MinimalMemberDetail& eprosima::fastdds::dds::xtypes::MinimalStructMember::detail() const
{
    return m_detail;
}

/*!
 * @brief This function returns a reference to member detail
 * @return Reference to member detail
 */
eprosima::fastdds::dds::xtypes::MinimalMemberDetail& eprosima::fastdds::dds::xtypes::MinimalStructMember::detail()
{
    return m_detail;
}



eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations::AppliedBuiltinTypeAnnotations()
{

}

eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations::~AppliedBuiltinTypeAnnotations()
{
}

eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations::AppliedBuiltinTypeAnnotations(
        const AppliedBuiltinTypeAnnotations& x)
{
    m_verbatim = x.m_verbatim;
}

eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations::AppliedBuiltinTypeAnnotations(
        AppliedBuiltinTypeAnnotations&& x) noexcept
{
    m_verbatim = std::move(x.m_verbatim);
}

eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations& eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations::operator =(
        const AppliedBuiltinTypeAnnotations& x)
{

    m_verbatim = x.m_verbatim;
    return *this;
}

eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations& eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations::operator =(
        AppliedBuiltinTypeAnnotations&& x) noexcept
{

    m_verbatim = std::move(x.m_verbatim);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations::operator ==(
        const AppliedBuiltinTypeAnnotations& x) const
{
    return (m_verbatim == x.m_verbatim);
}

bool eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations::operator !=(
        const AppliedBuiltinTypeAnnotations& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member verbatim
 * @param _verbatim New value to be copied in member verbatim
 */
void eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations::verbatim(
        const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation>& _verbatim)
{
    m_verbatim = _verbatim;
}

/*!
 * @brief This function moves the value in member verbatim
 * @param _verbatim New value to be moved in member verbatim
 */
void eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations::verbatim(
        eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation>&& _verbatim)
{
    m_verbatim = std::move(_verbatim);
}

/*!
 * @brief This function returns a constant reference to member verbatim
 * @return Constant reference to member verbatim
 */
const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation>& eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations::verbatim() const
{
    return m_verbatim;
}

/*!
 * @brief This function returns a reference to member verbatim
 * @return Reference to member verbatim
 */
eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedVerbatimAnnotation>& eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations::verbatim()
{
    return m_verbatim;
}


eprosima::fastdds::dds::xtypes::MinimalTypeDetail::MinimalTypeDetail()
{

}

eprosima::fastdds::dds::xtypes::MinimalTypeDetail::~MinimalTypeDetail()
{
}

eprosima::fastdds::dds::xtypes::MinimalTypeDetail::MinimalTypeDetail(
        const MinimalTypeDetail& x)
{
    static_cast<void>(x);
}

eprosima::fastdds::dds::xtypes::MinimalTypeDetail::MinimalTypeDetail(
        MinimalTypeDetail&& x) noexcept
{
    static_cast<void>(x);
}

eprosima::fastdds::dds::xtypes::MinimalTypeDetail& eprosima::fastdds::dds::xtypes::MinimalTypeDetail::operator =(
        const MinimalTypeDetail& x)
{

    static_cast<void>(x);

    return *this;
}

eprosima::fastdds::dds::xtypes::MinimalTypeDetail& eprosima::fastdds::dds::xtypes::MinimalTypeDetail::operator =(
        MinimalTypeDetail&& x) noexcept
{

    static_cast<void>(x);

    return *this;
}

bool eprosima::fastdds::dds::xtypes::MinimalTypeDetail::operator ==(
        const MinimalTypeDetail& x) const
{
    static_cast<void>(x);
    return true;
}

bool eprosima::fastdds::dds::xtypes::MinimalTypeDetail::operator !=(
        const MinimalTypeDetail& x) const
{
    return !(*this == x);
}


eprosima::fastdds::dds::xtypes::CompleteTypeDetail::CompleteTypeDetail()
{

}

eprosima::fastdds::dds::xtypes::CompleteTypeDetail::~CompleteTypeDetail()
{
}

eprosima::fastdds::dds::xtypes::CompleteTypeDetail::CompleteTypeDetail(
        const CompleteTypeDetail& x)
{
    m_ann_builtin = x.m_ann_builtin;
    m_ann_custom = x.m_ann_custom;
    m_type_name = x.m_type_name;
}

eprosima::fastdds::dds::xtypes::CompleteTypeDetail::CompleteTypeDetail(
        CompleteTypeDetail&& x) noexcept
{
    m_ann_builtin = std::move(x.m_ann_builtin);
    m_ann_custom = std::move(x.m_ann_custom);
    m_type_name = std::move(x.m_type_name);
}

eprosima::fastdds::dds::xtypes::CompleteTypeDetail& eprosima::fastdds::dds::xtypes::CompleteTypeDetail::operator =(
        const CompleteTypeDetail& x)
{

    m_ann_builtin = x.m_ann_builtin;
    m_ann_custom = x.m_ann_custom;
    m_type_name = x.m_type_name;
    return *this;
}

eprosima::fastdds::dds::xtypes::CompleteTypeDetail& eprosima::fastdds::dds::xtypes::CompleteTypeDetail::operator =(
        CompleteTypeDetail&& x) noexcept
{

    m_ann_builtin = std::move(x.m_ann_builtin);
    m_ann_custom = std::move(x.m_ann_custom);
    m_type_name = std::move(x.m_type_name);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CompleteTypeDetail::operator ==(
        const CompleteTypeDetail& x) const
{
    return (m_ann_builtin == x.m_ann_builtin &&
           m_ann_custom == x.m_ann_custom &&
           m_type_name == x.m_type_name);
}

bool eprosima::fastdds::dds::xtypes::CompleteTypeDetail::operator !=(
        const CompleteTypeDetail& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member ann_builtin
 * @param _ann_builtin New value to be copied in member ann_builtin
 */
void eprosima::fastdds::dds::xtypes::CompleteTypeDetail::ann_builtin(
        const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations>& _ann_builtin)
{
    m_ann_builtin = _ann_builtin;
}

/*!
 * @brief This function moves the value in member ann_builtin
 * @param _ann_builtin New value to be moved in member ann_builtin
 */
void eprosima::fastdds::dds::xtypes::CompleteTypeDetail::ann_builtin(
        eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations>&& _ann_builtin)
{
    m_ann_builtin = std::move(_ann_builtin);
}

/*!
 * @brief This function returns a constant reference to member ann_builtin
 * @return Constant reference to member ann_builtin
 */
const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations>& eprosima::fastdds::dds::xtypes::CompleteTypeDetail::ann_builtin() const
{
    return m_ann_builtin;
}

/*!
 * @brief This function returns a reference to member ann_builtin
 * @return Reference to member ann_builtin
 */
eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations>& eprosima::fastdds::dds::xtypes::CompleteTypeDetail::ann_builtin()
{
    return m_ann_builtin;
}


/*!
 * @brief This function copies the value in member ann_custom
 * @param _ann_custom New value to be copied in member ann_custom
 */
void eprosima::fastdds::dds::xtypes::CompleteTypeDetail::ann_custom(
        const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>& _ann_custom)
{
    m_ann_custom = _ann_custom;
}

/*!
 * @brief This function moves the value in member ann_custom
 * @param _ann_custom New value to be moved in member ann_custom
 */
void eprosima::fastdds::dds::xtypes::CompleteTypeDetail::ann_custom(
        eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>&& _ann_custom)
{
    m_ann_custom = std::move(_ann_custom);
}

/*!
 * @brief This function returns a constant reference to member ann_custom
 * @return Constant reference to member ann_custom
 */
const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>& eprosima::fastdds::dds::xtypes::CompleteTypeDetail::ann_custom() const
{
    return m_ann_custom;
}

/*!
 * @brief This function returns a reference to member ann_custom
 * @return Reference to member ann_custom
 */
eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>& eprosima::fastdds::dds::xtypes::CompleteTypeDetail::ann_custom()
{
    return m_ann_custom;
}


/*!
 * @brief This function copies the value in member type_name
 * @param _type_name New value to be copied in member type_name
 */
void eprosima::fastdds::dds::xtypes::CompleteTypeDetail::type_name(
        const eprosima::fastdds::dds::xtypes::QualifiedTypeName& _type_name)
{
    m_type_name = _type_name;
}

/*!
 * @brief This function moves the value in member type_name
 * @param _type_name New value to be moved in member type_name
 */
void eprosima::fastdds::dds::xtypes::CompleteTypeDetail::type_name(
        eprosima::fastdds::dds::xtypes::QualifiedTypeName&& _type_name)
{
    m_type_name = std::move(_type_name);
}

/*!
 * @brief This function returns a constant reference to member type_name
 * @return Constant reference to member type_name
 */
const eprosima::fastdds::dds::xtypes::QualifiedTypeName& eprosima::fastdds::dds::xtypes::CompleteTypeDetail::type_name() const
{
    return m_type_name;
}

/*!
 * @brief This function returns a reference to member type_name
 * @return Reference to member type_name
 */
eprosima::fastdds::dds::xtypes::QualifiedTypeName& eprosima::fastdds::dds::xtypes::CompleteTypeDetail::type_name()
{
    return m_type_name;
}


eprosima::fastdds::dds::xtypes::CompleteStructHeader::CompleteStructHeader()
{
    m_base_type = new eprosima::fastdds::dds::xtypes::TypeIdentifier();



}

eprosima::fastdds::dds::xtypes::CompleteStructHeader::~CompleteStructHeader()
{
    delete m_base_type;

}

eprosima::fastdds::dds::xtypes::CompleteStructHeader::CompleteStructHeader(
        const CompleteStructHeader& x)
{
    m_base_type = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_base_type = *x.m_base_type;
    m_detail = x.m_detail;
}

eprosima::fastdds::dds::xtypes::CompleteStructHeader::CompleteStructHeader(
        CompleteStructHeader&& x) noexcept
{
    m_base_type = x.m_base_type;x.m_base_type = nullptr;
    m_detail = std::move(x.m_detail);
}

eprosima::fastdds::dds::xtypes::CompleteStructHeader& eprosima::fastdds::dds::xtypes::CompleteStructHeader::operator =(
        const CompleteStructHeader& x)
{

    m_base_type = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_base_type = *x.m_base_type;
    m_detail = x.m_detail;
    return *this;
}

eprosima::fastdds::dds::xtypes::CompleteStructHeader& eprosima::fastdds::dds::xtypes::CompleteStructHeader::operator =(
        CompleteStructHeader&& x) noexcept
{

    m_base_type = x.m_base_type;x.m_base_type = nullptr;
    m_detail = std::move(x.m_detail);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CompleteStructHeader::operator ==(
        const CompleteStructHeader& x) const
{
    return (m_base_type == x.m_base_type &&
           m_detail == x.m_detail);
}

bool eprosima::fastdds::dds::xtypes::CompleteStructHeader::operator !=(
        const CompleteStructHeader& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member base_type
 * @param _base_type New value to be copied in member base_type
 */
void eprosima::fastdds::dds::xtypes::CompleteStructHeader::base_type(
        const eprosima::fastdds::dds::xtypes::TypeIdentifier& _base_type)
{
    *m_base_type = _base_type;
}

/*!
 * @brief This function moves the value in member base_type
 * @param _base_type New value to be moved in member base_type
 */
void eprosima::fastdds::dds::xtypes::CompleteStructHeader::base_type(
        eprosima::fastdds::dds::xtypes::TypeIdentifier&& _base_type)
{
    *m_base_type = std::move(_base_type);
}

/*!
 * @brief This function returns a constant reference to member base_type
 * @return Constant reference to member base_type
 */
const eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::CompleteStructHeader::base_type() const
{
    return *m_base_type;
}

/*!
 * @brief This function returns a reference to member base_type
 * @return Reference to member base_type
 */
eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::CompleteStructHeader::base_type()
{
    return *m_base_type;
}


/*!
 * @brief This function copies the value in member detail
 * @param _detail New value to be copied in member detail
 */
void eprosima::fastdds::dds::xtypes::CompleteStructHeader::detail(
        const eprosima::fastdds::dds::xtypes::CompleteTypeDetail& _detail)
{
    m_detail = _detail;
}

/*!
 * @brief This function moves the value in member detail
 * @param _detail New value to be moved in member detail
 */
void eprosima::fastdds::dds::xtypes::CompleteStructHeader::detail(
        eprosima::fastdds::dds::xtypes::CompleteTypeDetail&& _detail)
{
    m_detail = std::move(_detail);
}

/*!
 * @brief This function returns a constant reference to member detail
 * @return Constant reference to member detail
 */
const eprosima::fastdds::dds::xtypes::CompleteTypeDetail& eprosima::fastdds::dds::xtypes::CompleteStructHeader::detail() const
{
    return m_detail;
}

/*!
 * @brief This function returns a reference to member detail
 * @return Reference to member detail
 */
eprosima::fastdds::dds::xtypes::CompleteTypeDetail& eprosima::fastdds::dds::xtypes::CompleteStructHeader::detail()
{
    return m_detail;
}


eprosima::fastdds::dds::xtypes::MinimalStructHeader::MinimalStructHeader()
{
    m_base_type = new eprosima::fastdds::dds::xtypes::TypeIdentifier();



}

eprosima::fastdds::dds::xtypes::MinimalStructHeader::~MinimalStructHeader()
{
    delete m_base_type;

}

eprosima::fastdds::dds::xtypes::MinimalStructHeader::MinimalStructHeader(
        const MinimalStructHeader& x)
{
    m_base_type = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_base_type = *x.m_base_type;
    m_detail = x.m_detail;
}

eprosima::fastdds::dds::xtypes::MinimalStructHeader::MinimalStructHeader(
        MinimalStructHeader&& x) noexcept
{
    m_base_type = x.m_base_type;x.m_base_type = nullptr;
    m_detail = std::move(x.m_detail);
}

eprosima::fastdds::dds::xtypes::MinimalStructHeader& eprosima::fastdds::dds::xtypes::MinimalStructHeader::operator =(
        const MinimalStructHeader& x)
{

    m_base_type = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_base_type = *x.m_base_type;
    m_detail = x.m_detail;
    return *this;
}

eprosima::fastdds::dds::xtypes::MinimalStructHeader& eprosima::fastdds::dds::xtypes::MinimalStructHeader::operator =(
        MinimalStructHeader&& x) noexcept
{

    m_base_type = x.m_base_type;x.m_base_type = nullptr;
    m_detail = std::move(x.m_detail);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::MinimalStructHeader::operator ==(
        const MinimalStructHeader& x) const
{
    return (m_base_type == x.m_base_type &&
           m_detail == x.m_detail);
}

bool eprosima::fastdds::dds::xtypes::MinimalStructHeader::operator !=(
        const MinimalStructHeader& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member base_type
 * @param _base_type New value to be copied in member base_type
 */
void eprosima::fastdds::dds::xtypes::MinimalStructHeader::base_type(
        const eprosima::fastdds::dds::xtypes::TypeIdentifier& _base_type)
{
    *m_base_type = _base_type;
}

/*!
 * @brief This function moves the value in member base_type
 * @param _base_type New value to be moved in member base_type
 */
void eprosima::fastdds::dds::xtypes::MinimalStructHeader::base_type(
        eprosima::fastdds::dds::xtypes::TypeIdentifier&& _base_type)
{
    *m_base_type = std::move(_base_type);
}

/*!
 * @brief This function returns a constant reference to member base_type
 * @return Constant reference to member base_type
 */
const eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::MinimalStructHeader::base_type() const
{
    return *m_base_type;
}

/*!
 * @brief This function returns a reference to member base_type
 * @return Reference to member base_type
 */
eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::MinimalStructHeader::base_type()
{
    return *m_base_type;
}


/*!
 * @brief This function copies the value in member detail
 * @param _detail New value to be copied in member detail
 */
void eprosima::fastdds::dds::xtypes::MinimalStructHeader::detail(
        const eprosima::fastdds::dds::xtypes::MinimalTypeDetail& _detail)
{
    m_detail = _detail;
}

/*!
 * @brief This function moves the value in member detail
 * @param _detail New value to be moved in member detail
 */
void eprosima::fastdds::dds::xtypes::MinimalStructHeader::detail(
        eprosima::fastdds::dds::xtypes::MinimalTypeDetail&& _detail)
{
    m_detail = std::move(_detail);
}

/*!
 * @brief This function returns a constant reference to member detail
 * @return Constant reference to member detail
 */
const eprosima::fastdds::dds::xtypes::MinimalTypeDetail& eprosima::fastdds::dds::xtypes::MinimalStructHeader::detail() const
{
    return m_detail;
}

/*!
 * @brief This function returns a reference to member detail
 * @return Reference to member detail
 */
eprosima::fastdds::dds::xtypes::MinimalTypeDetail& eprosima::fastdds::dds::xtypes::MinimalStructHeader::detail()
{
    return m_detail;
}


eprosima::fastdds::dds::xtypes::CompleteStructType::CompleteStructType()
{

}

eprosima::fastdds::dds::xtypes::CompleteStructType::~CompleteStructType()
{
}

eprosima::fastdds::dds::xtypes::CompleteStructType::CompleteStructType(
        const CompleteStructType& x)
{
    m_struct_flags = x.m_struct_flags;
    m_header = x.m_header;
    m_member_seq = x.m_member_seq;
}

eprosima::fastdds::dds::xtypes::CompleteStructType::CompleteStructType(
        CompleteStructType&& x) noexcept
{
    m_struct_flags = std::move(x.m_struct_flags);
    m_header = std::move(x.m_header);
    m_member_seq = std::move(x.m_member_seq);
}

eprosima::fastdds::dds::xtypes::CompleteStructType& eprosima::fastdds::dds::xtypes::CompleteStructType::operator =(
        const CompleteStructType& x)
{

    m_struct_flags = x.m_struct_flags;
    m_header = x.m_header;
    m_member_seq = x.m_member_seq;
    return *this;
}

eprosima::fastdds::dds::xtypes::CompleteStructType& eprosima::fastdds::dds::xtypes::CompleteStructType::operator =(
        CompleteStructType&& x) noexcept
{

    m_struct_flags = std::move(x.m_struct_flags);
    m_header = std::move(x.m_header);
    m_member_seq = std::move(x.m_member_seq);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CompleteStructType::operator ==(
        const CompleteStructType& x) const
{
    return (m_struct_flags == x.m_struct_flags &&
           m_header == x.m_header &&
           m_member_seq == x.m_member_seq);
}

bool eprosima::fastdds::dds::xtypes::CompleteStructType::operator !=(
        const CompleteStructType& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member struct_flags
 * @param _struct_flags New value to be copied in member struct_flags
 */
void eprosima::fastdds::dds::xtypes::CompleteStructType::struct_flags(
        const eprosima::fastdds::dds::xtypes::StructTypeFlag& _struct_flags)
{
    m_struct_flags = _struct_flags;
}

/*!
 * @brief This function moves the value in member struct_flags
 * @param _struct_flags New value to be moved in member struct_flags
 */
void eprosima::fastdds::dds::xtypes::CompleteStructType::struct_flags(
        eprosima::fastdds::dds::xtypes::StructTypeFlag&& _struct_flags)
{
    m_struct_flags = std::move(_struct_flags);
}

/*!
 * @brief This function returns a constant reference to member struct_flags
 * @return Constant reference to member struct_flags
 */
const eprosima::fastdds::dds::xtypes::StructTypeFlag& eprosima::fastdds::dds::xtypes::CompleteStructType::struct_flags() const
{
    return m_struct_flags;
}

/*!
 * @brief This function returns a reference to member struct_flags
 * @return Reference to member struct_flags
 */
eprosima::fastdds::dds::xtypes::StructTypeFlag& eprosima::fastdds::dds::xtypes::CompleteStructType::struct_flags()
{
    return m_struct_flags;
}


/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void eprosima::fastdds::dds::xtypes::CompleteStructType::header(
        const eprosima::fastdds::dds::xtypes::CompleteStructHeader& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void eprosima::fastdds::dds::xtypes::CompleteStructType::header(
        eprosima::fastdds::dds::xtypes::CompleteStructHeader&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const eprosima::fastdds::dds::xtypes::CompleteStructHeader& eprosima::fastdds::dds::xtypes::CompleteStructType::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
eprosima::fastdds::dds::xtypes::CompleteStructHeader& eprosima::fastdds::dds::xtypes::CompleteStructType::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member member_seq
 * @param _member_seq New value to be copied in member member_seq
 */
void eprosima::fastdds::dds::xtypes::CompleteStructType::member_seq(
        const eprosima::fastdds::dds::xtypes::CompleteStructMemberSeq& _member_seq)
{
    m_member_seq = _member_seq;
}

/*!
 * @brief This function moves the value in member member_seq
 * @param _member_seq New value to be moved in member member_seq
 */
void eprosima::fastdds::dds::xtypes::CompleteStructType::member_seq(
        eprosima::fastdds::dds::xtypes::CompleteStructMemberSeq&& _member_seq)
{
    m_member_seq = std::move(_member_seq);
}

/*!
 * @brief This function returns a constant reference to member member_seq
 * @return Constant reference to member member_seq
 */
const eprosima::fastdds::dds::xtypes::CompleteStructMemberSeq& eprosima::fastdds::dds::xtypes::CompleteStructType::member_seq() const
{
    return m_member_seq;
}

/*!
 * @brief This function returns a reference to member member_seq
 * @return Reference to member member_seq
 */
eprosima::fastdds::dds::xtypes::CompleteStructMemberSeq& eprosima::fastdds::dds::xtypes::CompleteStructType::member_seq()
{
    return m_member_seq;
}


eprosima::fastdds::dds::xtypes::MinimalStructType::MinimalStructType()
{

}

eprosima::fastdds::dds::xtypes::MinimalStructType::~MinimalStructType()
{
}

eprosima::fastdds::dds::xtypes::MinimalStructType::MinimalStructType(
        const MinimalStructType& x)
{
    m_struct_flags = x.m_struct_flags;
    m_header = x.m_header;
    m_member_seq = x.m_member_seq;
}

eprosima::fastdds::dds::xtypes::MinimalStructType::MinimalStructType(
        MinimalStructType&& x) noexcept
{
    m_struct_flags = std::move(x.m_struct_flags);
    m_header = std::move(x.m_header);
    m_member_seq = std::move(x.m_member_seq);
}

eprosima::fastdds::dds::xtypes::MinimalStructType& eprosima::fastdds::dds::xtypes::MinimalStructType::operator =(
        const MinimalStructType& x)
{

    m_struct_flags = x.m_struct_flags;
    m_header = x.m_header;
    m_member_seq = x.m_member_seq;
    return *this;
}

eprosima::fastdds::dds::xtypes::MinimalStructType& eprosima::fastdds::dds::xtypes::MinimalStructType::operator =(
        MinimalStructType&& x) noexcept
{

    m_struct_flags = std::move(x.m_struct_flags);
    m_header = std::move(x.m_header);
    m_member_seq = std::move(x.m_member_seq);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::MinimalStructType::operator ==(
        const MinimalStructType& x) const
{
    return (m_struct_flags == x.m_struct_flags &&
           m_header == x.m_header &&
           m_member_seq == x.m_member_seq);
}

bool eprosima::fastdds::dds::xtypes::MinimalStructType::operator !=(
        const MinimalStructType& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member struct_flags
 * @param _struct_flags New value to be copied in member struct_flags
 */
void eprosima::fastdds::dds::xtypes::MinimalStructType::struct_flags(
        const eprosima::fastdds::dds::xtypes::StructTypeFlag& _struct_flags)
{
    m_struct_flags = _struct_flags;
}

/*!
 * @brief This function moves the value in member struct_flags
 * @param _struct_flags New value to be moved in member struct_flags
 */
void eprosima::fastdds::dds::xtypes::MinimalStructType::struct_flags(
        eprosima::fastdds::dds::xtypes::StructTypeFlag&& _struct_flags)
{
    m_struct_flags = std::move(_struct_flags);
}

/*!
 * @brief This function returns a constant reference to member struct_flags
 * @return Constant reference to member struct_flags
 */
const eprosima::fastdds::dds::xtypes::StructTypeFlag& eprosima::fastdds::dds::xtypes::MinimalStructType::struct_flags() const
{
    return m_struct_flags;
}

/*!
 * @brief This function returns a reference to member struct_flags
 * @return Reference to member struct_flags
 */
eprosima::fastdds::dds::xtypes::StructTypeFlag& eprosima::fastdds::dds::xtypes::MinimalStructType::struct_flags()
{
    return m_struct_flags;
}


/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void eprosima::fastdds::dds::xtypes::MinimalStructType::header(
        const eprosima::fastdds::dds::xtypes::MinimalStructHeader& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void eprosima::fastdds::dds::xtypes::MinimalStructType::header(
        eprosima::fastdds::dds::xtypes::MinimalStructHeader&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const eprosima::fastdds::dds::xtypes::MinimalStructHeader& eprosima::fastdds::dds::xtypes::MinimalStructType::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
eprosima::fastdds::dds::xtypes::MinimalStructHeader& eprosima::fastdds::dds::xtypes::MinimalStructType::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member member_seq
 * @param _member_seq New value to be copied in member member_seq
 */
void eprosima::fastdds::dds::xtypes::MinimalStructType::member_seq(
        const eprosima::fastdds::dds::xtypes::MinimalStructMemberSeq& _member_seq)
{
    m_member_seq = _member_seq;
}

/*!
 * @brief This function moves the value in member member_seq
 * @param _member_seq New value to be moved in member member_seq
 */
void eprosima::fastdds::dds::xtypes::MinimalStructType::member_seq(
        eprosima::fastdds::dds::xtypes::MinimalStructMemberSeq&& _member_seq)
{
    m_member_seq = std::move(_member_seq);
}

/*!
 * @brief This function returns a constant reference to member member_seq
 * @return Constant reference to member member_seq
 */
const eprosima::fastdds::dds::xtypes::MinimalStructMemberSeq& eprosima::fastdds::dds::xtypes::MinimalStructType::member_seq() const
{
    return m_member_seq;
}

/*!
 * @brief This function returns a reference to member member_seq
 * @return Reference to member member_seq
 */
eprosima::fastdds::dds::xtypes::MinimalStructMemberSeq& eprosima::fastdds::dds::xtypes::MinimalStructType::member_seq()
{
    return m_member_seq;
}



eprosima::fastdds::dds::xtypes::CommonUnionMember::CommonUnionMember()
{
    m_type_id = new eprosima::fastdds::dds::xtypes::TypeIdentifier();



}

eprosima::fastdds::dds::xtypes::CommonUnionMember::~CommonUnionMember()
{
    delete m_type_id;

}

eprosima::fastdds::dds::xtypes::CommonUnionMember::CommonUnionMember(
        const CommonUnionMember& x)
{
    m_member_id = x.m_member_id;
    m_member_flags = x.m_member_flags;
    m_type_id = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_type_id = *x.m_type_id;
    m_label_seq = x.m_label_seq;
}

eprosima::fastdds::dds::xtypes::CommonUnionMember::CommonUnionMember(
        CommonUnionMember&& x) noexcept
{
    m_member_id = x.m_member_id;
    m_member_flags = std::move(x.m_member_flags);
    m_type_id = x.m_type_id;x.m_type_id = nullptr;
    m_label_seq = std::move(x.m_label_seq);
}

eprosima::fastdds::dds::xtypes::CommonUnionMember& eprosima::fastdds::dds::xtypes::CommonUnionMember::operator =(
        const CommonUnionMember& x)
{

    m_member_id = x.m_member_id;
    m_member_flags = x.m_member_flags;
    m_type_id = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_type_id = *x.m_type_id;
    m_label_seq = x.m_label_seq;
    return *this;
}

eprosima::fastdds::dds::xtypes::CommonUnionMember& eprosima::fastdds::dds::xtypes::CommonUnionMember::operator =(
        CommonUnionMember&& x) noexcept
{

    m_member_id = x.m_member_id;
    m_member_flags = std::move(x.m_member_flags);
    m_type_id = x.m_type_id;x.m_type_id = nullptr;
    m_label_seq = std::move(x.m_label_seq);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CommonUnionMember::operator ==(
        const CommonUnionMember& x) const
{
    return (m_member_id == x.m_member_id &&
           m_member_flags == x.m_member_flags &&
           m_type_id == x.m_type_id &&
           m_label_seq == x.m_label_seq);
}

bool eprosima::fastdds::dds::xtypes::CommonUnionMember::operator !=(
        const CommonUnionMember& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member member_id
 * @param _member_id New value for member member_id
 */
void eprosima::fastdds::dds::xtypes::CommonUnionMember::member_id(
        eprosima::fastdds::dds::xtypes::MemberId _member_id)
{
    m_member_id = _member_id;
}

/*!
 * @brief This function returns the value of member member_id
 * @return Value of member member_id
 */
eprosima::fastdds::dds::xtypes::MemberId eprosima::fastdds::dds::xtypes::CommonUnionMember::member_id() const
{
    return m_member_id;
}

/*!
 * @brief This function returns a reference to member member_id
 * @return Reference to member member_id
 */
eprosima::fastdds::dds::xtypes::MemberId& eprosima::fastdds::dds::xtypes::CommonUnionMember::member_id()
{
    return m_member_id;
}


/*!
 * @brief This function copies the value in member member_flags
 * @param _member_flags New value to be copied in member member_flags
 */
void eprosima::fastdds::dds::xtypes::CommonUnionMember::member_flags(
        const eprosima::fastdds::dds::xtypes::UnionMemberFlag& _member_flags)
{
    m_member_flags = _member_flags;
}

/*!
 * @brief This function moves the value in member member_flags
 * @param _member_flags New value to be moved in member member_flags
 */
void eprosima::fastdds::dds::xtypes::CommonUnionMember::member_flags(
        eprosima::fastdds::dds::xtypes::UnionMemberFlag&& _member_flags)
{
    m_member_flags = std::move(_member_flags);
}

/*!
 * @brief This function returns a constant reference to member member_flags
 * @return Constant reference to member member_flags
 */
const eprosima::fastdds::dds::xtypes::UnionMemberFlag& eprosima::fastdds::dds::xtypes::CommonUnionMember::member_flags() const
{
    return m_member_flags;
}

/*!
 * @brief This function returns a reference to member member_flags
 * @return Reference to member member_flags
 */
eprosima::fastdds::dds::xtypes::UnionMemberFlag& eprosima::fastdds::dds::xtypes::CommonUnionMember::member_flags()
{
    return m_member_flags;
}


/*!
 * @brief This function copies the value in member type_id
 * @param _type_id New value to be copied in member type_id
 */
void eprosima::fastdds::dds::xtypes::CommonUnionMember::type_id(
        const eprosima::fastdds::dds::xtypes::TypeIdentifier& _type_id)
{
    *m_type_id = _type_id;
}

/*!
 * @brief This function moves the value in member type_id
 * @param _type_id New value to be moved in member type_id
 */
void eprosima::fastdds::dds::xtypes::CommonUnionMember::type_id(
        eprosima::fastdds::dds::xtypes::TypeIdentifier&& _type_id)
{
    *m_type_id = std::move(_type_id);
}

/*!
 * @brief This function returns a constant reference to member type_id
 * @return Constant reference to member type_id
 */
const eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::CommonUnionMember::type_id() const
{
    return *m_type_id;
}

/*!
 * @brief This function returns a reference to member type_id
 * @return Reference to member type_id
 */
eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::CommonUnionMember::type_id()
{
    return *m_type_id;
}


/*!
 * @brief This function copies the value in member label_seq
 * @param _label_seq New value to be copied in member label_seq
 */
void eprosima::fastdds::dds::xtypes::CommonUnionMember::label_seq(
        const eprosima::fastdds::dds::xtypes::UnionCaseLabelSeq& _label_seq)
{
    m_label_seq = _label_seq;
}

/*!
 * @brief This function moves the value in member label_seq
 * @param _label_seq New value to be moved in member label_seq
 */
void eprosima::fastdds::dds::xtypes::CommonUnionMember::label_seq(
        eprosima::fastdds::dds::xtypes::UnionCaseLabelSeq&& _label_seq)
{
    m_label_seq = std::move(_label_seq);
}

/*!
 * @brief This function returns a constant reference to member label_seq
 * @return Constant reference to member label_seq
 */
const eprosima::fastdds::dds::xtypes::UnionCaseLabelSeq& eprosima::fastdds::dds::xtypes::CommonUnionMember::label_seq() const
{
    return m_label_seq;
}

/*!
 * @brief This function returns a reference to member label_seq
 * @return Reference to member label_seq
 */
eprosima::fastdds::dds::xtypes::UnionCaseLabelSeq& eprosima::fastdds::dds::xtypes::CommonUnionMember::label_seq()
{
    return m_label_seq;
}


eprosima::fastdds::dds::xtypes::CompleteUnionMember::CompleteUnionMember()
{

}

eprosima::fastdds::dds::xtypes::CompleteUnionMember::~CompleteUnionMember()
{
}

eprosima::fastdds::dds::xtypes::CompleteUnionMember::CompleteUnionMember(
        const CompleteUnionMember& x)
{
    m_common = x.m_common;
    m_detail = x.m_detail;
}

eprosima::fastdds::dds::xtypes::CompleteUnionMember::CompleteUnionMember(
        CompleteUnionMember&& x) noexcept
{
    m_common = std::move(x.m_common);
    m_detail = std::move(x.m_detail);
}

eprosima::fastdds::dds::xtypes::CompleteUnionMember& eprosima::fastdds::dds::xtypes::CompleteUnionMember::operator =(
        const CompleteUnionMember& x)
{

    m_common = x.m_common;
    m_detail = x.m_detail;
    return *this;
}

eprosima::fastdds::dds::xtypes::CompleteUnionMember& eprosima::fastdds::dds::xtypes::CompleteUnionMember::operator =(
        CompleteUnionMember&& x) noexcept
{

    m_common = std::move(x.m_common);
    m_detail = std::move(x.m_detail);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CompleteUnionMember::operator ==(
        const CompleteUnionMember& x) const
{
    return (m_common == x.m_common &&
           m_detail == x.m_detail);
}

bool eprosima::fastdds::dds::xtypes::CompleteUnionMember::operator !=(
        const CompleteUnionMember& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member common
 * @param _common New value to be copied in member common
 */
void eprosima::fastdds::dds::xtypes::CompleteUnionMember::common(
        const eprosima::fastdds::dds::xtypes::CommonUnionMember& _common)
{
    m_common = _common;
}

/*!
 * @brief This function moves the value in member common
 * @param _common New value to be moved in member common
 */
void eprosima::fastdds::dds::xtypes::CompleteUnionMember::common(
        eprosima::fastdds::dds::xtypes::CommonUnionMember&& _common)
{
    m_common = std::move(_common);
}

/*!
 * @brief This function returns a constant reference to member common
 * @return Constant reference to member common
 */
const eprosima::fastdds::dds::xtypes::CommonUnionMember& eprosima::fastdds::dds::xtypes::CompleteUnionMember::common() const
{
    return m_common;
}

/*!
 * @brief This function returns a reference to member common
 * @return Reference to member common
 */
eprosima::fastdds::dds::xtypes::CommonUnionMember& eprosima::fastdds::dds::xtypes::CompleteUnionMember::common()
{
    return m_common;
}


/*!
 * @brief This function copies the value in member detail
 * @param _detail New value to be copied in member detail
 */
void eprosima::fastdds::dds::xtypes::CompleteUnionMember::detail(
        const eprosima::fastdds::dds::xtypes::CompleteMemberDetail& _detail)
{
    m_detail = _detail;
}

/*!
 * @brief This function moves the value in member detail
 * @param _detail New value to be moved in member detail
 */
void eprosima::fastdds::dds::xtypes::CompleteUnionMember::detail(
        eprosima::fastdds::dds::xtypes::CompleteMemberDetail&& _detail)
{
    m_detail = std::move(_detail);
}

/*!
 * @brief This function returns a constant reference to member detail
 * @return Constant reference to member detail
 */
const eprosima::fastdds::dds::xtypes::CompleteMemberDetail& eprosima::fastdds::dds::xtypes::CompleteUnionMember::detail() const
{
    return m_detail;
}

/*!
 * @brief This function returns a reference to member detail
 * @return Reference to member detail
 */
eprosima::fastdds::dds::xtypes::CompleteMemberDetail& eprosima::fastdds::dds::xtypes::CompleteUnionMember::detail()
{
    return m_detail;
}



eprosima::fastdds::dds::xtypes::MinimalUnionMember::MinimalUnionMember()
{

}

eprosima::fastdds::dds::xtypes::MinimalUnionMember::~MinimalUnionMember()
{
}

eprosima::fastdds::dds::xtypes::MinimalUnionMember::MinimalUnionMember(
        const MinimalUnionMember& x)
{
    m_common = x.m_common;
    m_detail = x.m_detail;
}

eprosima::fastdds::dds::xtypes::MinimalUnionMember::MinimalUnionMember(
        MinimalUnionMember&& x) noexcept
{
    m_common = std::move(x.m_common);
    m_detail = std::move(x.m_detail);
}

eprosima::fastdds::dds::xtypes::MinimalUnionMember& eprosima::fastdds::dds::xtypes::MinimalUnionMember::operator =(
        const MinimalUnionMember& x)
{

    m_common = x.m_common;
    m_detail = x.m_detail;
    return *this;
}

eprosima::fastdds::dds::xtypes::MinimalUnionMember& eprosima::fastdds::dds::xtypes::MinimalUnionMember::operator =(
        MinimalUnionMember&& x) noexcept
{

    m_common = std::move(x.m_common);
    m_detail = std::move(x.m_detail);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::MinimalUnionMember::operator ==(
        const MinimalUnionMember& x) const
{
    return (m_common == x.m_common &&
           m_detail == x.m_detail);
}

bool eprosima::fastdds::dds::xtypes::MinimalUnionMember::operator !=(
        const MinimalUnionMember& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member common
 * @param _common New value to be copied in member common
 */
void eprosima::fastdds::dds::xtypes::MinimalUnionMember::common(
        const eprosima::fastdds::dds::xtypes::CommonUnionMember& _common)
{
    m_common = _common;
}

/*!
 * @brief This function moves the value in member common
 * @param _common New value to be moved in member common
 */
void eprosima::fastdds::dds::xtypes::MinimalUnionMember::common(
        eprosima::fastdds::dds::xtypes::CommonUnionMember&& _common)
{
    m_common = std::move(_common);
}

/*!
 * @brief This function returns a constant reference to member common
 * @return Constant reference to member common
 */
const eprosima::fastdds::dds::xtypes::CommonUnionMember& eprosima::fastdds::dds::xtypes::MinimalUnionMember::common() const
{
    return m_common;
}

/*!
 * @brief This function returns a reference to member common
 * @return Reference to member common
 */
eprosima::fastdds::dds::xtypes::CommonUnionMember& eprosima::fastdds::dds::xtypes::MinimalUnionMember::common()
{
    return m_common;
}


/*!
 * @brief This function copies the value in member detail
 * @param _detail New value to be copied in member detail
 */
void eprosima::fastdds::dds::xtypes::MinimalUnionMember::detail(
        const eprosima::fastdds::dds::xtypes::MinimalMemberDetail& _detail)
{
    m_detail = _detail;
}

/*!
 * @brief This function moves the value in member detail
 * @param _detail New value to be moved in member detail
 */
void eprosima::fastdds::dds::xtypes::MinimalUnionMember::detail(
        eprosima::fastdds::dds::xtypes::MinimalMemberDetail&& _detail)
{
    m_detail = std::move(_detail);
}

/*!
 * @brief This function returns a constant reference to member detail
 * @return Constant reference to member detail
 */
const eprosima::fastdds::dds::xtypes::MinimalMemberDetail& eprosima::fastdds::dds::xtypes::MinimalUnionMember::detail() const
{
    return m_detail;
}

/*!
 * @brief This function returns a reference to member detail
 * @return Reference to member detail
 */
eprosima::fastdds::dds::xtypes::MinimalMemberDetail& eprosima::fastdds::dds::xtypes::MinimalUnionMember::detail()
{
    return m_detail;
}



eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember::CommonDiscriminatorMember()
{
    m_type_id = new eprosima::fastdds::dds::xtypes::TypeIdentifier();


}

eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember::~CommonDiscriminatorMember()
{
    delete m_type_id;
}

eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember::CommonDiscriminatorMember(
        const CommonDiscriminatorMember& x)
{
    m_member_flags = x.m_member_flags;
    m_type_id = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_type_id = *x.m_type_id;
}

eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember::CommonDiscriminatorMember(
        CommonDiscriminatorMember&& x) noexcept
{
    m_member_flags = std::move(x.m_member_flags);
    m_type_id = x.m_type_id;x.m_type_id = nullptr;
}

eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember& eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember::operator =(
        const CommonDiscriminatorMember& x)
{

    m_member_flags = x.m_member_flags;
    m_type_id = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_type_id = *x.m_type_id;
    return *this;
}

eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember& eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember::operator =(
        CommonDiscriminatorMember&& x) noexcept
{

    m_member_flags = std::move(x.m_member_flags);
    m_type_id = x.m_type_id;x.m_type_id = nullptr;
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember::operator ==(
        const CommonDiscriminatorMember& x) const
{
    return (m_member_flags == x.m_member_flags &&
           m_type_id == x.m_type_id);
}

bool eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember::operator !=(
        const CommonDiscriminatorMember& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member member_flags
 * @param _member_flags New value to be copied in member member_flags
 */
void eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember::member_flags(
        const eprosima::fastdds::dds::xtypes::UnionDiscriminatorFlag& _member_flags)
{
    m_member_flags = _member_flags;
}

/*!
 * @brief This function moves the value in member member_flags
 * @param _member_flags New value to be moved in member member_flags
 */
void eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember::member_flags(
        eprosima::fastdds::dds::xtypes::UnionDiscriminatorFlag&& _member_flags)
{
    m_member_flags = std::move(_member_flags);
}

/*!
 * @brief This function returns a constant reference to member member_flags
 * @return Constant reference to member member_flags
 */
const eprosima::fastdds::dds::xtypes::UnionDiscriminatorFlag& eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember::member_flags() const
{
    return m_member_flags;
}

/*!
 * @brief This function returns a reference to member member_flags
 * @return Reference to member member_flags
 */
eprosima::fastdds::dds::xtypes::UnionDiscriminatorFlag& eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember::member_flags()
{
    return m_member_flags;
}


/*!
 * @brief This function copies the value in member type_id
 * @param _type_id New value to be copied in member type_id
 */
void eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember::type_id(
        const eprosima::fastdds::dds::xtypes::TypeIdentifier& _type_id)
{
    *m_type_id = _type_id;
}

/*!
 * @brief This function moves the value in member type_id
 * @param _type_id New value to be moved in member type_id
 */
void eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember::type_id(
        eprosima::fastdds::dds::xtypes::TypeIdentifier&& _type_id)
{
    *m_type_id = std::move(_type_id);
}

/*!
 * @brief This function returns a constant reference to member type_id
 * @return Constant reference to member type_id
 */
const eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember::type_id() const
{
    return *m_type_id;
}

/*!
 * @brief This function returns a reference to member type_id
 * @return Reference to member type_id
 */
eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember::type_id()
{
    return *m_type_id;
}


eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember::CompleteDiscriminatorMember()
{

}

eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember::~CompleteDiscriminatorMember()
{
}

eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember::CompleteDiscriminatorMember(
        const CompleteDiscriminatorMember& x)
{
    m_common = x.m_common;
    m_ann_builtin = x.m_ann_builtin;
    m_ann_custom = x.m_ann_custom;
}

eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember::CompleteDiscriminatorMember(
        CompleteDiscriminatorMember&& x) noexcept
{
    m_common = std::move(x.m_common);
    m_ann_builtin = std::move(x.m_ann_builtin);
    m_ann_custom = std::move(x.m_ann_custom);
}

eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember& eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember::operator =(
        const CompleteDiscriminatorMember& x)
{

    m_common = x.m_common;
    m_ann_builtin = x.m_ann_builtin;
    m_ann_custom = x.m_ann_custom;
    return *this;
}

eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember& eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember::operator =(
        CompleteDiscriminatorMember&& x) noexcept
{

    m_common = std::move(x.m_common);
    m_ann_builtin = std::move(x.m_ann_builtin);
    m_ann_custom = std::move(x.m_ann_custom);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember::operator ==(
        const CompleteDiscriminatorMember& x) const
{
    return (m_common == x.m_common &&
           m_ann_builtin == x.m_ann_builtin &&
           m_ann_custom == x.m_ann_custom);
}

bool eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember::operator !=(
        const CompleteDiscriminatorMember& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member common
 * @param _common New value to be copied in member common
 */
void eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember::common(
        const eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember& _common)
{
    m_common = _common;
}

/*!
 * @brief This function moves the value in member common
 * @param _common New value to be moved in member common
 */
void eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember::common(
        eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember&& _common)
{
    m_common = std::move(_common);
}

/*!
 * @brief This function returns a constant reference to member common
 * @return Constant reference to member common
 */
const eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember& eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember::common() const
{
    return m_common;
}

/*!
 * @brief This function returns a reference to member common
 * @return Reference to member common
 */
eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember& eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember::common()
{
    return m_common;
}


/*!
 * @brief This function copies the value in member ann_builtin
 * @param _ann_builtin New value to be copied in member ann_builtin
 */
void eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember::ann_builtin(
        const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations>& _ann_builtin)
{
    m_ann_builtin = _ann_builtin;
}

/*!
 * @brief This function moves the value in member ann_builtin
 * @param _ann_builtin New value to be moved in member ann_builtin
 */
void eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember::ann_builtin(
        eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations>&& _ann_builtin)
{
    m_ann_builtin = std::move(_ann_builtin);
}

/*!
 * @brief This function returns a constant reference to member ann_builtin
 * @return Constant reference to member ann_builtin
 */
const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations>& eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember::ann_builtin() const
{
    return m_ann_builtin;
}

/*!
 * @brief This function returns a reference to member ann_builtin
 * @return Reference to member ann_builtin
 */
eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinTypeAnnotations>& eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember::ann_builtin()
{
    return m_ann_builtin;
}


/*!
 * @brief This function copies the value in member ann_custom
 * @param _ann_custom New value to be copied in member ann_custom
 */
void eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember::ann_custom(
        const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>& _ann_custom)
{
    m_ann_custom = _ann_custom;
}

/*!
 * @brief This function moves the value in member ann_custom
 * @param _ann_custom New value to be moved in member ann_custom
 */
void eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember::ann_custom(
        eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>&& _ann_custom)
{
    m_ann_custom = std::move(_ann_custom);
}

/*!
 * @brief This function returns a constant reference to member ann_custom
 * @return Constant reference to member ann_custom
 */
const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>& eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember::ann_custom() const
{
    return m_ann_custom;
}

/*!
 * @brief This function returns a reference to member ann_custom
 * @return Reference to member ann_custom
 */
eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>& eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember::ann_custom()
{
    return m_ann_custom;
}


eprosima::fastdds::dds::xtypes::MinimalDiscriminatorMember::MinimalDiscriminatorMember()
{

}

eprosima::fastdds::dds::xtypes::MinimalDiscriminatorMember::~MinimalDiscriminatorMember()
{
}

eprosima::fastdds::dds::xtypes::MinimalDiscriminatorMember::MinimalDiscriminatorMember(
        const MinimalDiscriminatorMember& x)
{
    m_common = x.m_common;
}

eprosima::fastdds::dds::xtypes::MinimalDiscriminatorMember::MinimalDiscriminatorMember(
        MinimalDiscriminatorMember&& x) noexcept
{
    m_common = std::move(x.m_common);
}

eprosima::fastdds::dds::xtypes::MinimalDiscriminatorMember& eprosima::fastdds::dds::xtypes::MinimalDiscriminatorMember::operator =(
        const MinimalDiscriminatorMember& x)
{

    m_common = x.m_common;
    return *this;
}

eprosima::fastdds::dds::xtypes::MinimalDiscriminatorMember& eprosima::fastdds::dds::xtypes::MinimalDiscriminatorMember::operator =(
        MinimalDiscriminatorMember&& x) noexcept
{

    m_common = std::move(x.m_common);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::MinimalDiscriminatorMember::operator ==(
        const MinimalDiscriminatorMember& x) const
{
    return (m_common == x.m_common);
}

bool eprosima::fastdds::dds::xtypes::MinimalDiscriminatorMember::operator !=(
        const MinimalDiscriminatorMember& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member common
 * @param _common New value to be copied in member common
 */
void eprosima::fastdds::dds::xtypes::MinimalDiscriminatorMember::common(
        const eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember& _common)
{
    m_common = _common;
}

/*!
 * @brief This function moves the value in member common
 * @param _common New value to be moved in member common
 */
void eprosima::fastdds::dds::xtypes::MinimalDiscriminatorMember::common(
        eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember&& _common)
{
    m_common = std::move(_common);
}

/*!
 * @brief This function returns a constant reference to member common
 * @return Constant reference to member common
 */
const eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember& eprosima::fastdds::dds::xtypes::MinimalDiscriminatorMember::common() const
{
    return m_common;
}

/*!
 * @brief This function returns a reference to member common
 * @return Reference to member common
 */
eprosima::fastdds::dds::xtypes::CommonDiscriminatorMember& eprosima::fastdds::dds::xtypes::MinimalDiscriminatorMember::common()
{
    return m_common;
}


eprosima::fastdds::dds::xtypes::CompleteUnionHeader::CompleteUnionHeader()
{

}

eprosima::fastdds::dds::xtypes::CompleteUnionHeader::~CompleteUnionHeader()
{
}

eprosima::fastdds::dds::xtypes::CompleteUnionHeader::CompleteUnionHeader(
        const CompleteUnionHeader& x)
{
    m_detail = x.m_detail;
}

eprosima::fastdds::dds::xtypes::CompleteUnionHeader::CompleteUnionHeader(
        CompleteUnionHeader&& x) noexcept
{
    m_detail = std::move(x.m_detail);
}

eprosima::fastdds::dds::xtypes::CompleteUnionHeader& eprosima::fastdds::dds::xtypes::CompleteUnionHeader::operator =(
        const CompleteUnionHeader& x)
{

    m_detail = x.m_detail;
    return *this;
}

eprosima::fastdds::dds::xtypes::CompleteUnionHeader& eprosima::fastdds::dds::xtypes::CompleteUnionHeader::operator =(
        CompleteUnionHeader&& x) noexcept
{

    m_detail = std::move(x.m_detail);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CompleteUnionHeader::operator ==(
        const CompleteUnionHeader& x) const
{
    return (m_detail == x.m_detail);
}

bool eprosima::fastdds::dds::xtypes::CompleteUnionHeader::operator !=(
        const CompleteUnionHeader& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member detail
 * @param _detail New value to be copied in member detail
 */
void eprosima::fastdds::dds::xtypes::CompleteUnionHeader::detail(
        const eprosima::fastdds::dds::xtypes::CompleteTypeDetail& _detail)
{
    m_detail = _detail;
}

/*!
 * @brief This function moves the value in member detail
 * @param _detail New value to be moved in member detail
 */
void eprosima::fastdds::dds::xtypes::CompleteUnionHeader::detail(
        eprosima::fastdds::dds::xtypes::CompleteTypeDetail&& _detail)
{
    m_detail = std::move(_detail);
}

/*!
 * @brief This function returns a constant reference to member detail
 * @return Constant reference to member detail
 */
const eprosima::fastdds::dds::xtypes::CompleteTypeDetail& eprosima::fastdds::dds::xtypes::CompleteUnionHeader::detail() const
{
    return m_detail;
}

/*!
 * @brief This function returns a reference to member detail
 * @return Reference to member detail
 */
eprosima::fastdds::dds::xtypes::CompleteTypeDetail& eprosima::fastdds::dds::xtypes::CompleteUnionHeader::detail()
{
    return m_detail;
}


eprosima::fastdds::dds::xtypes::MinimalUnionHeader::MinimalUnionHeader()
{

}

eprosima::fastdds::dds::xtypes::MinimalUnionHeader::~MinimalUnionHeader()
{
}

eprosima::fastdds::dds::xtypes::MinimalUnionHeader::MinimalUnionHeader(
        const MinimalUnionHeader& x)
{
    m_detail = x.m_detail;
}

eprosima::fastdds::dds::xtypes::MinimalUnionHeader::MinimalUnionHeader(
        MinimalUnionHeader&& x) noexcept
{
    m_detail = std::move(x.m_detail);
}

eprosima::fastdds::dds::xtypes::MinimalUnionHeader& eprosima::fastdds::dds::xtypes::MinimalUnionHeader::operator =(
        const MinimalUnionHeader& x)
{

    m_detail = x.m_detail;
    return *this;
}

eprosima::fastdds::dds::xtypes::MinimalUnionHeader& eprosima::fastdds::dds::xtypes::MinimalUnionHeader::operator =(
        MinimalUnionHeader&& x) noexcept
{

    m_detail = std::move(x.m_detail);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::MinimalUnionHeader::operator ==(
        const MinimalUnionHeader& x) const
{
    return (m_detail == x.m_detail);
}

bool eprosima::fastdds::dds::xtypes::MinimalUnionHeader::operator !=(
        const MinimalUnionHeader& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member detail
 * @param _detail New value to be copied in member detail
 */
void eprosima::fastdds::dds::xtypes::MinimalUnionHeader::detail(
        const eprosima::fastdds::dds::xtypes::MinimalTypeDetail& _detail)
{
    m_detail = _detail;
}

/*!
 * @brief This function moves the value in member detail
 * @param _detail New value to be moved in member detail
 */
void eprosima::fastdds::dds::xtypes::MinimalUnionHeader::detail(
        eprosima::fastdds::dds::xtypes::MinimalTypeDetail&& _detail)
{
    m_detail = std::move(_detail);
}

/*!
 * @brief This function returns a constant reference to member detail
 * @return Constant reference to member detail
 */
const eprosima::fastdds::dds::xtypes::MinimalTypeDetail& eprosima::fastdds::dds::xtypes::MinimalUnionHeader::detail() const
{
    return m_detail;
}

/*!
 * @brief This function returns a reference to member detail
 * @return Reference to member detail
 */
eprosima::fastdds::dds::xtypes::MinimalTypeDetail& eprosima::fastdds::dds::xtypes::MinimalUnionHeader::detail()
{
    return m_detail;
}


eprosima::fastdds::dds::xtypes::CompleteUnionType::CompleteUnionType()
{

}

eprosima::fastdds::dds::xtypes::CompleteUnionType::~CompleteUnionType()
{
}

eprosima::fastdds::dds::xtypes::CompleteUnionType::CompleteUnionType(
        const CompleteUnionType& x)
{
    m_union_flags = x.m_union_flags;
    m_header = x.m_header;
    m_discriminator = x.m_discriminator;
    m_member_seq = x.m_member_seq;
}

eprosima::fastdds::dds::xtypes::CompleteUnionType::CompleteUnionType(
        CompleteUnionType&& x) noexcept
{
    m_union_flags = std::move(x.m_union_flags);
    m_header = std::move(x.m_header);
    m_discriminator = std::move(x.m_discriminator);
    m_member_seq = std::move(x.m_member_seq);
}

eprosima::fastdds::dds::xtypes::CompleteUnionType& eprosima::fastdds::dds::xtypes::CompleteUnionType::operator =(
        const CompleteUnionType& x)
{

    m_union_flags = x.m_union_flags;
    m_header = x.m_header;
    m_discriminator = x.m_discriminator;
    m_member_seq = x.m_member_seq;
    return *this;
}

eprosima::fastdds::dds::xtypes::CompleteUnionType& eprosima::fastdds::dds::xtypes::CompleteUnionType::operator =(
        CompleteUnionType&& x) noexcept
{

    m_union_flags = std::move(x.m_union_flags);
    m_header = std::move(x.m_header);
    m_discriminator = std::move(x.m_discriminator);
    m_member_seq = std::move(x.m_member_seq);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CompleteUnionType::operator ==(
        const CompleteUnionType& x) const
{
    return (m_union_flags == x.m_union_flags &&
           m_header == x.m_header &&
           m_discriminator == x.m_discriminator &&
           m_member_seq == x.m_member_seq);
}

bool eprosima::fastdds::dds::xtypes::CompleteUnionType::operator !=(
        const CompleteUnionType& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member union_flags
 * @param _union_flags New value to be copied in member union_flags
 */
void eprosima::fastdds::dds::xtypes::CompleteUnionType::union_flags(
        const eprosima::fastdds::dds::xtypes::UnionTypeFlag& _union_flags)
{
    m_union_flags = _union_flags;
}

/*!
 * @brief This function moves the value in member union_flags
 * @param _union_flags New value to be moved in member union_flags
 */
void eprosima::fastdds::dds::xtypes::CompleteUnionType::union_flags(
        eprosima::fastdds::dds::xtypes::UnionTypeFlag&& _union_flags)
{
    m_union_flags = std::move(_union_flags);
}

/*!
 * @brief This function returns a constant reference to member union_flags
 * @return Constant reference to member union_flags
 */
const eprosima::fastdds::dds::xtypes::UnionTypeFlag& eprosima::fastdds::dds::xtypes::CompleteUnionType::union_flags() const
{
    return m_union_flags;
}

/*!
 * @brief This function returns a reference to member union_flags
 * @return Reference to member union_flags
 */
eprosima::fastdds::dds::xtypes::UnionTypeFlag& eprosima::fastdds::dds::xtypes::CompleteUnionType::union_flags()
{
    return m_union_flags;
}


/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void eprosima::fastdds::dds::xtypes::CompleteUnionType::header(
        const eprosima::fastdds::dds::xtypes::CompleteUnionHeader& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void eprosima::fastdds::dds::xtypes::CompleteUnionType::header(
        eprosima::fastdds::dds::xtypes::CompleteUnionHeader&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const eprosima::fastdds::dds::xtypes::CompleteUnionHeader& eprosima::fastdds::dds::xtypes::CompleteUnionType::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
eprosima::fastdds::dds::xtypes::CompleteUnionHeader& eprosima::fastdds::dds::xtypes::CompleteUnionType::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member discriminator
 * @param _discriminator New value to be copied in member discriminator
 */
void eprosima::fastdds::dds::xtypes::CompleteUnionType::discriminator(
        const eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember& _discriminator)
{
    m_discriminator = _discriminator;
}

/*!
 * @brief This function moves the value in member discriminator
 * @param _discriminator New value to be moved in member discriminator
 */
void eprosima::fastdds::dds::xtypes::CompleteUnionType::discriminator(
        eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember&& _discriminator)
{
    m_discriminator = std::move(_discriminator);
}

/*!
 * @brief This function returns a constant reference to member discriminator
 * @return Constant reference to member discriminator
 */
const eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember& eprosima::fastdds::dds::xtypes::CompleteUnionType::discriminator() const
{
    return m_discriminator;
}

/*!
 * @brief This function returns a reference to member discriminator
 * @return Reference to member discriminator
 */
eprosima::fastdds::dds::xtypes::CompleteDiscriminatorMember& eprosima::fastdds::dds::xtypes::CompleteUnionType::discriminator()
{
    return m_discriminator;
}


/*!
 * @brief This function copies the value in member member_seq
 * @param _member_seq New value to be copied in member member_seq
 */
void eprosima::fastdds::dds::xtypes::CompleteUnionType::member_seq(
        const eprosima::fastdds::dds::xtypes::CompleteUnionMemberSeq& _member_seq)
{
    m_member_seq = _member_seq;
}

/*!
 * @brief This function moves the value in member member_seq
 * @param _member_seq New value to be moved in member member_seq
 */
void eprosima::fastdds::dds::xtypes::CompleteUnionType::member_seq(
        eprosima::fastdds::dds::xtypes::CompleteUnionMemberSeq&& _member_seq)
{
    m_member_seq = std::move(_member_seq);
}

/*!
 * @brief This function returns a constant reference to member member_seq
 * @return Constant reference to member member_seq
 */
const eprosima::fastdds::dds::xtypes::CompleteUnionMemberSeq& eprosima::fastdds::dds::xtypes::CompleteUnionType::member_seq() const
{
    return m_member_seq;
}

/*!
 * @brief This function returns a reference to member member_seq
 * @return Reference to member member_seq
 */
eprosima::fastdds::dds::xtypes::CompleteUnionMemberSeq& eprosima::fastdds::dds::xtypes::CompleteUnionType::member_seq()
{
    return m_member_seq;
}


eprosima::fastdds::dds::xtypes::MinimalUnionType::MinimalUnionType()
{

}

eprosima::fastdds::dds::xtypes::MinimalUnionType::~MinimalUnionType()
{
}

eprosima::fastdds::dds::xtypes::MinimalUnionType::MinimalUnionType(
        const MinimalUnionType& x)
{
    m_union_flags = x.m_union_flags;
    m_header = x.m_header;
    m_discriminator = x.m_discriminator;
    m_member_seq = x.m_member_seq;
}

eprosima::fastdds::dds::xtypes::MinimalUnionType::MinimalUnionType(
        MinimalUnionType&& x) noexcept
{
    m_union_flags = std::move(x.m_union_flags);
    m_header = std::move(x.m_header);
    m_discriminator = std::move(x.m_discriminator);
    m_member_seq = std::move(x.m_member_seq);
}

eprosima::fastdds::dds::xtypes::MinimalUnionType& eprosima::fastdds::dds::xtypes::MinimalUnionType::operator =(
        const MinimalUnionType& x)
{

    m_union_flags = x.m_union_flags;
    m_header = x.m_header;
    m_discriminator = x.m_discriminator;
    m_member_seq = x.m_member_seq;
    return *this;
}

eprosima::fastdds::dds::xtypes::MinimalUnionType& eprosima::fastdds::dds::xtypes::MinimalUnionType::operator =(
        MinimalUnionType&& x) noexcept
{

    m_union_flags = std::move(x.m_union_flags);
    m_header = std::move(x.m_header);
    m_discriminator = std::move(x.m_discriminator);
    m_member_seq = std::move(x.m_member_seq);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::MinimalUnionType::operator ==(
        const MinimalUnionType& x) const
{
    return (m_union_flags == x.m_union_flags &&
           m_header == x.m_header &&
           m_discriminator == x.m_discriminator &&
           m_member_seq == x.m_member_seq);
}

bool eprosima::fastdds::dds::xtypes::MinimalUnionType::operator !=(
        const MinimalUnionType& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member union_flags
 * @param _union_flags New value to be copied in member union_flags
 */
void eprosima::fastdds::dds::xtypes::MinimalUnionType::union_flags(
        const eprosima::fastdds::dds::xtypes::UnionTypeFlag& _union_flags)
{
    m_union_flags = _union_flags;
}

/*!
 * @brief This function moves the value in member union_flags
 * @param _union_flags New value to be moved in member union_flags
 */
void eprosima::fastdds::dds::xtypes::MinimalUnionType::union_flags(
        eprosima::fastdds::dds::xtypes::UnionTypeFlag&& _union_flags)
{
    m_union_flags = std::move(_union_flags);
}

/*!
 * @brief This function returns a constant reference to member union_flags
 * @return Constant reference to member union_flags
 */
const eprosima::fastdds::dds::xtypes::UnionTypeFlag& eprosima::fastdds::dds::xtypes::MinimalUnionType::union_flags() const
{
    return m_union_flags;
}

/*!
 * @brief This function returns a reference to member union_flags
 * @return Reference to member union_flags
 */
eprosima::fastdds::dds::xtypes::UnionTypeFlag& eprosima::fastdds::dds::xtypes::MinimalUnionType::union_flags()
{
    return m_union_flags;
}


/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void eprosima::fastdds::dds::xtypes::MinimalUnionType::header(
        const eprosima::fastdds::dds::xtypes::MinimalUnionHeader& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void eprosima::fastdds::dds::xtypes::MinimalUnionType::header(
        eprosima::fastdds::dds::xtypes::MinimalUnionHeader&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const eprosima::fastdds::dds::xtypes::MinimalUnionHeader& eprosima::fastdds::dds::xtypes::MinimalUnionType::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
eprosima::fastdds::dds::xtypes::MinimalUnionHeader& eprosima::fastdds::dds::xtypes::MinimalUnionType::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member discriminator
 * @param _discriminator New value to be copied in member discriminator
 */
void eprosima::fastdds::dds::xtypes::MinimalUnionType::discriminator(
        const eprosima::fastdds::dds::xtypes::MinimalDiscriminatorMember& _discriminator)
{
    m_discriminator = _discriminator;
}

/*!
 * @brief This function moves the value in member discriminator
 * @param _discriminator New value to be moved in member discriminator
 */
void eprosima::fastdds::dds::xtypes::MinimalUnionType::discriminator(
        eprosima::fastdds::dds::xtypes::MinimalDiscriminatorMember&& _discriminator)
{
    m_discriminator = std::move(_discriminator);
}

/*!
 * @brief This function returns a constant reference to member discriminator
 * @return Constant reference to member discriminator
 */
const eprosima::fastdds::dds::xtypes::MinimalDiscriminatorMember& eprosima::fastdds::dds::xtypes::MinimalUnionType::discriminator() const
{
    return m_discriminator;
}

/*!
 * @brief This function returns a reference to member discriminator
 * @return Reference to member discriminator
 */
eprosima::fastdds::dds::xtypes::MinimalDiscriminatorMember& eprosima::fastdds::dds::xtypes::MinimalUnionType::discriminator()
{
    return m_discriminator;
}


/*!
 * @brief This function copies the value in member member_seq
 * @param _member_seq New value to be copied in member member_seq
 */
void eprosima::fastdds::dds::xtypes::MinimalUnionType::member_seq(
        const eprosima::fastdds::dds::xtypes::MinimalUnionMemberSeq& _member_seq)
{
    m_member_seq = _member_seq;
}

/*!
 * @brief This function moves the value in member member_seq
 * @param _member_seq New value to be moved in member member_seq
 */
void eprosima::fastdds::dds::xtypes::MinimalUnionType::member_seq(
        eprosima::fastdds::dds::xtypes::MinimalUnionMemberSeq&& _member_seq)
{
    m_member_seq = std::move(_member_seq);
}

/*!
 * @brief This function returns a constant reference to member member_seq
 * @return Constant reference to member member_seq
 */
const eprosima::fastdds::dds::xtypes::MinimalUnionMemberSeq& eprosima::fastdds::dds::xtypes::MinimalUnionType::member_seq() const
{
    return m_member_seq;
}

/*!
 * @brief This function returns a reference to member member_seq
 * @return Reference to member member_seq
 */
eprosima::fastdds::dds::xtypes::MinimalUnionMemberSeq& eprosima::fastdds::dds::xtypes::MinimalUnionType::member_seq()
{
    return m_member_seq;
}


eprosima::fastdds::dds::xtypes::CommonAnnotationParameter::CommonAnnotationParameter()
{
    m_member_type_id = new eprosima::fastdds::dds::xtypes::TypeIdentifier();


}

eprosima::fastdds::dds::xtypes::CommonAnnotationParameter::~CommonAnnotationParameter()
{
    delete m_member_type_id;
}

eprosima::fastdds::dds::xtypes::CommonAnnotationParameter::CommonAnnotationParameter(
        const CommonAnnotationParameter& x)
{
    m_member_flags = x.m_member_flags;
    m_member_type_id = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_member_type_id = *x.m_member_type_id;
}

eprosima::fastdds::dds::xtypes::CommonAnnotationParameter::CommonAnnotationParameter(
        CommonAnnotationParameter&& x) noexcept
{
    m_member_flags = std::move(x.m_member_flags);
    m_member_type_id = x.m_member_type_id;x.m_member_type_id = nullptr;
}

eprosima::fastdds::dds::xtypes::CommonAnnotationParameter& eprosima::fastdds::dds::xtypes::CommonAnnotationParameter::operator =(
        const CommonAnnotationParameter& x)
{

    m_member_flags = x.m_member_flags;
    m_member_type_id = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_member_type_id = *x.m_member_type_id;
    return *this;
}

eprosima::fastdds::dds::xtypes::CommonAnnotationParameter& eprosima::fastdds::dds::xtypes::CommonAnnotationParameter::operator =(
        CommonAnnotationParameter&& x) noexcept
{

    m_member_flags = std::move(x.m_member_flags);
    m_member_type_id = x.m_member_type_id;x.m_member_type_id = nullptr;
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CommonAnnotationParameter::operator ==(
        const CommonAnnotationParameter& x) const
{
    return (m_member_flags == x.m_member_flags &&
           m_member_type_id == x.m_member_type_id);
}

bool eprosima::fastdds::dds::xtypes::CommonAnnotationParameter::operator !=(
        const CommonAnnotationParameter& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member member_flags
 * @param _member_flags New value to be copied in member member_flags
 */
void eprosima::fastdds::dds::xtypes::CommonAnnotationParameter::member_flags(
        const eprosima::fastdds::dds::xtypes::AnnotationParameterFlag& _member_flags)
{
    m_member_flags = _member_flags;
}

/*!
 * @brief This function moves the value in member member_flags
 * @param _member_flags New value to be moved in member member_flags
 */
void eprosima::fastdds::dds::xtypes::CommonAnnotationParameter::member_flags(
        eprosima::fastdds::dds::xtypes::AnnotationParameterFlag&& _member_flags)
{
    m_member_flags = std::move(_member_flags);
}

/*!
 * @brief This function returns a constant reference to member member_flags
 * @return Constant reference to member member_flags
 */
const eprosima::fastdds::dds::xtypes::AnnotationParameterFlag& eprosima::fastdds::dds::xtypes::CommonAnnotationParameter::member_flags() const
{
    return m_member_flags;
}

/*!
 * @brief This function returns a reference to member member_flags
 * @return Reference to member member_flags
 */
eprosima::fastdds::dds::xtypes::AnnotationParameterFlag& eprosima::fastdds::dds::xtypes::CommonAnnotationParameter::member_flags()
{
    return m_member_flags;
}


/*!
 * @brief This function copies the value in member member_type_id
 * @param _member_type_id New value to be copied in member member_type_id
 */
void eprosima::fastdds::dds::xtypes::CommonAnnotationParameter::member_type_id(
        const eprosima::fastdds::dds::xtypes::TypeIdentifier& _member_type_id)
{
    *m_member_type_id = _member_type_id;
}

/*!
 * @brief This function moves the value in member member_type_id
 * @param _member_type_id New value to be moved in member member_type_id
 */
void eprosima::fastdds::dds::xtypes::CommonAnnotationParameter::member_type_id(
        eprosima::fastdds::dds::xtypes::TypeIdentifier&& _member_type_id)
{
    *m_member_type_id = std::move(_member_type_id);
}

/*!
 * @brief This function returns a constant reference to member member_type_id
 * @return Constant reference to member member_type_id
 */
const eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::CommonAnnotationParameter::member_type_id() const
{
    return *m_member_type_id;
}

/*!
 * @brief This function returns a reference to member member_type_id
 * @return Reference to member member_type_id
 */
eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::CommonAnnotationParameter::member_type_id()
{
    return *m_member_type_id;
}


eprosima::fastdds::dds::xtypes::CompleteAnnotationParameter::CompleteAnnotationParameter()
{

}

eprosima::fastdds::dds::xtypes::CompleteAnnotationParameter::~CompleteAnnotationParameter()
{
}

eprosima::fastdds::dds::xtypes::CompleteAnnotationParameter::CompleteAnnotationParameter(
        const CompleteAnnotationParameter& x)
{
    m_common = x.m_common;
    m_name = x.m_name;
    m_default_value = x.m_default_value;
}

eprosima::fastdds::dds::xtypes::CompleteAnnotationParameter::CompleteAnnotationParameter(
        CompleteAnnotationParameter&& x) noexcept
{
    m_common = std::move(x.m_common);
    m_name = std::move(x.m_name);
    m_default_value = std::move(x.m_default_value);
}

eprosima::fastdds::dds::xtypes::CompleteAnnotationParameter& eprosima::fastdds::dds::xtypes::CompleteAnnotationParameter::operator =(
        const CompleteAnnotationParameter& x)
{

    m_common = x.m_common;
    m_name = x.m_name;
    m_default_value = x.m_default_value;
    return *this;
}

eprosima::fastdds::dds::xtypes::CompleteAnnotationParameter& eprosima::fastdds::dds::xtypes::CompleteAnnotationParameter::operator =(
        CompleteAnnotationParameter&& x) noexcept
{

    m_common = std::move(x.m_common);
    m_name = std::move(x.m_name);
    m_default_value = std::move(x.m_default_value);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CompleteAnnotationParameter::operator ==(
        const CompleteAnnotationParameter& x) const
{
    return (m_common == x.m_common &&
           m_name == x.m_name &&
           m_default_value == x.m_default_value);
}

bool eprosima::fastdds::dds::xtypes::CompleteAnnotationParameter::operator !=(
        const CompleteAnnotationParameter& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member common
 * @param _common New value to be copied in member common
 */
void eprosima::fastdds::dds::xtypes::CompleteAnnotationParameter::common(
        const eprosima::fastdds::dds::xtypes::CommonAnnotationParameter& _common)
{
    m_common = _common;
}

/*!
 * @brief This function moves the value in member common
 * @param _common New value to be moved in member common
 */
void eprosima::fastdds::dds::xtypes::CompleteAnnotationParameter::common(
        eprosima::fastdds::dds::xtypes::CommonAnnotationParameter&& _common)
{
    m_common = std::move(_common);
}

/*!
 * @brief This function returns a constant reference to member common
 * @return Constant reference to member common
 */
const eprosima::fastdds::dds::xtypes::CommonAnnotationParameter& eprosima::fastdds::dds::xtypes::CompleteAnnotationParameter::common() const
{
    return m_common;
}

/*!
 * @brief This function returns a reference to member common
 * @return Reference to member common
 */
eprosima::fastdds::dds::xtypes::CommonAnnotationParameter& eprosima::fastdds::dds::xtypes::CompleteAnnotationParameter::common()
{
    return m_common;
}


/*!
 * @brief This function copies the value in member name
 * @param _name New value to be copied in member name
 */
void eprosima::fastdds::dds::xtypes::CompleteAnnotationParameter::name(
        const eprosima::fastdds::dds::xtypes::MemberName& _name)
{
    m_name = _name;
}

/*!
 * @brief This function moves the value in member name
 * @param _name New value to be moved in member name
 */
void eprosima::fastdds::dds::xtypes::CompleteAnnotationParameter::name(
        eprosima::fastdds::dds::xtypes::MemberName&& _name)
{
    m_name = std::move(_name);
}

/*!
 * @brief This function returns a constant reference to member name
 * @return Constant reference to member name
 */
const eprosima::fastdds::dds::xtypes::MemberName& eprosima::fastdds::dds::xtypes::CompleteAnnotationParameter::name() const
{
    return m_name;
}

/*!
 * @brief This function returns a reference to member name
 * @return Reference to member name
 */
eprosima::fastdds::dds::xtypes::MemberName& eprosima::fastdds::dds::xtypes::CompleteAnnotationParameter::name()
{
    return m_name;
}


/*!
 * @brief This function copies the value in member default_value
 * @param _default_value New value to be copied in member default_value
 */
void eprosima::fastdds::dds::xtypes::CompleteAnnotationParameter::default_value(
        const eprosima::fastdds::dds::xtypes::AnnotationParameterValue& _default_value)
{
    m_default_value = _default_value;
}

/*!
 * @brief This function moves the value in member default_value
 * @param _default_value New value to be moved in member default_value
 */
void eprosima::fastdds::dds::xtypes::CompleteAnnotationParameter::default_value(
        eprosima::fastdds::dds::xtypes::AnnotationParameterValue&& _default_value)
{
    m_default_value = std::move(_default_value);
}

/*!
 * @brief This function returns a constant reference to member default_value
 * @return Constant reference to member default_value
 */
const eprosima::fastdds::dds::xtypes::AnnotationParameterValue& eprosima::fastdds::dds::xtypes::CompleteAnnotationParameter::default_value() const
{
    return m_default_value;
}

/*!
 * @brief This function returns a reference to member default_value
 * @return Reference to member default_value
 */
eprosima::fastdds::dds::xtypes::AnnotationParameterValue& eprosima::fastdds::dds::xtypes::CompleteAnnotationParameter::default_value()
{
    return m_default_value;
}



eprosima::fastdds::dds::xtypes::MinimalAnnotationParameter::MinimalAnnotationParameter()
{

}

eprosima::fastdds::dds::xtypes::MinimalAnnotationParameter::~MinimalAnnotationParameter()
{
}

eprosima::fastdds::dds::xtypes::MinimalAnnotationParameter::MinimalAnnotationParameter(
        const MinimalAnnotationParameter& x)
{
    m_common = x.m_common;
    m_name_hash = x.m_name_hash;
    m_default_value = x.m_default_value;
}

eprosima::fastdds::dds::xtypes::MinimalAnnotationParameter::MinimalAnnotationParameter(
        MinimalAnnotationParameter&& x) noexcept
{
    m_common = std::move(x.m_common);
    m_name_hash = std::move(x.m_name_hash);
    m_default_value = std::move(x.m_default_value);
}

eprosima::fastdds::dds::xtypes::MinimalAnnotationParameter& eprosima::fastdds::dds::xtypes::MinimalAnnotationParameter::operator =(
        const MinimalAnnotationParameter& x)
{

    m_common = x.m_common;
    m_name_hash = x.m_name_hash;
    m_default_value = x.m_default_value;
    return *this;
}

eprosima::fastdds::dds::xtypes::MinimalAnnotationParameter& eprosima::fastdds::dds::xtypes::MinimalAnnotationParameter::operator =(
        MinimalAnnotationParameter&& x) noexcept
{

    m_common = std::move(x.m_common);
    m_name_hash = std::move(x.m_name_hash);
    m_default_value = std::move(x.m_default_value);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::MinimalAnnotationParameter::operator ==(
        const MinimalAnnotationParameter& x) const
{
    return (m_common == x.m_common &&
           m_name_hash == x.m_name_hash &&
           m_default_value == x.m_default_value);
}

bool eprosima::fastdds::dds::xtypes::MinimalAnnotationParameter::operator !=(
        const MinimalAnnotationParameter& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member common
 * @param _common New value to be copied in member common
 */
void eprosima::fastdds::dds::xtypes::MinimalAnnotationParameter::common(
        const eprosima::fastdds::dds::xtypes::CommonAnnotationParameter& _common)
{
    m_common = _common;
}

/*!
 * @brief This function moves the value in member common
 * @param _common New value to be moved in member common
 */
void eprosima::fastdds::dds::xtypes::MinimalAnnotationParameter::common(
        eprosima::fastdds::dds::xtypes::CommonAnnotationParameter&& _common)
{
    m_common = std::move(_common);
}

/*!
 * @brief This function returns a constant reference to member common
 * @return Constant reference to member common
 */
const eprosima::fastdds::dds::xtypes::CommonAnnotationParameter& eprosima::fastdds::dds::xtypes::MinimalAnnotationParameter::common() const
{
    return m_common;
}

/*!
 * @brief This function returns a reference to member common
 * @return Reference to member common
 */
eprosima::fastdds::dds::xtypes::CommonAnnotationParameter& eprosima::fastdds::dds::xtypes::MinimalAnnotationParameter::common()
{
    return m_common;
}


/*!
 * @brief This function copies the value in member name_hash
 * @param _name_hash New value to be copied in member name_hash
 */
void eprosima::fastdds::dds::xtypes::MinimalAnnotationParameter::name_hash(
        const eprosima::fastdds::dds::xtypes::NameHash& _name_hash)
{
    m_name_hash = _name_hash;
}

/*!
 * @brief This function moves the value in member name_hash
 * @param _name_hash New value to be moved in member name_hash
 */
void eprosima::fastdds::dds::xtypes::MinimalAnnotationParameter::name_hash(
        eprosima::fastdds::dds::xtypes::NameHash&& _name_hash)
{
    m_name_hash = std::move(_name_hash);
}

/*!
 * @brief This function returns a constant reference to member name_hash
 * @return Constant reference to member name_hash
 */
const eprosima::fastdds::dds::xtypes::NameHash& eprosima::fastdds::dds::xtypes::MinimalAnnotationParameter::name_hash() const
{
    return m_name_hash;
}

/*!
 * @brief This function returns a reference to member name_hash
 * @return Reference to member name_hash
 */
eprosima::fastdds::dds::xtypes::NameHash& eprosima::fastdds::dds::xtypes::MinimalAnnotationParameter::name_hash()
{
    return m_name_hash;
}


/*!
 * @brief This function copies the value in member default_value
 * @param _default_value New value to be copied in member default_value
 */
void eprosima::fastdds::dds::xtypes::MinimalAnnotationParameter::default_value(
        const eprosima::fastdds::dds::xtypes::AnnotationParameterValue& _default_value)
{
    m_default_value = _default_value;
}

/*!
 * @brief This function moves the value in member default_value
 * @param _default_value New value to be moved in member default_value
 */
void eprosima::fastdds::dds::xtypes::MinimalAnnotationParameter::default_value(
        eprosima::fastdds::dds::xtypes::AnnotationParameterValue&& _default_value)
{
    m_default_value = std::move(_default_value);
}

/*!
 * @brief This function returns a constant reference to member default_value
 * @return Constant reference to member default_value
 */
const eprosima::fastdds::dds::xtypes::AnnotationParameterValue& eprosima::fastdds::dds::xtypes::MinimalAnnotationParameter::default_value() const
{
    return m_default_value;
}

/*!
 * @brief This function returns a reference to member default_value
 * @return Reference to member default_value
 */
eprosima::fastdds::dds::xtypes::AnnotationParameterValue& eprosima::fastdds::dds::xtypes::MinimalAnnotationParameter::default_value()
{
    return m_default_value;
}



eprosima::fastdds::dds::xtypes::CompleteAnnotationHeader::CompleteAnnotationHeader()
{

}

eprosima::fastdds::dds::xtypes::CompleteAnnotationHeader::~CompleteAnnotationHeader()
{
}

eprosima::fastdds::dds::xtypes::CompleteAnnotationHeader::CompleteAnnotationHeader(
        const CompleteAnnotationHeader& x)
{
    m_annotation_name = x.m_annotation_name;
}

eprosima::fastdds::dds::xtypes::CompleteAnnotationHeader::CompleteAnnotationHeader(
        CompleteAnnotationHeader&& x) noexcept
{
    m_annotation_name = std::move(x.m_annotation_name);
}

eprosima::fastdds::dds::xtypes::CompleteAnnotationHeader& eprosima::fastdds::dds::xtypes::CompleteAnnotationHeader::operator =(
        const CompleteAnnotationHeader& x)
{

    m_annotation_name = x.m_annotation_name;
    return *this;
}

eprosima::fastdds::dds::xtypes::CompleteAnnotationHeader& eprosima::fastdds::dds::xtypes::CompleteAnnotationHeader::operator =(
        CompleteAnnotationHeader&& x) noexcept
{

    m_annotation_name = std::move(x.m_annotation_name);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CompleteAnnotationHeader::operator ==(
        const CompleteAnnotationHeader& x) const
{
    return (m_annotation_name == x.m_annotation_name);
}

bool eprosima::fastdds::dds::xtypes::CompleteAnnotationHeader::operator !=(
        const CompleteAnnotationHeader& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member annotation_name
 * @param _annotation_name New value to be copied in member annotation_name
 */
void eprosima::fastdds::dds::xtypes::CompleteAnnotationHeader::annotation_name(
        const eprosima::fastdds::dds::xtypes::QualifiedTypeName& _annotation_name)
{
    m_annotation_name = _annotation_name;
}

/*!
 * @brief This function moves the value in member annotation_name
 * @param _annotation_name New value to be moved in member annotation_name
 */
void eprosima::fastdds::dds::xtypes::CompleteAnnotationHeader::annotation_name(
        eprosima::fastdds::dds::xtypes::QualifiedTypeName&& _annotation_name)
{
    m_annotation_name = std::move(_annotation_name);
}

/*!
 * @brief This function returns a constant reference to member annotation_name
 * @return Constant reference to member annotation_name
 */
const eprosima::fastdds::dds::xtypes::QualifiedTypeName& eprosima::fastdds::dds::xtypes::CompleteAnnotationHeader::annotation_name() const
{
    return m_annotation_name;
}

/*!
 * @brief This function returns a reference to member annotation_name
 * @return Reference to member annotation_name
 */
eprosima::fastdds::dds::xtypes::QualifiedTypeName& eprosima::fastdds::dds::xtypes::CompleteAnnotationHeader::annotation_name()
{
    return m_annotation_name;
}


eprosima::fastdds::dds::xtypes::MinimalAnnotationHeader::MinimalAnnotationHeader()
{

}

eprosima::fastdds::dds::xtypes::MinimalAnnotationHeader::~MinimalAnnotationHeader()
{
}

eprosima::fastdds::dds::xtypes::MinimalAnnotationHeader::MinimalAnnotationHeader(
        const MinimalAnnotationHeader& x)
{
    static_cast<void>(x);
}

eprosima::fastdds::dds::xtypes::MinimalAnnotationHeader::MinimalAnnotationHeader(
        MinimalAnnotationHeader&& x) noexcept
{
    static_cast<void>(x);
}

eprosima::fastdds::dds::xtypes::MinimalAnnotationHeader& eprosima::fastdds::dds::xtypes::MinimalAnnotationHeader::operator =(
        const MinimalAnnotationHeader& x)
{

    static_cast<void>(x);

    return *this;
}

eprosima::fastdds::dds::xtypes::MinimalAnnotationHeader& eprosima::fastdds::dds::xtypes::MinimalAnnotationHeader::operator =(
        MinimalAnnotationHeader&& x) noexcept
{

    static_cast<void>(x);

    return *this;
}

bool eprosima::fastdds::dds::xtypes::MinimalAnnotationHeader::operator ==(
        const MinimalAnnotationHeader& x) const
{
    static_cast<void>(x);
    return true;
}

bool eprosima::fastdds::dds::xtypes::MinimalAnnotationHeader::operator !=(
        const MinimalAnnotationHeader& x) const
{
    return !(*this == x);
}


eprosima::fastdds::dds::xtypes::CompleteAnnotationType::CompleteAnnotationType()
{

}

eprosima::fastdds::dds::xtypes::CompleteAnnotationType::~CompleteAnnotationType()
{
}

eprosima::fastdds::dds::xtypes::CompleteAnnotationType::CompleteAnnotationType(
        const CompleteAnnotationType& x)
{
    m_annotation_flag = x.m_annotation_flag;
    m_header = x.m_header;
    m_member_seq = x.m_member_seq;
}

eprosima::fastdds::dds::xtypes::CompleteAnnotationType::CompleteAnnotationType(
        CompleteAnnotationType&& x) noexcept
{
    m_annotation_flag = std::move(x.m_annotation_flag);
    m_header = std::move(x.m_header);
    m_member_seq = std::move(x.m_member_seq);
}

eprosima::fastdds::dds::xtypes::CompleteAnnotationType& eprosima::fastdds::dds::xtypes::CompleteAnnotationType::operator =(
        const CompleteAnnotationType& x)
{

    m_annotation_flag = x.m_annotation_flag;
    m_header = x.m_header;
    m_member_seq = x.m_member_seq;
    return *this;
}

eprosima::fastdds::dds::xtypes::CompleteAnnotationType& eprosima::fastdds::dds::xtypes::CompleteAnnotationType::operator =(
        CompleteAnnotationType&& x) noexcept
{

    m_annotation_flag = std::move(x.m_annotation_flag);
    m_header = std::move(x.m_header);
    m_member_seq = std::move(x.m_member_seq);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CompleteAnnotationType::operator ==(
        const CompleteAnnotationType& x) const
{
    return (m_annotation_flag == x.m_annotation_flag &&
           m_header == x.m_header &&
           m_member_seq == x.m_member_seq);
}

bool eprosima::fastdds::dds::xtypes::CompleteAnnotationType::operator !=(
        const CompleteAnnotationType& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member annotation_flag
 * @param _annotation_flag New value to be copied in member annotation_flag
 */
void eprosima::fastdds::dds::xtypes::CompleteAnnotationType::annotation_flag(
        const eprosima::fastdds::dds::xtypes::AnnotationTypeFlag& _annotation_flag)
{
    m_annotation_flag = _annotation_flag;
}

/*!
 * @brief This function moves the value in member annotation_flag
 * @param _annotation_flag New value to be moved in member annotation_flag
 */
void eprosima::fastdds::dds::xtypes::CompleteAnnotationType::annotation_flag(
        eprosima::fastdds::dds::xtypes::AnnotationTypeFlag&& _annotation_flag)
{
    m_annotation_flag = std::move(_annotation_flag);
}

/*!
 * @brief This function returns a constant reference to member annotation_flag
 * @return Constant reference to member annotation_flag
 */
const eprosima::fastdds::dds::xtypes::AnnotationTypeFlag& eprosima::fastdds::dds::xtypes::CompleteAnnotationType::annotation_flag() const
{
    return m_annotation_flag;
}

/*!
 * @brief This function returns a reference to member annotation_flag
 * @return Reference to member annotation_flag
 */
eprosima::fastdds::dds::xtypes::AnnotationTypeFlag& eprosima::fastdds::dds::xtypes::CompleteAnnotationType::annotation_flag()
{
    return m_annotation_flag;
}


/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void eprosima::fastdds::dds::xtypes::CompleteAnnotationType::header(
        const eprosima::fastdds::dds::xtypes::CompleteAnnotationHeader& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void eprosima::fastdds::dds::xtypes::CompleteAnnotationType::header(
        eprosima::fastdds::dds::xtypes::CompleteAnnotationHeader&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const eprosima::fastdds::dds::xtypes::CompleteAnnotationHeader& eprosima::fastdds::dds::xtypes::CompleteAnnotationType::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
eprosima::fastdds::dds::xtypes::CompleteAnnotationHeader& eprosima::fastdds::dds::xtypes::CompleteAnnotationType::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member member_seq
 * @param _member_seq New value to be copied in member member_seq
 */
void eprosima::fastdds::dds::xtypes::CompleteAnnotationType::member_seq(
        const eprosima::fastdds::dds::xtypes::CompleteAnnotationParameterSeq& _member_seq)
{
    m_member_seq = _member_seq;
}

/*!
 * @brief This function moves the value in member member_seq
 * @param _member_seq New value to be moved in member member_seq
 */
void eprosima::fastdds::dds::xtypes::CompleteAnnotationType::member_seq(
        eprosima::fastdds::dds::xtypes::CompleteAnnotationParameterSeq&& _member_seq)
{
    m_member_seq = std::move(_member_seq);
}

/*!
 * @brief This function returns a constant reference to member member_seq
 * @return Constant reference to member member_seq
 */
const eprosima::fastdds::dds::xtypes::CompleteAnnotationParameterSeq& eprosima::fastdds::dds::xtypes::CompleteAnnotationType::member_seq() const
{
    return m_member_seq;
}

/*!
 * @brief This function returns a reference to member member_seq
 * @return Reference to member member_seq
 */
eprosima::fastdds::dds::xtypes::CompleteAnnotationParameterSeq& eprosima::fastdds::dds::xtypes::CompleteAnnotationType::member_seq()
{
    return m_member_seq;
}


eprosima::fastdds::dds::xtypes::MinimalAnnotationType::MinimalAnnotationType()
{

}

eprosima::fastdds::dds::xtypes::MinimalAnnotationType::~MinimalAnnotationType()
{
}

eprosima::fastdds::dds::xtypes::MinimalAnnotationType::MinimalAnnotationType(
        const MinimalAnnotationType& x)
{
    m_annotation_flag = x.m_annotation_flag;
    m_header = x.m_header;
    m_member_seq = x.m_member_seq;
}

eprosima::fastdds::dds::xtypes::MinimalAnnotationType::MinimalAnnotationType(
        MinimalAnnotationType&& x) noexcept
{
    m_annotation_flag = std::move(x.m_annotation_flag);
    m_header = std::move(x.m_header);
    m_member_seq = std::move(x.m_member_seq);
}

eprosima::fastdds::dds::xtypes::MinimalAnnotationType& eprosima::fastdds::dds::xtypes::MinimalAnnotationType::operator =(
        const MinimalAnnotationType& x)
{

    m_annotation_flag = x.m_annotation_flag;
    m_header = x.m_header;
    m_member_seq = x.m_member_seq;
    return *this;
}

eprosima::fastdds::dds::xtypes::MinimalAnnotationType& eprosima::fastdds::dds::xtypes::MinimalAnnotationType::operator =(
        MinimalAnnotationType&& x) noexcept
{

    m_annotation_flag = std::move(x.m_annotation_flag);
    m_header = std::move(x.m_header);
    m_member_seq = std::move(x.m_member_seq);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::MinimalAnnotationType::operator ==(
        const MinimalAnnotationType& x) const
{
    return (m_annotation_flag == x.m_annotation_flag &&
           m_header == x.m_header &&
           m_member_seq == x.m_member_seq);
}

bool eprosima::fastdds::dds::xtypes::MinimalAnnotationType::operator !=(
        const MinimalAnnotationType& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member annotation_flag
 * @param _annotation_flag New value to be copied in member annotation_flag
 */
void eprosima::fastdds::dds::xtypes::MinimalAnnotationType::annotation_flag(
        const eprosima::fastdds::dds::xtypes::AnnotationTypeFlag& _annotation_flag)
{
    m_annotation_flag = _annotation_flag;
}

/*!
 * @brief This function moves the value in member annotation_flag
 * @param _annotation_flag New value to be moved in member annotation_flag
 */
void eprosima::fastdds::dds::xtypes::MinimalAnnotationType::annotation_flag(
        eprosima::fastdds::dds::xtypes::AnnotationTypeFlag&& _annotation_flag)
{
    m_annotation_flag = std::move(_annotation_flag);
}

/*!
 * @brief This function returns a constant reference to member annotation_flag
 * @return Constant reference to member annotation_flag
 */
const eprosima::fastdds::dds::xtypes::AnnotationTypeFlag& eprosima::fastdds::dds::xtypes::MinimalAnnotationType::annotation_flag() const
{
    return m_annotation_flag;
}

/*!
 * @brief This function returns a reference to member annotation_flag
 * @return Reference to member annotation_flag
 */
eprosima::fastdds::dds::xtypes::AnnotationTypeFlag& eprosima::fastdds::dds::xtypes::MinimalAnnotationType::annotation_flag()
{
    return m_annotation_flag;
}


/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void eprosima::fastdds::dds::xtypes::MinimalAnnotationType::header(
        const eprosima::fastdds::dds::xtypes::MinimalAnnotationHeader& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void eprosima::fastdds::dds::xtypes::MinimalAnnotationType::header(
        eprosima::fastdds::dds::xtypes::MinimalAnnotationHeader&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const eprosima::fastdds::dds::xtypes::MinimalAnnotationHeader& eprosima::fastdds::dds::xtypes::MinimalAnnotationType::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
eprosima::fastdds::dds::xtypes::MinimalAnnotationHeader& eprosima::fastdds::dds::xtypes::MinimalAnnotationType::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member member_seq
 * @param _member_seq New value to be copied in member member_seq
 */
void eprosima::fastdds::dds::xtypes::MinimalAnnotationType::member_seq(
        const eprosima::fastdds::dds::xtypes::MinimalAnnotationParameterSeq& _member_seq)
{
    m_member_seq = _member_seq;
}

/*!
 * @brief This function moves the value in member member_seq
 * @param _member_seq New value to be moved in member member_seq
 */
void eprosima::fastdds::dds::xtypes::MinimalAnnotationType::member_seq(
        eprosima::fastdds::dds::xtypes::MinimalAnnotationParameterSeq&& _member_seq)
{
    m_member_seq = std::move(_member_seq);
}

/*!
 * @brief This function returns a constant reference to member member_seq
 * @return Constant reference to member member_seq
 */
const eprosima::fastdds::dds::xtypes::MinimalAnnotationParameterSeq& eprosima::fastdds::dds::xtypes::MinimalAnnotationType::member_seq() const
{
    return m_member_seq;
}

/*!
 * @brief This function returns a reference to member member_seq
 * @return Reference to member member_seq
 */
eprosima::fastdds::dds::xtypes::MinimalAnnotationParameterSeq& eprosima::fastdds::dds::xtypes::MinimalAnnotationType::member_seq()
{
    return m_member_seq;
}


eprosima::fastdds::dds::xtypes::CommonAliasBody::CommonAliasBody()
{
    m_related_type = new eprosima::fastdds::dds::xtypes::TypeIdentifier();


}

eprosima::fastdds::dds::xtypes::CommonAliasBody::~CommonAliasBody()
{
    delete m_related_type;
}

eprosima::fastdds::dds::xtypes::CommonAliasBody::CommonAliasBody(
        const CommonAliasBody& x)
{
    m_related_flags = x.m_related_flags;
    m_related_type = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_related_type = *x.m_related_type;
}

eprosima::fastdds::dds::xtypes::CommonAliasBody::CommonAliasBody(
        CommonAliasBody&& x) noexcept
{
    m_related_flags = std::move(x.m_related_flags);
    m_related_type = x.m_related_type;x.m_related_type = nullptr;
}

eprosima::fastdds::dds::xtypes::CommonAliasBody& eprosima::fastdds::dds::xtypes::CommonAliasBody::operator =(
        const CommonAliasBody& x)
{

    m_related_flags = x.m_related_flags;
    m_related_type = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_related_type = *x.m_related_type;
    return *this;
}

eprosima::fastdds::dds::xtypes::CommonAliasBody& eprosima::fastdds::dds::xtypes::CommonAliasBody::operator =(
        CommonAliasBody&& x) noexcept
{

    m_related_flags = std::move(x.m_related_flags);
    m_related_type = x.m_related_type;x.m_related_type = nullptr;
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CommonAliasBody::operator ==(
        const CommonAliasBody& x) const
{
    return (m_related_flags == x.m_related_flags &&
           m_related_type == x.m_related_type);
}

bool eprosima::fastdds::dds::xtypes::CommonAliasBody::operator !=(
        const CommonAliasBody& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member related_flags
 * @param _related_flags New value to be copied in member related_flags
 */
void eprosima::fastdds::dds::xtypes::CommonAliasBody::related_flags(
        const eprosima::fastdds::dds::xtypes::AliasMemberFlag& _related_flags)
{
    m_related_flags = _related_flags;
}

/*!
 * @brief This function moves the value in member related_flags
 * @param _related_flags New value to be moved in member related_flags
 */
void eprosima::fastdds::dds::xtypes::CommonAliasBody::related_flags(
        eprosima::fastdds::dds::xtypes::AliasMemberFlag&& _related_flags)
{
    m_related_flags = std::move(_related_flags);
}

/*!
 * @brief This function returns a constant reference to member related_flags
 * @return Constant reference to member related_flags
 */
const eprosima::fastdds::dds::xtypes::AliasMemberFlag& eprosima::fastdds::dds::xtypes::CommonAliasBody::related_flags() const
{
    return m_related_flags;
}

/*!
 * @brief This function returns a reference to member related_flags
 * @return Reference to member related_flags
 */
eprosima::fastdds::dds::xtypes::AliasMemberFlag& eprosima::fastdds::dds::xtypes::CommonAliasBody::related_flags()
{
    return m_related_flags;
}


/*!
 * @brief This function copies the value in member related_type
 * @param _related_type New value to be copied in member related_type
 */
void eprosima::fastdds::dds::xtypes::CommonAliasBody::related_type(
        const eprosima::fastdds::dds::xtypes::TypeIdentifier& _related_type)
{
    *m_related_type = _related_type;
}

/*!
 * @brief This function moves the value in member related_type
 * @param _related_type New value to be moved in member related_type
 */
void eprosima::fastdds::dds::xtypes::CommonAliasBody::related_type(
        eprosima::fastdds::dds::xtypes::TypeIdentifier&& _related_type)
{
    *m_related_type = std::move(_related_type);
}

/*!
 * @brief This function returns a constant reference to member related_type
 * @return Constant reference to member related_type
 */
const eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::CommonAliasBody::related_type() const
{
    return *m_related_type;
}

/*!
 * @brief This function returns a reference to member related_type
 * @return Reference to member related_type
 */
eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::CommonAliasBody::related_type()
{
    return *m_related_type;
}


eprosima::fastdds::dds::xtypes::CompleteAliasBody::CompleteAliasBody()
{

}

eprosima::fastdds::dds::xtypes::CompleteAliasBody::~CompleteAliasBody()
{
}

eprosima::fastdds::dds::xtypes::CompleteAliasBody::CompleteAliasBody(
        const CompleteAliasBody& x)
{
    m_common = x.m_common;
    m_ann_builtin = x.m_ann_builtin;
    m_ann_custom = x.m_ann_custom;
}

eprosima::fastdds::dds::xtypes::CompleteAliasBody::CompleteAliasBody(
        CompleteAliasBody&& x) noexcept
{
    m_common = std::move(x.m_common);
    m_ann_builtin = std::move(x.m_ann_builtin);
    m_ann_custom = std::move(x.m_ann_custom);
}

eprosima::fastdds::dds::xtypes::CompleteAliasBody& eprosima::fastdds::dds::xtypes::CompleteAliasBody::operator =(
        const CompleteAliasBody& x)
{

    m_common = x.m_common;
    m_ann_builtin = x.m_ann_builtin;
    m_ann_custom = x.m_ann_custom;
    return *this;
}

eprosima::fastdds::dds::xtypes::CompleteAliasBody& eprosima::fastdds::dds::xtypes::CompleteAliasBody::operator =(
        CompleteAliasBody&& x) noexcept
{

    m_common = std::move(x.m_common);
    m_ann_builtin = std::move(x.m_ann_builtin);
    m_ann_custom = std::move(x.m_ann_custom);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CompleteAliasBody::operator ==(
        const CompleteAliasBody& x) const
{
    return (m_common == x.m_common &&
           m_ann_builtin == x.m_ann_builtin &&
           m_ann_custom == x.m_ann_custom);
}

bool eprosima::fastdds::dds::xtypes::CompleteAliasBody::operator !=(
        const CompleteAliasBody& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member common
 * @param _common New value to be copied in member common
 */
void eprosima::fastdds::dds::xtypes::CompleteAliasBody::common(
        const eprosima::fastdds::dds::xtypes::CommonAliasBody& _common)
{
    m_common = _common;
}

/*!
 * @brief This function moves the value in member common
 * @param _common New value to be moved in member common
 */
void eprosima::fastdds::dds::xtypes::CompleteAliasBody::common(
        eprosima::fastdds::dds::xtypes::CommonAliasBody&& _common)
{
    m_common = std::move(_common);
}

/*!
 * @brief This function returns a constant reference to member common
 * @return Constant reference to member common
 */
const eprosima::fastdds::dds::xtypes::CommonAliasBody& eprosima::fastdds::dds::xtypes::CompleteAliasBody::common() const
{
    return m_common;
}

/*!
 * @brief This function returns a reference to member common
 * @return Reference to member common
 */
eprosima::fastdds::dds::xtypes::CommonAliasBody& eprosima::fastdds::dds::xtypes::CompleteAliasBody::common()
{
    return m_common;
}


/*!
 * @brief This function copies the value in member ann_builtin
 * @param _ann_builtin New value to be copied in member ann_builtin
 */
void eprosima::fastdds::dds::xtypes::CompleteAliasBody::ann_builtin(
        const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations>& _ann_builtin)
{
    m_ann_builtin = _ann_builtin;
}

/*!
 * @brief This function moves the value in member ann_builtin
 * @param _ann_builtin New value to be moved in member ann_builtin
 */
void eprosima::fastdds::dds::xtypes::CompleteAliasBody::ann_builtin(
        eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations>&& _ann_builtin)
{
    m_ann_builtin = std::move(_ann_builtin);
}

/*!
 * @brief This function returns a constant reference to member ann_builtin
 * @return Constant reference to member ann_builtin
 */
const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations>& eprosima::fastdds::dds::xtypes::CompleteAliasBody::ann_builtin() const
{
    return m_ann_builtin;
}

/*!
 * @brief This function returns a reference to member ann_builtin
 * @return Reference to member ann_builtin
 */
eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations>& eprosima::fastdds::dds::xtypes::CompleteAliasBody::ann_builtin()
{
    return m_ann_builtin;
}


/*!
 * @brief This function copies the value in member ann_custom
 * @param _ann_custom New value to be copied in member ann_custom
 */
void eprosima::fastdds::dds::xtypes::CompleteAliasBody::ann_custom(
        const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>& _ann_custom)
{
    m_ann_custom = _ann_custom;
}

/*!
 * @brief This function moves the value in member ann_custom
 * @param _ann_custom New value to be moved in member ann_custom
 */
void eprosima::fastdds::dds::xtypes::CompleteAliasBody::ann_custom(
        eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>&& _ann_custom)
{
    m_ann_custom = std::move(_ann_custom);
}

/*!
 * @brief This function returns a constant reference to member ann_custom
 * @return Constant reference to member ann_custom
 */
const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>& eprosima::fastdds::dds::xtypes::CompleteAliasBody::ann_custom() const
{
    return m_ann_custom;
}

/*!
 * @brief This function returns a reference to member ann_custom
 * @return Reference to member ann_custom
 */
eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>& eprosima::fastdds::dds::xtypes::CompleteAliasBody::ann_custom()
{
    return m_ann_custom;
}


eprosima::fastdds::dds::xtypes::MinimalAliasBody::MinimalAliasBody()
{

}

eprosima::fastdds::dds::xtypes::MinimalAliasBody::~MinimalAliasBody()
{
}

eprosima::fastdds::dds::xtypes::MinimalAliasBody::MinimalAliasBody(
        const MinimalAliasBody& x)
{
    m_common = x.m_common;
}

eprosima::fastdds::dds::xtypes::MinimalAliasBody::MinimalAliasBody(
        MinimalAliasBody&& x) noexcept
{
    m_common = std::move(x.m_common);
}

eprosima::fastdds::dds::xtypes::MinimalAliasBody& eprosima::fastdds::dds::xtypes::MinimalAliasBody::operator =(
        const MinimalAliasBody& x)
{

    m_common = x.m_common;
    return *this;
}

eprosima::fastdds::dds::xtypes::MinimalAliasBody& eprosima::fastdds::dds::xtypes::MinimalAliasBody::operator =(
        MinimalAliasBody&& x) noexcept
{

    m_common = std::move(x.m_common);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::MinimalAliasBody::operator ==(
        const MinimalAliasBody& x) const
{
    return (m_common == x.m_common);
}

bool eprosima::fastdds::dds::xtypes::MinimalAliasBody::operator !=(
        const MinimalAliasBody& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member common
 * @param _common New value to be copied in member common
 */
void eprosima::fastdds::dds::xtypes::MinimalAliasBody::common(
        const eprosima::fastdds::dds::xtypes::CommonAliasBody& _common)
{
    m_common = _common;
}

/*!
 * @brief This function moves the value in member common
 * @param _common New value to be moved in member common
 */
void eprosima::fastdds::dds::xtypes::MinimalAliasBody::common(
        eprosima::fastdds::dds::xtypes::CommonAliasBody&& _common)
{
    m_common = std::move(_common);
}

/*!
 * @brief This function returns a constant reference to member common
 * @return Constant reference to member common
 */
const eprosima::fastdds::dds::xtypes::CommonAliasBody& eprosima::fastdds::dds::xtypes::MinimalAliasBody::common() const
{
    return m_common;
}

/*!
 * @brief This function returns a reference to member common
 * @return Reference to member common
 */
eprosima::fastdds::dds::xtypes::CommonAliasBody& eprosima::fastdds::dds::xtypes::MinimalAliasBody::common()
{
    return m_common;
}


eprosima::fastdds::dds::xtypes::CompleteAliasHeader::CompleteAliasHeader()
{

}

eprosima::fastdds::dds::xtypes::CompleteAliasHeader::~CompleteAliasHeader()
{
}

eprosima::fastdds::dds::xtypes::CompleteAliasHeader::CompleteAliasHeader(
        const CompleteAliasHeader& x)
{
    m_detail = x.m_detail;
}

eprosima::fastdds::dds::xtypes::CompleteAliasHeader::CompleteAliasHeader(
        CompleteAliasHeader&& x) noexcept
{
    m_detail = std::move(x.m_detail);
}

eprosima::fastdds::dds::xtypes::CompleteAliasHeader& eprosima::fastdds::dds::xtypes::CompleteAliasHeader::operator =(
        const CompleteAliasHeader& x)
{

    m_detail = x.m_detail;
    return *this;
}

eprosima::fastdds::dds::xtypes::CompleteAliasHeader& eprosima::fastdds::dds::xtypes::CompleteAliasHeader::operator =(
        CompleteAliasHeader&& x) noexcept
{

    m_detail = std::move(x.m_detail);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CompleteAliasHeader::operator ==(
        const CompleteAliasHeader& x) const
{
    return (m_detail == x.m_detail);
}

bool eprosima::fastdds::dds::xtypes::CompleteAliasHeader::operator !=(
        const CompleteAliasHeader& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member detail
 * @param _detail New value to be copied in member detail
 */
void eprosima::fastdds::dds::xtypes::CompleteAliasHeader::detail(
        const eprosima::fastdds::dds::xtypes::CompleteTypeDetail& _detail)
{
    m_detail = _detail;
}

/*!
 * @brief This function moves the value in member detail
 * @param _detail New value to be moved in member detail
 */
void eprosima::fastdds::dds::xtypes::CompleteAliasHeader::detail(
        eprosima::fastdds::dds::xtypes::CompleteTypeDetail&& _detail)
{
    m_detail = std::move(_detail);
}

/*!
 * @brief This function returns a constant reference to member detail
 * @return Constant reference to member detail
 */
const eprosima::fastdds::dds::xtypes::CompleteTypeDetail& eprosima::fastdds::dds::xtypes::CompleteAliasHeader::detail() const
{
    return m_detail;
}

/*!
 * @brief This function returns a reference to member detail
 * @return Reference to member detail
 */
eprosima::fastdds::dds::xtypes::CompleteTypeDetail& eprosima::fastdds::dds::xtypes::CompleteAliasHeader::detail()
{
    return m_detail;
}


eprosima::fastdds::dds::xtypes::MinimalAliasHeader::MinimalAliasHeader()
{

}

eprosima::fastdds::dds::xtypes::MinimalAliasHeader::~MinimalAliasHeader()
{
}

eprosima::fastdds::dds::xtypes::MinimalAliasHeader::MinimalAliasHeader(
        const MinimalAliasHeader& x)
{
    static_cast<void>(x);
}

eprosima::fastdds::dds::xtypes::MinimalAliasHeader::MinimalAliasHeader(
        MinimalAliasHeader&& x) noexcept
{
    static_cast<void>(x);
}

eprosima::fastdds::dds::xtypes::MinimalAliasHeader& eprosima::fastdds::dds::xtypes::MinimalAliasHeader::operator =(
        const MinimalAliasHeader& x)
{

    static_cast<void>(x);

    return *this;
}

eprosima::fastdds::dds::xtypes::MinimalAliasHeader& eprosima::fastdds::dds::xtypes::MinimalAliasHeader::operator =(
        MinimalAliasHeader&& x) noexcept
{

    static_cast<void>(x);

    return *this;
}

bool eprosima::fastdds::dds::xtypes::MinimalAliasHeader::operator ==(
        const MinimalAliasHeader& x) const
{
    static_cast<void>(x);
    return true;
}

bool eprosima::fastdds::dds::xtypes::MinimalAliasHeader::operator !=(
        const MinimalAliasHeader& x) const
{
    return !(*this == x);
}


eprosima::fastdds::dds::xtypes::CompleteAliasType::CompleteAliasType()
{

}

eprosima::fastdds::dds::xtypes::CompleteAliasType::~CompleteAliasType()
{
}

eprosima::fastdds::dds::xtypes::CompleteAliasType::CompleteAliasType(
        const CompleteAliasType& x)
{
    m_alias_flags = x.m_alias_flags;
    m_header = x.m_header;
    m_body = x.m_body;
}

eprosima::fastdds::dds::xtypes::CompleteAliasType::CompleteAliasType(
        CompleteAliasType&& x) noexcept
{
    m_alias_flags = std::move(x.m_alias_flags);
    m_header = std::move(x.m_header);
    m_body = std::move(x.m_body);
}

eprosima::fastdds::dds::xtypes::CompleteAliasType& eprosima::fastdds::dds::xtypes::CompleteAliasType::operator =(
        const CompleteAliasType& x)
{

    m_alias_flags = x.m_alias_flags;
    m_header = x.m_header;
    m_body = x.m_body;
    return *this;
}

eprosima::fastdds::dds::xtypes::CompleteAliasType& eprosima::fastdds::dds::xtypes::CompleteAliasType::operator =(
        CompleteAliasType&& x) noexcept
{

    m_alias_flags = std::move(x.m_alias_flags);
    m_header = std::move(x.m_header);
    m_body = std::move(x.m_body);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CompleteAliasType::operator ==(
        const CompleteAliasType& x) const
{
    return (m_alias_flags == x.m_alias_flags &&
           m_header == x.m_header &&
           m_body == x.m_body);
}

bool eprosima::fastdds::dds::xtypes::CompleteAliasType::operator !=(
        const CompleteAliasType& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member alias_flags
 * @param _alias_flags New value to be copied in member alias_flags
 */
void eprosima::fastdds::dds::xtypes::CompleteAliasType::alias_flags(
        const eprosima::fastdds::dds::xtypes::AliasTypeFlag& _alias_flags)
{
    m_alias_flags = _alias_flags;
}

/*!
 * @brief This function moves the value in member alias_flags
 * @param _alias_flags New value to be moved in member alias_flags
 */
void eprosima::fastdds::dds::xtypes::CompleteAliasType::alias_flags(
        eprosima::fastdds::dds::xtypes::AliasTypeFlag&& _alias_flags)
{
    m_alias_flags = std::move(_alias_flags);
}

/*!
 * @brief This function returns a constant reference to member alias_flags
 * @return Constant reference to member alias_flags
 */
const eprosima::fastdds::dds::xtypes::AliasTypeFlag& eprosima::fastdds::dds::xtypes::CompleteAliasType::alias_flags() const
{
    return m_alias_flags;
}

/*!
 * @brief This function returns a reference to member alias_flags
 * @return Reference to member alias_flags
 */
eprosima::fastdds::dds::xtypes::AliasTypeFlag& eprosima::fastdds::dds::xtypes::CompleteAliasType::alias_flags()
{
    return m_alias_flags;
}


/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void eprosima::fastdds::dds::xtypes::CompleteAliasType::header(
        const eprosima::fastdds::dds::xtypes::CompleteAliasHeader& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void eprosima::fastdds::dds::xtypes::CompleteAliasType::header(
        eprosima::fastdds::dds::xtypes::CompleteAliasHeader&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const eprosima::fastdds::dds::xtypes::CompleteAliasHeader& eprosima::fastdds::dds::xtypes::CompleteAliasType::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
eprosima::fastdds::dds::xtypes::CompleteAliasHeader& eprosima::fastdds::dds::xtypes::CompleteAliasType::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member body
 * @param _body New value to be copied in member body
 */
void eprosima::fastdds::dds::xtypes::CompleteAliasType::body(
        const eprosima::fastdds::dds::xtypes::CompleteAliasBody& _body)
{
    m_body = _body;
}

/*!
 * @brief This function moves the value in member body
 * @param _body New value to be moved in member body
 */
void eprosima::fastdds::dds::xtypes::CompleteAliasType::body(
        eprosima::fastdds::dds::xtypes::CompleteAliasBody&& _body)
{
    m_body = std::move(_body);
}

/*!
 * @brief This function returns a constant reference to member body
 * @return Constant reference to member body
 */
const eprosima::fastdds::dds::xtypes::CompleteAliasBody& eprosima::fastdds::dds::xtypes::CompleteAliasType::body() const
{
    return m_body;
}

/*!
 * @brief This function returns a reference to member body
 * @return Reference to member body
 */
eprosima::fastdds::dds::xtypes::CompleteAliasBody& eprosima::fastdds::dds::xtypes::CompleteAliasType::body()
{
    return m_body;
}


eprosima::fastdds::dds::xtypes::MinimalAliasType::MinimalAliasType()
{

}

eprosima::fastdds::dds::xtypes::MinimalAliasType::~MinimalAliasType()
{
}

eprosima::fastdds::dds::xtypes::MinimalAliasType::MinimalAliasType(
        const MinimalAliasType& x)
{
    m_alias_flags = x.m_alias_flags;
    m_header = x.m_header;
    m_body = x.m_body;
}

eprosima::fastdds::dds::xtypes::MinimalAliasType::MinimalAliasType(
        MinimalAliasType&& x) noexcept
{
    m_alias_flags = std::move(x.m_alias_flags);
    m_header = std::move(x.m_header);
    m_body = std::move(x.m_body);
}

eprosima::fastdds::dds::xtypes::MinimalAliasType& eprosima::fastdds::dds::xtypes::MinimalAliasType::operator =(
        const MinimalAliasType& x)
{

    m_alias_flags = x.m_alias_flags;
    m_header = x.m_header;
    m_body = x.m_body;
    return *this;
}

eprosima::fastdds::dds::xtypes::MinimalAliasType& eprosima::fastdds::dds::xtypes::MinimalAliasType::operator =(
        MinimalAliasType&& x) noexcept
{

    m_alias_flags = std::move(x.m_alias_flags);
    m_header = std::move(x.m_header);
    m_body = std::move(x.m_body);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::MinimalAliasType::operator ==(
        const MinimalAliasType& x) const
{
    return (m_alias_flags == x.m_alias_flags &&
           m_header == x.m_header &&
           m_body == x.m_body);
}

bool eprosima::fastdds::dds::xtypes::MinimalAliasType::operator !=(
        const MinimalAliasType& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member alias_flags
 * @param _alias_flags New value to be copied in member alias_flags
 */
void eprosima::fastdds::dds::xtypes::MinimalAliasType::alias_flags(
        const eprosima::fastdds::dds::xtypes::AliasTypeFlag& _alias_flags)
{
    m_alias_flags = _alias_flags;
}

/*!
 * @brief This function moves the value in member alias_flags
 * @param _alias_flags New value to be moved in member alias_flags
 */
void eprosima::fastdds::dds::xtypes::MinimalAliasType::alias_flags(
        eprosima::fastdds::dds::xtypes::AliasTypeFlag&& _alias_flags)
{
    m_alias_flags = std::move(_alias_flags);
}

/*!
 * @brief This function returns a constant reference to member alias_flags
 * @return Constant reference to member alias_flags
 */
const eprosima::fastdds::dds::xtypes::AliasTypeFlag& eprosima::fastdds::dds::xtypes::MinimalAliasType::alias_flags() const
{
    return m_alias_flags;
}

/*!
 * @brief This function returns a reference to member alias_flags
 * @return Reference to member alias_flags
 */
eprosima::fastdds::dds::xtypes::AliasTypeFlag& eprosima::fastdds::dds::xtypes::MinimalAliasType::alias_flags()
{
    return m_alias_flags;
}


/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void eprosima::fastdds::dds::xtypes::MinimalAliasType::header(
        const eprosima::fastdds::dds::xtypes::MinimalAliasHeader& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void eprosima::fastdds::dds::xtypes::MinimalAliasType::header(
        eprosima::fastdds::dds::xtypes::MinimalAliasHeader&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const eprosima::fastdds::dds::xtypes::MinimalAliasHeader& eprosima::fastdds::dds::xtypes::MinimalAliasType::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
eprosima::fastdds::dds::xtypes::MinimalAliasHeader& eprosima::fastdds::dds::xtypes::MinimalAliasType::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member body
 * @param _body New value to be copied in member body
 */
void eprosima::fastdds::dds::xtypes::MinimalAliasType::body(
        const eprosima::fastdds::dds::xtypes::MinimalAliasBody& _body)
{
    m_body = _body;
}

/*!
 * @brief This function moves the value in member body
 * @param _body New value to be moved in member body
 */
void eprosima::fastdds::dds::xtypes::MinimalAliasType::body(
        eprosima::fastdds::dds::xtypes::MinimalAliasBody&& _body)
{
    m_body = std::move(_body);
}

/*!
 * @brief This function returns a constant reference to member body
 * @return Constant reference to member body
 */
const eprosima::fastdds::dds::xtypes::MinimalAliasBody& eprosima::fastdds::dds::xtypes::MinimalAliasType::body() const
{
    return m_body;
}

/*!
 * @brief This function returns a reference to member body
 * @return Reference to member body
 */
eprosima::fastdds::dds::xtypes::MinimalAliasBody& eprosima::fastdds::dds::xtypes::MinimalAliasType::body()
{
    return m_body;
}


eprosima::fastdds::dds::xtypes::CompleteElementDetail::CompleteElementDetail()
{

}

eprosima::fastdds::dds::xtypes::CompleteElementDetail::~CompleteElementDetail()
{
}

eprosima::fastdds::dds::xtypes::CompleteElementDetail::CompleteElementDetail(
        const CompleteElementDetail& x)
{
    m_ann_builtin = x.m_ann_builtin;
    m_ann_custom = x.m_ann_custom;
}

eprosima::fastdds::dds::xtypes::CompleteElementDetail::CompleteElementDetail(
        CompleteElementDetail&& x) noexcept
{
    m_ann_builtin = std::move(x.m_ann_builtin);
    m_ann_custom = std::move(x.m_ann_custom);
}

eprosima::fastdds::dds::xtypes::CompleteElementDetail& eprosima::fastdds::dds::xtypes::CompleteElementDetail::operator =(
        const CompleteElementDetail& x)
{

    m_ann_builtin = x.m_ann_builtin;
    m_ann_custom = x.m_ann_custom;
    return *this;
}

eprosima::fastdds::dds::xtypes::CompleteElementDetail& eprosima::fastdds::dds::xtypes::CompleteElementDetail::operator =(
        CompleteElementDetail&& x) noexcept
{

    m_ann_builtin = std::move(x.m_ann_builtin);
    m_ann_custom = std::move(x.m_ann_custom);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CompleteElementDetail::operator ==(
        const CompleteElementDetail& x) const
{
    return (m_ann_builtin == x.m_ann_builtin &&
           m_ann_custom == x.m_ann_custom);
}

bool eprosima::fastdds::dds::xtypes::CompleteElementDetail::operator !=(
        const CompleteElementDetail& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member ann_builtin
 * @param _ann_builtin New value to be copied in member ann_builtin
 */
void eprosima::fastdds::dds::xtypes::CompleteElementDetail::ann_builtin(
        const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations>& _ann_builtin)
{
    m_ann_builtin = _ann_builtin;
}

/*!
 * @brief This function moves the value in member ann_builtin
 * @param _ann_builtin New value to be moved in member ann_builtin
 */
void eprosima::fastdds::dds::xtypes::CompleteElementDetail::ann_builtin(
        eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations>&& _ann_builtin)
{
    m_ann_builtin = std::move(_ann_builtin);
}

/*!
 * @brief This function returns a constant reference to member ann_builtin
 * @return Constant reference to member ann_builtin
 */
const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations>& eprosima::fastdds::dds::xtypes::CompleteElementDetail::ann_builtin() const
{
    return m_ann_builtin;
}

/*!
 * @brief This function returns a reference to member ann_builtin
 * @return Reference to member ann_builtin
 */
eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedBuiltinMemberAnnotations>& eprosima::fastdds::dds::xtypes::CompleteElementDetail::ann_builtin()
{
    return m_ann_builtin;
}


/*!
 * @brief This function copies the value in member ann_custom
 * @param _ann_custom New value to be copied in member ann_custom
 */
void eprosima::fastdds::dds::xtypes::CompleteElementDetail::ann_custom(
        const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>& _ann_custom)
{
    m_ann_custom = _ann_custom;
}

/*!
 * @brief This function moves the value in member ann_custom
 * @param _ann_custom New value to be moved in member ann_custom
 */
void eprosima::fastdds::dds::xtypes::CompleteElementDetail::ann_custom(
        eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>&& _ann_custom)
{
    m_ann_custom = std::move(_ann_custom);
}

/*!
 * @brief This function returns a constant reference to member ann_custom
 * @return Constant reference to member ann_custom
 */
const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>& eprosima::fastdds::dds::xtypes::CompleteElementDetail::ann_custom() const
{
    return m_ann_custom;
}

/*!
 * @brief This function returns a reference to member ann_custom
 * @return Reference to member ann_custom
 */
eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::AppliedAnnotationSeq>& eprosima::fastdds::dds::xtypes::CompleteElementDetail::ann_custom()
{
    return m_ann_custom;
}


eprosima::fastdds::dds::xtypes::CommonCollectionElement::CommonCollectionElement()
{
    m_type = new eprosima::fastdds::dds::xtypes::TypeIdentifier();


}

eprosima::fastdds::dds::xtypes::CommonCollectionElement::~CommonCollectionElement()
{
    delete m_type;
}

eprosima::fastdds::dds::xtypes::CommonCollectionElement::CommonCollectionElement(
        const CommonCollectionElement& x)
{
    m_element_flags = x.m_element_flags;
    m_type = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_type = *x.m_type;
}

eprosima::fastdds::dds::xtypes::CommonCollectionElement::CommonCollectionElement(
        CommonCollectionElement&& x) noexcept
{
    m_element_flags = std::move(x.m_element_flags);
    m_type = x.m_type;x.m_type = nullptr;
}

eprosima::fastdds::dds::xtypes::CommonCollectionElement& eprosima::fastdds::dds::xtypes::CommonCollectionElement::operator =(
        const CommonCollectionElement& x)
{

    m_element_flags = x.m_element_flags;
    m_type = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_type = *x.m_type;
    return *this;
}

eprosima::fastdds::dds::xtypes::CommonCollectionElement& eprosima::fastdds::dds::xtypes::CommonCollectionElement::operator =(
        CommonCollectionElement&& x) noexcept
{

    m_element_flags = std::move(x.m_element_flags);
    m_type = x.m_type;x.m_type = nullptr;
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CommonCollectionElement::operator ==(
        const CommonCollectionElement& x) const
{
    return (m_element_flags == x.m_element_flags &&
           m_type == x.m_type);
}

bool eprosima::fastdds::dds::xtypes::CommonCollectionElement::operator !=(
        const CommonCollectionElement& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member element_flags
 * @param _element_flags New value to be copied in member element_flags
 */
void eprosima::fastdds::dds::xtypes::CommonCollectionElement::element_flags(
        const eprosima::fastdds::dds::xtypes::CollectionElementFlag& _element_flags)
{
    m_element_flags = _element_flags;
}

/*!
 * @brief This function moves the value in member element_flags
 * @param _element_flags New value to be moved in member element_flags
 */
void eprosima::fastdds::dds::xtypes::CommonCollectionElement::element_flags(
        eprosima::fastdds::dds::xtypes::CollectionElementFlag&& _element_flags)
{
    m_element_flags = std::move(_element_flags);
}

/*!
 * @brief This function returns a constant reference to member element_flags
 * @return Constant reference to member element_flags
 */
const eprosima::fastdds::dds::xtypes::CollectionElementFlag& eprosima::fastdds::dds::xtypes::CommonCollectionElement::element_flags() const
{
    return m_element_flags;
}

/*!
 * @brief This function returns a reference to member element_flags
 * @return Reference to member element_flags
 */
eprosima::fastdds::dds::xtypes::CollectionElementFlag& eprosima::fastdds::dds::xtypes::CommonCollectionElement::element_flags()
{
    return m_element_flags;
}


/*!
 * @brief This function copies the value in member type
 * @param _type New value to be copied in member type
 */
void eprosima::fastdds::dds::xtypes::CommonCollectionElement::type(
        const eprosima::fastdds::dds::xtypes::TypeIdentifier& _type)
{
    *m_type = _type;
}

/*!
 * @brief This function moves the value in member type
 * @param _type New value to be moved in member type
 */
void eprosima::fastdds::dds::xtypes::CommonCollectionElement::type(
        eprosima::fastdds::dds::xtypes::TypeIdentifier&& _type)
{
    *m_type = std::move(_type);
}

/*!
 * @brief This function returns a constant reference to member type
 * @return Constant reference to member type
 */
const eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::CommonCollectionElement::type() const
{
    return *m_type;
}

/*!
 * @brief This function returns a reference to member type
 * @return Reference to member type
 */
eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::CommonCollectionElement::type()
{
    return *m_type;
}


eprosima::fastdds::dds::xtypes::CompleteCollectionElement::CompleteCollectionElement()
{

}

eprosima::fastdds::dds::xtypes::CompleteCollectionElement::~CompleteCollectionElement()
{
}

eprosima::fastdds::dds::xtypes::CompleteCollectionElement::CompleteCollectionElement(
        const CompleteCollectionElement& x)
{
    m_common = x.m_common;
    m_detail = x.m_detail;
}

eprosima::fastdds::dds::xtypes::CompleteCollectionElement::CompleteCollectionElement(
        CompleteCollectionElement&& x) noexcept
{
    m_common = std::move(x.m_common);
    m_detail = std::move(x.m_detail);
}

eprosima::fastdds::dds::xtypes::CompleteCollectionElement& eprosima::fastdds::dds::xtypes::CompleteCollectionElement::operator =(
        const CompleteCollectionElement& x)
{

    m_common = x.m_common;
    m_detail = x.m_detail;
    return *this;
}

eprosima::fastdds::dds::xtypes::CompleteCollectionElement& eprosima::fastdds::dds::xtypes::CompleteCollectionElement::operator =(
        CompleteCollectionElement&& x) noexcept
{

    m_common = std::move(x.m_common);
    m_detail = std::move(x.m_detail);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CompleteCollectionElement::operator ==(
        const CompleteCollectionElement& x) const
{
    return (m_common == x.m_common &&
           m_detail == x.m_detail);
}

bool eprosima::fastdds::dds::xtypes::CompleteCollectionElement::operator !=(
        const CompleteCollectionElement& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member common
 * @param _common New value to be copied in member common
 */
void eprosima::fastdds::dds::xtypes::CompleteCollectionElement::common(
        const eprosima::fastdds::dds::xtypes::CommonCollectionElement& _common)
{
    m_common = _common;
}

/*!
 * @brief This function moves the value in member common
 * @param _common New value to be moved in member common
 */
void eprosima::fastdds::dds::xtypes::CompleteCollectionElement::common(
        eprosima::fastdds::dds::xtypes::CommonCollectionElement&& _common)
{
    m_common = std::move(_common);
}

/*!
 * @brief This function returns a constant reference to member common
 * @return Constant reference to member common
 */
const eprosima::fastdds::dds::xtypes::CommonCollectionElement& eprosima::fastdds::dds::xtypes::CompleteCollectionElement::common() const
{
    return m_common;
}

/*!
 * @brief This function returns a reference to member common
 * @return Reference to member common
 */
eprosima::fastdds::dds::xtypes::CommonCollectionElement& eprosima::fastdds::dds::xtypes::CompleteCollectionElement::common()
{
    return m_common;
}


/*!
 * @brief This function copies the value in member detail
 * @param _detail New value to be copied in member detail
 */
void eprosima::fastdds::dds::xtypes::CompleteCollectionElement::detail(
        const eprosima::fastdds::dds::xtypes::CompleteElementDetail& _detail)
{
    m_detail = _detail;
}

/*!
 * @brief This function moves the value in member detail
 * @param _detail New value to be moved in member detail
 */
void eprosima::fastdds::dds::xtypes::CompleteCollectionElement::detail(
        eprosima::fastdds::dds::xtypes::CompleteElementDetail&& _detail)
{
    m_detail = std::move(_detail);
}

/*!
 * @brief This function returns a constant reference to member detail
 * @return Constant reference to member detail
 */
const eprosima::fastdds::dds::xtypes::CompleteElementDetail& eprosima::fastdds::dds::xtypes::CompleteCollectionElement::detail() const
{
    return m_detail;
}

/*!
 * @brief This function returns a reference to member detail
 * @return Reference to member detail
 */
eprosima::fastdds::dds::xtypes::CompleteElementDetail& eprosima::fastdds::dds::xtypes::CompleteCollectionElement::detail()
{
    return m_detail;
}


eprosima::fastdds::dds::xtypes::MinimalCollectionElement::MinimalCollectionElement()
{

}

eprosima::fastdds::dds::xtypes::MinimalCollectionElement::~MinimalCollectionElement()
{
}

eprosima::fastdds::dds::xtypes::MinimalCollectionElement::MinimalCollectionElement(
        const MinimalCollectionElement& x)
{
    m_common = x.m_common;
}

eprosima::fastdds::dds::xtypes::MinimalCollectionElement::MinimalCollectionElement(
        MinimalCollectionElement&& x) noexcept
{
    m_common = std::move(x.m_common);
}

eprosima::fastdds::dds::xtypes::MinimalCollectionElement& eprosima::fastdds::dds::xtypes::MinimalCollectionElement::operator =(
        const MinimalCollectionElement& x)
{

    m_common = x.m_common;
    return *this;
}

eprosima::fastdds::dds::xtypes::MinimalCollectionElement& eprosima::fastdds::dds::xtypes::MinimalCollectionElement::operator =(
        MinimalCollectionElement&& x) noexcept
{

    m_common = std::move(x.m_common);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::MinimalCollectionElement::operator ==(
        const MinimalCollectionElement& x) const
{
    return (m_common == x.m_common);
}

bool eprosima::fastdds::dds::xtypes::MinimalCollectionElement::operator !=(
        const MinimalCollectionElement& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member common
 * @param _common New value to be copied in member common
 */
void eprosima::fastdds::dds::xtypes::MinimalCollectionElement::common(
        const eprosima::fastdds::dds::xtypes::CommonCollectionElement& _common)
{
    m_common = _common;
}

/*!
 * @brief This function moves the value in member common
 * @param _common New value to be moved in member common
 */
void eprosima::fastdds::dds::xtypes::MinimalCollectionElement::common(
        eprosima::fastdds::dds::xtypes::CommonCollectionElement&& _common)
{
    m_common = std::move(_common);
}

/*!
 * @brief This function returns a constant reference to member common
 * @return Constant reference to member common
 */
const eprosima::fastdds::dds::xtypes::CommonCollectionElement& eprosima::fastdds::dds::xtypes::MinimalCollectionElement::common() const
{
    return m_common;
}

/*!
 * @brief This function returns a reference to member common
 * @return Reference to member common
 */
eprosima::fastdds::dds::xtypes::CommonCollectionElement& eprosima::fastdds::dds::xtypes::MinimalCollectionElement::common()
{
    return m_common;
}


eprosima::fastdds::dds::xtypes::CommonCollectionHeader::CommonCollectionHeader()
{

}

eprosima::fastdds::dds::xtypes::CommonCollectionHeader::~CommonCollectionHeader()
{
}

eprosima::fastdds::dds::xtypes::CommonCollectionHeader::CommonCollectionHeader(
        const CommonCollectionHeader& x)
{
    m_bound = x.m_bound;
}

eprosima::fastdds::dds::xtypes::CommonCollectionHeader::CommonCollectionHeader(
        CommonCollectionHeader&& x) noexcept
{
    m_bound = x.m_bound;
}

eprosima::fastdds::dds::xtypes::CommonCollectionHeader& eprosima::fastdds::dds::xtypes::CommonCollectionHeader::operator =(
        const CommonCollectionHeader& x)
{

    m_bound = x.m_bound;
    return *this;
}

eprosima::fastdds::dds::xtypes::CommonCollectionHeader& eprosima::fastdds::dds::xtypes::CommonCollectionHeader::operator =(
        CommonCollectionHeader&& x) noexcept
{

    m_bound = x.m_bound;
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CommonCollectionHeader::operator ==(
        const CommonCollectionHeader& x) const
{
    return (m_bound == x.m_bound);
}

bool eprosima::fastdds::dds::xtypes::CommonCollectionHeader::operator !=(
        const CommonCollectionHeader& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member bound
 * @param _bound New value for member bound
 */
void eprosima::fastdds::dds::xtypes::CommonCollectionHeader::bound(
        eprosima::fastdds::dds::xtypes::LBound _bound)
{
    m_bound = _bound;
}

/*!
 * @brief This function returns the value of member bound
 * @return Value of member bound
 */
eprosima::fastdds::dds::xtypes::LBound eprosima::fastdds::dds::xtypes::CommonCollectionHeader::bound() const
{
    return m_bound;
}

/*!
 * @brief This function returns a reference to member bound
 * @return Reference to member bound
 */
eprosima::fastdds::dds::xtypes::LBound& eprosima::fastdds::dds::xtypes::CommonCollectionHeader::bound()
{
    return m_bound;
}


eprosima::fastdds::dds::xtypes::CompleteCollectionHeader::CompleteCollectionHeader()
{

}

eprosima::fastdds::dds::xtypes::CompleteCollectionHeader::~CompleteCollectionHeader()
{
}

eprosima::fastdds::dds::xtypes::CompleteCollectionHeader::CompleteCollectionHeader(
        const CompleteCollectionHeader& x)
{
    m_common = x.m_common;
    m_detail = x.m_detail;
}

eprosima::fastdds::dds::xtypes::CompleteCollectionHeader::CompleteCollectionHeader(
        CompleteCollectionHeader&& x) noexcept
{
    m_common = std::move(x.m_common);
    m_detail = std::move(x.m_detail);
}

eprosima::fastdds::dds::xtypes::CompleteCollectionHeader& eprosima::fastdds::dds::xtypes::CompleteCollectionHeader::operator =(
        const CompleteCollectionHeader& x)
{

    m_common = x.m_common;
    m_detail = x.m_detail;
    return *this;
}

eprosima::fastdds::dds::xtypes::CompleteCollectionHeader& eprosima::fastdds::dds::xtypes::CompleteCollectionHeader::operator =(
        CompleteCollectionHeader&& x) noexcept
{

    m_common = std::move(x.m_common);
    m_detail = std::move(x.m_detail);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CompleteCollectionHeader::operator ==(
        const CompleteCollectionHeader& x) const
{
    return (m_common == x.m_common &&
           m_detail == x.m_detail);
}

bool eprosima::fastdds::dds::xtypes::CompleteCollectionHeader::operator !=(
        const CompleteCollectionHeader& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member common
 * @param _common New value to be copied in member common
 */
void eprosima::fastdds::dds::xtypes::CompleteCollectionHeader::common(
        const eprosima::fastdds::dds::xtypes::CommonCollectionHeader& _common)
{
    m_common = _common;
}

/*!
 * @brief This function moves the value in member common
 * @param _common New value to be moved in member common
 */
void eprosima::fastdds::dds::xtypes::CompleteCollectionHeader::common(
        eprosima::fastdds::dds::xtypes::CommonCollectionHeader&& _common)
{
    m_common = std::move(_common);
}

/*!
 * @brief This function returns a constant reference to member common
 * @return Constant reference to member common
 */
const eprosima::fastdds::dds::xtypes::CommonCollectionHeader& eprosima::fastdds::dds::xtypes::CompleteCollectionHeader::common() const
{
    return m_common;
}

/*!
 * @brief This function returns a reference to member common
 * @return Reference to member common
 */
eprosima::fastdds::dds::xtypes::CommonCollectionHeader& eprosima::fastdds::dds::xtypes::CompleteCollectionHeader::common()
{
    return m_common;
}


/*!
 * @brief This function copies the value in member detail
 * @param _detail New value to be copied in member detail
 */
void eprosima::fastdds::dds::xtypes::CompleteCollectionHeader::detail(
        const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::CompleteTypeDetail>& _detail)
{
    m_detail = _detail;
}

/*!
 * @brief This function moves the value in member detail
 * @param _detail New value to be moved in member detail
 */
void eprosima::fastdds::dds::xtypes::CompleteCollectionHeader::detail(
        eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::CompleteTypeDetail>&& _detail)
{
    m_detail = std::move(_detail);
}

/*!
 * @brief This function returns a constant reference to member detail
 * @return Constant reference to member detail
 */
const eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::CompleteTypeDetail>& eprosima::fastdds::dds::xtypes::CompleteCollectionHeader::detail() const
{
    return m_detail;
}

/*!
 * @brief This function returns a reference to member detail
 * @return Reference to member detail
 */
eprosima::fastcdr::optional<eprosima::fastdds::dds::xtypes::CompleteTypeDetail>& eprosima::fastdds::dds::xtypes::CompleteCollectionHeader::detail()
{
    return m_detail;
}


eprosima::fastdds::dds::xtypes::MinimalCollectionHeader::MinimalCollectionHeader()
{

}

eprosima::fastdds::dds::xtypes::MinimalCollectionHeader::~MinimalCollectionHeader()
{
}

eprosima::fastdds::dds::xtypes::MinimalCollectionHeader::MinimalCollectionHeader(
        const MinimalCollectionHeader& x)
{
    m_common = x.m_common;
}

eprosima::fastdds::dds::xtypes::MinimalCollectionHeader::MinimalCollectionHeader(
        MinimalCollectionHeader&& x) noexcept
{
    m_common = std::move(x.m_common);
}

eprosima::fastdds::dds::xtypes::MinimalCollectionHeader& eprosima::fastdds::dds::xtypes::MinimalCollectionHeader::operator =(
        const MinimalCollectionHeader& x)
{

    m_common = x.m_common;
    return *this;
}

eprosima::fastdds::dds::xtypes::MinimalCollectionHeader& eprosima::fastdds::dds::xtypes::MinimalCollectionHeader::operator =(
        MinimalCollectionHeader&& x) noexcept
{

    m_common = std::move(x.m_common);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::MinimalCollectionHeader::operator ==(
        const MinimalCollectionHeader& x) const
{
    return (m_common == x.m_common);
}

bool eprosima::fastdds::dds::xtypes::MinimalCollectionHeader::operator !=(
        const MinimalCollectionHeader& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member common
 * @param _common New value to be copied in member common
 */
void eprosima::fastdds::dds::xtypes::MinimalCollectionHeader::common(
        const eprosima::fastdds::dds::xtypes::CommonCollectionHeader& _common)
{
    m_common = _common;
}

/*!
 * @brief This function moves the value in member common
 * @param _common New value to be moved in member common
 */
void eprosima::fastdds::dds::xtypes::MinimalCollectionHeader::common(
        eprosima::fastdds::dds::xtypes::CommonCollectionHeader&& _common)
{
    m_common = std::move(_common);
}

/*!
 * @brief This function returns a constant reference to member common
 * @return Constant reference to member common
 */
const eprosima::fastdds::dds::xtypes::CommonCollectionHeader& eprosima::fastdds::dds::xtypes::MinimalCollectionHeader::common() const
{
    return m_common;
}

/*!
 * @brief This function returns a reference to member common
 * @return Reference to member common
 */
eprosima::fastdds::dds::xtypes::CommonCollectionHeader& eprosima::fastdds::dds::xtypes::MinimalCollectionHeader::common()
{
    return m_common;
}


eprosima::fastdds::dds::xtypes::CompleteSequenceType::CompleteSequenceType()
{

}

eprosima::fastdds::dds::xtypes::CompleteSequenceType::~CompleteSequenceType()
{
}

eprosima::fastdds::dds::xtypes::CompleteSequenceType::CompleteSequenceType(
        const CompleteSequenceType& x)
{
    m_collection_flag = x.m_collection_flag;
    m_header = x.m_header;
    m_element = x.m_element;
}

eprosima::fastdds::dds::xtypes::CompleteSequenceType::CompleteSequenceType(
        CompleteSequenceType&& x) noexcept
{
    m_collection_flag = std::move(x.m_collection_flag);
    m_header = std::move(x.m_header);
    m_element = std::move(x.m_element);
}

eprosima::fastdds::dds::xtypes::CompleteSequenceType& eprosima::fastdds::dds::xtypes::CompleteSequenceType::operator =(
        const CompleteSequenceType& x)
{

    m_collection_flag = x.m_collection_flag;
    m_header = x.m_header;
    m_element = x.m_element;
    return *this;
}

eprosima::fastdds::dds::xtypes::CompleteSequenceType& eprosima::fastdds::dds::xtypes::CompleteSequenceType::operator =(
        CompleteSequenceType&& x) noexcept
{

    m_collection_flag = std::move(x.m_collection_flag);
    m_header = std::move(x.m_header);
    m_element = std::move(x.m_element);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CompleteSequenceType::operator ==(
        const CompleteSequenceType& x) const
{
    return (m_collection_flag == x.m_collection_flag &&
           m_header == x.m_header &&
           m_element == x.m_element);
}

bool eprosima::fastdds::dds::xtypes::CompleteSequenceType::operator !=(
        const CompleteSequenceType& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member collection_flag
 * @param _collection_flag New value to be copied in member collection_flag
 */
void eprosima::fastdds::dds::xtypes::CompleteSequenceType::collection_flag(
        const eprosima::fastdds::dds::xtypes::CollectionTypeFlag& _collection_flag)
{
    m_collection_flag = _collection_flag;
}

/*!
 * @brief This function moves the value in member collection_flag
 * @param _collection_flag New value to be moved in member collection_flag
 */
void eprosima::fastdds::dds::xtypes::CompleteSequenceType::collection_flag(
        eprosima::fastdds::dds::xtypes::CollectionTypeFlag&& _collection_flag)
{
    m_collection_flag = std::move(_collection_flag);
}

/*!
 * @brief This function returns a constant reference to member collection_flag
 * @return Constant reference to member collection_flag
 */
const eprosima::fastdds::dds::xtypes::CollectionTypeFlag& eprosima::fastdds::dds::xtypes::CompleteSequenceType::collection_flag() const
{
    return m_collection_flag;
}

/*!
 * @brief This function returns a reference to member collection_flag
 * @return Reference to member collection_flag
 */
eprosima::fastdds::dds::xtypes::CollectionTypeFlag& eprosima::fastdds::dds::xtypes::CompleteSequenceType::collection_flag()
{
    return m_collection_flag;
}


/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void eprosima::fastdds::dds::xtypes::CompleteSequenceType::header(
        const eprosima::fastdds::dds::xtypes::CompleteCollectionHeader& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void eprosima::fastdds::dds::xtypes::CompleteSequenceType::header(
        eprosima::fastdds::dds::xtypes::CompleteCollectionHeader&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const eprosima::fastdds::dds::xtypes::CompleteCollectionHeader& eprosima::fastdds::dds::xtypes::CompleteSequenceType::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
eprosima::fastdds::dds::xtypes::CompleteCollectionHeader& eprosima::fastdds::dds::xtypes::CompleteSequenceType::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member element
 * @param _element New value to be copied in member element
 */
void eprosima::fastdds::dds::xtypes::CompleteSequenceType::element(
        const eprosima::fastdds::dds::xtypes::CompleteCollectionElement& _element)
{
    m_element = _element;
}

/*!
 * @brief This function moves the value in member element
 * @param _element New value to be moved in member element
 */
void eprosima::fastdds::dds::xtypes::CompleteSequenceType::element(
        eprosima::fastdds::dds::xtypes::CompleteCollectionElement&& _element)
{
    m_element = std::move(_element);
}

/*!
 * @brief This function returns a constant reference to member element
 * @return Constant reference to member element
 */
const eprosima::fastdds::dds::xtypes::CompleteCollectionElement& eprosima::fastdds::dds::xtypes::CompleteSequenceType::element() const
{
    return m_element;
}

/*!
 * @brief This function returns a reference to member element
 * @return Reference to member element
 */
eprosima::fastdds::dds::xtypes::CompleteCollectionElement& eprosima::fastdds::dds::xtypes::CompleteSequenceType::element()
{
    return m_element;
}


eprosima::fastdds::dds::xtypes::MinimalSequenceType::MinimalSequenceType()
{

}

eprosima::fastdds::dds::xtypes::MinimalSequenceType::~MinimalSequenceType()
{
}

eprosima::fastdds::dds::xtypes::MinimalSequenceType::MinimalSequenceType(
        const MinimalSequenceType& x)
{
    m_collection_flag = x.m_collection_flag;
    m_header = x.m_header;
    m_element = x.m_element;
}

eprosima::fastdds::dds::xtypes::MinimalSequenceType::MinimalSequenceType(
        MinimalSequenceType&& x) noexcept
{
    m_collection_flag = std::move(x.m_collection_flag);
    m_header = std::move(x.m_header);
    m_element = std::move(x.m_element);
}

eprosima::fastdds::dds::xtypes::MinimalSequenceType& eprosima::fastdds::dds::xtypes::MinimalSequenceType::operator =(
        const MinimalSequenceType& x)
{

    m_collection_flag = x.m_collection_flag;
    m_header = x.m_header;
    m_element = x.m_element;
    return *this;
}

eprosima::fastdds::dds::xtypes::MinimalSequenceType& eprosima::fastdds::dds::xtypes::MinimalSequenceType::operator =(
        MinimalSequenceType&& x) noexcept
{

    m_collection_flag = std::move(x.m_collection_flag);
    m_header = std::move(x.m_header);
    m_element = std::move(x.m_element);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::MinimalSequenceType::operator ==(
        const MinimalSequenceType& x) const
{
    return (m_collection_flag == x.m_collection_flag &&
           m_header == x.m_header &&
           m_element == x.m_element);
}

bool eprosima::fastdds::dds::xtypes::MinimalSequenceType::operator !=(
        const MinimalSequenceType& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member collection_flag
 * @param _collection_flag New value to be copied in member collection_flag
 */
void eprosima::fastdds::dds::xtypes::MinimalSequenceType::collection_flag(
        const eprosima::fastdds::dds::xtypes::CollectionTypeFlag& _collection_flag)
{
    m_collection_flag = _collection_flag;
}

/*!
 * @brief This function moves the value in member collection_flag
 * @param _collection_flag New value to be moved in member collection_flag
 */
void eprosima::fastdds::dds::xtypes::MinimalSequenceType::collection_flag(
        eprosima::fastdds::dds::xtypes::CollectionTypeFlag&& _collection_flag)
{
    m_collection_flag = std::move(_collection_flag);
}

/*!
 * @brief This function returns a constant reference to member collection_flag
 * @return Constant reference to member collection_flag
 */
const eprosima::fastdds::dds::xtypes::CollectionTypeFlag& eprosima::fastdds::dds::xtypes::MinimalSequenceType::collection_flag() const
{
    return m_collection_flag;
}

/*!
 * @brief This function returns a reference to member collection_flag
 * @return Reference to member collection_flag
 */
eprosima::fastdds::dds::xtypes::CollectionTypeFlag& eprosima::fastdds::dds::xtypes::MinimalSequenceType::collection_flag()
{
    return m_collection_flag;
}


/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void eprosima::fastdds::dds::xtypes::MinimalSequenceType::header(
        const eprosima::fastdds::dds::xtypes::MinimalCollectionHeader& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void eprosima::fastdds::dds::xtypes::MinimalSequenceType::header(
        eprosima::fastdds::dds::xtypes::MinimalCollectionHeader&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const eprosima::fastdds::dds::xtypes::MinimalCollectionHeader& eprosima::fastdds::dds::xtypes::MinimalSequenceType::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
eprosima::fastdds::dds::xtypes::MinimalCollectionHeader& eprosima::fastdds::dds::xtypes::MinimalSequenceType::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member element
 * @param _element New value to be copied in member element
 */
void eprosima::fastdds::dds::xtypes::MinimalSequenceType::element(
        const eprosima::fastdds::dds::xtypes::MinimalCollectionElement& _element)
{
    m_element = _element;
}

/*!
 * @brief This function moves the value in member element
 * @param _element New value to be moved in member element
 */
void eprosima::fastdds::dds::xtypes::MinimalSequenceType::element(
        eprosima::fastdds::dds::xtypes::MinimalCollectionElement&& _element)
{
    m_element = std::move(_element);
}

/*!
 * @brief This function returns a constant reference to member element
 * @return Constant reference to member element
 */
const eprosima::fastdds::dds::xtypes::MinimalCollectionElement& eprosima::fastdds::dds::xtypes::MinimalSequenceType::element() const
{
    return m_element;
}

/*!
 * @brief This function returns a reference to member element
 * @return Reference to member element
 */
eprosima::fastdds::dds::xtypes::MinimalCollectionElement& eprosima::fastdds::dds::xtypes::MinimalSequenceType::element()
{
    return m_element;
}


eprosima::fastdds::dds::xtypes::CommonArrayHeader::CommonArrayHeader()
{

}

eprosima::fastdds::dds::xtypes::CommonArrayHeader::~CommonArrayHeader()
{
}

eprosima::fastdds::dds::xtypes::CommonArrayHeader::CommonArrayHeader(
        const CommonArrayHeader& x)
{
    m_bound_seq = x.m_bound_seq;
}

eprosima::fastdds::dds::xtypes::CommonArrayHeader::CommonArrayHeader(
        CommonArrayHeader&& x) noexcept
{
    m_bound_seq = std::move(x.m_bound_seq);
}

eprosima::fastdds::dds::xtypes::CommonArrayHeader& eprosima::fastdds::dds::xtypes::CommonArrayHeader::operator =(
        const CommonArrayHeader& x)
{

    m_bound_seq = x.m_bound_seq;
    return *this;
}

eprosima::fastdds::dds::xtypes::CommonArrayHeader& eprosima::fastdds::dds::xtypes::CommonArrayHeader::operator =(
        CommonArrayHeader&& x) noexcept
{

    m_bound_seq = std::move(x.m_bound_seq);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CommonArrayHeader::operator ==(
        const CommonArrayHeader& x) const
{
    return (m_bound_seq == x.m_bound_seq);
}

bool eprosima::fastdds::dds::xtypes::CommonArrayHeader::operator !=(
        const CommonArrayHeader& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member bound_seq
 * @param _bound_seq New value to be copied in member bound_seq
 */
void eprosima::fastdds::dds::xtypes::CommonArrayHeader::bound_seq(
        const eprosima::fastdds::dds::xtypes::LBoundSeq& _bound_seq)
{
    m_bound_seq = _bound_seq;
}

/*!
 * @brief This function moves the value in member bound_seq
 * @param _bound_seq New value to be moved in member bound_seq
 */
void eprosima::fastdds::dds::xtypes::CommonArrayHeader::bound_seq(
        eprosima::fastdds::dds::xtypes::LBoundSeq&& _bound_seq)
{
    m_bound_seq = std::move(_bound_seq);
}

/*!
 * @brief This function returns a constant reference to member bound_seq
 * @return Constant reference to member bound_seq
 */
const eprosima::fastdds::dds::xtypes::LBoundSeq& eprosima::fastdds::dds::xtypes::CommonArrayHeader::bound_seq() const
{
    return m_bound_seq;
}

/*!
 * @brief This function returns a reference to member bound_seq
 * @return Reference to member bound_seq
 */
eprosima::fastdds::dds::xtypes::LBoundSeq& eprosima::fastdds::dds::xtypes::CommonArrayHeader::bound_seq()
{
    return m_bound_seq;
}


eprosima::fastdds::dds::xtypes::CompleteArrayHeader::CompleteArrayHeader()
{

}

eprosima::fastdds::dds::xtypes::CompleteArrayHeader::~CompleteArrayHeader()
{
}

eprosima::fastdds::dds::xtypes::CompleteArrayHeader::CompleteArrayHeader(
        const CompleteArrayHeader& x)
{
    m_common = x.m_common;
    m_detail = x.m_detail;
}

eprosima::fastdds::dds::xtypes::CompleteArrayHeader::CompleteArrayHeader(
        CompleteArrayHeader&& x) noexcept
{
    m_common = std::move(x.m_common);
    m_detail = std::move(x.m_detail);
}

eprosima::fastdds::dds::xtypes::CompleteArrayHeader& eprosima::fastdds::dds::xtypes::CompleteArrayHeader::operator =(
        const CompleteArrayHeader& x)
{

    m_common = x.m_common;
    m_detail = x.m_detail;
    return *this;
}

eprosima::fastdds::dds::xtypes::CompleteArrayHeader& eprosima::fastdds::dds::xtypes::CompleteArrayHeader::operator =(
        CompleteArrayHeader&& x) noexcept
{

    m_common = std::move(x.m_common);
    m_detail = std::move(x.m_detail);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CompleteArrayHeader::operator ==(
        const CompleteArrayHeader& x) const
{
    return (m_common == x.m_common &&
           m_detail == x.m_detail);
}

bool eprosima::fastdds::dds::xtypes::CompleteArrayHeader::operator !=(
        const CompleteArrayHeader& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member common
 * @param _common New value to be copied in member common
 */
void eprosima::fastdds::dds::xtypes::CompleteArrayHeader::common(
        const eprosima::fastdds::dds::xtypes::CommonArrayHeader& _common)
{
    m_common = _common;
}

/*!
 * @brief This function moves the value in member common
 * @param _common New value to be moved in member common
 */
void eprosima::fastdds::dds::xtypes::CompleteArrayHeader::common(
        eprosima::fastdds::dds::xtypes::CommonArrayHeader&& _common)
{
    m_common = std::move(_common);
}

/*!
 * @brief This function returns a constant reference to member common
 * @return Constant reference to member common
 */
const eprosima::fastdds::dds::xtypes::CommonArrayHeader& eprosima::fastdds::dds::xtypes::CompleteArrayHeader::common() const
{
    return m_common;
}

/*!
 * @brief This function returns a reference to member common
 * @return Reference to member common
 */
eprosima::fastdds::dds::xtypes::CommonArrayHeader& eprosima::fastdds::dds::xtypes::CompleteArrayHeader::common()
{
    return m_common;
}


/*!
 * @brief This function copies the value in member detail
 * @param _detail New value to be copied in member detail
 */
void eprosima::fastdds::dds::xtypes::CompleteArrayHeader::detail(
        const eprosima::fastdds::dds::xtypes::CompleteTypeDetail& _detail)
{
    m_detail = _detail;
}

/*!
 * @brief This function moves the value in member detail
 * @param _detail New value to be moved in member detail
 */
void eprosima::fastdds::dds::xtypes::CompleteArrayHeader::detail(
        eprosima::fastdds::dds::xtypes::CompleteTypeDetail&& _detail)
{
    m_detail = std::move(_detail);
}

/*!
 * @brief This function returns a constant reference to member detail
 * @return Constant reference to member detail
 */
const eprosima::fastdds::dds::xtypes::CompleteTypeDetail& eprosima::fastdds::dds::xtypes::CompleteArrayHeader::detail() const
{
    return m_detail;
}

/*!
 * @brief This function returns a reference to member detail
 * @return Reference to member detail
 */
eprosima::fastdds::dds::xtypes::CompleteTypeDetail& eprosima::fastdds::dds::xtypes::CompleteArrayHeader::detail()
{
    return m_detail;
}


eprosima::fastdds::dds::xtypes::MinimalArrayHeader::MinimalArrayHeader()
{

}

eprosima::fastdds::dds::xtypes::MinimalArrayHeader::~MinimalArrayHeader()
{
}

eprosima::fastdds::dds::xtypes::MinimalArrayHeader::MinimalArrayHeader(
        const MinimalArrayHeader& x)
{
    m_common = x.m_common;
}

eprosima::fastdds::dds::xtypes::MinimalArrayHeader::MinimalArrayHeader(
        MinimalArrayHeader&& x) noexcept
{
    m_common = std::move(x.m_common);
}

eprosima::fastdds::dds::xtypes::MinimalArrayHeader& eprosima::fastdds::dds::xtypes::MinimalArrayHeader::operator =(
        const MinimalArrayHeader& x)
{

    m_common = x.m_common;
    return *this;
}

eprosima::fastdds::dds::xtypes::MinimalArrayHeader& eprosima::fastdds::dds::xtypes::MinimalArrayHeader::operator =(
        MinimalArrayHeader&& x) noexcept
{

    m_common = std::move(x.m_common);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::MinimalArrayHeader::operator ==(
        const MinimalArrayHeader& x) const
{
    return (m_common == x.m_common);
}

bool eprosima::fastdds::dds::xtypes::MinimalArrayHeader::operator !=(
        const MinimalArrayHeader& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member common
 * @param _common New value to be copied in member common
 */
void eprosima::fastdds::dds::xtypes::MinimalArrayHeader::common(
        const eprosima::fastdds::dds::xtypes::CommonArrayHeader& _common)
{
    m_common = _common;
}

/*!
 * @brief This function moves the value in member common
 * @param _common New value to be moved in member common
 */
void eprosima::fastdds::dds::xtypes::MinimalArrayHeader::common(
        eprosima::fastdds::dds::xtypes::CommonArrayHeader&& _common)
{
    m_common = std::move(_common);
}

/*!
 * @brief This function returns a constant reference to member common
 * @return Constant reference to member common
 */
const eprosima::fastdds::dds::xtypes::CommonArrayHeader& eprosima::fastdds::dds::xtypes::MinimalArrayHeader::common() const
{
    return m_common;
}

/*!
 * @brief This function returns a reference to member common
 * @return Reference to member common
 */
eprosima::fastdds::dds::xtypes::CommonArrayHeader& eprosima::fastdds::dds::xtypes::MinimalArrayHeader::common()
{
    return m_common;
}


eprosima::fastdds::dds::xtypes::CompleteArrayType::CompleteArrayType()
{

}

eprosima::fastdds::dds::xtypes::CompleteArrayType::~CompleteArrayType()
{
}

eprosima::fastdds::dds::xtypes::CompleteArrayType::CompleteArrayType(
        const CompleteArrayType& x)
{
    m_collection_flag = x.m_collection_flag;
    m_header = x.m_header;
    m_element = x.m_element;
}

eprosima::fastdds::dds::xtypes::CompleteArrayType::CompleteArrayType(
        CompleteArrayType&& x) noexcept
{
    m_collection_flag = std::move(x.m_collection_flag);
    m_header = std::move(x.m_header);
    m_element = std::move(x.m_element);
}

eprosima::fastdds::dds::xtypes::CompleteArrayType& eprosima::fastdds::dds::xtypes::CompleteArrayType::operator =(
        const CompleteArrayType& x)
{

    m_collection_flag = x.m_collection_flag;
    m_header = x.m_header;
    m_element = x.m_element;
    return *this;
}

eprosima::fastdds::dds::xtypes::CompleteArrayType& eprosima::fastdds::dds::xtypes::CompleteArrayType::operator =(
        CompleteArrayType&& x) noexcept
{

    m_collection_flag = std::move(x.m_collection_flag);
    m_header = std::move(x.m_header);
    m_element = std::move(x.m_element);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CompleteArrayType::operator ==(
        const CompleteArrayType& x) const
{
    return (m_collection_flag == x.m_collection_flag &&
           m_header == x.m_header &&
           m_element == x.m_element);
}

bool eprosima::fastdds::dds::xtypes::CompleteArrayType::operator !=(
        const CompleteArrayType& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member collection_flag
 * @param _collection_flag New value to be copied in member collection_flag
 */
void eprosima::fastdds::dds::xtypes::CompleteArrayType::collection_flag(
        const eprosima::fastdds::dds::xtypes::CollectionTypeFlag& _collection_flag)
{
    m_collection_flag = _collection_flag;
}

/*!
 * @brief This function moves the value in member collection_flag
 * @param _collection_flag New value to be moved in member collection_flag
 */
void eprosima::fastdds::dds::xtypes::CompleteArrayType::collection_flag(
        eprosima::fastdds::dds::xtypes::CollectionTypeFlag&& _collection_flag)
{
    m_collection_flag = std::move(_collection_flag);
}

/*!
 * @brief This function returns a constant reference to member collection_flag
 * @return Constant reference to member collection_flag
 */
const eprosima::fastdds::dds::xtypes::CollectionTypeFlag& eprosima::fastdds::dds::xtypes::CompleteArrayType::collection_flag() const
{
    return m_collection_flag;
}

/*!
 * @brief This function returns a reference to member collection_flag
 * @return Reference to member collection_flag
 */
eprosima::fastdds::dds::xtypes::CollectionTypeFlag& eprosima::fastdds::dds::xtypes::CompleteArrayType::collection_flag()
{
    return m_collection_flag;
}


/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void eprosima::fastdds::dds::xtypes::CompleteArrayType::header(
        const eprosima::fastdds::dds::xtypes::CompleteArrayHeader& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void eprosima::fastdds::dds::xtypes::CompleteArrayType::header(
        eprosima::fastdds::dds::xtypes::CompleteArrayHeader&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const eprosima::fastdds::dds::xtypes::CompleteArrayHeader& eprosima::fastdds::dds::xtypes::CompleteArrayType::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
eprosima::fastdds::dds::xtypes::CompleteArrayHeader& eprosima::fastdds::dds::xtypes::CompleteArrayType::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member element
 * @param _element New value to be copied in member element
 */
void eprosima::fastdds::dds::xtypes::CompleteArrayType::element(
        const eprosima::fastdds::dds::xtypes::CompleteCollectionElement& _element)
{
    m_element = _element;
}

/*!
 * @brief This function moves the value in member element
 * @param _element New value to be moved in member element
 */
void eprosima::fastdds::dds::xtypes::CompleteArrayType::element(
        eprosima::fastdds::dds::xtypes::CompleteCollectionElement&& _element)
{
    m_element = std::move(_element);
}

/*!
 * @brief This function returns a constant reference to member element
 * @return Constant reference to member element
 */
const eprosima::fastdds::dds::xtypes::CompleteCollectionElement& eprosima::fastdds::dds::xtypes::CompleteArrayType::element() const
{
    return m_element;
}

/*!
 * @brief This function returns a reference to member element
 * @return Reference to member element
 */
eprosima::fastdds::dds::xtypes::CompleteCollectionElement& eprosima::fastdds::dds::xtypes::CompleteArrayType::element()
{
    return m_element;
}


eprosima::fastdds::dds::xtypes::MinimalArrayType::MinimalArrayType()
{

}

eprosima::fastdds::dds::xtypes::MinimalArrayType::~MinimalArrayType()
{
}

eprosima::fastdds::dds::xtypes::MinimalArrayType::MinimalArrayType(
        const MinimalArrayType& x)
{
    m_collection_flag = x.m_collection_flag;
    m_header = x.m_header;
    m_element = x.m_element;
}

eprosima::fastdds::dds::xtypes::MinimalArrayType::MinimalArrayType(
        MinimalArrayType&& x) noexcept
{
    m_collection_flag = std::move(x.m_collection_flag);
    m_header = std::move(x.m_header);
    m_element = std::move(x.m_element);
}

eprosima::fastdds::dds::xtypes::MinimalArrayType& eprosima::fastdds::dds::xtypes::MinimalArrayType::operator =(
        const MinimalArrayType& x)
{

    m_collection_flag = x.m_collection_flag;
    m_header = x.m_header;
    m_element = x.m_element;
    return *this;
}

eprosima::fastdds::dds::xtypes::MinimalArrayType& eprosima::fastdds::dds::xtypes::MinimalArrayType::operator =(
        MinimalArrayType&& x) noexcept
{

    m_collection_flag = std::move(x.m_collection_flag);
    m_header = std::move(x.m_header);
    m_element = std::move(x.m_element);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::MinimalArrayType::operator ==(
        const MinimalArrayType& x) const
{
    return (m_collection_flag == x.m_collection_flag &&
           m_header == x.m_header &&
           m_element == x.m_element);
}

bool eprosima::fastdds::dds::xtypes::MinimalArrayType::operator !=(
        const MinimalArrayType& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member collection_flag
 * @param _collection_flag New value to be copied in member collection_flag
 */
void eprosima::fastdds::dds::xtypes::MinimalArrayType::collection_flag(
        const eprosima::fastdds::dds::xtypes::CollectionTypeFlag& _collection_flag)
{
    m_collection_flag = _collection_flag;
}

/*!
 * @brief This function moves the value in member collection_flag
 * @param _collection_flag New value to be moved in member collection_flag
 */
void eprosima::fastdds::dds::xtypes::MinimalArrayType::collection_flag(
        eprosima::fastdds::dds::xtypes::CollectionTypeFlag&& _collection_flag)
{
    m_collection_flag = std::move(_collection_flag);
}

/*!
 * @brief This function returns a constant reference to member collection_flag
 * @return Constant reference to member collection_flag
 */
const eprosima::fastdds::dds::xtypes::CollectionTypeFlag& eprosima::fastdds::dds::xtypes::MinimalArrayType::collection_flag() const
{
    return m_collection_flag;
}

/*!
 * @brief This function returns a reference to member collection_flag
 * @return Reference to member collection_flag
 */
eprosima::fastdds::dds::xtypes::CollectionTypeFlag& eprosima::fastdds::dds::xtypes::MinimalArrayType::collection_flag()
{
    return m_collection_flag;
}


/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void eprosima::fastdds::dds::xtypes::MinimalArrayType::header(
        const eprosima::fastdds::dds::xtypes::MinimalArrayHeader& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void eprosima::fastdds::dds::xtypes::MinimalArrayType::header(
        eprosima::fastdds::dds::xtypes::MinimalArrayHeader&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const eprosima::fastdds::dds::xtypes::MinimalArrayHeader& eprosima::fastdds::dds::xtypes::MinimalArrayType::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
eprosima::fastdds::dds::xtypes::MinimalArrayHeader& eprosima::fastdds::dds::xtypes::MinimalArrayType::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member element
 * @param _element New value to be copied in member element
 */
void eprosima::fastdds::dds::xtypes::MinimalArrayType::element(
        const eprosima::fastdds::dds::xtypes::MinimalCollectionElement& _element)
{
    m_element = _element;
}

/*!
 * @brief This function moves the value in member element
 * @param _element New value to be moved in member element
 */
void eprosima::fastdds::dds::xtypes::MinimalArrayType::element(
        eprosima::fastdds::dds::xtypes::MinimalCollectionElement&& _element)
{
    m_element = std::move(_element);
}

/*!
 * @brief This function returns a constant reference to member element
 * @return Constant reference to member element
 */
const eprosima::fastdds::dds::xtypes::MinimalCollectionElement& eprosima::fastdds::dds::xtypes::MinimalArrayType::element() const
{
    return m_element;
}

/*!
 * @brief This function returns a reference to member element
 * @return Reference to member element
 */
eprosima::fastdds::dds::xtypes::MinimalCollectionElement& eprosima::fastdds::dds::xtypes::MinimalArrayType::element()
{
    return m_element;
}


eprosima::fastdds::dds::xtypes::CompleteMapType::CompleteMapType()
{

}

eprosima::fastdds::dds::xtypes::CompleteMapType::~CompleteMapType()
{
}

eprosima::fastdds::dds::xtypes::CompleteMapType::CompleteMapType(
        const CompleteMapType& x)
{
    m_collection_flag = x.m_collection_flag;
    m_header = x.m_header;
    m_key = x.m_key;
    m_element = x.m_element;
}

eprosima::fastdds::dds::xtypes::CompleteMapType::CompleteMapType(
        CompleteMapType&& x) noexcept
{
    m_collection_flag = std::move(x.m_collection_flag);
    m_header = std::move(x.m_header);
    m_key = std::move(x.m_key);
    m_element = std::move(x.m_element);
}

eprosima::fastdds::dds::xtypes::CompleteMapType& eprosima::fastdds::dds::xtypes::CompleteMapType::operator =(
        const CompleteMapType& x)
{

    m_collection_flag = x.m_collection_flag;
    m_header = x.m_header;
    m_key = x.m_key;
    m_element = x.m_element;
    return *this;
}

eprosima::fastdds::dds::xtypes::CompleteMapType& eprosima::fastdds::dds::xtypes::CompleteMapType::operator =(
        CompleteMapType&& x) noexcept
{

    m_collection_flag = std::move(x.m_collection_flag);
    m_header = std::move(x.m_header);
    m_key = std::move(x.m_key);
    m_element = std::move(x.m_element);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CompleteMapType::operator ==(
        const CompleteMapType& x) const
{
    return (m_collection_flag == x.m_collection_flag &&
           m_header == x.m_header &&
           m_key == x.m_key &&
           m_element == x.m_element);
}

bool eprosima::fastdds::dds::xtypes::CompleteMapType::operator !=(
        const CompleteMapType& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member collection_flag
 * @param _collection_flag New value to be copied in member collection_flag
 */
void eprosima::fastdds::dds::xtypes::CompleteMapType::collection_flag(
        const eprosima::fastdds::dds::xtypes::CollectionTypeFlag& _collection_flag)
{
    m_collection_flag = _collection_flag;
}

/*!
 * @brief This function moves the value in member collection_flag
 * @param _collection_flag New value to be moved in member collection_flag
 */
void eprosima::fastdds::dds::xtypes::CompleteMapType::collection_flag(
        eprosima::fastdds::dds::xtypes::CollectionTypeFlag&& _collection_flag)
{
    m_collection_flag = std::move(_collection_flag);
}

/*!
 * @brief This function returns a constant reference to member collection_flag
 * @return Constant reference to member collection_flag
 */
const eprosima::fastdds::dds::xtypes::CollectionTypeFlag& eprosima::fastdds::dds::xtypes::CompleteMapType::collection_flag() const
{
    return m_collection_flag;
}

/*!
 * @brief This function returns a reference to member collection_flag
 * @return Reference to member collection_flag
 */
eprosima::fastdds::dds::xtypes::CollectionTypeFlag& eprosima::fastdds::dds::xtypes::CompleteMapType::collection_flag()
{
    return m_collection_flag;
}


/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void eprosima::fastdds::dds::xtypes::CompleteMapType::header(
        const eprosima::fastdds::dds::xtypes::CompleteCollectionHeader& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void eprosima::fastdds::dds::xtypes::CompleteMapType::header(
        eprosima::fastdds::dds::xtypes::CompleteCollectionHeader&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const eprosima::fastdds::dds::xtypes::CompleteCollectionHeader& eprosima::fastdds::dds::xtypes::CompleteMapType::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
eprosima::fastdds::dds::xtypes::CompleteCollectionHeader& eprosima::fastdds::dds::xtypes::CompleteMapType::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member key
 * @param _key New value to be copied in member key
 */
void eprosima::fastdds::dds::xtypes::CompleteMapType::key(
        const eprosima::fastdds::dds::xtypes::CompleteCollectionElement& _key)
{
    m_key = _key;
}

/*!
 * @brief This function moves the value in member key
 * @param _key New value to be moved in member key
 */
void eprosima::fastdds::dds::xtypes::CompleteMapType::key(
        eprosima::fastdds::dds::xtypes::CompleteCollectionElement&& _key)
{
    m_key = std::move(_key);
}

/*!
 * @brief This function returns a constant reference to member key
 * @return Constant reference to member key
 */
const eprosima::fastdds::dds::xtypes::CompleteCollectionElement& eprosima::fastdds::dds::xtypes::CompleteMapType::key() const
{
    return m_key;
}

/*!
 * @brief This function returns a reference to member key
 * @return Reference to member key
 */
eprosima::fastdds::dds::xtypes::CompleteCollectionElement& eprosima::fastdds::dds::xtypes::CompleteMapType::key()
{
    return m_key;
}


/*!
 * @brief This function copies the value in member element
 * @param _element New value to be copied in member element
 */
void eprosima::fastdds::dds::xtypes::CompleteMapType::element(
        const eprosima::fastdds::dds::xtypes::CompleteCollectionElement& _element)
{
    m_element = _element;
}

/*!
 * @brief This function moves the value in member element
 * @param _element New value to be moved in member element
 */
void eprosima::fastdds::dds::xtypes::CompleteMapType::element(
        eprosima::fastdds::dds::xtypes::CompleteCollectionElement&& _element)
{
    m_element = std::move(_element);
}

/*!
 * @brief This function returns a constant reference to member element
 * @return Constant reference to member element
 */
const eprosima::fastdds::dds::xtypes::CompleteCollectionElement& eprosima::fastdds::dds::xtypes::CompleteMapType::element() const
{
    return m_element;
}

/*!
 * @brief This function returns a reference to member element
 * @return Reference to member element
 */
eprosima::fastdds::dds::xtypes::CompleteCollectionElement& eprosima::fastdds::dds::xtypes::CompleteMapType::element()
{
    return m_element;
}


eprosima::fastdds::dds::xtypes::MinimalMapType::MinimalMapType()
{

}

eprosima::fastdds::dds::xtypes::MinimalMapType::~MinimalMapType()
{
}

eprosima::fastdds::dds::xtypes::MinimalMapType::MinimalMapType(
        const MinimalMapType& x)
{
    m_collection_flag = x.m_collection_flag;
    m_header = x.m_header;
    m_key = x.m_key;
    m_element = x.m_element;
}

eprosima::fastdds::dds::xtypes::MinimalMapType::MinimalMapType(
        MinimalMapType&& x) noexcept
{
    m_collection_flag = std::move(x.m_collection_flag);
    m_header = std::move(x.m_header);
    m_key = std::move(x.m_key);
    m_element = std::move(x.m_element);
}

eprosima::fastdds::dds::xtypes::MinimalMapType& eprosima::fastdds::dds::xtypes::MinimalMapType::operator =(
        const MinimalMapType& x)
{

    m_collection_flag = x.m_collection_flag;
    m_header = x.m_header;
    m_key = x.m_key;
    m_element = x.m_element;
    return *this;
}

eprosima::fastdds::dds::xtypes::MinimalMapType& eprosima::fastdds::dds::xtypes::MinimalMapType::operator =(
        MinimalMapType&& x) noexcept
{

    m_collection_flag = std::move(x.m_collection_flag);
    m_header = std::move(x.m_header);
    m_key = std::move(x.m_key);
    m_element = std::move(x.m_element);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::MinimalMapType::operator ==(
        const MinimalMapType& x) const
{
    return (m_collection_flag == x.m_collection_flag &&
           m_header == x.m_header &&
           m_key == x.m_key &&
           m_element == x.m_element);
}

bool eprosima::fastdds::dds::xtypes::MinimalMapType::operator !=(
        const MinimalMapType& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member collection_flag
 * @param _collection_flag New value to be copied in member collection_flag
 */
void eprosima::fastdds::dds::xtypes::MinimalMapType::collection_flag(
        const eprosima::fastdds::dds::xtypes::CollectionTypeFlag& _collection_flag)
{
    m_collection_flag = _collection_flag;
}

/*!
 * @brief This function moves the value in member collection_flag
 * @param _collection_flag New value to be moved in member collection_flag
 */
void eprosima::fastdds::dds::xtypes::MinimalMapType::collection_flag(
        eprosima::fastdds::dds::xtypes::CollectionTypeFlag&& _collection_flag)
{
    m_collection_flag = std::move(_collection_flag);
}

/*!
 * @brief This function returns a constant reference to member collection_flag
 * @return Constant reference to member collection_flag
 */
const eprosima::fastdds::dds::xtypes::CollectionTypeFlag& eprosima::fastdds::dds::xtypes::MinimalMapType::collection_flag() const
{
    return m_collection_flag;
}

/*!
 * @brief This function returns a reference to member collection_flag
 * @return Reference to member collection_flag
 */
eprosima::fastdds::dds::xtypes::CollectionTypeFlag& eprosima::fastdds::dds::xtypes::MinimalMapType::collection_flag()
{
    return m_collection_flag;
}


/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void eprosima::fastdds::dds::xtypes::MinimalMapType::header(
        const eprosima::fastdds::dds::xtypes::MinimalCollectionHeader& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void eprosima::fastdds::dds::xtypes::MinimalMapType::header(
        eprosima::fastdds::dds::xtypes::MinimalCollectionHeader&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const eprosima::fastdds::dds::xtypes::MinimalCollectionHeader& eprosima::fastdds::dds::xtypes::MinimalMapType::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
eprosima::fastdds::dds::xtypes::MinimalCollectionHeader& eprosima::fastdds::dds::xtypes::MinimalMapType::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member key
 * @param _key New value to be copied in member key
 */
void eprosima::fastdds::dds::xtypes::MinimalMapType::key(
        const eprosima::fastdds::dds::xtypes::MinimalCollectionElement& _key)
{
    m_key = _key;
}

/*!
 * @brief This function moves the value in member key
 * @param _key New value to be moved in member key
 */
void eprosima::fastdds::dds::xtypes::MinimalMapType::key(
        eprosima::fastdds::dds::xtypes::MinimalCollectionElement&& _key)
{
    m_key = std::move(_key);
}

/*!
 * @brief This function returns a constant reference to member key
 * @return Constant reference to member key
 */
const eprosima::fastdds::dds::xtypes::MinimalCollectionElement& eprosima::fastdds::dds::xtypes::MinimalMapType::key() const
{
    return m_key;
}

/*!
 * @brief This function returns a reference to member key
 * @return Reference to member key
 */
eprosima::fastdds::dds::xtypes::MinimalCollectionElement& eprosima::fastdds::dds::xtypes::MinimalMapType::key()
{
    return m_key;
}


/*!
 * @brief This function copies the value in member element
 * @param _element New value to be copied in member element
 */
void eprosima::fastdds::dds::xtypes::MinimalMapType::element(
        const eprosima::fastdds::dds::xtypes::MinimalCollectionElement& _element)
{
    m_element = _element;
}

/*!
 * @brief This function moves the value in member element
 * @param _element New value to be moved in member element
 */
void eprosima::fastdds::dds::xtypes::MinimalMapType::element(
        eprosima::fastdds::dds::xtypes::MinimalCollectionElement&& _element)
{
    m_element = std::move(_element);
}

/*!
 * @brief This function returns a constant reference to member element
 * @return Constant reference to member element
 */
const eprosima::fastdds::dds::xtypes::MinimalCollectionElement& eprosima::fastdds::dds::xtypes::MinimalMapType::element() const
{
    return m_element;
}

/*!
 * @brief This function returns a reference to member element
 * @return Reference to member element
 */
eprosima::fastdds::dds::xtypes::MinimalCollectionElement& eprosima::fastdds::dds::xtypes::MinimalMapType::element()
{
    return m_element;
}



eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral::CommonEnumeratedLiteral()
{

}

eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral::~CommonEnumeratedLiteral()
{
}

eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral::CommonEnumeratedLiteral(
        const CommonEnumeratedLiteral& x)
{
    m_value = x.m_value;
    m_flags = x.m_flags;
}

eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral::CommonEnumeratedLiteral(
        CommonEnumeratedLiteral&& x) noexcept
{
    m_value = x.m_value;
    m_flags = std::move(x.m_flags);
}

eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral& eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral::operator =(
        const CommonEnumeratedLiteral& x)
{

    m_value = x.m_value;
    m_flags = x.m_flags;
    return *this;
}

eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral& eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral::operator =(
        CommonEnumeratedLiteral&& x) noexcept
{

    m_value = x.m_value;
    m_flags = std::move(x.m_flags);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral::operator ==(
        const CommonEnumeratedLiteral& x) const
{
    return (m_value == x.m_value &&
           m_flags == x.m_flags);
}

bool eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral::operator !=(
        const CommonEnumeratedLiteral& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member value
 * @param _value New value for member value
 */
void eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral::value(
        int32_t _value)
{
    m_value = _value;
}

/*!
 * @brief This function returns the value of member value
 * @return Value of member value
 */
int32_t eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral::value() const
{
    return m_value;
}

/*!
 * @brief This function returns a reference to member value
 * @return Reference to member value
 */
int32_t& eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral::value()
{
    return m_value;
}


/*!
 * @brief This function copies the value in member flags
 * @param _flags New value to be copied in member flags
 */
void eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral::flags(
        const eprosima::fastdds::dds::xtypes::EnumeratedLiteralFlag& _flags)
{
    m_flags = _flags;
}

/*!
 * @brief This function moves the value in member flags
 * @param _flags New value to be moved in member flags
 */
void eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral::flags(
        eprosima::fastdds::dds::xtypes::EnumeratedLiteralFlag&& _flags)
{
    m_flags = std::move(_flags);
}

/*!
 * @brief This function returns a constant reference to member flags
 * @return Constant reference to member flags
 */
const eprosima::fastdds::dds::xtypes::EnumeratedLiteralFlag& eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral::flags() const
{
    return m_flags;
}

/*!
 * @brief This function returns a reference to member flags
 * @return Reference to member flags
 */
eprosima::fastdds::dds::xtypes::EnumeratedLiteralFlag& eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral::flags()
{
    return m_flags;
}


eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteral::CompleteEnumeratedLiteral()
{

}

eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteral::~CompleteEnumeratedLiteral()
{
}

eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteral::CompleteEnumeratedLiteral(
        const CompleteEnumeratedLiteral& x)
{
    m_common = x.m_common;
    m_detail = x.m_detail;
}

eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteral::CompleteEnumeratedLiteral(
        CompleteEnumeratedLiteral&& x) noexcept
{
    m_common = std::move(x.m_common);
    m_detail = std::move(x.m_detail);
}

eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteral& eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteral::operator =(
        const CompleteEnumeratedLiteral& x)
{

    m_common = x.m_common;
    m_detail = x.m_detail;
    return *this;
}

eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteral& eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteral::operator =(
        CompleteEnumeratedLiteral&& x) noexcept
{

    m_common = std::move(x.m_common);
    m_detail = std::move(x.m_detail);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteral::operator ==(
        const CompleteEnumeratedLiteral& x) const
{
    return (m_common == x.m_common &&
           m_detail == x.m_detail);
}

bool eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteral::operator !=(
        const CompleteEnumeratedLiteral& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member common
 * @param _common New value to be copied in member common
 */
void eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteral::common(
        const eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral& _common)
{
    m_common = _common;
}

/*!
 * @brief This function moves the value in member common
 * @param _common New value to be moved in member common
 */
void eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteral::common(
        eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral&& _common)
{
    m_common = std::move(_common);
}

/*!
 * @brief This function returns a constant reference to member common
 * @return Constant reference to member common
 */
const eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral& eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteral::common() const
{
    return m_common;
}

/*!
 * @brief This function returns a reference to member common
 * @return Reference to member common
 */
eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral& eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteral::common()
{
    return m_common;
}


/*!
 * @brief This function copies the value in member detail
 * @param _detail New value to be copied in member detail
 */
void eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteral::detail(
        const eprosima::fastdds::dds::xtypes::CompleteMemberDetail& _detail)
{
    m_detail = _detail;
}

/*!
 * @brief This function moves the value in member detail
 * @param _detail New value to be moved in member detail
 */
void eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteral::detail(
        eprosima::fastdds::dds::xtypes::CompleteMemberDetail&& _detail)
{
    m_detail = std::move(_detail);
}

/*!
 * @brief This function returns a constant reference to member detail
 * @return Constant reference to member detail
 */
const eprosima::fastdds::dds::xtypes::CompleteMemberDetail& eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteral::detail() const
{
    return m_detail;
}

/*!
 * @brief This function returns a reference to member detail
 * @return Reference to member detail
 */
eprosima::fastdds::dds::xtypes::CompleteMemberDetail& eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteral::detail()
{
    return m_detail;
}



eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteral::MinimalEnumeratedLiteral()
{

}

eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteral::~MinimalEnumeratedLiteral()
{
}

eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteral::MinimalEnumeratedLiteral(
        const MinimalEnumeratedLiteral& x)
{
    m_common = x.m_common;
    m_detail = x.m_detail;
}

eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteral::MinimalEnumeratedLiteral(
        MinimalEnumeratedLiteral&& x) noexcept
{
    m_common = std::move(x.m_common);
    m_detail = std::move(x.m_detail);
}

eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteral& eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteral::operator =(
        const MinimalEnumeratedLiteral& x)
{

    m_common = x.m_common;
    m_detail = x.m_detail;
    return *this;
}

eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteral& eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteral::operator =(
        MinimalEnumeratedLiteral&& x) noexcept
{

    m_common = std::move(x.m_common);
    m_detail = std::move(x.m_detail);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteral::operator ==(
        const MinimalEnumeratedLiteral& x) const
{
    return (m_common == x.m_common &&
           m_detail == x.m_detail);
}

bool eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteral::operator !=(
        const MinimalEnumeratedLiteral& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member common
 * @param _common New value to be copied in member common
 */
void eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteral::common(
        const eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral& _common)
{
    m_common = _common;
}

/*!
 * @brief This function moves the value in member common
 * @param _common New value to be moved in member common
 */
void eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteral::common(
        eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral&& _common)
{
    m_common = std::move(_common);
}

/*!
 * @brief This function returns a constant reference to member common
 * @return Constant reference to member common
 */
const eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral& eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteral::common() const
{
    return m_common;
}

/*!
 * @brief This function returns a reference to member common
 * @return Reference to member common
 */
eprosima::fastdds::dds::xtypes::CommonEnumeratedLiteral& eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteral::common()
{
    return m_common;
}


/*!
 * @brief This function copies the value in member detail
 * @param _detail New value to be copied in member detail
 */
void eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteral::detail(
        const eprosima::fastdds::dds::xtypes::MinimalMemberDetail& _detail)
{
    m_detail = _detail;
}

/*!
 * @brief This function moves the value in member detail
 * @param _detail New value to be moved in member detail
 */
void eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteral::detail(
        eprosima::fastdds::dds::xtypes::MinimalMemberDetail&& _detail)
{
    m_detail = std::move(_detail);
}

/*!
 * @brief This function returns a constant reference to member detail
 * @return Constant reference to member detail
 */
const eprosima::fastdds::dds::xtypes::MinimalMemberDetail& eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteral::detail() const
{
    return m_detail;
}

/*!
 * @brief This function returns a reference to member detail
 * @return Reference to member detail
 */
eprosima::fastdds::dds::xtypes::MinimalMemberDetail& eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteral::detail()
{
    return m_detail;
}



eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader::CommonEnumeratedHeader()
{

}

eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader::~CommonEnumeratedHeader()
{
}

eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader::CommonEnumeratedHeader(
        const CommonEnumeratedHeader& x)
{
    m_bit_bound = x.m_bit_bound;
}

eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader::CommonEnumeratedHeader(
        CommonEnumeratedHeader&& x) noexcept
{
    m_bit_bound = x.m_bit_bound;
}

eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader& eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader::operator =(
        const CommonEnumeratedHeader& x)
{

    m_bit_bound = x.m_bit_bound;
    return *this;
}

eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader& eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader::operator =(
        CommonEnumeratedHeader&& x) noexcept
{

    m_bit_bound = x.m_bit_bound;
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader::operator ==(
        const CommonEnumeratedHeader& x) const
{
    return (m_bit_bound == x.m_bit_bound);
}

bool eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader::operator !=(
        const CommonEnumeratedHeader& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member bit_bound
 * @param _bit_bound New value for member bit_bound
 */
void eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader::bit_bound(
        eprosima::fastdds::dds::xtypes::BitBound _bit_bound)
{
    m_bit_bound = _bit_bound;
}

/*!
 * @brief This function returns the value of member bit_bound
 * @return Value of member bit_bound
 */
eprosima::fastdds::dds::xtypes::BitBound eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader::bit_bound() const
{
    return m_bit_bound;
}

/*!
 * @brief This function returns a reference to member bit_bound
 * @return Reference to member bit_bound
 */
eprosima::fastdds::dds::xtypes::BitBound& eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader::bit_bound()
{
    return m_bit_bound;
}


eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader::CompleteEnumeratedHeader()
{

}

eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader::~CompleteEnumeratedHeader()
{
}

eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader::CompleteEnumeratedHeader(
        const CompleteEnumeratedHeader& x)
{
    m_common = x.m_common;
    m_detail = x.m_detail;
}

eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader::CompleteEnumeratedHeader(
        CompleteEnumeratedHeader&& x) noexcept
{
    m_common = std::move(x.m_common);
    m_detail = std::move(x.m_detail);
}

eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader& eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader::operator =(
        const CompleteEnumeratedHeader& x)
{

    m_common = x.m_common;
    m_detail = x.m_detail;
    return *this;
}

eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader& eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader::operator =(
        CompleteEnumeratedHeader&& x) noexcept
{

    m_common = std::move(x.m_common);
    m_detail = std::move(x.m_detail);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader::operator ==(
        const CompleteEnumeratedHeader& x) const
{
    return (m_common == x.m_common &&
           m_detail == x.m_detail);
}

bool eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader::operator !=(
        const CompleteEnumeratedHeader& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member common
 * @param _common New value to be copied in member common
 */
void eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader::common(
        const eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader& _common)
{
    m_common = _common;
}

/*!
 * @brief This function moves the value in member common
 * @param _common New value to be moved in member common
 */
void eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader::common(
        eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader&& _common)
{
    m_common = std::move(_common);
}

/*!
 * @brief This function returns a constant reference to member common
 * @return Constant reference to member common
 */
const eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader& eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader::common() const
{
    return m_common;
}

/*!
 * @brief This function returns a reference to member common
 * @return Reference to member common
 */
eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader& eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader::common()
{
    return m_common;
}


/*!
 * @brief This function copies the value in member detail
 * @param _detail New value to be copied in member detail
 */
void eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader::detail(
        const eprosima::fastdds::dds::xtypes::CompleteTypeDetail& _detail)
{
    m_detail = _detail;
}

/*!
 * @brief This function moves the value in member detail
 * @param _detail New value to be moved in member detail
 */
void eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader::detail(
        eprosima::fastdds::dds::xtypes::CompleteTypeDetail&& _detail)
{
    m_detail = std::move(_detail);
}

/*!
 * @brief This function returns a constant reference to member detail
 * @return Constant reference to member detail
 */
const eprosima::fastdds::dds::xtypes::CompleteTypeDetail& eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader::detail() const
{
    return m_detail;
}

/*!
 * @brief This function returns a reference to member detail
 * @return Reference to member detail
 */
eprosima::fastdds::dds::xtypes::CompleteTypeDetail& eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader::detail()
{
    return m_detail;
}


eprosima::fastdds::dds::xtypes::MinimalEnumeratedHeader::MinimalEnumeratedHeader()
{

}

eprosima::fastdds::dds::xtypes::MinimalEnumeratedHeader::~MinimalEnumeratedHeader()
{
}

eprosima::fastdds::dds::xtypes::MinimalEnumeratedHeader::MinimalEnumeratedHeader(
        const MinimalEnumeratedHeader& x)
{
    m_common = x.m_common;
}

eprosima::fastdds::dds::xtypes::MinimalEnumeratedHeader::MinimalEnumeratedHeader(
        MinimalEnumeratedHeader&& x) noexcept
{
    m_common = std::move(x.m_common);
}

eprosima::fastdds::dds::xtypes::MinimalEnumeratedHeader& eprosima::fastdds::dds::xtypes::MinimalEnumeratedHeader::operator =(
        const MinimalEnumeratedHeader& x)
{

    m_common = x.m_common;
    return *this;
}

eprosima::fastdds::dds::xtypes::MinimalEnumeratedHeader& eprosima::fastdds::dds::xtypes::MinimalEnumeratedHeader::operator =(
        MinimalEnumeratedHeader&& x) noexcept
{

    m_common = std::move(x.m_common);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::MinimalEnumeratedHeader::operator ==(
        const MinimalEnumeratedHeader& x) const
{
    return (m_common == x.m_common);
}

bool eprosima::fastdds::dds::xtypes::MinimalEnumeratedHeader::operator !=(
        const MinimalEnumeratedHeader& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member common
 * @param _common New value to be copied in member common
 */
void eprosima::fastdds::dds::xtypes::MinimalEnumeratedHeader::common(
        const eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader& _common)
{
    m_common = _common;
}

/*!
 * @brief This function moves the value in member common
 * @param _common New value to be moved in member common
 */
void eprosima::fastdds::dds::xtypes::MinimalEnumeratedHeader::common(
        eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader&& _common)
{
    m_common = std::move(_common);
}

/*!
 * @brief This function returns a constant reference to member common
 * @return Constant reference to member common
 */
const eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader& eprosima::fastdds::dds::xtypes::MinimalEnumeratedHeader::common() const
{
    return m_common;
}

/*!
 * @brief This function returns a reference to member common
 * @return Reference to member common
 */
eprosima::fastdds::dds::xtypes::CommonEnumeratedHeader& eprosima::fastdds::dds::xtypes::MinimalEnumeratedHeader::common()
{
    return m_common;
}


eprosima::fastdds::dds::xtypes::CompleteEnumeratedType::CompleteEnumeratedType()
{

}

eprosima::fastdds::dds::xtypes::CompleteEnumeratedType::~CompleteEnumeratedType()
{
}

eprosima::fastdds::dds::xtypes::CompleteEnumeratedType::CompleteEnumeratedType(
        const CompleteEnumeratedType& x)
{
    m_enum_flags = x.m_enum_flags;
    m_header = x.m_header;
    m_literal_seq = x.m_literal_seq;
}

eprosima::fastdds::dds::xtypes::CompleteEnumeratedType::CompleteEnumeratedType(
        CompleteEnumeratedType&& x) noexcept
{
    m_enum_flags = std::move(x.m_enum_flags);
    m_header = std::move(x.m_header);
    m_literal_seq = std::move(x.m_literal_seq);
}

eprosima::fastdds::dds::xtypes::CompleteEnumeratedType& eprosima::fastdds::dds::xtypes::CompleteEnumeratedType::operator =(
        const CompleteEnumeratedType& x)
{

    m_enum_flags = x.m_enum_flags;
    m_header = x.m_header;
    m_literal_seq = x.m_literal_seq;
    return *this;
}

eprosima::fastdds::dds::xtypes::CompleteEnumeratedType& eprosima::fastdds::dds::xtypes::CompleteEnumeratedType::operator =(
        CompleteEnumeratedType&& x) noexcept
{

    m_enum_flags = std::move(x.m_enum_flags);
    m_header = std::move(x.m_header);
    m_literal_seq = std::move(x.m_literal_seq);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CompleteEnumeratedType::operator ==(
        const CompleteEnumeratedType& x) const
{
    return (m_enum_flags == x.m_enum_flags &&
           m_header == x.m_header &&
           m_literal_seq == x.m_literal_seq);
}

bool eprosima::fastdds::dds::xtypes::CompleteEnumeratedType::operator !=(
        const CompleteEnumeratedType& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member enum_flags
 * @param _enum_flags New value to be copied in member enum_flags
 */
void eprosima::fastdds::dds::xtypes::CompleteEnumeratedType::enum_flags(
        const eprosima::fastdds::dds::xtypes::EnumTypeFlag& _enum_flags)
{
    m_enum_flags = _enum_flags;
}

/*!
 * @brief This function moves the value in member enum_flags
 * @param _enum_flags New value to be moved in member enum_flags
 */
void eprosima::fastdds::dds::xtypes::CompleteEnumeratedType::enum_flags(
        eprosima::fastdds::dds::xtypes::EnumTypeFlag&& _enum_flags)
{
    m_enum_flags = std::move(_enum_flags);
}

/*!
 * @brief This function returns a constant reference to member enum_flags
 * @return Constant reference to member enum_flags
 */
const eprosima::fastdds::dds::xtypes::EnumTypeFlag& eprosima::fastdds::dds::xtypes::CompleteEnumeratedType::enum_flags() const
{
    return m_enum_flags;
}

/*!
 * @brief This function returns a reference to member enum_flags
 * @return Reference to member enum_flags
 */
eprosima::fastdds::dds::xtypes::EnumTypeFlag& eprosima::fastdds::dds::xtypes::CompleteEnumeratedType::enum_flags()
{
    return m_enum_flags;
}


/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void eprosima::fastdds::dds::xtypes::CompleteEnumeratedType::header(
        const eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void eprosima::fastdds::dds::xtypes::CompleteEnumeratedType::header(
        eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader& eprosima::fastdds::dds::xtypes::CompleteEnumeratedType::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
eprosima::fastdds::dds::xtypes::CompleteEnumeratedHeader& eprosima::fastdds::dds::xtypes::CompleteEnumeratedType::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member literal_seq
 * @param _literal_seq New value to be copied in member literal_seq
 */
void eprosima::fastdds::dds::xtypes::CompleteEnumeratedType::literal_seq(
        const eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteralSeq& _literal_seq)
{
    m_literal_seq = _literal_seq;
}

/*!
 * @brief This function moves the value in member literal_seq
 * @param _literal_seq New value to be moved in member literal_seq
 */
void eprosima::fastdds::dds::xtypes::CompleteEnumeratedType::literal_seq(
        eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteralSeq&& _literal_seq)
{
    m_literal_seq = std::move(_literal_seq);
}

/*!
 * @brief This function returns a constant reference to member literal_seq
 * @return Constant reference to member literal_seq
 */
const eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteralSeq& eprosima::fastdds::dds::xtypes::CompleteEnumeratedType::literal_seq() const
{
    return m_literal_seq;
}

/*!
 * @brief This function returns a reference to member literal_seq
 * @return Reference to member literal_seq
 */
eprosima::fastdds::dds::xtypes::CompleteEnumeratedLiteralSeq& eprosima::fastdds::dds::xtypes::CompleteEnumeratedType::literal_seq()
{
    return m_literal_seq;
}


eprosima::fastdds::dds::xtypes::MinimalEnumeratedType::MinimalEnumeratedType()
{

}

eprosima::fastdds::dds::xtypes::MinimalEnumeratedType::~MinimalEnumeratedType()
{
}

eprosima::fastdds::dds::xtypes::MinimalEnumeratedType::MinimalEnumeratedType(
        const MinimalEnumeratedType& x)
{
    m_enum_flags = x.m_enum_flags;
    m_header = x.m_header;
    m_literal_seq = x.m_literal_seq;
}

eprosima::fastdds::dds::xtypes::MinimalEnumeratedType::MinimalEnumeratedType(
        MinimalEnumeratedType&& x) noexcept
{
    m_enum_flags = std::move(x.m_enum_flags);
    m_header = std::move(x.m_header);
    m_literal_seq = std::move(x.m_literal_seq);
}

eprosima::fastdds::dds::xtypes::MinimalEnumeratedType& eprosima::fastdds::dds::xtypes::MinimalEnumeratedType::operator =(
        const MinimalEnumeratedType& x)
{

    m_enum_flags = x.m_enum_flags;
    m_header = x.m_header;
    m_literal_seq = x.m_literal_seq;
    return *this;
}

eprosima::fastdds::dds::xtypes::MinimalEnumeratedType& eprosima::fastdds::dds::xtypes::MinimalEnumeratedType::operator =(
        MinimalEnumeratedType&& x) noexcept
{

    m_enum_flags = std::move(x.m_enum_flags);
    m_header = std::move(x.m_header);
    m_literal_seq = std::move(x.m_literal_seq);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::MinimalEnumeratedType::operator ==(
        const MinimalEnumeratedType& x) const
{
    return (m_enum_flags == x.m_enum_flags &&
           m_header == x.m_header &&
           m_literal_seq == x.m_literal_seq);
}

bool eprosima::fastdds::dds::xtypes::MinimalEnumeratedType::operator !=(
        const MinimalEnumeratedType& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member enum_flags
 * @param _enum_flags New value to be copied in member enum_flags
 */
void eprosima::fastdds::dds::xtypes::MinimalEnumeratedType::enum_flags(
        const eprosima::fastdds::dds::xtypes::EnumTypeFlag& _enum_flags)
{
    m_enum_flags = _enum_flags;
}

/*!
 * @brief This function moves the value in member enum_flags
 * @param _enum_flags New value to be moved in member enum_flags
 */
void eprosima::fastdds::dds::xtypes::MinimalEnumeratedType::enum_flags(
        eprosima::fastdds::dds::xtypes::EnumTypeFlag&& _enum_flags)
{
    m_enum_flags = std::move(_enum_flags);
}

/*!
 * @brief This function returns a constant reference to member enum_flags
 * @return Constant reference to member enum_flags
 */
const eprosima::fastdds::dds::xtypes::EnumTypeFlag& eprosima::fastdds::dds::xtypes::MinimalEnumeratedType::enum_flags() const
{
    return m_enum_flags;
}

/*!
 * @brief This function returns a reference to member enum_flags
 * @return Reference to member enum_flags
 */
eprosima::fastdds::dds::xtypes::EnumTypeFlag& eprosima::fastdds::dds::xtypes::MinimalEnumeratedType::enum_flags()
{
    return m_enum_flags;
}


/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void eprosima::fastdds::dds::xtypes::MinimalEnumeratedType::header(
        const eprosima::fastdds::dds::xtypes::MinimalEnumeratedHeader& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void eprosima::fastdds::dds::xtypes::MinimalEnumeratedType::header(
        eprosima::fastdds::dds::xtypes::MinimalEnumeratedHeader&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const eprosima::fastdds::dds::xtypes::MinimalEnumeratedHeader& eprosima::fastdds::dds::xtypes::MinimalEnumeratedType::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
eprosima::fastdds::dds::xtypes::MinimalEnumeratedHeader& eprosima::fastdds::dds::xtypes::MinimalEnumeratedType::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member literal_seq
 * @param _literal_seq New value to be copied in member literal_seq
 */
void eprosima::fastdds::dds::xtypes::MinimalEnumeratedType::literal_seq(
        const eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteralSeq& _literal_seq)
{
    m_literal_seq = _literal_seq;
}

/*!
 * @brief This function moves the value in member literal_seq
 * @param _literal_seq New value to be moved in member literal_seq
 */
void eprosima::fastdds::dds::xtypes::MinimalEnumeratedType::literal_seq(
        eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteralSeq&& _literal_seq)
{
    m_literal_seq = std::move(_literal_seq);
}

/*!
 * @brief This function returns a constant reference to member literal_seq
 * @return Constant reference to member literal_seq
 */
const eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteralSeq& eprosima::fastdds::dds::xtypes::MinimalEnumeratedType::literal_seq() const
{
    return m_literal_seq;
}

/*!
 * @brief This function returns a reference to member literal_seq
 * @return Reference to member literal_seq
 */
eprosima::fastdds::dds::xtypes::MinimalEnumeratedLiteralSeq& eprosima::fastdds::dds::xtypes::MinimalEnumeratedType::literal_seq()
{
    return m_literal_seq;
}


eprosima::fastdds::dds::xtypes::CommonBitflag::CommonBitflag()
{

}

eprosima::fastdds::dds::xtypes::CommonBitflag::~CommonBitflag()
{
}

eprosima::fastdds::dds::xtypes::CommonBitflag::CommonBitflag(
        const CommonBitflag& x)
{
    m_position = x.m_position;
    m_flags = x.m_flags;
}

eprosima::fastdds::dds::xtypes::CommonBitflag::CommonBitflag(
        CommonBitflag&& x) noexcept
{
    m_position = x.m_position;
    m_flags = std::move(x.m_flags);
}

eprosima::fastdds::dds::xtypes::CommonBitflag& eprosima::fastdds::dds::xtypes::CommonBitflag::operator =(
        const CommonBitflag& x)
{

    m_position = x.m_position;
    m_flags = x.m_flags;
    return *this;
}

eprosima::fastdds::dds::xtypes::CommonBitflag& eprosima::fastdds::dds::xtypes::CommonBitflag::operator =(
        CommonBitflag&& x) noexcept
{

    m_position = x.m_position;
    m_flags = std::move(x.m_flags);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CommonBitflag::operator ==(
        const CommonBitflag& x) const
{
    return (m_position == x.m_position &&
           m_flags == x.m_flags);
}

bool eprosima::fastdds::dds::xtypes::CommonBitflag::operator !=(
        const CommonBitflag& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member position
 * @param _position New value for member position
 */
void eprosima::fastdds::dds::xtypes::CommonBitflag::position(
        uint16_t _position)
{
    m_position = _position;
}

/*!
 * @brief This function returns the value of member position
 * @return Value of member position
 */
uint16_t eprosima::fastdds::dds::xtypes::CommonBitflag::position() const
{
    return m_position;
}

/*!
 * @brief This function returns a reference to member position
 * @return Reference to member position
 */
uint16_t& eprosima::fastdds::dds::xtypes::CommonBitflag::position()
{
    return m_position;
}


/*!
 * @brief This function copies the value in member flags
 * @param _flags New value to be copied in member flags
 */
void eprosima::fastdds::dds::xtypes::CommonBitflag::flags(
        const eprosima::fastdds::dds::xtypes::BitflagFlag& _flags)
{
    m_flags = _flags;
}

/*!
 * @brief This function moves the value in member flags
 * @param _flags New value to be moved in member flags
 */
void eprosima::fastdds::dds::xtypes::CommonBitflag::flags(
        eprosima::fastdds::dds::xtypes::BitflagFlag&& _flags)
{
    m_flags = std::move(_flags);
}

/*!
 * @brief This function returns a constant reference to member flags
 * @return Constant reference to member flags
 */
const eprosima::fastdds::dds::xtypes::BitflagFlag& eprosima::fastdds::dds::xtypes::CommonBitflag::flags() const
{
    return m_flags;
}

/*!
 * @brief This function returns a reference to member flags
 * @return Reference to member flags
 */
eprosima::fastdds::dds::xtypes::BitflagFlag& eprosima::fastdds::dds::xtypes::CommonBitflag::flags()
{
    return m_flags;
}


eprosima::fastdds::dds::xtypes::CompleteBitflag::CompleteBitflag()
{

}

eprosima::fastdds::dds::xtypes::CompleteBitflag::~CompleteBitflag()
{
}

eprosima::fastdds::dds::xtypes::CompleteBitflag::CompleteBitflag(
        const CompleteBitflag& x)
{
    m_common = x.m_common;
    m_detail = x.m_detail;
}

eprosima::fastdds::dds::xtypes::CompleteBitflag::CompleteBitflag(
        CompleteBitflag&& x) noexcept
{
    m_common = std::move(x.m_common);
    m_detail = std::move(x.m_detail);
}

eprosima::fastdds::dds::xtypes::CompleteBitflag& eprosima::fastdds::dds::xtypes::CompleteBitflag::operator =(
        const CompleteBitflag& x)
{

    m_common = x.m_common;
    m_detail = x.m_detail;
    return *this;
}

eprosima::fastdds::dds::xtypes::CompleteBitflag& eprosima::fastdds::dds::xtypes::CompleteBitflag::operator =(
        CompleteBitflag&& x) noexcept
{

    m_common = std::move(x.m_common);
    m_detail = std::move(x.m_detail);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CompleteBitflag::operator ==(
        const CompleteBitflag& x) const
{
    return (m_common == x.m_common &&
           m_detail == x.m_detail);
}

bool eprosima::fastdds::dds::xtypes::CompleteBitflag::operator !=(
        const CompleteBitflag& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member common
 * @param _common New value to be copied in member common
 */
void eprosima::fastdds::dds::xtypes::CompleteBitflag::common(
        const eprosima::fastdds::dds::xtypes::CommonBitflag& _common)
{
    m_common = _common;
}

/*!
 * @brief This function moves the value in member common
 * @param _common New value to be moved in member common
 */
void eprosima::fastdds::dds::xtypes::CompleteBitflag::common(
        eprosima::fastdds::dds::xtypes::CommonBitflag&& _common)
{
    m_common = std::move(_common);
}

/*!
 * @brief This function returns a constant reference to member common
 * @return Constant reference to member common
 */
const eprosima::fastdds::dds::xtypes::CommonBitflag& eprosima::fastdds::dds::xtypes::CompleteBitflag::common() const
{
    return m_common;
}

/*!
 * @brief This function returns a reference to member common
 * @return Reference to member common
 */
eprosima::fastdds::dds::xtypes::CommonBitflag& eprosima::fastdds::dds::xtypes::CompleteBitflag::common()
{
    return m_common;
}


/*!
 * @brief This function copies the value in member detail
 * @param _detail New value to be copied in member detail
 */
void eprosima::fastdds::dds::xtypes::CompleteBitflag::detail(
        const eprosima::fastdds::dds::xtypes::CompleteMemberDetail& _detail)
{
    m_detail = _detail;
}

/*!
 * @brief This function moves the value in member detail
 * @param _detail New value to be moved in member detail
 */
void eprosima::fastdds::dds::xtypes::CompleteBitflag::detail(
        eprosima::fastdds::dds::xtypes::CompleteMemberDetail&& _detail)
{
    m_detail = std::move(_detail);
}

/*!
 * @brief This function returns a constant reference to member detail
 * @return Constant reference to member detail
 */
const eprosima::fastdds::dds::xtypes::CompleteMemberDetail& eprosima::fastdds::dds::xtypes::CompleteBitflag::detail() const
{
    return m_detail;
}

/*!
 * @brief This function returns a reference to member detail
 * @return Reference to member detail
 */
eprosima::fastdds::dds::xtypes::CompleteMemberDetail& eprosima::fastdds::dds::xtypes::CompleteBitflag::detail()
{
    return m_detail;
}



eprosima::fastdds::dds::xtypes::MinimalBitflag::MinimalBitflag()
{

}

eprosima::fastdds::dds::xtypes::MinimalBitflag::~MinimalBitflag()
{
}

eprosima::fastdds::dds::xtypes::MinimalBitflag::MinimalBitflag(
        const MinimalBitflag& x)
{
    m_common = x.m_common;
    m_detail = x.m_detail;
}

eprosima::fastdds::dds::xtypes::MinimalBitflag::MinimalBitflag(
        MinimalBitflag&& x) noexcept
{
    m_common = std::move(x.m_common);
    m_detail = std::move(x.m_detail);
}

eprosima::fastdds::dds::xtypes::MinimalBitflag& eprosima::fastdds::dds::xtypes::MinimalBitflag::operator =(
        const MinimalBitflag& x)
{

    m_common = x.m_common;
    m_detail = x.m_detail;
    return *this;
}

eprosima::fastdds::dds::xtypes::MinimalBitflag& eprosima::fastdds::dds::xtypes::MinimalBitflag::operator =(
        MinimalBitflag&& x) noexcept
{

    m_common = std::move(x.m_common);
    m_detail = std::move(x.m_detail);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::MinimalBitflag::operator ==(
        const MinimalBitflag& x) const
{
    return (m_common == x.m_common &&
           m_detail == x.m_detail);
}

bool eprosima::fastdds::dds::xtypes::MinimalBitflag::operator !=(
        const MinimalBitflag& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member common
 * @param _common New value to be copied in member common
 */
void eprosima::fastdds::dds::xtypes::MinimalBitflag::common(
        const eprosima::fastdds::dds::xtypes::CommonBitflag& _common)
{
    m_common = _common;
}

/*!
 * @brief This function moves the value in member common
 * @param _common New value to be moved in member common
 */
void eprosima::fastdds::dds::xtypes::MinimalBitflag::common(
        eprosima::fastdds::dds::xtypes::CommonBitflag&& _common)
{
    m_common = std::move(_common);
}

/*!
 * @brief This function returns a constant reference to member common
 * @return Constant reference to member common
 */
const eprosima::fastdds::dds::xtypes::CommonBitflag& eprosima::fastdds::dds::xtypes::MinimalBitflag::common() const
{
    return m_common;
}

/*!
 * @brief This function returns a reference to member common
 * @return Reference to member common
 */
eprosima::fastdds::dds::xtypes::CommonBitflag& eprosima::fastdds::dds::xtypes::MinimalBitflag::common()
{
    return m_common;
}


/*!
 * @brief This function copies the value in member detail
 * @param _detail New value to be copied in member detail
 */
void eprosima::fastdds::dds::xtypes::MinimalBitflag::detail(
        const eprosima::fastdds::dds::xtypes::MinimalMemberDetail& _detail)
{
    m_detail = _detail;
}

/*!
 * @brief This function moves the value in member detail
 * @param _detail New value to be moved in member detail
 */
void eprosima::fastdds::dds::xtypes::MinimalBitflag::detail(
        eprosima::fastdds::dds::xtypes::MinimalMemberDetail&& _detail)
{
    m_detail = std::move(_detail);
}

/*!
 * @brief This function returns a constant reference to member detail
 * @return Constant reference to member detail
 */
const eprosima::fastdds::dds::xtypes::MinimalMemberDetail& eprosima::fastdds::dds::xtypes::MinimalBitflag::detail() const
{
    return m_detail;
}

/*!
 * @brief This function returns a reference to member detail
 * @return Reference to member detail
 */
eprosima::fastdds::dds::xtypes::MinimalMemberDetail& eprosima::fastdds::dds::xtypes::MinimalBitflag::detail()
{
    return m_detail;
}



eprosima::fastdds::dds::xtypes::CommonBitmaskHeader::CommonBitmaskHeader()
{

}

eprosima::fastdds::dds::xtypes::CommonBitmaskHeader::~CommonBitmaskHeader()
{
}

eprosima::fastdds::dds::xtypes::CommonBitmaskHeader::CommonBitmaskHeader(
        const CommonBitmaskHeader& x)
{
    m_bit_bound = x.m_bit_bound;
}

eprosima::fastdds::dds::xtypes::CommonBitmaskHeader::CommonBitmaskHeader(
        CommonBitmaskHeader&& x) noexcept
{
    m_bit_bound = x.m_bit_bound;
}

eprosima::fastdds::dds::xtypes::CommonBitmaskHeader& eprosima::fastdds::dds::xtypes::CommonBitmaskHeader::operator =(
        const CommonBitmaskHeader& x)
{

    m_bit_bound = x.m_bit_bound;
    return *this;
}

eprosima::fastdds::dds::xtypes::CommonBitmaskHeader& eprosima::fastdds::dds::xtypes::CommonBitmaskHeader::operator =(
        CommonBitmaskHeader&& x) noexcept
{

    m_bit_bound = x.m_bit_bound;
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CommonBitmaskHeader::operator ==(
        const CommonBitmaskHeader& x) const
{
    return (m_bit_bound == x.m_bit_bound);
}

bool eprosima::fastdds::dds::xtypes::CommonBitmaskHeader::operator !=(
        const CommonBitmaskHeader& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member bit_bound
 * @param _bit_bound New value for member bit_bound
 */
void eprosima::fastdds::dds::xtypes::CommonBitmaskHeader::bit_bound(
        eprosima::fastdds::dds::xtypes::BitBound _bit_bound)
{
    m_bit_bound = _bit_bound;
}

/*!
 * @brief This function returns the value of member bit_bound
 * @return Value of member bit_bound
 */
eprosima::fastdds::dds::xtypes::BitBound eprosima::fastdds::dds::xtypes::CommonBitmaskHeader::bit_bound() const
{
    return m_bit_bound;
}

/*!
 * @brief This function returns a reference to member bit_bound
 * @return Reference to member bit_bound
 */
eprosima::fastdds::dds::xtypes::BitBound& eprosima::fastdds::dds::xtypes::CommonBitmaskHeader::bit_bound()
{
    return m_bit_bound;
}




eprosima::fastdds::dds::xtypes::CompleteBitmaskType::CompleteBitmaskType()
{

}

eprosima::fastdds::dds::xtypes::CompleteBitmaskType::~CompleteBitmaskType()
{
}

eprosima::fastdds::dds::xtypes::CompleteBitmaskType::CompleteBitmaskType(
        const CompleteBitmaskType& x)
{
    m_bitmask_flags = x.m_bitmask_flags;
    m_header = x.m_header;
    m_flag_seq = x.m_flag_seq;
}

eprosima::fastdds::dds::xtypes::CompleteBitmaskType::CompleteBitmaskType(
        CompleteBitmaskType&& x) noexcept
{
    m_bitmask_flags = std::move(x.m_bitmask_flags);
    m_header = std::move(x.m_header);
    m_flag_seq = std::move(x.m_flag_seq);
}

eprosima::fastdds::dds::xtypes::CompleteBitmaskType& eprosima::fastdds::dds::xtypes::CompleteBitmaskType::operator =(
        const CompleteBitmaskType& x)
{

    m_bitmask_flags = x.m_bitmask_flags;
    m_header = x.m_header;
    m_flag_seq = x.m_flag_seq;
    return *this;
}

eprosima::fastdds::dds::xtypes::CompleteBitmaskType& eprosima::fastdds::dds::xtypes::CompleteBitmaskType::operator =(
        CompleteBitmaskType&& x) noexcept
{

    m_bitmask_flags = std::move(x.m_bitmask_flags);
    m_header = std::move(x.m_header);
    m_flag_seq = std::move(x.m_flag_seq);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CompleteBitmaskType::operator ==(
        const CompleteBitmaskType& x) const
{
    return (m_bitmask_flags == x.m_bitmask_flags &&
           m_header == x.m_header &&
           m_flag_seq == x.m_flag_seq);
}

bool eprosima::fastdds::dds::xtypes::CompleteBitmaskType::operator !=(
        const CompleteBitmaskType& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member bitmask_flags
 * @param _bitmask_flags New value to be copied in member bitmask_flags
 */
void eprosima::fastdds::dds::xtypes::CompleteBitmaskType::bitmask_flags(
        const eprosima::fastdds::dds::xtypes::BitmaskTypeFlag& _bitmask_flags)
{
    m_bitmask_flags = _bitmask_flags;
}

/*!
 * @brief This function moves the value in member bitmask_flags
 * @param _bitmask_flags New value to be moved in member bitmask_flags
 */
void eprosima::fastdds::dds::xtypes::CompleteBitmaskType::bitmask_flags(
        eprosima::fastdds::dds::xtypes::BitmaskTypeFlag&& _bitmask_flags)
{
    m_bitmask_flags = std::move(_bitmask_flags);
}

/*!
 * @brief This function returns a constant reference to member bitmask_flags
 * @return Constant reference to member bitmask_flags
 */
const eprosima::fastdds::dds::xtypes::BitmaskTypeFlag& eprosima::fastdds::dds::xtypes::CompleteBitmaskType::bitmask_flags() const
{
    return m_bitmask_flags;
}

/*!
 * @brief This function returns a reference to member bitmask_flags
 * @return Reference to member bitmask_flags
 */
eprosima::fastdds::dds::xtypes::BitmaskTypeFlag& eprosima::fastdds::dds::xtypes::CompleteBitmaskType::bitmask_flags()
{
    return m_bitmask_flags;
}


/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void eprosima::fastdds::dds::xtypes::CompleteBitmaskType::header(
        const eprosima::fastdds::dds::xtypes::CompleteBitmaskHeader& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void eprosima::fastdds::dds::xtypes::CompleteBitmaskType::header(
        eprosima::fastdds::dds::xtypes::CompleteBitmaskHeader&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const eprosima::fastdds::dds::xtypes::CompleteBitmaskHeader& eprosima::fastdds::dds::xtypes::CompleteBitmaskType::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
eprosima::fastdds::dds::xtypes::CompleteBitmaskHeader& eprosima::fastdds::dds::xtypes::CompleteBitmaskType::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member flag_seq
 * @param _flag_seq New value to be copied in member flag_seq
 */
void eprosima::fastdds::dds::xtypes::CompleteBitmaskType::flag_seq(
        const eprosima::fastdds::dds::xtypes::CompleteBitflagSeq& _flag_seq)
{
    m_flag_seq = _flag_seq;
}

/*!
 * @brief This function moves the value in member flag_seq
 * @param _flag_seq New value to be moved in member flag_seq
 */
void eprosima::fastdds::dds::xtypes::CompleteBitmaskType::flag_seq(
        eprosima::fastdds::dds::xtypes::CompleteBitflagSeq&& _flag_seq)
{
    m_flag_seq = std::move(_flag_seq);
}

/*!
 * @brief This function returns a constant reference to member flag_seq
 * @return Constant reference to member flag_seq
 */
const eprosima::fastdds::dds::xtypes::CompleteBitflagSeq& eprosima::fastdds::dds::xtypes::CompleteBitmaskType::flag_seq() const
{
    return m_flag_seq;
}

/*!
 * @brief This function returns a reference to member flag_seq
 * @return Reference to member flag_seq
 */
eprosima::fastdds::dds::xtypes::CompleteBitflagSeq& eprosima::fastdds::dds::xtypes::CompleteBitmaskType::flag_seq()
{
    return m_flag_seq;
}


eprosima::fastdds::dds::xtypes::MinimalBitmaskType::MinimalBitmaskType()
{

}

eprosima::fastdds::dds::xtypes::MinimalBitmaskType::~MinimalBitmaskType()
{
}

eprosima::fastdds::dds::xtypes::MinimalBitmaskType::MinimalBitmaskType(
        const MinimalBitmaskType& x)
{
    m_bitmask_flags = x.m_bitmask_flags;
    m_header = x.m_header;
    m_flag_seq = x.m_flag_seq;
}

eprosima::fastdds::dds::xtypes::MinimalBitmaskType::MinimalBitmaskType(
        MinimalBitmaskType&& x) noexcept
{
    m_bitmask_flags = std::move(x.m_bitmask_flags);
    m_header = std::move(x.m_header);
    m_flag_seq = std::move(x.m_flag_seq);
}

eprosima::fastdds::dds::xtypes::MinimalBitmaskType& eprosima::fastdds::dds::xtypes::MinimalBitmaskType::operator =(
        const MinimalBitmaskType& x)
{

    m_bitmask_flags = x.m_bitmask_flags;
    m_header = x.m_header;
    m_flag_seq = x.m_flag_seq;
    return *this;
}

eprosima::fastdds::dds::xtypes::MinimalBitmaskType& eprosima::fastdds::dds::xtypes::MinimalBitmaskType::operator =(
        MinimalBitmaskType&& x) noexcept
{

    m_bitmask_flags = std::move(x.m_bitmask_flags);
    m_header = std::move(x.m_header);
    m_flag_seq = std::move(x.m_flag_seq);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::MinimalBitmaskType::operator ==(
        const MinimalBitmaskType& x) const
{
    return (m_bitmask_flags == x.m_bitmask_flags &&
           m_header == x.m_header &&
           m_flag_seq == x.m_flag_seq);
}

bool eprosima::fastdds::dds::xtypes::MinimalBitmaskType::operator !=(
        const MinimalBitmaskType& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member bitmask_flags
 * @param _bitmask_flags New value to be copied in member bitmask_flags
 */
void eprosima::fastdds::dds::xtypes::MinimalBitmaskType::bitmask_flags(
        const eprosima::fastdds::dds::xtypes::BitmaskTypeFlag& _bitmask_flags)
{
    m_bitmask_flags = _bitmask_flags;
}

/*!
 * @brief This function moves the value in member bitmask_flags
 * @param _bitmask_flags New value to be moved in member bitmask_flags
 */
void eprosima::fastdds::dds::xtypes::MinimalBitmaskType::bitmask_flags(
        eprosima::fastdds::dds::xtypes::BitmaskTypeFlag&& _bitmask_flags)
{
    m_bitmask_flags = std::move(_bitmask_flags);
}

/*!
 * @brief This function returns a constant reference to member bitmask_flags
 * @return Constant reference to member bitmask_flags
 */
const eprosima::fastdds::dds::xtypes::BitmaskTypeFlag& eprosima::fastdds::dds::xtypes::MinimalBitmaskType::bitmask_flags() const
{
    return m_bitmask_flags;
}

/*!
 * @brief This function returns a reference to member bitmask_flags
 * @return Reference to member bitmask_flags
 */
eprosima::fastdds::dds::xtypes::BitmaskTypeFlag& eprosima::fastdds::dds::xtypes::MinimalBitmaskType::bitmask_flags()
{
    return m_bitmask_flags;
}


/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void eprosima::fastdds::dds::xtypes::MinimalBitmaskType::header(
        const eprosima::fastdds::dds::xtypes::MinimalBitmaskHeader& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void eprosima::fastdds::dds::xtypes::MinimalBitmaskType::header(
        eprosima::fastdds::dds::xtypes::MinimalBitmaskHeader&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const eprosima::fastdds::dds::xtypes::MinimalBitmaskHeader& eprosima::fastdds::dds::xtypes::MinimalBitmaskType::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
eprosima::fastdds::dds::xtypes::MinimalBitmaskHeader& eprosima::fastdds::dds::xtypes::MinimalBitmaskType::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member flag_seq
 * @param _flag_seq New value to be copied in member flag_seq
 */
void eprosima::fastdds::dds::xtypes::MinimalBitmaskType::flag_seq(
        const eprosima::fastdds::dds::xtypes::MinimalBitflagSeq& _flag_seq)
{
    m_flag_seq = _flag_seq;
}

/*!
 * @brief This function moves the value in member flag_seq
 * @param _flag_seq New value to be moved in member flag_seq
 */
void eprosima::fastdds::dds::xtypes::MinimalBitmaskType::flag_seq(
        eprosima::fastdds::dds::xtypes::MinimalBitflagSeq&& _flag_seq)
{
    m_flag_seq = std::move(_flag_seq);
}

/*!
 * @brief This function returns a constant reference to member flag_seq
 * @return Constant reference to member flag_seq
 */
const eprosima::fastdds::dds::xtypes::MinimalBitflagSeq& eprosima::fastdds::dds::xtypes::MinimalBitmaskType::flag_seq() const
{
    return m_flag_seq;
}

/*!
 * @brief This function returns a reference to member flag_seq
 * @return Reference to member flag_seq
 */
eprosima::fastdds::dds::xtypes::MinimalBitflagSeq& eprosima::fastdds::dds::xtypes::MinimalBitmaskType::flag_seq()
{
    return m_flag_seq;
}


eprosima::fastdds::dds::xtypes::CommonBitfield::CommonBitfield()
{

}

eprosima::fastdds::dds::xtypes::CommonBitfield::~CommonBitfield()
{
}

eprosima::fastdds::dds::xtypes::CommonBitfield::CommonBitfield(
        const CommonBitfield& x)
{
    m_position = x.m_position;
    m_flags = x.m_flags;
    m_bitcount = x.m_bitcount;
    m_holder_type = x.m_holder_type;
}

eprosima::fastdds::dds::xtypes::CommonBitfield::CommonBitfield(
        CommonBitfield&& x) noexcept
{
    m_position = x.m_position;
    m_flags = std::move(x.m_flags);
    m_bitcount = x.m_bitcount;
    m_holder_type = x.m_holder_type;
}

eprosima::fastdds::dds::xtypes::CommonBitfield& eprosima::fastdds::dds::xtypes::CommonBitfield::operator =(
        const CommonBitfield& x)
{

    m_position = x.m_position;
    m_flags = x.m_flags;
    m_bitcount = x.m_bitcount;
    m_holder_type = x.m_holder_type;
    return *this;
}

eprosima::fastdds::dds::xtypes::CommonBitfield& eprosima::fastdds::dds::xtypes::CommonBitfield::operator =(
        CommonBitfield&& x) noexcept
{

    m_position = x.m_position;
    m_flags = std::move(x.m_flags);
    m_bitcount = x.m_bitcount;
    m_holder_type = x.m_holder_type;
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CommonBitfield::operator ==(
        const CommonBitfield& x) const
{
    return (m_position == x.m_position &&
           m_flags == x.m_flags &&
           m_bitcount == x.m_bitcount &&
           m_holder_type == x.m_holder_type);
}

bool eprosima::fastdds::dds::xtypes::CommonBitfield::operator !=(
        const CommonBitfield& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member position
 * @param _position New value for member position
 */
void eprosima::fastdds::dds::xtypes::CommonBitfield::position(
        uint16_t _position)
{
    m_position = _position;
}

/*!
 * @brief This function returns the value of member position
 * @return Value of member position
 */
uint16_t eprosima::fastdds::dds::xtypes::CommonBitfield::position() const
{
    return m_position;
}

/*!
 * @brief This function returns a reference to member position
 * @return Reference to member position
 */
uint16_t& eprosima::fastdds::dds::xtypes::CommonBitfield::position()
{
    return m_position;
}


/*!
 * @brief This function copies the value in member flags
 * @param _flags New value to be copied in member flags
 */
void eprosima::fastdds::dds::xtypes::CommonBitfield::flags(
        const eprosima::fastdds::dds::xtypes::BitsetMemberFlag& _flags)
{
    m_flags = _flags;
}

/*!
 * @brief This function moves the value in member flags
 * @param _flags New value to be moved in member flags
 */
void eprosima::fastdds::dds::xtypes::CommonBitfield::flags(
        eprosima::fastdds::dds::xtypes::BitsetMemberFlag&& _flags)
{
    m_flags = std::move(_flags);
}

/*!
 * @brief This function returns a constant reference to member flags
 * @return Constant reference to member flags
 */
const eprosima::fastdds::dds::xtypes::BitsetMemberFlag& eprosima::fastdds::dds::xtypes::CommonBitfield::flags() const
{
    return m_flags;
}

/*!
 * @brief This function returns a reference to member flags
 * @return Reference to member flags
 */
eprosima::fastdds::dds::xtypes::BitsetMemberFlag& eprosima::fastdds::dds::xtypes::CommonBitfield::flags()
{
    return m_flags;
}


/*!
 * @brief This function sets a value in member bitcount
 * @param _bitcount New value for member bitcount
 */
void eprosima::fastdds::dds::xtypes::CommonBitfield::bitcount(
        uint8_t _bitcount)
{
    m_bitcount = _bitcount;
}

/*!
 * @brief This function returns the value of member bitcount
 * @return Value of member bitcount
 */
uint8_t eprosima::fastdds::dds::xtypes::CommonBitfield::bitcount() const
{
    return m_bitcount;
}

/*!
 * @brief This function returns a reference to member bitcount
 * @return Reference to member bitcount
 */
uint8_t& eprosima::fastdds::dds::xtypes::CommonBitfield::bitcount()
{
    return m_bitcount;
}


/*!
 * @brief This function sets a value in member holder_type
 * @param _holder_type New value for member holder_type
 */
void eprosima::fastdds::dds::xtypes::CommonBitfield::holder_type(
        eprosima::fastdds::dds::xtypes::TypeKind _holder_type)
{
    m_holder_type = _holder_type;
}

/*!
 * @brief This function returns the value of member holder_type
 * @return Value of member holder_type
 */
eprosima::fastdds::dds::xtypes::TypeKind eprosima::fastdds::dds::xtypes::CommonBitfield::holder_type() const
{
    return m_holder_type;
}

/*!
 * @brief This function returns a reference to member holder_type
 * @return Reference to member holder_type
 */
eprosima::fastdds::dds::xtypes::TypeKind& eprosima::fastdds::dds::xtypes::CommonBitfield::holder_type()
{
    return m_holder_type;
}


eprosima::fastdds::dds::xtypes::CompleteBitfield::CompleteBitfield()
{

}

eprosima::fastdds::dds::xtypes::CompleteBitfield::~CompleteBitfield()
{
}

eprosima::fastdds::dds::xtypes::CompleteBitfield::CompleteBitfield(
        const CompleteBitfield& x)
{
    m_common = x.m_common;
    m_detail = x.m_detail;
}

eprosima::fastdds::dds::xtypes::CompleteBitfield::CompleteBitfield(
        CompleteBitfield&& x) noexcept
{
    m_common = std::move(x.m_common);
    m_detail = std::move(x.m_detail);
}

eprosima::fastdds::dds::xtypes::CompleteBitfield& eprosima::fastdds::dds::xtypes::CompleteBitfield::operator =(
        const CompleteBitfield& x)
{

    m_common = x.m_common;
    m_detail = x.m_detail;
    return *this;
}

eprosima::fastdds::dds::xtypes::CompleteBitfield& eprosima::fastdds::dds::xtypes::CompleteBitfield::operator =(
        CompleteBitfield&& x) noexcept
{

    m_common = std::move(x.m_common);
    m_detail = std::move(x.m_detail);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CompleteBitfield::operator ==(
        const CompleteBitfield& x) const
{
    return (m_common == x.m_common &&
           m_detail == x.m_detail);
}

bool eprosima::fastdds::dds::xtypes::CompleteBitfield::operator !=(
        const CompleteBitfield& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member common
 * @param _common New value to be copied in member common
 */
void eprosima::fastdds::dds::xtypes::CompleteBitfield::common(
        const eprosima::fastdds::dds::xtypes::CommonBitfield& _common)
{
    m_common = _common;
}

/*!
 * @brief This function moves the value in member common
 * @param _common New value to be moved in member common
 */
void eprosima::fastdds::dds::xtypes::CompleteBitfield::common(
        eprosima::fastdds::dds::xtypes::CommonBitfield&& _common)
{
    m_common = std::move(_common);
}

/*!
 * @brief This function returns a constant reference to member common
 * @return Constant reference to member common
 */
const eprosima::fastdds::dds::xtypes::CommonBitfield& eprosima::fastdds::dds::xtypes::CompleteBitfield::common() const
{
    return m_common;
}

/*!
 * @brief This function returns a reference to member common
 * @return Reference to member common
 */
eprosima::fastdds::dds::xtypes::CommonBitfield& eprosima::fastdds::dds::xtypes::CompleteBitfield::common()
{
    return m_common;
}


/*!
 * @brief This function copies the value in member detail
 * @param _detail New value to be copied in member detail
 */
void eprosima::fastdds::dds::xtypes::CompleteBitfield::detail(
        const eprosima::fastdds::dds::xtypes::CompleteMemberDetail& _detail)
{
    m_detail = _detail;
}

/*!
 * @brief This function moves the value in member detail
 * @param _detail New value to be moved in member detail
 */
void eprosima::fastdds::dds::xtypes::CompleteBitfield::detail(
        eprosima::fastdds::dds::xtypes::CompleteMemberDetail&& _detail)
{
    m_detail = std::move(_detail);
}

/*!
 * @brief This function returns a constant reference to member detail
 * @return Constant reference to member detail
 */
const eprosima::fastdds::dds::xtypes::CompleteMemberDetail& eprosima::fastdds::dds::xtypes::CompleteBitfield::detail() const
{
    return m_detail;
}

/*!
 * @brief This function returns a reference to member detail
 * @return Reference to member detail
 */
eprosima::fastdds::dds::xtypes::CompleteMemberDetail& eprosima::fastdds::dds::xtypes::CompleteBitfield::detail()
{
    return m_detail;
}



eprosima::fastdds::dds::xtypes::MinimalBitfield::MinimalBitfield()
{

}

eprosima::fastdds::dds::xtypes::MinimalBitfield::~MinimalBitfield()
{
}

eprosima::fastdds::dds::xtypes::MinimalBitfield::MinimalBitfield(
        const MinimalBitfield& x)
{
    m_common = x.m_common;
    m_name_hash = x.m_name_hash;
}

eprosima::fastdds::dds::xtypes::MinimalBitfield::MinimalBitfield(
        MinimalBitfield&& x) noexcept
{
    m_common = std::move(x.m_common);
    m_name_hash = std::move(x.m_name_hash);
}

eprosima::fastdds::dds::xtypes::MinimalBitfield& eprosima::fastdds::dds::xtypes::MinimalBitfield::operator =(
        const MinimalBitfield& x)
{

    m_common = x.m_common;
    m_name_hash = x.m_name_hash;
    return *this;
}

eprosima::fastdds::dds::xtypes::MinimalBitfield& eprosima::fastdds::dds::xtypes::MinimalBitfield::operator =(
        MinimalBitfield&& x) noexcept
{

    m_common = std::move(x.m_common);
    m_name_hash = std::move(x.m_name_hash);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::MinimalBitfield::operator ==(
        const MinimalBitfield& x) const
{
    return (m_common == x.m_common &&
           m_name_hash == x.m_name_hash);
}

bool eprosima::fastdds::dds::xtypes::MinimalBitfield::operator !=(
        const MinimalBitfield& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member common
 * @param _common New value to be copied in member common
 */
void eprosima::fastdds::dds::xtypes::MinimalBitfield::common(
        const eprosima::fastdds::dds::xtypes::CommonBitfield& _common)
{
    m_common = _common;
}

/*!
 * @brief This function moves the value in member common
 * @param _common New value to be moved in member common
 */
void eprosima::fastdds::dds::xtypes::MinimalBitfield::common(
        eprosima::fastdds::dds::xtypes::CommonBitfield&& _common)
{
    m_common = std::move(_common);
}

/*!
 * @brief This function returns a constant reference to member common
 * @return Constant reference to member common
 */
const eprosima::fastdds::dds::xtypes::CommonBitfield& eprosima::fastdds::dds::xtypes::MinimalBitfield::common() const
{
    return m_common;
}

/*!
 * @brief This function returns a reference to member common
 * @return Reference to member common
 */
eprosima::fastdds::dds::xtypes::CommonBitfield& eprosima::fastdds::dds::xtypes::MinimalBitfield::common()
{
    return m_common;
}


/*!
 * @brief This function copies the value in member name_hash
 * @param _name_hash New value to be copied in member name_hash
 */
void eprosima::fastdds::dds::xtypes::MinimalBitfield::name_hash(
        const eprosima::fastdds::dds::xtypes::NameHash& _name_hash)
{
    m_name_hash = _name_hash;
}

/*!
 * @brief This function moves the value in member name_hash
 * @param _name_hash New value to be moved in member name_hash
 */
void eprosima::fastdds::dds::xtypes::MinimalBitfield::name_hash(
        eprosima::fastdds::dds::xtypes::NameHash&& _name_hash)
{
    m_name_hash = std::move(_name_hash);
}

/*!
 * @brief This function returns a constant reference to member name_hash
 * @return Constant reference to member name_hash
 */
const eprosima::fastdds::dds::xtypes::NameHash& eprosima::fastdds::dds::xtypes::MinimalBitfield::name_hash() const
{
    return m_name_hash;
}

/*!
 * @brief This function returns a reference to member name_hash
 * @return Reference to member name_hash
 */
eprosima::fastdds::dds::xtypes::NameHash& eprosima::fastdds::dds::xtypes::MinimalBitfield::name_hash()
{
    return m_name_hash;
}



eprosima::fastdds::dds::xtypes::CompleteBitsetHeader::CompleteBitsetHeader()
{

}

eprosima::fastdds::dds::xtypes::CompleteBitsetHeader::~CompleteBitsetHeader()
{
}

eprosima::fastdds::dds::xtypes::CompleteBitsetHeader::CompleteBitsetHeader(
        const CompleteBitsetHeader& x)
{
    m_detail = x.m_detail;
}

eprosima::fastdds::dds::xtypes::CompleteBitsetHeader::CompleteBitsetHeader(
        CompleteBitsetHeader&& x) noexcept
{
    m_detail = std::move(x.m_detail);
}

eprosima::fastdds::dds::xtypes::CompleteBitsetHeader& eprosima::fastdds::dds::xtypes::CompleteBitsetHeader::operator =(
        const CompleteBitsetHeader& x)
{

    m_detail = x.m_detail;
    return *this;
}

eprosima::fastdds::dds::xtypes::CompleteBitsetHeader& eprosima::fastdds::dds::xtypes::CompleteBitsetHeader::operator =(
        CompleteBitsetHeader&& x) noexcept
{

    m_detail = std::move(x.m_detail);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CompleteBitsetHeader::operator ==(
        const CompleteBitsetHeader& x) const
{
    return (m_detail == x.m_detail);
}

bool eprosima::fastdds::dds::xtypes::CompleteBitsetHeader::operator !=(
        const CompleteBitsetHeader& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member detail
 * @param _detail New value to be copied in member detail
 */
void eprosima::fastdds::dds::xtypes::CompleteBitsetHeader::detail(
        const eprosima::fastdds::dds::xtypes::CompleteTypeDetail& _detail)
{
    m_detail = _detail;
}

/*!
 * @brief This function moves the value in member detail
 * @param _detail New value to be moved in member detail
 */
void eprosima::fastdds::dds::xtypes::CompleteBitsetHeader::detail(
        eprosima::fastdds::dds::xtypes::CompleteTypeDetail&& _detail)
{
    m_detail = std::move(_detail);
}

/*!
 * @brief This function returns a constant reference to member detail
 * @return Constant reference to member detail
 */
const eprosima::fastdds::dds::xtypes::CompleteTypeDetail& eprosima::fastdds::dds::xtypes::CompleteBitsetHeader::detail() const
{
    return m_detail;
}

/*!
 * @brief This function returns a reference to member detail
 * @return Reference to member detail
 */
eprosima::fastdds::dds::xtypes::CompleteTypeDetail& eprosima::fastdds::dds::xtypes::CompleteBitsetHeader::detail()
{
    return m_detail;
}


eprosima::fastdds::dds::xtypes::MinimalBitsetHeader::MinimalBitsetHeader()
{

}

eprosima::fastdds::dds::xtypes::MinimalBitsetHeader::~MinimalBitsetHeader()
{
}

eprosima::fastdds::dds::xtypes::MinimalBitsetHeader::MinimalBitsetHeader(
        const MinimalBitsetHeader& x)
{
    static_cast<void>(x);
}

eprosima::fastdds::dds::xtypes::MinimalBitsetHeader::MinimalBitsetHeader(
        MinimalBitsetHeader&& x) noexcept
{
    static_cast<void>(x);
}

eprosima::fastdds::dds::xtypes::MinimalBitsetHeader& eprosima::fastdds::dds::xtypes::MinimalBitsetHeader::operator =(
        const MinimalBitsetHeader& x)
{

    static_cast<void>(x);

    return *this;
}

eprosima::fastdds::dds::xtypes::MinimalBitsetHeader& eprosima::fastdds::dds::xtypes::MinimalBitsetHeader::operator =(
        MinimalBitsetHeader&& x) noexcept
{

    static_cast<void>(x);

    return *this;
}

bool eprosima::fastdds::dds::xtypes::MinimalBitsetHeader::operator ==(
        const MinimalBitsetHeader& x) const
{
    static_cast<void>(x);
    return true;
}

bool eprosima::fastdds::dds::xtypes::MinimalBitsetHeader::operator !=(
        const MinimalBitsetHeader& x) const
{
    return !(*this == x);
}


eprosima::fastdds::dds::xtypes::CompleteBitsetType::CompleteBitsetType()
{

}

eprosima::fastdds::dds::xtypes::CompleteBitsetType::~CompleteBitsetType()
{
}

eprosima::fastdds::dds::xtypes::CompleteBitsetType::CompleteBitsetType(
        const CompleteBitsetType& x)
{
    m_bitset_flags = x.m_bitset_flags;
    m_header = x.m_header;
    m_field_seq = x.m_field_seq;
}

eprosima::fastdds::dds::xtypes::CompleteBitsetType::CompleteBitsetType(
        CompleteBitsetType&& x) noexcept
{
    m_bitset_flags = std::move(x.m_bitset_flags);
    m_header = std::move(x.m_header);
    m_field_seq = std::move(x.m_field_seq);
}

eprosima::fastdds::dds::xtypes::CompleteBitsetType& eprosima::fastdds::dds::xtypes::CompleteBitsetType::operator =(
        const CompleteBitsetType& x)
{

    m_bitset_flags = x.m_bitset_flags;
    m_header = x.m_header;
    m_field_seq = x.m_field_seq;
    return *this;
}

eprosima::fastdds::dds::xtypes::CompleteBitsetType& eprosima::fastdds::dds::xtypes::CompleteBitsetType::operator =(
        CompleteBitsetType&& x) noexcept
{

    m_bitset_flags = std::move(x.m_bitset_flags);
    m_header = std::move(x.m_header);
    m_field_seq = std::move(x.m_field_seq);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::CompleteBitsetType::operator ==(
        const CompleteBitsetType& x) const
{
    return (m_bitset_flags == x.m_bitset_flags &&
           m_header == x.m_header &&
           m_field_seq == x.m_field_seq);
}

bool eprosima::fastdds::dds::xtypes::CompleteBitsetType::operator !=(
        const CompleteBitsetType& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member bitset_flags
 * @param _bitset_flags New value to be copied in member bitset_flags
 */
void eprosima::fastdds::dds::xtypes::CompleteBitsetType::bitset_flags(
        const eprosima::fastdds::dds::xtypes::BitsetTypeFlag& _bitset_flags)
{
    m_bitset_flags = _bitset_flags;
}

/*!
 * @brief This function moves the value in member bitset_flags
 * @param _bitset_flags New value to be moved in member bitset_flags
 */
void eprosima::fastdds::dds::xtypes::CompleteBitsetType::bitset_flags(
        eprosima::fastdds::dds::xtypes::BitsetTypeFlag&& _bitset_flags)
{
    m_bitset_flags = std::move(_bitset_flags);
}

/*!
 * @brief This function returns a constant reference to member bitset_flags
 * @return Constant reference to member bitset_flags
 */
const eprosima::fastdds::dds::xtypes::BitsetTypeFlag& eprosima::fastdds::dds::xtypes::CompleteBitsetType::bitset_flags() const
{
    return m_bitset_flags;
}

/*!
 * @brief This function returns a reference to member bitset_flags
 * @return Reference to member bitset_flags
 */
eprosima::fastdds::dds::xtypes::BitsetTypeFlag& eprosima::fastdds::dds::xtypes::CompleteBitsetType::bitset_flags()
{
    return m_bitset_flags;
}


/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void eprosima::fastdds::dds::xtypes::CompleteBitsetType::header(
        const eprosima::fastdds::dds::xtypes::CompleteBitsetHeader& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void eprosima::fastdds::dds::xtypes::CompleteBitsetType::header(
        eprosima::fastdds::dds::xtypes::CompleteBitsetHeader&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const eprosima::fastdds::dds::xtypes::CompleteBitsetHeader& eprosima::fastdds::dds::xtypes::CompleteBitsetType::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
eprosima::fastdds::dds::xtypes::CompleteBitsetHeader& eprosima::fastdds::dds::xtypes::CompleteBitsetType::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member field_seq
 * @param _field_seq New value to be copied in member field_seq
 */
void eprosima::fastdds::dds::xtypes::CompleteBitsetType::field_seq(
        const eprosima::fastdds::dds::xtypes::CompleteBitfieldSeq& _field_seq)
{
    m_field_seq = _field_seq;
}

/*!
 * @brief This function moves the value in member field_seq
 * @param _field_seq New value to be moved in member field_seq
 */
void eprosima::fastdds::dds::xtypes::CompleteBitsetType::field_seq(
        eprosima::fastdds::dds::xtypes::CompleteBitfieldSeq&& _field_seq)
{
    m_field_seq = std::move(_field_seq);
}

/*!
 * @brief This function returns a constant reference to member field_seq
 * @return Constant reference to member field_seq
 */
const eprosima::fastdds::dds::xtypes::CompleteBitfieldSeq& eprosima::fastdds::dds::xtypes::CompleteBitsetType::field_seq() const
{
    return m_field_seq;
}

/*!
 * @brief This function returns a reference to member field_seq
 * @return Reference to member field_seq
 */
eprosima::fastdds::dds::xtypes::CompleteBitfieldSeq& eprosima::fastdds::dds::xtypes::CompleteBitsetType::field_seq()
{
    return m_field_seq;
}


eprosima::fastdds::dds::xtypes::MinimalBitsetType::MinimalBitsetType()
{

}

eprosima::fastdds::dds::xtypes::MinimalBitsetType::~MinimalBitsetType()
{
}

eprosima::fastdds::dds::xtypes::MinimalBitsetType::MinimalBitsetType(
        const MinimalBitsetType& x)
{
    m_bitset_flags = x.m_bitset_flags;
    m_header = x.m_header;
    m_field_seq = x.m_field_seq;
}

eprosima::fastdds::dds::xtypes::MinimalBitsetType::MinimalBitsetType(
        MinimalBitsetType&& x) noexcept
{
    m_bitset_flags = std::move(x.m_bitset_flags);
    m_header = std::move(x.m_header);
    m_field_seq = std::move(x.m_field_seq);
}

eprosima::fastdds::dds::xtypes::MinimalBitsetType& eprosima::fastdds::dds::xtypes::MinimalBitsetType::operator =(
        const MinimalBitsetType& x)
{

    m_bitset_flags = x.m_bitset_flags;
    m_header = x.m_header;
    m_field_seq = x.m_field_seq;
    return *this;
}

eprosima::fastdds::dds::xtypes::MinimalBitsetType& eprosima::fastdds::dds::xtypes::MinimalBitsetType::operator =(
        MinimalBitsetType&& x) noexcept
{

    m_bitset_flags = std::move(x.m_bitset_flags);
    m_header = std::move(x.m_header);
    m_field_seq = std::move(x.m_field_seq);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::MinimalBitsetType::operator ==(
        const MinimalBitsetType& x) const
{
    return (m_bitset_flags == x.m_bitset_flags &&
           m_header == x.m_header &&
           m_field_seq == x.m_field_seq);
}

bool eprosima::fastdds::dds::xtypes::MinimalBitsetType::operator !=(
        const MinimalBitsetType& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member bitset_flags
 * @param _bitset_flags New value to be copied in member bitset_flags
 */
void eprosima::fastdds::dds::xtypes::MinimalBitsetType::bitset_flags(
        const eprosima::fastdds::dds::xtypes::BitsetTypeFlag& _bitset_flags)
{
    m_bitset_flags = _bitset_flags;
}

/*!
 * @brief This function moves the value in member bitset_flags
 * @param _bitset_flags New value to be moved in member bitset_flags
 */
void eprosima::fastdds::dds::xtypes::MinimalBitsetType::bitset_flags(
        eprosima::fastdds::dds::xtypes::BitsetTypeFlag&& _bitset_flags)
{
    m_bitset_flags = std::move(_bitset_flags);
}

/*!
 * @brief This function returns a constant reference to member bitset_flags
 * @return Constant reference to member bitset_flags
 */
const eprosima::fastdds::dds::xtypes::BitsetTypeFlag& eprosima::fastdds::dds::xtypes::MinimalBitsetType::bitset_flags() const
{
    return m_bitset_flags;
}

/*!
 * @brief This function returns a reference to member bitset_flags
 * @return Reference to member bitset_flags
 */
eprosima::fastdds::dds::xtypes::BitsetTypeFlag& eprosima::fastdds::dds::xtypes::MinimalBitsetType::bitset_flags()
{
    return m_bitset_flags;
}


/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void eprosima::fastdds::dds::xtypes::MinimalBitsetType::header(
        const eprosima::fastdds::dds::xtypes::MinimalBitsetHeader& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void eprosima::fastdds::dds::xtypes::MinimalBitsetType::header(
        eprosima::fastdds::dds::xtypes::MinimalBitsetHeader&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const eprosima::fastdds::dds::xtypes::MinimalBitsetHeader& eprosima::fastdds::dds::xtypes::MinimalBitsetType::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
eprosima::fastdds::dds::xtypes::MinimalBitsetHeader& eprosima::fastdds::dds::xtypes::MinimalBitsetType::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member field_seq
 * @param _field_seq New value to be copied in member field_seq
 */
void eprosima::fastdds::dds::xtypes::MinimalBitsetType::field_seq(
        const eprosima::fastdds::dds::xtypes::MinimalBitfieldSeq& _field_seq)
{
    m_field_seq = _field_seq;
}

/*!
 * @brief This function moves the value in member field_seq
 * @param _field_seq New value to be moved in member field_seq
 */
void eprosima::fastdds::dds::xtypes::MinimalBitsetType::field_seq(
        eprosima::fastdds::dds::xtypes::MinimalBitfieldSeq&& _field_seq)
{
    m_field_seq = std::move(_field_seq);
}

/*!
 * @brief This function returns a constant reference to member field_seq
 * @return Constant reference to member field_seq
 */
const eprosima::fastdds::dds::xtypes::MinimalBitfieldSeq& eprosima::fastdds::dds::xtypes::MinimalBitsetType::field_seq() const
{
    return m_field_seq;
}

/*!
 * @brief This function returns a reference to member field_seq
 * @return Reference to member field_seq
 */
eprosima::fastdds::dds::xtypes::MinimalBitfieldSeq& eprosima::fastdds::dds::xtypes::MinimalBitsetType::field_seq()
{
    return m_field_seq;
}


eprosima::fastdds::dds::xtypes::CompleteExtendedType::CompleteExtendedType()
{

}

eprosima::fastdds::dds::xtypes::CompleteExtendedType::~CompleteExtendedType()
{
}

eprosima::fastdds::dds::xtypes::CompleteExtendedType::CompleteExtendedType(
        const CompleteExtendedType& x)
{
    static_cast<void>(x);
}

eprosima::fastdds::dds::xtypes::CompleteExtendedType::CompleteExtendedType(
        CompleteExtendedType&& x) noexcept
{
    static_cast<void>(x);
}

eprosima::fastdds::dds::xtypes::CompleteExtendedType& eprosima::fastdds::dds::xtypes::CompleteExtendedType::operator =(
        const CompleteExtendedType& x)
{

    static_cast<void>(x);

    return *this;
}

eprosima::fastdds::dds::xtypes::CompleteExtendedType& eprosima::fastdds::dds::xtypes::CompleteExtendedType::operator =(
        CompleteExtendedType&& x) noexcept
{

    static_cast<void>(x);

    return *this;
}

bool eprosima::fastdds::dds::xtypes::CompleteExtendedType::operator ==(
        const CompleteExtendedType& x) const
{
    static_cast<void>(x);
    return true;
}

bool eprosima::fastdds::dds::xtypes::CompleteExtendedType::operator !=(
        const CompleteExtendedType& x) const
{
    return !(*this == x);
}


eprosima::fastdds::dds::xtypes::CompleteTypeObject::CompleteTypeObject()
{
    m__d = 0;
}

eprosima::fastdds::dds::xtypes::CompleteTypeObject::~CompleteTypeObject()
{
}

eprosima::fastdds::dds::xtypes::CompleteTypeObject::CompleteTypeObject(
        const CompleteTypeObject& x)
{
    m__d = x.m__d;

    switch (m__d)
    {
        case TK_ALIAS:
            m_alias_type = x.m_alias_type;
            break;


        case TK_ANNOTATION:
            m_annotation_type = x.m_annotation_type;
            break;


        case TK_STRUCTURE:
            m_struct_type = x.m_struct_type;
            break;


        case TK_UNION:
            m_union_type = x.m_union_type;
            break;


        case TK_BITSET:
            m_bitset_type = x.m_bitset_type;
            break;


        case TK_SEQUENCE:
            m_sequence_type = x.m_sequence_type;
            break;


        case TK_ARRAY:
            m_array_type = x.m_array_type;
            break;


        case TK_MAP:
            m_map_type = x.m_map_type;
            break;


        case TK_ENUM:
            m_enumerated_type = x.m_enumerated_type;
            break;


        case TK_BITMASK:
            m_bitmask_type = x.m_bitmask_type;
            break;


        default:
            m_extended_type = x.m_extended_type;

            break;
    }
}

eprosima::fastdds::dds::xtypes::CompleteTypeObject::CompleteTypeObject(
        CompleteTypeObject&& x) noexcept
{
    m__d = x.m__d;

    switch (m__d)
    {
        case TK_ALIAS:
            m_alias_type = std::move(x.m_alias_type);

            break;


        case TK_ANNOTATION:
            m_annotation_type = std::move(x.m_annotation_type);

            break;


        case TK_STRUCTURE:
            m_struct_type = std::move(x.m_struct_type);

            break;


        case TK_UNION:
            m_union_type = std::move(x.m_union_type);

            break;


        case TK_BITSET:
            m_bitset_type = std::move(x.m_bitset_type);

            break;


        case TK_SEQUENCE:
            m_sequence_type = std::move(x.m_sequence_type);

            break;


        case TK_ARRAY:
            m_array_type = std::move(x.m_array_type);

            break;


        case TK_MAP:
            m_map_type = std::move(x.m_map_type);

            break;


        case TK_ENUM:
            m_enumerated_type = std::move(x.m_enumerated_type);

            break;


        case TK_BITMASK:
            m_bitmask_type = std::move(x.m_bitmask_type);

            break;


        default:
            m_extended_type = std::move(x.m_extended_type);

            break;
    }
}

eprosima::fastdds::dds::xtypes::CompleteTypeObject& eprosima::fastdds::dds::xtypes::CompleteTypeObject::operator =(
        const CompleteTypeObject& x)
{
    m__d = x.m__d;

    switch (m__d)
    {
        case TK_ALIAS:
            m_alias_type = x.m_alias_type;
            break;


        case TK_ANNOTATION:
            m_annotation_type = x.m_annotation_type;
            break;


        case TK_STRUCTURE:
            m_struct_type = x.m_struct_type;
            break;


        case TK_UNION:
            m_union_type = x.m_union_type;
            break;


        case TK_BITSET:
            m_bitset_type = x.m_bitset_type;
            break;


        case TK_SEQUENCE:
            m_sequence_type = x.m_sequence_type;
            break;


        case TK_ARRAY:
            m_array_type = x.m_array_type;
            break;


        case TK_MAP:
            m_map_type = x.m_map_type;
            break;


        case TK_ENUM:
            m_enumerated_type = x.m_enumerated_type;
            break;


        case TK_BITMASK:
            m_bitmask_type = x.m_bitmask_type;
            break;


        default:
            m_extended_type = x.m_extended_type;

            break;
    }

    return *this;
}

eprosima::fastdds::dds::xtypes::CompleteTypeObject& eprosima::fastdds::dds::xtypes::CompleteTypeObject::operator =(
        CompleteTypeObject&& x) noexcept
{
    m__d = x.m__d;

    switch (m__d)
    {
        case TK_ALIAS:
            m_alias_type = std::move(x.m_alias_type);

            break;


        case TK_ANNOTATION:
            m_annotation_type = std::move(x.m_annotation_type);

            break;


        case TK_STRUCTURE:
            m_struct_type = std::move(x.m_struct_type);

            break;


        case TK_UNION:
            m_union_type = std::move(x.m_union_type);

            break;


        case TK_BITSET:
            m_bitset_type = std::move(x.m_bitset_type);

            break;


        case TK_SEQUENCE:
            m_sequence_type = std::move(x.m_sequence_type);

            break;


        case TK_ARRAY:
            m_array_type = std::move(x.m_array_type);

            break;


        case TK_MAP:
            m_map_type = std::move(x.m_map_type);

            break;


        case TK_ENUM:
            m_enumerated_type = std::move(x.m_enumerated_type);

            break;


        case TK_BITMASK:
            m_bitmask_type = std::move(x.m_bitmask_type);

            break;


        default:
            m_extended_type = std::move(x.m_extended_type);

            break;
    }

    return *this;
}

bool eprosima::fastdds::dds::xtypes::CompleteTypeObject::operator ==(
        const CompleteTypeObject& x) const
{
    if (m__d != x.m__d)
    {
        return false;
    }

    switch (m__d)
    {
        case TK_ALIAS:
            return (m_alias_type == x.m_alias_type);
            break;


        case TK_ANNOTATION:
            return (m_annotation_type == x.m_annotation_type);
            break;


        case TK_STRUCTURE:
            return (m_struct_type == x.m_struct_type);
            break;


        case TK_UNION:
            return (m_union_type == x.m_union_type);
            break;


        case TK_BITSET:
            return (m_bitset_type == x.m_bitset_type);
            break;


        case TK_SEQUENCE:
            return (m_sequence_type == x.m_sequence_type);
            break;


        case TK_ARRAY:
            return (m_array_type == x.m_array_type);
            break;


        case TK_MAP:
            return (m_map_type == x.m_map_type);
            break;


        case TK_ENUM:
            return (m_enumerated_type == x.m_enumerated_type);
            break;


        case TK_BITMASK:
            return (m_bitmask_type == x.m_bitmask_type);
            break;


        default:
            return m_extended_type == x.m_extended_type;

            break;
    }
    return false;
}

bool eprosima::fastdds::dds::xtypes::CompleteTypeObject::operator !=(
        const CompleteTypeObject& x) const
{
    return !(*this == x);
}

void eprosima::fastdds::dds::xtypes::CompleteTypeObject::_d(
        uint8_t __d)
{
    bool b = false;

    switch (m__d)
    {
        case TK_ALIAS:
            switch (__d)
            {
                case TK_ALIAS:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_ANNOTATION:
            switch (__d)
            {
                case TK_ANNOTATION:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_STRUCTURE:
            switch (__d)
            {
                case TK_STRUCTURE:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_UNION:
            switch (__d)
            {
                case TK_UNION:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_BITSET:
            switch (__d)
            {
                case TK_BITSET:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_SEQUENCE:
            switch (__d)
            {
                case TK_SEQUENCE:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_ARRAY:
            switch (__d)
            {
                case TK_ARRAY:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_MAP:
            switch (__d)
            {
                case TK_MAP:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_ENUM:
            switch (__d)
            {
                case TK_ENUM:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_BITMASK:
            switch (__d)
            {
                case TK_BITMASK:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        default:
            b = true;
            switch (__d)
            {
                case TK_ALIAS:
                case TK_ANNOTATION:
                case TK_STRUCTURE:
                case TK_UNION:
                case TK_BITSET:
                case TK_SEQUENCE:
                case TK_ARRAY:
                case TK_MAP:
                case TK_ENUM:
                case TK_BITMASK:
                    b = false;
                    break;
                default:
                    break;
            }
            break;

    }

    if (!b)
    {
        throw BadParamException("Discriminator doesn't correspond with the selected union member");
    }

    m__d = __d;
}

uint8_t eprosima::fastdds::dds::xtypes::CompleteTypeObject::_d() const
{
    return m__d;
}

uint8_t& eprosima::fastdds::dds::xtypes::CompleteTypeObject::_d()
{
    return m__d;
}

void eprosima::fastdds::dds::xtypes::CompleteTypeObject::alias_type(
        const eprosima::fastdds::dds::xtypes::CompleteAliasType& _alias_type)
{
    m_alias_type = _alias_type;
    m__d = TK_ALIAS;

}

void eprosima::fastdds::dds::xtypes::CompleteTypeObject::alias_type(
        eprosima::fastdds::dds::xtypes::CompleteAliasType&& _alias_type)
{
    m_alias_type = std::move(_alias_type);
    m__d = TK_ALIAS;

}

const eprosima::fastdds::dds::xtypes::CompleteAliasType& eprosima::fastdds::dds::xtypes::CompleteTypeObject::alias_type() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_ALIAS:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_alias_type;
}

eprosima::fastdds::dds::xtypes::CompleteAliasType& eprosima::fastdds::dds::xtypes::CompleteTypeObject::alias_type()
{
    bool b = false;

    switch (m__d)
    {
        case TK_ALIAS:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_alias_type;
}


void eprosima::fastdds::dds::xtypes::CompleteTypeObject::annotation_type(
        const eprosima::fastdds::dds::xtypes::CompleteAnnotationType& _annotation_type)
{
    m_annotation_type = _annotation_type;
    m__d = TK_ANNOTATION;

}

void eprosima::fastdds::dds::xtypes::CompleteTypeObject::annotation_type(
        eprosima::fastdds::dds::xtypes::CompleteAnnotationType&& _annotation_type)
{
    m_annotation_type = std::move(_annotation_type);
    m__d = TK_ANNOTATION;

}

const eprosima::fastdds::dds::xtypes::CompleteAnnotationType& eprosima::fastdds::dds::xtypes::CompleteTypeObject::annotation_type() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_ANNOTATION:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_annotation_type;
}

eprosima::fastdds::dds::xtypes::CompleteAnnotationType& eprosima::fastdds::dds::xtypes::CompleteTypeObject::annotation_type()
{
    bool b = false;

    switch (m__d)
    {
        case TK_ANNOTATION:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_annotation_type;
}


void eprosima::fastdds::dds::xtypes::CompleteTypeObject::struct_type(
        const eprosima::fastdds::dds::xtypes::CompleteStructType& _struct_type)
{
    m_struct_type = _struct_type;
    m__d = TK_STRUCTURE;

}

void eprosima::fastdds::dds::xtypes::CompleteTypeObject::struct_type(
        eprosima::fastdds::dds::xtypes::CompleteStructType&& _struct_type)
{
    m_struct_type = std::move(_struct_type);
    m__d = TK_STRUCTURE;

}

const eprosima::fastdds::dds::xtypes::CompleteStructType& eprosima::fastdds::dds::xtypes::CompleteTypeObject::struct_type() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_STRUCTURE:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_struct_type;
}

eprosima::fastdds::dds::xtypes::CompleteStructType& eprosima::fastdds::dds::xtypes::CompleteTypeObject::struct_type()
{
    bool b = false;

    switch (m__d)
    {
        case TK_STRUCTURE:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_struct_type;
}


void eprosima::fastdds::dds::xtypes::CompleteTypeObject::union_type(
        const eprosima::fastdds::dds::xtypes::CompleteUnionType& _union_type)
{
    m_union_type = _union_type;
    m__d = TK_UNION;

}

void eprosima::fastdds::dds::xtypes::CompleteTypeObject::union_type(
        eprosima::fastdds::dds::xtypes::CompleteUnionType&& _union_type)
{
    m_union_type = std::move(_union_type);
    m__d = TK_UNION;

}

const eprosima::fastdds::dds::xtypes::CompleteUnionType& eprosima::fastdds::dds::xtypes::CompleteTypeObject::union_type() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_UNION:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_union_type;
}

eprosima::fastdds::dds::xtypes::CompleteUnionType& eprosima::fastdds::dds::xtypes::CompleteTypeObject::union_type()
{
    bool b = false;

    switch (m__d)
    {
        case TK_UNION:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_union_type;
}


void eprosima::fastdds::dds::xtypes::CompleteTypeObject::bitset_type(
        const eprosima::fastdds::dds::xtypes::CompleteBitsetType& _bitset_type)
{
    m_bitset_type = _bitset_type;
    m__d = TK_BITSET;

}

void eprosima::fastdds::dds::xtypes::CompleteTypeObject::bitset_type(
        eprosima::fastdds::dds::xtypes::CompleteBitsetType&& _bitset_type)
{
    m_bitset_type = std::move(_bitset_type);
    m__d = TK_BITSET;

}

const eprosima::fastdds::dds::xtypes::CompleteBitsetType& eprosima::fastdds::dds::xtypes::CompleteTypeObject::bitset_type() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_BITSET:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_bitset_type;
}

eprosima::fastdds::dds::xtypes::CompleteBitsetType& eprosima::fastdds::dds::xtypes::CompleteTypeObject::bitset_type()
{
    bool b = false;

    switch (m__d)
    {
        case TK_BITSET:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_bitset_type;
}


void eprosima::fastdds::dds::xtypes::CompleteTypeObject::sequence_type(
        const eprosima::fastdds::dds::xtypes::CompleteSequenceType& _sequence_type)
{
    m_sequence_type = _sequence_type;
    m__d = TK_SEQUENCE;

}

void eprosima::fastdds::dds::xtypes::CompleteTypeObject::sequence_type(
        eprosima::fastdds::dds::xtypes::CompleteSequenceType&& _sequence_type)
{
    m_sequence_type = std::move(_sequence_type);
    m__d = TK_SEQUENCE;

}

const eprosima::fastdds::dds::xtypes::CompleteSequenceType& eprosima::fastdds::dds::xtypes::CompleteTypeObject::sequence_type() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_SEQUENCE:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_sequence_type;
}

eprosima::fastdds::dds::xtypes::CompleteSequenceType& eprosima::fastdds::dds::xtypes::CompleteTypeObject::sequence_type()
{
    bool b = false;

    switch (m__d)
    {
        case TK_SEQUENCE:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_sequence_type;
}


void eprosima::fastdds::dds::xtypes::CompleteTypeObject::array_type(
        const eprosima::fastdds::dds::xtypes::CompleteArrayType& _array_type)
{
    m_array_type = _array_type;
    m__d = TK_ARRAY;

}

void eprosima::fastdds::dds::xtypes::CompleteTypeObject::array_type(
        eprosima::fastdds::dds::xtypes::CompleteArrayType&& _array_type)
{
    m_array_type = std::move(_array_type);
    m__d = TK_ARRAY;

}

const eprosima::fastdds::dds::xtypes::CompleteArrayType& eprosima::fastdds::dds::xtypes::CompleteTypeObject::array_type() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_ARRAY:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_array_type;
}

eprosima::fastdds::dds::xtypes::CompleteArrayType& eprosima::fastdds::dds::xtypes::CompleteTypeObject::array_type()
{
    bool b = false;

    switch (m__d)
    {
        case TK_ARRAY:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_array_type;
}


void eprosima::fastdds::dds::xtypes::CompleteTypeObject::map_type(
        const eprosima::fastdds::dds::xtypes::CompleteMapType& _map_type)
{
    m_map_type = _map_type;
    m__d = TK_MAP;

}

void eprosima::fastdds::dds::xtypes::CompleteTypeObject::map_type(
        eprosima::fastdds::dds::xtypes::CompleteMapType&& _map_type)
{
    m_map_type = std::move(_map_type);
    m__d = TK_MAP;

}

const eprosima::fastdds::dds::xtypes::CompleteMapType& eprosima::fastdds::dds::xtypes::CompleteTypeObject::map_type() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_MAP:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_map_type;
}

eprosima::fastdds::dds::xtypes::CompleteMapType& eprosima::fastdds::dds::xtypes::CompleteTypeObject::map_type()
{
    bool b = false;

    switch (m__d)
    {
        case TK_MAP:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_map_type;
}


void eprosima::fastdds::dds::xtypes::CompleteTypeObject::enumerated_type(
        const eprosima::fastdds::dds::xtypes::CompleteEnumeratedType& _enumerated_type)
{
    m_enumerated_type = _enumerated_type;
    m__d = TK_ENUM;

}

void eprosima::fastdds::dds::xtypes::CompleteTypeObject::enumerated_type(
        eprosima::fastdds::dds::xtypes::CompleteEnumeratedType&& _enumerated_type)
{
    m_enumerated_type = std::move(_enumerated_type);
    m__d = TK_ENUM;

}

const eprosima::fastdds::dds::xtypes::CompleteEnumeratedType& eprosima::fastdds::dds::xtypes::CompleteTypeObject::enumerated_type() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_ENUM:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_enumerated_type;
}

eprosima::fastdds::dds::xtypes::CompleteEnumeratedType& eprosima::fastdds::dds::xtypes::CompleteTypeObject::enumerated_type()
{
    bool b = false;

    switch (m__d)
    {
        case TK_ENUM:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_enumerated_type;
}


void eprosima::fastdds::dds::xtypes::CompleteTypeObject::bitmask_type(
        const eprosima::fastdds::dds::xtypes::CompleteBitmaskType& _bitmask_type)
{
    m_bitmask_type = _bitmask_type;
    m__d = TK_BITMASK;

}

void eprosima::fastdds::dds::xtypes::CompleteTypeObject::bitmask_type(
        eprosima::fastdds::dds::xtypes::CompleteBitmaskType&& _bitmask_type)
{
    m_bitmask_type = std::move(_bitmask_type);
    m__d = TK_BITMASK;

}

const eprosima::fastdds::dds::xtypes::CompleteBitmaskType& eprosima::fastdds::dds::xtypes::CompleteTypeObject::bitmask_type() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_BITMASK:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_bitmask_type;
}

eprosima::fastdds::dds::xtypes::CompleteBitmaskType& eprosima::fastdds::dds::xtypes::CompleteTypeObject::bitmask_type()
{
    bool b = false;

    switch (m__d)
    {
        case TK_BITMASK:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_bitmask_type;
}


void eprosima::fastdds::dds::xtypes::CompleteTypeObject::extended_type(
        const eprosima::fastdds::dds::xtypes::CompleteExtendedType& _extended_type)
{
    m_extended_type = _extended_type;
    m__d = 0;

}

void eprosima::fastdds::dds::xtypes::CompleteTypeObject::extended_type(
        eprosima::fastdds::dds::xtypes::CompleteExtendedType&& _extended_type)
{
    m_extended_type = std::move(_extended_type);
    m__d = 0;

}

const eprosima::fastdds::dds::xtypes::CompleteExtendedType& eprosima::fastdds::dds::xtypes::CompleteTypeObject::extended_type() const
{
    bool b = true;

    switch (m__d)
    {
        case TK_ALIAS:
        case TK_ANNOTATION:
        case TK_STRUCTURE:
        case TK_UNION:
        case TK_BITSET:
        case TK_SEQUENCE:
        case TK_ARRAY:
        case TK_MAP:
        case TK_ENUM:
        case TK_BITMASK:
            b = false;
            break;
        default:
            break;
    }
    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_extended_type;
}

eprosima::fastdds::dds::xtypes::CompleteExtendedType& eprosima::fastdds::dds::xtypes::CompleteTypeObject::extended_type()
{
    bool b = true;

    switch (m__d)
    {
        case TK_ALIAS:
        case TK_ANNOTATION:
        case TK_STRUCTURE:
        case TK_UNION:
        case TK_BITSET:
        case TK_SEQUENCE:
        case TK_ARRAY:
        case TK_MAP:
        case TK_ENUM:
        case TK_BITMASK:
            b = false;
            break;
        default:
            break;
    }
    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_extended_type;
}


eprosima::fastdds::dds::xtypes::MinimalExtendedType::MinimalExtendedType()
{

}

eprosima::fastdds::dds::xtypes::MinimalExtendedType::~MinimalExtendedType()
{
}

eprosima::fastdds::dds::xtypes::MinimalExtendedType::MinimalExtendedType(
        const MinimalExtendedType& x)
{
    static_cast<void>(x);
}

eprosima::fastdds::dds::xtypes::MinimalExtendedType::MinimalExtendedType(
        MinimalExtendedType&& x) noexcept
{
    static_cast<void>(x);
}

eprosima::fastdds::dds::xtypes::MinimalExtendedType& eprosima::fastdds::dds::xtypes::MinimalExtendedType::operator =(
        const MinimalExtendedType& x)
{

    static_cast<void>(x);

    return *this;
}

eprosima::fastdds::dds::xtypes::MinimalExtendedType& eprosima::fastdds::dds::xtypes::MinimalExtendedType::operator =(
        MinimalExtendedType&& x) noexcept
{

    static_cast<void>(x);

    return *this;
}

bool eprosima::fastdds::dds::xtypes::MinimalExtendedType::operator ==(
        const MinimalExtendedType& x) const
{
    static_cast<void>(x);
    return true;
}

bool eprosima::fastdds::dds::xtypes::MinimalExtendedType::operator !=(
        const MinimalExtendedType& x) const
{
    return !(*this == x);
}


eprosima::fastdds::dds::xtypes::MinimalTypeObject::MinimalTypeObject()
{
    m__d = 0;
}

eprosima::fastdds::dds::xtypes::MinimalTypeObject::~MinimalTypeObject()
{
}

eprosima::fastdds::dds::xtypes::MinimalTypeObject::MinimalTypeObject(
        const MinimalTypeObject& x)
{
    m__d = x.m__d;

    switch (m__d)
    {
        case TK_ALIAS:
            m_alias_type = x.m_alias_type;
            break;


        case TK_ANNOTATION:
            m_annotation_type = x.m_annotation_type;
            break;


        case TK_STRUCTURE:
            m_struct_type = x.m_struct_type;
            break;


        case TK_UNION:
            m_union_type = x.m_union_type;
            break;


        case TK_BITSET:
            m_bitset_type = x.m_bitset_type;
            break;


        case TK_SEQUENCE:
            m_sequence_type = x.m_sequence_type;
            break;


        case TK_ARRAY:
            m_array_type = x.m_array_type;
            break;


        case TK_MAP:
            m_map_type = x.m_map_type;
            break;


        case TK_ENUM:
            m_enumerated_type = x.m_enumerated_type;
            break;


        case TK_BITMASK:
            m_bitmask_type = x.m_bitmask_type;
            break;


        default:
            m_extended_type = x.m_extended_type;

            break;
    }
}

eprosima::fastdds::dds::xtypes::MinimalTypeObject::MinimalTypeObject(
        MinimalTypeObject&& x) noexcept
{
    m__d = x.m__d;

    switch (m__d)
    {
        case TK_ALIAS:
            m_alias_type = std::move(x.m_alias_type);

            break;


        case TK_ANNOTATION:
            m_annotation_type = std::move(x.m_annotation_type);

            break;


        case TK_STRUCTURE:
            m_struct_type = std::move(x.m_struct_type);

            break;


        case TK_UNION:
            m_union_type = std::move(x.m_union_type);

            break;


        case TK_BITSET:
            m_bitset_type = std::move(x.m_bitset_type);

            break;


        case TK_SEQUENCE:
            m_sequence_type = std::move(x.m_sequence_type);

            break;


        case TK_ARRAY:
            m_array_type = std::move(x.m_array_type);

            break;


        case TK_MAP:
            m_map_type = std::move(x.m_map_type);

            break;


        case TK_ENUM:
            m_enumerated_type = std::move(x.m_enumerated_type);

            break;


        case TK_BITMASK:
            m_bitmask_type = std::move(x.m_bitmask_type);

            break;


        default:
            m_extended_type = std::move(x.m_extended_type);

            break;
    }
}

eprosima::fastdds::dds::xtypes::MinimalTypeObject& eprosima::fastdds::dds::xtypes::MinimalTypeObject::operator =(
        const MinimalTypeObject& x)
{
    m__d = x.m__d;

    switch (m__d)
    {
        case TK_ALIAS:
            m_alias_type = x.m_alias_type;
            break;


        case TK_ANNOTATION:
            m_annotation_type = x.m_annotation_type;
            break;


        case TK_STRUCTURE:
            m_struct_type = x.m_struct_type;
            break;


        case TK_UNION:
            m_union_type = x.m_union_type;
            break;


        case TK_BITSET:
            m_bitset_type = x.m_bitset_type;
            break;


        case TK_SEQUENCE:
            m_sequence_type = x.m_sequence_type;
            break;


        case TK_ARRAY:
            m_array_type = x.m_array_type;
            break;


        case TK_MAP:
            m_map_type = x.m_map_type;
            break;


        case TK_ENUM:
            m_enumerated_type = x.m_enumerated_type;
            break;


        case TK_BITMASK:
            m_bitmask_type = x.m_bitmask_type;
            break;


        default:
            m_extended_type = x.m_extended_type;

            break;
    }

    return *this;
}

eprosima::fastdds::dds::xtypes::MinimalTypeObject& eprosima::fastdds::dds::xtypes::MinimalTypeObject::operator =(
        MinimalTypeObject&& x) noexcept
{
    m__d = x.m__d;

    switch (m__d)
    {
        case TK_ALIAS:
            m_alias_type = std::move(x.m_alias_type);

            break;


        case TK_ANNOTATION:
            m_annotation_type = std::move(x.m_annotation_type);

            break;


        case TK_STRUCTURE:
            m_struct_type = std::move(x.m_struct_type);

            break;


        case TK_UNION:
            m_union_type = std::move(x.m_union_type);

            break;


        case TK_BITSET:
            m_bitset_type = std::move(x.m_bitset_type);

            break;


        case TK_SEQUENCE:
            m_sequence_type = std::move(x.m_sequence_type);

            break;


        case TK_ARRAY:
            m_array_type = std::move(x.m_array_type);

            break;


        case TK_MAP:
            m_map_type = std::move(x.m_map_type);

            break;


        case TK_ENUM:
            m_enumerated_type = std::move(x.m_enumerated_type);

            break;


        case TK_BITMASK:
            m_bitmask_type = std::move(x.m_bitmask_type);

            break;


        default:
            m_extended_type = std::move(x.m_extended_type);

            break;
    }

    return *this;
}

bool eprosima::fastdds::dds::xtypes::MinimalTypeObject::operator ==(
        const MinimalTypeObject& x) const
{
    if (m__d != x.m__d)
    {
        return false;
    }

    switch (m__d)
    {
        case TK_ALIAS:
            return (m_alias_type == x.m_alias_type);
            break;


        case TK_ANNOTATION:
            return (m_annotation_type == x.m_annotation_type);
            break;


        case TK_STRUCTURE:
            return (m_struct_type == x.m_struct_type);
            break;


        case TK_UNION:
            return (m_union_type == x.m_union_type);
            break;


        case TK_BITSET:
            return (m_bitset_type == x.m_bitset_type);
            break;


        case TK_SEQUENCE:
            return (m_sequence_type == x.m_sequence_type);
            break;


        case TK_ARRAY:
            return (m_array_type == x.m_array_type);
            break;


        case TK_MAP:
            return (m_map_type == x.m_map_type);
            break;


        case TK_ENUM:
            return (m_enumerated_type == x.m_enumerated_type);
            break;


        case TK_BITMASK:
            return (m_bitmask_type == x.m_bitmask_type);
            break;


        default:
            return m_extended_type == x.m_extended_type;

            break;
    }
    return false;
}

bool eprosima::fastdds::dds::xtypes::MinimalTypeObject::operator !=(
        const MinimalTypeObject& x) const
{
    return !(*this == x);
}

void eprosima::fastdds::dds::xtypes::MinimalTypeObject::_d(
        uint8_t __d)
{
    bool b = false;

    switch (m__d)
    {
        case TK_ALIAS:
            switch (__d)
            {
                case TK_ALIAS:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_ANNOTATION:
            switch (__d)
            {
                case TK_ANNOTATION:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_STRUCTURE:
            switch (__d)
            {
                case TK_STRUCTURE:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_UNION:
            switch (__d)
            {
                case TK_UNION:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_BITSET:
            switch (__d)
            {
                case TK_BITSET:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_SEQUENCE:
            switch (__d)
            {
                case TK_SEQUENCE:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_ARRAY:
            switch (__d)
            {
                case TK_ARRAY:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_MAP:
            switch (__d)
            {
                case TK_MAP:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_ENUM:
            switch (__d)
            {
                case TK_ENUM:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TK_BITMASK:
            switch (__d)
            {
                case TK_BITMASK:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        default:
            b = true;
            switch (__d)
            {
                case TK_ALIAS:
                case TK_ANNOTATION:
                case TK_STRUCTURE:
                case TK_UNION:
                case TK_BITSET:
                case TK_SEQUENCE:
                case TK_ARRAY:
                case TK_MAP:
                case TK_ENUM:
                case TK_BITMASK:
                    b = false;
                    break;
                default:
                    break;
            }
            break;

    }

    if (!b)
    {
        throw BadParamException("Discriminator doesn't correspond with the selected union member");
    }

    m__d = __d;
}

uint8_t eprosima::fastdds::dds::xtypes::MinimalTypeObject::_d() const
{
    return m__d;
}

uint8_t& eprosima::fastdds::dds::xtypes::MinimalTypeObject::_d()
{
    return m__d;
}

void eprosima::fastdds::dds::xtypes::MinimalTypeObject::alias_type(
        const eprosima::fastdds::dds::xtypes::MinimalAliasType& _alias_type)
{
    m_alias_type = _alias_type;
    m__d = TK_ALIAS;

}

void eprosima::fastdds::dds::xtypes::MinimalTypeObject::alias_type(
        eprosima::fastdds::dds::xtypes::MinimalAliasType&& _alias_type)
{
    m_alias_type = std::move(_alias_type);
    m__d = TK_ALIAS;

}

const eprosima::fastdds::dds::xtypes::MinimalAliasType& eprosima::fastdds::dds::xtypes::MinimalTypeObject::alias_type() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_ALIAS:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_alias_type;
}

eprosima::fastdds::dds::xtypes::MinimalAliasType& eprosima::fastdds::dds::xtypes::MinimalTypeObject::alias_type()
{
    bool b = false;

    switch (m__d)
    {
        case TK_ALIAS:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_alias_type;
}


void eprosima::fastdds::dds::xtypes::MinimalTypeObject::annotation_type(
        const eprosima::fastdds::dds::xtypes::MinimalAnnotationType& _annotation_type)
{
    m_annotation_type = _annotation_type;
    m__d = TK_ANNOTATION;

}

void eprosima::fastdds::dds::xtypes::MinimalTypeObject::annotation_type(
        eprosima::fastdds::dds::xtypes::MinimalAnnotationType&& _annotation_type)
{
    m_annotation_type = std::move(_annotation_type);
    m__d = TK_ANNOTATION;

}

const eprosima::fastdds::dds::xtypes::MinimalAnnotationType& eprosima::fastdds::dds::xtypes::MinimalTypeObject::annotation_type() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_ANNOTATION:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_annotation_type;
}

eprosima::fastdds::dds::xtypes::MinimalAnnotationType& eprosima::fastdds::dds::xtypes::MinimalTypeObject::annotation_type()
{
    bool b = false;

    switch (m__d)
    {
        case TK_ANNOTATION:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_annotation_type;
}


void eprosima::fastdds::dds::xtypes::MinimalTypeObject::struct_type(
        const eprosima::fastdds::dds::xtypes::MinimalStructType& _struct_type)
{
    m_struct_type = _struct_type;
    m__d = TK_STRUCTURE;

}

void eprosima::fastdds::dds::xtypes::MinimalTypeObject::struct_type(
        eprosima::fastdds::dds::xtypes::MinimalStructType&& _struct_type)
{
    m_struct_type = std::move(_struct_type);
    m__d = TK_STRUCTURE;

}

const eprosima::fastdds::dds::xtypes::MinimalStructType& eprosima::fastdds::dds::xtypes::MinimalTypeObject::struct_type() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_STRUCTURE:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_struct_type;
}

eprosima::fastdds::dds::xtypes::MinimalStructType& eprosima::fastdds::dds::xtypes::MinimalTypeObject::struct_type()
{
    bool b = false;

    switch (m__d)
    {
        case TK_STRUCTURE:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_struct_type;
}


void eprosima::fastdds::dds::xtypes::MinimalTypeObject::union_type(
        const eprosima::fastdds::dds::xtypes::MinimalUnionType& _union_type)
{
    m_union_type = _union_type;
    m__d = TK_UNION;

}

void eprosima::fastdds::dds::xtypes::MinimalTypeObject::union_type(
        eprosima::fastdds::dds::xtypes::MinimalUnionType&& _union_type)
{
    m_union_type = std::move(_union_type);
    m__d = TK_UNION;

}

const eprosima::fastdds::dds::xtypes::MinimalUnionType& eprosima::fastdds::dds::xtypes::MinimalTypeObject::union_type() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_UNION:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_union_type;
}

eprosima::fastdds::dds::xtypes::MinimalUnionType& eprosima::fastdds::dds::xtypes::MinimalTypeObject::union_type()
{
    bool b = false;

    switch (m__d)
    {
        case TK_UNION:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_union_type;
}


void eprosima::fastdds::dds::xtypes::MinimalTypeObject::bitset_type(
        const eprosima::fastdds::dds::xtypes::MinimalBitsetType& _bitset_type)
{
    m_bitset_type = _bitset_type;
    m__d = TK_BITSET;

}

void eprosima::fastdds::dds::xtypes::MinimalTypeObject::bitset_type(
        eprosima::fastdds::dds::xtypes::MinimalBitsetType&& _bitset_type)
{
    m_bitset_type = std::move(_bitset_type);
    m__d = TK_BITSET;

}

const eprosima::fastdds::dds::xtypes::MinimalBitsetType& eprosima::fastdds::dds::xtypes::MinimalTypeObject::bitset_type() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_BITSET:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_bitset_type;
}

eprosima::fastdds::dds::xtypes::MinimalBitsetType& eprosima::fastdds::dds::xtypes::MinimalTypeObject::bitset_type()
{
    bool b = false;

    switch (m__d)
    {
        case TK_BITSET:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_bitset_type;
}


void eprosima::fastdds::dds::xtypes::MinimalTypeObject::sequence_type(
        const eprosima::fastdds::dds::xtypes::MinimalSequenceType& _sequence_type)
{
    m_sequence_type = _sequence_type;
    m__d = TK_SEQUENCE;

}

void eprosima::fastdds::dds::xtypes::MinimalTypeObject::sequence_type(
        eprosima::fastdds::dds::xtypes::MinimalSequenceType&& _sequence_type)
{
    m_sequence_type = std::move(_sequence_type);
    m__d = TK_SEQUENCE;

}

const eprosima::fastdds::dds::xtypes::MinimalSequenceType& eprosima::fastdds::dds::xtypes::MinimalTypeObject::sequence_type() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_SEQUENCE:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_sequence_type;
}

eprosima::fastdds::dds::xtypes::MinimalSequenceType& eprosima::fastdds::dds::xtypes::MinimalTypeObject::sequence_type()
{
    bool b = false;

    switch (m__d)
    {
        case TK_SEQUENCE:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_sequence_type;
}


void eprosima::fastdds::dds::xtypes::MinimalTypeObject::array_type(
        const eprosima::fastdds::dds::xtypes::MinimalArrayType& _array_type)
{
    m_array_type = _array_type;
    m__d = TK_ARRAY;

}

void eprosima::fastdds::dds::xtypes::MinimalTypeObject::array_type(
        eprosima::fastdds::dds::xtypes::MinimalArrayType&& _array_type)
{
    m_array_type = std::move(_array_type);
    m__d = TK_ARRAY;

}

const eprosima::fastdds::dds::xtypes::MinimalArrayType& eprosima::fastdds::dds::xtypes::MinimalTypeObject::array_type() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_ARRAY:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_array_type;
}

eprosima::fastdds::dds::xtypes::MinimalArrayType& eprosima::fastdds::dds::xtypes::MinimalTypeObject::array_type()
{
    bool b = false;

    switch (m__d)
    {
        case TK_ARRAY:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_array_type;
}


void eprosima::fastdds::dds::xtypes::MinimalTypeObject::map_type(
        const eprosima::fastdds::dds::xtypes::MinimalMapType& _map_type)
{
    m_map_type = _map_type;
    m__d = TK_MAP;

}

void eprosima::fastdds::dds::xtypes::MinimalTypeObject::map_type(
        eprosima::fastdds::dds::xtypes::MinimalMapType&& _map_type)
{
    m_map_type = std::move(_map_type);
    m__d = TK_MAP;

}

const eprosima::fastdds::dds::xtypes::MinimalMapType& eprosima::fastdds::dds::xtypes::MinimalTypeObject::map_type() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_MAP:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_map_type;
}

eprosima::fastdds::dds::xtypes::MinimalMapType& eprosima::fastdds::dds::xtypes::MinimalTypeObject::map_type()
{
    bool b = false;

    switch (m__d)
    {
        case TK_MAP:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_map_type;
}


void eprosima::fastdds::dds::xtypes::MinimalTypeObject::enumerated_type(
        const eprosima::fastdds::dds::xtypes::MinimalEnumeratedType& _enumerated_type)
{
    m_enumerated_type = _enumerated_type;
    m__d = TK_ENUM;

}

void eprosima::fastdds::dds::xtypes::MinimalTypeObject::enumerated_type(
        eprosima::fastdds::dds::xtypes::MinimalEnumeratedType&& _enumerated_type)
{
    m_enumerated_type = std::move(_enumerated_type);
    m__d = TK_ENUM;

}

const eprosima::fastdds::dds::xtypes::MinimalEnumeratedType& eprosima::fastdds::dds::xtypes::MinimalTypeObject::enumerated_type() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_ENUM:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_enumerated_type;
}

eprosima::fastdds::dds::xtypes::MinimalEnumeratedType& eprosima::fastdds::dds::xtypes::MinimalTypeObject::enumerated_type()
{
    bool b = false;

    switch (m__d)
    {
        case TK_ENUM:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_enumerated_type;
}


void eprosima::fastdds::dds::xtypes::MinimalTypeObject::bitmask_type(
        const eprosima::fastdds::dds::xtypes::MinimalBitmaskType& _bitmask_type)
{
    m_bitmask_type = _bitmask_type;
    m__d = TK_BITMASK;

}

void eprosima::fastdds::dds::xtypes::MinimalTypeObject::bitmask_type(
        eprosima::fastdds::dds::xtypes::MinimalBitmaskType&& _bitmask_type)
{
    m_bitmask_type = std::move(_bitmask_type);
    m__d = TK_BITMASK;

}

const eprosima::fastdds::dds::xtypes::MinimalBitmaskType& eprosima::fastdds::dds::xtypes::MinimalTypeObject::bitmask_type() const
{
    bool b = false;

    switch (m__d)
    {
        case TK_BITMASK:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_bitmask_type;
}

eprosima::fastdds::dds::xtypes::MinimalBitmaskType& eprosima::fastdds::dds::xtypes::MinimalTypeObject::bitmask_type()
{
    bool b = false;

    switch (m__d)
    {
        case TK_BITMASK:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_bitmask_type;
}


void eprosima::fastdds::dds::xtypes::MinimalTypeObject::extended_type(
        const eprosima::fastdds::dds::xtypes::MinimalExtendedType& _extended_type)
{
    m_extended_type = _extended_type;
    m__d = 0;

}

void eprosima::fastdds::dds::xtypes::MinimalTypeObject::extended_type(
        eprosima::fastdds::dds::xtypes::MinimalExtendedType&& _extended_type)
{
    m_extended_type = std::move(_extended_type);
    m__d = 0;

}

const eprosima::fastdds::dds::xtypes::MinimalExtendedType& eprosima::fastdds::dds::xtypes::MinimalTypeObject::extended_type() const
{
    bool b = true;

    switch (m__d)
    {
        case TK_ALIAS:
        case TK_ANNOTATION:
        case TK_STRUCTURE:
        case TK_UNION:
        case TK_BITSET:
        case TK_SEQUENCE:
        case TK_ARRAY:
        case TK_MAP:
        case TK_ENUM:
        case TK_BITMASK:
            b = false;
            break;
        default:
            break;
    }
    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_extended_type;
}

eprosima::fastdds::dds::xtypes::MinimalExtendedType& eprosima::fastdds::dds::xtypes::MinimalTypeObject::extended_type()
{
    bool b = true;

    switch (m__d)
    {
        case TK_ALIAS:
        case TK_ANNOTATION:
        case TK_STRUCTURE:
        case TK_UNION:
        case TK_BITSET:
        case TK_SEQUENCE:
        case TK_ARRAY:
        case TK_MAP:
        case TK_ENUM:
        case TK_BITMASK:
            b = false;
            break;
        default:
            break;
    }
    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_extended_type;
}


eprosima::fastdds::dds::xtypes::TypeObject::TypeObject()
{
    m__d = EK_COMPLETE;
}

eprosima::fastdds::dds::xtypes::TypeObject::~TypeObject()
{
}

eprosima::fastdds::dds::xtypes::TypeObject::TypeObject(
        const TypeObject& x)
{
    m__d = x.m__d;

    switch (m__d)
    {
        case EK_COMPLETE:
            m_complete = x.m_complete;
            break;


        case EK_MINIMAL:
            m_minimal = x.m_minimal;
            break;

        default:
            break;
    }
}

eprosima::fastdds::dds::xtypes::TypeObject::TypeObject(
        TypeObject&& x) noexcept
{
    m__d = x.m__d;

    switch (m__d)
    {
        case EK_COMPLETE:
            m_complete = std::move(x.m_complete);

            break;


        case EK_MINIMAL:
            m_minimal = std::move(x.m_minimal);

            break;

        default:
            break;
    }
}

eprosima::fastdds::dds::xtypes::TypeObject& eprosima::fastdds::dds::xtypes::TypeObject::operator =(
        const TypeObject& x)
{
    m__d = x.m__d;

    switch (m__d)
    {
        case EK_COMPLETE:
            m_complete = x.m_complete;
            break;


        case EK_MINIMAL:
            m_minimal = x.m_minimal;
            break;

        default:
            break;
    }

    return *this;
}

eprosima::fastdds::dds::xtypes::TypeObject& eprosima::fastdds::dds::xtypes::TypeObject::operator =(
        TypeObject&& x) noexcept
{
    m__d = x.m__d;

    switch (m__d)
    {
        case EK_COMPLETE:
            m_complete = std::move(x.m_complete);

            break;


        case EK_MINIMAL:
            m_minimal = std::move(x.m_minimal);

            break;

        default:
            break;
    }

    return *this;
}

bool eprosima::fastdds::dds::xtypes::TypeObject::operator ==(
        const TypeObject& x) const
{
    if (m__d != x.m__d)
    {
        return false;
    }

    switch (m__d)
    {
        case EK_COMPLETE:
            return (m_complete == x.m_complete);
            break;


        case EK_MINIMAL:
            return (m_minimal == x.m_minimal);
            break;

        default:
            break;
    }
    return false;
}

bool eprosima::fastdds::dds::xtypes::TypeObject::operator !=(
        const TypeObject& x) const
{
    return !(*this == x);
}

void eprosima::fastdds::dds::xtypes::TypeObject::_d(
        uint8_t __d)
{
    bool b = false;

    switch (m__d)
    {
        case EK_COMPLETE:
            switch (__d)
            {
                case EK_COMPLETE:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case EK_MINIMAL:
            switch (__d)
            {
                case EK_MINIMAL:
                    b = true;
                    break;
                default:
                    break;
            }
            break;

        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("Discriminator doesn't correspond with the selected union member");
    }

    m__d = __d;
}

uint8_t eprosima::fastdds::dds::xtypes::TypeObject::_d() const
{
    return m__d;
}

uint8_t& eprosima::fastdds::dds::xtypes::TypeObject::_d()
{
    return m__d;
}

void eprosima::fastdds::dds::xtypes::TypeObject::complete(
        const eprosima::fastdds::dds::xtypes::CompleteTypeObject& _complete)
{
    m_complete = _complete;
    m__d = EK_COMPLETE;

}

void eprosima::fastdds::dds::xtypes::TypeObject::complete(
        eprosima::fastdds::dds::xtypes::CompleteTypeObject&& _complete)
{
    m_complete = std::move(_complete);
    m__d = EK_COMPLETE;

}

const eprosima::fastdds::dds::xtypes::CompleteTypeObject& eprosima::fastdds::dds::xtypes::TypeObject::complete() const
{
    bool b = false;

    switch (m__d)
    {
        case EK_COMPLETE:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_complete;
}

eprosima::fastdds::dds::xtypes::CompleteTypeObject& eprosima::fastdds::dds::xtypes::TypeObject::complete()
{
    bool b = false;

    switch (m__d)
    {
        case EK_COMPLETE:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_complete;
}


void eprosima::fastdds::dds::xtypes::TypeObject::minimal(
        const eprosima::fastdds::dds::xtypes::MinimalTypeObject& _minimal)
{
    m_minimal = _minimal;
    m__d = EK_MINIMAL;

}

void eprosima::fastdds::dds::xtypes::TypeObject::minimal(
        eprosima::fastdds::dds::xtypes::MinimalTypeObject&& _minimal)
{
    m_minimal = std::move(_minimal);
    m__d = EK_MINIMAL;

}

const eprosima::fastdds::dds::xtypes::MinimalTypeObject& eprosima::fastdds::dds::xtypes::TypeObject::minimal() const
{
    bool b = false;

    switch (m__d)
    {
        case EK_MINIMAL:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_minimal;
}

eprosima::fastdds::dds::xtypes::MinimalTypeObject& eprosima::fastdds::dds::xtypes::TypeObject::minimal()
{
    bool b = false;

    switch (m__d)
    {
        case EK_MINIMAL:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_minimal;
}




eprosima::fastdds::dds::xtypes::TypeIdentifierTypeObjectPair::TypeIdentifierTypeObjectPair()
{
    m_type_identifier = new eprosima::fastdds::dds::xtypes::TypeIdentifier();



}

eprosima::fastdds::dds::xtypes::TypeIdentifierTypeObjectPair::~TypeIdentifierTypeObjectPair()
{
    delete m_type_identifier;

}

eprosima::fastdds::dds::xtypes::TypeIdentifierTypeObjectPair::TypeIdentifierTypeObjectPair(
        const TypeIdentifierTypeObjectPair& x)
{
    m_type_identifier = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_type_identifier = *x.m_type_identifier;
    m_type_object = x.m_type_object;
}

eprosima::fastdds::dds::xtypes::TypeIdentifierTypeObjectPair::TypeIdentifierTypeObjectPair(
        TypeIdentifierTypeObjectPair&& x) noexcept
{
    m_type_identifier = x.m_type_identifier;x.m_type_identifier = nullptr;
    m_type_object = std::move(x.m_type_object);
}

eprosima::fastdds::dds::xtypes::TypeIdentifierTypeObjectPair& eprosima::fastdds::dds::xtypes::TypeIdentifierTypeObjectPair::operator =(
        const TypeIdentifierTypeObjectPair& x)
{

    m_type_identifier = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_type_identifier = *x.m_type_identifier;
    m_type_object = x.m_type_object;
    return *this;
}

eprosima::fastdds::dds::xtypes::TypeIdentifierTypeObjectPair& eprosima::fastdds::dds::xtypes::TypeIdentifierTypeObjectPair::operator =(
        TypeIdentifierTypeObjectPair&& x) noexcept
{

    m_type_identifier = x.m_type_identifier;x.m_type_identifier = nullptr;
    m_type_object = std::move(x.m_type_object);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::TypeIdentifierTypeObjectPair::operator ==(
        const TypeIdentifierTypeObjectPair& x) const
{
    return (m_type_identifier == x.m_type_identifier &&
           m_type_object == x.m_type_object);
}

bool eprosima::fastdds::dds::xtypes::TypeIdentifierTypeObjectPair::operator !=(
        const TypeIdentifierTypeObjectPair& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member type_identifier
 * @param _type_identifier New value to be copied in member type_identifier
 */
void eprosima::fastdds::dds::xtypes::TypeIdentifierTypeObjectPair::type_identifier(
        const eprosima::fastdds::dds::xtypes::TypeIdentifier& _type_identifier)
{
    *m_type_identifier = _type_identifier;
}

/*!
 * @brief This function moves the value in member type_identifier
 * @param _type_identifier New value to be moved in member type_identifier
 */
void eprosima::fastdds::dds::xtypes::TypeIdentifierTypeObjectPair::type_identifier(
        eprosima::fastdds::dds::xtypes::TypeIdentifier&& _type_identifier)
{
    *m_type_identifier = std::move(_type_identifier);
}

/*!
 * @brief This function returns a constant reference to member type_identifier
 * @return Constant reference to member type_identifier
 */
const eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::TypeIdentifierTypeObjectPair::type_identifier() const
{
    return *m_type_identifier;
}

/*!
 * @brief This function returns a reference to member type_identifier
 * @return Reference to member type_identifier
 */
eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::TypeIdentifierTypeObjectPair::type_identifier()
{
    return *m_type_identifier;
}


/*!
 * @brief This function copies the value in member type_object
 * @param _type_object New value to be copied in member type_object
 */
void eprosima::fastdds::dds::xtypes::TypeIdentifierTypeObjectPair::type_object(
        const eprosima::fastdds::dds::xtypes::TypeObject& _type_object)
{
    m_type_object = _type_object;
}

/*!
 * @brief This function moves the value in member type_object
 * @param _type_object New value to be moved in member type_object
 */
void eprosima::fastdds::dds::xtypes::TypeIdentifierTypeObjectPair::type_object(
        eprosima::fastdds::dds::xtypes::TypeObject&& _type_object)
{
    m_type_object = std::move(_type_object);
}

/*!
 * @brief This function returns a constant reference to member type_object
 * @return Constant reference to member type_object
 */
const eprosima::fastdds::dds::xtypes::TypeObject& eprosima::fastdds::dds::xtypes::TypeIdentifierTypeObjectPair::type_object() const
{
    return m_type_object;
}

/*!
 * @brief This function returns a reference to member type_object
 * @return Reference to member type_object
 */
eprosima::fastdds::dds::xtypes::TypeObject& eprosima::fastdds::dds::xtypes::TypeIdentifierTypeObjectPair::type_object()
{
    return m_type_object;
}



eprosima::fastdds::dds::xtypes::TypeIdentifierPair::TypeIdentifierPair()
{
    m_type_identifier1 = new eprosima::fastdds::dds::xtypes::TypeIdentifier();


    m_type_identifier2 = new eprosima::fastdds::dds::xtypes::TypeIdentifier();


}

eprosima::fastdds::dds::xtypes::TypeIdentifierPair::~TypeIdentifierPair()
{
    delete m_type_identifier1;
    delete m_type_identifier2;
}

eprosima::fastdds::dds::xtypes::TypeIdentifierPair::TypeIdentifierPair(
        const TypeIdentifierPair& x)
{
    m_type_identifier1 = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_type_identifier1 = *x.m_type_identifier1;
    m_type_identifier2 = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_type_identifier2 = *x.m_type_identifier2;
}

eprosima::fastdds::dds::xtypes::TypeIdentifierPair::TypeIdentifierPair(
        TypeIdentifierPair&& x) noexcept
{
    m_type_identifier1 = x.m_type_identifier1;x.m_type_identifier1 = nullptr;
    m_type_identifier2 = x.m_type_identifier2;x.m_type_identifier2 = nullptr;
}

eprosima::fastdds::dds::xtypes::TypeIdentifierPair& eprosima::fastdds::dds::xtypes::TypeIdentifierPair::operator =(
        const TypeIdentifierPair& x)
{

    m_type_identifier1 = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_type_identifier1 = *x.m_type_identifier1;
    m_type_identifier2 = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_type_identifier2 = *x.m_type_identifier2;
    return *this;
}

eprosima::fastdds::dds::xtypes::TypeIdentifierPair& eprosima::fastdds::dds::xtypes::TypeIdentifierPair::operator =(
        TypeIdentifierPair&& x) noexcept
{

    m_type_identifier1 = x.m_type_identifier1;x.m_type_identifier1 = nullptr;
    m_type_identifier2 = x.m_type_identifier2;x.m_type_identifier2 = nullptr;
    return *this;
}

bool eprosima::fastdds::dds::xtypes::TypeIdentifierPair::operator ==(
        const TypeIdentifierPair& x) const
{
    return (m_type_identifier1 == x.m_type_identifier1 &&
           m_type_identifier2 == x.m_type_identifier2);
}

bool eprosima::fastdds::dds::xtypes::TypeIdentifierPair::operator !=(
        const TypeIdentifierPair& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member type_identifier1
 * @param _type_identifier1 New value to be copied in member type_identifier1
 */
void eprosima::fastdds::dds::xtypes::TypeIdentifierPair::type_identifier1(
        const eprosima::fastdds::dds::xtypes::TypeIdentifier& _type_identifier1)
{
    *m_type_identifier1 = _type_identifier1;
}

/*!
 * @brief This function moves the value in member type_identifier1
 * @param _type_identifier1 New value to be moved in member type_identifier1
 */
void eprosima::fastdds::dds::xtypes::TypeIdentifierPair::type_identifier1(
        eprosima::fastdds::dds::xtypes::TypeIdentifier&& _type_identifier1)
{
    *m_type_identifier1 = std::move(_type_identifier1);
}

/*!
 * @brief This function returns a constant reference to member type_identifier1
 * @return Constant reference to member type_identifier1
 */
const eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::TypeIdentifierPair::type_identifier1() const
{
    return *m_type_identifier1;
}

/*!
 * @brief This function returns a reference to member type_identifier1
 * @return Reference to member type_identifier1
 */
eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::TypeIdentifierPair::type_identifier1()
{
    return *m_type_identifier1;
}


/*!
 * @brief This function copies the value in member type_identifier2
 * @param _type_identifier2 New value to be copied in member type_identifier2
 */
void eprosima::fastdds::dds::xtypes::TypeIdentifierPair::type_identifier2(
        const eprosima::fastdds::dds::xtypes::TypeIdentifier& _type_identifier2)
{
    *m_type_identifier2 = _type_identifier2;
}

/*!
 * @brief This function moves the value in member type_identifier2
 * @param _type_identifier2 New value to be moved in member type_identifier2
 */
void eprosima::fastdds::dds::xtypes::TypeIdentifierPair::type_identifier2(
        eprosima::fastdds::dds::xtypes::TypeIdentifier&& _type_identifier2)
{
    *m_type_identifier2 = std::move(_type_identifier2);
}

/*!
 * @brief This function returns a constant reference to member type_identifier2
 * @return Constant reference to member type_identifier2
 */
const eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::TypeIdentifierPair::type_identifier2() const
{
    return *m_type_identifier2;
}

/*!
 * @brief This function returns a reference to member type_identifier2
 * @return Reference to member type_identifier2
 */
eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::TypeIdentifierPair::type_identifier2()
{
    return *m_type_identifier2;
}



eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize::TypeIdentfierWithSize()
{
    m_type_id = new eprosima::fastdds::dds::xtypes::TypeIdentifier();



}

eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize::~TypeIdentfierWithSize()
{
    delete m_type_id;

}

eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize::TypeIdentfierWithSize(
        const TypeIdentfierWithSize& x)
{
    m_type_id = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_type_id = *x.m_type_id;
    m_typeobject_serialized_size = x.m_typeobject_serialized_size;
}

eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize::TypeIdentfierWithSize(
        TypeIdentfierWithSize&& x) noexcept
{
    m_type_id = x.m_type_id;x.m_type_id = nullptr;
    m_typeobject_serialized_size = x.m_typeobject_serialized_size;
}

eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize& eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize::operator =(
        const TypeIdentfierWithSize& x)
{

    m_type_id = new eprosima::fastdds::dds::xtypes::TypeIdentifier();*m_type_id = *x.m_type_id;
    m_typeobject_serialized_size = x.m_typeobject_serialized_size;
    return *this;
}

eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize& eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize::operator =(
        TypeIdentfierWithSize&& x) noexcept
{

    m_type_id = x.m_type_id;x.m_type_id = nullptr;
    m_typeobject_serialized_size = x.m_typeobject_serialized_size;
    return *this;
}

bool eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize::operator ==(
        const TypeIdentfierWithSize& x) const
{
    return (m_type_id == x.m_type_id &&
           m_typeobject_serialized_size == x.m_typeobject_serialized_size);
}

bool eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize::operator !=(
        const TypeIdentfierWithSize& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member type_id
 * @param _type_id New value to be copied in member type_id
 */
void eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize::type_id(
        const eprosima::fastdds::dds::xtypes::TypeIdentifier& _type_id)
{
    *m_type_id = _type_id;
}

/*!
 * @brief This function moves the value in member type_id
 * @param _type_id New value to be moved in member type_id
 */
void eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize::type_id(
        eprosima::fastdds::dds::xtypes::TypeIdentifier&& _type_id)
{
    *m_type_id = std::move(_type_id);
}

/*!
 * @brief This function returns a constant reference to member type_id
 * @return Constant reference to member type_id
 */
const eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize::type_id() const
{
    return *m_type_id;
}

/*!
 * @brief This function returns a reference to member type_id
 * @return Reference to member type_id
 */
eprosima::fastdds::dds::xtypes::TypeIdentifier& eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize::type_id()
{
    return *m_type_id;
}


/*!
 * @brief This function sets a value in member typeobject_serialized_size
 * @param _typeobject_serialized_size New value for member typeobject_serialized_size
 */
void eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize::typeobject_serialized_size(
        uint32_t _typeobject_serialized_size)
{
    m_typeobject_serialized_size = _typeobject_serialized_size;
}

/*!
 * @brief This function returns the value of member typeobject_serialized_size
 * @return Value of member typeobject_serialized_size
 */
uint32_t eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize::typeobject_serialized_size() const
{
    return m_typeobject_serialized_size;
}

/*!
 * @brief This function returns a reference to member typeobject_serialized_size
 * @return Reference to member typeobject_serialized_size
 */
uint32_t& eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize::typeobject_serialized_size()
{
    return m_typeobject_serialized_size;
}



eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies::TypeIdentifierWithDependencies()
{

}

eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies::~TypeIdentifierWithDependencies()
{
}

eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies::TypeIdentifierWithDependencies(
        const TypeIdentifierWithDependencies& x)
{
    m_typeid_with_size = x.m_typeid_with_size;
    m_dependent_typeid_count = x.m_dependent_typeid_count;
    m_dependent_typeids = x.m_dependent_typeids;
}

eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies::TypeIdentifierWithDependencies(
        TypeIdentifierWithDependencies&& x) noexcept
{
    m_typeid_with_size = std::move(x.m_typeid_with_size);
    m_dependent_typeid_count = x.m_dependent_typeid_count;
    m_dependent_typeids = std::move(x.m_dependent_typeids);
}

eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies& eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies::operator =(
        const TypeIdentifierWithDependencies& x)
{

    m_typeid_with_size = x.m_typeid_with_size;
    m_dependent_typeid_count = x.m_dependent_typeid_count;
    m_dependent_typeids = x.m_dependent_typeids;
    return *this;
}

eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies& eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies::operator =(
        TypeIdentifierWithDependencies&& x) noexcept
{

    m_typeid_with_size = std::move(x.m_typeid_with_size);
    m_dependent_typeid_count = x.m_dependent_typeid_count;
    m_dependent_typeids = std::move(x.m_dependent_typeids);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies::operator ==(
        const TypeIdentifierWithDependencies& x) const
{
    return (m_typeid_with_size == x.m_typeid_with_size &&
           m_dependent_typeid_count == x.m_dependent_typeid_count &&
           m_dependent_typeids == x.m_dependent_typeids);
}

bool eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies::operator !=(
        const TypeIdentifierWithDependencies& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member typeid_with_size
 * @param _typeid_with_size New value to be copied in member typeid_with_size
 */
void eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies::typeid_with_size(
        const eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize& _typeid_with_size)
{
    m_typeid_with_size = _typeid_with_size;
}

/*!
 * @brief This function moves the value in member typeid_with_size
 * @param _typeid_with_size New value to be moved in member typeid_with_size
 */
void eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies::typeid_with_size(
        eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize&& _typeid_with_size)
{
    m_typeid_with_size = std::move(_typeid_with_size);
}

/*!
 * @brief This function returns a constant reference to member typeid_with_size
 * @return Constant reference to member typeid_with_size
 */
const eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize& eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies::typeid_with_size() const
{
    return m_typeid_with_size;
}

/*!
 * @brief This function returns a reference to member typeid_with_size
 * @return Reference to member typeid_with_size
 */
eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize& eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies::typeid_with_size()
{
    return m_typeid_with_size;
}


/*!
 * @brief This function sets a value in member dependent_typeid_count
 * @param _dependent_typeid_count New value for member dependent_typeid_count
 */
void eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies::dependent_typeid_count(
        int32_t _dependent_typeid_count)
{
    m_dependent_typeid_count = _dependent_typeid_count;
}

/*!
 * @brief This function returns the value of member dependent_typeid_count
 * @return Value of member dependent_typeid_count
 */
int32_t eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies::dependent_typeid_count() const
{
    return m_dependent_typeid_count;
}

/*!
 * @brief This function returns a reference to member dependent_typeid_count
 * @return Reference to member dependent_typeid_count
 */
int32_t& eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies::dependent_typeid_count()
{
    return m_dependent_typeid_count;
}


/*!
 * @brief This function copies the value in member dependent_typeids
 * @param _dependent_typeids New value to be copied in member dependent_typeids
 */
void eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies::dependent_typeids(
        const std::vector<eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize>& _dependent_typeids)
{
    m_dependent_typeids = _dependent_typeids;
}

/*!
 * @brief This function moves the value in member dependent_typeids
 * @param _dependent_typeids New value to be moved in member dependent_typeids
 */
void eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies::dependent_typeids(
        std::vector<eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize>&& _dependent_typeids)
{
    m_dependent_typeids = std::move(_dependent_typeids);
}

/*!
 * @brief This function returns a constant reference to member dependent_typeids
 * @return Constant reference to member dependent_typeids
 */
const std::vector<eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize>& eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies::dependent_typeids() const
{
    return m_dependent_typeids;
}

/*!
 * @brief This function returns a reference to member dependent_typeids
 * @return Reference to member dependent_typeids
 */
std::vector<eprosima::fastdds::dds::xtypes::TypeIdentfierWithSize>& eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies::dependent_typeids()
{
    return m_dependent_typeids;
}



eprosima::fastdds::dds::xtypes::TypeInformation::TypeInformation()
{

}

eprosima::fastdds::dds::xtypes::TypeInformation::~TypeInformation()
{
}

eprosima::fastdds::dds::xtypes::TypeInformation::TypeInformation(
        const TypeInformation& x)
{
    m_minimal = x.m_minimal;
    m_complete = x.m_complete;
}

eprosima::fastdds::dds::xtypes::TypeInformation::TypeInformation(
        TypeInformation&& x) noexcept
{
    m_minimal = std::move(x.m_minimal);
    m_complete = std::move(x.m_complete);
}

eprosima::fastdds::dds::xtypes::TypeInformation& eprosima::fastdds::dds::xtypes::TypeInformation::operator =(
        const TypeInformation& x)
{

    m_minimal = x.m_minimal;
    m_complete = x.m_complete;
    return *this;
}

eprosima::fastdds::dds::xtypes::TypeInformation& eprosima::fastdds::dds::xtypes::TypeInformation::operator =(
        TypeInformation&& x) noexcept
{

    m_minimal = std::move(x.m_minimal);
    m_complete = std::move(x.m_complete);
    return *this;
}

bool eprosima::fastdds::dds::xtypes::TypeInformation::operator ==(
        const TypeInformation& x) const
{
    return (m_minimal == x.m_minimal &&
           m_complete == x.m_complete);
}

bool eprosima::fastdds::dds::xtypes::TypeInformation::operator !=(
        const TypeInformation& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member minimal
 * @param _minimal New value to be copied in member minimal
 */
void eprosima::fastdds::dds::xtypes::TypeInformation::minimal(
        const eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies& _minimal)
{
    m_minimal = _minimal;
}

/*!
 * @brief This function moves the value in member minimal
 * @param _minimal New value to be moved in member minimal
 */
void eprosima::fastdds::dds::xtypes::TypeInformation::minimal(
        eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies&& _minimal)
{
    m_minimal = std::move(_minimal);
}

/*!
 * @brief This function returns a constant reference to member minimal
 * @return Constant reference to member minimal
 */
const eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies& eprosima::fastdds::dds::xtypes::TypeInformation::minimal() const
{
    return m_minimal;
}

/*!
 * @brief This function returns a reference to member minimal
 * @return Reference to member minimal
 */
eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies& eprosima::fastdds::dds::xtypes::TypeInformation::minimal()
{
    return m_minimal;
}


/*!
 * @brief This function copies the value in member complete
 * @param _complete New value to be copied in member complete
 */
void eprosima::fastdds::dds::xtypes::TypeInformation::complete(
        const eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies& _complete)
{
    m_complete = _complete;
}

/*!
 * @brief This function moves the value in member complete
 * @param _complete New value to be moved in member complete
 */
void eprosima::fastdds::dds::xtypes::TypeInformation::complete(
        eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies&& _complete)
{
    m_complete = std::move(_complete);
}

/*!
 * @brief This function returns a constant reference to member complete
 * @return Constant reference to member complete
 */
const eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies& eprosima::fastdds::dds::xtypes::TypeInformation::complete() const
{
    return m_complete;
}

/*!
 * @brief This function returns a reference to member complete
 * @return Reference to member complete
 */
eprosima::fastdds::dds::xtypes::TypeIdentifierWithDependencies& eprosima::fastdds::dds::xtypes::TypeInformation::complete()
{
    return m_complete;
}







// Include auxiliary functions like for serializing/deserializing.
#include "TypeObjectCdrAux.ipp"
