// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file monitorservice_typesPubSubTypes.h
 * This header file contains the declaration of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#ifndef _FAST_DDS_GENERATED_EPROSIMA_FASTDDS_STATISTICS_MONITORSERVICE_TYPES_PUBSUBTYPES_H_
#define _FAST_DDS_GENERATED_EPROSIMA_FASTDDS_STATISTICS_MONITORSERVICE_TYPES_PUBSUBTYPES_H_

#include <fastdds/dds/topic/TopicDataType.hpp>
#include <fastrtps/utils/md5.h>

#include "monitorservice_types.h"

#include "typesPubSubTypes.h"

#if !defined(GEN_API_VER) || (GEN_API_VER != 1)
#error \
    Generated monitorservice_types is not compatible with current installed Fast DDS. Please, regenerate it with fastddsgen.
#endif  // GEN_API_VER

namespace eprosima
{
    namespace fastdds
    {
        namespace statistics
        {


            /*!
             * @brief This class represents the TopicDataType of the type Connection defined by the user in the IDL file.
             * @ingroup monitorservice_types
             */
            class ConnectionPubSubType : public eprosima::fastdds::dds::TopicDataType
            {
            public:

                typedef Connection type;

                eProsima_user_DllExport ConnectionPubSubType();

                eProsima_user_DllExport virtual ~ConnectionPubSubType() override;

                eProsima_user_DllExport virtual bool serialize(
                        void* data,
                        eprosima::fastrtps::rtps::SerializedPayload_t* payload) override;

                eProsima_user_DllExport virtual bool deserialize(
                        eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                        void* data) override;

                eProsima_user_DllExport virtual std::function<uint32_t()> getSerializedSizeProvider(
                        void* data) override;

                eProsima_user_DllExport virtual bool getKey(
                        void* data,
                        eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                        bool force_md5 = false) override;

                eProsima_user_DllExport virtual void* createData() override;

                eProsima_user_DllExport virtual void deleteData(
                        void* data) override;

            #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                eProsima_user_DllExport inline bool is_bounded() const override
                {
                    return false;
                }

            #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

            #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                eProsima_user_DllExport inline bool is_plain() const override
                {
                    return false;
                }

            #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

            #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                eProsima_user_DllExport inline bool construct_sample(
                        void* memory) const override
                {
                    (void)memory;
                    return false;
                }

            #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                MD5 m_md5;
                unsigned char* m_keyBuffer;

            };

            #ifndef SWIG
            namespace detail {

                template<typename Tag, typename Tag::type M>
                struct QosPolicyCount_s_rob
                {
                    friend constexpr typename Tag::type get(
                            Tag)
                    {
                        return M;
                    }
                };

                struct QosPolicyCount_s_f
                {
                    typedef uint32_t QosPolicyCount_s::* type;
                    friend constexpr type get(
                            QosPolicyCount_s_f);
                };

                template struct QosPolicyCount_s_rob<QosPolicyCount_s_f, &QosPolicyCount_s::m_count>;

                template <typename T, typename Tag>
                inline size_t constexpr QosPolicyCount_s_offset_of() {
                    return ((::size_t) &reinterpret_cast<char const volatile&>((((T*)0)->*get(Tag()))));
                }
            }
            #endif

            /*!
             * @brief This class represents the TopicDataType of the type QosPolicyCount_s defined by the user in the IDL file.
             * @ingroup monitorservice_types
             */
            class QosPolicyCount_sPubSubType : public eprosima::fastdds::dds::TopicDataType
            {
            public:

                typedef QosPolicyCount_s type;

                eProsima_user_DllExport QosPolicyCount_sPubSubType();

                eProsima_user_DllExport virtual ~QosPolicyCount_sPubSubType() override;

                eProsima_user_DllExport virtual bool serialize(
                        void* data,
                        eprosima::fastrtps::rtps::SerializedPayload_t* payload) override;

                eProsima_user_DllExport virtual bool deserialize(
                        eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                        void* data) override;

                eProsima_user_DllExport virtual std::function<uint32_t()> getSerializedSizeProvider(
                        void* data) override;

                eProsima_user_DllExport virtual bool getKey(
                        void* data,
                        eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                        bool force_md5 = false) override;

                eProsima_user_DllExport virtual void* createData() override;

                eProsima_user_DllExport virtual void deleteData(
                        void* data) override;

            #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                eProsima_user_DllExport inline bool is_bounded() const override
                {
                    return true;
                }

            #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

            #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                eProsima_user_DllExport inline bool is_plain() const override
                {
                    return is_plain_impl();
                }

            #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

            #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                eProsima_user_DllExport inline bool construct_sample(
                        void* memory) const override
                {
                    new (memory) QosPolicyCount_s();
                    return true;
                }

            #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                MD5 m_md5;
                unsigned char* m_keyBuffer;

            private:

                static constexpr bool is_plain_impl()
                {
                    return 8ULL == (detail::QosPolicyCount_s_offset_of<QosPolicyCount_s, detail::QosPolicyCount_s_f>() + sizeof(uint32_t));

                }};

            #ifndef SWIG
            namespace detail {

                template<typename Tag, typename Tag::type M>
                struct BaseStatus_s_rob
                {
                    friend constexpr typename Tag::type get(
                            Tag)
                    {
                        return M;
                    }
                };

                struct BaseStatus_s_f
                {
                    typedef uint32_t BaseStatus_s::* type;
                    friend constexpr type get(
                            BaseStatus_s_f);
                };

                template struct BaseStatus_s_rob<BaseStatus_s_f, &BaseStatus_s::m_total_count>;

                template <typename T, typename Tag>
                inline size_t constexpr BaseStatus_s_offset_of() {
                    return ((::size_t) &reinterpret_cast<char const volatile&>((((T*)0)->*get(Tag()))));
                }
            }
            #endif

            /*!
             * @brief This class represents the TopicDataType of the type BaseStatus_s defined by the user in the IDL file.
             * @ingroup monitorservice_types
             */
            class BaseStatus_sPubSubType : public eprosima::fastdds::dds::TopicDataType
            {
            public:

                typedef BaseStatus_s type;

                eProsima_user_DllExport BaseStatus_sPubSubType();

                eProsima_user_DllExport virtual ~BaseStatus_sPubSubType() override;

                eProsima_user_DllExport virtual bool serialize(
                        void* data,
                        eprosima::fastrtps::rtps::SerializedPayload_t* payload) override;

                eProsima_user_DllExport virtual bool deserialize(
                        eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                        void* data) override;

                eProsima_user_DllExport virtual std::function<uint32_t()> getSerializedSizeProvider(
                        void* data) override;

                eProsima_user_DllExport virtual bool getKey(
                        void* data,
                        eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                        bool force_md5 = false) override;

                eProsima_user_DllExport virtual void* createData() override;

                eProsima_user_DllExport virtual void deleteData(
                        void* data) override;

            #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                eProsima_user_DllExport inline bool is_bounded() const override
                {
                    return true;
                }

            #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

            #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                eProsima_user_DllExport inline bool is_plain() const override
                {
                    return is_plain_impl();
                }

            #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

            #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                eProsima_user_DllExport inline bool construct_sample(
                        void* memory) const override
                {
                    new (memory) BaseStatus_s();
                    return true;
                }

            #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                MD5 m_md5;
                unsigned char* m_keyBuffer;

            private:

                static constexpr bool is_plain_impl()
                {
                    return 4ULL == (detail::BaseStatus_s_offset_of<BaseStatus_s, detail::BaseStatus_s_f>() + sizeof(uint32_t));

                }};
            typedef std::vector<eprosima::fastdds::statistics::QosPolicyCount_s> QosPolicyCountSeq_s;

            /*!
             * @brief This class represents the TopicDataType of the type IncompatibleQoSStatus_s defined by the user in the IDL file.
             * @ingroup monitorservice_types
             */
            class IncompatibleQoSStatus_sPubSubType : public eprosima::fastdds::dds::TopicDataType
            {
            public:

                typedef IncompatibleQoSStatus_s type;

                eProsima_user_DllExport IncompatibleQoSStatus_sPubSubType();

                eProsima_user_DllExport virtual ~IncompatibleQoSStatus_sPubSubType() override;

                eProsima_user_DllExport virtual bool serialize(
                        void* data,
                        eprosima::fastrtps::rtps::SerializedPayload_t* payload) override;

                eProsima_user_DllExport virtual bool deserialize(
                        eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                        void* data) override;

                eProsima_user_DllExport virtual std::function<uint32_t()> getSerializedSizeProvider(
                        void* data) override;

                eProsima_user_DllExport virtual bool getKey(
                        void* data,
                        eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                        bool force_md5 = false) override;

                eProsima_user_DllExport virtual void* createData() override;

                eProsima_user_DllExport virtual void deleteData(
                        void* data) override;

            #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                eProsima_user_DllExport inline bool is_bounded() const override
                {
                    return false;
                }

            #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

            #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                eProsima_user_DllExport inline bool is_plain() const override
                {
                    return false;
                }

            #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

            #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                eProsima_user_DllExport inline bool construct_sample(
                        void* memory) const override
                {
                    (void)memory;
                    return false;
                }

            #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                MD5 m_md5;
                unsigned char* m_keyBuffer;

            };

            #ifndef SWIG
            namespace detail {

                template<typename Tag, typename Tag::type M>
                struct LivelinessChangedStatus_s_rob
                {
                    friend constexpr typename Tag::type get(
                            Tag)
                    {
                        return M;
                    }
                };

                struct LivelinessChangedStatus_s_f
                {
                    typedef std::array<uint8_t, 16> LivelinessChangedStatus_s::* type;
                    friend constexpr type get(
                            LivelinessChangedStatus_s_f);
                };

                template struct LivelinessChangedStatus_s_rob<LivelinessChangedStatus_s_f, &LivelinessChangedStatus_s::m_last_publication_handle>;

                template <typename T, typename Tag>
                inline size_t constexpr LivelinessChangedStatus_s_offset_of() {
                    return ((::size_t) &reinterpret_cast<char const volatile&>((((T*)0)->*get(Tag()))));
                }
            }
            #endif

            /*!
             * @brief This class represents the TopicDataType of the type LivelinessChangedStatus_s defined by the user in the IDL file.
             * @ingroup monitorservice_types
             */
            class LivelinessChangedStatus_sPubSubType : public eprosima::fastdds::dds::TopicDataType
            {
            public:

                typedef LivelinessChangedStatus_s type;

                eProsima_user_DllExport LivelinessChangedStatus_sPubSubType();

                eProsima_user_DllExport virtual ~LivelinessChangedStatus_sPubSubType() override;

                eProsima_user_DllExport virtual bool serialize(
                        void* data,
                        eprosima::fastrtps::rtps::SerializedPayload_t* payload) override;

                eProsima_user_DllExport virtual bool deserialize(
                        eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                        void* data) override;

                eProsima_user_DllExport virtual std::function<uint32_t()> getSerializedSizeProvider(
                        void* data) override;

                eProsima_user_DllExport virtual bool getKey(
                        void* data,
                        eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                        bool force_md5 = false) override;

                eProsima_user_DllExport virtual void* createData() override;

                eProsima_user_DllExport virtual void deleteData(
                        void* data) override;

            #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                eProsima_user_DllExport inline bool is_bounded() const override
                {
                    return true;
                }

            #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

            #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                eProsima_user_DllExport inline bool is_plain() const override
                {
                    return is_plain_impl();
                }

            #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

            #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                eProsima_user_DllExport inline bool construct_sample(
                        void* memory) const override
                {
                    new (memory) LivelinessChangedStatus_s();
                    return true;
                }

            #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                MD5 m_md5;
                unsigned char* m_keyBuffer;

            private:

                static constexpr bool is_plain_impl()
                {
                    return 24ULL == (detail::LivelinessChangedStatus_s_offset_of<LivelinessChangedStatus_s, detail::LivelinessChangedStatus_s_f>() + sizeof(std::array<uint8_t, 16>));

                }};

            #ifndef SWIG
            namespace detail {

                template<typename Tag, typename Tag::type M>
                struct DeadlineMissedStatus_s_rob
                {
                    friend constexpr typename Tag::type get(
                            Tag)
                    {
                        return M;
                    }
                };

                struct DeadlineMissedStatus_s_f
                {
                    typedef std::array<uint8_t, 16> DeadlineMissedStatus_s::* type;
                    friend constexpr type get(
                            DeadlineMissedStatus_s_f);
                };

                template struct DeadlineMissedStatus_s_rob<DeadlineMissedStatus_s_f, &DeadlineMissedStatus_s::m_last_instance_handle>;

                template <typename T, typename Tag>
                inline size_t constexpr DeadlineMissedStatus_s_offset_of() {
                    return ((::size_t) &reinterpret_cast<char const volatile&>((((T*)0)->*get(Tag()))));
                }
            }
            #endif

            /*!
             * @brief This class represents the TopicDataType of the type DeadlineMissedStatus_s defined by the user in the IDL file.
             * @ingroup monitorservice_types
             */
            class DeadlineMissedStatus_sPubSubType : public eprosima::fastdds::dds::TopicDataType
            {
            public:

                typedef DeadlineMissedStatus_s type;

                eProsima_user_DllExport DeadlineMissedStatus_sPubSubType();

                eProsima_user_DllExport virtual ~DeadlineMissedStatus_sPubSubType() override;

                eProsima_user_DllExport virtual bool serialize(
                        void* data,
                        eprosima::fastrtps::rtps::SerializedPayload_t* payload) override;

                eProsima_user_DllExport virtual bool deserialize(
                        eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                        void* data) override;

                eProsima_user_DllExport virtual std::function<uint32_t()> getSerializedSizeProvider(
                        void* data) override;

                eProsima_user_DllExport virtual bool getKey(
                        void* data,
                        eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                        bool force_md5 = false) override;

                eProsima_user_DllExport virtual void* createData() override;

                eProsima_user_DllExport virtual void deleteData(
                        void* data) override;

            #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                eProsima_user_DllExport inline bool is_bounded() const override
                {
                    return true;
                }

            #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

            #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                eProsima_user_DllExport inline bool is_plain() const override
                {
                    return is_plain_impl();
                }

            #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

            #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                eProsima_user_DllExport inline bool construct_sample(
                        void* memory) const override
                {
                    new (memory) DeadlineMissedStatus_s();
                    return true;
                }

            #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                MD5 m_md5;
                unsigned char* m_keyBuffer;

            private:

                static constexpr bool is_plain_impl()
                {
                    return 20ULL == (detail::DeadlineMissedStatus_s_offset_of<DeadlineMissedStatus_s, detail::DeadlineMissedStatus_s_f>() + sizeof(std::array<uint8_t, 16>));

                }};
            typedef eprosima::fastdds::statistics::BaseStatus_s LivelinessLostStatus_s;
            typedef eprosima::fastdds::statistics::BaseStatus_s InconsistentTopicStatus_s;
            typedef eprosima::fastdds::statistics::BaseStatus_s SampleLostStatus_s;



            /*!
             * @brief This class represents the TopicDataType of the type MonitorServiceStatusData defined by the user in the IDL file.
             * @ingroup monitorservice_types
             */
            class MonitorServiceStatusDataPubSubType : public eprosima::fastdds::dds::TopicDataType
            {
            public:

                typedef MonitorServiceStatusData type;

                eProsima_user_DllExport MonitorServiceStatusDataPubSubType();

                eProsima_user_DllExport virtual ~MonitorServiceStatusDataPubSubType() override;

                eProsima_user_DllExport virtual bool serialize(
                        void* data,
                        eprosima::fastrtps::rtps::SerializedPayload_t* payload) override;

                eProsima_user_DllExport virtual bool deserialize(
                        eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                        void* data) override;

                eProsima_user_DllExport virtual std::function<uint32_t()> getSerializedSizeProvider(
                        void* data) override;

                eProsima_user_DllExport virtual bool getKey(
                        void* data,
                        eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                        bool force_md5 = false) override;

                eProsima_user_DllExport virtual void* createData() override;

                eProsima_user_DllExport virtual void deleteData(
                        void* data) override;

            #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
                eProsima_user_DllExport inline bool is_bounded() const override
                {
                    return false;
                }

            #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

            #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
                eProsima_user_DllExport inline bool is_plain() const override
                {
                    return false;
                }

            #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

            #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
                eProsima_user_DllExport inline bool construct_sample(
                        void* memory) const override
                {
                    (void)memory;
                    return false;
                }

            #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

                MD5 m_md5;
                unsigned char* m_keyBuffer;

            };
        }
    }
}

#endif // _FAST_DDS_GENERATED_EPROSIMA_FASTDDS_STATISTICS_MONITORSERVICE_TYPES_PUBSUBTYPES_H_

