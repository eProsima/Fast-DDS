// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file typesTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "typesTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "types.hpp"


using namespace eprosima::fastdds::dds::xtypes;

void register_types_type_objects()
{
    static std::once_flag once_flag;
    std::call_once(once_flag, []()
            {
                eprosima::fastdds::statistics::detail::register_eprosima_fastdds_statistics_detail_EntityId_s_type_identifier();

                eprosima::fastdds::statistics::detail::register_eprosima_fastdds_statistics_detail_GuidPrefix_s_type_identifier();

                eprosima::fastdds::statistics::detail::register_eprosima_fastdds_statistics_detail_GUID_s_type_identifier();

                eprosima::fastdds::statistics::detail::register_eprosima_fastdds_statistics_detail_SequenceNumber_s_type_identifier();

                eprosima::fastdds::statistics::detail::register_eprosima_fastdds_statistics_detail_SampleIdentity_s_type_identifier();

                eprosima::fastdds::statistics::detail::register_eprosima_fastdds_statistics_detail_Locator_s_type_identifier();

                eprosima::fastdds::statistics::register_eprosima_fastdds_statistics_DiscoveryTime_type_identifier();

                eprosima::fastdds::statistics::register_eprosima_fastdds_statistics_EntityCount_type_identifier();

                eprosima::fastdds::statistics::register_eprosima_fastdds_statistics_SampleIdentityCount_type_identifier();

                eprosima::fastdds::statistics::register_eprosima_fastdds_statistics_Entity2LocatorTraffic_type_identifier();

                eprosima::fastdds::statistics::register_eprosima_fastdds_statistics_WriterReaderData_type_identifier();

                eprosima::fastdds::statistics::register_eprosima_fastdds_statistics_Locator2LocatorData_type_identifier();

                eprosima::fastdds::statistics::register_eprosima_fastdds_statistics_EntityData_type_identifier();

                eprosima::fastdds::statistics::register_eprosima_fastdds_statistics_PhysicalData_type_identifier();

                eprosima::fastdds::statistics::register_eprosima_fastdds_statistics_Data_type_identifier();

            });
}

namespace eprosima {
namespace fastdds {
namespace statistics {
namespace detail {
void register_eprosima_fastdds_statistics_detail_EntityId_s_type_identifier()
{
    {
        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::EntityId_s";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteStructHeader header;
        header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
        CompleteStructMemberSeq member_seq;
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_uint8_t_4", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_byte", type_ids);

                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier {nullptr};
                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                {
                    element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                {
                    element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind = EK_COMPLETE;
                if (TK_NONE == type_ids.type_identifier2()._d())
                {
                    equiv_kind = EK_BOTH;
                }
                CollectionElementFlag element_flags = 0;
                PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(4));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_4"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(4));

                    PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_4"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_array_uint8_t_4", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_array_uint8_t_4: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "eprosima::fastdds::statistics::detail::EntityId_s already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "eprosima::fastdds::statistics::detail::EntityId_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_eprosima_fastdds_statistics_detail_GuidPrefix_s_type_identifier()
{
    {
        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GuidPrefix_s";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteStructHeader header;
        header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
        CompleteStructMemberSeq member_seq;
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_uint8_t_12", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_byte", type_ids);

                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier {nullptr};
                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                {
                    element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                {
                    element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind = EK_COMPLETE;
                if (TK_NONE == type_ids.type_identifier2()._d())
                {
                    equiv_kind = EK_BOTH;
                }
                CollectionElementFlag element_flags = 0;
                PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(12));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_12"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(12));

                    PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_12"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_array_uint8_t_12", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_array_uint8_t_12: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "eprosima::fastdds::statistics::detail::GuidPrefix_s already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "eprosima::fastdds::statistics::detail::GuidPrefix_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_eprosima_fastdds_statistics_detail_GUID_s_type_identifier()
{
    {
        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GUID_s";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteStructHeader header;
        header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
        CompleteStructMemberSeq member_seq;
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GuidPrefix_s";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_array_uint8_t_12", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_byte", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            TypeIdentifier* element_identifier {nullptr};
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Array element TypeIdentifier inconsistent.");
                                return;
                            }
                            EquivalenceKind equiv_kind = EK_COMPLETE;
                            if (TK_NONE == type_ids.type_identifier2()._d())
                            {
                                equiv_kind = EK_BOTH;
                            }
                            CollectionElementFlag element_flags = 0;
                            PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                            std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                            if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                            {
                                SBoundSeq array_bound_seq;
                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(12));

                                PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_12"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                LBoundSeq array_bound_seq;
                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(12));

                                PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_12"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_array_uint8_t_12", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_array_uint8_t_12: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure value member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "value";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "eprosima::fastdds::statistics::detail::GuidPrefix_s already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "eprosima::fastdds::statistics::detail::GuidPrefix_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure guidPrefix member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "guidPrefix";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::EntityId_s";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_array_uint8_t_4", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_byte", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            TypeIdentifier* element_identifier {nullptr};
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Array element TypeIdentifier inconsistent.");
                                return;
                            }
                            EquivalenceKind equiv_kind = EK_COMPLETE;
                            if (TK_NONE == type_ids.type_identifier2()._d())
                            {
                                equiv_kind = EK_BOTH;
                            }
                            CollectionElementFlag element_flags = 0;
                            PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                            std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                            if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                            {
                                SBoundSeq array_bound_seq;
                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(4));

                                PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_4"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                LBoundSeq array_bound_seq;
                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(4));

                                PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_4"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_array_uint8_t_4", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_array_uint8_t_4: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure value member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "value";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "eprosima::fastdds::statistics::detail::EntityId_s already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "eprosima::fastdds::statistics::detail::EntityId_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000001;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure entityId member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "entityId";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "eprosima::fastdds::statistics::detail::GUID_s already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "eprosima::fastdds::statistics::detail::GUID_s", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "eprosima::fastdds::statistics::detail::GUID_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_eprosima_fastdds_statistics_detail_SequenceNumber_s_type_identifier()
{
    {
        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::SequenceNumber_s";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteStructHeader header;
        header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
        CompleteStructMemberSeq member_seq;
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "high Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure high member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "high";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "low Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000001;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure low member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "low";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "eprosima::fastdds::statistics::detail::SequenceNumber_s already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "eprosima::fastdds::statistics::detail::SequenceNumber_s", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "eprosima::fastdds::statistics::detail::SequenceNumber_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_eprosima_fastdds_statistics_detail_SampleIdentity_s_type_identifier()
{
    {
        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::SampleIdentity_s";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteStructHeader header;
        header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
        CompleteStructMemberSeq member_seq;
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "eprosima::fastdds::statistics::detail::GUID_s", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GUID_s";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GuidPrefix_s";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_array_uint8_t_12", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_byte", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        TypeIdentifier* element_identifier {nullptr};
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Array element TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        EquivalenceKind equiv_kind = EK_COMPLETE;
                                        if (TK_NONE == type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_BOTH;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                        if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                        {
                                            SBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(12));

                                            PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_12"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(12));

                                            PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_12"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_array_uint8_t_12", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_uint8_t_12: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure value member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "value";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::statistics::detail::GuidPrefix_s already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::statistics::detail::GuidPrefix_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure guidPrefix member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "guidPrefix";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::EntityId_s";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_array_uint8_t_4", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_byte", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        TypeIdentifier* element_identifier {nullptr};
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Array element TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        EquivalenceKind equiv_kind = EK_COMPLETE;
                                        if (TK_NONE == type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_BOTH;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                        if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                        {
                                            SBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(4));

                                            PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_4"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(4));

                                            PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_4"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_array_uint8_t_4", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_uint8_t_4: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure value member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "value";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::statistics::detail::EntityId_s already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::statistics::detail::EntityId_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure entityId member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "entityId";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "eprosima::fastdds::statistics::detail::GUID_s already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "eprosima::fastdds::statistics::detail::GUID_s", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "eprosima::fastdds::statistics::detail::GUID_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure writer_guid member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "writer_guid";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "eprosima::fastdds::statistics::detail::SequenceNumber_s", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::SequenceNumber_s";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "high Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure high member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "high";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_uint32_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "low Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure low member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "low";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "eprosima::fastdds::statistics::detail::SequenceNumber_s already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "eprosima::fastdds::statistics::detail::SequenceNumber_s", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "eprosima::fastdds::statistics::detail::SequenceNumber_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000001;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure sequence_number member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "sequence_number";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "eprosima::fastdds::statistics::detail::SampleIdentity_s already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "eprosima::fastdds::statistics::detail::SampleIdentity_s", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "eprosima::fastdds::statistics::detail::SampleIdentity_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_eprosima_fastdds_statistics_detail_Locator_s_type_identifier()
{
    {
        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::Locator_s";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteStructHeader header;
        header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
        CompleteStructMemberSeq member_seq;
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "kind Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure kind member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "kind";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "port Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000001;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure port member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "port";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_uint8_t_16", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_byte", type_ids);

                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier {nullptr};
                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                {
                    element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                {
                    element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind = EK_COMPLETE;
                if (TK_NONE == type_ids.type_identifier2()._d())
                {
                    equiv_kind = EK_BOTH;
                }
                CollectionElementFlag element_flags = 0;
                PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(16));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_16"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_uint8_t_16 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(16));

                    PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_16"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_uint8_t_16 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_array_uint8_t_16", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_array_uint8_t_16: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000002;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure address member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "address";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "eprosima::fastdds::statistics::detail::Locator_s already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "eprosima::fastdds::statistics::detail::Locator_s", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "eprosima::fastdds::statistics::detail::Locator_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}

} // namespace detail
void register_eprosima_fastdds_statistics_DiscoveryTime_type_identifier()
{
    {
        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        QualifiedTypeName type_name = "eprosima::fastdds::statistics::DiscoveryTime";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteStructHeader header;
        header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
        CompleteStructMemberSeq member_seq;
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, true, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "eprosima::fastdds::statistics::detail::GUID_s", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GUID_s";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GuidPrefix_s";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_array_uint8_t_12", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_byte", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        TypeIdentifier* element_identifier {nullptr};
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Array element TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        EquivalenceKind equiv_kind = EK_COMPLETE;
                                        if (TK_NONE == type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_BOTH;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                        if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                        {
                                            SBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(12));

                                            PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_12"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(12));

                                            PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_12"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_array_uint8_t_12", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_uint8_t_12: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure value member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "value";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::statistics::detail::GuidPrefix_s already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::statistics::detail::GuidPrefix_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure guidPrefix member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "guidPrefix";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::EntityId_s";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_array_uint8_t_4", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_byte", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        TypeIdentifier* element_identifier {nullptr};
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Array element TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        EquivalenceKind equiv_kind = EK_COMPLETE;
                                        if (TK_NONE == type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_BOTH;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                        if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                        {
                                            SBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(4));

                                            PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_4"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(4));

                                            PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_4"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_array_uint8_t_4", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_uint8_t_4: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure value member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "value";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::statistics::detail::EntityId_s already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::statistics::detail::EntityId_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure entityId member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "entityId";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "eprosima::fastdds::statistics::detail::GUID_s already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "eprosima::fastdds::statistics::detail::GUID_s", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "eprosima::fastdds::statistics::detail::GUID_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure local_participant_guid member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "local_participant_guid";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            AppliedAnnotationSeq tmp_ann_custom;
            eprosima::fastcdr::optional<std::string> unit;
            eprosima::fastcdr::optional<AnnotationParameterValue> min;
            eprosima::fastcdr::optional<AnnotationParameterValue> max;
            eprosima::fastcdr::optional<std::string> hash_id;
            if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
            {
                member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
            }
            if (!tmp_ann_custom.empty())
            {
                ann_custom = tmp_ann_custom;
            }
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, true, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "eprosima::fastdds::statistics::detail::GUID_s", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GUID_s";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GuidPrefix_s";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_array_uint8_t_12", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_byte", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        TypeIdentifier* element_identifier {nullptr};
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Array element TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        EquivalenceKind equiv_kind = EK_COMPLETE;
                                        if (TK_NONE == type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_BOTH;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                        if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                        {
                                            SBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(12));

                                            PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_12"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(12));

                                            PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_12"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_array_uint8_t_12", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_uint8_t_12: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure value member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "value";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::statistics::detail::GuidPrefix_s already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::statistics::detail::GuidPrefix_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure guidPrefix member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "guidPrefix";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::EntityId_s";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_array_uint8_t_4", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_byte", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        TypeIdentifier* element_identifier {nullptr};
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Array element TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        EquivalenceKind equiv_kind = EK_COMPLETE;
                                        if (TK_NONE == type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_BOTH;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                        if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                        {
                                            SBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(4));

                                            PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_4"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(4));

                                            PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_4"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_array_uint8_t_4", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_uint8_t_4: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure value member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "value";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::statistics::detail::EntityId_s already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::statistics::detail::EntityId_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure entityId member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "entityId";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "eprosima::fastdds::statistics::detail::GUID_s already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "eprosima::fastdds::statistics::detail::GUID_s", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "eprosima::fastdds::statistics::detail::GUID_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000001;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure remote_entity_guid member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "remote_entity_guid";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            AppliedAnnotationSeq tmp_ann_custom;
            eprosima::fastcdr::optional<std::string> unit;
            eprosima::fastcdr::optional<AnnotationParameterValue> min;
            eprosima::fastcdr::optional<AnnotationParameterValue> max;
            eprosima::fastcdr::optional<std::string> hash_id;
            if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
            {
                member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
            }
            if (!tmp_ann_custom.empty())
            {
                ann_custom = tmp_ann_custom;
            }
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "time Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000002;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure time member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "time";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind("TI_STRING8_SMALL");
                if (type_id_kind == "TI_STRING8_SMALL")
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind == "TI_STRING8_LARGE")
                {
                    LBound bound = 255;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Unknown String kind.");
                    return;
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000003;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure host member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "host";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind("TI_STRING8_SMALL");
                if (type_id_kind == "TI_STRING8_SMALL")
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind == "TI_STRING8_LARGE")
                {
                    LBound bound = 255;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Unknown String kind.");
                    return;
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000004;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure user member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "user";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind("TI_STRING8_SMALL");
                if (type_id_kind == "TI_STRING8_SMALL")
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind == "TI_STRING8_LARGE")
                {
                    LBound bound = 255;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Unknown String kind.");
                    return;
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000005;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure process member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "process";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "eprosima::fastdds::statistics::DiscoveryTime already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "eprosima::fastdds::statistics::DiscoveryTime", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "eprosima::fastdds::statistics::DiscoveryTime: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_eprosima_fastdds_statistics_EntityCount_type_identifier()
{
    {
        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        QualifiedTypeName type_name = "eprosima::fastdds::statistics::EntityCount";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteStructHeader header;
        header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
        CompleteStructMemberSeq member_seq;
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, true, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "eprosima::fastdds::statistics::detail::GUID_s", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GUID_s";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GuidPrefix_s";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_array_uint8_t_12", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_byte", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        TypeIdentifier* element_identifier {nullptr};
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Array element TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        EquivalenceKind equiv_kind = EK_COMPLETE;
                                        if (TK_NONE == type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_BOTH;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                        if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                        {
                                            SBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(12));

                                            PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_12"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(12));

                                            PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_12"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_array_uint8_t_12", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_uint8_t_12: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure value member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "value";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::statistics::detail::GuidPrefix_s already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::statistics::detail::GuidPrefix_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure guidPrefix member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "guidPrefix";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::EntityId_s";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_array_uint8_t_4", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_byte", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        TypeIdentifier* element_identifier {nullptr};
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Array element TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        EquivalenceKind equiv_kind = EK_COMPLETE;
                                        if (TK_NONE == type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_BOTH;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                        if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                        {
                                            SBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(4));

                                            PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_4"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(4));

                                            PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_4"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_array_uint8_t_4", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_uint8_t_4: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure value member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "value";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::statistics::detail::EntityId_s already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::statistics::detail::EntityId_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure entityId member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "entityId";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "eprosima::fastdds::statistics::detail::GUID_s already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "eprosima::fastdds::statistics::detail::GUID_s", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "eprosima::fastdds::statistics::detail::GUID_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure guid member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "guid";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            AppliedAnnotationSeq tmp_ann_custom;
            eprosima::fastcdr::optional<std::string> unit;
            eprosima::fastcdr::optional<AnnotationParameterValue> min;
            eprosima::fastcdr::optional<AnnotationParameterValue> max;
            eprosima::fastcdr::optional<std::string> hash_id;
            if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
            {
                member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
            }
            if (!tmp_ann_custom.empty())
            {
                ann_custom = tmp_ann_custom;
            }
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "count Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000001;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure count member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "count";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "eprosima::fastdds::statistics::EntityCount already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "eprosima::fastdds::statistics::EntityCount", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "eprosima::fastdds::statistics::EntityCount: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_eprosima_fastdds_statistics_SampleIdentityCount_type_identifier()
{
    {
        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        QualifiedTypeName type_name = "eprosima::fastdds::statistics::SampleIdentityCount";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteStructHeader header;
        header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
        CompleteStructMemberSeq member_seq;
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, true, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "eprosima::fastdds::statistics::detail::SampleIdentity_s", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::SampleIdentity_s";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::statistics::detail::GUID_s", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GUID_s";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        {
                                            StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                                    false, false);
                                            ReturnCode_t return_code;
                                            TypeIdentifierPair type_ids;
                                            QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GuidPrefix_s";
                                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                            CompleteStructHeader header;
                                            header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                            CompleteStructMemberSeq member_seq;
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "anonymous_array_uint8_t_12", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_byte", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    TypeIdentifier* element_identifier {nullptr};
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Array element TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    EquivalenceKind equiv_kind = EK_COMPLETE;
                                                    if (TK_NONE == type_ids.type_identifier2()._d())
                                                    {
                                                        equiv_kind = EK_BOTH;
                                                    }
                                                    CollectionElementFlag element_flags = 0;
                                                    PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                                    std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                                    if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                                    {
                                                        SBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(12));

                                                        PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_12"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        LBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(12));

                                                        PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_12"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "anonymous_array_uint8_t_12", type_ids);
                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "anonymous_array_uint8_t_12: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000000;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure value member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "value";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "eprosima::fastdds::statistics::detail::GuidPrefix_s already registered in TypeObjectRegistry for a different type.");
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "eprosima::fastdds::statistics::detail::GuidPrefix_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure guidPrefix member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "guidPrefix";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        {
                                            StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                                    false, false);
                                            ReturnCode_t return_code;
                                            TypeIdentifierPair type_ids;
                                            QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::EntityId_s";
                                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                            CompleteStructHeader header;
                                            header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                            CompleteStructMemberSeq member_seq;
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "anonymous_array_uint8_t_4", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_byte", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    TypeIdentifier* element_identifier {nullptr};
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Array element TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    EquivalenceKind equiv_kind = EK_COMPLETE;
                                                    if (TK_NONE == type_ids.type_identifier2()._d())
                                                    {
                                                        equiv_kind = EK_BOTH;
                                                    }
                                                    CollectionElementFlag element_flags = 0;
                                                    PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                                    std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                                    if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                                    {
                                                        SBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(4));

                                                        PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_4"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        LBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(4));

                                                        PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_4"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "anonymous_array_uint8_t_4", type_ids);
                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "anonymous_array_uint8_t_4: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000000;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure value member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "value";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "eprosima::fastdds::statistics::detail::EntityId_s already registered in TypeObjectRegistry for a different type.");
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "eprosima::fastdds::statistics::detail::EntityId_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000001;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure entityId member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "entityId";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::statistics::detail::GUID_s already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::statistics::detail::GUID_s", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::statistics::detail::GUID_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure writer_guid member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "writer_guid";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::statistics::detail::SequenceNumber_s", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::SequenceNumber_s";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_int32_t", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "high Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure high member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "high";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_uint32_t", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "low Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000001;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure low member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "low";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::statistics::detail::SequenceNumber_s already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::statistics::detail::SequenceNumber_s", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::statistics::detail::SequenceNumber_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure sequence_number member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "sequence_number";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "eprosima::fastdds::statistics::detail::SampleIdentity_s already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "eprosima::fastdds::statistics::detail::SampleIdentity_s", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "eprosima::fastdds::statistics::detail::SampleIdentity_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure sample_id member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "sample_id";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            AppliedAnnotationSeq tmp_ann_custom;
            eprosima::fastcdr::optional<std::string> unit;
            eprosima::fastcdr::optional<AnnotationParameterValue> min;
            eprosima::fastcdr::optional<AnnotationParameterValue> max;
            eprosima::fastcdr::optional<std::string> hash_id;
            if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
            {
                member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
            }
            if (!tmp_ann_custom.empty())
            {
                ann_custom = tmp_ann_custom;
            }
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "count Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000001;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure count member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "count";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "eprosima::fastdds::statistics::SampleIdentityCount already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "eprosima::fastdds::statistics::SampleIdentityCount", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "eprosima::fastdds::statistics::SampleIdentityCount: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_eprosima_fastdds_statistics_Entity2LocatorTraffic_type_identifier()
{
    {
        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        QualifiedTypeName type_name = "eprosima::fastdds::statistics::Entity2LocatorTraffic";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteStructHeader header;
        header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
        CompleteStructMemberSeq member_seq;
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, true, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "eprosima::fastdds::statistics::detail::GUID_s", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GUID_s";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GuidPrefix_s";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_array_uint8_t_12", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_byte", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        TypeIdentifier* element_identifier {nullptr};
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Array element TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        EquivalenceKind equiv_kind = EK_COMPLETE;
                                        if (TK_NONE == type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_BOTH;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                        if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                        {
                                            SBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(12));

                                            PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_12"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(12));

                                            PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_12"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_array_uint8_t_12", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_uint8_t_12: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure value member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "value";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::statistics::detail::GuidPrefix_s already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::statistics::detail::GuidPrefix_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure guidPrefix member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "guidPrefix";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::EntityId_s";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_array_uint8_t_4", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_byte", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        TypeIdentifier* element_identifier {nullptr};
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Array element TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        EquivalenceKind equiv_kind = EK_COMPLETE;
                                        if (TK_NONE == type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_BOTH;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                        if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                        {
                                            SBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(4));

                                            PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_4"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(4));

                                            PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_4"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_array_uint8_t_4", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_uint8_t_4: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure value member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "value";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::statistics::detail::EntityId_s already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::statistics::detail::EntityId_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure entityId member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "entityId";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "eprosima::fastdds::statistics::detail::GUID_s already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "eprosima::fastdds::statistics::detail::GUID_s", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "eprosima::fastdds::statistics::detail::GUID_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure src_guid member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "src_guid";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            AppliedAnnotationSeq tmp_ann_custom;
            eprosima::fastcdr::optional<std::string> unit;
            eprosima::fastcdr::optional<AnnotationParameterValue> min;
            eprosima::fastcdr::optional<AnnotationParameterValue> max;
            eprosima::fastcdr::optional<std::string> hash_id;
            if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
            {
                member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
            }
            if (!tmp_ann_custom.empty())
            {
                ann_custom = tmp_ann_custom;
            }
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, true, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "eprosima::fastdds::statistics::detail::Locator_s", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::Locator_s";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "kind Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure kind member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "kind";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_uint32_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "port Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure port member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "port";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_array_uint8_t_16", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_byte", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            TypeIdentifier* element_identifier {nullptr};
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Array element TypeIdentifier inconsistent.");
                                return;
                            }
                            EquivalenceKind equiv_kind = EK_COMPLETE;
                            if (TK_NONE == type_ids.type_identifier2()._d())
                            {
                                equiv_kind = EK_BOTH;
                            }
                            CollectionElementFlag element_flags = 0;
                            PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                            std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                            if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                            {
                                SBoundSeq array_bound_seq;
                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(16));

                                PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_16"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_array_uint8_t_16 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                LBoundSeq array_bound_seq;
                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(16));

                                PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_16"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_array_uint8_t_16 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_array_uint8_t_16", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_array_uint8_t_16: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000002;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure address member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "address";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "eprosima::fastdds::statistics::detail::Locator_s already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "eprosima::fastdds::statistics::detail::Locator_s", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "eprosima::fastdds::statistics::detail::Locator_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000001;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure dst_locator member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "dst_locator";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            AppliedAnnotationSeq tmp_ann_custom;
            eprosima::fastcdr::optional<std::string> unit;
            eprosima::fastcdr::optional<AnnotationParameterValue> min;
            eprosima::fastcdr::optional<AnnotationParameterValue> max;
            eprosima::fastcdr::optional<std::string> hash_id;
            if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
            {
                member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
            }
            if (!tmp_ann_custom.empty())
            {
                ann_custom = tmp_ann_custom;
            }
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "packet_count Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000002;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure packet_count member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "packet_count";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "byte_count Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000003;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure byte_count member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "byte_count";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int16_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "byte_magnitude_order Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000004;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure byte_magnitude_order member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "byte_magnitude_order";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "eprosima::fastdds::statistics::Entity2LocatorTraffic already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "eprosima::fastdds::statistics::Entity2LocatorTraffic", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "eprosima::fastdds::statistics::Entity2LocatorTraffic: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_eprosima_fastdds_statistics_WriterReaderData_type_identifier()
{
    {
        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        QualifiedTypeName type_name = "eprosima::fastdds::statistics::WriterReaderData";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteStructHeader header;
        header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
        CompleteStructMemberSeq member_seq;
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, true, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "eprosima::fastdds::statistics::detail::GUID_s", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GUID_s";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GuidPrefix_s";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_array_uint8_t_12", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_byte", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        TypeIdentifier* element_identifier {nullptr};
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Array element TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        EquivalenceKind equiv_kind = EK_COMPLETE;
                                        if (TK_NONE == type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_BOTH;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                        if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                        {
                                            SBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(12));

                                            PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_12"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(12));

                                            PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_12"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_array_uint8_t_12", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_uint8_t_12: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure value member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "value";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::statistics::detail::GuidPrefix_s already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::statistics::detail::GuidPrefix_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure guidPrefix member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "guidPrefix";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::EntityId_s";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_array_uint8_t_4", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_byte", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        TypeIdentifier* element_identifier {nullptr};
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Array element TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        EquivalenceKind equiv_kind = EK_COMPLETE;
                                        if (TK_NONE == type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_BOTH;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                        if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                        {
                                            SBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(4));

                                            PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_4"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(4));

                                            PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_4"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_array_uint8_t_4", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_uint8_t_4: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure value member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "value";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::statistics::detail::EntityId_s already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::statistics::detail::EntityId_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure entityId member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "entityId";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "eprosima::fastdds::statistics::detail::GUID_s already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "eprosima::fastdds::statistics::detail::GUID_s", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "eprosima::fastdds::statistics::detail::GUID_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure writer_guid member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "writer_guid";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            AppliedAnnotationSeq tmp_ann_custom;
            eprosima::fastcdr::optional<std::string> unit;
            eprosima::fastcdr::optional<AnnotationParameterValue> min;
            eprosima::fastcdr::optional<AnnotationParameterValue> max;
            eprosima::fastcdr::optional<std::string> hash_id;
            if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
            {
                member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
            }
            if (!tmp_ann_custom.empty())
            {
                ann_custom = tmp_ann_custom;
            }
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, true, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "eprosima::fastdds::statistics::detail::GUID_s", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GUID_s";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GuidPrefix_s";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_array_uint8_t_12", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_byte", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        TypeIdentifier* element_identifier {nullptr};
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Array element TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        EquivalenceKind equiv_kind = EK_COMPLETE;
                                        if (TK_NONE == type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_BOTH;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                        if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                        {
                                            SBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(12));

                                            PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_12"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(12));

                                            PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_12"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_array_uint8_t_12", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_uint8_t_12: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure value member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "value";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::statistics::detail::GuidPrefix_s already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::statistics::detail::GuidPrefix_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure guidPrefix member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "guidPrefix";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::EntityId_s";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_array_uint8_t_4", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_byte", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        TypeIdentifier* element_identifier {nullptr};
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Array element TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        EquivalenceKind equiv_kind = EK_COMPLETE;
                                        if (TK_NONE == type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_BOTH;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                        if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                        {
                                            SBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(4));

                                            PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_4"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(4));

                                            PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_4"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_array_uint8_t_4", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_uint8_t_4: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure value member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "value";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::statistics::detail::EntityId_s already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::statistics::detail::EntityId_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure entityId member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "entityId";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "eprosima::fastdds::statistics::detail::GUID_s already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "eprosima::fastdds::statistics::detail::GUID_s", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "eprosima::fastdds::statistics::detail::GUID_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000001;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure reader_guid member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "reader_guid";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            AppliedAnnotationSeq tmp_ann_custom;
            eprosima::fastcdr::optional<std::string> unit;
            eprosima::fastcdr::optional<AnnotationParameterValue> min;
            eprosima::fastcdr::optional<AnnotationParameterValue> max;
            eprosima::fastcdr::optional<std::string> hash_id;
            if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
            {
                member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
            }
            if (!tmp_ann_custom.empty())
            {
                ann_custom = tmp_ann_custom;
            }
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "data Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000002;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure data member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "data";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "eprosima::fastdds::statistics::WriterReaderData already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "eprosima::fastdds::statistics::WriterReaderData", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "eprosima::fastdds::statistics::WriterReaderData: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_eprosima_fastdds_statistics_Locator2LocatorData_type_identifier()
{
    {
        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        QualifiedTypeName type_name = "eprosima::fastdds::statistics::Locator2LocatorData";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteStructHeader header;
        header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
        CompleteStructMemberSeq member_seq;
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, true, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "eprosima::fastdds::statistics::detail::Locator_s", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::Locator_s";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "kind Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure kind member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "kind";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_uint32_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "port Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure port member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "port";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_array_uint8_t_16", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_byte", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            TypeIdentifier* element_identifier {nullptr};
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Array element TypeIdentifier inconsistent.");
                                return;
                            }
                            EquivalenceKind equiv_kind = EK_COMPLETE;
                            if (TK_NONE == type_ids.type_identifier2()._d())
                            {
                                equiv_kind = EK_BOTH;
                            }
                            CollectionElementFlag element_flags = 0;
                            PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                            std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                            if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                            {
                                SBoundSeq array_bound_seq;
                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(16));

                                PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_16"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_array_uint8_t_16 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                LBoundSeq array_bound_seq;
                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(16));

                                PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_16"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_array_uint8_t_16 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_array_uint8_t_16", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_array_uint8_t_16: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000002;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure address member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "address";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "eprosima::fastdds::statistics::detail::Locator_s already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "eprosima::fastdds::statistics::detail::Locator_s", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "eprosima::fastdds::statistics::detail::Locator_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure src_locator member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "src_locator";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            AppliedAnnotationSeq tmp_ann_custom;
            eprosima::fastcdr::optional<std::string> unit;
            eprosima::fastcdr::optional<AnnotationParameterValue> min;
            eprosima::fastcdr::optional<AnnotationParameterValue> max;
            eprosima::fastcdr::optional<std::string> hash_id;
            if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
            {
                member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
            }
            if (!tmp_ann_custom.empty())
            {
                ann_custom = tmp_ann_custom;
            }
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, true, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "eprosima::fastdds::statistics::detail::Locator_s", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::Locator_s";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "kind Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure kind member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "kind";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_uint32_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "port Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure port member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "port";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_array_uint8_t_16", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_byte", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            TypeIdentifier* element_identifier {nullptr};
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Array element TypeIdentifier inconsistent.");
                                return;
                            }
                            EquivalenceKind equiv_kind = EK_COMPLETE;
                            if (TK_NONE == type_ids.type_identifier2()._d())
                            {
                                equiv_kind = EK_BOTH;
                            }
                            CollectionElementFlag element_flags = 0;
                            PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                            std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                            if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                            {
                                SBoundSeq array_bound_seq;
                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(16));

                                PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_16"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_array_uint8_t_16 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                LBoundSeq array_bound_seq;
                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(16));

                                PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_16"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_array_uint8_t_16 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_array_uint8_t_16", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_array_uint8_t_16: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000002;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure address member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "address";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "eprosima::fastdds::statistics::detail::Locator_s already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "eprosima::fastdds::statistics::detail::Locator_s", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "eprosima::fastdds::statistics::detail::Locator_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000001;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure dst_locator member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "dst_locator";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            AppliedAnnotationSeq tmp_ann_custom;
            eprosima::fastcdr::optional<std::string> unit;
            eprosima::fastcdr::optional<AnnotationParameterValue> min;
            eprosima::fastcdr::optional<AnnotationParameterValue> max;
            eprosima::fastcdr::optional<std::string> hash_id;
            if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
            {
                member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
            }
            if (!tmp_ann_custom.empty())
            {
                ann_custom = tmp_ann_custom;
            }
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "data Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000002;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure data member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "data";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "eprosima::fastdds::statistics::Locator2LocatorData already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "eprosima::fastdds::statistics::Locator2LocatorData", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "eprosima::fastdds::statistics::Locator2LocatorData: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_eprosima_fastdds_statistics_EntityData_type_identifier()
{
    {
        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        QualifiedTypeName type_name = "eprosima::fastdds::statistics::EntityData";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteStructHeader header;
        header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
        CompleteStructMemberSeq member_seq;
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, true, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "eprosima::fastdds::statistics::detail::GUID_s", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GUID_s";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GuidPrefix_s";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_array_uint8_t_12", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_byte", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        TypeIdentifier* element_identifier {nullptr};
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Array element TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        EquivalenceKind equiv_kind = EK_COMPLETE;
                                        if (TK_NONE == type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_BOTH;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                        if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                        {
                                            SBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(12));

                                            PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_12"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(12));

                                            PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_12"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_array_uint8_t_12", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_uint8_t_12: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure value member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "value";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::statistics::detail::GuidPrefix_s already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::statistics::detail::GuidPrefix_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure guidPrefix member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "guidPrefix";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::EntityId_s";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_array_uint8_t_4", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_byte", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        TypeIdentifier* element_identifier {nullptr};
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Array element TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        EquivalenceKind equiv_kind = EK_COMPLETE;
                                        if (TK_NONE == type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_BOTH;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                        if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                        {
                                            SBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(4));

                                            PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_4"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(4));

                                            PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_4"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_array_uint8_t_4", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_uint8_t_4: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure value member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "value";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::statistics::detail::EntityId_s already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::statistics::detail::EntityId_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure entityId member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "entityId";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "eprosima::fastdds::statistics::detail::GUID_s already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "eprosima::fastdds::statistics::detail::GUID_s", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "eprosima::fastdds::statistics::detail::GUID_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure guid member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "guid";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            AppliedAnnotationSeq tmp_ann_custom;
            eprosima::fastcdr::optional<std::string> unit;
            eprosima::fastcdr::optional<AnnotationParameterValue> min;
            eprosima::fastcdr::optional<AnnotationParameterValue> max;
            eprosima::fastcdr::optional<std::string> hash_id;
            if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
            {
                member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
            }
            if (!tmp_ann_custom.empty())
            {
                ann_custom = tmp_ann_custom;
            }
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "data Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000001;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure data member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "data";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "eprosima::fastdds::statistics::EntityData already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "eprosima::fastdds::statistics::EntityData", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "eprosima::fastdds::statistics::EntityData: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_eprosima_fastdds_statistics_PhysicalData_type_identifier()
{
    {
        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        QualifiedTypeName type_name = "eprosima::fastdds::statistics::PhysicalData";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteStructHeader header;
        header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
        CompleteStructMemberSeq member_seq;
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, true, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "eprosima::fastdds::statistics::detail::GUID_s", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GUID_s";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GuidPrefix_s";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_array_uint8_t_12", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_byte", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        TypeIdentifier* element_identifier {nullptr};
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Array element TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        EquivalenceKind equiv_kind = EK_COMPLETE;
                                        if (TK_NONE == type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_BOTH;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                        if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                        {
                                            SBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(12));

                                            PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_12"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(12));

                                            PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_12"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_array_uint8_t_12", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_uint8_t_12: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure value member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "value";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::statistics::detail::GuidPrefix_s already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::statistics::detail::GuidPrefix_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure guidPrefix member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "guidPrefix";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::EntityId_s";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_array_uint8_t_4", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_byte", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        TypeIdentifier* element_identifier {nullptr};
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Array element TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        EquivalenceKind equiv_kind = EK_COMPLETE;
                                        if (TK_NONE == type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_BOTH;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                        if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                        {
                                            SBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(4));

                                            PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_4"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(4));

                                            PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_4"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_array_uint8_t_4", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_uint8_t_4: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure value member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "value";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::statistics::detail::EntityId_s already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::statistics::detail::EntityId_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure entityId member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "entityId";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "eprosima::fastdds::statistics::detail::GUID_s already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "eprosima::fastdds::statistics::detail::GUID_s", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "eprosima::fastdds::statistics::detail::GUID_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure participant_guid member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "participant_guid";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            AppliedAnnotationSeq tmp_ann_custom;
            eprosima::fastcdr::optional<std::string> unit;
            eprosima::fastcdr::optional<AnnotationParameterValue> min;
            eprosima::fastcdr::optional<AnnotationParameterValue> max;
            eprosima::fastcdr::optional<std::string> hash_id;
            if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
            {
                member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
            }
            if (!tmp_ann_custom.empty())
            {
                ann_custom = tmp_ann_custom;
            }
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind("TI_STRING8_SMALL");
                if (type_id_kind == "TI_STRING8_SMALL")
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind == "TI_STRING8_LARGE")
                {
                    LBound bound = 255;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Unknown String kind.");
                    return;
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000001;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure host member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "host";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind("TI_STRING8_SMALL");
                if (type_id_kind == "TI_STRING8_SMALL")
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind == "TI_STRING8_LARGE")
                {
                    LBound bound = 255;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Unknown String kind.");
                    return;
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000002;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure user member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "user";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind("TI_STRING8_SMALL");
                if (type_id_kind == "TI_STRING8_SMALL")
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind == "TI_STRING8_LARGE")
                {
                    LBound bound = 255;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Unknown String kind.");
                    return;
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000003;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure process member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "process";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "eprosima::fastdds::statistics::PhysicalData already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "eprosima::fastdds::statistics::PhysicalData", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "eprosima::fastdds::statistics::PhysicalData: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_eprosima_fastdds_statistics_Data_type_identifier()
{
    {
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        UnionTypeFlag union_flags = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        QualifiedTypeName type_name = "eprosima::fastdds::statistics::Data";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteUnionHeader header = TypeObjectUtils::build_complete_union_header(detail);
        UnionDiscriminatorFlag member_flags = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                false);
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "eprosima::fastdds::statistics::EventKind", type_ids);

        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
        CommonDiscriminatorMember common;
        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d())
        {
            common = TypeObjectUtils::build_common_discriminator_member(member_flags, type_ids.type_identifier1());
        }
        else if (EK_COMPLETE == type_ids.type_identifier2()._d())
        {
            common = TypeObjectUtils::build_common_discriminator_member(member_flags, type_ids.type_identifier2());
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "eprosima::fastdds::statistics::Data discriminator TypeIdentifier inconsistent.");
            return;
        }
        type_ann_builtin.reset();
        ann_custom.reset();
        CompleteDiscriminatorMember discriminator = TypeObjectUtils::build_complete_discriminator_member(common,
                type_ann_builtin, ann_custom);
        CompleteUnionMemberSeq member_seq;
        {
            UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "eprosima::fastdds::statistics::WriterReaderData", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    QualifiedTypeName type_name = "eprosima::fastdds::statistics::WriterReaderData";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, true, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::statistics::detail::GUID_s", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GUID_s";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        {
                                            StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                                    false, false);
                                            ReturnCode_t return_code;
                                            TypeIdentifierPair type_ids;
                                            QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GuidPrefix_s";
                                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                            CompleteStructHeader header;
                                            header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                            CompleteStructMemberSeq member_seq;
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "anonymous_array_uint8_t_12", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_byte", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    TypeIdentifier* element_identifier {nullptr};
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Array element TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    EquivalenceKind equiv_kind = EK_COMPLETE;
                                                    if (TK_NONE == type_ids.type_identifier2()._d())
                                                    {
                                                        equiv_kind = EK_BOTH;
                                                    }
                                                    CollectionElementFlag element_flags = 0;
                                                    PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                                    std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                                    if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                                    {
                                                        SBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(12));

                                                        PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_12"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        LBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(12));

                                                        PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_12"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "anonymous_array_uint8_t_12", type_ids);
                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "anonymous_array_uint8_t_12: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000000;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure value member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "value";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "eprosima::fastdds::statistics::detail::GuidPrefix_s already registered in TypeObjectRegistry for a different type.");
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "eprosima::fastdds::statistics::detail::GuidPrefix_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure guidPrefix member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "guidPrefix";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        {
                                            StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                                    false, false);
                                            ReturnCode_t return_code;
                                            TypeIdentifierPair type_ids;
                                            QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::EntityId_s";
                                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                            CompleteStructHeader header;
                                            header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                            CompleteStructMemberSeq member_seq;
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "anonymous_array_uint8_t_4", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_byte", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    TypeIdentifier* element_identifier {nullptr};
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Array element TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    EquivalenceKind equiv_kind = EK_COMPLETE;
                                                    if (TK_NONE == type_ids.type_identifier2()._d())
                                                    {
                                                        equiv_kind = EK_BOTH;
                                                    }
                                                    CollectionElementFlag element_flags = 0;
                                                    PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                                    std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                                    if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                                    {
                                                        SBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(4));

                                                        PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_4"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        LBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(4));

                                                        PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_4"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "anonymous_array_uint8_t_4", type_ids);
                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "anonymous_array_uint8_t_4: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000000;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure value member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "value";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "eprosima::fastdds::statistics::detail::EntityId_s already registered in TypeObjectRegistry for a different type.");
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "eprosima::fastdds::statistics::detail::EntityId_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000001;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure entityId member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "entityId";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::statistics::detail::GUID_s already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::statistics::detail::GUID_s", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::statistics::detail::GUID_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure writer_guid member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "writer_guid";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        AppliedAnnotationSeq tmp_ann_custom;
                        eprosima::fastcdr::optional<std::string> unit;
                        eprosima::fastcdr::optional<AnnotationParameterValue> min;
                        eprosima::fastcdr::optional<AnnotationParameterValue> max;
                        eprosima::fastcdr::optional<std::string> hash_id;
                        if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                        {
                            member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                        }
                        if (!tmp_ann_custom.empty())
                        {
                            ann_custom = tmp_ann_custom;
                        }
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, true, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::statistics::detail::GUID_s", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GUID_s";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        {
                                            StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                                    false, false);
                                            ReturnCode_t return_code;
                                            TypeIdentifierPair type_ids;
                                            QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GuidPrefix_s";
                                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                            CompleteStructHeader header;
                                            header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                            CompleteStructMemberSeq member_seq;
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "anonymous_array_uint8_t_12", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_byte", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    TypeIdentifier* element_identifier {nullptr};
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Array element TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    EquivalenceKind equiv_kind = EK_COMPLETE;
                                                    if (TK_NONE == type_ids.type_identifier2()._d())
                                                    {
                                                        equiv_kind = EK_BOTH;
                                                    }
                                                    CollectionElementFlag element_flags = 0;
                                                    PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                                    std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                                    if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                                    {
                                                        SBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(12));

                                                        PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_12"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        LBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(12));

                                                        PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_12"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "anonymous_array_uint8_t_12", type_ids);
                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "anonymous_array_uint8_t_12: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000000;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure value member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "value";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "eprosima::fastdds::statistics::detail::GuidPrefix_s already registered in TypeObjectRegistry for a different type.");
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "eprosima::fastdds::statistics::detail::GuidPrefix_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure guidPrefix member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "guidPrefix";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        {
                                            StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                                    false, false);
                                            ReturnCode_t return_code;
                                            TypeIdentifierPair type_ids;
                                            QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::EntityId_s";
                                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                            CompleteStructHeader header;
                                            header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                            CompleteStructMemberSeq member_seq;
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "anonymous_array_uint8_t_4", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_byte", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    TypeIdentifier* element_identifier {nullptr};
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Array element TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    EquivalenceKind equiv_kind = EK_COMPLETE;
                                                    if (TK_NONE == type_ids.type_identifier2()._d())
                                                    {
                                                        equiv_kind = EK_BOTH;
                                                    }
                                                    CollectionElementFlag element_flags = 0;
                                                    PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                                    std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                                    if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                                    {
                                                        SBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(4));

                                                        PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_4"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        LBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(4));

                                                        PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_4"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "anonymous_array_uint8_t_4", type_ids);
                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "anonymous_array_uint8_t_4: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000000;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure value member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "value";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "eprosima::fastdds::statistics::detail::EntityId_s already registered in TypeObjectRegistry for a different type.");
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "eprosima::fastdds::statistics::detail::EntityId_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000001;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure entityId member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "entityId";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::statistics::detail::GUID_s already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::statistics::detail::GUID_s", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::statistics::detail::GUID_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure reader_guid member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "reader_guid";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        AppliedAnnotationSeq tmp_ann_custom;
                        eprosima::fastcdr::optional<std::string> unit;
                        eprosima::fastcdr::optional<AnnotationParameterValue> min;
                        eprosima::fastcdr::optional<AnnotationParameterValue> max;
                        eprosima::fastcdr::optional<std::string> hash_id;
                        if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                        {
                            member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                        }
                        if (!tmp_ann_custom.empty())
                        {
                            ann_custom = tmp_ann_custom;
                        }
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_float", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "data Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000002;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure data member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "data";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "eprosima::fastdds::statistics::WriterReaderData already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "eprosima::fastdds::statistics::WriterReaderData", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "eprosima::fastdds::statistics::WriterReaderData: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            UnionCaseLabelSeq label_seq;
            TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(HISTORY2HISTORY_LATENCY));
            CommonUnionMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                        label_seq);
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                        label_seq);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union writer_reader_data member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "writer_reader_data";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
            TypeObjectUtils::add_complete_union_member(member_seq, member);
        }
        {
            UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "eprosima::fastdds::statistics::Locator2LocatorData", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    QualifiedTypeName type_name = "eprosima::fastdds::statistics::Locator2LocatorData";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, true, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::statistics::detail::Locator_s", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::Locator_s";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_int32_t", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "kind Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure kind member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "kind";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_uint32_t", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "port Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000001;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure port member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "port";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_array_uint8_t_16", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_byte", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        TypeIdentifier* element_identifier {nullptr};
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Array element TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        EquivalenceKind equiv_kind = EK_COMPLETE;
                                        if (TK_NONE == type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_BOTH;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                        if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                        {
                                            SBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(16));

                                            PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_16"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_16 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(16));

                                            PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_16"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_16 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_array_uint8_t_16", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_uint8_t_16: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000002;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure address member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "address";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::statistics::detail::Locator_s already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::statistics::detail::Locator_s", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::statistics::detail::Locator_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure src_locator member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "src_locator";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        AppliedAnnotationSeq tmp_ann_custom;
                        eprosima::fastcdr::optional<std::string> unit;
                        eprosima::fastcdr::optional<AnnotationParameterValue> min;
                        eprosima::fastcdr::optional<AnnotationParameterValue> max;
                        eprosima::fastcdr::optional<std::string> hash_id;
                        if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                        {
                            member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                        }
                        if (!tmp_ann_custom.empty())
                        {
                            ann_custom = tmp_ann_custom;
                        }
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, true, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::statistics::detail::Locator_s", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::Locator_s";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_int32_t", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "kind Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure kind member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "kind";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_uint32_t", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "port Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000001;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure port member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "port";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_array_uint8_t_16", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_byte", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        TypeIdentifier* element_identifier {nullptr};
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Array element TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        EquivalenceKind equiv_kind = EK_COMPLETE;
                                        if (TK_NONE == type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_BOTH;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                        if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                        {
                                            SBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(16));

                                            PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_16"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_16 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(16));

                                            PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_16"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_16 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_array_uint8_t_16", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_uint8_t_16: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000002;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure address member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "address";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::statistics::detail::Locator_s already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::statistics::detail::Locator_s", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::statistics::detail::Locator_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure dst_locator member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "dst_locator";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        AppliedAnnotationSeq tmp_ann_custom;
                        eprosima::fastcdr::optional<std::string> unit;
                        eprosima::fastcdr::optional<AnnotationParameterValue> min;
                        eprosima::fastcdr::optional<AnnotationParameterValue> max;
                        eprosima::fastcdr::optional<std::string> hash_id;
                        if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                        {
                            member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                        }
                        if (!tmp_ann_custom.empty())
                        {
                            ann_custom = tmp_ann_custom;
                        }
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_float", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "data Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000002;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure data member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "data";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "eprosima::fastdds::statistics::Locator2LocatorData already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "eprosima::fastdds::statistics::Locator2LocatorData", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "eprosima::fastdds::statistics::Locator2LocatorData: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            UnionCaseLabelSeq label_seq;
            TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(NETWORK_LATENCY));
            CommonUnionMember common;
            MemberId member_id = 0x00000001;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                        label_seq);
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                        label_seq);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union locator2locator_data member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "locator2locator_data";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
            TypeObjectUtils::add_complete_union_member(member_seq, member);
        }
        {
            UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "eprosima::fastdds::statistics::EntityData", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    QualifiedTypeName type_name = "eprosima::fastdds::statistics::EntityData";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, true, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::statistics::detail::GUID_s", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GUID_s";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        {
                                            StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                                    false, false);
                                            ReturnCode_t return_code;
                                            TypeIdentifierPair type_ids;
                                            QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GuidPrefix_s";
                                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                            CompleteStructHeader header;
                                            header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                            CompleteStructMemberSeq member_seq;
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "anonymous_array_uint8_t_12", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_byte", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    TypeIdentifier* element_identifier {nullptr};
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Array element TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    EquivalenceKind equiv_kind = EK_COMPLETE;
                                                    if (TK_NONE == type_ids.type_identifier2()._d())
                                                    {
                                                        equiv_kind = EK_BOTH;
                                                    }
                                                    CollectionElementFlag element_flags = 0;
                                                    PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                                    std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                                    if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                                    {
                                                        SBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(12));

                                                        PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_12"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        LBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(12));

                                                        PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_12"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "anonymous_array_uint8_t_12", type_ids);
                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "anonymous_array_uint8_t_12: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000000;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure value member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "value";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "eprosima::fastdds::statistics::detail::GuidPrefix_s already registered in TypeObjectRegistry for a different type.");
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "eprosima::fastdds::statistics::detail::GuidPrefix_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure guidPrefix member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "guidPrefix";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        {
                                            StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                                    false, false);
                                            ReturnCode_t return_code;
                                            TypeIdentifierPair type_ids;
                                            QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::EntityId_s";
                                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                            CompleteStructHeader header;
                                            header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                            CompleteStructMemberSeq member_seq;
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "anonymous_array_uint8_t_4", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_byte", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    TypeIdentifier* element_identifier {nullptr};
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Array element TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    EquivalenceKind equiv_kind = EK_COMPLETE;
                                                    if (TK_NONE == type_ids.type_identifier2()._d())
                                                    {
                                                        equiv_kind = EK_BOTH;
                                                    }
                                                    CollectionElementFlag element_flags = 0;
                                                    PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                                    std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                                    if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                                    {
                                                        SBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(4));

                                                        PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_4"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        LBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(4));

                                                        PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_4"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "anonymous_array_uint8_t_4", type_ids);
                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "anonymous_array_uint8_t_4: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000000;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure value member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "value";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "eprosima::fastdds::statistics::detail::EntityId_s already registered in TypeObjectRegistry for a different type.");
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "eprosima::fastdds::statistics::detail::EntityId_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000001;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure entityId member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "entityId";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::statistics::detail::GUID_s already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::statistics::detail::GUID_s", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::statistics::detail::GUID_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure guid member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "guid";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        AppliedAnnotationSeq tmp_ann_custom;
                        eprosima::fastcdr::optional<std::string> unit;
                        eprosima::fastcdr::optional<AnnotationParameterValue> min;
                        eprosima::fastcdr::optional<AnnotationParameterValue> max;
                        eprosima::fastcdr::optional<std::string> hash_id;
                        if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                        {
                            member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                        }
                        if (!tmp_ann_custom.empty())
                        {
                            ann_custom = tmp_ann_custom;
                        }
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_float", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "data Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure data member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "data";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "eprosima::fastdds::statistics::EntityData already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "eprosima::fastdds::statistics::EntityData", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "eprosima::fastdds::statistics::EntityData: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            UnionCaseLabelSeq label_seq;
            TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(PUBLICATION_THROUGHPUT));
            TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(SUBSCRIPTION_THROUGHPUT));
            CommonUnionMember common;
            MemberId member_id = 0x00000002;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                        label_seq);
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                        label_seq);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union entity_data member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "entity_data";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
            TypeObjectUtils::add_complete_union_member(member_seq, member);
        }
        {
            UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "eprosima::fastdds::statistics::Entity2LocatorTraffic", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    QualifiedTypeName type_name = "eprosima::fastdds::statistics::Entity2LocatorTraffic";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, true, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::statistics::detail::GUID_s", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GUID_s";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        {
                                            StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                                    false, false);
                                            ReturnCode_t return_code;
                                            TypeIdentifierPair type_ids;
                                            QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GuidPrefix_s";
                                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                            CompleteStructHeader header;
                                            header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                            CompleteStructMemberSeq member_seq;
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "anonymous_array_uint8_t_12", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_byte", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    TypeIdentifier* element_identifier {nullptr};
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Array element TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    EquivalenceKind equiv_kind = EK_COMPLETE;
                                                    if (TK_NONE == type_ids.type_identifier2()._d())
                                                    {
                                                        equiv_kind = EK_BOTH;
                                                    }
                                                    CollectionElementFlag element_flags = 0;
                                                    PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                                    std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                                    if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                                    {
                                                        SBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(12));

                                                        PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_12"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        LBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(12));

                                                        PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_12"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "anonymous_array_uint8_t_12", type_ids);
                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "anonymous_array_uint8_t_12: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000000;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure value member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "value";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "eprosima::fastdds::statistics::detail::GuidPrefix_s already registered in TypeObjectRegistry for a different type.");
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "eprosima::fastdds::statistics::detail::GuidPrefix_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure guidPrefix member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "guidPrefix";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        {
                                            StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                                    false, false);
                                            ReturnCode_t return_code;
                                            TypeIdentifierPair type_ids;
                                            QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::EntityId_s";
                                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                            CompleteStructHeader header;
                                            header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                            CompleteStructMemberSeq member_seq;
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "anonymous_array_uint8_t_4", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_byte", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    TypeIdentifier* element_identifier {nullptr};
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Array element TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    EquivalenceKind equiv_kind = EK_COMPLETE;
                                                    if (TK_NONE == type_ids.type_identifier2()._d())
                                                    {
                                                        equiv_kind = EK_BOTH;
                                                    }
                                                    CollectionElementFlag element_flags = 0;
                                                    PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                                    std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                                    if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                                    {
                                                        SBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(4));

                                                        PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_4"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        LBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(4));

                                                        PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_4"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "anonymous_array_uint8_t_4", type_ids);
                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "anonymous_array_uint8_t_4: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000000;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure value member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "value";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "eprosima::fastdds::statistics::detail::EntityId_s already registered in TypeObjectRegistry for a different type.");
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "eprosima::fastdds::statistics::detail::EntityId_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000001;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure entityId member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "entityId";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::statistics::detail::GUID_s already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::statistics::detail::GUID_s", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::statistics::detail::GUID_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure src_guid member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "src_guid";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        AppliedAnnotationSeq tmp_ann_custom;
                        eprosima::fastcdr::optional<std::string> unit;
                        eprosima::fastcdr::optional<AnnotationParameterValue> min;
                        eprosima::fastcdr::optional<AnnotationParameterValue> max;
                        eprosima::fastcdr::optional<std::string> hash_id;
                        if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                        {
                            member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                        }
                        if (!tmp_ann_custom.empty())
                        {
                            ann_custom = tmp_ann_custom;
                        }
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, true, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::statistics::detail::Locator_s", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::Locator_s";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_int32_t", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "kind Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure kind member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "kind";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_uint32_t", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "port Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000001;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure port member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "port";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_array_uint8_t_16", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_byte", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        TypeIdentifier* element_identifier {nullptr};
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Array element TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        EquivalenceKind equiv_kind = EK_COMPLETE;
                                        if (TK_NONE == type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_BOTH;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                        if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                        {
                                            SBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(16));

                                            PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_16"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_16 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(16));

                                            PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_16"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_16 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_array_uint8_t_16", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_uint8_t_16: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000002;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure address member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "address";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::statistics::detail::Locator_s already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::statistics::detail::Locator_s", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::statistics::detail::Locator_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure dst_locator member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "dst_locator";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        AppliedAnnotationSeq tmp_ann_custom;
                        eprosima::fastcdr::optional<std::string> unit;
                        eprosima::fastcdr::optional<AnnotationParameterValue> min;
                        eprosima::fastcdr::optional<AnnotationParameterValue> max;
                        eprosima::fastcdr::optional<std::string> hash_id;
                        if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                        {
                            member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                        }
                        if (!tmp_ann_custom.empty())
                        {
                            ann_custom = tmp_ann_custom;
                        }
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_uint64_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "packet_count Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000002;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure packet_count member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "packet_count";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_uint64_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "byte_count Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000003;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure byte_count member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "byte_count";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int16_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "byte_magnitude_order Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000004;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure byte_magnitude_order member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "byte_magnitude_order";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "eprosima::fastdds::statistics::Entity2LocatorTraffic already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "eprosima::fastdds::statistics::Entity2LocatorTraffic", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "eprosima::fastdds::statistics::Entity2LocatorTraffic: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            UnionCaseLabelSeq label_seq;
            TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(RTPS_SENT));
            TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(RTPS_LOST));
            CommonUnionMember common;
            MemberId member_id = 0x00000003;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                        label_seq);
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                        label_seq);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union entity2locator_traffic member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "entity2locator_traffic";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
            TypeObjectUtils::add_complete_union_member(member_seq, member);
        }
        {
            UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "eprosima::fastdds::statistics::EntityCount", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    QualifiedTypeName type_name = "eprosima::fastdds::statistics::EntityCount";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, true, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::statistics::detail::GUID_s", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GUID_s";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        {
                                            StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                                    false, false);
                                            ReturnCode_t return_code;
                                            TypeIdentifierPair type_ids;
                                            QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GuidPrefix_s";
                                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                            CompleteStructHeader header;
                                            header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                            CompleteStructMemberSeq member_seq;
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "anonymous_array_uint8_t_12", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_byte", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    TypeIdentifier* element_identifier {nullptr};
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Array element TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    EquivalenceKind equiv_kind = EK_COMPLETE;
                                                    if (TK_NONE == type_ids.type_identifier2()._d())
                                                    {
                                                        equiv_kind = EK_BOTH;
                                                    }
                                                    CollectionElementFlag element_flags = 0;
                                                    PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                                    std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                                    if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                                    {
                                                        SBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(12));

                                                        PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_12"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        LBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(12));

                                                        PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_12"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "anonymous_array_uint8_t_12", type_ids);
                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "anonymous_array_uint8_t_12: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000000;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure value member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "value";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "eprosima::fastdds::statistics::detail::GuidPrefix_s already registered in TypeObjectRegistry for a different type.");
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "eprosima::fastdds::statistics::detail::GuidPrefix_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure guidPrefix member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "guidPrefix";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        {
                                            StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                                    false, false);
                                            ReturnCode_t return_code;
                                            TypeIdentifierPair type_ids;
                                            QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::EntityId_s";
                                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                            CompleteStructHeader header;
                                            header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                            CompleteStructMemberSeq member_seq;
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "anonymous_array_uint8_t_4", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_byte", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    TypeIdentifier* element_identifier {nullptr};
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Array element TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    EquivalenceKind equiv_kind = EK_COMPLETE;
                                                    if (TK_NONE == type_ids.type_identifier2()._d())
                                                    {
                                                        equiv_kind = EK_BOTH;
                                                    }
                                                    CollectionElementFlag element_flags = 0;
                                                    PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                                    std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                                    if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                                    {
                                                        SBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(4));

                                                        PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_4"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        LBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(4));

                                                        PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_4"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "anonymous_array_uint8_t_4", type_ids);
                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "anonymous_array_uint8_t_4: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000000;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure value member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "value";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "eprosima::fastdds::statistics::detail::EntityId_s already registered in TypeObjectRegistry for a different type.");
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "eprosima::fastdds::statistics::detail::EntityId_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000001;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure entityId member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "entityId";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::statistics::detail::GUID_s already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::statistics::detail::GUID_s", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::statistics::detail::GUID_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure guid member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "guid";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        AppliedAnnotationSeq tmp_ann_custom;
                        eprosima::fastcdr::optional<std::string> unit;
                        eprosima::fastcdr::optional<AnnotationParameterValue> min;
                        eprosima::fastcdr::optional<AnnotationParameterValue> max;
                        eprosima::fastcdr::optional<std::string> hash_id;
                        if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                        {
                            member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                        }
                        if (!tmp_ann_custom.empty())
                        {
                            ann_custom = tmp_ann_custom;
                        }
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_uint64_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "count Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure count member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "count";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "eprosima::fastdds::statistics::EntityCount already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "eprosima::fastdds::statistics::EntityCount", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "eprosima::fastdds::statistics::EntityCount: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            UnionCaseLabelSeq label_seq;
            TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(RESENT_DATAS));
            TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(HEARTBEAT_COUNT));
            TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(ACKNACK_COUNT));
            TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(NACKFRAG_COUNT));
            TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(GAP_COUNT));
            TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(DATA_COUNT));
            TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(PDP_PACKETS));
            TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(EDP_PACKETS));
            CommonUnionMember common;
            MemberId member_id = 0x00000004;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                        label_seq);
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                        label_seq);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union entity_count member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "entity_count";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
            TypeObjectUtils::add_complete_union_member(member_seq, member);
        }
        {
            UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "eprosima::fastdds::statistics::DiscoveryTime", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    QualifiedTypeName type_name = "eprosima::fastdds::statistics::DiscoveryTime";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, true, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::statistics::detail::GUID_s", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GUID_s";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        {
                                            StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                                    false, false);
                                            ReturnCode_t return_code;
                                            TypeIdentifierPair type_ids;
                                            QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GuidPrefix_s";
                                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                            CompleteStructHeader header;
                                            header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                            CompleteStructMemberSeq member_seq;
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "anonymous_array_uint8_t_12", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_byte", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    TypeIdentifier* element_identifier {nullptr};
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Array element TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    EquivalenceKind equiv_kind = EK_COMPLETE;
                                                    if (TK_NONE == type_ids.type_identifier2()._d())
                                                    {
                                                        equiv_kind = EK_BOTH;
                                                    }
                                                    CollectionElementFlag element_flags = 0;
                                                    PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                                    std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                                    if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                                    {
                                                        SBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(12));

                                                        PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_12"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        LBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(12));

                                                        PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_12"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "anonymous_array_uint8_t_12", type_ids);
                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "anonymous_array_uint8_t_12: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000000;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure value member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "value";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "eprosima::fastdds::statistics::detail::GuidPrefix_s already registered in TypeObjectRegistry for a different type.");
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "eprosima::fastdds::statistics::detail::GuidPrefix_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure guidPrefix member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "guidPrefix";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        {
                                            StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                                    false, false);
                                            ReturnCode_t return_code;
                                            TypeIdentifierPair type_ids;
                                            QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::EntityId_s";
                                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                            CompleteStructHeader header;
                                            header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                            CompleteStructMemberSeq member_seq;
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "anonymous_array_uint8_t_4", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_byte", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    TypeIdentifier* element_identifier {nullptr};
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Array element TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    EquivalenceKind equiv_kind = EK_COMPLETE;
                                                    if (TK_NONE == type_ids.type_identifier2()._d())
                                                    {
                                                        equiv_kind = EK_BOTH;
                                                    }
                                                    CollectionElementFlag element_flags = 0;
                                                    PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                                    std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                                    if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                                    {
                                                        SBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(4));

                                                        PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_4"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        LBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(4));

                                                        PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_4"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "anonymous_array_uint8_t_4", type_ids);
                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "anonymous_array_uint8_t_4: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000000;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure value member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "value";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "eprosima::fastdds::statistics::detail::EntityId_s already registered in TypeObjectRegistry for a different type.");
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "eprosima::fastdds::statistics::detail::EntityId_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000001;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure entityId member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "entityId";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::statistics::detail::GUID_s already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::statistics::detail::GUID_s", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::statistics::detail::GUID_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure local_participant_guid member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "local_participant_guid";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        AppliedAnnotationSeq tmp_ann_custom;
                        eprosima::fastcdr::optional<std::string> unit;
                        eprosima::fastcdr::optional<AnnotationParameterValue> min;
                        eprosima::fastcdr::optional<AnnotationParameterValue> max;
                        eprosima::fastcdr::optional<std::string> hash_id;
                        if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                        {
                            member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                        }
                        if (!tmp_ann_custom.empty())
                        {
                            ann_custom = tmp_ann_custom;
                        }
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, true, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::statistics::detail::GUID_s", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GUID_s";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        {
                                            StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                                    false, false);
                                            ReturnCode_t return_code;
                                            TypeIdentifierPair type_ids;
                                            QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GuidPrefix_s";
                                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                            CompleteStructHeader header;
                                            header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                            CompleteStructMemberSeq member_seq;
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "anonymous_array_uint8_t_12", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_byte", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    TypeIdentifier* element_identifier {nullptr};
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Array element TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    EquivalenceKind equiv_kind = EK_COMPLETE;
                                                    if (TK_NONE == type_ids.type_identifier2()._d())
                                                    {
                                                        equiv_kind = EK_BOTH;
                                                    }
                                                    CollectionElementFlag element_flags = 0;
                                                    PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                                    std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                                    if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                                    {
                                                        SBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(12));

                                                        PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_12"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        LBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(12));

                                                        PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_12"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "anonymous_array_uint8_t_12", type_ids);
                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "anonymous_array_uint8_t_12: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000000;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure value member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "value";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "eprosima::fastdds::statistics::detail::GuidPrefix_s already registered in TypeObjectRegistry for a different type.");
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "eprosima::fastdds::statistics::detail::GuidPrefix_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure guidPrefix member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "guidPrefix";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        {
                                            StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                                    false, false);
                                            ReturnCode_t return_code;
                                            TypeIdentifierPair type_ids;
                                            QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::EntityId_s";
                                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                            CompleteStructHeader header;
                                            header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                            CompleteStructMemberSeq member_seq;
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "anonymous_array_uint8_t_4", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_byte", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    TypeIdentifier* element_identifier {nullptr};
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Array element TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    EquivalenceKind equiv_kind = EK_COMPLETE;
                                                    if (TK_NONE == type_ids.type_identifier2()._d())
                                                    {
                                                        equiv_kind = EK_BOTH;
                                                    }
                                                    CollectionElementFlag element_flags = 0;
                                                    PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                                    std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                                    if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                                    {
                                                        SBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(4));

                                                        PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_4"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        LBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(4));

                                                        PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_4"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "anonymous_array_uint8_t_4", type_ids);
                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "anonymous_array_uint8_t_4: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000000;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure value member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "value";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "eprosima::fastdds::statistics::detail::EntityId_s already registered in TypeObjectRegistry for a different type.");
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "eprosima::fastdds::statistics::detail::EntityId_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000001;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure entityId member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "entityId";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::statistics::detail::GUID_s already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::statistics::detail::GUID_s", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::statistics::detail::GUID_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure remote_entity_guid member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "remote_entity_guid";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        AppliedAnnotationSeq tmp_ann_custom;
                        eprosima::fastcdr::optional<std::string> unit;
                        eprosima::fastcdr::optional<AnnotationParameterValue> min;
                        eprosima::fastcdr::optional<AnnotationParameterValue> max;
                        eprosima::fastcdr::optional<std::string> hash_id;
                        if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                        {
                            member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                        }
                        if (!tmp_ann_custom.empty())
                        {
                            ann_custom = tmp_ann_custom;
                        }
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_uint64_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "time Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000002;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure time member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "time";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_string_unbounded", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            std::string type_id_kind("TI_STRING8_SMALL");
                            if (type_id_kind == "TI_STRING8_SMALL")
                            {
                                SBound bound = 0;
                                StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                        "anonymous_string_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else if (type_id_kind == "TI_STRING8_LARGE")
                            {
                                LBound bound = 255;
                                StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                        "anonymous_string_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded: Unknown String kind.");
                                return;
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_string_unbounded", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000003;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure host member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "host";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_string_unbounded", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            std::string type_id_kind("TI_STRING8_SMALL");
                            if (type_id_kind == "TI_STRING8_SMALL")
                            {
                                SBound bound = 0;
                                StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                        "anonymous_string_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else if (type_id_kind == "TI_STRING8_LARGE")
                            {
                                LBound bound = 255;
                                StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                        "anonymous_string_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded: Unknown String kind.");
                                return;
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_string_unbounded", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000004;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure user member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "user";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_string_unbounded", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            std::string type_id_kind("TI_STRING8_SMALL");
                            if (type_id_kind == "TI_STRING8_SMALL")
                            {
                                SBound bound = 0;
                                StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                        "anonymous_string_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else if (type_id_kind == "TI_STRING8_LARGE")
                            {
                                LBound bound = 255;
                                StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                        "anonymous_string_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded: Unknown String kind.");
                                return;
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_string_unbounded", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000005;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure process member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "process";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "eprosima::fastdds::statistics::DiscoveryTime already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "eprosima::fastdds::statistics::DiscoveryTime", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "eprosima::fastdds::statistics::DiscoveryTime: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            UnionCaseLabelSeq label_seq;
            TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(DISCOVERED_ENTITY));
            CommonUnionMember common;
            MemberId member_id = 0x00000005;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                        label_seq);
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                        label_seq);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union discovery_time member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "discovery_time";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
            TypeObjectUtils::add_complete_union_member(member_seq, member);
        }
        {
            UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "eprosima::fastdds::statistics::SampleIdentityCount", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    QualifiedTypeName type_name = "eprosima::fastdds::statistics::SampleIdentityCount";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, true, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::statistics::detail::SampleIdentity_s", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::SampleIdentity_s";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "eprosima::fastdds::statistics::detail::GUID_s", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        {
                                            StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                                    false, false);
                                            ReturnCode_t return_code;
                                            TypeIdentifierPair type_ids;
                                            QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GUID_s";
                                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                            CompleteStructHeader header;
                                            header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                            CompleteStructMemberSeq member_seq;
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    {
                                                        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                                                false, false);
                                                        ReturnCode_t return_code;
                                                        TypeIdentifierPair type_ids;
                                                        QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GuidPrefix_s";
                                                        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                                        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                                        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                                        CompleteStructHeader header;
                                                        header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                                        CompleteStructMemberSeq member_seq;
                                                        {
                                                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                                                    false, false, false, false);
                                                            return_code =
                                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                                "anonymous_array_uint8_t_12", type_ids);

                                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                            {
                                                                return_code =
                                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                                    "_byte", type_ids);

                                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                                {
                                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                                                    return;
                                                                }
                                                                TypeIdentifier* element_identifier {nullptr};
                                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                                {
                                                                    element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                                                }
                                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                                {
                                                                    element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                                                }
                                                                else
                                                                {
                                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                        "Array element TypeIdentifier inconsistent.");
                                                                    return;
                                                                }
                                                                EquivalenceKind equiv_kind = EK_COMPLETE;
                                                                if (TK_NONE == type_ids.type_identifier2()._d())
                                                                {
                                                                    equiv_kind = EK_BOTH;
                                                                }
                                                                CollectionElementFlag element_flags = 0;
                                                                PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                                                std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                                                if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                                                {
                                                                    SBoundSeq array_bound_seq;
                                                                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(12));

                                                                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_12"))
                                                                    {
                                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                            "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    LBoundSeq array_bound_seq;
                                                                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(12));

                                                                    PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                            TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_12"))
                                                                    {
                                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                            "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                                                    }
                                                                }
                                                                return_code =
                                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                                    "anonymous_array_uint8_t_12", type_ids);
                                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                                {
                                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                                "anonymous_array_uint8_t_12: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                                                    return;
                                                                }
                                                            }
                                                            CommonStructMember common;
                                                            MemberId member_id = 0x00000000;
                                                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                            {
                                                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                            }
                                                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                            {
                                                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                            }
                                                            else
                                                            {
                                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                        "Structure value member TypeIdentifier inconsistent.");
                                                                return;
                                                            }
                                                            MemberName name = "value";
                                                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                            ann_custom.reset();
                                                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                        }
                                                        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "eprosima::fastdds::statistics::detail::GuidPrefix_s already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                        return_code =
                                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                            "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);
                                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                        "eprosima::fastdds::statistics::detail::GuidPrefix_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                                            return;
                                                        }
                                                    }
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000000;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure guidPrefix member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "guidPrefix";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    {
                                                        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                                                false, false);
                                                        ReturnCode_t return_code;
                                                        TypeIdentifierPair type_ids;
                                                        QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::EntityId_s";
                                                        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                                        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                                        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                                        CompleteStructHeader header;
                                                        header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                                        CompleteStructMemberSeq member_seq;
                                                        {
                                                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                                                    false, false, false, false);
                                                            return_code =
                                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                                "anonymous_array_uint8_t_4", type_ids);

                                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                            {
                                                                return_code =
                                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                                    "_byte", type_ids);

                                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                                {
                                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                                                    return;
                                                                }
                                                                TypeIdentifier* element_identifier {nullptr};
                                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                                {
                                                                    element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                                                }
                                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                                {
                                                                    element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                                                }
                                                                else
                                                                {
                                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                        "Array element TypeIdentifier inconsistent.");
                                                                    return;
                                                                }
                                                                EquivalenceKind equiv_kind = EK_COMPLETE;
                                                                if (TK_NONE == type_ids.type_identifier2()._d())
                                                                {
                                                                    equiv_kind = EK_BOTH;
                                                                }
                                                                CollectionElementFlag element_flags = 0;
                                                                PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                                                std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                                                if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                                                {
                                                                    SBoundSeq array_bound_seq;
                                                                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(4));

                                                                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_4"))
                                                                    {
                                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                            "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    LBoundSeq array_bound_seq;
                                                                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(4));

                                                                    PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                            TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_4"))
                                                                    {
                                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                            "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                                                    }
                                                                }
                                                                return_code =
                                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                                    "anonymous_array_uint8_t_4", type_ids);
                                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                                {
                                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                                "anonymous_array_uint8_t_4: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                                                    return;
                                                                }
                                                            }
                                                            CommonStructMember common;
                                                            MemberId member_id = 0x00000000;
                                                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                            {
                                                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                            }
                                                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                            {
                                                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                            }
                                                            else
                                                            {
                                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                        "Structure value member TypeIdentifier inconsistent.");
                                                                return;
                                                            }
                                                            MemberName name = "value";
                                                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                            ann_custom.reset();
                                                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                        }
                                                        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "eprosima::fastdds::statistics::detail::EntityId_s already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                        return_code =
                                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                            "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);
                                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                        "eprosima::fastdds::statistics::detail::EntityId_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                                            return;
                                                        }
                                                    }
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000001;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure entityId member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "entityId";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "eprosima::fastdds::statistics::detail::GUID_s already registered in TypeObjectRegistry for a different type.");
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "eprosima::fastdds::statistics::detail::GUID_s", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "eprosima::fastdds::statistics::detail::GUID_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure writer_guid member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "writer_guid";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "eprosima::fastdds::statistics::detail::SequenceNumber_s", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        {
                                            StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                                    false, false);
                                            ReturnCode_t return_code;
                                            TypeIdentifierPair type_ids;
                                            QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::SequenceNumber_s";
                                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                            CompleteStructHeader header;
                                            header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                            CompleteStructMemberSeq member_seq;
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "_int32_t", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "high Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                    return;
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000000;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure high member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "high";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "_uint32_t", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "low Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                    return;
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000001;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure low member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "low";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "eprosima::fastdds::statistics::detail::SequenceNumber_s already registered in TypeObjectRegistry for a different type.");
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "eprosima::fastdds::statistics::detail::SequenceNumber_s", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "eprosima::fastdds::statistics::detail::SequenceNumber_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000001;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure sequence_number member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "sequence_number";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::statistics::detail::SampleIdentity_s already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::statistics::detail::SampleIdentity_s", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::statistics::detail::SampleIdentity_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure sample_id member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "sample_id";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        AppliedAnnotationSeq tmp_ann_custom;
                        eprosima::fastcdr::optional<std::string> unit;
                        eprosima::fastcdr::optional<AnnotationParameterValue> min;
                        eprosima::fastcdr::optional<AnnotationParameterValue> max;
                        eprosima::fastcdr::optional<std::string> hash_id;
                        if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                        {
                            member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                        }
                        if (!tmp_ann_custom.empty())
                        {
                            ann_custom = tmp_ann_custom;
                        }
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_uint64_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "count Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure count member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "count";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "eprosima::fastdds::statistics::SampleIdentityCount already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "eprosima::fastdds::statistics::SampleIdentityCount", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "eprosima::fastdds::statistics::SampleIdentityCount: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            UnionCaseLabelSeq label_seq;
            TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(SAMPLE_DATAS));
            CommonUnionMember common;
            MemberId member_id = 0x00000006;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                        label_seq);
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                        label_seq);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union sample_identity_count member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "sample_identity_count";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
            TypeObjectUtils::add_complete_union_member(member_seq, member);
        }
        {
            UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "eprosima::fastdds::statistics::PhysicalData", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    QualifiedTypeName type_name = "eprosima::fastdds::statistics::PhysicalData";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, true, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "eprosima::fastdds::statistics::detail::GUID_s", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GUID_s";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        {
                                            StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                                    false, false);
                                            ReturnCode_t return_code;
                                            TypeIdentifierPair type_ids;
                                            QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::GuidPrefix_s";
                                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                            CompleteStructHeader header;
                                            header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                            CompleteStructMemberSeq member_seq;
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "anonymous_array_uint8_t_12", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_byte", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    TypeIdentifier* element_identifier {nullptr};
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Array element TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    EquivalenceKind equiv_kind = EK_COMPLETE;
                                                    if (TK_NONE == type_ids.type_identifier2()._d())
                                                    {
                                                        equiv_kind = EK_BOTH;
                                                    }
                                                    CollectionElementFlag element_flags = 0;
                                                    PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                                    std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                                    if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                                    {
                                                        SBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(12));

                                                        PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_12"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        LBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(12));

                                                        PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_12"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_12 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "anonymous_array_uint8_t_12", type_ids);
                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "anonymous_array_uint8_t_12: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000000;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure value member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "value";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "eprosima::fastdds::statistics::detail::GuidPrefix_s already registered in TypeObjectRegistry for a different type.");
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "eprosima::fastdds::statistics::detail::GuidPrefix_s", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "eprosima::fastdds::statistics::detail::GuidPrefix_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure guidPrefix member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "guidPrefix";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        {
                                            StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                                    false, false);
                                            ReturnCode_t return_code;
                                            TypeIdentifierPair type_ids;
                                            QualifiedTypeName type_name = "eprosima::fastdds::statistics::detail::EntityId_s";
                                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                            CompleteStructHeader header;
                                            header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                            CompleteStructMemberSeq member_seq;
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "anonymous_array_uint8_t_4", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_byte", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    TypeIdentifier* element_identifier {nullptr};
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Array element TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    EquivalenceKind equiv_kind = EK_COMPLETE;
                                                    if (TK_NONE == type_ids.type_identifier2()._d())
                                                    {
                                                        equiv_kind = EK_BOTH;
                                                    }
                                                    CollectionElementFlag element_flags = 0;
                                                    PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                                    std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                                    if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                                    {
                                                        SBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(4));

                                                        PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_4"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        LBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(4));

                                                        PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_4"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_4 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "anonymous_array_uint8_t_4", type_ids);
                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "anonymous_array_uint8_t_4: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000000;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure value member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "value";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "eprosima::fastdds::statistics::detail::EntityId_s already registered in TypeObjectRegistry for a different type.");
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "eprosima::fastdds::statistics::detail::EntityId_s", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "eprosima::fastdds::statistics::detail::EntityId_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000001;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure entityId member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "entityId";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "eprosima::fastdds::statistics::detail::GUID_s already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "eprosima::fastdds::statistics::detail::GUID_s", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "eprosima::fastdds::statistics::detail::GUID_s: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure participant_guid member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "participant_guid";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        AppliedAnnotationSeq tmp_ann_custom;
                        eprosima::fastcdr::optional<std::string> unit;
                        eprosima::fastcdr::optional<AnnotationParameterValue> min;
                        eprosima::fastcdr::optional<AnnotationParameterValue> max;
                        eprosima::fastcdr::optional<std::string> hash_id;
                        if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                        {
                            member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                        }
                        if (!tmp_ann_custom.empty())
                        {
                            ann_custom = tmp_ann_custom;
                        }
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_string_unbounded", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            std::string type_id_kind("TI_STRING8_SMALL");
                            if (type_id_kind == "TI_STRING8_SMALL")
                            {
                                SBound bound = 0;
                                StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                        "anonymous_string_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else if (type_id_kind == "TI_STRING8_LARGE")
                            {
                                LBound bound = 255;
                                StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                        "anonymous_string_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded: Unknown String kind.");
                                return;
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_string_unbounded", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure host member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "host";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_string_unbounded", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            std::string type_id_kind("TI_STRING8_SMALL");
                            if (type_id_kind == "TI_STRING8_SMALL")
                            {
                                SBound bound = 0;
                                StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                        "anonymous_string_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else if (type_id_kind == "TI_STRING8_LARGE")
                            {
                                LBound bound = 255;
                                StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                        "anonymous_string_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded: Unknown String kind.");
                                return;
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_string_unbounded", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000002;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure user member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "user";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_string_unbounded", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            std::string type_id_kind("TI_STRING8_SMALL");
                            if (type_id_kind == "TI_STRING8_SMALL")
                            {
                                SBound bound = 0;
                                StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                        "anonymous_string_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else if (type_id_kind == "TI_STRING8_LARGE")
                            {
                                LBound bound = 255;
                                StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                        "anonymous_string_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded: Unknown String kind.");
                                return;
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_string_unbounded", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000003;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure process member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "process";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "eprosima::fastdds::statistics::PhysicalData already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "eprosima::fastdds::statistics::PhysicalData", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "eprosima::fastdds::statistics::PhysicalData: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            UnionCaseLabelSeq label_seq;
            TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(PHYSICAL_DATA));
            CommonUnionMember common;
            MemberId member_id = 0x00000007;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                        label_seq);
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                        label_seq);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union physical_data member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "physical_data";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
            TypeObjectUtils::add_complete_union_member(member_seq, member);
        }
        CompleteUnionType union_type = TypeObjectUtils::build_complete_union_type(union_flags, header, discriminator,
                member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_union_type_object(union_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "eprosima::fastdds::statistics::Data already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "eprosima::fastdds::statistics::Data", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "eprosima::fastdds::statistics::Data: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}

} // namespace statistics

} // namespace fastdds

} // namespace eprosima

