// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file FixedSizedCdrAux.hpp
 * This source file contains some definitions of CDR related functions.
 *
 * This file was generated by the tool fastddsgen (version: 4.1.0).
 */

#ifndef FAST_DDS_GENERATED__FIXEDSIZEDCDRAUX_HPP
#define FAST_DDS_GENERATED__FIXEDSIZEDCDRAUX_HPP

#include "FixedSized.hpp"
constexpr uint32_t FixedSized_max_cdr_typesize {2UL};
constexpr uint32_t FixedSized_max_key_cdr_typesize {0UL};


namespace eprosima {
namespace fastcdr {

class Cdr;
class CdrSizeCalculator;

eProsima_user_DllExport void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const FixedSized& data);

#ifndef SWIG
namespace detail {

template<typename Tag, typename Tag::type M>
struct FixedSized_rob
{
    friend constexpr typename Tag::type get(
            Tag)
    {
        return M;
    }

};

struct FixedSized_f
{
    typedef uint16_t FixedSized::* type;
    friend constexpr type get(
            FixedSized_f);
};

template struct FixedSized_rob<FixedSized_f, &FixedSized::m_index>;

template <typename T, typename Tag>
inline std::size_t constexpr FixedSized_offset_of()
{
    return ((std::size_t) &reinterpret_cast<char const volatile&>((((T*)0)->*get(Tag()))));
}

} // namespace detail
#endif // ifndef SWIG



} // namespace fastcdr
} // namespace eprosima

#endif // FAST_DDS_GENERATED__FIXEDSIZEDCDRAUX_HPP

