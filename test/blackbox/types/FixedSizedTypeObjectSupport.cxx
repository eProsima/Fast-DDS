// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file FixedSizedTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "FixedSizedTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "FixedSized.hpp"


using namespace eprosima::fastdds::dds::xtypes;

void register_FixedSized_type_objects()
{
    static std::once_flag once_flag;
    std::call_once(once_flag, []()
            {
                register_FixedSized_type_identifier();

            });
}

void register_FixedSized_type_identifier()
{
    {
        StructTypeFlag struct_flags_FixedSized = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::FINAL,
                false, false);
        ReturnCode_t return_code_FixedSized;
        TypeIdentifierPair type_ids_FixedSized;
        QualifiedTypeName type_name_FixedSized = "FixedSized";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_FixedSized;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_FixedSized;
        AppliedAnnotationSeq tmp_ann_custom_FixedSized;
        eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim_FixedSized;
        if (!tmp_ann_custom_FixedSized.empty())
        {
            ann_custom_FixedSized = tmp_ann_custom_FixedSized;
        }

        CompleteTypeDetail detail_FixedSized = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_FixedSized, ann_custom_FixedSized, type_name_FixedSized.to_string());
        CompleteStructHeader header_FixedSized;
        header_FixedSized = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_FixedSized);
        CompleteStructMemberSeq member_seq_FixedSized;
        {
            return_code_FixedSized =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint16_t", type_ids_FixedSized);

            if (return_code_FixedSized != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "index Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_index = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_index;
            MemberId member_id_index = 0x00000000;
            if (EK_COMPLETE == type_ids_FixedSized.type_identifier1()._d() || TK_NONE == type_ids_FixedSized.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_FixedSized.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_FixedSized.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_FixedSized.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_FixedSized.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_FixedSized.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_FixedSized.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_FixedSized.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_FixedSized.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_FixedSized.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_FixedSized.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_FixedSized.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_FixedSized.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_FixedSized.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_FixedSized.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_index = TypeObjectUtils::build_common_struct_member(member_id_index, member_flags_index, type_ids_FixedSized.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_FixedSized.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_FixedSized.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_FixedSized.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_FixedSized.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_FixedSized.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_FixedSized.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_FixedSized.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_FixedSized.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_FixedSized.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_FixedSized.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_FixedSized.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_FixedSized.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_FixedSized.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_FixedSized.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_FixedSized.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_index = TypeObjectUtils::build_common_struct_member(member_id_index, member_flags_index, type_ids_FixedSized.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure index member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_index = "index";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_index;
            ann_custom_FixedSized.reset();
            CompleteMemberDetail detail_index = TypeObjectUtils::build_complete_member_detail(name_index, member_ann_builtin_index, ann_custom_FixedSized);
            CompleteStructMember member_index = TypeObjectUtils::build_complete_struct_member(common_index, detail_index);
            TypeObjectUtils::add_complete_struct_member(member_seq_FixedSized, member_index);
        }
        CompleteStructType struct_type_FixedSized = TypeObjectUtils::build_complete_struct_type(struct_flags_FixedSized, header_FixedSized, member_seq_FixedSized);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_FixedSized, type_name_FixedSized.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "FixedSized already registered in TypeObjectRegistry for a different type.");
        }
        return_code_FixedSized =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "FixedSized", type_ids_FixedSized);
        if (return_code_FixedSized != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "FixedSized: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}

