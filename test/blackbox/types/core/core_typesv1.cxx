// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file core_types.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen (version: 3.3.1).
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "core_types.h"

#if FASTCDR_VERSION_MAJOR == 1

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

namespace helper { namespace internal {

enum class Size {
    UInt8,
    UInt16,
    UInt32,
    UInt64,
};

constexpr Size get_size(int s) {
    return (s <= 8 ) ? Size::UInt8:
           (s <= 16) ? Size::UInt16:
           (s <= 32) ? Size::UInt32: Size::UInt64;
}

template<Size s>
struct FindTypeH;

template<>
struct FindTypeH<Size::UInt8> {
    using type = std::uint8_t;
};

template<>
struct FindTypeH<Size::UInt16> {
    using type = std::uint16_t;
};

template<>
struct FindTypeH<Size::UInt32> {
    using type = std::uint32_t;
};

template<>
struct FindTypeH<Size::UInt64> {
    using type = std::uint64_t;
};
}

template<int S>
struct FindType {
    using type = typename internal::FindTypeH<internal::get_size(S)>::type;
};
}

#define eprosima_fastdds_rtps_core_detail_SequenceNumber_t_max_cdr_typesize 12ULL;
#define eprosima_fastdds_rtps_core_InfoTimestampSubmessage_max_cdr_typesize 24ULL;
#define eprosima_fastdds_rtps_core_detail_Count_t_max_cdr_typesize 8ULL;
#define eprosima_fastdds_rtps_core_detail_GuidPrefix_t_max_cdr_typesize 16ULL;
#define eprosima_fastdds_rtps_core_detail_StatusInfo_t_max_cdr_typesize 8ULL;
#define eprosima_fastdds_rtps_core_detail_ProtocolVersion_t_max_cdr_typesize 6ULL;
#define eprosima_fastdds_rtps_core_detail_GUID_t_max_cdr_typesize 28ULL;
#define eprosima_fastdds_rtps_core_detail_Time_t_max_cdr_typesize 12ULL;
#define eprosima_fastdds_rtps_core_AckNackSubmessage_max_cdr_typesize 64ULL;
#define eprosima_fastdds_rtps_core_InfoDestinationSubmessage_max_cdr_typesize 28ULL;
#define eprosima_fastdds_rtps_core_detail_EntityId_t_max_cdr_typesize 8ULL;

#define eprosima_fastdds_rtps_core_Header_max_cdr_typesize 40ULL;
#define eprosima_fastdds_rtps_core_detail_EntityName_t_max_cdr_typesize 264ULL;
#define eprosima_fastdds_rtps_core_detail_Duration_t_max_cdr_typesize 12ULL;
#define eprosima_fastdds_rtps_core_SubmessageHeader_max_cdr_typesize 8ULL;

#define eprosima_fastdds_rtps_core_detail_SequenceNumberSet_max_cdr_typesize 28ULL;

#define eprosima_fastdds_rtps_core_detail_KeyHash_t_max_cdr_typesize 20ULL;
#define eprosima_fastdds_rtps_core_detail_VendorId_t_max_cdr_typesize 6ULL;
#define eprosima_fastdds_rtps_core_detail_Locator_t_max_cdr_typesize 28ULL;
#define eprosima_fastdds_rtps_core_HeartBeatSubmessage_max_cdr_typesize 60ULL;
#define eprosima_fastdds_rtps_core_InfoSourceSubmessage_max_cdr_typesize 48ULL;


namespace eprosima {

namespace fastdds {

namespace rtps {

namespace core {

namespace detail {



EntityId_t::EntityId_t()
{
    // octet m_value
    memset(&m_value, 0, ((4)) * 1);

}

EntityId_t::~EntityId_t()
{
}

EntityId_t::EntityId_t(
        const EntityId_t& x)
{
    m_value = x.m_value;

}

EntityId_t::EntityId_t(
        EntityId_t&& x) noexcept
{
    m_value = std::move(x.m_value);

}

EntityId_t& EntityId_t::operator =(
        const EntityId_t& x)
{
    m_value = x.m_value;

    return *this;
}

EntityId_t& EntityId_t::operator =(
        EntityId_t&& x) noexcept
{
    m_value = std::move(x.m_value);

    return *this;
}

bool EntityId_t::operator ==(
        const EntityId_t& x) const
{
    return (m_value == x.m_value);
}

bool EntityId_t::operator !=(
        const EntityId_t& x) const
{
    return !(*this == x);
}

size_t EntityId_t::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return eprosima_fastdds_rtps_core_detail_EntityId_t_max_cdr_typesize;
}

size_t EntityId_t::getCdrSerializedSize(
        const EntityId_t& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += (((4)) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}


void EntityId_t::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_value;


}

void EntityId_t::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_value;


}


bool EntityId_t::isKeyDefined()
{
    return false;
}

void EntityId_t::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

/*!
 * @brief This function copies the value in member value
 * @param _value New value to be copied in member value
 */
void EntityId_t::value(
        const std::array<uint8_t, 4>& _value)
{
    m_value = _value;
}

/*!
 * @brief This function moves the value in member value
 * @param _value New value to be moved in member value
 */
void EntityId_t::value(
        std::array<uint8_t, 4>&& _value)
{
    m_value = std::move(_value);
}

/*!
 * @brief This function returns a constant reference to member value
 * @return Constant reference to member value
 */
const std::array<uint8_t, 4>& EntityId_t::value() const
{
    return m_value;
}

/*!
 * @brief This function returns a reference to member value
 * @return Reference to member value
 */
std::array<uint8_t, 4>& EntityId_t::value()
{
    return m_value;
}





ProtocolVersion_t::ProtocolVersion_t()
{
    // octet m_major
    m_major = 0;
    // octet m_minor
    m_minor = 0;

}

ProtocolVersion_t::~ProtocolVersion_t()
{
}

ProtocolVersion_t::ProtocolVersion_t(
        const ProtocolVersion_t& x)
{
    m_major = x.m_major;


    m_minor = x.m_minor;

}

ProtocolVersion_t::ProtocolVersion_t(
        ProtocolVersion_t&& x) noexcept
{
    m_major = x.m_major;


    m_minor = x.m_minor;

}

ProtocolVersion_t& ProtocolVersion_t::operator =(
        const ProtocolVersion_t& x)
{
    m_major = x.m_major;


    m_minor = x.m_minor;

    return *this;
}

ProtocolVersion_t& ProtocolVersion_t::operator =(
        ProtocolVersion_t&& x) noexcept
{
    m_major = x.m_major;


    m_minor = x.m_minor;

    return *this;
}

bool ProtocolVersion_t::operator ==(
        const ProtocolVersion_t& x) const
{
    return (m_major == x.m_major &&
           m_minor == x.m_minor);
}

bool ProtocolVersion_t::operator !=(
        const ProtocolVersion_t& x) const
{
    return !(*this == x);
}

size_t ProtocolVersion_t::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return eprosima_fastdds_rtps_core_detail_ProtocolVersion_t_max_cdr_typesize;
}

size_t ProtocolVersion_t::getCdrSerializedSize(
        const ProtocolVersion_t& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}


void ProtocolVersion_t::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_major;

    scdr << m_minor;

}

void ProtocolVersion_t::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_major;



    dcdr >> m_minor;


}


bool ProtocolVersion_t::isKeyDefined()
{
    return false;
}

void ProtocolVersion_t::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

/*!
 * @brief This function sets a value in member major
 * @param _major New value for member major
 */
void ProtocolVersion_t::major(
        uint8_t _major)
{
    m_major = _major;
}

/*!
 * @brief This function returns the value of member major
 * @return Value of member major
 */
uint8_t ProtocolVersion_t::major() const
{
    return m_major;
}

/*!
 * @brief This function returns a reference to member major
 * @return Reference to member major
 */
uint8_t& ProtocolVersion_t::major()
{
    return m_major;
}


/*!
 * @brief This function sets a value in member minor
 * @param _minor New value for member minor
 */
void ProtocolVersion_t::minor(
        uint8_t _minor)
{
    m_minor = _minor;
}

/*!
 * @brief This function returns the value of member minor
 * @return Value of member minor
 */
uint8_t ProtocolVersion_t::minor() const
{
    return m_minor;
}

/*!
 * @brief This function returns a reference to member minor
 * @return Reference to member minor
 */
uint8_t& ProtocolVersion_t::minor()
{
    return m_minor;
}





VendorId_t::VendorId_t()
{
    // octet m_vendorId
    memset(&m_vendorId, 0, ((2)) * 1);

}

VendorId_t::~VendorId_t()
{
}

VendorId_t::VendorId_t(
        const VendorId_t& x)
{
    m_vendorId = x.m_vendorId;

}

VendorId_t::VendorId_t(
        VendorId_t&& x) noexcept
{
    m_vendorId = std::move(x.m_vendorId);

}

VendorId_t& VendorId_t::operator =(
        const VendorId_t& x)
{
    m_vendorId = x.m_vendorId;

    return *this;
}

VendorId_t& VendorId_t::operator =(
        VendorId_t&& x) noexcept
{
    m_vendorId = std::move(x.m_vendorId);

    return *this;
}

bool VendorId_t::operator ==(
        const VendorId_t& x) const
{
    return (m_vendorId == x.m_vendorId);
}

bool VendorId_t::operator !=(
        const VendorId_t& x) const
{
    return !(*this == x);
}

size_t VendorId_t::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return eprosima_fastdds_rtps_core_detail_VendorId_t_max_cdr_typesize;
}

size_t VendorId_t::getCdrSerializedSize(
        const VendorId_t& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += (((2)) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}


void VendorId_t::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_vendorId;


}

void VendorId_t::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_vendorId;


}


bool VendorId_t::isKeyDefined()
{
    return false;
}

void VendorId_t::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

/*!
 * @brief This function copies the value in member vendorId
 * @param _vendorId New value to be copied in member vendorId
 */
void VendorId_t::vendorId(
        const std::array<uint8_t, 2>& _vendorId)
{
    m_vendorId = _vendorId;
}

/*!
 * @brief This function moves the value in member vendorId
 * @param _vendorId New value to be moved in member vendorId
 */
void VendorId_t::vendorId(
        std::array<uint8_t, 2>&& _vendorId)
{
    m_vendorId = std::move(_vendorId);
}

/*!
 * @brief This function returns a constant reference to member vendorId
 * @return Constant reference to member vendorId
 */
const std::array<uint8_t, 2>& VendorId_t::vendorId() const
{
    return m_vendorId;
}

/*!
 * @brief This function returns a reference to member vendorId
 * @return Reference to member vendorId
 */
std::array<uint8_t, 2>& VendorId_t::vendorId()
{
    return m_vendorId;
}





GuidPrefix_t::GuidPrefix_t()
{
    // octet m_value
    memset(&m_value, 0, ((12)) * 1);

}

GuidPrefix_t::~GuidPrefix_t()
{
}

GuidPrefix_t::GuidPrefix_t(
        const GuidPrefix_t& x)
{
    m_value = x.m_value;

}

GuidPrefix_t::GuidPrefix_t(
        GuidPrefix_t&& x) noexcept
{
    m_value = std::move(x.m_value);

}

GuidPrefix_t& GuidPrefix_t::operator =(
        const GuidPrefix_t& x)
{
    m_value = x.m_value;

    return *this;
}

GuidPrefix_t& GuidPrefix_t::operator =(
        GuidPrefix_t&& x) noexcept
{
    m_value = std::move(x.m_value);

    return *this;
}

bool GuidPrefix_t::operator ==(
        const GuidPrefix_t& x) const
{
    return (m_value == x.m_value);
}

bool GuidPrefix_t::operator !=(
        const GuidPrefix_t& x) const
{
    return !(*this == x);
}

size_t GuidPrefix_t::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return eprosima_fastdds_rtps_core_detail_GuidPrefix_t_max_cdr_typesize;
}

size_t GuidPrefix_t::getCdrSerializedSize(
        const GuidPrefix_t& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += (((12)) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}


void GuidPrefix_t::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_value;


}

void GuidPrefix_t::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_value;


}


bool GuidPrefix_t::isKeyDefined()
{
    return false;
}

void GuidPrefix_t::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

/*!
 * @brief This function copies the value in member value
 * @param _value New value to be copied in member value
 */
void GuidPrefix_t::value(
        const std::array<uint8_t, 12>& _value)
{
    m_value = _value;
}

/*!
 * @brief This function moves the value in member value
 * @param _value New value to be moved in member value
 */
void GuidPrefix_t::value(
        std::array<uint8_t, 12>&& _value)
{
    m_value = std::move(_value);
}

/*!
 * @brief This function returns a constant reference to member value
 * @return Constant reference to member value
 */
const std::array<uint8_t, 12>& GuidPrefix_t::value() const
{
    return m_value;
}

/*!
 * @brief This function returns a reference to member value
 * @return Reference to member value
 */
std::array<uint8_t, 12>& GuidPrefix_t::value()
{
    return m_value;
}





GUID_t::GUID_t()
{
    // eprosima::fastdds::rtps::core::detail::GuidPrefix_t m_guidPrefix

    // eprosima::fastdds::rtps::core::detail::EntityId_t m_entityId


}

GUID_t::~GUID_t()
{
}

GUID_t::GUID_t(
        const GUID_t& x)
{
    m_guidPrefix = x.m_guidPrefix;


    m_entityId = x.m_entityId;

}

GUID_t::GUID_t(
        GUID_t&& x) noexcept
{
    m_guidPrefix = std::move(x.m_guidPrefix);


    m_entityId = std::move(x.m_entityId);

}

GUID_t& GUID_t::operator =(
        const GUID_t& x)
{
    m_guidPrefix = x.m_guidPrefix;


    m_entityId = x.m_entityId;

    return *this;
}

GUID_t& GUID_t::operator =(
        GUID_t&& x) noexcept
{
    m_guidPrefix = std::move(x.m_guidPrefix);


    m_entityId = std::move(x.m_entityId);

    return *this;
}

bool GUID_t::operator ==(
        const GUID_t& x) const
{
    return (m_guidPrefix == x.m_guidPrefix &&
           m_entityId == x.m_entityId);
}

bool GUID_t::operator !=(
        const GUID_t& x) const
{
    return !(*this == x);
}

size_t GUID_t::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return eprosima_fastdds_rtps_core_detail_GUID_t_max_cdr_typesize;
}

size_t GUID_t::getCdrSerializedSize(
        const GUID_t& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += eprosima::fastdds::rtps::core::detail::GuidPrefix_t::getCdrSerializedSize(data.guidPrefix(), current_alignment);


    current_alignment += eprosima::fastdds::rtps::core::detail::EntityId_t::getCdrSerializedSize(data.entityId(), current_alignment);


    return current_alignment - initial_alignment;
}


void GUID_t::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_guidPrefix;

    scdr << m_entityId;

}

void GUID_t::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_guidPrefix;



    dcdr >> m_entityId;


}


bool GUID_t::isKeyDefined()
{
    return false;
}

void GUID_t::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

/*!
 * @brief This function copies the value in member guidPrefix
 * @param _guidPrefix New value to be copied in member guidPrefix
 */
void GUID_t::guidPrefix(
        const eprosima::fastdds::rtps::core::detail::GuidPrefix_t& _guidPrefix)
{
    m_guidPrefix = _guidPrefix;
}

/*!
 * @brief This function moves the value in member guidPrefix
 * @param _guidPrefix New value to be moved in member guidPrefix
 */
void GUID_t::guidPrefix(
        eprosima::fastdds::rtps::core::detail::GuidPrefix_t&& _guidPrefix)
{
    m_guidPrefix = std::move(_guidPrefix);
}

/*!
 * @brief This function returns a constant reference to member guidPrefix
 * @return Constant reference to member guidPrefix
 */
const eprosima::fastdds::rtps::core::detail::GuidPrefix_t& GUID_t::guidPrefix() const
{
    return m_guidPrefix;
}

/*!
 * @brief This function returns a reference to member guidPrefix
 * @return Reference to member guidPrefix
 */
eprosima::fastdds::rtps::core::detail::GuidPrefix_t& GUID_t::guidPrefix()
{
    return m_guidPrefix;
}


/*!
 * @brief This function copies the value in member entityId
 * @param _entityId New value to be copied in member entityId
 */
void GUID_t::entityId(
        const eprosima::fastdds::rtps::core::detail::EntityId_t& _entityId)
{
    m_entityId = _entityId;
}

/*!
 * @brief This function moves the value in member entityId
 * @param _entityId New value to be moved in member entityId
 */
void GUID_t::entityId(
        eprosima::fastdds::rtps::core::detail::EntityId_t&& _entityId)
{
    m_entityId = std::move(_entityId);
}

/*!
 * @brief This function returns a constant reference to member entityId
 * @return Constant reference to member entityId
 */
const eprosima::fastdds::rtps::core::detail::EntityId_t& GUID_t::entityId() const
{
    return m_entityId;
}

/*!
 * @brief This function returns a reference to member entityId
 * @return Reference to member entityId
 */
eprosima::fastdds::rtps::core::detail::EntityId_t& GUID_t::entityId()
{
    return m_entityId;
}





SequenceNumber_t::SequenceNumber_t()
{
    // long m_high
    m_high = 0;
    // unsigned long m_low
    m_low = 0;

}

SequenceNumber_t::~SequenceNumber_t()
{
}

SequenceNumber_t::SequenceNumber_t(
        const SequenceNumber_t& x)
{
    m_high = x.m_high;


    m_low = x.m_low;

}

SequenceNumber_t::SequenceNumber_t(
        SequenceNumber_t&& x) noexcept
{
    m_high = x.m_high;


    m_low = x.m_low;

}

SequenceNumber_t& SequenceNumber_t::operator =(
        const SequenceNumber_t& x)
{
    m_high = x.m_high;


    m_low = x.m_low;

    return *this;
}

SequenceNumber_t& SequenceNumber_t::operator =(
        SequenceNumber_t&& x) noexcept
{
    m_high = x.m_high;


    m_low = x.m_low;

    return *this;
}

bool SequenceNumber_t::operator ==(
        const SequenceNumber_t& x) const
{
    return (m_high == x.m_high &&
           m_low == x.m_low);
}

bool SequenceNumber_t::operator !=(
        const SequenceNumber_t& x) const
{
    return !(*this == x);
}

size_t SequenceNumber_t::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return eprosima_fastdds_rtps_core_detail_SequenceNumber_t_max_cdr_typesize;
}

size_t SequenceNumber_t::getCdrSerializedSize(
        const SequenceNumber_t& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}


void SequenceNumber_t::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_high;

    scdr << m_low;

}

void SequenceNumber_t::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_high;



    dcdr >> m_low;


}


bool SequenceNumber_t::isKeyDefined()
{
    return false;
}

void SequenceNumber_t::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

/*!
 * @brief This function sets a value in member high
 * @param _high New value for member high
 */
void SequenceNumber_t::high(
        int32_t _high)
{
    m_high = _high;
}

/*!
 * @brief This function returns the value of member high
 * @return Value of member high
 */
int32_t SequenceNumber_t::high() const
{
    return m_high;
}

/*!
 * @brief This function returns a reference to member high
 * @return Reference to member high
 */
int32_t& SequenceNumber_t::high()
{
    return m_high;
}


/*!
 * @brief This function sets a value in member low
 * @param _low New value for member low
 */
void SequenceNumber_t::low(
        uint32_t _low)
{
    m_low = _low;
}

/*!
 * @brief This function returns the value of member low
 * @return Value of member low
 */
uint32_t SequenceNumber_t::low() const
{
    return m_low;
}

/*!
 * @brief This function returns a reference to member low
 * @return Reference to member low
 */
uint32_t& SequenceNumber_t::low()
{
    return m_low;
}





Count_t::Count_t()
{
    // long m_value
    m_value = 0;

}

Count_t::~Count_t()
{
}

Count_t::Count_t(
        const Count_t& x)
{
    m_value = x.m_value;

}

Count_t::Count_t(
        Count_t&& x) noexcept
{
    m_value = x.m_value;

}

Count_t& Count_t::operator =(
        const Count_t& x)
{
    m_value = x.m_value;

    return *this;
}

Count_t& Count_t::operator =(
        Count_t&& x) noexcept
{
    m_value = x.m_value;

    return *this;
}

bool Count_t::operator ==(
        const Count_t& x) const
{
    return (m_value == x.m_value);
}

bool Count_t::operator !=(
        const Count_t& x) const
{
    return !(*this == x);
}

size_t Count_t::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return eprosima_fastdds_rtps_core_detail_Count_t_max_cdr_typesize;
}

size_t Count_t::getCdrSerializedSize(
        const Count_t& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}


void Count_t::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_value;

}

void Count_t::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_value;


}


bool Count_t::isKeyDefined()
{
    return false;
}

void Count_t::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

/*!
 * @brief This function sets a value in member value
 * @param _value New value for member value
 */
void Count_t::value(
        int32_t _value)
{
    m_value = _value;
}

/*!
 * @brief This function returns the value of member value
 * @return Value of member value
 */
int32_t Count_t::value() const
{
    return m_value;
}

/*!
 * @brief This function returns a reference to member value
 * @return Reference to member value
 */
int32_t& Count_t::value()
{
    return m_value;
}





Time_t::Time_t()
{
    // unsigned long m_seconds
    m_seconds = 0;
    // unsigned long m_fraction
    m_fraction = 0;

}

Time_t::~Time_t()
{
}

Time_t::Time_t(
        const Time_t& x)
{
    m_seconds = x.m_seconds;


    m_fraction = x.m_fraction;

}

Time_t::Time_t(
        Time_t&& x) noexcept
{
    m_seconds = x.m_seconds;


    m_fraction = x.m_fraction;

}

Time_t& Time_t::operator =(
        const Time_t& x)
{
    m_seconds = x.m_seconds;


    m_fraction = x.m_fraction;

    return *this;
}

Time_t& Time_t::operator =(
        Time_t&& x) noexcept
{
    m_seconds = x.m_seconds;


    m_fraction = x.m_fraction;

    return *this;
}

bool Time_t::operator ==(
        const Time_t& x) const
{
    return (m_seconds == x.m_seconds &&
           m_fraction == x.m_fraction);
}

bool Time_t::operator !=(
        const Time_t& x) const
{
    return !(*this == x);
}

size_t Time_t::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return eprosima_fastdds_rtps_core_detail_Time_t_max_cdr_typesize;
}

size_t Time_t::getCdrSerializedSize(
        const Time_t& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}


void Time_t::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_seconds;

    scdr << m_fraction;

}

void Time_t::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_seconds;



    dcdr >> m_fraction;


}


bool Time_t::isKeyDefined()
{
    return false;
}

void Time_t::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

/*!
 * @brief This function sets a value in member seconds
 * @param _seconds New value for member seconds
 */
void Time_t::seconds(
        uint32_t _seconds)
{
    m_seconds = _seconds;
}

/*!
 * @brief This function returns the value of member seconds
 * @return Value of member seconds
 */
uint32_t Time_t::seconds() const
{
    return m_seconds;
}

/*!
 * @brief This function returns a reference to member seconds
 * @return Reference to member seconds
 */
uint32_t& Time_t::seconds()
{
    return m_seconds;
}


/*!
 * @brief This function sets a value in member fraction
 * @param _fraction New value for member fraction
 */
void Time_t::fraction(
        uint32_t _fraction)
{
    m_fraction = _fraction;
}

/*!
 * @brief This function returns the value of member fraction
 * @return Value of member fraction
 */
uint32_t Time_t::fraction() const
{
    return m_fraction;
}

/*!
 * @brief This function returns a reference to member fraction
 * @return Reference to member fraction
 */
uint32_t& Time_t::fraction()
{
    return m_fraction;
}






SequenceNumberSet::SequenceNumberSet()
{
    // eprosima::fastdds::rtps::core::detail::SequenceNumber_t m_bitmapBase

    // unsigned long m_numBits
    m_numBits = 0;
    // octet m_bitmap
    memset(&m_bitmap, 0, ((8)) * 1);

}

SequenceNumberSet::~SequenceNumberSet()
{
}

SequenceNumberSet::SequenceNumberSet(
        const SequenceNumberSet& x)
{
    m_bitmapBase = x.m_bitmapBase;


    m_numBits = x.m_numBits;


    m_bitmap = x.m_bitmap;

}

SequenceNumberSet::SequenceNumberSet(
        SequenceNumberSet&& x) noexcept
{
    m_bitmapBase = std::move(x.m_bitmapBase);


    m_numBits = x.m_numBits;


    m_bitmap = std::move(x.m_bitmap);

}

SequenceNumberSet& SequenceNumberSet::operator =(
        const SequenceNumberSet& x)
{
    m_bitmapBase = x.m_bitmapBase;


    m_numBits = x.m_numBits;


    m_bitmap = x.m_bitmap;

    return *this;
}

SequenceNumberSet& SequenceNumberSet::operator =(
        SequenceNumberSet&& x) noexcept
{
    m_bitmapBase = std::move(x.m_bitmapBase);


    m_numBits = x.m_numBits;


    m_bitmap = std::move(x.m_bitmap);

    return *this;
}

bool SequenceNumberSet::operator ==(
        const SequenceNumberSet& x) const
{
    return (m_bitmapBase == x.m_bitmapBase &&
           m_numBits == x.m_numBits &&
           m_bitmap == x.m_bitmap);
}

bool SequenceNumberSet::operator !=(
        const SequenceNumberSet& x) const
{
    return !(*this == x);
}

size_t SequenceNumberSet::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return eprosima_fastdds_rtps_core_detail_SequenceNumberSet_max_cdr_typesize;
}

size_t SequenceNumberSet::getCdrSerializedSize(
        const SequenceNumberSet& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += eprosima::fastdds::rtps::core::detail::SequenceNumber_t::getCdrSerializedSize(data.bitmapBase(), current_alignment);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += (((8)) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}


void SequenceNumberSet::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_bitmapBase;

    scdr << m_numBits;

    scdr << m_bitmap;


}

void SequenceNumberSet::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_bitmapBase;



    dcdr >> m_numBits;



    dcdr >> m_bitmap;


}


bool SequenceNumberSet::isKeyDefined()
{
    return false;
}

void SequenceNumberSet::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

/*!
 * @brief This function copies the value in member bitmapBase
 * @param _bitmapBase New value to be copied in member bitmapBase
 */
void SequenceNumberSet::bitmapBase(
        const eprosima::fastdds::rtps::core::detail::SequenceNumber_t& _bitmapBase)
{
    m_bitmapBase = _bitmapBase;
}

/*!
 * @brief This function moves the value in member bitmapBase
 * @param _bitmapBase New value to be moved in member bitmapBase
 */
void SequenceNumberSet::bitmapBase(
        eprosima::fastdds::rtps::core::detail::SequenceNumber_t&& _bitmapBase)
{
    m_bitmapBase = std::move(_bitmapBase);
}

/*!
 * @brief This function returns a constant reference to member bitmapBase
 * @return Constant reference to member bitmapBase
 */
const eprosima::fastdds::rtps::core::detail::SequenceNumber_t& SequenceNumberSet::bitmapBase() const
{
    return m_bitmapBase;
}

/*!
 * @brief This function returns a reference to member bitmapBase
 * @return Reference to member bitmapBase
 */
eprosima::fastdds::rtps::core::detail::SequenceNumber_t& SequenceNumberSet::bitmapBase()
{
    return m_bitmapBase;
}


/*!
 * @brief This function sets a value in member numBits
 * @param _numBits New value for member numBits
 */
void SequenceNumberSet::numBits(
        uint32_t _numBits)
{
    m_numBits = _numBits;
}

/*!
 * @brief This function returns the value of member numBits
 * @return Value of member numBits
 */
uint32_t SequenceNumberSet::numBits() const
{
    return m_numBits;
}

/*!
 * @brief This function returns a reference to member numBits
 * @return Reference to member numBits
 */
uint32_t& SequenceNumberSet::numBits()
{
    return m_numBits;
}


/*!
 * @brief This function copies the value in member bitmap
 * @param _bitmap New value to be copied in member bitmap
 */
void SequenceNumberSet::bitmap(
        const std::array<uint8_t, 8>& _bitmap)
{
    m_bitmap = _bitmap;
}

/*!
 * @brief This function moves the value in member bitmap
 * @param _bitmap New value to be moved in member bitmap
 */
void SequenceNumberSet::bitmap(
        std::array<uint8_t, 8>&& _bitmap)
{
    m_bitmap = std::move(_bitmap);
}

/*!
 * @brief This function returns a constant reference to member bitmap
 * @return Constant reference to member bitmap
 */
const std::array<uint8_t, 8>& SequenceNumberSet::bitmap() const
{
    return m_bitmap;
}

/*!
 * @brief This function returns a reference to member bitmap
 * @return Reference to member bitmap
 */
std::array<uint8_t, 8>& SequenceNumberSet::bitmap()
{
    return m_bitmap;
}





Locator_t::Locator_t()
{
    // long m_kind
    m_kind = 0;
    // unsigned long m_port
    m_port = 0;
    // octet m_address
    memset(&m_address, 0, ((16)) * 1);

}

Locator_t::~Locator_t()
{
}

Locator_t::Locator_t(
        const Locator_t& x)
{
    m_kind = x.m_kind;


    m_port = x.m_port;


    m_address = x.m_address;

}

Locator_t::Locator_t(
        Locator_t&& x) noexcept
{
    m_kind = x.m_kind;


    m_port = x.m_port;


    m_address = std::move(x.m_address);

}

Locator_t& Locator_t::operator =(
        const Locator_t& x)
{
    m_kind = x.m_kind;


    m_port = x.m_port;


    m_address = x.m_address;

    return *this;
}

Locator_t& Locator_t::operator =(
        Locator_t&& x) noexcept
{
    m_kind = x.m_kind;


    m_port = x.m_port;


    m_address = std::move(x.m_address);

    return *this;
}

bool Locator_t::operator ==(
        const Locator_t& x) const
{
    return (m_kind == x.m_kind &&
           m_port == x.m_port &&
           m_address == x.m_address);
}

bool Locator_t::operator !=(
        const Locator_t& x) const
{
    return !(*this == x);
}

size_t Locator_t::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return eprosima_fastdds_rtps_core_detail_Locator_t_max_cdr_typesize;
}

size_t Locator_t::getCdrSerializedSize(
        const Locator_t& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += (((16)) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}


void Locator_t::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_kind;

    scdr << m_port;

    scdr << m_address;


}

void Locator_t::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_kind;



    dcdr >> m_port;



    dcdr >> m_address;


}


bool Locator_t::isKeyDefined()
{
    return false;
}

void Locator_t::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

/*!
 * @brief This function sets a value in member kind
 * @param _kind New value for member kind
 */
void Locator_t::kind(
        int32_t _kind)
{
    m_kind = _kind;
}

/*!
 * @brief This function returns the value of member kind
 * @return Value of member kind
 */
int32_t Locator_t::kind() const
{
    return m_kind;
}

/*!
 * @brief This function returns a reference to member kind
 * @return Reference to member kind
 */
int32_t& Locator_t::kind()
{
    return m_kind;
}


/*!
 * @brief This function sets a value in member port
 * @param _port New value for member port
 */
void Locator_t::port(
        uint32_t _port)
{
    m_port = _port;
}

/*!
 * @brief This function returns the value of member port
 * @return Value of member port
 */
uint32_t Locator_t::port() const
{
    return m_port;
}

/*!
 * @brief This function returns a reference to member port
 * @return Reference to member port
 */
uint32_t& Locator_t::port()
{
    return m_port;
}


/*!
 * @brief This function copies the value in member address
 * @param _address New value to be copied in member address
 */
void Locator_t::address(
        const std::array<uint8_t, 16>& _address)
{
    m_address = _address;
}

/*!
 * @brief This function moves the value in member address
 * @param _address New value to be moved in member address
 */
void Locator_t::address(
        std::array<uint8_t, 16>&& _address)
{
    m_address = std::move(_address);
}

/*!
 * @brief This function returns a constant reference to member address
 * @return Constant reference to member address
 */
const std::array<uint8_t, 16>& Locator_t::address() const
{
    return m_address;
}

/*!
 * @brief This function returns a reference to member address
 * @return Reference to member address
 */
std::array<uint8_t, 16>& Locator_t::address()
{
    return m_address;
}





Duration_t::Duration_t()
{
    // long m_seconds
    m_seconds = 0;
    // unsigned long m_fraction
    m_fraction = 0;

}

Duration_t::~Duration_t()
{
}

Duration_t::Duration_t(
        const Duration_t& x)
{
    m_seconds = x.m_seconds;


    m_fraction = x.m_fraction;

}

Duration_t::Duration_t(
        Duration_t&& x) noexcept
{
    m_seconds = x.m_seconds;


    m_fraction = x.m_fraction;

}

Duration_t& Duration_t::operator =(
        const Duration_t& x)
{
    m_seconds = x.m_seconds;


    m_fraction = x.m_fraction;

    return *this;
}

Duration_t& Duration_t::operator =(
        Duration_t&& x) noexcept
{
    m_seconds = x.m_seconds;


    m_fraction = x.m_fraction;

    return *this;
}

bool Duration_t::operator ==(
        const Duration_t& x) const
{
    return (m_seconds == x.m_seconds &&
           m_fraction == x.m_fraction);
}

bool Duration_t::operator !=(
        const Duration_t& x) const
{
    return !(*this == x);
}

size_t Duration_t::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return eprosima_fastdds_rtps_core_detail_Duration_t_max_cdr_typesize;
}

size_t Duration_t::getCdrSerializedSize(
        const Duration_t& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}


void Duration_t::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_seconds;

    scdr << m_fraction;

}

void Duration_t::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_seconds;



    dcdr >> m_fraction;


}


bool Duration_t::isKeyDefined()
{
    return false;
}

void Duration_t::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

/*!
 * @brief This function sets a value in member seconds
 * @param _seconds New value for member seconds
 */
void Duration_t::seconds(
        int32_t _seconds)
{
    m_seconds = _seconds;
}

/*!
 * @brief This function returns the value of member seconds
 * @return Value of member seconds
 */
int32_t Duration_t::seconds() const
{
    return m_seconds;
}

/*!
 * @brief This function returns a reference to member seconds
 * @return Reference to member seconds
 */
int32_t& Duration_t::seconds()
{
    return m_seconds;
}


/*!
 * @brief This function sets a value in member fraction
 * @param _fraction New value for member fraction
 */
void Duration_t::fraction(
        uint32_t _fraction)
{
    m_fraction = _fraction;
}

/*!
 * @brief This function returns the value of member fraction
 * @return Value of member fraction
 */
uint32_t Duration_t::fraction() const
{
    return m_fraction;
}

/*!
 * @brief This function returns a reference to member fraction
 * @return Reference to member fraction
 */
uint32_t& Duration_t::fraction()
{
    return m_fraction;
}







StatusInfo_t::StatusInfo_t()
{
    // octet m_value
    memset(&m_value, 0, ((4)) * 1);

}

StatusInfo_t::~StatusInfo_t()
{
}

StatusInfo_t::StatusInfo_t(
        const StatusInfo_t& x)
{
    m_value = x.m_value;

}

StatusInfo_t::StatusInfo_t(
        StatusInfo_t&& x) noexcept
{
    m_value = std::move(x.m_value);

}

StatusInfo_t& StatusInfo_t::operator =(
        const StatusInfo_t& x)
{
    m_value = x.m_value;

    return *this;
}

StatusInfo_t& StatusInfo_t::operator =(
        StatusInfo_t&& x) noexcept
{
    m_value = std::move(x.m_value);

    return *this;
}

bool StatusInfo_t::operator ==(
        const StatusInfo_t& x) const
{
    return (m_value == x.m_value);
}

bool StatusInfo_t::operator !=(
        const StatusInfo_t& x) const
{
    return !(*this == x);
}

size_t StatusInfo_t::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return eprosima_fastdds_rtps_core_detail_StatusInfo_t_max_cdr_typesize;
}

size_t StatusInfo_t::getCdrSerializedSize(
        const StatusInfo_t& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += (((4)) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}


void StatusInfo_t::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_value;


}

void StatusInfo_t::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_value;


}


bool StatusInfo_t::isKeyDefined()
{
    return false;
}

void StatusInfo_t::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

/*!
 * @brief This function copies the value in member value
 * @param _value New value to be copied in member value
 */
void StatusInfo_t::value(
        const std::array<uint8_t, 4>& _value)
{
    m_value = _value;
}

/*!
 * @brief This function moves the value in member value
 * @param _value New value to be moved in member value
 */
void StatusInfo_t::value(
        std::array<uint8_t, 4>&& _value)
{
    m_value = std::move(_value);
}

/*!
 * @brief This function returns a constant reference to member value
 * @return Constant reference to member value
 */
const std::array<uint8_t, 4>& StatusInfo_t::value() const
{
    return m_value;
}

/*!
 * @brief This function returns a reference to member value
 * @return Reference to member value
 */
std::array<uint8_t, 4>& StatusInfo_t::value()
{
    return m_value;
}





KeyHash_t::KeyHash_t()
{
    // octet m_value
    memset(&m_value, 0, ((16)) * 1);

}

KeyHash_t::~KeyHash_t()
{
}

KeyHash_t::KeyHash_t(
        const KeyHash_t& x)
{
    m_value = x.m_value;

}

KeyHash_t::KeyHash_t(
        KeyHash_t&& x) noexcept
{
    m_value = std::move(x.m_value);

}

KeyHash_t& KeyHash_t::operator =(
        const KeyHash_t& x)
{
    m_value = x.m_value;

    return *this;
}

KeyHash_t& KeyHash_t::operator =(
        KeyHash_t&& x) noexcept
{
    m_value = std::move(x.m_value);

    return *this;
}

bool KeyHash_t::operator ==(
        const KeyHash_t& x) const
{
    return (m_value == x.m_value);
}

bool KeyHash_t::operator !=(
        const KeyHash_t& x) const
{
    return !(*this == x);
}

size_t KeyHash_t::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return eprosima_fastdds_rtps_core_detail_KeyHash_t_max_cdr_typesize;
}

size_t KeyHash_t::getCdrSerializedSize(
        const KeyHash_t& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += (((16)) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}


void KeyHash_t::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_value;


}

void KeyHash_t::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_value;


}


bool KeyHash_t::isKeyDefined()
{
    return false;
}

void KeyHash_t::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

/*!
 * @brief This function copies the value in member value
 * @param _value New value to be copied in member value
 */
void KeyHash_t::value(
        const std::array<uint8_t, 16>& _value)
{
    m_value = _value;
}

/*!
 * @brief This function moves the value in member value
 * @param _value New value to be moved in member value
 */
void KeyHash_t::value(
        std::array<uint8_t, 16>&& _value)
{
    m_value = std::move(_value);
}

/*!
 * @brief This function returns a constant reference to member value
 * @return Constant reference to member value
 */
const std::array<uint8_t, 16>& KeyHash_t::value() const
{
    return m_value;
}

/*!
 * @brief This function returns a reference to member value
 * @return Reference to member value
 */
std::array<uint8_t, 16>& KeyHash_t::value()
{
    return m_value;
}





EntityName_t::EntityName_t()
{
    // /type_d() m_name


}

EntityName_t::~EntityName_t()
{
}

EntityName_t::EntityName_t(
        const EntityName_t& x)
{
    m_name = x.m_name;

}

EntityName_t::EntityName_t(
        EntityName_t&& x) noexcept
{
    m_name = std::move(x.m_name);

}

EntityName_t& EntityName_t::operator =(
        const EntityName_t& x)
{
    m_name = x.m_name;

    return *this;
}

EntityName_t& EntityName_t::operator =(
        EntityName_t&& x) noexcept
{
    m_name = std::move(x.m_name);

    return *this;
}

bool EntityName_t::operator ==(
        const EntityName_t& x) const
{
    return (m_name == x.m_name);
}

bool EntityName_t::operator !=(
        const EntityName_t& x) const
{
    return !(*this == x);
}

size_t EntityName_t::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return eprosima_fastdds_rtps_core_detail_EntityName_t_max_cdr_typesize;
}

size_t EntityName_t::getCdrSerializedSize(
        const EntityName_t& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.name().size() + 1;


    return current_alignment - initial_alignment;
}


void EntityName_t::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_name.c_str();

}

void EntityName_t::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_name;


}


bool EntityName_t::isKeyDefined()
{
    return false;
}

void EntityName_t::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

/*!
 * @brief This function copies the value in member name
 * @param _name New value to be copied in member name
 */
void EntityName_t::name(
        const std::string& _name)
{
    m_name = _name;
}

/*!
 * @brief This function moves the value in member name
 * @param _name New value to be moved in member name
 */
void EntityName_t::name(
        std::string&& _name)
{
    m_name = std::move(_name);
}

/*!
 * @brief This function returns a constant reference to member name
 * @return Constant reference to member name
 */
const std::string& EntityName_t::name() const
{
    return m_name;
}

/*!
 * @brief This function returns a reference to member name
 * @return Reference to member name
 */
std::string& EntityName_t::name()
{
    return m_name;
}





} // namespace detail


Header::Header()
{
    // octet m_prefix
    memset(&m_prefix, 0, ((4)) * 1);
    // eprosima::fastdds::rtps::core::detail::ProtocolVersion_t m_version

    // eprosima::fastdds::rtps::core::detail::VendorId_t m_vendorId

    // eprosima::fastdds::rtps::core::detail::GuidPrefix_t m_guidPrefix


}

Header::~Header()
{
}

Header::Header(
        const Header& x)
{
    m_prefix = x.m_prefix;


    m_version = x.m_version;


    m_vendorId = x.m_vendorId;


    m_guidPrefix = x.m_guidPrefix;

}

Header::Header(
        Header&& x) noexcept
{
    m_prefix = std::move(x.m_prefix);


    m_version = std::move(x.m_version);


    m_vendorId = std::move(x.m_vendorId);


    m_guidPrefix = std::move(x.m_guidPrefix);

}

Header& Header::operator =(
        const Header& x)
{
    m_prefix = x.m_prefix;


    m_version = x.m_version;


    m_vendorId = x.m_vendorId;


    m_guidPrefix = x.m_guidPrefix;

    return *this;
}

Header& Header::operator =(
        Header&& x) noexcept
{
    m_prefix = std::move(x.m_prefix);


    m_version = std::move(x.m_version);


    m_vendorId = std::move(x.m_vendorId);


    m_guidPrefix = std::move(x.m_guidPrefix);

    return *this;
}

bool Header::operator ==(
        const Header& x) const
{
    return (m_prefix == x.m_prefix &&
           m_version == x.m_version &&
           m_vendorId == x.m_vendorId &&
           m_guidPrefix == x.m_guidPrefix);
}

bool Header::operator !=(
        const Header& x) const
{
    return !(*this == x);
}

size_t Header::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return eprosima_fastdds_rtps_core_Header_max_cdr_typesize;
}

size_t Header::getCdrSerializedSize(
        const Header& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += (((4)) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    current_alignment += eprosima::fastdds::rtps::core::detail::ProtocolVersion_t::getCdrSerializedSize(data.version(), current_alignment);


    current_alignment += eprosima::fastdds::rtps::core::detail::VendorId_t::getCdrSerializedSize(data.vendorId(), current_alignment);


    current_alignment += eprosima::fastdds::rtps::core::detail::GuidPrefix_t::getCdrSerializedSize(data.guidPrefix(), current_alignment);


    return current_alignment - initial_alignment;
}


void Header::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_prefix;


    scdr << m_version;

    scdr << m_vendorId;

    scdr << m_guidPrefix;

}

void Header::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_prefix;



    dcdr >> m_version;



    dcdr >> m_vendorId;



    dcdr >> m_guidPrefix;


}


bool Header::isKeyDefined()
{
    return false;
}

void Header::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

/*!
 * @brief This function copies the value in member prefix
 * @param _prefix New value to be copied in member prefix
 */
void Header::prefix(
        const std::array<uint8_t, 4>& _prefix)
{
    m_prefix = _prefix;
}

/*!
 * @brief This function moves the value in member prefix
 * @param _prefix New value to be moved in member prefix
 */
void Header::prefix(
        std::array<uint8_t, 4>&& _prefix)
{
    m_prefix = std::move(_prefix);
}

/*!
 * @brief This function returns a constant reference to member prefix
 * @return Constant reference to member prefix
 */
const std::array<uint8_t, 4>& Header::prefix() const
{
    return m_prefix;
}

/*!
 * @brief This function returns a reference to member prefix
 * @return Reference to member prefix
 */
std::array<uint8_t, 4>& Header::prefix()
{
    return m_prefix;
}


/*!
 * @brief This function copies the value in member version
 * @param _version New value to be copied in member version
 */
void Header::version(
        const eprosima::fastdds::rtps::core::detail::ProtocolVersion_t& _version)
{
    m_version = _version;
}

/*!
 * @brief This function moves the value in member version
 * @param _version New value to be moved in member version
 */
void Header::version(
        eprosima::fastdds::rtps::core::detail::ProtocolVersion_t&& _version)
{
    m_version = std::move(_version);
}

/*!
 * @brief This function returns a constant reference to member version
 * @return Constant reference to member version
 */
const eprosima::fastdds::rtps::core::detail::ProtocolVersion_t& Header::version() const
{
    return m_version;
}

/*!
 * @brief This function returns a reference to member version
 * @return Reference to member version
 */
eprosima::fastdds::rtps::core::detail::ProtocolVersion_t& Header::version()
{
    return m_version;
}


/*!
 * @brief This function copies the value in member vendorId
 * @param _vendorId New value to be copied in member vendorId
 */
void Header::vendorId(
        const eprosima::fastdds::rtps::core::detail::VendorId_t& _vendorId)
{
    m_vendorId = _vendorId;
}

/*!
 * @brief This function moves the value in member vendorId
 * @param _vendorId New value to be moved in member vendorId
 */
void Header::vendorId(
        eprosima::fastdds::rtps::core::detail::VendorId_t&& _vendorId)
{
    m_vendorId = std::move(_vendorId);
}

/*!
 * @brief This function returns a constant reference to member vendorId
 * @return Constant reference to member vendorId
 */
const eprosima::fastdds::rtps::core::detail::VendorId_t& Header::vendorId() const
{
    return m_vendorId;
}

/*!
 * @brief This function returns a reference to member vendorId
 * @return Reference to member vendorId
 */
eprosima::fastdds::rtps::core::detail::VendorId_t& Header::vendorId()
{
    return m_vendorId;
}


/*!
 * @brief This function copies the value in member guidPrefix
 * @param _guidPrefix New value to be copied in member guidPrefix
 */
void Header::guidPrefix(
        const eprosima::fastdds::rtps::core::detail::GuidPrefix_t& _guidPrefix)
{
    m_guidPrefix = _guidPrefix;
}

/*!
 * @brief This function moves the value in member guidPrefix
 * @param _guidPrefix New value to be moved in member guidPrefix
 */
void Header::guidPrefix(
        eprosima::fastdds::rtps::core::detail::GuidPrefix_t&& _guidPrefix)
{
    m_guidPrefix = std::move(_guidPrefix);
}

/*!
 * @brief This function returns a constant reference to member guidPrefix
 * @return Constant reference to member guidPrefix
 */
const eprosima::fastdds::rtps::core::detail::GuidPrefix_t& Header::guidPrefix() const
{
    return m_guidPrefix;
}

/*!
 * @brief This function returns a reference to member guidPrefix
 * @return Reference to member guidPrefix
 */
eprosima::fastdds::rtps::core::detail::GuidPrefix_t& Header::guidPrefix()
{
    return m_guidPrefix;
}





SubmessageHeader::SubmessageHeader()
{
    // octet m_submessageId
    m_submessageId = 0;
    // octet m_flags
    m_flags = 0;
    // unsigned short m_submessageLength
    m_submessageLength = 0;

}

SubmessageHeader::~SubmessageHeader()
{
}

SubmessageHeader::SubmessageHeader(
        const SubmessageHeader& x)
{
    m_submessageId = x.m_submessageId;


    m_flags = x.m_flags;


    m_submessageLength = x.m_submessageLength;

}

SubmessageHeader::SubmessageHeader(
        SubmessageHeader&& x) noexcept
{
    m_submessageId = x.m_submessageId;


    m_flags = x.m_flags;


    m_submessageLength = x.m_submessageLength;

}

SubmessageHeader& SubmessageHeader::operator =(
        const SubmessageHeader& x)
{
    m_submessageId = x.m_submessageId;


    m_flags = x.m_flags;


    m_submessageLength = x.m_submessageLength;

    return *this;
}

SubmessageHeader& SubmessageHeader::operator =(
        SubmessageHeader&& x) noexcept
{
    m_submessageId = x.m_submessageId;


    m_flags = x.m_flags;


    m_submessageLength = x.m_submessageLength;

    return *this;
}

bool SubmessageHeader::operator ==(
        const SubmessageHeader& x) const
{
    return (m_submessageId == x.m_submessageId &&
           m_flags == x.m_flags &&
           m_submessageLength == x.m_submessageLength);
}

bool SubmessageHeader::operator !=(
        const SubmessageHeader& x) const
{
    return !(*this == x);
}

size_t SubmessageHeader::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return eprosima_fastdds_rtps_core_SubmessageHeader_max_cdr_typesize;
}

size_t SubmessageHeader::getCdrSerializedSize(
        const SubmessageHeader& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    return current_alignment - initial_alignment;
}


void SubmessageHeader::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_submessageId;

    scdr << m_flags;

    scdr << m_submessageLength;

}

void SubmessageHeader::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_submessageId;



    dcdr >> m_flags;



    dcdr >> m_submessageLength;


}


bool SubmessageHeader::isKeyDefined()
{
    return false;
}

void SubmessageHeader::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

/*!
 * @brief This function sets a value in member submessageId
 * @param _submessageId New value for member submessageId
 */
void SubmessageHeader::submessageId(
        uint8_t _submessageId)
{
    m_submessageId = _submessageId;
}

/*!
 * @brief This function returns the value of member submessageId
 * @return Value of member submessageId
 */
uint8_t SubmessageHeader::submessageId() const
{
    return m_submessageId;
}

/*!
 * @brief This function returns a reference to member submessageId
 * @return Reference to member submessageId
 */
uint8_t& SubmessageHeader::submessageId()
{
    return m_submessageId;
}


/*!
 * @brief This function sets a value in member flags
 * @param _flags New value for member flags
 */
void SubmessageHeader::flags(
        uint8_t _flags)
{
    m_flags = _flags;
}

/*!
 * @brief This function returns the value of member flags
 * @return Value of member flags
 */
uint8_t SubmessageHeader::flags() const
{
    return m_flags;
}

/*!
 * @brief This function returns a reference to member flags
 * @return Reference to member flags
 */
uint8_t& SubmessageHeader::flags()
{
    return m_flags;
}


/*!
 * @brief This function sets a value in member submessageLength
 * @param _submessageLength New value for member submessageLength
 */
void SubmessageHeader::submessageLength(
        uint16_t _submessageLength)
{
    m_submessageLength = _submessageLength;
}

/*!
 * @brief This function returns the value of member submessageLength
 * @return Value of member submessageLength
 */
uint16_t SubmessageHeader::submessageLength() const
{
    return m_submessageLength;
}

/*!
 * @brief This function returns a reference to member submessageLength
 * @return Reference to member submessageLength
 */
uint16_t& SubmessageHeader::submessageLength()
{
    return m_submessageLength;
}



namespace SubmessageKind {


} // namespace SubmessageKind


AckNackSubmessage::AckNackSubmessage()
{
    // eprosima::fastdds::rtps::core::SubmessageHeader m_submsgHeader

    // eprosima::fastdds::rtps::core::detail::EntityId_t m_readerId

    // eprosima::fastdds::rtps::core::detail::EntityId_t m_writerId

    // eprosima::fastdds::rtps::core::detail::SequenceNumberSet m_readerSNState

    // eprosima::fastdds::rtps::core::detail::Count_t m_count


}

AckNackSubmessage::~AckNackSubmessage()
{
}

AckNackSubmessage::AckNackSubmessage(
        const AckNackSubmessage& x)
{
    m_submsgHeader = x.m_submsgHeader;


    m_readerId = x.m_readerId;


    m_writerId = x.m_writerId;


    m_readerSNState = x.m_readerSNState;


    m_count = x.m_count;

}

AckNackSubmessage::AckNackSubmessage(
        AckNackSubmessage&& x) noexcept
{
    m_submsgHeader = std::move(x.m_submsgHeader);


    m_readerId = std::move(x.m_readerId);


    m_writerId = std::move(x.m_writerId);


    m_readerSNState = std::move(x.m_readerSNState);


    m_count = std::move(x.m_count);

}

AckNackSubmessage& AckNackSubmessage::operator =(
        const AckNackSubmessage& x)
{
    m_submsgHeader = x.m_submsgHeader;


    m_readerId = x.m_readerId;


    m_writerId = x.m_writerId;


    m_readerSNState = x.m_readerSNState;


    m_count = x.m_count;

    return *this;
}

AckNackSubmessage& AckNackSubmessage::operator =(
        AckNackSubmessage&& x) noexcept
{
    m_submsgHeader = std::move(x.m_submsgHeader);


    m_readerId = std::move(x.m_readerId);


    m_writerId = std::move(x.m_writerId);


    m_readerSNState = std::move(x.m_readerSNState);


    m_count = std::move(x.m_count);

    return *this;
}

bool AckNackSubmessage::operator ==(
        const AckNackSubmessage& x) const
{
    return (m_submsgHeader == x.m_submsgHeader &&
           m_readerId == x.m_readerId &&
           m_writerId == x.m_writerId &&
           m_readerSNState == x.m_readerSNState &&
           m_count == x.m_count);
}

bool AckNackSubmessage::operator !=(
        const AckNackSubmessage& x) const
{
    return !(*this == x);
}

size_t AckNackSubmessage::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return eprosima_fastdds_rtps_core_AckNackSubmessage_max_cdr_typesize;
}

size_t AckNackSubmessage::getCdrSerializedSize(
        const AckNackSubmessage& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += eprosima::fastdds::rtps::core::SubmessageHeader::getCdrSerializedSize(data.submsgHeader(), current_alignment);


    current_alignment += eprosima::fastdds::rtps::core::detail::EntityId_t::getCdrSerializedSize(data.readerId(), current_alignment);


    current_alignment += eprosima::fastdds::rtps::core::detail::EntityId_t::getCdrSerializedSize(data.writerId(), current_alignment);


    current_alignment += eprosima::fastdds::rtps::core::detail::SequenceNumberSet::getCdrSerializedSize(data.readerSNState(), current_alignment);


    current_alignment += eprosima::fastdds::rtps::core::detail::Count_t::getCdrSerializedSize(data.count(), current_alignment);


    return current_alignment - initial_alignment;
}


void AckNackSubmessage::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_submsgHeader;

    scdr << m_readerId;

    scdr << m_writerId;

    scdr << m_readerSNState;

    scdr << m_count;

}

void AckNackSubmessage::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_submsgHeader;



    dcdr >> m_readerId;



    dcdr >> m_writerId;



    dcdr >> m_readerSNState;



    dcdr >> m_count;


}


bool AckNackSubmessage::isKeyDefined()
{
    return false;
}

void AckNackSubmessage::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

/*!
 * @brief This function copies the value in member submsgHeader
 * @param _submsgHeader New value to be copied in member submsgHeader
 */
void AckNackSubmessage::submsgHeader(
        const eprosima::fastdds::rtps::core::SubmessageHeader& _submsgHeader)
{
    m_submsgHeader = _submsgHeader;
}

/*!
 * @brief This function moves the value in member submsgHeader
 * @param _submsgHeader New value to be moved in member submsgHeader
 */
void AckNackSubmessage::submsgHeader(
        eprosima::fastdds::rtps::core::SubmessageHeader&& _submsgHeader)
{
    m_submsgHeader = std::move(_submsgHeader);
}

/*!
 * @brief This function returns a constant reference to member submsgHeader
 * @return Constant reference to member submsgHeader
 */
const eprosima::fastdds::rtps::core::SubmessageHeader& AckNackSubmessage::submsgHeader() const
{
    return m_submsgHeader;
}

/*!
 * @brief This function returns a reference to member submsgHeader
 * @return Reference to member submsgHeader
 */
eprosima::fastdds::rtps::core::SubmessageHeader& AckNackSubmessage::submsgHeader()
{
    return m_submsgHeader;
}


/*!
 * @brief This function copies the value in member readerId
 * @param _readerId New value to be copied in member readerId
 */
void AckNackSubmessage::readerId(
        const eprosima::fastdds::rtps::core::detail::EntityId_t& _readerId)
{
    m_readerId = _readerId;
}

/*!
 * @brief This function moves the value in member readerId
 * @param _readerId New value to be moved in member readerId
 */
void AckNackSubmessage::readerId(
        eprosima::fastdds::rtps::core::detail::EntityId_t&& _readerId)
{
    m_readerId = std::move(_readerId);
}

/*!
 * @brief This function returns a constant reference to member readerId
 * @return Constant reference to member readerId
 */
const eprosima::fastdds::rtps::core::detail::EntityId_t& AckNackSubmessage::readerId() const
{
    return m_readerId;
}

/*!
 * @brief This function returns a reference to member readerId
 * @return Reference to member readerId
 */
eprosima::fastdds::rtps::core::detail::EntityId_t& AckNackSubmessage::readerId()
{
    return m_readerId;
}


/*!
 * @brief This function copies the value in member writerId
 * @param _writerId New value to be copied in member writerId
 */
void AckNackSubmessage::writerId(
        const eprosima::fastdds::rtps::core::detail::EntityId_t& _writerId)
{
    m_writerId = _writerId;
}

/*!
 * @brief This function moves the value in member writerId
 * @param _writerId New value to be moved in member writerId
 */
void AckNackSubmessage::writerId(
        eprosima::fastdds::rtps::core::detail::EntityId_t&& _writerId)
{
    m_writerId = std::move(_writerId);
}

/*!
 * @brief This function returns a constant reference to member writerId
 * @return Constant reference to member writerId
 */
const eprosima::fastdds::rtps::core::detail::EntityId_t& AckNackSubmessage::writerId() const
{
    return m_writerId;
}

/*!
 * @brief This function returns a reference to member writerId
 * @return Reference to member writerId
 */
eprosima::fastdds::rtps::core::detail::EntityId_t& AckNackSubmessage::writerId()
{
    return m_writerId;
}


/*!
 * @brief This function copies the value in member readerSNState
 * @param _readerSNState New value to be copied in member readerSNState
 */
void AckNackSubmessage::readerSNState(
        const eprosima::fastdds::rtps::core::detail::SequenceNumberSet& _readerSNState)
{
    m_readerSNState = _readerSNState;
}

/*!
 * @brief This function moves the value in member readerSNState
 * @param _readerSNState New value to be moved in member readerSNState
 */
void AckNackSubmessage::readerSNState(
        eprosima::fastdds::rtps::core::detail::SequenceNumberSet&& _readerSNState)
{
    m_readerSNState = std::move(_readerSNState);
}

/*!
 * @brief This function returns a constant reference to member readerSNState
 * @return Constant reference to member readerSNState
 */
const eprosima::fastdds::rtps::core::detail::SequenceNumberSet& AckNackSubmessage::readerSNState() const
{
    return m_readerSNState;
}

/*!
 * @brief This function returns a reference to member readerSNState
 * @return Reference to member readerSNState
 */
eprosima::fastdds::rtps::core::detail::SequenceNumberSet& AckNackSubmessage::readerSNState()
{
    return m_readerSNState;
}


/*!
 * @brief This function copies the value in member count
 * @param _count New value to be copied in member count
 */
void AckNackSubmessage::count(
        const eprosima::fastdds::rtps::core::detail::Count_t& _count)
{
    m_count = _count;
}

/*!
 * @brief This function moves the value in member count
 * @param _count New value to be moved in member count
 */
void AckNackSubmessage::count(
        eprosima::fastdds::rtps::core::detail::Count_t&& _count)
{
    m_count = std::move(_count);
}

/*!
 * @brief This function returns a constant reference to member count
 * @return Constant reference to member count
 */
const eprosima::fastdds::rtps::core::detail::Count_t& AckNackSubmessage::count() const
{
    return m_count;
}

/*!
 * @brief This function returns a reference to member count
 * @return Reference to member count
 */
eprosima::fastdds::rtps::core::detail::Count_t& AckNackSubmessage::count()
{
    return m_count;
}





HeartBeatSubmessage::HeartBeatSubmessage()
{
    // eprosima::fastdds::rtps::core::SubmessageHeader m_submsgHeader

    // eprosima::fastdds::rtps::core::detail::EntityId_t m_readerId

    // eprosima::fastdds::rtps::core::detail::EntityId_t m_writerId

    // eprosima::fastdds::rtps::core::detail::SequenceNumber_t m_firstSN

    // eprosima::fastdds::rtps::core::detail::SequenceNumber_t m_lastSN

    // eprosima::fastdds::rtps::core::detail::Count_t m_count


}

HeartBeatSubmessage::~HeartBeatSubmessage()
{
}

HeartBeatSubmessage::HeartBeatSubmessage(
        const HeartBeatSubmessage& x)
{
    m_submsgHeader = x.m_submsgHeader;


    m_readerId = x.m_readerId;


    m_writerId = x.m_writerId;


    m_firstSN = x.m_firstSN;


    m_lastSN = x.m_lastSN;


    m_count = x.m_count;

}

HeartBeatSubmessage::HeartBeatSubmessage(
        HeartBeatSubmessage&& x) noexcept
{
    m_submsgHeader = std::move(x.m_submsgHeader);


    m_readerId = std::move(x.m_readerId);


    m_writerId = std::move(x.m_writerId);


    m_firstSN = std::move(x.m_firstSN);


    m_lastSN = std::move(x.m_lastSN);


    m_count = std::move(x.m_count);

}

HeartBeatSubmessage& HeartBeatSubmessage::operator =(
        const HeartBeatSubmessage& x)
{
    m_submsgHeader = x.m_submsgHeader;


    m_readerId = x.m_readerId;


    m_writerId = x.m_writerId;


    m_firstSN = x.m_firstSN;


    m_lastSN = x.m_lastSN;


    m_count = x.m_count;

    return *this;
}

HeartBeatSubmessage& HeartBeatSubmessage::operator =(
        HeartBeatSubmessage&& x) noexcept
{
    m_submsgHeader = std::move(x.m_submsgHeader);


    m_readerId = std::move(x.m_readerId);


    m_writerId = std::move(x.m_writerId);


    m_firstSN = std::move(x.m_firstSN);


    m_lastSN = std::move(x.m_lastSN);


    m_count = std::move(x.m_count);

    return *this;
}

bool HeartBeatSubmessage::operator ==(
        const HeartBeatSubmessage& x) const
{
    return (m_submsgHeader == x.m_submsgHeader &&
           m_readerId == x.m_readerId &&
           m_writerId == x.m_writerId &&
           m_firstSN == x.m_firstSN &&
           m_lastSN == x.m_lastSN &&
           m_count == x.m_count);
}

bool HeartBeatSubmessage::operator !=(
        const HeartBeatSubmessage& x) const
{
    return !(*this == x);
}

size_t HeartBeatSubmessage::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return eprosima_fastdds_rtps_core_HeartBeatSubmessage_max_cdr_typesize;
}

size_t HeartBeatSubmessage::getCdrSerializedSize(
        const HeartBeatSubmessage& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += eprosima::fastdds::rtps::core::SubmessageHeader::getCdrSerializedSize(data.submsgHeader(), current_alignment);


    current_alignment += eprosima::fastdds::rtps::core::detail::EntityId_t::getCdrSerializedSize(data.readerId(), current_alignment);


    current_alignment += eprosima::fastdds::rtps::core::detail::EntityId_t::getCdrSerializedSize(data.writerId(), current_alignment);


    current_alignment += eprosima::fastdds::rtps::core::detail::SequenceNumber_t::getCdrSerializedSize(data.firstSN(), current_alignment);


    current_alignment += eprosima::fastdds::rtps::core::detail::SequenceNumber_t::getCdrSerializedSize(data.lastSN(), current_alignment);


    current_alignment += eprosima::fastdds::rtps::core::detail::Count_t::getCdrSerializedSize(data.count(), current_alignment);


    return current_alignment - initial_alignment;
}


void HeartBeatSubmessage::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_submsgHeader;

    scdr << m_readerId;

    scdr << m_writerId;

    scdr << m_firstSN;

    scdr << m_lastSN;

    scdr << m_count;

}

void HeartBeatSubmessage::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_submsgHeader;



    dcdr >> m_readerId;



    dcdr >> m_writerId;



    dcdr >> m_firstSN;



    dcdr >> m_lastSN;



    dcdr >> m_count;


}


bool HeartBeatSubmessage::isKeyDefined()
{
    return false;
}

void HeartBeatSubmessage::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

/*!
 * @brief This function copies the value in member submsgHeader
 * @param _submsgHeader New value to be copied in member submsgHeader
 */
void HeartBeatSubmessage::submsgHeader(
        const eprosima::fastdds::rtps::core::SubmessageHeader& _submsgHeader)
{
    m_submsgHeader = _submsgHeader;
}

/*!
 * @brief This function moves the value in member submsgHeader
 * @param _submsgHeader New value to be moved in member submsgHeader
 */
void HeartBeatSubmessage::submsgHeader(
        eprosima::fastdds::rtps::core::SubmessageHeader&& _submsgHeader)
{
    m_submsgHeader = std::move(_submsgHeader);
}

/*!
 * @brief This function returns a constant reference to member submsgHeader
 * @return Constant reference to member submsgHeader
 */
const eprosima::fastdds::rtps::core::SubmessageHeader& HeartBeatSubmessage::submsgHeader() const
{
    return m_submsgHeader;
}

/*!
 * @brief This function returns a reference to member submsgHeader
 * @return Reference to member submsgHeader
 */
eprosima::fastdds::rtps::core::SubmessageHeader& HeartBeatSubmessage::submsgHeader()
{
    return m_submsgHeader;
}


/*!
 * @brief This function copies the value in member readerId
 * @param _readerId New value to be copied in member readerId
 */
void HeartBeatSubmessage::readerId(
        const eprosima::fastdds::rtps::core::detail::EntityId_t& _readerId)
{
    m_readerId = _readerId;
}

/*!
 * @brief This function moves the value in member readerId
 * @param _readerId New value to be moved in member readerId
 */
void HeartBeatSubmessage::readerId(
        eprosima::fastdds::rtps::core::detail::EntityId_t&& _readerId)
{
    m_readerId = std::move(_readerId);
}

/*!
 * @brief This function returns a constant reference to member readerId
 * @return Constant reference to member readerId
 */
const eprosima::fastdds::rtps::core::detail::EntityId_t& HeartBeatSubmessage::readerId() const
{
    return m_readerId;
}

/*!
 * @brief This function returns a reference to member readerId
 * @return Reference to member readerId
 */
eprosima::fastdds::rtps::core::detail::EntityId_t& HeartBeatSubmessage::readerId()
{
    return m_readerId;
}


/*!
 * @brief This function copies the value in member writerId
 * @param _writerId New value to be copied in member writerId
 */
void HeartBeatSubmessage::writerId(
        const eprosima::fastdds::rtps::core::detail::EntityId_t& _writerId)
{
    m_writerId = _writerId;
}

/*!
 * @brief This function moves the value in member writerId
 * @param _writerId New value to be moved in member writerId
 */
void HeartBeatSubmessage::writerId(
        eprosima::fastdds::rtps::core::detail::EntityId_t&& _writerId)
{
    m_writerId = std::move(_writerId);
}

/*!
 * @brief This function returns a constant reference to member writerId
 * @return Constant reference to member writerId
 */
const eprosima::fastdds::rtps::core::detail::EntityId_t& HeartBeatSubmessage::writerId() const
{
    return m_writerId;
}

/*!
 * @brief This function returns a reference to member writerId
 * @return Reference to member writerId
 */
eprosima::fastdds::rtps::core::detail::EntityId_t& HeartBeatSubmessage::writerId()
{
    return m_writerId;
}


/*!
 * @brief This function copies the value in member firstSN
 * @param _firstSN New value to be copied in member firstSN
 */
void HeartBeatSubmessage::firstSN(
        const eprosima::fastdds::rtps::core::detail::SequenceNumber_t& _firstSN)
{
    m_firstSN = _firstSN;
}

/*!
 * @brief This function moves the value in member firstSN
 * @param _firstSN New value to be moved in member firstSN
 */
void HeartBeatSubmessage::firstSN(
        eprosima::fastdds::rtps::core::detail::SequenceNumber_t&& _firstSN)
{
    m_firstSN = std::move(_firstSN);
}

/*!
 * @brief This function returns a constant reference to member firstSN
 * @return Constant reference to member firstSN
 */
const eprosima::fastdds::rtps::core::detail::SequenceNumber_t& HeartBeatSubmessage::firstSN() const
{
    return m_firstSN;
}

/*!
 * @brief This function returns a reference to member firstSN
 * @return Reference to member firstSN
 */
eprosima::fastdds::rtps::core::detail::SequenceNumber_t& HeartBeatSubmessage::firstSN()
{
    return m_firstSN;
}


/*!
 * @brief This function copies the value in member lastSN
 * @param _lastSN New value to be copied in member lastSN
 */
void HeartBeatSubmessage::lastSN(
        const eprosima::fastdds::rtps::core::detail::SequenceNumber_t& _lastSN)
{
    m_lastSN = _lastSN;
}

/*!
 * @brief This function moves the value in member lastSN
 * @param _lastSN New value to be moved in member lastSN
 */
void HeartBeatSubmessage::lastSN(
        eprosima::fastdds::rtps::core::detail::SequenceNumber_t&& _lastSN)
{
    m_lastSN = std::move(_lastSN);
}

/*!
 * @brief This function returns a constant reference to member lastSN
 * @return Constant reference to member lastSN
 */
const eprosima::fastdds::rtps::core::detail::SequenceNumber_t& HeartBeatSubmessage::lastSN() const
{
    return m_lastSN;
}

/*!
 * @brief This function returns a reference to member lastSN
 * @return Reference to member lastSN
 */
eprosima::fastdds::rtps::core::detail::SequenceNumber_t& HeartBeatSubmessage::lastSN()
{
    return m_lastSN;
}


/*!
 * @brief This function copies the value in member count
 * @param _count New value to be copied in member count
 */
void HeartBeatSubmessage::count(
        const eprosima::fastdds::rtps::core::detail::Count_t& _count)
{
    m_count = _count;
}

/*!
 * @brief This function moves the value in member count
 * @param _count New value to be moved in member count
 */
void HeartBeatSubmessage::count(
        eprosima::fastdds::rtps::core::detail::Count_t&& _count)
{
    m_count = std::move(_count);
}

/*!
 * @brief This function returns a constant reference to member count
 * @return Constant reference to member count
 */
const eprosima::fastdds::rtps::core::detail::Count_t& HeartBeatSubmessage::count() const
{
    return m_count;
}

/*!
 * @brief This function returns a reference to member count
 * @return Reference to member count
 */
eprosima::fastdds::rtps::core::detail::Count_t& HeartBeatSubmessage::count()
{
    return m_count;
}





InfoDestinationSubmessage::InfoDestinationSubmessage()
{
    // eprosima::fastdds::rtps::core::SubmessageHeader m_submsgHeader

    // eprosima::fastdds::rtps::core::detail::GuidPrefix_t m_guidPrefix


}

InfoDestinationSubmessage::~InfoDestinationSubmessage()
{
}

InfoDestinationSubmessage::InfoDestinationSubmessage(
        const InfoDestinationSubmessage& x)
{
    m_submsgHeader = x.m_submsgHeader;


    m_guidPrefix = x.m_guidPrefix;

}

InfoDestinationSubmessage::InfoDestinationSubmessage(
        InfoDestinationSubmessage&& x) noexcept
{
    m_submsgHeader = std::move(x.m_submsgHeader);


    m_guidPrefix = std::move(x.m_guidPrefix);

}

InfoDestinationSubmessage& InfoDestinationSubmessage::operator =(
        const InfoDestinationSubmessage& x)
{
    m_submsgHeader = x.m_submsgHeader;


    m_guidPrefix = x.m_guidPrefix;

    return *this;
}

InfoDestinationSubmessage& InfoDestinationSubmessage::operator =(
        InfoDestinationSubmessage&& x) noexcept
{
    m_submsgHeader = std::move(x.m_submsgHeader);


    m_guidPrefix = std::move(x.m_guidPrefix);

    return *this;
}

bool InfoDestinationSubmessage::operator ==(
        const InfoDestinationSubmessage& x) const
{
    return (m_submsgHeader == x.m_submsgHeader &&
           m_guidPrefix == x.m_guidPrefix);
}

bool InfoDestinationSubmessage::operator !=(
        const InfoDestinationSubmessage& x) const
{
    return !(*this == x);
}

size_t InfoDestinationSubmessage::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return eprosima_fastdds_rtps_core_InfoDestinationSubmessage_max_cdr_typesize;
}

size_t InfoDestinationSubmessage::getCdrSerializedSize(
        const InfoDestinationSubmessage& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += eprosima::fastdds::rtps::core::SubmessageHeader::getCdrSerializedSize(data.submsgHeader(), current_alignment);


    current_alignment += eprosima::fastdds::rtps::core::detail::GuidPrefix_t::getCdrSerializedSize(data.guidPrefix(), current_alignment);


    return current_alignment - initial_alignment;
}


void InfoDestinationSubmessage::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_submsgHeader;

    scdr << m_guidPrefix;

}

void InfoDestinationSubmessage::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_submsgHeader;



    dcdr >> m_guidPrefix;


}


bool InfoDestinationSubmessage::isKeyDefined()
{
    return false;
}

void InfoDestinationSubmessage::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

/*!
 * @brief This function copies the value in member submsgHeader
 * @param _submsgHeader New value to be copied in member submsgHeader
 */
void InfoDestinationSubmessage::submsgHeader(
        const eprosima::fastdds::rtps::core::SubmessageHeader& _submsgHeader)
{
    m_submsgHeader = _submsgHeader;
}

/*!
 * @brief This function moves the value in member submsgHeader
 * @param _submsgHeader New value to be moved in member submsgHeader
 */
void InfoDestinationSubmessage::submsgHeader(
        eprosima::fastdds::rtps::core::SubmessageHeader&& _submsgHeader)
{
    m_submsgHeader = std::move(_submsgHeader);
}

/*!
 * @brief This function returns a constant reference to member submsgHeader
 * @return Constant reference to member submsgHeader
 */
const eprosima::fastdds::rtps::core::SubmessageHeader& InfoDestinationSubmessage::submsgHeader() const
{
    return m_submsgHeader;
}

/*!
 * @brief This function returns a reference to member submsgHeader
 * @return Reference to member submsgHeader
 */
eprosima::fastdds::rtps::core::SubmessageHeader& InfoDestinationSubmessage::submsgHeader()
{
    return m_submsgHeader;
}


/*!
 * @brief This function copies the value in member guidPrefix
 * @param _guidPrefix New value to be copied in member guidPrefix
 */
void InfoDestinationSubmessage::guidPrefix(
        const eprosima::fastdds::rtps::core::detail::GuidPrefix_t& _guidPrefix)
{
    m_guidPrefix = _guidPrefix;
}

/*!
 * @brief This function moves the value in member guidPrefix
 * @param _guidPrefix New value to be moved in member guidPrefix
 */
void InfoDestinationSubmessage::guidPrefix(
        eprosima::fastdds::rtps::core::detail::GuidPrefix_t&& _guidPrefix)
{
    m_guidPrefix = std::move(_guidPrefix);
}

/*!
 * @brief This function returns a constant reference to member guidPrefix
 * @return Constant reference to member guidPrefix
 */
const eprosima::fastdds::rtps::core::detail::GuidPrefix_t& InfoDestinationSubmessage::guidPrefix() const
{
    return m_guidPrefix;
}

/*!
 * @brief This function returns a reference to member guidPrefix
 * @return Reference to member guidPrefix
 */
eprosima::fastdds::rtps::core::detail::GuidPrefix_t& InfoDestinationSubmessage::guidPrefix()
{
    return m_guidPrefix;
}





InfoSourceSubmessage::InfoSourceSubmessage()
{
    // eprosima::fastdds::rtps::core::SubmessageHeader m_submsgHeader

    // long m_unused
    m_unused = 0;
    // eprosima::fastdds::rtps::core::detail::ProtocolVersion_t m_version

    // eprosima::fastdds::rtps::core::detail::VendorId_t m_vendorId

    // eprosima::fastdds::rtps::core::detail::GuidPrefix_t m_guidPrefix


}

InfoSourceSubmessage::~InfoSourceSubmessage()
{
}

InfoSourceSubmessage::InfoSourceSubmessage(
        const InfoSourceSubmessage& x)
{
    m_submsgHeader = x.m_submsgHeader;


    m_unused = x.m_unused;


    m_version = x.m_version;


    m_vendorId = x.m_vendorId;


    m_guidPrefix = x.m_guidPrefix;

}

InfoSourceSubmessage::InfoSourceSubmessage(
        InfoSourceSubmessage&& x) noexcept
{
    m_submsgHeader = std::move(x.m_submsgHeader);


    m_unused = x.m_unused;


    m_version = std::move(x.m_version);


    m_vendorId = std::move(x.m_vendorId);


    m_guidPrefix = std::move(x.m_guidPrefix);

}

InfoSourceSubmessage& InfoSourceSubmessage::operator =(
        const InfoSourceSubmessage& x)
{
    m_submsgHeader = x.m_submsgHeader;


    m_unused = x.m_unused;


    m_version = x.m_version;


    m_vendorId = x.m_vendorId;


    m_guidPrefix = x.m_guidPrefix;

    return *this;
}

InfoSourceSubmessage& InfoSourceSubmessage::operator =(
        InfoSourceSubmessage&& x) noexcept
{
    m_submsgHeader = std::move(x.m_submsgHeader);


    m_unused = x.m_unused;


    m_version = std::move(x.m_version);


    m_vendorId = std::move(x.m_vendorId);


    m_guidPrefix = std::move(x.m_guidPrefix);

    return *this;
}

bool InfoSourceSubmessage::operator ==(
        const InfoSourceSubmessage& x) const
{
    return (m_submsgHeader == x.m_submsgHeader &&
           m_unused == x.m_unused &&
           m_version == x.m_version &&
           m_vendorId == x.m_vendorId &&
           m_guidPrefix == x.m_guidPrefix);
}

bool InfoSourceSubmessage::operator !=(
        const InfoSourceSubmessage& x) const
{
    return !(*this == x);
}

size_t InfoSourceSubmessage::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return eprosima_fastdds_rtps_core_InfoSourceSubmessage_max_cdr_typesize;
}

size_t InfoSourceSubmessage::getCdrSerializedSize(
        const InfoSourceSubmessage& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += eprosima::fastdds::rtps::core::SubmessageHeader::getCdrSerializedSize(data.submsgHeader(), current_alignment);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += eprosima::fastdds::rtps::core::detail::ProtocolVersion_t::getCdrSerializedSize(data.version(), current_alignment);


    current_alignment += eprosima::fastdds::rtps::core::detail::VendorId_t::getCdrSerializedSize(data.vendorId(), current_alignment);


    current_alignment += eprosima::fastdds::rtps::core::detail::GuidPrefix_t::getCdrSerializedSize(data.guidPrefix(), current_alignment);


    return current_alignment - initial_alignment;
}


void InfoSourceSubmessage::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_submsgHeader;

    scdr << m_unused;

    scdr << m_version;

    scdr << m_vendorId;

    scdr << m_guidPrefix;

}

void InfoSourceSubmessage::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_submsgHeader;



    dcdr >> m_unused;



    dcdr >> m_version;



    dcdr >> m_vendorId;



    dcdr >> m_guidPrefix;


}


bool InfoSourceSubmessage::isKeyDefined()
{
    return false;
}

void InfoSourceSubmessage::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

/*!
 * @brief This function copies the value in member submsgHeader
 * @param _submsgHeader New value to be copied in member submsgHeader
 */
void InfoSourceSubmessage::submsgHeader(
        const eprosima::fastdds::rtps::core::SubmessageHeader& _submsgHeader)
{
    m_submsgHeader = _submsgHeader;
}

/*!
 * @brief This function moves the value in member submsgHeader
 * @param _submsgHeader New value to be moved in member submsgHeader
 */
void InfoSourceSubmessage::submsgHeader(
        eprosima::fastdds::rtps::core::SubmessageHeader&& _submsgHeader)
{
    m_submsgHeader = std::move(_submsgHeader);
}

/*!
 * @brief This function returns a constant reference to member submsgHeader
 * @return Constant reference to member submsgHeader
 */
const eprosima::fastdds::rtps::core::SubmessageHeader& InfoSourceSubmessage::submsgHeader() const
{
    return m_submsgHeader;
}

/*!
 * @brief This function returns a reference to member submsgHeader
 * @return Reference to member submsgHeader
 */
eprosima::fastdds::rtps::core::SubmessageHeader& InfoSourceSubmessage::submsgHeader()
{
    return m_submsgHeader;
}


/*!
 * @brief This function sets a value in member unused
 * @param _unused New value for member unused
 */
void InfoSourceSubmessage::unused(
        int32_t _unused)
{
    m_unused = _unused;
}

/*!
 * @brief This function returns the value of member unused
 * @return Value of member unused
 */
int32_t InfoSourceSubmessage::unused() const
{
    return m_unused;
}

/*!
 * @brief This function returns a reference to member unused
 * @return Reference to member unused
 */
int32_t& InfoSourceSubmessage::unused()
{
    return m_unused;
}


/*!
 * @brief This function copies the value in member version
 * @param _version New value to be copied in member version
 */
void InfoSourceSubmessage::version(
        const eprosima::fastdds::rtps::core::detail::ProtocolVersion_t& _version)
{
    m_version = _version;
}

/*!
 * @brief This function moves the value in member version
 * @param _version New value to be moved in member version
 */
void InfoSourceSubmessage::version(
        eprosima::fastdds::rtps::core::detail::ProtocolVersion_t&& _version)
{
    m_version = std::move(_version);
}

/*!
 * @brief This function returns a constant reference to member version
 * @return Constant reference to member version
 */
const eprosima::fastdds::rtps::core::detail::ProtocolVersion_t& InfoSourceSubmessage::version() const
{
    return m_version;
}

/*!
 * @brief This function returns a reference to member version
 * @return Reference to member version
 */
eprosima::fastdds::rtps::core::detail::ProtocolVersion_t& InfoSourceSubmessage::version()
{
    return m_version;
}


/*!
 * @brief This function copies the value in member vendorId
 * @param _vendorId New value to be copied in member vendorId
 */
void InfoSourceSubmessage::vendorId(
        const eprosima::fastdds::rtps::core::detail::VendorId_t& _vendorId)
{
    m_vendorId = _vendorId;
}

/*!
 * @brief This function moves the value in member vendorId
 * @param _vendorId New value to be moved in member vendorId
 */
void InfoSourceSubmessage::vendorId(
        eprosima::fastdds::rtps::core::detail::VendorId_t&& _vendorId)
{
    m_vendorId = std::move(_vendorId);
}

/*!
 * @brief This function returns a constant reference to member vendorId
 * @return Constant reference to member vendorId
 */
const eprosima::fastdds::rtps::core::detail::VendorId_t& InfoSourceSubmessage::vendorId() const
{
    return m_vendorId;
}

/*!
 * @brief This function returns a reference to member vendorId
 * @return Reference to member vendorId
 */
eprosima::fastdds::rtps::core::detail::VendorId_t& InfoSourceSubmessage::vendorId()
{
    return m_vendorId;
}


/*!
 * @brief This function copies the value in member guidPrefix
 * @param _guidPrefix New value to be copied in member guidPrefix
 */
void InfoSourceSubmessage::guidPrefix(
        const eprosima::fastdds::rtps::core::detail::GuidPrefix_t& _guidPrefix)
{
    m_guidPrefix = _guidPrefix;
}

/*!
 * @brief This function moves the value in member guidPrefix
 * @param _guidPrefix New value to be moved in member guidPrefix
 */
void InfoSourceSubmessage::guidPrefix(
        eprosima::fastdds::rtps::core::detail::GuidPrefix_t&& _guidPrefix)
{
    m_guidPrefix = std::move(_guidPrefix);
}

/*!
 * @brief This function returns a constant reference to member guidPrefix
 * @return Constant reference to member guidPrefix
 */
const eprosima::fastdds::rtps::core::detail::GuidPrefix_t& InfoSourceSubmessage::guidPrefix() const
{
    return m_guidPrefix;
}

/*!
 * @brief This function returns a reference to member guidPrefix
 * @return Reference to member guidPrefix
 */
eprosima::fastdds::rtps::core::detail::GuidPrefix_t& InfoSourceSubmessage::guidPrefix()
{
    return m_guidPrefix;
}





InfoTimestampSubmessage::InfoTimestampSubmessage()
{
    // eprosima::fastdds::rtps::core::SubmessageHeader m_submsgHeader

    // eprosima::fastdds::rtps::core::detail::Timestamp m_timestamp


}

InfoTimestampSubmessage::~InfoTimestampSubmessage()
{
}

InfoTimestampSubmessage::InfoTimestampSubmessage(
        const InfoTimestampSubmessage& x)
{
    m_submsgHeader = x.m_submsgHeader;


    m_timestamp = x.m_timestamp;

}

InfoTimestampSubmessage::InfoTimestampSubmessage(
        InfoTimestampSubmessage&& x) noexcept
{
    m_submsgHeader = std::move(x.m_submsgHeader);


    m_timestamp = std::move(x.m_timestamp);

}

InfoTimestampSubmessage& InfoTimestampSubmessage::operator =(
        const InfoTimestampSubmessage& x)
{
    m_submsgHeader = x.m_submsgHeader;


    m_timestamp = x.m_timestamp;

    return *this;
}

InfoTimestampSubmessage& InfoTimestampSubmessage::operator =(
        InfoTimestampSubmessage&& x) noexcept
{
    m_submsgHeader = std::move(x.m_submsgHeader);


    m_timestamp = std::move(x.m_timestamp);

    return *this;
}

bool InfoTimestampSubmessage::operator ==(
        const InfoTimestampSubmessage& x) const
{
    return (m_submsgHeader == x.m_submsgHeader &&
           m_timestamp == x.m_timestamp);
}

bool InfoTimestampSubmessage::operator !=(
        const InfoTimestampSubmessage& x) const
{
    return !(*this == x);
}

size_t InfoTimestampSubmessage::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return eprosima_fastdds_rtps_core_InfoTimestampSubmessage_max_cdr_typesize;
}

size_t InfoTimestampSubmessage::getCdrSerializedSize(
        const InfoTimestampSubmessage& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += eprosima::fastdds::rtps::core::SubmessageHeader::getCdrSerializedSize(data.submsgHeader(), current_alignment);


    current_alignment += eprosima::fastdds::rtps::core::detail::Timestamp::getCdrSerializedSize(data.timestamp(), current_alignment);


    return current_alignment - initial_alignment;
}


void InfoTimestampSubmessage::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_submsgHeader;

    scdr << m_timestamp;

}

void InfoTimestampSubmessage::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_submsgHeader;



    dcdr >> m_timestamp;


}


bool InfoTimestampSubmessage::isKeyDefined()
{
    return false;
}

void InfoTimestampSubmessage::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

/*!
 * @brief This function copies the value in member submsgHeader
 * @param _submsgHeader New value to be copied in member submsgHeader
 */
void InfoTimestampSubmessage::submsgHeader(
        const eprosima::fastdds::rtps::core::SubmessageHeader& _submsgHeader)
{
    m_submsgHeader = _submsgHeader;
}

/*!
 * @brief This function moves the value in member submsgHeader
 * @param _submsgHeader New value to be moved in member submsgHeader
 */
void InfoTimestampSubmessage::submsgHeader(
        eprosima::fastdds::rtps::core::SubmessageHeader&& _submsgHeader)
{
    m_submsgHeader = std::move(_submsgHeader);
}

/*!
 * @brief This function returns a constant reference to member submsgHeader
 * @return Constant reference to member submsgHeader
 */
const eprosima::fastdds::rtps::core::SubmessageHeader& InfoTimestampSubmessage::submsgHeader() const
{
    return m_submsgHeader;
}

/*!
 * @brief This function returns a reference to member submsgHeader
 * @return Reference to member submsgHeader
 */
eprosima::fastdds::rtps::core::SubmessageHeader& InfoTimestampSubmessage::submsgHeader()
{
    return m_submsgHeader;
}


/*!
 * @brief This function copies the value in member timestamp
 * @param _timestamp New value to be copied in member timestamp
 */
void InfoTimestampSubmessage::timestamp(
        const eprosima::fastdds::rtps::core::detail::Timestamp& _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function moves the value in member timestamp
 * @param _timestamp New value to be moved in member timestamp
 */
void InfoTimestampSubmessage::timestamp(
        eprosima::fastdds::rtps::core::detail::Timestamp&& _timestamp)
{
    m_timestamp = std::move(_timestamp);
}

/*!
 * @brief This function returns a constant reference to member timestamp
 * @return Constant reference to member timestamp
 */
const eprosima::fastdds::rtps::core::detail::Timestamp& InfoTimestampSubmessage::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
eprosima::fastdds::rtps::core::detail::Timestamp& InfoTimestampSubmessage::timestamp()
{
    return m_timestamp;
}





} // namespace core


} // namespace rtps


} // namespace fastdds


} // namespace eprosima

#endif // FASTCDR_VERSION_MAJOR == 1
