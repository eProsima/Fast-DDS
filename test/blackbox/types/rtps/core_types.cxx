// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file core_types.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "core_types.h"

#include "core_typesTypeObject.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace eprosima {

namespace fastdds {

namespace rtps {

namespace core {

namespace detail {



EntityId_t::EntityId_t()
{
    // Just to register all known types
    registercore_typesTypes();
}

EntityId_t::~EntityId_t()
{
}

EntityId_t::EntityId_t(
        const EntityId_t& x)
{
    m_value = x.m_value;
}

EntityId_t::EntityId_t(
        EntityId_t&& x) noexcept
{
    m_value = std::move(x.m_value);
}

EntityId_t& EntityId_t::operator =(
        const EntityId_t& x)
{

    m_value = x.m_value;
    return *this;
}

EntityId_t& EntityId_t::operator =(
        EntityId_t&& x) noexcept
{

    m_value = std::move(x.m_value);
    return *this;
}

bool EntityId_t::operator ==(
        const EntityId_t& x) const
{
    return (m_value == x.m_value);
}

bool EntityId_t::operator !=(
        const EntityId_t& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member value
 * @param _value New value to be copied in member value
 */
void EntityId_t::value(
        const std::array<uint8_t, 4>& _value)
{
    m_value = _value;
}

/*!
 * @brief This function moves the value in member value
 * @param _value New value to be moved in member value
 */
void EntityId_t::value(
        std::array<uint8_t, 4>&& _value)
{
    m_value = std::move(_value);
}

/*!
 * @brief This function returns a constant reference to member value
 * @return Constant reference to member value
 */
const std::array<uint8_t, 4>& EntityId_t::value() const
{
    return m_value;
}

/*!
 * @brief This function returns a reference to member value
 * @return Reference to member value
 */
std::array<uint8_t, 4>& EntityId_t::value()
{
    return m_value;
}




ProtocolVersion_t::ProtocolVersion_t()
{
    // Just to register all known types
    registercore_typesTypes();
}

ProtocolVersion_t::~ProtocolVersion_t()
{
}

ProtocolVersion_t::ProtocolVersion_t(
        const ProtocolVersion_t& x)
{
    m_major = x.m_major;
    m_minor = x.m_minor;
}

ProtocolVersion_t::ProtocolVersion_t(
        ProtocolVersion_t&& x) noexcept
{
    m_major = x.m_major;
    m_minor = x.m_minor;
}

ProtocolVersion_t& ProtocolVersion_t::operator =(
        const ProtocolVersion_t& x)
{

    m_major = x.m_major;
    m_minor = x.m_minor;
    return *this;
}

ProtocolVersion_t& ProtocolVersion_t::operator =(
        ProtocolVersion_t&& x) noexcept
{

    m_major = x.m_major;
    m_minor = x.m_minor;
    return *this;
}

bool ProtocolVersion_t::operator ==(
        const ProtocolVersion_t& x) const
{
    return (m_major == x.m_major &&
           m_minor == x.m_minor);
}

bool ProtocolVersion_t::operator !=(
        const ProtocolVersion_t& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member major
 * @param _major New value for member major
 */
void ProtocolVersion_t::major(
        uint8_t _major)
{
    m_major = _major;
}

/*!
 * @brief This function returns the value of member major
 * @return Value of member major
 */
uint8_t ProtocolVersion_t::major() const
{
    return m_major;
}

/*!
 * @brief This function returns a reference to member major
 * @return Reference to member major
 */
uint8_t& ProtocolVersion_t::major()
{
    return m_major;
}


/*!
 * @brief This function sets a value in member minor
 * @param _minor New value for member minor
 */
void ProtocolVersion_t::minor(
        uint8_t _minor)
{
    m_minor = _minor;
}

/*!
 * @brief This function returns the value of member minor
 * @return Value of member minor
 */
uint8_t ProtocolVersion_t::minor() const
{
    return m_minor;
}

/*!
 * @brief This function returns a reference to member minor
 * @return Reference to member minor
 */
uint8_t& ProtocolVersion_t::minor()
{
    return m_minor;
}




VendorId_t::VendorId_t()
{
    // Just to register all known types
    registercore_typesTypes();
}

VendorId_t::~VendorId_t()
{
}

VendorId_t::VendorId_t(
        const VendorId_t& x)
{
    m_vendorId = x.m_vendorId;
}

VendorId_t::VendorId_t(
        VendorId_t&& x) noexcept
{
    m_vendorId = std::move(x.m_vendorId);
}

VendorId_t& VendorId_t::operator =(
        const VendorId_t& x)
{

    m_vendorId = x.m_vendorId;
    return *this;
}

VendorId_t& VendorId_t::operator =(
        VendorId_t&& x) noexcept
{

    m_vendorId = std::move(x.m_vendorId);
    return *this;
}

bool VendorId_t::operator ==(
        const VendorId_t& x) const
{
    return (m_vendorId == x.m_vendorId);
}

bool VendorId_t::operator !=(
        const VendorId_t& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member vendorId
 * @param _vendorId New value to be copied in member vendorId
 */
void VendorId_t::vendorId(
        const std::array<uint8_t, 2>& _vendorId)
{
    m_vendorId = _vendorId;
}

/*!
 * @brief This function moves the value in member vendorId
 * @param _vendorId New value to be moved in member vendorId
 */
void VendorId_t::vendorId(
        std::array<uint8_t, 2>&& _vendorId)
{
    m_vendorId = std::move(_vendorId);
}

/*!
 * @brief This function returns a constant reference to member vendorId
 * @return Constant reference to member vendorId
 */
const std::array<uint8_t, 2>& VendorId_t::vendorId() const
{
    return m_vendorId;
}

/*!
 * @brief This function returns a reference to member vendorId
 * @return Reference to member vendorId
 */
std::array<uint8_t, 2>& VendorId_t::vendorId()
{
    return m_vendorId;
}




GuidPrefix_t::GuidPrefix_t()
{
    // Just to register all known types
    registercore_typesTypes();
}

GuidPrefix_t::~GuidPrefix_t()
{
}

GuidPrefix_t::GuidPrefix_t(
        const GuidPrefix_t& x)
{
    m_value = x.m_value;
}

GuidPrefix_t::GuidPrefix_t(
        GuidPrefix_t&& x) noexcept
{
    m_value = std::move(x.m_value);
}

GuidPrefix_t& GuidPrefix_t::operator =(
        const GuidPrefix_t& x)
{

    m_value = x.m_value;
    return *this;
}

GuidPrefix_t& GuidPrefix_t::operator =(
        GuidPrefix_t&& x) noexcept
{

    m_value = std::move(x.m_value);
    return *this;
}

bool GuidPrefix_t::operator ==(
        const GuidPrefix_t& x) const
{
    return (m_value == x.m_value);
}

bool GuidPrefix_t::operator !=(
        const GuidPrefix_t& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member value
 * @param _value New value to be copied in member value
 */
void GuidPrefix_t::value(
        const std::array<uint8_t, 12>& _value)
{
    m_value = _value;
}

/*!
 * @brief This function moves the value in member value
 * @param _value New value to be moved in member value
 */
void GuidPrefix_t::value(
        std::array<uint8_t, 12>&& _value)
{
    m_value = std::move(_value);
}

/*!
 * @brief This function returns a constant reference to member value
 * @return Constant reference to member value
 */
const std::array<uint8_t, 12>& GuidPrefix_t::value() const
{
    return m_value;
}

/*!
 * @brief This function returns a reference to member value
 * @return Reference to member value
 */
std::array<uint8_t, 12>& GuidPrefix_t::value()
{
    return m_value;
}




GUID_t::GUID_t()
{
    // Just to register all known types
    registercore_typesTypes();
}

GUID_t::~GUID_t()
{
}

GUID_t::GUID_t(
        const GUID_t& x)
{
    m_guidPrefix = x.m_guidPrefix;
    m_entityId = x.m_entityId;
}

GUID_t::GUID_t(
        GUID_t&& x) noexcept
{
    m_guidPrefix = std::move(x.m_guidPrefix);
    m_entityId = std::move(x.m_entityId);
}

GUID_t& GUID_t::operator =(
        const GUID_t& x)
{

    m_guidPrefix = x.m_guidPrefix;
    m_entityId = x.m_entityId;
    return *this;
}

GUID_t& GUID_t::operator =(
        GUID_t&& x) noexcept
{

    m_guidPrefix = std::move(x.m_guidPrefix);
    m_entityId = std::move(x.m_entityId);
    return *this;
}

bool GUID_t::operator ==(
        const GUID_t& x) const
{
    return (m_guidPrefix == x.m_guidPrefix &&
           m_entityId == x.m_entityId);
}

bool GUID_t::operator !=(
        const GUID_t& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member guidPrefix
 * @param _guidPrefix New value to be copied in member guidPrefix
 */
void GUID_t::guidPrefix(
        const eprosima::fastdds::rtps::core::detail::GuidPrefix_t& _guidPrefix)
{
    m_guidPrefix = _guidPrefix;
}

/*!
 * @brief This function moves the value in member guidPrefix
 * @param _guidPrefix New value to be moved in member guidPrefix
 */
void GUID_t::guidPrefix(
        eprosima::fastdds::rtps::core::detail::GuidPrefix_t&& _guidPrefix)
{
    m_guidPrefix = std::move(_guidPrefix);
}

/*!
 * @brief This function returns a constant reference to member guidPrefix
 * @return Constant reference to member guidPrefix
 */
const eprosima::fastdds::rtps::core::detail::GuidPrefix_t& GUID_t::guidPrefix() const
{
    return m_guidPrefix;
}

/*!
 * @brief This function returns a reference to member guidPrefix
 * @return Reference to member guidPrefix
 */
eprosima::fastdds::rtps::core::detail::GuidPrefix_t& GUID_t::guidPrefix()
{
    return m_guidPrefix;
}


/*!
 * @brief This function copies the value in member entityId
 * @param _entityId New value to be copied in member entityId
 */
void GUID_t::entityId(
        const eprosima::fastdds::rtps::core::detail::EntityId_t& _entityId)
{
    m_entityId = _entityId;
}

/*!
 * @brief This function moves the value in member entityId
 * @param _entityId New value to be moved in member entityId
 */
void GUID_t::entityId(
        eprosima::fastdds::rtps::core::detail::EntityId_t&& _entityId)
{
    m_entityId = std::move(_entityId);
}

/*!
 * @brief This function returns a constant reference to member entityId
 * @return Constant reference to member entityId
 */
const eprosima::fastdds::rtps::core::detail::EntityId_t& GUID_t::entityId() const
{
    return m_entityId;
}

/*!
 * @brief This function returns a reference to member entityId
 * @return Reference to member entityId
 */
eprosima::fastdds::rtps::core::detail::EntityId_t& GUID_t::entityId()
{
    return m_entityId;
}




SequenceNumber_t::SequenceNumber_t()
{
    // Just to register all known types
    registercore_typesTypes();
}

SequenceNumber_t::~SequenceNumber_t()
{
}

SequenceNumber_t::SequenceNumber_t(
        const SequenceNumber_t& x)
{
    m_high = x.m_high;
    m_low = x.m_low;
}

SequenceNumber_t::SequenceNumber_t(
        SequenceNumber_t&& x) noexcept
{
    m_high = x.m_high;
    m_low = x.m_low;
}

SequenceNumber_t& SequenceNumber_t::operator =(
        const SequenceNumber_t& x)
{

    m_high = x.m_high;
    m_low = x.m_low;
    return *this;
}

SequenceNumber_t& SequenceNumber_t::operator =(
        SequenceNumber_t&& x) noexcept
{

    m_high = x.m_high;
    m_low = x.m_low;
    return *this;
}

bool SequenceNumber_t::operator ==(
        const SequenceNumber_t& x) const
{
    return (m_high == x.m_high &&
           m_low == x.m_low);
}

bool SequenceNumber_t::operator !=(
        const SequenceNumber_t& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member high
 * @param _high New value for member high
 */
void SequenceNumber_t::high(
        int32_t _high)
{
    m_high = _high;
}

/*!
 * @brief This function returns the value of member high
 * @return Value of member high
 */
int32_t SequenceNumber_t::high() const
{
    return m_high;
}

/*!
 * @brief This function returns a reference to member high
 * @return Reference to member high
 */
int32_t& SequenceNumber_t::high()
{
    return m_high;
}


/*!
 * @brief This function sets a value in member low
 * @param _low New value for member low
 */
void SequenceNumber_t::low(
        uint32_t _low)
{
    m_low = _low;
}

/*!
 * @brief This function returns the value of member low
 * @return Value of member low
 */
uint32_t SequenceNumber_t::low() const
{
    return m_low;
}

/*!
 * @brief This function returns a reference to member low
 * @return Reference to member low
 */
uint32_t& SequenceNumber_t::low()
{
    return m_low;
}




Count_t::Count_t()
{
    // Just to register all known types
    registercore_typesTypes();
}

Count_t::~Count_t()
{
}

Count_t::Count_t(
        const Count_t& x)
{
    m_value = x.m_value;
}

Count_t::Count_t(
        Count_t&& x) noexcept
{
    m_value = x.m_value;
}

Count_t& Count_t::operator =(
        const Count_t& x)
{

    m_value = x.m_value;
    return *this;
}

Count_t& Count_t::operator =(
        Count_t&& x) noexcept
{

    m_value = x.m_value;
    return *this;
}

bool Count_t::operator ==(
        const Count_t& x) const
{
    return (m_value == x.m_value);
}

bool Count_t::operator !=(
        const Count_t& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member value
 * @param _value New value for member value
 */
void Count_t::value(
        int32_t _value)
{
    m_value = _value;
}

/*!
 * @brief This function returns the value of member value
 * @return Value of member value
 */
int32_t Count_t::value() const
{
    return m_value;
}

/*!
 * @brief This function returns a reference to member value
 * @return Reference to member value
 */
int32_t& Count_t::value()
{
    return m_value;
}




Time_t::Time_t()
{
    // Just to register all known types
    registercore_typesTypes();
}

Time_t::~Time_t()
{
}

Time_t::Time_t(
        const Time_t& x)
{
    m_seconds = x.m_seconds;
    m_fraction = x.m_fraction;
}

Time_t::Time_t(
        Time_t&& x) noexcept
{
    m_seconds = x.m_seconds;
    m_fraction = x.m_fraction;
}

Time_t& Time_t::operator =(
        const Time_t& x)
{

    m_seconds = x.m_seconds;
    m_fraction = x.m_fraction;
    return *this;
}

Time_t& Time_t::operator =(
        Time_t&& x) noexcept
{

    m_seconds = x.m_seconds;
    m_fraction = x.m_fraction;
    return *this;
}

bool Time_t::operator ==(
        const Time_t& x) const
{
    return (m_seconds == x.m_seconds &&
           m_fraction == x.m_fraction);
}

bool Time_t::operator !=(
        const Time_t& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member seconds
 * @param _seconds New value for member seconds
 */
void Time_t::seconds(
        uint32_t _seconds)
{
    m_seconds = _seconds;
}

/*!
 * @brief This function returns the value of member seconds
 * @return Value of member seconds
 */
uint32_t Time_t::seconds() const
{
    return m_seconds;
}

/*!
 * @brief This function returns a reference to member seconds
 * @return Reference to member seconds
 */
uint32_t& Time_t::seconds()
{
    return m_seconds;
}


/*!
 * @brief This function sets a value in member fraction
 * @param _fraction New value for member fraction
 */
void Time_t::fraction(
        uint32_t _fraction)
{
    m_fraction = _fraction;
}

/*!
 * @brief This function returns the value of member fraction
 * @return Value of member fraction
 */
uint32_t Time_t::fraction() const
{
    return m_fraction;
}

/*!
 * @brief This function returns a reference to member fraction
 * @return Reference to member fraction
 */
uint32_t& Time_t::fraction()
{
    return m_fraction;
}





} // namespace detail


Header::Header()
{
    // Just to register all known types
    registercore_typesTypes();
}

Header::~Header()
{
}

Header::Header(
        const Header& x)
{
    m_prefix = x.m_prefix;
    m_version = x.m_version;
    m_vendorId = x.m_vendorId;
    m_guidPrefix = x.m_guidPrefix;
}

Header::Header(
        Header&& x) noexcept
{
    m_prefix = std::move(x.m_prefix);
    m_version = std::move(x.m_version);
    m_vendorId = std::move(x.m_vendorId);
    m_guidPrefix = std::move(x.m_guidPrefix);
}

Header& Header::operator =(
        const Header& x)
{

    m_prefix = x.m_prefix;
    m_version = x.m_version;
    m_vendorId = x.m_vendorId;
    m_guidPrefix = x.m_guidPrefix;
    return *this;
}

Header& Header::operator =(
        Header&& x) noexcept
{

    m_prefix = std::move(x.m_prefix);
    m_version = std::move(x.m_version);
    m_vendorId = std::move(x.m_vendorId);
    m_guidPrefix = std::move(x.m_guidPrefix);
    return *this;
}

bool Header::operator ==(
        const Header& x) const
{
    return (m_prefix == x.m_prefix &&
           m_version == x.m_version &&
           m_vendorId == x.m_vendorId &&
           m_guidPrefix == x.m_guidPrefix);
}

bool Header::operator !=(
        const Header& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member prefix
 * @param _prefix New value to be copied in member prefix
 */
void Header::prefix(
        const std::array<uint8_t, 4>& _prefix)
{
    m_prefix = _prefix;
}

/*!
 * @brief This function moves the value in member prefix
 * @param _prefix New value to be moved in member prefix
 */
void Header::prefix(
        std::array<uint8_t, 4>&& _prefix)
{
    m_prefix = std::move(_prefix);
}

/*!
 * @brief This function returns a constant reference to member prefix
 * @return Constant reference to member prefix
 */
const std::array<uint8_t, 4>& Header::prefix() const
{
    return m_prefix;
}

/*!
 * @brief This function returns a reference to member prefix
 * @return Reference to member prefix
 */
std::array<uint8_t, 4>& Header::prefix()
{
    return m_prefix;
}


/*!
 * @brief This function copies the value in member version
 * @param _version New value to be copied in member version
 */
void Header::version(
        const eprosima::fastdds::rtps::core::detail::ProtocolVersion_t& _version)
{
    m_version = _version;
}

/*!
 * @brief This function moves the value in member version
 * @param _version New value to be moved in member version
 */
void Header::version(
        eprosima::fastdds::rtps::core::detail::ProtocolVersion_t&& _version)
{
    m_version = std::move(_version);
}

/*!
 * @brief This function returns a constant reference to member version
 * @return Constant reference to member version
 */
const eprosima::fastdds::rtps::core::detail::ProtocolVersion_t& Header::version() const
{
    return m_version;
}

/*!
 * @brief This function returns a reference to member version
 * @return Reference to member version
 */
eprosima::fastdds::rtps::core::detail::ProtocolVersion_t& Header::version()
{
    return m_version;
}


/*!
 * @brief This function copies the value in member vendorId
 * @param _vendorId New value to be copied in member vendorId
 */
void Header::vendorId(
        const eprosima::fastdds::rtps::core::detail::VendorId_t& _vendorId)
{
    m_vendorId = _vendorId;
}

/*!
 * @brief This function moves the value in member vendorId
 * @param _vendorId New value to be moved in member vendorId
 */
void Header::vendorId(
        eprosima::fastdds::rtps::core::detail::VendorId_t&& _vendorId)
{
    m_vendorId = std::move(_vendorId);
}

/*!
 * @brief This function returns a constant reference to member vendorId
 * @return Constant reference to member vendorId
 */
const eprosima::fastdds::rtps::core::detail::VendorId_t& Header::vendorId() const
{
    return m_vendorId;
}

/*!
 * @brief This function returns a reference to member vendorId
 * @return Reference to member vendorId
 */
eprosima::fastdds::rtps::core::detail::VendorId_t& Header::vendorId()
{
    return m_vendorId;
}


/*!
 * @brief This function copies the value in member guidPrefix
 * @param _guidPrefix New value to be copied in member guidPrefix
 */
void Header::guidPrefix(
        const eprosima::fastdds::rtps::core::detail::GuidPrefix_t& _guidPrefix)
{
    m_guidPrefix = _guidPrefix;
}

/*!
 * @brief This function moves the value in member guidPrefix
 * @param _guidPrefix New value to be moved in member guidPrefix
 */
void Header::guidPrefix(
        eprosima::fastdds::rtps::core::detail::GuidPrefix_t&& _guidPrefix)
{
    m_guidPrefix = std::move(_guidPrefix);
}

/*!
 * @brief This function returns a constant reference to member guidPrefix
 * @return Constant reference to member guidPrefix
 */
const eprosima::fastdds::rtps::core::detail::GuidPrefix_t& Header::guidPrefix() const
{
    return m_guidPrefix;
}

/*!
 * @brief This function returns a reference to member guidPrefix
 * @return Reference to member guidPrefix
 */
eprosima::fastdds::rtps::core::detail::GuidPrefix_t& Header::guidPrefix()
{
    return m_guidPrefix;
}




SubmessageHeader::SubmessageHeader()
{
    // Just to register all known types
    registercore_typesTypes();
}

SubmessageHeader::~SubmessageHeader()
{
}

SubmessageHeader::SubmessageHeader(
        const SubmessageHeader& x)
{
    m_submessageId = x.m_submessageId;
    m_flags = x.m_flags;
    m_submessageLength = x.m_submessageLength;
}

SubmessageHeader::SubmessageHeader(
        SubmessageHeader&& x) noexcept
{
    m_submessageId = x.m_submessageId;
    m_flags = x.m_flags;
    m_submessageLength = x.m_submessageLength;
}

SubmessageHeader& SubmessageHeader::operator =(
        const SubmessageHeader& x)
{

    m_submessageId = x.m_submessageId;
    m_flags = x.m_flags;
    m_submessageLength = x.m_submessageLength;
    return *this;
}

SubmessageHeader& SubmessageHeader::operator =(
        SubmessageHeader&& x) noexcept
{

    m_submessageId = x.m_submessageId;
    m_flags = x.m_flags;
    m_submessageLength = x.m_submessageLength;
    return *this;
}

bool SubmessageHeader::operator ==(
        const SubmessageHeader& x) const
{
    return (m_submessageId == x.m_submessageId &&
           m_flags == x.m_flags &&
           m_submessageLength == x.m_submessageLength);
}

bool SubmessageHeader::operator !=(
        const SubmessageHeader& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member submessageId
 * @param _submessageId New value for member submessageId
 */
void SubmessageHeader::submessageId(
        uint8_t _submessageId)
{
    m_submessageId = _submessageId;
}

/*!
 * @brief This function returns the value of member submessageId
 * @return Value of member submessageId
 */
uint8_t SubmessageHeader::submessageId() const
{
    return m_submessageId;
}

/*!
 * @brief This function returns a reference to member submessageId
 * @return Reference to member submessageId
 */
uint8_t& SubmessageHeader::submessageId()
{
    return m_submessageId;
}


/*!
 * @brief This function sets a value in member flags
 * @param _flags New value for member flags
 */
void SubmessageHeader::flags(
        uint8_t _flags)
{
    m_flags = _flags;
}

/*!
 * @brief This function returns the value of member flags
 * @return Value of member flags
 */
uint8_t SubmessageHeader::flags() const
{
    return m_flags;
}

/*!
 * @brief This function returns a reference to member flags
 * @return Reference to member flags
 */
uint8_t& SubmessageHeader::flags()
{
    return m_flags;
}


/*!
 * @brief This function sets a value in member submessageLength
 * @param _submessageLength New value for member submessageLength
 */
void SubmessageHeader::submessageLength(
        uint16_t _submessageLength)
{
    m_submessageLength = _submessageLength;
}

/*!
 * @brief This function returns the value of member submessageLength
 * @return Value of member submessageLength
 */
uint16_t SubmessageHeader::submessageLength() const
{
    return m_submessageLength;
}

/*!
 * @brief This function returns a reference to member submessageLength
 * @return Reference to member submessageLength
 */
uint16_t& SubmessageHeader::submessageLength()
{
    return m_submessageLength;
}





HeartBeatSubmessage::HeartBeatSubmessage()
{
    // Just to register all known types
    registercore_typesTypes();
}

HeartBeatSubmessage::~HeartBeatSubmessage()
{
}

HeartBeatSubmessage::HeartBeatSubmessage(
        const HeartBeatSubmessage& x)
{
    m_submsgHeader = x.m_submsgHeader;
    m_readerId = x.m_readerId;
    m_writerId = x.m_writerId;
    m_firstSN = x.m_firstSN;
    m_lastSN = x.m_lastSN;
    m_count = x.m_count;
}

HeartBeatSubmessage::HeartBeatSubmessage(
        HeartBeatSubmessage&& x) noexcept
{
    m_submsgHeader = std::move(x.m_submsgHeader);
    m_readerId = std::move(x.m_readerId);
    m_writerId = std::move(x.m_writerId);
    m_firstSN = std::move(x.m_firstSN);
    m_lastSN = std::move(x.m_lastSN);
    m_count = std::move(x.m_count);
}

HeartBeatSubmessage& HeartBeatSubmessage::operator =(
        const HeartBeatSubmessage& x)
{

    m_submsgHeader = x.m_submsgHeader;
    m_readerId = x.m_readerId;
    m_writerId = x.m_writerId;
    m_firstSN = x.m_firstSN;
    m_lastSN = x.m_lastSN;
    m_count = x.m_count;
    return *this;
}

HeartBeatSubmessage& HeartBeatSubmessage::operator =(
        HeartBeatSubmessage&& x) noexcept
{

    m_submsgHeader = std::move(x.m_submsgHeader);
    m_readerId = std::move(x.m_readerId);
    m_writerId = std::move(x.m_writerId);
    m_firstSN = std::move(x.m_firstSN);
    m_lastSN = std::move(x.m_lastSN);
    m_count = std::move(x.m_count);
    return *this;
}

bool HeartBeatSubmessage::operator ==(
        const HeartBeatSubmessage& x) const
{
    return (m_submsgHeader == x.m_submsgHeader &&
           m_readerId == x.m_readerId &&
           m_writerId == x.m_writerId &&
           m_firstSN == x.m_firstSN &&
           m_lastSN == x.m_lastSN &&
           m_count == x.m_count);
}

bool HeartBeatSubmessage::operator !=(
        const HeartBeatSubmessage& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member submsgHeader
 * @param _submsgHeader New value to be copied in member submsgHeader
 */
void HeartBeatSubmessage::submsgHeader(
        const eprosima::fastdds::rtps::core::SubmessageHeader& _submsgHeader)
{
    m_submsgHeader = _submsgHeader;
}

/*!
 * @brief This function moves the value in member submsgHeader
 * @param _submsgHeader New value to be moved in member submsgHeader
 */
void HeartBeatSubmessage::submsgHeader(
        eprosima::fastdds::rtps::core::SubmessageHeader&& _submsgHeader)
{
    m_submsgHeader = std::move(_submsgHeader);
}

/*!
 * @brief This function returns a constant reference to member submsgHeader
 * @return Constant reference to member submsgHeader
 */
const eprosima::fastdds::rtps::core::SubmessageHeader& HeartBeatSubmessage::submsgHeader() const
{
    return m_submsgHeader;
}

/*!
 * @brief This function returns a reference to member submsgHeader
 * @return Reference to member submsgHeader
 */
eprosima::fastdds::rtps::core::SubmessageHeader& HeartBeatSubmessage::submsgHeader()
{
    return m_submsgHeader;
}


/*!
 * @brief This function copies the value in member readerId
 * @param _readerId New value to be copied in member readerId
 */
void HeartBeatSubmessage::readerId(
        const eprosima::fastdds::rtps::core::detail::EntityId_t& _readerId)
{
    m_readerId = _readerId;
}

/*!
 * @brief This function moves the value in member readerId
 * @param _readerId New value to be moved in member readerId
 */
void HeartBeatSubmessage::readerId(
        eprosima::fastdds::rtps::core::detail::EntityId_t&& _readerId)
{
    m_readerId = std::move(_readerId);
}

/*!
 * @brief This function returns a constant reference to member readerId
 * @return Constant reference to member readerId
 */
const eprosima::fastdds::rtps::core::detail::EntityId_t& HeartBeatSubmessage::readerId() const
{
    return m_readerId;
}

/*!
 * @brief This function returns a reference to member readerId
 * @return Reference to member readerId
 */
eprosima::fastdds::rtps::core::detail::EntityId_t& HeartBeatSubmessage::readerId()
{
    return m_readerId;
}


/*!
 * @brief This function copies the value in member writerId
 * @param _writerId New value to be copied in member writerId
 */
void HeartBeatSubmessage::writerId(
        const eprosima::fastdds::rtps::core::detail::EntityId_t& _writerId)
{
    m_writerId = _writerId;
}

/*!
 * @brief This function moves the value in member writerId
 * @param _writerId New value to be moved in member writerId
 */
void HeartBeatSubmessage::writerId(
        eprosima::fastdds::rtps::core::detail::EntityId_t&& _writerId)
{
    m_writerId = std::move(_writerId);
}

/*!
 * @brief This function returns a constant reference to member writerId
 * @return Constant reference to member writerId
 */
const eprosima::fastdds::rtps::core::detail::EntityId_t& HeartBeatSubmessage::writerId() const
{
    return m_writerId;
}

/*!
 * @brief This function returns a reference to member writerId
 * @return Reference to member writerId
 */
eprosima::fastdds::rtps::core::detail::EntityId_t& HeartBeatSubmessage::writerId()
{
    return m_writerId;
}


/*!
 * @brief This function copies the value in member firstSN
 * @param _firstSN New value to be copied in member firstSN
 */
void HeartBeatSubmessage::firstSN(
        const eprosima::fastdds::rtps::core::detail::SequenceNumber_t& _firstSN)
{
    m_firstSN = _firstSN;
}

/*!
 * @brief This function moves the value in member firstSN
 * @param _firstSN New value to be moved in member firstSN
 */
void HeartBeatSubmessage::firstSN(
        eprosima::fastdds::rtps::core::detail::SequenceNumber_t&& _firstSN)
{
    m_firstSN = std::move(_firstSN);
}

/*!
 * @brief This function returns a constant reference to member firstSN
 * @return Constant reference to member firstSN
 */
const eprosima::fastdds::rtps::core::detail::SequenceNumber_t& HeartBeatSubmessage::firstSN() const
{
    return m_firstSN;
}

/*!
 * @brief This function returns a reference to member firstSN
 * @return Reference to member firstSN
 */
eprosima::fastdds::rtps::core::detail::SequenceNumber_t& HeartBeatSubmessage::firstSN()
{
    return m_firstSN;
}


/*!
 * @brief This function copies the value in member lastSN
 * @param _lastSN New value to be copied in member lastSN
 */
void HeartBeatSubmessage::lastSN(
        const eprosima::fastdds::rtps::core::detail::SequenceNumber_t& _lastSN)
{
    m_lastSN = _lastSN;
}

/*!
 * @brief This function moves the value in member lastSN
 * @param _lastSN New value to be moved in member lastSN
 */
void HeartBeatSubmessage::lastSN(
        eprosima::fastdds::rtps::core::detail::SequenceNumber_t&& _lastSN)
{
    m_lastSN = std::move(_lastSN);
}

/*!
 * @brief This function returns a constant reference to member lastSN
 * @return Constant reference to member lastSN
 */
const eprosima::fastdds::rtps::core::detail::SequenceNumber_t& HeartBeatSubmessage::lastSN() const
{
    return m_lastSN;
}

/*!
 * @brief This function returns a reference to member lastSN
 * @return Reference to member lastSN
 */
eprosima::fastdds::rtps::core::detail::SequenceNumber_t& HeartBeatSubmessage::lastSN()
{
    return m_lastSN;
}


/*!
 * @brief This function copies the value in member count
 * @param _count New value to be copied in member count
 */
void HeartBeatSubmessage::count(
        const eprosima::fastdds::rtps::core::detail::Count_t& _count)
{
    m_count = _count;
}

/*!
 * @brief This function moves the value in member count
 * @param _count New value to be moved in member count
 */
void HeartBeatSubmessage::count(
        eprosima::fastdds::rtps::core::detail::Count_t&& _count)
{
    m_count = std::move(_count);
}

/*!
 * @brief This function returns a constant reference to member count
 * @return Constant reference to member count
 */
const eprosima::fastdds::rtps::core::detail::Count_t& HeartBeatSubmessage::count() const
{
    return m_count;
}

/*!
 * @brief This function returns a reference to member count
 * @return Reference to member count
 */
eprosima::fastdds::rtps::core::detail::Count_t& HeartBeatSubmessage::count()
{
    return m_count;
}




InfoDestinationSubmessage::InfoDestinationSubmessage()
{
    // Just to register all known types
    registercore_typesTypes();
}

InfoDestinationSubmessage::~InfoDestinationSubmessage()
{
}

InfoDestinationSubmessage::InfoDestinationSubmessage(
        const InfoDestinationSubmessage& x)
{
    m_submsgHeader = x.m_submsgHeader;
    m_guidPrefix = x.m_guidPrefix;
}

InfoDestinationSubmessage::InfoDestinationSubmessage(
        InfoDestinationSubmessage&& x) noexcept
{
    m_submsgHeader = std::move(x.m_submsgHeader);
    m_guidPrefix = std::move(x.m_guidPrefix);
}

InfoDestinationSubmessage& InfoDestinationSubmessage::operator =(
        const InfoDestinationSubmessage& x)
{

    m_submsgHeader = x.m_submsgHeader;
    m_guidPrefix = x.m_guidPrefix;
    return *this;
}

InfoDestinationSubmessage& InfoDestinationSubmessage::operator =(
        InfoDestinationSubmessage&& x) noexcept
{

    m_submsgHeader = std::move(x.m_submsgHeader);
    m_guidPrefix = std::move(x.m_guidPrefix);
    return *this;
}

bool InfoDestinationSubmessage::operator ==(
        const InfoDestinationSubmessage& x) const
{
    return (m_submsgHeader == x.m_submsgHeader &&
           m_guidPrefix == x.m_guidPrefix);
}

bool InfoDestinationSubmessage::operator !=(
        const InfoDestinationSubmessage& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member submsgHeader
 * @param _submsgHeader New value to be copied in member submsgHeader
 */
void InfoDestinationSubmessage::submsgHeader(
        const eprosima::fastdds::rtps::core::SubmessageHeader& _submsgHeader)
{
    m_submsgHeader = _submsgHeader;
}

/*!
 * @brief This function moves the value in member submsgHeader
 * @param _submsgHeader New value to be moved in member submsgHeader
 */
void InfoDestinationSubmessage::submsgHeader(
        eprosima::fastdds::rtps::core::SubmessageHeader&& _submsgHeader)
{
    m_submsgHeader = std::move(_submsgHeader);
}

/*!
 * @brief This function returns a constant reference to member submsgHeader
 * @return Constant reference to member submsgHeader
 */
const eprosima::fastdds::rtps::core::SubmessageHeader& InfoDestinationSubmessage::submsgHeader() const
{
    return m_submsgHeader;
}

/*!
 * @brief This function returns a reference to member submsgHeader
 * @return Reference to member submsgHeader
 */
eprosima::fastdds::rtps::core::SubmessageHeader& InfoDestinationSubmessage::submsgHeader()
{
    return m_submsgHeader;
}


/*!
 * @brief This function copies the value in member guidPrefix
 * @param _guidPrefix New value to be copied in member guidPrefix
 */
void InfoDestinationSubmessage::guidPrefix(
        const eprosima::fastdds::rtps::core::detail::GuidPrefix_t& _guidPrefix)
{
    m_guidPrefix = _guidPrefix;
}

/*!
 * @brief This function moves the value in member guidPrefix
 * @param _guidPrefix New value to be moved in member guidPrefix
 */
void InfoDestinationSubmessage::guidPrefix(
        eprosima::fastdds::rtps::core::detail::GuidPrefix_t&& _guidPrefix)
{
    m_guidPrefix = std::move(_guidPrefix);
}

/*!
 * @brief This function returns a constant reference to member guidPrefix
 * @return Constant reference to member guidPrefix
 */
const eprosima::fastdds::rtps::core::detail::GuidPrefix_t& InfoDestinationSubmessage::guidPrefix() const
{
    return m_guidPrefix;
}

/*!
 * @brief This function returns a reference to member guidPrefix
 * @return Reference to member guidPrefix
 */
eprosima::fastdds::rtps::core::detail::GuidPrefix_t& InfoDestinationSubmessage::guidPrefix()
{
    return m_guidPrefix;
}




InfoSourceSubmessage::InfoSourceSubmessage()
{
    // Just to register all known types
    registercore_typesTypes();
}

InfoSourceSubmessage::~InfoSourceSubmessage()
{
}

InfoSourceSubmessage::InfoSourceSubmessage(
        const InfoSourceSubmessage& x)
{
    m_submsgHeader = x.m_submsgHeader;
    m_unused = x.m_unused;
    m_version = x.m_version;
    m_vendorId = x.m_vendorId;
    m_guidPrefix = x.m_guidPrefix;
}

InfoSourceSubmessage::InfoSourceSubmessage(
        InfoSourceSubmessage&& x) noexcept
{
    m_submsgHeader = std::move(x.m_submsgHeader);
    m_unused = x.m_unused;
    m_version = std::move(x.m_version);
    m_vendorId = std::move(x.m_vendorId);
    m_guidPrefix = std::move(x.m_guidPrefix);
}

InfoSourceSubmessage& InfoSourceSubmessage::operator =(
        const InfoSourceSubmessage& x)
{

    m_submsgHeader = x.m_submsgHeader;
    m_unused = x.m_unused;
    m_version = x.m_version;
    m_vendorId = x.m_vendorId;
    m_guidPrefix = x.m_guidPrefix;
    return *this;
}

InfoSourceSubmessage& InfoSourceSubmessage::operator =(
        InfoSourceSubmessage&& x) noexcept
{

    m_submsgHeader = std::move(x.m_submsgHeader);
    m_unused = x.m_unused;
    m_version = std::move(x.m_version);
    m_vendorId = std::move(x.m_vendorId);
    m_guidPrefix = std::move(x.m_guidPrefix);
    return *this;
}

bool InfoSourceSubmessage::operator ==(
        const InfoSourceSubmessage& x) const
{
    return (m_submsgHeader == x.m_submsgHeader &&
           m_unused == x.m_unused &&
           m_version == x.m_version &&
           m_vendorId == x.m_vendorId &&
           m_guidPrefix == x.m_guidPrefix);
}

bool InfoSourceSubmessage::operator !=(
        const InfoSourceSubmessage& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member submsgHeader
 * @param _submsgHeader New value to be copied in member submsgHeader
 */
void InfoSourceSubmessage::submsgHeader(
        const eprosima::fastdds::rtps::core::SubmessageHeader& _submsgHeader)
{
    m_submsgHeader = _submsgHeader;
}

/*!
 * @brief This function moves the value in member submsgHeader
 * @param _submsgHeader New value to be moved in member submsgHeader
 */
void InfoSourceSubmessage::submsgHeader(
        eprosima::fastdds::rtps::core::SubmessageHeader&& _submsgHeader)
{
    m_submsgHeader = std::move(_submsgHeader);
}

/*!
 * @brief This function returns a constant reference to member submsgHeader
 * @return Constant reference to member submsgHeader
 */
const eprosima::fastdds::rtps::core::SubmessageHeader& InfoSourceSubmessage::submsgHeader() const
{
    return m_submsgHeader;
}

/*!
 * @brief This function returns a reference to member submsgHeader
 * @return Reference to member submsgHeader
 */
eprosima::fastdds::rtps::core::SubmessageHeader& InfoSourceSubmessage::submsgHeader()
{
    return m_submsgHeader;
}


/*!
 * @brief This function sets a value in member unused
 * @param _unused New value for member unused
 */
void InfoSourceSubmessage::unused(
        int32_t _unused)
{
    m_unused = _unused;
}

/*!
 * @brief This function returns the value of member unused
 * @return Value of member unused
 */
int32_t InfoSourceSubmessage::unused() const
{
    return m_unused;
}

/*!
 * @brief This function returns a reference to member unused
 * @return Reference to member unused
 */
int32_t& InfoSourceSubmessage::unused()
{
    return m_unused;
}


/*!
 * @brief This function copies the value in member version
 * @param _version New value to be copied in member version
 */
void InfoSourceSubmessage::version(
        const eprosima::fastdds::rtps::core::detail::ProtocolVersion_t& _version)
{
    m_version = _version;
}

/*!
 * @brief This function moves the value in member version
 * @param _version New value to be moved in member version
 */
void InfoSourceSubmessage::version(
        eprosima::fastdds::rtps::core::detail::ProtocolVersion_t&& _version)
{
    m_version = std::move(_version);
}

/*!
 * @brief This function returns a constant reference to member version
 * @return Constant reference to member version
 */
const eprosima::fastdds::rtps::core::detail::ProtocolVersion_t& InfoSourceSubmessage::version() const
{
    return m_version;
}

/*!
 * @brief This function returns a reference to member version
 * @return Reference to member version
 */
eprosima::fastdds::rtps::core::detail::ProtocolVersion_t& InfoSourceSubmessage::version()
{
    return m_version;
}


/*!
 * @brief This function copies the value in member vendorId
 * @param _vendorId New value to be copied in member vendorId
 */
void InfoSourceSubmessage::vendorId(
        const eprosima::fastdds::rtps::core::detail::VendorId_t& _vendorId)
{
    m_vendorId = _vendorId;
}

/*!
 * @brief This function moves the value in member vendorId
 * @param _vendorId New value to be moved in member vendorId
 */
void InfoSourceSubmessage::vendorId(
        eprosima::fastdds::rtps::core::detail::VendorId_t&& _vendorId)
{
    m_vendorId = std::move(_vendorId);
}

/*!
 * @brief This function returns a constant reference to member vendorId
 * @return Constant reference to member vendorId
 */
const eprosima::fastdds::rtps::core::detail::VendorId_t& InfoSourceSubmessage::vendorId() const
{
    return m_vendorId;
}

/*!
 * @brief This function returns a reference to member vendorId
 * @return Reference to member vendorId
 */
eprosima::fastdds::rtps::core::detail::VendorId_t& InfoSourceSubmessage::vendorId()
{
    return m_vendorId;
}


/*!
 * @brief This function copies the value in member guidPrefix
 * @param _guidPrefix New value to be copied in member guidPrefix
 */
void InfoSourceSubmessage::guidPrefix(
        const eprosima::fastdds::rtps::core::detail::GuidPrefix_t& _guidPrefix)
{
    m_guidPrefix = _guidPrefix;
}

/*!
 * @brief This function moves the value in member guidPrefix
 * @param _guidPrefix New value to be moved in member guidPrefix
 */
void InfoSourceSubmessage::guidPrefix(
        eprosima::fastdds::rtps::core::detail::GuidPrefix_t&& _guidPrefix)
{
    m_guidPrefix = std::move(_guidPrefix);
}

/*!
 * @brief This function returns a constant reference to member guidPrefix
 * @return Constant reference to member guidPrefix
 */
const eprosima::fastdds::rtps::core::detail::GuidPrefix_t& InfoSourceSubmessage::guidPrefix() const
{
    return m_guidPrefix;
}

/*!
 * @brief This function returns a reference to member guidPrefix
 * @return Reference to member guidPrefix
 */
eprosima::fastdds::rtps::core::detail::GuidPrefix_t& InfoSourceSubmessage::guidPrefix()
{
    return m_guidPrefix;
}




InfoTimestampSubmessage::InfoTimestampSubmessage()
{
    // Just to register all known types
    registercore_typesTypes();
}

InfoTimestampSubmessage::~InfoTimestampSubmessage()
{
}

InfoTimestampSubmessage::InfoTimestampSubmessage(
        const InfoTimestampSubmessage& x)
{
    m_submsgHeader = x.m_submsgHeader;
    m_timestamp = x.m_timestamp;
}

InfoTimestampSubmessage::InfoTimestampSubmessage(
        InfoTimestampSubmessage&& x) noexcept
{
    m_submsgHeader = std::move(x.m_submsgHeader);
    m_timestamp = std::move(x.m_timestamp);
}

InfoTimestampSubmessage& InfoTimestampSubmessage::operator =(
        const InfoTimestampSubmessage& x)
{

    m_submsgHeader = x.m_submsgHeader;
    m_timestamp = x.m_timestamp;
    return *this;
}

InfoTimestampSubmessage& InfoTimestampSubmessage::operator =(
        InfoTimestampSubmessage&& x) noexcept
{

    m_submsgHeader = std::move(x.m_submsgHeader);
    m_timestamp = std::move(x.m_timestamp);
    return *this;
}

bool InfoTimestampSubmessage::operator ==(
        const InfoTimestampSubmessage& x) const
{
    return (m_submsgHeader == x.m_submsgHeader &&
           m_timestamp == x.m_timestamp);
}

bool InfoTimestampSubmessage::operator !=(
        const InfoTimestampSubmessage& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member submsgHeader
 * @param _submsgHeader New value to be copied in member submsgHeader
 */
void InfoTimestampSubmessage::submsgHeader(
        const eprosima::fastdds::rtps::core::SubmessageHeader& _submsgHeader)
{
    m_submsgHeader = _submsgHeader;
}

/*!
 * @brief This function moves the value in member submsgHeader
 * @param _submsgHeader New value to be moved in member submsgHeader
 */
void InfoTimestampSubmessage::submsgHeader(
        eprosima::fastdds::rtps::core::SubmessageHeader&& _submsgHeader)
{
    m_submsgHeader = std::move(_submsgHeader);
}

/*!
 * @brief This function returns a constant reference to member submsgHeader
 * @return Constant reference to member submsgHeader
 */
const eprosima::fastdds::rtps::core::SubmessageHeader& InfoTimestampSubmessage::submsgHeader() const
{
    return m_submsgHeader;
}

/*!
 * @brief This function returns a reference to member submsgHeader
 * @return Reference to member submsgHeader
 */
eprosima::fastdds::rtps::core::SubmessageHeader& InfoTimestampSubmessage::submsgHeader()
{
    return m_submsgHeader;
}


/*!
 * @brief This function copies the value in member timestamp
 * @param _timestamp New value to be copied in member timestamp
 */
void InfoTimestampSubmessage::timestamp(
        const eprosima::fastdds::rtps::core::detail::Timestamp& _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function moves the value in member timestamp
 * @param _timestamp New value to be moved in member timestamp
 */
void InfoTimestampSubmessage::timestamp(
        eprosima::fastdds::rtps::core::detail::Timestamp&& _timestamp)
{
    m_timestamp = std::move(_timestamp);
}

/*!
 * @brief This function returns a constant reference to member timestamp
 * @return Constant reference to member timestamp
 */
const eprosima::fastdds::rtps::core::detail::Timestamp& InfoTimestampSubmessage::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
eprosima::fastdds::rtps::core::detail::Timestamp& InfoTimestampSubmessage::timestamp()
{
    return m_timestamp;
}




Submessage::Submessage()
{
    m__d = eprosima::fastdds::rtps::core::RTPS_HE;
}

Submessage::~Submessage()
{
}

Submessage::Submessage(
        const Submessage& x)
{
    m__d = x.m__d;

    switch (m__d)
    {
        case eprosima::fastdds::rtps::core::HEARTBEAT:
            m_heartbeat_submsg = x.m_heartbeat_submsg;
            break;


        case eprosima::fastdds::rtps::core::INFO_TS:
            m_info_ts_submsg = x.m_info_ts_submsg;
            break;


        case eprosima::fastdds::rtps::core::INFO_SRC:
            m_info_src_submsg = x.m_info_src_submsg;
            break;


        case eprosima::fastdds::rtps::core::INFO_DST:
            m_info_dst_submsg = x.m_info_dst_submsg;
            break;


        default:
            m_unknown_submsg = x.m_unknown_submsg;

            break;
    }
}

Submessage::Submessage(
        Submessage&& x) noexcept
{
    m__d = x.m__d;

    switch (m__d)
    {
        case eprosima::fastdds::rtps::core::HEARTBEAT:
            m_heartbeat_submsg = std::move(x.m_heartbeat_submsg);

            break;


        case eprosima::fastdds::rtps::core::INFO_TS:
            m_info_ts_submsg = std::move(x.m_info_ts_submsg);

            break;


        case eprosima::fastdds::rtps::core::INFO_SRC:
            m_info_src_submsg = std::move(x.m_info_src_submsg);

            break;


        case eprosima::fastdds::rtps::core::INFO_DST:
            m_info_dst_submsg = std::move(x.m_info_dst_submsg);

            break;


        default:
            m_unknown_submsg = std::move(x.m_unknown_submsg);

            break;
    }
}

Submessage& Submessage::operator =(
        const Submessage& x)
{
    m__d = x.m__d;

    switch (m__d)
    {
        case eprosima::fastdds::rtps::core::HEARTBEAT:
            m_heartbeat_submsg = x.m_heartbeat_submsg;
            break;


        case eprosima::fastdds::rtps::core::INFO_TS:
            m_info_ts_submsg = x.m_info_ts_submsg;
            break;


        case eprosima::fastdds::rtps::core::INFO_SRC:
            m_info_src_submsg = x.m_info_src_submsg;
            break;


        case eprosima::fastdds::rtps::core::INFO_DST:
            m_info_dst_submsg = x.m_info_dst_submsg;
            break;


        default:
            m_unknown_submsg = x.m_unknown_submsg;

            break;
    }

    return *this;
}

Submessage& Submessage::operator =(
        Submessage&& x) noexcept
{
    m__d = x.m__d;

    switch (m__d)
    {
        case eprosima::fastdds::rtps::core::HEARTBEAT:
            m_heartbeat_submsg = std::move(x.m_heartbeat_submsg);

            break;


        case eprosima::fastdds::rtps::core::INFO_TS:
            m_info_ts_submsg = std::move(x.m_info_ts_submsg);

            break;


        case eprosima::fastdds::rtps::core::INFO_SRC:
            m_info_src_submsg = std::move(x.m_info_src_submsg);

            break;


        case eprosima::fastdds::rtps::core::INFO_DST:
            m_info_dst_submsg = std::move(x.m_info_dst_submsg);

            break;


        default:
            m_unknown_submsg = std::move(x.m_unknown_submsg);

            break;
    }

    return *this;
}

bool Submessage::operator ==(
        const Submessage& x) const
{
    if (m__d != x.m__d)
    {
        return false;
    }

    switch (m__d)
    {
        case eprosima::fastdds::rtps::core::HEARTBEAT:
            return (m_heartbeat_submsg == x.m_heartbeat_submsg);
            break;


        case eprosima::fastdds::rtps::core::INFO_TS:
            return (m_info_ts_submsg == x.m_info_ts_submsg);
            break;


        case eprosima::fastdds::rtps::core::INFO_SRC:
            return (m_info_src_submsg == x.m_info_src_submsg);
            break;


        case eprosima::fastdds::rtps::core::INFO_DST:
            return (m_info_dst_submsg == x.m_info_dst_submsg);
            break;


        default:
            return m_unknown_submsg == x.m_unknown_submsg;

            break;
    }
    return false;
}

bool Submessage::operator !=(
        const Submessage& x) const
{
    return !(*this == x);
}

void Submessage::_d(
        eprosima::fastdds::rtps::core::SubmessageKind __d)
{
    bool b = false;

    switch (m__d)
    {
        case eprosima::fastdds::rtps::core::HEARTBEAT:
            switch (__d)
            {
                case eprosima::fastdds::rtps::core::HEARTBEAT:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case eprosima::fastdds::rtps::core::INFO_TS:
            switch (__d)
            {
                case eprosima::fastdds::rtps::core::INFO_TS:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case eprosima::fastdds::rtps::core::INFO_SRC:
            switch (__d)
            {
                case eprosima::fastdds::rtps::core::INFO_SRC:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case eprosima::fastdds::rtps::core::INFO_DST:
            switch (__d)
            {
                case eprosima::fastdds::rtps::core::INFO_DST:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        default:
            b = true;
            switch (__d)
            {
                case eprosima::fastdds::rtps::core::HEARTBEAT:
                case eprosima::fastdds::rtps::core::INFO_TS:
                case eprosima::fastdds::rtps::core::INFO_SRC:
                case eprosima::fastdds::rtps::core::INFO_DST:
                    b = false;
                    break;
                default:
                    break;
            }
            break;

    }

    if (!b)
    {
        throw BadParamException("Discriminator doesn't correspond with the selected union member");
    }

    m__d = __d;
}

eprosima::fastdds::rtps::core::SubmessageKind Submessage::_d() const
{
    return m__d;
}

eprosima::fastdds::rtps::core::SubmessageKind& Submessage::_d()
{
    return m__d;
}

void Submessage::heartbeat_submsg(
        const eprosima::fastdds::rtps::core::HeartBeatSubmessage& _heartbeat_submsg)
{
    m_heartbeat_submsg = _heartbeat_submsg;
    m__d = eprosima::fastdds::rtps::core::HEARTBEAT;

}

void Submessage::heartbeat_submsg(
        eprosima::fastdds::rtps::core::HeartBeatSubmessage&& _heartbeat_submsg)
{
    m_heartbeat_submsg = std::move(_heartbeat_submsg);
    m__d = eprosima::fastdds::rtps::core::HEARTBEAT;

}

const eprosima::fastdds::rtps::core::HeartBeatSubmessage& Submessage::heartbeat_submsg() const
{
    bool b = false;

    switch (m__d)
    {
        case eprosima::fastdds::rtps::core::HEARTBEAT:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_heartbeat_submsg;
}

eprosima::fastdds::rtps::core::HeartBeatSubmessage& Submessage::heartbeat_submsg()
{
    bool b = false;

    switch (m__d)
    {
        case eprosima::fastdds::rtps::core::HEARTBEAT:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_heartbeat_submsg;
}


void Submessage::info_ts_submsg(
        const eprosima::fastdds::rtps::core::InfoTimestampSubmessage& _info_ts_submsg)
{
    m_info_ts_submsg = _info_ts_submsg;
    m__d = eprosima::fastdds::rtps::core::INFO_TS;

}

void Submessage::info_ts_submsg(
        eprosima::fastdds::rtps::core::InfoTimestampSubmessage&& _info_ts_submsg)
{
    m_info_ts_submsg = std::move(_info_ts_submsg);
    m__d = eprosima::fastdds::rtps::core::INFO_TS;

}

const eprosima::fastdds::rtps::core::InfoTimestampSubmessage& Submessage::info_ts_submsg() const
{
    bool b = false;

    switch (m__d)
    {
        case eprosima::fastdds::rtps::core::INFO_TS:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_info_ts_submsg;
}

eprosima::fastdds::rtps::core::InfoTimestampSubmessage& Submessage::info_ts_submsg()
{
    bool b = false;

    switch (m__d)
    {
        case eprosima::fastdds::rtps::core::INFO_TS:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_info_ts_submsg;
}


void Submessage::info_src_submsg(
        const eprosima::fastdds::rtps::core::InfoSourceSubmessage& _info_src_submsg)
{
    m_info_src_submsg = _info_src_submsg;
    m__d = eprosima::fastdds::rtps::core::INFO_SRC;

}

void Submessage::info_src_submsg(
        eprosima::fastdds::rtps::core::InfoSourceSubmessage&& _info_src_submsg)
{
    m_info_src_submsg = std::move(_info_src_submsg);
    m__d = eprosima::fastdds::rtps::core::INFO_SRC;

}

const eprosima::fastdds::rtps::core::InfoSourceSubmessage& Submessage::info_src_submsg() const
{
    bool b = false;

    switch (m__d)
    {
        case eprosima::fastdds::rtps::core::INFO_SRC:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_info_src_submsg;
}

eprosima::fastdds::rtps::core::InfoSourceSubmessage& Submessage::info_src_submsg()
{
    bool b = false;

    switch (m__d)
    {
        case eprosima::fastdds::rtps::core::INFO_SRC:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_info_src_submsg;
}


void Submessage::info_dst_submsg(
        const eprosima::fastdds::rtps::core::InfoDestinationSubmessage& _info_dst_submsg)
{
    m_info_dst_submsg = _info_dst_submsg;
    m__d = eprosima::fastdds::rtps::core::INFO_DST;

}

void Submessage::info_dst_submsg(
        eprosima::fastdds::rtps::core::InfoDestinationSubmessage&& _info_dst_submsg)
{
    m_info_dst_submsg = std::move(_info_dst_submsg);
    m__d = eprosima::fastdds::rtps::core::INFO_DST;

}

const eprosima::fastdds::rtps::core::InfoDestinationSubmessage& Submessage::info_dst_submsg() const
{
    bool b = false;

    switch (m__d)
    {
        case eprosima::fastdds::rtps::core::INFO_DST:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_info_dst_submsg;
}

eprosima::fastdds::rtps::core::InfoDestinationSubmessage& Submessage::info_dst_submsg()
{
    bool b = false;

    switch (m__d)
    {
        case eprosima::fastdds::rtps::core::INFO_DST:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_info_dst_submsg;
}


void Submessage::unknown_submsg(
        const eprosima::fastdds::rtps::core::SubmessageHeader& _unknown_submsg)
{
    m_unknown_submsg = _unknown_submsg;
    m__d = eprosima::fastdds::rtps::core::RTPS_HE;

}

void Submessage::unknown_submsg(
        eprosima::fastdds::rtps::core::SubmessageHeader&& _unknown_submsg)
{
    m_unknown_submsg = std::move(_unknown_submsg);
    m__d = eprosima::fastdds::rtps::core::RTPS_HE;

}

const eprosima::fastdds::rtps::core::SubmessageHeader& Submessage::unknown_submsg() const
{
    bool b = true;

    switch (m__d)
    {
        case eprosima::fastdds::rtps::core::HEARTBEAT:
        case eprosima::fastdds::rtps::core::INFO_TS:
        case eprosima::fastdds::rtps::core::INFO_SRC:
        case eprosima::fastdds::rtps::core::INFO_DST:
            b = false;
            break;
        default:
            break;
    }
    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_unknown_submsg;
}

eprosima::fastdds::rtps::core::SubmessageHeader& Submessage::unknown_submsg()
{
    bool b = true;

    switch (m__d)
    {
        case eprosima::fastdds::rtps::core::HEARTBEAT:
        case eprosima::fastdds::rtps::core::INFO_TS:
        case eprosima::fastdds::rtps::core::INFO_SRC:
        case eprosima::fastdds::rtps::core::INFO_DST:
            b = false;
            break;
        default:
            break;
    }
    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_unknown_submsg;
}






RTPSMessage::RTPSMessage()
{
    // Just to register all known types
    registercore_typesTypes();
}

RTPSMessage::~RTPSMessage()
{
}

RTPSMessage::RTPSMessage(
        const RTPSMessage& x)
{
    m_msg_header = x.m_msg_header;
    m_submessages = x.m_submessages;
}

RTPSMessage::RTPSMessage(
        RTPSMessage&& x) noexcept
{
    m_msg_header = std::move(x.m_msg_header);
    m_submessages = std::move(x.m_submessages);
}

RTPSMessage& RTPSMessage::operator =(
        const RTPSMessage& x)
{

    m_msg_header = x.m_msg_header;
    m_submessages = x.m_submessages;
    return *this;
}

RTPSMessage& RTPSMessage::operator =(
        RTPSMessage&& x) noexcept
{

    m_msg_header = std::move(x.m_msg_header);
    m_submessages = std::move(x.m_submessages);
    return *this;
}

bool RTPSMessage::operator ==(
        const RTPSMessage& x) const
{
    return (m_msg_header == x.m_msg_header &&
           m_submessages == x.m_submessages);
}

bool RTPSMessage::operator !=(
        const RTPSMessage& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member msg_header
 * @param _msg_header New value to be copied in member msg_header
 */
void RTPSMessage::msg_header(
        const eprosima::fastdds::rtps::core::Header& _msg_header)
{
    m_msg_header = _msg_header;
}

/*!
 * @brief This function moves the value in member msg_header
 * @param _msg_header New value to be moved in member msg_header
 */
void RTPSMessage::msg_header(
        eprosima::fastdds::rtps::core::Header&& _msg_header)
{
    m_msg_header = std::move(_msg_header);
}

/*!
 * @brief This function returns a constant reference to member msg_header
 * @return Constant reference to member msg_header
 */
const eprosima::fastdds::rtps::core::Header& RTPSMessage::msg_header() const
{
    return m_msg_header;
}

/*!
 * @brief This function returns a reference to member msg_header
 * @return Reference to member msg_header
 */
eprosima::fastdds::rtps::core::Header& RTPSMessage::msg_header()
{
    return m_msg_header;
}


/*!
 * @brief This function copies the value in member submessages
 * @param _submessages New value to be copied in member submessages
 */
void RTPSMessage::submessages(
        const std::vector<eprosima::fastdds::rtps::core::Submessage>& _submessages)
{
    m_submessages = _submessages;
}

/*!
 * @brief This function moves the value in member submessages
 * @param _submessages New value to be moved in member submessages
 */
void RTPSMessage::submessages(
        std::vector<eprosima::fastdds::rtps::core::Submessage>&& _submessages)
{
    m_submessages = std::move(_submessages);
}

/*!
 * @brief This function returns a constant reference to member submessages
 * @return Constant reference to member submessages
 */
const std::vector<eprosima::fastdds::rtps::core::Submessage>& RTPSMessage::submessages() const
{
    return m_submessages;
}

/*!
 * @brief This function returns a reference to member submessages
 * @return Reference to member submessages
 */
std::vector<eprosima::fastdds::rtps::core::Submessage>& RTPSMessage::submessages()
{
    return m_submessages;
}




} // namespace core


} // namespace rtps


} // namespace fastdds


} // namespace eprosima
// Include auxiliary functions like for serializing/deserializing.
#include "core_typesCdrAux.ipp"

