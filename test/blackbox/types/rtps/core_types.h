// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file core_types.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_EPROSIMA_FASTDDS_RTPS_CORE_CORE_TYPES_H_
#define _FAST_DDS_GENERATED_EPROSIMA_FASTDDS_RTPS_CORE_CORE_TYPES_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>



#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(CORE_TYPES_SOURCE)
#define CORE_TYPES_DllAPI __declspec( dllexport )
#else
#define CORE_TYPES_DllAPI __declspec( dllimport )
#endif // CORE_TYPES_SOURCE
#else
#define CORE_TYPES_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define CORE_TYPES_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima



namespace eprosima {

namespace fastdds {

namespace rtps {

namespace core {

namespace detail {



/*!
 * @brief This class represents the structure EntityId_t defined by the user in the IDL file.
 * @ingroup core_types
 */
class EntityId_t
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport EntityId_t();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~EntityId_t();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::fastdds::rtps::core::detail::EntityId_t that will be copied.
     */
    eProsima_user_DllExport EntityId_t(
            const EntityId_t& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::fastdds::rtps::core::detail::EntityId_t that will be copied.
     */
    eProsima_user_DllExport EntityId_t(
            EntityId_t&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::fastdds::rtps::core::detail::EntityId_t that will be copied.
     */
    eProsima_user_DllExport EntityId_t& operator =(
            const EntityId_t& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::fastdds::rtps::core::detail::EntityId_t that will be copied.
     */
    eProsima_user_DllExport EntityId_t& operator =(
            EntityId_t&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x eprosima::fastdds::rtps::core::detail::EntityId_t object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const EntityId_t& x) const;

    /*!
     * @brief Comparison operator.
     * @param x eprosima::fastdds::rtps::core::detail::EntityId_t object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const EntityId_t& x) const;

    /*!
     * @brief This function copies the value in member value
     * @param _value New value to be copied in member value
     */
    eProsima_user_DllExport void value(
            const std::array<uint8_t, 4>& _value);

    /*!
     * @brief This function moves the value in member value
     * @param _value New value to be moved in member value
     */
    eProsima_user_DllExport void value(
            std::array<uint8_t, 4>&& _value);

    /*!
     * @brief This function returns a constant reference to member value
     * @return Constant reference to member value
     */
    eProsima_user_DllExport const std::array<uint8_t, 4>& value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport std::array<uint8_t, 4>& value();

private:

    std::array<uint8_t, 4> m_value{0};

};


/*!
 * @brief This class represents the structure ProtocolVersion_t defined by the user in the IDL file.
 * @ingroup core_types
 */
class ProtocolVersion_t
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ProtocolVersion_t();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ProtocolVersion_t();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::fastdds::rtps::core::detail::ProtocolVersion_t that will be copied.
     */
    eProsima_user_DllExport ProtocolVersion_t(
            const ProtocolVersion_t& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::fastdds::rtps::core::detail::ProtocolVersion_t that will be copied.
     */
    eProsima_user_DllExport ProtocolVersion_t(
            ProtocolVersion_t&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::fastdds::rtps::core::detail::ProtocolVersion_t that will be copied.
     */
    eProsima_user_DllExport ProtocolVersion_t& operator =(
            const ProtocolVersion_t& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::fastdds::rtps::core::detail::ProtocolVersion_t that will be copied.
     */
    eProsima_user_DllExport ProtocolVersion_t& operator =(
            ProtocolVersion_t&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x eprosima::fastdds::rtps::core::detail::ProtocolVersion_t object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ProtocolVersion_t& x) const;

    /*!
     * @brief Comparison operator.
     * @param x eprosima::fastdds::rtps::core::detail::ProtocolVersion_t object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ProtocolVersion_t& x) const;

    /*!
     * @brief This function sets a value in member major
     * @param _major New value for member major
     */
    eProsima_user_DllExport void major(
            uint8_t _major);

    /*!
     * @brief This function returns the value of member major
     * @return Value of member major
     */
    eProsima_user_DllExport uint8_t major() const;

    /*!
     * @brief This function returns a reference to member major
     * @return Reference to member major
     */
    eProsima_user_DllExport uint8_t& major();


    /*!
     * @brief This function sets a value in member minor
     * @param _minor New value for member minor
     */
    eProsima_user_DllExport void minor(
            uint8_t _minor);

    /*!
     * @brief This function returns the value of member minor
     * @return Value of member minor
     */
    eProsima_user_DllExport uint8_t minor() const;

    /*!
     * @brief This function returns a reference to member minor
     * @return Reference to member minor
     */
    eProsima_user_DllExport uint8_t& minor();

private:

    uint8_t m_major{0};
    uint8_t m_minor{0};

};


/*!
 * @brief This class represents the structure VendorId_t defined by the user in the IDL file.
 * @ingroup core_types
 */
class VendorId_t
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport VendorId_t();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~VendorId_t();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::fastdds::rtps::core::detail::VendorId_t that will be copied.
     */
    eProsima_user_DllExport VendorId_t(
            const VendorId_t& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::fastdds::rtps::core::detail::VendorId_t that will be copied.
     */
    eProsima_user_DllExport VendorId_t(
            VendorId_t&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::fastdds::rtps::core::detail::VendorId_t that will be copied.
     */
    eProsima_user_DllExport VendorId_t& operator =(
            const VendorId_t& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::fastdds::rtps::core::detail::VendorId_t that will be copied.
     */
    eProsima_user_DllExport VendorId_t& operator =(
            VendorId_t&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x eprosima::fastdds::rtps::core::detail::VendorId_t object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const VendorId_t& x) const;

    /*!
     * @brief Comparison operator.
     * @param x eprosima::fastdds::rtps::core::detail::VendorId_t object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const VendorId_t& x) const;

    /*!
     * @brief This function copies the value in member vendorId
     * @param _vendorId New value to be copied in member vendorId
     */
    eProsima_user_DllExport void vendorId(
            const std::array<uint8_t, 2>& _vendorId);

    /*!
     * @brief This function moves the value in member vendorId
     * @param _vendorId New value to be moved in member vendorId
     */
    eProsima_user_DllExport void vendorId(
            std::array<uint8_t, 2>&& _vendorId);

    /*!
     * @brief This function returns a constant reference to member vendorId
     * @return Constant reference to member vendorId
     */
    eProsima_user_DllExport const std::array<uint8_t, 2>& vendorId() const;

    /*!
     * @brief This function returns a reference to member vendorId
     * @return Reference to member vendorId
     */
    eProsima_user_DllExport std::array<uint8_t, 2>& vendorId();

private:

    std::array<uint8_t, 2> m_vendorId{0};

};


/*!
 * @brief This class represents the structure GuidPrefix_t defined by the user in the IDL file.
 * @ingroup core_types
 */
class GuidPrefix_t
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport GuidPrefix_t();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~GuidPrefix_t();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::fastdds::rtps::core::detail::GuidPrefix_t that will be copied.
     */
    eProsima_user_DllExport GuidPrefix_t(
            const GuidPrefix_t& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::fastdds::rtps::core::detail::GuidPrefix_t that will be copied.
     */
    eProsima_user_DllExport GuidPrefix_t(
            GuidPrefix_t&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::fastdds::rtps::core::detail::GuidPrefix_t that will be copied.
     */
    eProsima_user_DllExport GuidPrefix_t& operator =(
            const GuidPrefix_t& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::fastdds::rtps::core::detail::GuidPrefix_t that will be copied.
     */
    eProsima_user_DllExport GuidPrefix_t& operator =(
            GuidPrefix_t&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x eprosima::fastdds::rtps::core::detail::GuidPrefix_t object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const GuidPrefix_t& x) const;

    /*!
     * @brief Comparison operator.
     * @param x eprosima::fastdds::rtps::core::detail::GuidPrefix_t object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const GuidPrefix_t& x) const;

    /*!
     * @brief This function copies the value in member value
     * @param _value New value to be copied in member value
     */
    eProsima_user_DllExport void value(
            const std::array<uint8_t, 12>& _value);

    /*!
     * @brief This function moves the value in member value
     * @param _value New value to be moved in member value
     */
    eProsima_user_DllExport void value(
            std::array<uint8_t, 12>&& _value);

    /*!
     * @brief This function returns a constant reference to member value
     * @return Constant reference to member value
     */
    eProsima_user_DllExport const std::array<uint8_t, 12>& value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport std::array<uint8_t, 12>& value();

private:

    std::array<uint8_t, 12> m_value{0};

};


/*!
 * @brief This class represents the structure GUID_t defined by the user in the IDL file.
 * @ingroup core_types
 */
class GUID_t
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport GUID_t();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~GUID_t();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::fastdds::rtps::core::detail::GUID_t that will be copied.
     */
    eProsima_user_DllExport GUID_t(
            const GUID_t& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::fastdds::rtps::core::detail::GUID_t that will be copied.
     */
    eProsima_user_DllExport GUID_t(
            GUID_t&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::fastdds::rtps::core::detail::GUID_t that will be copied.
     */
    eProsima_user_DllExport GUID_t& operator =(
            const GUID_t& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::fastdds::rtps::core::detail::GUID_t that will be copied.
     */
    eProsima_user_DllExport GUID_t& operator =(
            GUID_t&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x eprosima::fastdds::rtps::core::detail::GUID_t object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const GUID_t& x) const;

    /*!
     * @brief Comparison operator.
     * @param x eprosima::fastdds::rtps::core::detail::GUID_t object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const GUID_t& x) const;

    /*!
     * @brief This function copies the value in member guidPrefix
     * @param _guidPrefix New value to be copied in member guidPrefix
     */
    eProsima_user_DllExport void guidPrefix(
            const eprosima::fastdds::rtps::core::detail::GuidPrefix_t& _guidPrefix);

    /*!
     * @brief This function moves the value in member guidPrefix
     * @param _guidPrefix New value to be moved in member guidPrefix
     */
    eProsima_user_DllExport void guidPrefix(
            eprosima::fastdds::rtps::core::detail::GuidPrefix_t&& _guidPrefix);

    /*!
     * @brief This function returns a constant reference to member guidPrefix
     * @return Constant reference to member guidPrefix
     */
    eProsima_user_DllExport const eprosima::fastdds::rtps::core::detail::GuidPrefix_t& guidPrefix() const;

    /*!
     * @brief This function returns a reference to member guidPrefix
     * @return Reference to member guidPrefix
     */
    eProsima_user_DllExport eprosima::fastdds::rtps::core::detail::GuidPrefix_t& guidPrefix();


    /*!
     * @brief This function copies the value in member entityId
     * @param _entityId New value to be copied in member entityId
     */
    eProsima_user_DllExport void entityId(
            const eprosima::fastdds::rtps::core::detail::EntityId_t& _entityId);

    /*!
     * @brief This function moves the value in member entityId
     * @param _entityId New value to be moved in member entityId
     */
    eProsima_user_DllExport void entityId(
            eprosima::fastdds::rtps::core::detail::EntityId_t&& _entityId);

    /*!
     * @brief This function returns a constant reference to member entityId
     * @return Constant reference to member entityId
     */
    eProsima_user_DllExport const eprosima::fastdds::rtps::core::detail::EntityId_t& entityId() const;

    /*!
     * @brief This function returns a reference to member entityId
     * @return Reference to member entityId
     */
    eProsima_user_DllExport eprosima::fastdds::rtps::core::detail::EntityId_t& entityId();

private:

    eprosima::fastdds::rtps::core::detail::GuidPrefix_t m_guidPrefix;
    eprosima::fastdds::rtps::core::detail::EntityId_t m_entityId;

};


/*!
 * @brief This class represents the structure SequenceNumber_t defined by the user in the IDL file.
 * @ingroup core_types
 */
class SequenceNumber_t
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SequenceNumber_t();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SequenceNumber_t();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::fastdds::rtps::core::detail::SequenceNumber_t that will be copied.
     */
    eProsima_user_DllExport SequenceNumber_t(
            const SequenceNumber_t& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::fastdds::rtps::core::detail::SequenceNumber_t that will be copied.
     */
    eProsima_user_DllExport SequenceNumber_t(
            SequenceNumber_t&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::fastdds::rtps::core::detail::SequenceNumber_t that will be copied.
     */
    eProsima_user_DllExport SequenceNumber_t& operator =(
            const SequenceNumber_t& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::fastdds::rtps::core::detail::SequenceNumber_t that will be copied.
     */
    eProsima_user_DllExport SequenceNumber_t& operator =(
            SequenceNumber_t&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x eprosima::fastdds::rtps::core::detail::SequenceNumber_t object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SequenceNumber_t& x) const;

    /*!
     * @brief Comparison operator.
     * @param x eprosima::fastdds::rtps::core::detail::SequenceNumber_t object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SequenceNumber_t& x) const;

    /*!
     * @brief This function sets a value in member high
     * @param _high New value for member high
     */
    eProsima_user_DllExport void high(
            int32_t _high);

    /*!
     * @brief This function returns the value of member high
     * @return Value of member high
     */
    eProsima_user_DllExport int32_t high() const;

    /*!
     * @brief This function returns a reference to member high
     * @return Reference to member high
     */
    eProsima_user_DllExport int32_t& high();


    /*!
     * @brief This function sets a value in member low
     * @param _low New value for member low
     */
    eProsima_user_DllExport void low(
            uint32_t _low);

    /*!
     * @brief This function returns the value of member low
     * @return Value of member low
     */
    eProsima_user_DllExport uint32_t low() const;

    /*!
     * @brief This function returns a reference to member low
     * @return Reference to member low
     */
    eProsima_user_DllExport uint32_t& low();

private:

    int32_t m_high{0};
    uint32_t m_low{0};

};


/*!
 * @brief This class represents the structure Count_t defined by the user in the IDL file.
 * @ingroup core_types
 */
class Count_t
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Count_t();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Count_t();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::fastdds::rtps::core::detail::Count_t that will be copied.
     */
    eProsima_user_DllExport Count_t(
            const Count_t& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::fastdds::rtps::core::detail::Count_t that will be copied.
     */
    eProsima_user_DllExport Count_t(
            Count_t&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::fastdds::rtps::core::detail::Count_t that will be copied.
     */
    eProsima_user_DllExport Count_t& operator =(
            const Count_t& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::fastdds::rtps::core::detail::Count_t that will be copied.
     */
    eProsima_user_DllExport Count_t& operator =(
            Count_t&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x eprosima::fastdds::rtps::core::detail::Count_t object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Count_t& x) const;

    /*!
     * @brief Comparison operator.
     * @param x eprosima::fastdds::rtps::core::detail::Count_t object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Count_t& x) const;

    /*!
     * @brief This function sets a value in member value
     * @param _value New value for member value
     */
    eProsima_user_DllExport void value(
            int32_t _value);

    /*!
     * @brief This function returns the value of member value
     * @return Value of member value
     */
    eProsima_user_DllExport int32_t value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport int32_t& value();

private:

    int32_t m_value{0};

};


/*!
 * @brief This class represents the structure Time_t defined by the user in the IDL file.
 * @ingroup core_types
 */
class Time_t
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Time_t();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Time_t();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::fastdds::rtps::core::detail::Time_t that will be copied.
     */
    eProsima_user_DllExport Time_t(
            const Time_t& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::fastdds::rtps::core::detail::Time_t that will be copied.
     */
    eProsima_user_DllExport Time_t(
            Time_t&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::fastdds::rtps::core::detail::Time_t that will be copied.
     */
    eProsima_user_DllExport Time_t& operator =(
            const Time_t& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::fastdds::rtps::core::detail::Time_t that will be copied.
     */
    eProsima_user_DllExport Time_t& operator =(
            Time_t&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x eprosima::fastdds::rtps::core::detail::Time_t object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Time_t& x) const;

    /*!
     * @brief Comparison operator.
     * @param x eprosima::fastdds::rtps::core::detail::Time_t object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Time_t& x) const;

    /*!
     * @brief This function sets a value in member seconds
     * @param _seconds New value for member seconds
     */
    eProsima_user_DllExport void seconds(
            uint32_t _seconds);

    /*!
     * @brief This function returns the value of member seconds
     * @return Value of member seconds
     */
    eProsima_user_DllExport uint32_t seconds() const;

    /*!
     * @brief This function returns a reference to member seconds
     * @return Reference to member seconds
     */
    eProsima_user_DllExport uint32_t& seconds();


    /*!
     * @brief This function sets a value in member fraction
     * @param _fraction New value for member fraction
     */
    eProsima_user_DllExport void fraction(
            uint32_t _fraction);

    /*!
     * @brief This function returns the value of member fraction
     * @return Value of member fraction
     */
    eProsima_user_DllExport uint32_t fraction() const;

    /*!
     * @brief This function returns a reference to member fraction
     * @return Reference to member fraction
     */
    eProsima_user_DllExport uint32_t& fraction();

private:

    uint32_t m_seconds{0};
    uint32_t m_fraction{0};

};
typedef eprosima::fastdds::rtps::core::detail::Time_t Timestamp;


} // namespace detail


/*!
 * @brief This class represents the structure Header defined by the user in the IDL file.
 * @ingroup core_types
 */
class Header
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Header();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Header();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::fastdds::rtps::core::Header that will be copied.
     */
    eProsima_user_DllExport Header(
            const Header& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::fastdds::rtps::core::Header that will be copied.
     */
    eProsima_user_DllExport Header(
            Header&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::fastdds::rtps::core::Header that will be copied.
     */
    eProsima_user_DllExport Header& operator =(
            const Header& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::fastdds::rtps::core::Header that will be copied.
     */
    eProsima_user_DllExport Header& operator =(
            Header&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x eprosima::fastdds::rtps::core::Header object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Header& x) const;

    /*!
     * @brief Comparison operator.
     * @param x eprosima::fastdds::rtps::core::Header object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Header& x) const;

    /*!
     * @brief This function copies the value in member prefix
     * @param _prefix New value to be copied in member prefix
     */
    eProsima_user_DllExport void prefix(
            const std::array<uint8_t, 4>& _prefix);

    /*!
     * @brief This function moves the value in member prefix
     * @param _prefix New value to be moved in member prefix
     */
    eProsima_user_DllExport void prefix(
            std::array<uint8_t, 4>&& _prefix);

    /*!
     * @brief This function returns a constant reference to member prefix
     * @return Constant reference to member prefix
     */
    eProsima_user_DllExport const std::array<uint8_t, 4>& prefix() const;

    /*!
     * @brief This function returns a reference to member prefix
     * @return Reference to member prefix
     */
    eProsima_user_DllExport std::array<uint8_t, 4>& prefix();


    /*!
     * @brief This function copies the value in member version
     * @param _version New value to be copied in member version
     */
    eProsima_user_DllExport void version(
            const eprosima::fastdds::rtps::core::detail::ProtocolVersion_t& _version);

    /*!
     * @brief This function moves the value in member version
     * @param _version New value to be moved in member version
     */
    eProsima_user_DllExport void version(
            eprosima::fastdds::rtps::core::detail::ProtocolVersion_t&& _version);

    /*!
     * @brief This function returns a constant reference to member version
     * @return Constant reference to member version
     */
    eProsima_user_DllExport const eprosima::fastdds::rtps::core::detail::ProtocolVersion_t& version() const;

    /*!
     * @brief This function returns a reference to member version
     * @return Reference to member version
     */
    eProsima_user_DllExport eprosima::fastdds::rtps::core::detail::ProtocolVersion_t& version();


    /*!
     * @brief This function copies the value in member vendorId
     * @param _vendorId New value to be copied in member vendorId
     */
    eProsima_user_DllExport void vendorId(
            const eprosima::fastdds::rtps::core::detail::VendorId_t& _vendorId);

    /*!
     * @brief This function moves the value in member vendorId
     * @param _vendorId New value to be moved in member vendorId
     */
    eProsima_user_DllExport void vendorId(
            eprosima::fastdds::rtps::core::detail::VendorId_t&& _vendorId);

    /*!
     * @brief This function returns a constant reference to member vendorId
     * @return Constant reference to member vendorId
     */
    eProsima_user_DllExport const eprosima::fastdds::rtps::core::detail::VendorId_t& vendorId() const;

    /*!
     * @brief This function returns a reference to member vendorId
     * @return Reference to member vendorId
     */
    eProsima_user_DllExport eprosima::fastdds::rtps::core::detail::VendorId_t& vendorId();


    /*!
     * @brief This function copies the value in member guidPrefix
     * @param _guidPrefix New value to be copied in member guidPrefix
     */
    eProsima_user_DllExport void guidPrefix(
            const eprosima::fastdds::rtps::core::detail::GuidPrefix_t& _guidPrefix);

    /*!
     * @brief This function moves the value in member guidPrefix
     * @param _guidPrefix New value to be moved in member guidPrefix
     */
    eProsima_user_DllExport void guidPrefix(
            eprosima::fastdds::rtps::core::detail::GuidPrefix_t&& _guidPrefix);

    /*!
     * @brief This function returns a constant reference to member guidPrefix
     * @return Constant reference to member guidPrefix
     */
    eProsima_user_DllExport const eprosima::fastdds::rtps::core::detail::GuidPrefix_t& guidPrefix() const;

    /*!
     * @brief This function returns a reference to member guidPrefix
     * @return Reference to member guidPrefix
     */
    eProsima_user_DllExport eprosima::fastdds::rtps::core::detail::GuidPrefix_t& guidPrefix();

private:

    std::array<uint8_t, 4> m_prefix{0};
    eprosima::fastdds::rtps::core::detail::ProtocolVersion_t m_version;
    eprosima::fastdds::rtps::core::detail::VendorId_t m_vendorId;
    eprosima::fastdds::rtps::core::detail::GuidPrefix_t m_guidPrefix;

};


/*!
 * @brief This class represents the structure SubmessageHeader defined by the user in the IDL file.
 * @ingroup core_types
 */
class SubmessageHeader
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SubmessageHeader();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SubmessageHeader();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::fastdds::rtps::core::SubmessageHeader that will be copied.
     */
    eProsima_user_DllExport SubmessageHeader(
            const SubmessageHeader& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::fastdds::rtps::core::SubmessageHeader that will be copied.
     */
    eProsima_user_DllExport SubmessageHeader(
            SubmessageHeader&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::fastdds::rtps::core::SubmessageHeader that will be copied.
     */
    eProsima_user_DllExport SubmessageHeader& operator =(
            const SubmessageHeader& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::fastdds::rtps::core::SubmessageHeader that will be copied.
     */
    eProsima_user_DllExport SubmessageHeader& operator =(
            SubmessageHeader&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x eprosima::fastdds::rtps::core::SubmessageHeader object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SubmessageHeader& x) const;

    /*!
     * @brief Comparison operator.
     * @param x eprosima::fastdds::rtps::core::SubmessageHeader object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SubmessageHeader& x) const;

    /*!
     * @brief This function sets a value in member submessageId
     * @param _submessageId New value for member submessageId
     */
    eProsima_user_DllExport void submessageId(
            uint8_t _submessageId);

    /*!
     * @brief This function returns the value of member submessageId
     * @return Value of member submessageId
     */
    eProsima_user_DllExport uint8_t submessageId() const;

    /*!
     * @brief This function returns a reference to member submessageId
     * @return Reference to member submessageId
     */
    eProsima_user_DllExport uint8_t& submessageId();


    /*!
     * @brief This function sets a value in member flags
     * @param _flags New value for member flags
     */
    eProsima_user_DllExport void flags(
            uint8_t _flags);

    /*!
     * @brief This function returns the value of member flags
     * @return Value of member flags
     */
    eProsima_user_DllExport uint8_t flags() const;

    /*!
     * @brief This function returns a reference to member flags
     * @return Reference to member flags
     */
    eProsima_user_DllExport uint8_t& flags();


    /*!
     * @brief This function sets a value in member submessageLength
     * @param _submessageLength New value for member submessageLength
     */
    eProsima_user_DllExport void submessageLength(
            uint16_t _submessageLength);

    /*!
     * @brief This function returns the value of member submessageLength
     * @return Value of member submessageLength
     */
    eProsima_user_DllExport uint16_t submessageLength() const;

    /*!
     * @brief This function returns a reference to member submessageLength
     * @return Reference to member submessageLength
     */
    eProsima_user_DllExport uint16_t& submessageLength();

private:

    uint8_t m_submessageId{0};
    uint8_t m_flags{0};
    uint16_t m_submessageLength{0};

};
/*!
 * @brief This class represents the enumeration SubmessageKind defined by the user in the IDL file.
 * @ingroup core_types
 */
enum SubmessageKind : uint32_t
{
    RTPS_HE,
    PAD,
    ACKNACK,
    HEARTBEAT,
    GAP,
    INFO_TS,
    INFO_SRC,
    INFO_REPLY_IP4,
    INFO_DST,
    INFO_REPLY,
    NACK_FRAG,
    HEARTBEAT_FRAG,
    DATA,
    DATA_FRAG
};


/*!
 * @brief This class represents the structure HeartBeatSubmessage defined by the user in the IDL file.
 * @ingroup core_types
 */
class HeartBeatSubmessage
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport HeartBeatSubmessage();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~HeartBeatSubmessage();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::fastdds::rtps::core::HeartBeatSubmessage that will be copied.
     */
    eProsima_user_DllExport HeartBeatSubmessage(
            const HeartBeatSubmessage& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::fastdds::rtps::core::HeartBeatSubmessage that will be copied.
     */
    eProsima_user_DllExport HeartBeatSubmessage(
            HeartBeatSubmessage&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::fastdds::rtps::core::HeartBeatSubmessage that will be copied.
     */
    eProsima_user_DllExport HeartBeatSubmessage& operator =(
            const HeartBeatSubmessage& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::fastdds::rtps::core::HeartBeatSubmessage that will be copied.
     */
    eProsima_user_DllExport HeartBeatSubmessage& operator =(
            HeartBeatSubmessage&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x eprosima::fastdds::rtps::core::HeartBeatSubmessage object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const HeartBeatSubmessage& x) const;

    /*!
     * @brief Comparison operator.
     * @param x eprosima::fastdds::rtps::core::HeartBeatSubmessage object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const HeartBeatSubmessage& x) const;

    /*!
     * @brief This function copies the value in member submsgHeader
     * @param _submsgHeader New value to be copied in member submsgHeader
     */
    eProsima_user_DllExport void submsgHeader(
            const eprosima::fastdds::rtps::core::SubmessageHeader& _submsgHeader);

    /*!
     * @brief This function moves the value in member submsgHeader
     * @param _submsgHeader New value to be moved in member submsgHeader
     */
    eProsima_user_DllExport void submsgHeader(
            eprosima::fastdds::rtps::core::SubmessageHeader&& _submsgHeader);

    /*!
     * @brief This function returns a constant reference to member submsgHeader
     * @return Constant reference to member submsgHeader
     */
    eProsima_user_DllExport const eprosima::fastdds::rtps::core::SubmessageHeader& submsgHeader() const;

    /*!
     * @brief This function returns a reference to member submsgHeader
     * @return Reference to member submsgHeader
     */
    eProsima_user_DllExport eprosima::fastdds::rtps::core::SubmessageHeader& submsgHeader();


    /*!
     * @brief This function copies the value in member readerId
     * @param _readerId New value to be copied in member readerId
     */
    eProsima_user_DllExport void readerId(
            const eprosima::fastdds::rtps::core::detail::EntityId_t& _readerId);

    /*!
     * @brief This function moves the value in member readerId
     * @param _readerId New value to be moved in member readerId
     */
    eProsima_user_DllExport void readerId(
            eprosima::fastdds::rtps::core::detail::EntityId_t&& _readerId);

    /*!
     * @brief This function returns a constant reference to member readerId
     * @return Constant reference to member readerId
     */
    eProsima_user_DllExport const eprosima::fastdds::rtps::core::detail::EntityId_t& readerId() const;

    /*!
     * @brief This function returns a reference to member readerId
     * @return Reference to member readerId
     */
    eProsima_user_DllExport eprosima::fastdds::rtps::core::detail::EntityId_t& readerId();


    /*!
     * @brief This function copies the value in member writerId
     * @param _writerId New value to be copied in member writerId
     */
    eProsima_user_DllExport void writerId(
            const eprosima::fastdds::rtps::core::detail::EntityId_t& _writerId);

    /*!
     * @brief This function moves the value in member writerId
     * @param _writerId New value to be moved in member writerId
     */
    eProsima_user_DllExport void writerId(
            eprosima::fastdds::rtps::core::detail::EntityId_t&& _writerId);

    /*!
     * @brief This function returns a constant reference to member writerId
     * @return Constant reference to member writerId
     */
    eProsima_user_DllExport const eprosima::fastdds::rtps::core::detail::EntityId_t& writerId() const;

    /*!
     * @brief This function returns a reference to member writerId
     * @return Reference to member writerId
     */
    eProsima_user_DllExport eprosima::fastdds::rtps::core::detail::EntityId_t& writerId();


    /*!
     * @brief This function copies the value in member firstSN
     * @param _firstSN New value to be copied in member firstSN
     */
    eProsima_user_DllExport void firstSN(
            const eprosima::fastdds::rtps::core::detail::SequenceNumber_t& _firstSN);

    /*!
     * @brief This function moves the value in member firstSN
     * @param _firstSN New value to be moved in member firstSN
     */
    eProsima_user_DllExport void firstSN(
            eprosima::fastdds::rtps::core::detail::SequenceNumber_t&& _firstSN);

    /*!
     * @brief This function returns a constant reference to member firstSN
     * @return Constant reference to member firstSN
     */
    eProsima_user_DllExport const eprosima::fastdds::rtps::core::detail::SequenceNumber_t& firstSN() const;

    /*!
     * @brief This function returns a reference to member firstSN
     * @return Reference to member firstSN
     */
    eProsima_user_DllExport eprosima::fastdds::rtps::core::detail::SequenceNumber_t& firstSN();


    /*!
     * @brief This function copies the value in member lastSN
     * @param _lastSN New value to be copied in member lastSN
     */
    eProsima_user_DllExport void lastSN(
            const eprosima::fastdds::rtps::core::detail::SequenceNumber_t& _lastSN);

    /*!
     * @brief This function moves the value in member lastSN
     * @param _lastSN New value to be moved in member lastSN
     */
    eProsima_user_DllExport void lastSN(
            eprosima::fastdds::rtps::core::detail::SequenceNumber_t&& _lastSN);

    /*!
     * @brief This function returns a constant reference to member lastSN
     * @return Constant reference to member lastSN
     */
    eProsima_user_DllExport const eprosima::fastdds::rtps::core::detail::SequenceNumber_t& lastSN() const;

    /*!
     * @brief This function returns a reference to member lastSN
     * @return Reference to member lastSN
     */
    eProsima_user_DllExport eprosima::fastdds::rtps::core::detail::SequenceNumber_t& lastSN();


    /*!
     * @brief This function copies the value in member count
     * @param _count New value to be copied in member count
     */
    eProsima_user_DllExport void count(
            const eprosima::fastdds::rtps::core::detail::Count_t& _count);

    /*!
     * @brief This function moves the value in member count
     * @param _count New value to be moved in member count
     */
    eProsima_user_DllExport void count(
            eprosima::fastdds::rtps::core::detail::Count_t&& _count);

    /*!
     * @brief This function returns a constant reference to member count
     * @return Constant reference to member count
     */
    eProsima_user_DllExport const eprosima::fastdds::rtps::core::detail::Count_t& count() const;

    /*!
     * @brief This function returns a reference to member count
     * @return Reference to member count
     */
    eProsima_user_DllExport eprosima::fastdds::rtps::core::detail::Count_t& count();

private:

    eprosima::fastdds::rtps::core::SubmessageHeader m_submsgHeader;
    eprosima::fastdds::rtps::core::detail::EntityId_t m_readerId;
    eprosima::fastdds::rtps::core::detail::EntityId_t m_writerId;
    eprosima::fastdds::rtps::core::detail::SequenceNumber_t m_firstSN;
    eprosima::fastdds::rtps::core::detail::SequenceNumber_t m_lastSN;
    eprosima::fastdds::rtps::core::detail::Count_t m_count;

};


/*!
 * @brief This class represents the structure InfoDestinationSubmessage defined by the user in the IDL file.
 * @ingroup core_types
 */
class InfoDestinationSubmessage
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport InfoDestinationSubmessage();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~InfoDestinationSubmessage();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::fastdds::rtps::core::InfoDestinationSubmessage that will be copied.
     */
    eProsima_user_DllExport InfoDestinationSubmessage(
            const InfoDestinationSubmessage& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::fastdds::rtps::core::InfoDestinationSubmessage that will be copied.
     */
    eProsima_user_DllExport InfoDestinationSubmessage(
            InfoDestinationSubmessage&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::fastdds::rtps::core::InfoDestinationSubmessage that will be copied.
     */
    eProsima_user_DllExport InfoDestinationSubmessage& operator =(
            const InfoDestinationSubmessage& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::fastdds::rtps::core::InfoDestinationSubmessage that will be copied.
     */
    eProsima_user_DllExport InfoDestinationSubmessage& operator =(
            InfoDestinationSubmessage&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x eprosima::fastdds::rtps::core::InfoDestinationSubmessage object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const InfoDestinationSubmessage& x) const;

    /*!
     * @brief Comparison operator.
     * @param x eprosima::fastdds::rtps::core::InfoDestinationSubmessage object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const InfoDestinationSubmessage& x) const;

    /*!
     * @brief This function copies the value in member submsgHeader
     * @param _submsgHeader New value to be copied in member submsgHeader
     */
    eProsima_user_DllExport void submsgHeader(
            const eprosima::fastdds::rtps::core::SubmessageHeader& _submsgHeader);

    /*!
     * @brief This function moves the value in member submsgHeader
     * @param _submsgHeader New value to be moved in member submsgHeader
     */
    eProsima_user_DllExport void submsgHeader(
            eprosima::fastdds::rtps::core::SubmessageHeader&& _submsgHeader);

    /*!
     * @brief This function returns a constant reference to member submsgHeader
     * @return Constant reference to member submsgHeader
     */
    eProsima_user_DllExport const eprosima::fastdds::rtps::core::SubmessageHeader& submsgHeader() const;

    /*!
     * @brief This function returns a reference to member submsgHeader
     * @return Reference to member submsgHeader
     */
    eProsima_user_DllExport eprosima::fastdds::rtps::core::SubmessageHeader& submsgHeader();


    /*!
     * @brief This function copies the value in member guidPrefix
     * @param _guidPrefix New value to be copied in member guidPrefix
     */
    eProsima_user_DllExport void guidPrefix(
            const eprosima::fastdds::rtps::core::detail::GuidPrefix_t& _guidPrefix);

    /*!
     * @brief This function moves the value in member guidPrefix
     * @param _guidPrefix New value to be moved in member guidPrefix
     */
    eProsima_user_DllExport void guidPrefix(
            eprosima::fastdds::rtps::core::detail::GuidPrefix_t&& _guidPrefix);

    /*!
     * @brief This function returns a constant reference to member guidPrefix
     * @return Constant reference to member guidPrefix
     */
    eProsima_user_DllExport const eprosima::fastdds::rtps::core::detail::GuidPrefix_t& guidPrefix() const;

    /*!
     * @brief This function returns a reference to member guidPrefix
     * @return Reference to member guidPrefix
     */
    eProsima_user_DllExport eprosima::fastdds::rtps::core::detail::GuidPrefix_t& guidPrefix();

private:

    eprosima::fastdds::rtps::core::SubmessageHeader m_submsgHeader;
    eprosima::fastdds::rtps::core::detail::GuidPrefix_t m_guidPrefix;

};


/*!
 * @brief This class represents the structure InfoSourceSubmessage defined by the user in the IDL file.
 * @ingroup core_types
 */
class InfoSourceSubmessage
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport InfoSourceSubmessage();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~InfoSourceSubmessage();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::fastdds::rtps::core::InfoSourceSubmessage that will be copied.
     */
    eProsima_user_DllExport InfoSourceSubmessage(
            const InfoSourceSubmessage& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::fastdds::rtps::core::InfoSourceSubmessage that will be copied.
     */
    eProsima_user_DllExport InfoSourceSubmessage(
            InfoSourceSubmessage&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::fastdds::rtps::core::InfoSourceSubmessage that will be copied.
     */
    eProsima_user_DllExport InfoSourceSubmessage& operator =(
            const InfoSourceSubmessage& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::fastdds::rtps::core::InfoSourceSubmessage that will be copied.
     */
    eProsima_user_DllExport InfoSourceSubmessage& operator =(
            InfoSourceSubmessage&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x eprosima::fastdds::rtps::core::InfoSourceSubmessage object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const InfoSourceSubmessage& x) const;

    /*!
     * @brief Comparison operator.
     * @param x eprosima::fastdds::rtps::core::InfoSourceSubmessage object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const InfoSourceSubmessage& x) const;

    /*!
     * @brief This function copies the value in member submsgHeader
     * @param _submsgHeader New value to be copied in member submsgHeader
     */
    eProsima_user_DllExport void submsgHeader(
            const eprosima::fastdds::rtps::core::SubmessageHeader& _submsgHeader);

    /*!
     * @brief This function moves the value in member submsgHeader
     * @param _submsgHeader New value to be moved in member submsgHeader
     */
    eProsima_user_DllExport void submsgHeader(
            eprosima::fastdds::rtps::core::SubmessageHeader&& _submsgHeader);

    /*!
     * @brief This function returns a constant reference to member submsgHeader
     * @return Constant reference to member submsgHeader
     */
    eProsima_user_DllExport const eprosima::fastdds::rtps::core::SubmessageHeader& submsgHeader() const;

    /*!
     * @brief This function returns a reference to member submsgHeader
     * @return Reference to member submsgHeader
     */
    eProsima_user_DllExport eprosima::fastdds::rtps::core::SubmessageHeader& submsgHeader();


    /*!
     * @brief This function sets a value in member unused
     * @param _unused New value for member unused
     */
    eProsima_user_DllExport void unused(
            int32_t _unused);

    /*!
     * @brief This function returns the value of member unused
     * @return Value of member unused
     */
    eProsima_user_DllExport int32_t unused() const;

    /*!
     * @brief This function returns a reference to member unused
     * @return Reference to member unused
     */
    eProsima_user_DllExport int32_t& unused();


    /*!
     * @brief This function copies the value in member version
     * @param _version New value to be copied in member version
     */
    eProsima_user_DllExport void version(
            const eprosima::fastdds::rtps::core::detail::ProtocolVersion_t& _version);

    /*!
     * @brief This function moves the value in member version
     * @param _version New value to be moved in member version
     */
    eProsima_user_DllExport void version(
            eprosima::fastdds::rtps::core::detail::ProtocolVersion_t&& _version);

    /*!
     * @brief This function returns a constant reference to member version
     * @return Constant reference to member version
     */
    eProsima_user_DllExport const eprosima::fastdds::rtps::core::detail::ProtocolVersion_t& version() const;

    /*!
     * @brief This function returns a reference to member version
     * @return Reference to member version
     */
    eProsima_user_DllExport eprosima::fastdds::rtps::core::detail::ProtocolVersion_t& version();


    /*!
     * @brief This function copies the value in member vendorId
     * @param _vendorId New value to be copied in member vendorId
     */
    eProsima_user_DllExport void vendorId(
            const eprosima::fastdds::rtps::core::detail::VendorId_t& _vendorId);

    /*!
     * @brief This function moves the value in member vendorId
     * @param _vendorId New value to be moved in member vendorId
     */
    eProsima_user_DllExport void vendorId(
            eprosima::fastdds::rtps::core::detail::VendorId_t&& _vendorId);

    /*!
     * @brief This function returns a constant reference to member vendorId
     * @return Constant reference to member vendorId
     */
    eProsima_user_DllExport const eprosima::fastdds::rtps::core::detail::VendorId_t& vendorId() const;

    /*!
     * @brief This function returns a reference to member vendorId
     * @return Reference to member vendorId
     */
    eProsima_user_DllExport eprosima::fastdds::rtps::core::detail::VendorId_t& vendorId();


    /*!
     * @brief This function copies the value in member guidPrefix
     * @param _guidPrefix New value to be copied in member guidPrefix
     */
    eProsima_user_DllExport void guidPrefix(
            const eprosima::fastdds::rtps::core::detail::GuidPrefix_t& _guidPrefix);

    /*!
     * @brief This function moves the value in member guidPrefix
     * @param _guidPrefix New value to be moved in member guidPrefix
     */
    eProsima_user_DllExport void guidPrefix(
            eprosima::fastdds::rtps::core::detail::GuidPrefix_t&& _guidPrefix);

    /*!
     * @brief This function returns a constant reference to member guidPrefix
     * @return Constant reference to member guidPrefix
     */
    eProsima_user_DllExport const eprosima::fastdds::rtps::core::detail::GuidPrefix_t& guidPrefix() const;

    /*!
     * @brief This function returns a reference to member guidPrefix
     * @return Reference to member guidPrefix
     */
    eProsima_user_DllExport eprosima::fastdds::rtps::core::detail::GuidPrefix_t& guidPrefix();

private:

    eprosima::fastdds::rtps::core::SubmessageHeader m_submsgHeader;
    int32_t m_unused{0};
    eprosima::fastdds::rtps::core::detail::ProtocolVersion_t m_version;
    eprosima::fastdds::rtps::core::detail::VendorId_t m_vendorId;
    eprosima::fastdds::rtps::core::detail::GuidPrefix_t m_guidPrefix;

};


/*!
 * @brief This class represents the structure InfoTimestampSubmessage defined by the user in the IDL file.
 * @ingroup core_types
 */
class InfoTimestampSubmessage
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport InfoTimestampSubmessage();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~InfoTimestampSubmessage();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::fastdds::rtps::core::InfoTimestampSubmessage that will be copied.
     */
    eProsima_user_DllExport InfoTimestampSubmessage(
            const InfoTimestampSubmessage& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::fastdds::rtps::core::InfoTimestampSubmessage that will be copied.
     */
    eProsima_user_DllExport InfoTimestampSubmessage(
            InfoTimestampSubmessage&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::fastdds::rtps::core::InfoTimestampSubmessage that will be copied.
     */
    eProsima_user_DllExport InfoTimestampSubmessage& operator =(
            const InfoTimestampSubmessage& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::fastdds::rtps::core::InfoTimestampSubmessage that will be copied.
     */
    eProsima_user_DllExport InfoTimestampSubmessage& operator =(
            InfoTimestampSubmessage&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x eprosima::fastdds::rtps::core::InfoTimestampSubmessage object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const InfoTimestampSubmessage& x) const;

    /*!
     * @brief Comparison operator.
     * @param x eprosima::fastdds::rtps::core::InfoTimestampSubmessage object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const InfoTimestampSubmessage& x) const;

    /*!
     * @brief This function copies the value in member submsgHeader
     * @param _submsgHeader New value to be copied in member submsgHeader
     */
    eProsima_user_DllExport void submsgHeader(
            const eprosima::fastdds::rtps::core::SubmessageHeader& _submsgHeader);

    /*!
     * @brief This function moves the value in member submsgHeader
     * @param _submsgHeader New value to be moved in member submsgHeader
     */
    eProsima_user_DllExport void submsgHeader(
            eprosima::fastdds::rtps::core::SubmessageHeader&& _submsgHeader);

    /*!
     * @brief This function returns a constant reference to member submsgHeader
     * @return Constant reference to member submsgHeader
     */
    eProsima_user_DllExport const eprosima::fastdds::rtps::core::SubmessageHeader& submsgHeader() const;

    /*!
     * @brief This function returns a reference to member submsgHeader
     * @return Reference to member submsgHeader
     */
    eProsima_user_DllExport eprosima::fastdds::rtps::core::SubmessageHeader& submsgHeader();


    /*!
     * @brief This function copies the value in member timestamp
     * @param _timestamp New value to be copied in member timestamp
     */
    eProsima_user_DllExport void timestamp(
            const eprosima::fastdds::rtps::core::detail::Timestamp& _timestamp);

    /*!
     * @brief This function moves the value in member timestamp
     * @param _timestamp New value to be moved in member timestamp
     */
    eProsima_user_DllExport void timestamp(
            eprosima::fastdds::rtps::core::detail::Timestamp&& _timestamp);

    /*!
     * @brief This function returns a constant reference to member timestamp
     * @return Constant reference to member timestamp
     */
    eProsima_user_DllExport const eprosima::fastdds::rtps::core::detail::Timestamp& timestamp() const;

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport eprosima::fastdds::rtps::core::detail::Timestamp& timestamp();

private:

    eprosima::fastdds::rtps::core::SubmessageHeader m_submsgHeader;
    eprosima::fastdds::rtps::core::detail::Timestamp m_timestamp;

};


/*!
 * @brief This class represents the union Submessage defined by the user in the IDL file.
 * @ingroup core_types
 */
class Submessage
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Submessage();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Submessage();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::fastdds::rtps::core::Submessage that will be copied.
     */
    eProsima_user_DllExport Submessage(
            const Submessage& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::fastdds::rtps::core::Submessage that will be copied.
     */
    eProsima_user_DllExport Submessage(
            Submessage&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::fastdds::rtps::core::Submessage that will be copied.
     */
    eProsima_user_DllExport Submessage& operator =(
            const Submessage& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::fastdds::rtps::core::Submessage that will be copied.
     */
    eProsima_user_DllExport Submessage& operator =(
            Submessage&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x eprosima::fastdds::rtps::core::Submessage object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Submessage& x) const;

    /*!
     * @brief Comparison operator.
     * @param x eprosima::fastdds::rtps::core::Submessage object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Submessage& x) const;

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    eProsima_user_DllExport void _d(
            eprosima::fastdds::rtps::core::SubmessageKind __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eProsima_user_DllExport eprosima::fastdds::rtps::core::SubmessageKind _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    eProsima_user_DllExport eprosima::fastdds::rtps::core::SubmessageKind& _d();

    /*!
     * @brief This function copies the value in member heartbeat_submsg
     * @param _heartbeat_submsg New value to be copied in member heartbeat_submsg
     */
    eProsima_user_DllExport void heartbeat_submsg(
            const eprosima::fastdds::rtps::core::HeartBeatSubmessage& _heartbeat_submsg);

    /*!
     * @brief This function moves the value in member heartbeat_submsg
     * @param _heartbeat_submsg New value to be moved in member heartbeat_submsg
     */
    eProsima_user_DllExport void heartbeat_submsg(
            eprosima::fastdds::rtps::core::HeartBeatSubmessage&& _heartbeat_submsg);

    /*!
     * @brief This function returns a constant reference to member heartbeat_submsg
     * @return Constant reference to member heartbeat_submsg
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const eprosima::fastdds::rtps::core::HeartBeatSubmessage& heartbeat_submsg() const;

    /*!
     * @brief This function returns a reference to member heartbeat_submsg
     * @return Reference to member heartbeat_submsg
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport eprosima::fastdds::rtps::core::HeartBeatSubmessage& heartbeat_submsg();


    /*!
     * @brief This function copies the value in member info_ts_submsg
     * @param _info_ts_submsg New value to be copied in member info_ts_submsg
     */
    eProsima_user_DllExport void info_ts_submsg(
            const eprosima::fastdds::rtps::core::InfoTimestampSubmessage& _info_ts_submsg);

    /*!
     * @brief This function moves the value in member info_ts_submsg
     * @param _info_ts_submsg New value to be moved in member info_ts_submsg
     */
    eProsima_user_DllExport void info_ts_submsg(
            eprosima::fastdds::rtps::core::InfoTimestampSubmessage&& _info_ts_submsg);

    /*!
     * @brief This function returns a constant reference to member info_ts_submsg
     * @return Constant reference to member info_ts_submsg
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const eprosima::fastdds::rtps::core::InfoTimestampSubmessage& info_ts_submsg() const;

    /*!
     * @brief This function returns a reference to member info_ts_submsg
     * @return Reference to member info_ts_submsg
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport eprosima::fastdds::rtps::core::InfoTimestampSubmessage& info_ts_submsg();


    /*!
     * @brief This function copies the value in member info_src_submsg
     * @param _info_src_submsg New value to be copied in member info_src_submsg
     */
    eProsima_user_DllExport void info_src_submsg(
            const eprosima::fastdds::rtps::core::InfoSourceSubmessage& _info_src_submsg);

    /*!
     * @brief This function moves the value in member info_src_submsg
     * @param _info_src_submsg New value to be moved in member info_src_submsg
     */
    eProsima_user_DllExport void info_src_submsg(
            eprosima::fastdds::rtps::core::InfoSourceSubmessage&& _info_src_submsg);

    /*!
     * @brief This function returns a constant reference to member info_src_submsg
     * @return Constant reference to member info_src_submsg
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const eprosima::fastdds::rtps::core::InfoSourceSubmessage& info_src_submsg() const;

    /*!
     * @brief This function returns a reference to member info_src_submsg
     * @return Reference to member info_src_submsg
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport eprosima::fastdds::rtps::core::InfoSourceSubmessage& info_src_submsg();


    /*!
     * @brief This function copies the value in member info_dst_submsg
     * @param _info_dst_submsg New value to be copied in member info_dst_submsg
     */
    eProsima_user_DllExport void info_dst_submsg(
            const eprosima::fastdds::rtps::core::InfoDestinationSubmessage& _info_dst_submsg);

    /*!
     * @brief This function moves the value in member info_dst_submsg
     * @param _info_dst_submsg New value to be moved in member info_dst_submsg
     */
    eProsima_user_DllExport void info_dst_submsg(
            eprosima::fastdds::rtps::core::InfoDestinationSubmessage&& _info_dst_submsg);

    /*!
     * @brief This function returns a constant reference to member info_dst_submsg
     * @return Constant reference to member info_dst_submsg
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const eprosima::fastdds::rtps::core::InfoDestinationSubmessage& info_dst_submsg() const;

    /*!
     * @brief This function returns a reference to member info_dst_submsg
     * @return Reference to member info_dst_submsg
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport eprosima::fastdds::rtps::core::InfoDestinationSubmessage& info_dst_submsg();


    /*!
     * @brief This function copies the value in member unknown_submsg
     * @param _unknown_submsg New value to be copied in member unknown_submsg
     */
    eProsima_user_DllExport void unknown_submsg(
            const eprosima::fastdds::rtps::core::SubmessageHeader& _unknown_submsg);

    /*!
     * @brief This function moves the value in member unknown_submsg
     * @param _unknown_submsg New value to be moved in member unknown_submsg
     */
    eProsima_user_DllExport void unknown_submsg(
            eprosima::fastdds::rtps::core::SubmessageHeader&& _unknown_submsg);

    /*!
     * @brief This function returns a constant reference to member unknown_submsg
     * @return Constant reference to member unknown_submsg
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const eprosima::fastdds::rtps::core::SubmessageHeader& unknown_submsg() const;

    /*!
     * @brief This function returns a reference to member unknown_submsg
     * @return Reference to member unknown_submsg
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport eprosima::fastdds::rtps::core::SubmessageHeader& unknown_submsg();

private:

    eprosima::fastdds::rtps::core::SubmessageKind m__d;

    eprosima::fastdds::rtps::core::HeartBeatSubmessage m_heartbeat_submsg;
    eprosima::fastdds::rtps::core::InfoTimestampSubmessage m_info_ts_submsg;
    eprosima::fastdds::rtps::core::InfoSourceSubmessage m_info_src_submsg;
    eprosima::fastdds::rtps::core::InfoDestinationSubmessage m_info_dst_submsg;
    eprosima::fastdds::rtps::core::SubmessageHeader m_unknown_submsg;
};




/*!
 * @brief This class represents the structure RTPSMessage defined by the user in the IDL file.
 * @ingroup core_types
 */
class RTPSMessage
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport RTPSMessage();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~RTPSMessage();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object eprosima::fastdds::rtps::core::RTPSMessage that will be copied.
     */
    eProsima_user_DllExport RTPSMessage(
            const RTPSMessage& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object eprosima::fastdds::rtps::core::RTPSMessage that will be copied.
     */
    eProsima_user_DllExport RTPSMessage(
            RTPSMessage&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object eprosima::fastdds::rtps::core::RTPSMessage that will be copied.
     */
    eProsima_user_DllExport RTPSMessage& operator =(
            const RTPSMessage& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object eprosima::fastdds::rtps::core::RTPSMessage that will be copied.
     */
    eProsima_user_DllExport RTPSMessage& operator =(
            RTPSMessage&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x eprosima::fastdds::rtps::core::RTPSMessage object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const RTPSMessage& x) const;

    /*!
     * @brief Comparison operator.
     * @param x eprosima::fastdds::rtps::core::RTPSMessage object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const RTPSMessage& x) const;

    /*!
     * @brief This function copies the value in member msg_header
     * @param _msg_header New value to be copied in member msg_header
     */
    eProsima_user_DllExport void msg_header(
            const eprosima::fastdds::rtps::core::Header& _msg_header);

    /*!
     * @brief This function moves the value in member msg_header
     * @param _msg_header New value to be moved in member msg_header
     */
    eProsima_user_DllExport void msg_header(
            eprosima::fastdds::rtps::core::Header&& _msg_header);

    /*!
     * @brief This function returns a constant reference to member msg_header
     * @return Constant reference to member msg_header
     */
    eProsima_user_DllExport const eprosima::fastdds::rtps::core::Header& msg_header() const;

    /*!
     * @brief This function returns a reference to member msg_header
     * @return Reference to member msg_header
     */
    eProsima_user_DllExport eprosima::fastdds::rtps::core::Header& msg_header();


    /*!
     * @brief This function copies the value in member submessages
     * @param _submessages New value to be copied in member submessages
     */
    eProsima_user_DllExport void submessages(
            const std::vector<eprosima::fastdds::rtps::core::Submessage>& _submessages);

    /*!
     * @brief This function moves the value in member submessages
     * @param _submessages New value to be moved in member submessages
     */
    eProsima_user_DllExport void submessages(
            std::vector<eprosima::fastdds::rtps::core::Submessage>&& _submessages);

    /*!
     * @brief This function returns a constant reference to member submessages
     * @return Constant reference to member submessages
     */
    eProsima_user_DllExport const std::vector<eprosima::fastdds::rtps::core::Submessage>& submessages() const;

    /*!
     * @brief This function returns a reference to member submessages
     * @return Reference to member submessages
     */
    eProsima_user_DllExport std::vector<eprosima::fastdds::rtps::core::Submessage>& submessages();

private:

    eprosima::fastdds::rtps::core::Header m_msg_header;
    std::vector<eprosima::fastdds::rtps::core::Submessage> m_submessages;

};

} // namespace core

} // namespace rtps

} // namespace fastdds

} // namespace eprosima

#endif // _FAST_DDS_GENERATED_EPROSIMA_FASTDDS_RTPS_CORE_CORE_TYPES_H_



