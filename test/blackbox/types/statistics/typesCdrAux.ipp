// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file typesCdrAux.ipp
 * This source file contains some declarations of CDR related functions.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_EPROSIMA_FASTDDS_STATISTICS_TYPESCDRAUX_IPP_
#define _FAST_DDS_GENERATED_EPROSIMA_FASTDDS_STATISTICS_TYPESCDRAUX_IPP_

#include "typesCdrAux.hpp"

#include <fastcdr/Cdr.h>
#if FASTCDR_VERSION_MAJOR > 1
#include <fastcdr/CdrSizeCalculator.hpp>
#endif // FASTCDR_VERSION_MAJOR > 1



#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

namespace eprosima {
namespace fastcdr {



template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const eprosima::fastdds::statistics::detail::EntityId_s& data,
        size_t& current_alignment)
{
    using namespace eprosima::fastdds::statistics::detail;

    static_cast<void>(data);

#if FASTCDR_VERSION_MAJOR == 1

    static_cast<void>(calculator);
    static_cast<void>(current_alignment);

    size_t initial_alignment {current_alignment};

            current_alignment += ((4) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);





    return current_alignment - initial_alignment;

#else

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;

#endif // FASTCDR_VERSION_MAJOR == 1
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const eprosima::fastdds::statistics::detail::EntityId_s& data)
{
    using namespace eprosima::fastdds::statistics::detail;

#if FASTCDR_VERSION_MAJOR > 1
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);
#endif // FASTCDR_VERSION_MAJOR > 1

#if FASTCDR_VERSION_MAJOR == 1
            scdr << data.value();

#else
    scdr
        << eprosima::fastcdr::MemberId(0) << data.value()
;
#endif // FASTCDR_VERSION_MAJOR == 1

#if FASTCDR_VERSION_MAJOR > 1
    scdr.end_serialize_type(current_state);
#endif // FASTCDR_VERSION_MAJOR > 1
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        eprosima::fastdds::statistics::detail::EntityId_s& data)
{
    using namespace eprosima::fastdds::statistics::detail;

#if FASTCDR_VERSION_MAJOR == 1
                cdr >> data.value();
;
#else
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
#endif // FASTCDR_VERSION_MAJOR == 1
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const eprosima::fastdds::statistics::detail::EntityId_s& data)
{
    using namespace eprosima::fastdds::statistics::detail;

    static_cast<void>(scdr);
    static_cast<void>(data);
}




template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const eprosima::fastdds::statistics::detail::GuidPrefix_s& data,
        size_t& current_alignment)
{
    using namespace eprosima::fastdds::statistics::detail;

    static_cast<void>(data);

#if FASTCDR_VERSION_MAJOR == 1

    static_cast<void>(calculator);
    static_cast<void>(current_alignment);

    size_t initial_alignment {current_alignment};

            current_alignment += ((12) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);





    return current_alignment - initial_alignment;

#else

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;

#endif // FASTCDR_VERSION_MAJOR == 1
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const eprosima::fastdds::statistics::detail::GuidPrefix_s& data)
{
    using namespace eprosima::fastdds::statistics::detail;

#if FASTCDR_VERSION_MAJOR > 1
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);
#endif // FASTCDR_VERSION_MAJOR > 1

#if FASTCDR_VERSION_MAJOR == 1
            scdr << data.value();

#else
    scdr
        << eprosima::fastcdr::MemberId(0) << data.value()
;
#endif // FASTCDR_VERSION_MAJOR == 1

#if FASTCDR_VERSION_MAJOR > 1
    scdr.end_serialize_type(current_state);
#endif // FASTCDR_VERSION_MAJOR > 1
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        eprosima::fastdds::statistics::detail::GuidPrefix_s& data)
{
    using namespace eprosima::fastdds::statistics::detail;

#if FASTCDR_VERSION_MAJOR == 1
                cdr >> data.value();
;
#else
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
#endif // FASTCDR_VERSION_MAJOR == 1
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const eprosima::fastdds::statistics::detail::GuidPrefix_s& data)
{
    using namespace eprosima::fastdds::statistics::detail;

    static_cast<void>(scdr);
    static_cast<void>(data);
}




template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const eprosima::fastdds::statistics::detail::GUID_s& data,
        size_t& current_alignment)
{
    using namespace eprosima::fastdds::statistics::detail;

    static_cast<void>(data);

#if FASTCDR_VERSION_MAJOR == 1

    static_cast<void>(calculator);
    static_cast<void>(current_alignment);

    size_t initial_alignment {current_alignment};

            calculate_serialized_size(calculator, data.guidPrefix(), current_alignment);


            calculate_serialized_size(calculator, data.entityId(), current_alignment);



    return current_alignment - initial_alignment;

#else

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.guidPrefix(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.entityId(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;

#endif // FASTCDR_VERSION_MAJOR == 1
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const eprosima::fastdds::statistics::detail::GUID_s& data)
{
    using namespace eprosima::fastdds::statistics::detail;

#if FASTCDR_VERSION_MAJOR > 1
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);
#endif // FASTCDR_VERSION_MAJOR > 1

#if FASTCDR_VERSION_MAJOR == 1
            scdr << data.guidPrefix()
            ;


            scdr << data.entityId()
            ;


#else
    scdr
        << eprosima::fastcdr::MemberId(0) << data.guidPrefix()
        << eprosima::fastcdr::MemberId(1) << data.entityId()
;
#endif // FASTCDR_VERSION_MAJOR == 1

#if FASTCDR_VERSION_MAJOR > 1
    scdr.end_serialize_type(current_state);
#endif // FASTCDR_VERSION_MAJOR > 1
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        eprosima::fastdds::statistics::detail::GUID_s& data)
{
    using namespace eprosima::fastdds::statistics::detail;

#if FASTCDR_VERSION_MAJOR == 1
                cdr >> data.guidPrefix();
                cdr >> data.entityId();
;
#else
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.guidPrefix();
                                            break;

                                        case 1:
                                                dcdr >> data.entityId();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
#endif // FASTCDR_VERSION_MAJOR == 1
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const eprosima::fastdds::statistics::detail::GUID_s& data)
{
    using namespace eprosima::fastdds::statistics::detail;

    static_cast<void>(scdr);
    static_cast<void>(data);
}




template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const eprosima::fastdds::statistics::detail::SequenceNumber_s& data,
        size_t& current_alignment)
{
    using namespace eprosima::fastdds::statistics::detail;

    static_cast<void>(data);

#if FASTCDR_VERSION_MAJOR == 1

    static_cast<void>(calculator);
    static_cast<void>(current_alignment);

    size_t initial_alignment {current_alignment};

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;

#else

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.high(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.low(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;

#endif // FASTCDR_VERSION_MAJOR == 1
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const eprosima::fastdds::statistics::detail::SequenceNumber_s& data)
{
    using namespace eprosima::fastdds::statistics::detail;

#if FASTCDR_VERSION_MAJOR > 1
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);
#endif // FASTCDR_VERSION_MAJOR > 1

#if FASTCDR_VERSION_MAJOR == 1
            scdr << data.high()
            ;


            scdr << data.low()
            ;


#else
    scdr
        << eprosima::fastcdr::MemberId(0) << data.high()
        << eprosima::fastcdr::MemberId(1) << data.low()
;
#endif // FASTCDR_VERSION_MAJOR == 1

#if FASTCDR_VERSION_MAJOR > 1
    scdr.end_serialize_type(current_state);
#endif // FASTCDR_VERSION_MAJOR > 1
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        eprosima::fastdds::statistics::detail::SequenceNumber_s& data)
{
    using namespace eprosima::fastdds::statistics::detail;

#if FASTCDR_VERSION_MAJOR == 1
                cdr >> data.high();
                cdr >> data.low();
;
#else
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.high();
                                            break;

                                        case 1:
                                                dcdr >> data.low();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
#endif // FASTCDR_VERSION_MAJOR == 1
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const eprosima::fastdds::statistics::detail::SequenceNumber_s& data)
{
    using namespace eprosima::fastdds::statistics::detail;

    static_cast<void>(scdr);
    static_cast<void>(data);
}




template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const eprosima::fastdds::statistics::detail::SampleIdentity_s& data,
        size_t& current_alignment)
{
    using namespace eprosima::fastdds::statistics::detail;

    static_cast<void>(data);

#if FASTCDR_VERSION_MAJOR == 1

    static_cast<void>(calculator);
    static_cast<void>(current_alignment);

    size_t initial_alignment {current_alignment};

            calculate_serialized_size(calculator, data.writer_guid(), current_alignment);


            calculate_serialized_size(calculator, data.sequence_number(), current_alignment);



    return current_alignment - initial_alignment;

#else

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.writer_guid(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.sequence_number(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;

#endif // FASTCDR_VERSION_MAJOR == 1
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const eprosima::fastdds::statistics::detail::SampleIdentity_s& data)
{
    using namespace eprosima::fastdds::statistics::detail;

#if FASTCDR_VERSION_MAJOR > 1
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);
#endif // FASTCDR_VERSION_MAJOR > 1

#if FASTCDR_VERSION_MAJOR == 1
            scdr << data.writer_guid()
            ;


            scdr << data.sequence_number()
            ;


#else
    scdr
        << eprosima::fastcdr::MemberId(0) << data.writer_guid()
        << eprosima::fastcdr::MemberId(1) << data.sequence_number()
;
#endif // FASTCDR_VERSION_MAJOR == 1

#if FASTCDR_VERSION_MAJOR > 1
    scdr.end_serialize_type(current_state);
#endif // FASTCDR_VERSION_MAJOR > 1
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        eprosima::fastdds::statistics::detail::SampleIdentity_s& data)
{
    using namespace eprosima::fastdds::statistics::detail;

#if FASTCDR_VERSION_MAJOR == 1
                cdr >> data.writer_guid();
                cdr >> data.sequence_number();
;
#else
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.writer_guid();
                                            break;

                                        case 1:
                                                dcdr >> data.sequence_number();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
#endif // FASTCDR_VERSION_MAJOR == 1
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const eprosima::fastdds::statistics::detail::SampleIdentity_s& data)
{
    using namespace eprosima::fastdds::statistics::detail;

    static_cast<void>(scdr);
    static_cast<void>(data);
}




template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const eprosima::fastdds::statistics::detail::Locator_s& data,
        size_t& current_alignment)
{
    using namespace eprosima::fastdds::statistics::detail;

    static_cast<void>(data);

#if FASTCDR_VERSION_MAJOR == 1

    static_cast<void>(calculator);
    static_cast<void>(current_alignment);

    size_t initial_alignment {current_alignment};

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


            current_alignment += ((16) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);





    return current_alignment - initial_alignment;

#else

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.kind(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.port(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(2),
                data.address(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;

#endif // FASTCDR_VERSION_MAJOR == 1
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const eprosima::fastdds::statistics::detail::Locator_s& data)
{
    using namespace eprosima::fastdds::statistics::detail;

#if FASTCDR_VERSION_MAJOR > 1
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);
#endif // FASTCDR_VERSION_MAJOR > 1

#if FASTCDR_VERSION_MAJOR == 1
            scdr << data.kind()
            ;


            scdr << data.port()
            ;


            scdr << data.address();

#else
    scdr
        << eprosima::fastcdr::MemberId(0) << data.kind()
        << eprosima::fastcdr::MemberId(1) << data.port()
        << eprosima::fastcdr::MemberId(2) << data.address()
;
#endif // FASTCDR_VERSION_MAJOR == 1

#if FASTCDR_VERSION_MAJOR > 1
    scdr.end_serialize_type(current_state);
#endif // FASTCDR_VERSION_MAJOR > 1
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        eprosima::fastdds::statistics::detail::Locator_s& data)
{
    using namespace eprosima::fastdds::statistics::detail;

#if FASTCDR_VERSION_MAJOR == 1
                cdr >> data.kind();
                cdr >> data.port();
                cdr >> data.address();
;
#else
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.kind();
                                            break;

                                        case 1:
                                                dcdr >> data.port();
                                            break;

                                        case 2:
                                                dcdr >> data.address();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
#endif // FASTCDR_VERSION_MAJOR == 1
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const eprosima::fastdds::statistics::detail::Locator_s& data)
{
    using namespace eprosima::fastdds::statistics::detail;

    static_cast<void>(scdr);
    static_cast<void>(data);
}





template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const eprosima::fastdds::statistics::DiscoveryTime& data,
        size_t& current_alignment)
{
    using namespace eprosima::fastdds::statistics;

    static_cast<void>(data);

#if FASTCDR_VERSION_MAJOR == 1

    static_cast<void>(calculator);
    static_cast<void>(current_alignment);

    size_t initial_alignment {current_alignment};

            calculate_serialized_size(calculator, data.local_participant_guid(), current_alignment);


            calculate_serialized_size(calculator, data.remote_entity_guid(), current_alignment);


            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.host().size() + 1;


            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.user().size() + 1;


            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.process().size() + 1;



    return current_alignment - initial_alignment;

#else

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.local_participant_guid(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.remote_entity_guid(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(2),
                data.time(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(3),
                data.host(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(4),
                data.user(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(5),
                data.process(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;

#endif // FASTCDR_VERSION_MAJOR == 1
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const eprosima::fastdds::statistics::DiscoveryTime& data)
{
    using namespace eprosima::fastdds::statistics;

#if FASTCDR_VERSION_MAJOR > 1
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);
#endif // FASTCDR_VERSION_MAJOR > 1

#if FASTCDR_VERSION_MAJOR == 1
            scdr << data.local_participant_guid()
            ;


            scdr << data.remote_entity_guid()
            ;


            scdr << data.time()
            ;


            scdr << data.host()
            ;


            scdr << data.user()
            ;


            scdr << data.process()
            ;


#else
    scdr
        << eprosima::fastcdr::MemberId(0) << data.local_participant_guid()
        << eprosima::fastcdr::MemberId(1) << data.remote_entity_guid()
        << eprosima::fastcdr::MemberId(2) << data.time()
        << eprosima::fastcdr::MemberId(3) << data.host()
        << eprosima::fastcdr::MemberId(4) << data.user()
        << eprosima::fastcdr::MemberId(5) << data.process()
;
#endif // FASTCDR_VERSION_MAJOR == 1

#if FASTCDR_VERSION_MAJOR > 1
    scdr.end_serialize_type(current_state);
#endif // FASTCDR_VERSION_MAJOR > 1
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        eprosima::fastdds::statistics::DiscoveryTime& data)
{
    using namespace eprosima::fastdds::statistics;

#if FASTCDR_VERSION_MAJOR == 1
                cdr >> data.local_participant_guid();
                cdr >> data.remote_entity_guid();
                cdr >> data.time();
                cdr >> data.host();
                cdr >> data.user();
                cdr >> data.process();
;
#else
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.local_participant_guid();
                                            break;

                                        case 1:
                                                dcdr >> data.remote_entity_guid();
                                            break;

                                        case 2:
                                                dcdr >> data.time();
                                            break;

                                        case 3:
                                                dcdr >> data.host();
                                            break;

                                        case 4:
                                                dcdr >> data.user();
                                            break;

                                        case 5:
                                                dcdr >> data.process();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
#endif // FASTCDR_VERSION_MAJOR == 1
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const eprosima::fastdds::statistics::DiscoveryTime& data)
{
    using namespace eprosima::fastdds::statistics;

    static_cast<void>(scdr);
    static_cast<void>(data);

#if FASTCDR_VERSION_MAJOR > 1
        eprosima::fastcdr::Cdr::state current_state(scdr);
        scdr.begin_serialize_type(current_state,
                eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);
#endif // FASTCDR_VERSION_MAJOR > 1

#if FASTCDR_VERSION_MAJOR == 1
                                scdr << data.local_participant_guid();

                                scdr << data.remote_entity_guid();





#else
                                scdr << data.local_participant_guid();

                                scdr << data.remote_entity_guid();





#endif // FASTCDR_VERSION_MAJOR == 1

#if FASTCDR_VERSION_MAJOR > 1
        scdr.end_serialize_type(current_state);
#endif // FASTCDR_VERSION_MAJOR > 1
}




template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const eprosima::fastdds::statistics::EntityCount& data,
        size_t& current_alignment)
{
    using namespace eprosima::fastdds::statistics;

    static_cast<void>(data);

#if FASTCDR_VERSION_MAJOR == 1

    static_cast<void>(calculator);
    static_cast<void>(current_alignment);

    size_t initial_alignment {current_alignment};

            calculate_serialized_size(calculator, data.guid(), current_alignment);


            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;

#else

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.guid(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.count(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;

#endif // FASTCDR_VERSION_MAJOR == 1
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const eprosima::fastdds::statistics::EntityCount& data)
{
    using namespace eprosima::fastdds::statistics;

#if FASTCDR_VERSION_MAJOR > 1
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);
#endif // FASTCDR_VERSION_MAJOR > 1

#if FASTCDR_VERSION_MAJOR == 1
            scdr << data.guid()
            ;


            scdr << data.count()
            ;


#else
    scdr
        << eprosima::fastcdr::MemberId(0) << data.guid()
        << eprosima::fastcdr::MemberId(1) << data.count()
;
#endif // FASTCDR_VERSION_MAJOR == 1

#if FASTCDR_VERSION_MAJOR > 1
    scdr.end_serialize_type(current_state);
#endif // FASTCDR_VERSION_MAJOR > 1
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        eprosima::fastdds::statistics::EntityCount& data)
{
    using namespace eprosima::fastdds::statistics;

#if FASTCDR_VERSION_MAJOR == 1
                cdr >> data.guid();
                cdr >> data.count();
;
#else
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.guid();
                                            break;

                                        case 1:
                                                dcdr >> data.count();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
#endif // FASTCDR_VERSION_MAJOR == 1
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const eprosima::fastdds::statistics::EntityCount& data)
{
    using namespace eprosima::fastdds::statistics;

    static_cast<void>(scdr);
    static_cast<void>(data);

#if FASTCDR_VERSION_MAJOR > 1
        eprosima::fastcdr::Cdr::state current_state(scdr);
        scdr.begin_serialize_type(current_state,
                eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);
#endif // FASTCDR_VERSION_MAJOR > 1

#if FASTCDR_VERSION_MAJOR == 1
                                scdr << data.guid();


#else
                                scdr << data.guid();


#endif // FASTCDR_VERSION_MAJOR == 1

#if FASTCDR_VERSION_MAJOR > 1
        scdr.end_serialize_type(current_state);
#endif // FASTCDR_VERSION_MAJOR > 1
}




template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const eprosima::fastdds::statistics::SampleIdentityCount& data,
        size_t& current_alignment)
{
    using namespace eprosima::fastdds::statistics;

    static_cast<void>(data);

#if FASTCDR_VERSION_MAJOR == 1

    static_cast<void>(calculator);
    static_cast<void>(current_alignment);

    size_t initial_alignment {current_alignment};

            calculate_serialized_size(calculator, data.sample_id(), current_alignment);


            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;

#else

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.sample_id(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.count(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;

#endif // FASTCDR_VERSION_MAJOR == 1
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const eprosima::fastdds::statistics::SampleIdentityCount& data)
{
    using namespace eprosima::fastdds::statistics;

#if FASTCDR_VERSION_MAJOR > 1
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);
#endif // FASTCDR_VERSION_MAJOR > 1

#if FASTCDR_VERSION_MAJOR == 1
            scdr << data.sample_id()
            ;


            scdr << data.count()
            ;


#else
    scdr
        << eprosima::fastcdr::MemberId(0) << data.sample_id()
        << eprosima::fastcdr::MemberId(1) << data.count()
;
#endif // FASTCDR_VERSION_MAJOR == 1

#if FASTCDR_VERSION_MAJOR > 1
    scdr.end_serialize_type(current_state);
#endif // FASTCDR_VERSION_MAJOR > 1
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        eprosima::fastdds::statistics::SampleIdentityCount& data)
{
    using namespace eprosima::fastdds::statistics;

#if FASTCDR_VERSION_MAJOR == 1
                cdr >> data.sample_id();
                cdr >> data.count();
;
#else
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.sample_id();
                                            break;

                                        case 1:
                                                dcdr >> data.count();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
#endif // FASTCDR_VERSION_MAJOR == 1
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const eprosima::fastdds::statistics::SampleIdentityCount& data)
{
    using namespace eprosima::fastdds::statistics;

    static_cast<void>(scdr);
    static_cast<void>(data);

#if FASTCDR_VERSION_MAJOR > 1
        eprosima::fastcdr::Cdr::state current_state(scdr);
        scdr.begin_serialize_type(current_state,
                eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);
#endif // FASTCDR_VERSION_MAJOR > 1

#if FASTCDR_VERSION_MAJOR == 1
                                scdr << data.sample_id();


#else
                                scdr << data.sample_id();


#endif // FASTCDR_VERSION_MAJOR == 1

#if FASTCDR_VERSION_MAJOR > 1
        scdr.end_serialize_type(current_state);
#endif // FASTCDR_VERSION_MAJOR > 1
}




template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const eprosima::fastdds::statistics::Entity2LocatorTraffic& data,
        size_t& current_alignment)
{
    using namespace eprosima::fastdds::statistics;

    static_cast<void>(data);

#if FASTCDR_VERSION_MAJOR == 1

    static_cast<void>(calculator);
    static_cast<void>(current_alignment);

    size_t initial_alignment {current_alignment};

            calculate_serialized_size(calculator, data.src_guid(), current_alignment);


            calculate_serialized_size(calculator, data.dst_locator(), current_alignment);


            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);



    return current_alignment - initial_alignment;

#else

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.src_guid(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.dst_locator(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(2),
                data.packet_count(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(3),
                data.byte_count(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(4),
                data.byte_magnitude_order(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;

#endif // FASTCDR_VERSION_MAJOR == 1
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const eprosima::fastdds::statistics::Entity2LocatorTraffic& data)
{
    using namespace eprosima::fastdds::statistics;

#if FASTCDR_VERSION_MAJOR > 1
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);
#endif // FASTCDR_VERSION_MAJOR > 1

#if FASTCDR_VERSION_MAJOR == 1
            scdr << data.src_guid()
            ;


            scdr << data.dst_locator()
            ;


            scdr << data.packet_count()
            ;


            scdr << data.byte_count()
            ;


            scdr << data.byte_magnitude_order()
            ;


#else
    scdr
        << eprosima::fastcdr::MemberId(0) << data.src_guid()
        << eprosima::fastcdr::MemberId(1) << data.dst_locator()
        << eprosima::fastcdr::MemberId(2) << data.packet_count()
        << eprosima::fastcdr::MemberId(3) << data.byte_count()
        << eprosima::fastcdr::MemberId(4) << data.byte_magnitude_order()
;
#endif // FASTCDR_VERSION_MAJOR == 1

#if FASTCDR_VERSION_MAJOR > 1
    scdr.end_serialize_type(current_state);
#endif // FASTCDR_VERSION_MAJOR > 1
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        eprosima::fastdds::statistics::Entity2LocatorTraffic& data)
{
    using namespace eprosima::fastdds::statistics;

#if FASTCDR_VERSION_MAJOR == 1
                cdr >> data.src_guid();
                cdr >> data.dst_locator();
                cdr >> data.packet_count();
                cdr >> data.byte_count();
                cdr >> data.byte_magnitude_order();
;
#else
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.src_guid();
                                            break;

                                        case 1:
                                                dcdr >> data.dst_locator();
                                            break;

                                        case 2:
                                                dcdr >> data.packet_count();
                                            break;

                                        case 3:
                                                dcdr >> data.byte_count();
                                            break;

                                        case 4:
                                                dcdr >> data.byte_magnitude_order();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
#endif // FASTCDR_VERSION_MAJOR == 1
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const eprosima::fastdds::statistics::Entity2LocatorTraffic& data)
{
    using namespace eprosima::fastdds::statistics;

    static_cast<void>(scdr);
    static_cast<void>(data);

#if FASTCDR_VERSION_MAJOR > 1
        eprosima::fastcdr::Cdr::state current_state(scdr);
        scdr.begin_serialize_type(current_state,
                eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);
#endif // FASTCDR_VERSION_MAJOR > 1

#if FASTCDR_VERSION_MAJOR == 1
                                scdr << data.src_guid();

                                scdr << data.dst_locator();




#else
                                scdr << data.src_guid();

                                scdr << data.dst_locator();




#endif // FASTCDR_VERSION_MAJOR == 1

#if FASTCDR_VERSION_MAJOR > 1
        scdr.end_serialize_type(current_state);
#endif // FASTCDR_VERSION_MAJOR > 1
}




template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const eprosima::fastdds::statistics::WriterReaderData& data,
        size_t& current_alignment)
{
    using namespace eprosima::fastdds::statistics;

    static_cast<void>(data);

#if FASTCDR_VERSION_MAJOR == 1

    static_cast<void>(calculator);
    static_cast<void>(current_alignment);

    size_t initial_alignment {current_alignment};

            calculate_serialized_size(calculator, data.writer_guid(), current_alignment);


            calculate_serialized_size(calculator, data.reader_guid(), current_alignment);


            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;

#else

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.writer_guid(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.reader_guid(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(2),
                data.data(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;

#endif // FASTCDR_VERSION_MAJOR == 1
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const eprosima::fastdds::statistics::WriterReaderData& data)
{
    using namespace eprosima::fastdds::statistics;

#if FASTCDR_VERSION_MAJOR > 1
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);
#endif // FASTCDR_VERSION_MAJOR > 1

#if FASTCDR_VERSION_MAJOR == 1
            scdr << data.writer_guid()
            ;


            scdr << data.reader_guid()
            ;


            scdr << data.data()
            ;


#else
    scdr
        << eprosima::fastcdr::MemberId(0) << data.writer_guid()
        << eprosima::fastcdr::MemberId(1) << data.reader_guid()
        << eprosima::fastcdr::MemberId(2) << data.data()
;
#endif // FASTCDR_VERSION_MAJOR == 1

#if FASTCDR_VERSION_MAJOR > 1
    scdr.end_serialize_type(current_state);
#endif // FASTCDR_VERSION_MAJOR > 1
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        eprosima::fastdds::statistics::WriterReaderData& data)
{
    using namespace eprosima::fastdds::statistics;

#if FASTCDR_VERSION_MAJOR == 1
                cdr >> data.writer_guid();
                cdr >> data.reader_guid();
                cdr >> data.data();
;
#else
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.writer_guid();
                                            break;

                                        case 1:
                                                dcdr >> data.reader_guid();
                                            break;

                                        case 2:
                                                dcdr >> data.data();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
#endif // FASTCDR_VERSION_MAJOR == 1
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const eprosima::fastdds::statistics::WriterReaderData& data)
{
    using namespace eprosima::fastdds::statistics;

    static_cast<void>(scdr);
    static_cast<void>(data);

#if FASTCDR_VERSION_MAJOR > 1
        eprosima::fastcdr::Cdr::state current_state(scdr);
        scdr.begin_serialize_type(current_state,
                eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);
#endif // FASTCDR_VERSION_MAJOR > 1

#if FASTCDR_VERSION_MAJOR == 1
                                scdr << data.writer_guid();

                                scdr << data.reader_guid();


#else
                                scdr << data.writer_guid();

                                scdr << data.reader_guid();


#endif // FASTCDR_VERSION_MAJOR == 1

#if FASTCDR_VERSION_MAJOR > 1
        scdr.end_serialize_type(current_state);
#endif // FASTCDR_VERSION_MAJOR > 1
}




template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const eprosima::fastdds::statistics::Locator2LocatorData& data,
        size_t& current_alignment)
{
    using namespace eprosima::fastdds::statistics;

    static_cast<void>(data);

#if FASTCDR_VERSION_MAJOR == 1

    static_cast<void>(calculator);
    static_cast<void>(current_alignment);

    size_t initial_alignment {current_alignment};

            calculate_serialized_size(calculator, data.src_locator(), current_alignment);


            calculate_serialized_size(calculator, data.dst_locator(), current_alignment);


            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;

#else

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.src_locator(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.dst_locator(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(2),
                data.data(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;

#endif // FASTCDR_VERSION_MAJOR == 1
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const eprosima::fastdds::statistics::Locator2LocatorData& data)
{
    using namespace eprosima::fastdds::statistics;

#if FASTCDR_VERSION_MAJOR > 1
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);
#endif // FASTCDR_VERSION_MAJOR > 1

#if FASTCDR_VERSION_MAJOR == 1
            scdr << data.src_locator()
            ;


            scdr << data.dst_locator()
            ;


            scdr << data.data()
            ;


#else
    scdr
        << eprosima::fastcdr::MemberId(0) << data.src_locator()
        << eprosima::fastcdr::MemberId(1) << data.dst_locator()
        << eprosima::fastcdr::MemberId(2) << data.data()
;
#endif // FASTCDR_VERSION_MAJOR == 1

#if FASTCDR_VERSION_MAJOR > 1
    scdr.end_serialize_type(current_state);
#endif // FASTCDR_VERSION_MAJOR > 1
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        eprosima::fastdds::statistics::Locator2LocatorData& data)
{
    using namespace eprosima::fastdds::statistics;

#if FASTCDR_VERSION_MAJOR == 1
                cdr >> data.src_locator();
                cdr >> data.dst_locator();
                cdr >> data.data();
;
#else
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.src_locator();
                                            break;

                                        case 1:
                                                dcdr >> data.dst_locator();
                                            break;

                                        case 2:
                                                dcdr >> data.data();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
#endif // FASTCDR_VERSION_MAJOR == 1
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const eprosima::fastdds::statistics::Locator2LocatorData& data)
{
    using namespace eprosima::fastdds::statistics;

    static_cast<void>(scdr);
    static_cast<void>(data);

#if FASTCDR_VERSION_MAJOR > 1
        eprosima::fastcdr::Cdr::state current_state(scdr);
        scdr.begin_serialize_type(current_state,
                eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);
#endif // FASTCDR_VERSION_MAJOR > 1

#if FASTCDR_VERSION_MAJOR == 1
                                scdr << data.src_locator();

                                scdr << data.dst_locator();


#else
                                scdr << data.src_locator();

                                scdr << data.dst_locator();


#endif // FASTCDR_VERSION_MAJOR == 1

#if FASTCDR_VERSION_MAJOR > 1
        scdr.end_serialize_type(current_state);
#endif // FASTCDR_VERSION_MAJOR > 1
}




template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const eprosima::fastdds::statistics::EntityData& data,
        size_t& current_alignment)
{
    using namespace eprosima::fastdds::statistics;

    static_cast<void>(data);

#if FASTCDR_VERSION_MAJOR == 1

    static_cast<void>(calculator);
    static_cast<void>(current_alignment);

    size_t initial_alignment {current_alignment};

            calculate_serialized_size(calculator, data.guid(), current_alignment);


            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;

#else

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.guid(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.data(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;

#endif // FASTCDR_VERSION_MAJOR == 1
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const eprosima::fastdds::statistics::EntityData& data)
{
    using namespace eprosima::fastdds::statistics;

#if FASTCDR_VERSION_MAJOR > 1
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);
#endif // FASTCDR_VERSION_MAJOR > 1

#if FASTCDR_VERSION_MAJOR == 1
            scdr << data.guid()
            ;


            scdr << data.data()
            ;


#else
    scdr
        << eprosima::fastcdr::MemberId(0) << data.guid()
        << eprosima::fastcdr::MemberId(1) << data.data()
;
#endif // FASTCDR_VERSION_MAJOR == 1

#if FASTCDR_VERSION_MAJOR > 1
    scdr.end_serialize_type(current_state);
#endif // FASTCDR_VERSION_MAJOR > 1
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        eprosima::fastdds::statistics::EntityData& data)
{
    using namespace eprosima::fastdds::statistics;

#if FASTCDR_VERSION_MAJOR == 1
                cdr >> data.guid();
                cdr >> data.data();
;
#else
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.guid();
                                            break;

                                        case 1:
                                                dcdr >> data.data();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
#endif // FASTCDR_VERSION_MAJOR == 1
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const eprosima::fastdds::statistics::EntityData& data)
{
    using namespace eprosima::fastdds::statistics;

    static_cast<void>(scdr);
    static_cast<void>(data);

#if FASTCDR_VERSION_MAJOR > 1
        eprosima::fastcdr::Cdr::state current_state(scdr);
        scdr.begin_serialize_type(current_state,
                eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);
#endif // FASTCDR_VERSION_MAJOR > 1

#if FASTCDR_VERSION_MAJOR == 1
                                scdr << data.guid();


#else
                                scdr << data.guid();


#endif // FASTCDR_VERSION_MAJOR == 1

#if FASTCDR_VERSION_MAJOR > 1
        scdr.end_serialize_type(current_state);
#endif // FASTCDR_VERSION_MAJOR > 1
}




template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const eprosima::fastdds::statistics::PhysicalData& data,
        size_t& current_alignment)
{
    using namespace eprosima::fastdds::statistics;

    static_cast<void>(data);

#if FASTCDR_VERSION_MAJOR == 1

    static_cast<void>(calculator);
    static_cast<void>(current_alignment);

    size_t initial_alignment {current_alignment};

            calculate_serialized_size(calculator, data.participant_guid(), current_alignment);


            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.host().size() + 1;


            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.user().size() + 1;


            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.process().size() + 1;



    return current_alignment - initial_alignment;

#else

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.participant_guid(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.host(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(2),
                data.user(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(3),
                data.process(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;

#endif // FASTCDR_VERSION_MAJOR == 1
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const eprosima::fastdds::statistics::PhysicalData& data)
{
    using namespace eprosima::fastdds::statistics;

#if FASTCDR_VERSION_MAJOR > 1
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);
#endif // FASTCDR_VERSION_MAJOR > 1

#if FASTCDR_VERSION_MAJOR == 1
            scdr << data.participant_guid()
            ;


            scdr << data.host()
            ;


            scdr << data.user()
            ;


            scdr << data.process()
            ;


#else
    scdr
        << eprosima::fastcdr::MemberId(0) << data.participant_guid()
        << eprosima::fastcdr::MemberId(1) << data.host()
        << eprosima::fastcdr::MemberId(2) << data.user()
        << eprosima::fastcdr::MemberId(3) << data.process()
;
#endif // FASTCDR_VERSION_MAJOR == 1

#if FASTCDR_VERSION_MAJOR > 1
    scdr.end_serialize_type(current_state);
#endif // FASTCDR_VERSION_MAJOR > 1
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        eprosima::fastdds::statistics::PhysicalData& data)
{
    using namespace eprosima::fastdds::statistics;

#if FASTCDR_VERSION_MAJOR == 1
                cdr >> data.participant_guid();
                cdr >> data.host();
                cdr >> data.user();
                cdr >> data.process();
;
#else
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.participant_guid();
                                            break;

                                        case 1:
                                                dcdr >> data.host();
                                            break;

                                        case 2:
                                                dcdr >> data.user();
                                            break;

                                        case 3:
                                                dcdr >> data.process();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
#endif // FASTCDR_VERSION_MAJOR == 1
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const eprosima::fastdds::statistics::PhysicalData& data)
{
    using namespace eprosima::fastdds::statistics;

    static_cast<void>(scdr);
    static_cast<void>(data);

#if FASTCDR_VERSION_MAJOR > 1
        eprosima::fastcdr::Cdr::state current_state(scdr);
        scdr.begin_serialize_type(current_state,
                eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);
#endif // FASTCDR_VERSION_MAJOR > 1

#if FASTCDR_VERSION_MAJOR == 1
                                scdr << data.participant_guid();




#else
                                scdr << data.participant_guid();




#endif // FASTCDR_VERSION_MAJOR == 1

#if FASTCDR_VERSION_MAJOR > 1
        scdr.end_serialize_type(current_state);
#endif // FASTCDR_VERSION_MAJOR > 1
}





template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const eprosima::fastdds::statistics::Data& data,
        size_t& current_alignment)
{
    using namespace eprosima::fastdds::statistics;

    static_cast<void>(data);

#if FASTCDR_VERSION_MAJOR == 1

    static_cast<void>(calculator);
    static_cast<void>(current_alignment);

    size_t initial_alignment {current_alignment};


    switch(data._d())
    {
        case eprosima::fastdds::statistics::HISTORY2HISTORY_LATENCY:
        calculate_serialized_size(calculator, data.writer_reader_data(), current_alignment);

        break;


        case eprosima::fastdds::statistics::NETWORK_LATENCY:
        calculate_serialized_size(calculator, data.locator2locator_data(), current_alignment);

        break;


        case eprosima::fastdds::statistics::PUBLICATION_THROUGHPUT:
        case eprosima::fastdds::statistics::SUBSCRIPTION_THROUGHPUT:
        calculate_serialized_size(calculator, data.entity_data(), current_alignment);

        break;


        case eprosima::fastdds::statistics::RTPS_SENT:
        case eprosima::fastdds::statistics::RTPS_LOST:
        calculate_serialized_size(calculator, data.entity2locator_traffic(), current_alignment);

        break;


        case eprosima::fastdds::statistics::RESENT_DATAS:
        case eprosima::fastdds::statistics::HEARTBEAT_COUNT:
        case eprosima::fastdds::statistics::ACKNACK_COUNT:
        case eprosima::fastdds::statistics::NACKFRAG_COUNT:
        case eprosima::fastdds::statistics::GAP_COUNT:
        case eprosima::fastdds::statistics::DATA_COUNT:
        case eprosima::fastdds::statistics::PDP_PACKETS:
        case eprosima::fastdds::statistics::EDP_PACKETS:
        calculate_serialized_size(calculator, data.entity_count(), current_alignment);

        break;


        case eprosima::fastdds::statistics::DISCOVERED_ENTITY:
        calculate_serialized_size(calculator, data.discovery_time(), current_alignment);

        break;


        case eprosima::fastdds::statistics::SAMPLE_DATAS:
        calculate_serialized_size(calculator, data.sample_identity_count(), current_alignment);

        break;


        case eprosima::fastdds::statistics::PHYSICAL_DATA:
        calculate_serialized_size(calculator, data.physical_data(), current_alignment);

        break;

        default:
        break;
    }

    return current_alignment - initial_alignment;

#else

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};

    calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0), data._d(),
                    current_alignment);

    switch (data._d())
    {
        case eprosima::fastdds::statistics::HISTORY2HISTORY_LATENCY:
                    calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                                data.writer_reader_data(), current_alignment);
                    break;

        case eprosima::fastdds::statistics::NETWORK_LATENCY:
                    calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                                data.locator2locator_data(), current_alignment);
                    break;

        case eprosima::fastdds::statistics::PUBLICATION_THROUGHPUT:
        case eprosima::fastdds::statistics::SUBSCRIPTION_THROUGHPUT:
                    calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(2),
                                data.entity_data(), current_alignment);
                    break;

        case eprosima::fastdds::statistics::RTPS_SENT:
        case eprosima::fastdds::statistics::RTPS_LOST:
                    calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(3),
                                data.entity2locator_traffic(), current_alignment);
                    break;

        case eprosima::fastdds::statistics::RESENT_DATAS:
        case eprosima::fastdds::statistics::HEARTBEAT_COUNT:
        case eprosima::fastdds::statistics::ACKNACK_COUNT:
        case eprosima::fastdds::statistics::NACKFRAG_COUNT:
        case eprosima::fastdds::statistics::GAP_COUNT:
        case eprosima::fastdds::statistics::DATA_COUNT:
        case eprosima::fastdds::statistics::PDP_PACKETS:
        case eprosima::fastdds::statistics::EDP_PACKETS:
                    calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(4),
                                data.entity_count(), current_alignment);
                    break;

        case eprosima::fastdds::statistics::DISCOVERED_ENTITY:
                    calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(5),
                                data.discovery_time(), current_alignment);
                    break;

        case eprosima::fastdds::statistics::SAMPLE_DATAS:
                    calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(6),
                                data.sample_identity_count(), current_alignment);
                    break;

        case eprosima::fastdds::statistics::PHYSICAL_DATA:
                    calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(7),
                                data.physical_data(), current_alignment);
                    break;

        default:
            break;
    }

    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;

#endif // FASTCDR_VERSION_MAJOR == 1
}


template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const eprosima::fastdds::statistics::Data& data)
{
    using namespace eprosima::fastdds::statistics;

#if FASTCDR_VERSION_MAJOR > 1
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);
#endif // FASTCDR_VERSION_MAJOR > 1

#if FASTCDR_VERSION_MAJOR == 1
    scdr << (uint32_t)data._d();

    switch (data._d())
    {
                case eprosima::fastdds::statistics::HISTORY2HISTORY_LATENCY:
                    scdr << data.writer_reader_data()
                        ;
                    break;

                case eprosima::fastdds::statistics::NETWORK_LATENCY:
                    scdr << data.locator2locator_data()
                        ;
                    break;

                case eprosima::fastdds::statistics::PUBLICATION_THROUGHPUT:
                case eprosima::fastdds::statistics::SUBSCRIPTION_THROUGHPUT:
                    scdr << data.entity_data()
                        ;
                    break;

                case eprosima::fastdds::statistics::RTPS_SENT:
                case eprosima::fastdds::statistics::RTPS_LOST:
                    scdr << data.entity2locator_traffic()
                        ;
                    break;

                case eprosima::fastdds::statistics::RESENT_DATAS:
                case eprosima::fastdds::statistics::HEARTBEAT_COUNT:
                case eprosima::fastdds::statistics::ACKNACK_COUNT:
                case eprosima::fastdds::statistics::NACKFRAG_COUNT:
                case eprosima::fastdds::statistics::GAP_COUNT:
                case eprosima::fastdds::statistics::DATA_COUNT:
                case eprosima::fastdds::statistics::PDP_PACKETS:
                case eprosima::fastdds::statistics::EDP_PACKETS:
                    scdr << data.entity_count()
                        ;
                    break;

                case eprosima::fastdds::statistics::DISCOVERED_ENTITY:
                    scdr << data.discovery_time()
                        ;
                    break;

                case eprosima::fastdds::statistics::SAMPLE_DATAS:
                    scdr << data.sample_identity_count()
                        ;
                    break;

                case eprosima::fastdds::statistics::PHYSICAL_DATA:
                    scdr << data.physical_data()
                        ;
                    break;

        default:
            break;
    }
#else
    scdr << eprosima::fastcdr::MemberId(0) << data._d();

    switch (data._d())
    {
                case eprosima::fastdds::statistics::HISTORY2HISTORY_LATENCY:
                    scdr << eprosima::fastcdr::MemberId(0) << data.writer_reader_data();
                    break;

                case eprosima::fastdds::statistics::NETWORK_LATENCY:
                    scdr << eprosima::fastcdr::MemberId(1) << data.locator2locator_data();
                    break;

                case eprosima::fastdds::statistics::PUBLICATION_THROUGHPUT:
                case eprosima::fastdds::statistics::SUBSCRIPTION_THROUGHPUT:
                    scdr << eprosima::fastcdr::MemberId(2) << data.entity_data();
                    break;

                case eprosima::fastdds::statistics::RTPS_SENT:
                case eprosima::fastdds::statistics::RTPS_LOST:
                    scdr << eprosima::fastcdr::MemberId(3) << data.entity2locator_traffic();
                    break;

                case eprosima::fastdds::statistics::RESENT_DATAS:
                case eprosima::fastdds::statistics::HEARTBEAT_COUNT:
                case eprosima::fastdds::statistics::ACKNACK_COUNT:
                case eprosima::fastdds::statistics::NACKFRAG_COUNT:
                case eprosima::fastdds::statistics::GAP_COUNT:
                case eprosima::fastdds::statistics::DATA_COUNT:
                case eprosima::fastdds::statistics::PDP_PACKETS:
                case eprosima::fastdds::statistics::EDP_PACKETS:
                    scdr << eprosima::fastcdr::MemberId(4) << data.entity_count();
                    break;

                case eprosima::fastdds::statistics::DISCOVERED_ENTITY:
                    scdr << eprosima::fastcdr::MemberId(5) << data.discovery_time();
                    break;

                case eprosima::fastdds::statistics::SAMPLE_DATAS:
                    scdr << eprosima::fastcdr::MemberId(6) << data.sample_identity_count();
                    break;

                case eprosima::fastdds::statistics::PHYSICAL_DATA:
                    scdr << eprosima::fastcdr::MemberId(7) << data.physical_data();
                    break;

        default:
            break;
    }
#endif // FASTCDR_VERSION_MAJOR == 1

#if FASTCDR_VERSION_MAJOR > 1
    scdr.end_serialize_type(current_state);
#endif // FASTCDR_VERSION_MAJOR > 1
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        eprosima::fastdds::statistics::Data& data)
{
    using namespace eprosima::fastdds::statistics;

#if FASTCDR_VERSION_MAJOR == 1

    cdr >> data._d();

    switch (data._d())
    {
                        case eprosima::fastdds::statistics::HISTORY2HISTORY_LATENCY:
                            cdr >> data.writer_reader_data();
                        break;

                        case eprosima::fastdds::statistics::NETWORK_LATENCY:
                            cdr >> data.locator2locator_data();
                        break;

                        case eprosima::fastdds::statistics::PUBLICATION_THROUGHPUT:
                        case eprosima::fastdds::statistics::SUBSCRIPTION_THROUGHPUT:
                            cdr >> data.entity_data();
                        break;

                        case eprosima::fastdds::statistics::RTPS_SENT:
                        case eprosima::fastdds::statistics::RTPS_LOST:
                            cdr >> data.entity2locator_traffic();
                        break;

                        case eprosima::fastdds::statistics::RESENT_DATAS:
                        case eprosima::fastdds::statistics::HEARTBEAT_COUNT:
                        case eprosima::fastdds::statistics::ACKNACK_COUNT:
                        case eprosima::fastdds::statistics::NACKFRAG_COUNT:
                        case eprosima::fastdds::statistics::GAP_COUNT:
                        case eprosima::fastdds::statistics::DATA_COUNT:
                        case eprosima::fastdds::statistics::PDP_PACKETS:
                        case eprosima::fastdds::statistics::EDP_PACKETS:
                            cdr >> data.entity_count();
                        break;

                        case eprosima::fastdds::statistics::DISCOVERED_ENTITY:
                            cdr >> data.discovery_time();
                        break;

                        case eprosima::fastdds::statistics::SAMPLE_DATAS:
                            cdr >> data.sample_identity_count();
                        break;

                        case eprosima::fastdds::statistics::PHYSICAL_DATA:
                            cdr >> data.physical_data();
                        break;

    }
#else
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                    case 0:
                        dcdr >> data._d();
                        break;
                    default:
                        switch (data._d())
                        {
                                                        case eprosima::fastdds::statistics::HISTORY2HISTORY_LATENCY:
                                                            dcdr >> data.writer_reader_data();
                                                            break;

                                                        case eprosima::fastdds::statistics::NETWORK_LATENCY:
                                                            dcdr >> data.locator2locator_data();
                                                            break;

                                                        case eprosima::fastdds::statistics::PUBLICATION_THROUGHPUT:
                                                        case eprosima::fastdds::statistics::SUBSCRIPTION_THROUGHPUT:
                                                            dcdr >> data.entity_data();
                                                            break;

                                                        case eprosima::fastdds::statistics::RTPS_SENT:
                                                        case eprosima::fastdds::statistics::RTPS_LOST:
                                                            dcdr >> data.entity2locator_traffic();
                                                            break;

                                                        case eprosima::fastdds::statistics::RESENT_DATAS:
                                                        case eprosima::fastdds::statistics::HEARTBEAT_COUNT:
                                                        case eprosima::fastdds::statistics::ACKNACK_COUNT:
                                                        case eprosima::fastdds::statistics::NACKFRAG_COUNT:
                                                        case eprosima::fastdds::statistics::GAP_COUNT:
                                                        case eprosima::fastdds::statistics::DATA_COUNT:
                                                        case eprosima::fastdds::statistics::PDP_PACKETS:
                                                        case eprosima::fastdds::statistics::EDP_PACKETS:
                                                            dcdr >> data.entity_count();
                                                            break;

                                                        case eprosima::fastdds::statistics::DISCOVERED_ENTITY:
                                                            dcdr >> data.discovery_time();
                                                            break;

                                                        case eprosima::fastdds::statistics::SAMPLE_DATAS:
                                                            dcdr >> data.sample_identity_count();
                                                            break;

                                                        case eprosima::fastdds::statistics::PHYSICAL_DATA:
                                                            dcdr >> data.physical_data();
                                                            break;

                            default:
                                break;
                        }
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
#endif // FASTCDR_VERSION_MAJOR == 1
}





} // namespace fastcdr
} // namespace eprosima

#endif // _FAST_DDS_GENERATED_EPROSIMA_FASTDDS_STATISTICS_TYPESCDRAUX_IPP_

