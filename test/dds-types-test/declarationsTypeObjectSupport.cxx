// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file declarationsTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen (version: 4.1.0).
 */

#include "declarationsTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>
#include "declarations.hpp"


using namespace eprosima::fastdds::dds::xtypes;

void register_RecursiveUnboundedSeqForwardStruct_type_identifier(
        TypeIdentifierPair& type_ids_RecursiveUnboundedSeqForwardStruct)
{
    ReturnCode_t return_code_RecursiveUnboundedSeqForwardStruct {eprosima::fastdds::dds::RETCODE_OK};
    return_code_RecursiveUnboundedSeqForwardStruct =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "RecursiveUnboundedSeqForwardStruct", type_ids_RecursiveUnboundedSeqForwardStruct);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_RecursiveUnboundedSeqForwardStruct)
    {
        AliasTypeFlag alias_flags_RecursiveUnboundedSeqForwardStruct = 0;
        QualifiedTypeName type_name_RecursiveUnboundedSeqForwardStruct = "RecursiveUnboundedSeqForwardStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_RecursiveUnboundedSeqForwardStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_RecursiveUnboundedSeqForwardStruct;
        CompleteTypeDetail detail_RecursiveUnboundedSeqForwardStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_RecursiveUnboundedSeqForwardStruct, ann_custom_RecursiveUnboundedSeqForwardStruct, type_name_RecursiveUnboundedSeqForwardStruct.to_string());
        CompleteAliasHeader header_RecursiveUnboundedSeqForwardStruct = TypeObjectUtils::build_complete_alias_header(detail_RecursiveUnboundedSeqForwardStruct);
        AliasMemberFlag related_flags_RecursiveUnboundedSeqForwardStruct = 0;
        return_code_RecursiveUnboundedSeqForwardStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "anonymous_sequence_ForwardStruct_unbounded", type_ids_RecursiveUnboundedSeqForwardStruct);

        if (eprosima::fastdds::dds::RETCODE_OK != return_code_RecursiveUnboundedSeqForwardStruct)
        {
            return_code_RecursiveUnboundedSeqForwardStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "ForwardStruct", type_ids_RecursiveUnboundedSeqForwardStruct);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_RecursiveUnboundedSeqForwardStruct)
            {
            ::register_ForwardStruct_type_identifier(type_ids_RecursiveUnboundedSeqForwardStruct);
            }
            bool element_identifier_anonymous_sequence_ForwardStruct_unbounded_ec {false};
            TypeIdentifier* element_identifier_anonymous_sequence_ForwardStruct_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_RecursiveUnboundedSeqForwardStruct, element_identifier_anonymous_sequence_ForwardStruct_unbounded_ec))};
            if (!element_identifier_anonymous_sequence_ForwardStruct_unbounded_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Sequence element TypeIdentifier inconsistent.");
                return;
            }
            EquivalenceKind equiv_kind_anonymous_sequence_ForwardStruct_unbounded = EK_COMPLETE;
            if (TK_NONE == type_ids_RecursiveUnboundedSeqForwardStruct.type_identifier2()._d())
            {
                equiv_kind_anonymous_sequence_ForwardStruct_unbounded = EK_BOTH;
            }
            CollectionElementFlag element_flags_anonymous_sequence_ForwardStruct_unbounded = 0;
            PlainCollectionHeader header_anonymous_sequence_ForwardStruct_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_ForwardStruct_unbounded, element_flags_anonymous_sequence_ForwardStruct_unbounded);
            {
                SBound bound = 0;
                PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_ForwardStruct_unbounded, bound,
                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_ForwardStruct_unbounded));
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_ForwardStruct_unbounded", type_ids_RecursiveUnboundedSeqForwardStruct))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_sequence_ForwardStruct_unbounded already registered in TypeObjectRegistry for a different type.");
                }
            }
        }
        bool common_RecursiveUnboundedSeqForwardStruct_ec {false};
        CommonAliasBody common_RecursiveUnboundedSeqForwardStruct {TypeObjectUtils::build_common_alias_body(related_flags_RecursiveUnboundedSeqForwardStruct,
                TypeObjectUtils::retrieve_complete_type_identifier(type_ids_RecursiveUnboundedSeqForwardStruct, common_RecursiveUnboundedSeqForwardStruct_ec))};
        if (!common_RecursiveUnboundedSeqForwardStruct_ec)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "RecursiveUnboundedSeqForwardStruct related TypeIdentifier inconsistent.");
            return;
        }
        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_RecursiveUnboundedSeqForwardStruct;
        ann_custom_RecursiveUnboundedSeqForwardStruct.reset();
        CompleteAliasBody body_RecursiveUnboundedSeqForwardStruct = TypeObjectUtils::build_complete_alias_body(common_RecursiveUnboundedSeqForwardStruct,
                member_ann_builtin_RecursiveUnboundedSeqForwardStruct, ann_custom_RecursiveUnboundedSeqForwardStruct);
        CompleteAliasType alias_type_RecursiveUnboundedSeqForwardStruct = TypeObjectUtils::build_complete_alias_type(alias_flags_RecursiveUnboundedSeqForwardStruct,
                header_RecursiveUnboundedSeqForwardStruct, body_RecursiveUnboundedSeqForwardStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_alias_type_object(alias_type_RecursiveUnboundedSeqForwardStruct,
                    type_name_RecursiveUnboundedSeqForwardStruct.to_string(), type_ids_RecursiveUnboundedSeqForwardStruct))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "RecursiveUnboundedSeqForwardStruct already registered in TypeObjectRegistry for a different type.");
        }
    }
}

void register_RecursiveBoundedSeqForwardStruct_type_identifier(
        TypeIdentifierPair& type_ids_RecursiveBoundedSeqForwardStruct)
{
    ReturnCode_t return_code_RecursiveBoundedSeqForwardStruct {eprosima::fastdds::dds::RETCODE_OK};
    return_code_RecursiveBoundedSeqForwardStruct =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "RecursiveBoundedSeqForwardStruct", type_ids_RecursiveBoundedSeqForwardStruct);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_RecursiveBoundedSeqForwardStruct)
    {
        AliasTypeFlag alias_flags_RecursiveBoundedSeqForwardStruct = 0;
        QualifiedTypeName type_name_RecursiveBoundedSeqForwardStruct = "RecursiveBoundedSeqForwardStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_RecursiveBoundedSeqForwardStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_RecursiveBoundedSeqForwardStruct;
        CompleteTypeDetail detail_RecursiveBoundedSeqForwardStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_RecursiveBoundedSeqForwardStruct, ann_custom_RecursiveBoundedSeqForwardStruct, type_name_RecursiveBoundedSeqForwardStruct.to_string());
        CompleteAliasHeader header_RecursiveBoundedSeqForwardStruct = TypeObjectUtils::build_complete_alias_header(detail_RecursiveBoundedSeqForwardStruct);
        AliasMemberFlag related_flags_RecursiveBoundedSeqForwardStruct = 0;
        return_code_RecursiveBoundedSeqForwardStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "anonymous_sequence_ForwardStruct_10", type_ids_RecursiveBoundedSeqForwardStruct);

        if (eprosima::fastdds::dds::RETCODE_OK != return_code_RecursiveBoundedSeqForwardStruct)
        {
            return_code_RecursiveBoundedSeqForwardStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "ForwardStruct", type_ids_RecursiveBoundedSeqForwardStruct);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_RecursiveBoundedSeqForwardStruct)
            {
            ::register_ForwardStruct_type_identifier(type_ids_RecursiveBoundedSeqForwardStruct);
            }
            bool element_identifier_anonymous_sequence_ForwardStruct_10_ec {false};
            TypeIdentifier* element_identifier_anonymous_sequence_ForwardStruct_10 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_RecursiveBoundedSeqForwardStruct, element_identifier_anonymous_sequence_ForwardStruct_10_ec))};
            if (!element_identifier_anonymous_sequence_ForwardStruct_10_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Sequence element TypeIdentifier inconsistent.");
                return;
            }
            EquivalenceKind equiv_kind_anonymous_sequence_ForwardStruct_10 = EK_COMPLETE;
            if (TK_NONE == type_ids_RecursiveBoundedSeqForwardStruct.type_identifier2()._d())
            {
                equiv_kind_anonymous_sequence_ForwardStruct_10 = EK_BOTH;
            }
            CollectionElementFlag element_flags_anonymous_sequence_ForwardStruct_10 = 0;
            PlainCollectionHeader header_anonymous_sequence_ForwardStruct_10 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_ForwardStruct_10, element_flags_anonymous_sequence_ForwardStruct_10);
            {
                SBound bound = static_cast<SBound>(10);
                PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_ForwardStruct_10, bound,
                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_ForwardStruct_10));
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_ForwardStruct_10", type_ids_RecursiveBoundedSeqForwardStruct))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_sequence_ForwardStruct_10 already registered in TypeObjectRegistry for a different type.");
                }
            }
        }
        bool common_RecursiveBoundedSeqForwardStruct_ec {false};
        CommonAliasBody common_RecursiveBoundedSeqForwardStruct {TypeObjectUtils::build_common_alias_body(related_flags_RecursiveBoundedSeqForwardStruct,
                TypeObjectUtils::retrieve_complete_type_identifier(type_ids_RecursiveBoundedSeqForwardStruct, common_RecursiveBoundedSeqForwardStruct_ec))};
        if (!common_RecursiveBoundedSeqForwardStruct_ec)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "RecursiveBoundedSeqForwardStruct related TypeIdentifier inconsistent.");
            return;
        }
        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_RecursiveBoundedSeqForwardStruct;
        ann_custom_RecursiveBoundedSeqForwardStruct.reset();
        CompleteAliasBody body_RecursiveBoundedSeqForwardStruct = TypeObjectUtils::build_complete_alias_body(common_RecursiveBoundedSeqForwardStruct,
                member_ann_builtin_RecursiveBoundedSeqForwardStruct, ann_custom_RecursiveBoundedSeqForwardStruct);
        CompleteAliasType alias_type_RecursiveBoundedSeqForwardStruct = TypeObjectUtils::build_complete_alias_type(alias_flags_RecursiveBoundedSeqForwardStruct,
                header_RecursiveBoundedSeqForwardStruct, body_RecursiveBoundedSeqForwardStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_alias_type_object(alias_type_RecursiveBoundedSeqForwardStruct,
                    type_name_RecursiveBoundedSeqForwardStruct.to_string(), type_ids_RecursiveBoundedSeqForwardStruct))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "RecursiveBoundedSeqForwardStruct already registered in TypeObjectRegistry for a different type.");
        }
    }
}

void register_RecursiveUnboundedSeqForwardUnion_type_identifier(
        TypeIdentifierPair& type_ids_RecursiveUnboundedSeqForwardUnion)
{
    ReturnCode_t return_code_RecursiveUnboundedSeqForwardUnion {eprosima::fastdds::dds::RETCODE_OK};
    return_code_RecursiveUnboundedSeqForwardUnion =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "RecursiveUnboundedSeqForwardUnion", type_ids_RecursiveUnboundedSeqForwardUnion);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_RecursiveUnboundedSeqForwardUnion)
    {
        AliasTypeFlag alias_flags_RecursiveUnboundedSeqForwardUnion = 0;
        QualifiedTypeName type_name_RecursiveUnboundedSeqForwardUnion = "RecursiveUnboundedSeqForwardUnion";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_RecursiveUnboundedSeqForwardUnion;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_RecursiveUnboundedSeqForwardUnion;
        CompleteTypeDetail detail_RecursiveUnboundedSeqForwardUnion = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_RecursiveUnboundedSeqForwardUnion, ann_custom_RecursiveUnboundedSeqForwardUnion, type_name_RecursiveUnboundedSeqForwardUnion.to_string());
        CompleteAliasHeader header_RecursiveUnboundedSeqForwardUnion = TypeObjectUtils::build_complete_alias_header(detail_RecursiveUnboundedSeqForwardUnion);
        AliasMemberFlag related_flags_RecursiveUnboundedSeqForwardUnion = 0;
        return_code_RecursiveUnboundedSeqForwardUnion =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "anonymous_sequence_ForwardUnion_unbounded", type_ids_RecursiveUnboundedSeqForwardUnion);

        if (eprosima::fastdds::dds::RETCODE_OK != return_code_RecursiveUnboundedSeqForwardUnion)
        {
            return_code_RecursiveUnboundedSeqForwardUnion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "ForwardUnion", type_ids_RecursiveUnboundedSeqForwardUnion);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_RecursiveUnboundedSeqForwardUnion)
            {
            ::register_ForwardUnion_type_identifier(type_ids_RecursiveUnboundedSeqForwardUnion);
            }
            bool element_identifier_anonymous_sequence_ForwardUnion_unbounded_ec {false};
            TypeIdentifier* element_identifier_anonymous_sequence_ForwardUnion_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_RecursiveUnboundedSeqForwardUnion, element_identifier_anonymous_sequence_ForwardUnion_unbounded_ec))};
            if (!element_identifier_anonymous_sequence_ForwardUnion_unbounded_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Sequence element TypeIdentifier inconsistent.");
                return;
            }
            EquivalenceKind equiv_kind_anonymous_sequence_ForwardUnion_unbounded = EK_COMPLETE;
            if (TK_NONE == type_ids_RecursiveUnboundedSeqForwardUnion.type_identifier2()._d())
            {
                equiv_kind_anonymous_sequence_ForwardUnion_unbounded = EK_BOTH;
            }
            CollectionElementFlag element_flags_anonymous_sequence_ForwardUnion_unbounded = 0;
            PlainCollectionHeader header_anonymous_sequence_ForwardUnion_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_ForwardUnion_unbounded, element_flags_anonymous_sequence_ForwardUnion_unbounded);
            {
                SBound bound = 0;
                PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_ForwardUnion_unbounded, bound,
                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_ForwardUnion_unbounded));
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_ForwardUnion_unbounded", type_ids_RecursiveUnboundedSeqForwardUnion))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_sequence_ForwardUnion_unbounded already registered in TypeObjectRegistry for a different type.");
                }
            }
        }
        bool common_RecursiveUnboundedSeqForwardUnion_ec {false};
        CommonAliasBody common_RecursiveUnboundedSeqForwardUnion {TypeObjectUtils::build_common_alias_body(related_flags_RecursiveUnboundedSeqForwardUnion,
                TypeObjectUtils::retrieve_complete_type_identifier(type_ids_RecursiveUnboundedSeqForwardUnion, common_RecursiveUnboundedSeqForwardUnion_ec))};
        if (!common_RecursiveUnboundedSeqForwardUnion_ec)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "RecursiveUnboundedSeqForwardUnion related TypeIdentifier inconsistent.");
            return;
        }
        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_RecursiveUnboundedSeqForwardUnion;
        ann_custom_RecursiveUnboundedSeqForwardUnion.reset();
        CompleteAliasBody body_RecursiveUnboundedSeqForwardUnion = TypeObjectUtils::build_complete_alias_body(common_RecursiveUnboundedSeqForwardUnion,
                member_ann_builtin_RecursiveUnboundedSeqForwardUnion, ann_custom_RecursiveUnboundedSeqForwardUnion);
        CompleteAliasType alias_type_RecursiveUnboundedSeqForwardUnion = TypeObjectUtils::build_complete_alias_type(alias_flags_RecursiveUnboundedSeqForwardUnion,
                header_RecursiveUnboundedSeqForwardUnion, body_RecursiveUnboundedSeqForwardUnion);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_alias_type_object(alias_type_RecursiveUnboundedSeqForwardUnion,
                    type_name_RecursiveUnboundedSeqForwardUnion.to_string(), type_ids_RecursiveUnboundedSeqForwardUnion))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "RecursiveUnboundedSeqForwardUnion already registered in TypeObjectRegistry for a different type.");
        }
    }
}

void register_RecursiveBoundedSeqForwardUnion_type_identifier(
        TypeIdentifierPair& type_ids_RecursiveBoundedSeqForwardUnion)
{
    ReturnCode_t return_code_RecursiveBoundedSeqForwardUnion {eprosima::fastdds::dds::RETCODE_OK};
    return_code_RecursiveBoundedSeqForwardUnion =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "RecursiveBoundedSeqForwardUnion", type_ids_RecursiveBoundedSeqForwardUnion);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_RecursiveBoundedSeqForwardUnion)
    {
        AliasTypeFlag alias_flags_RecursiveBoundedSeqForwardUnion = 0;
        QualifiedTypeName type_name_RecursiveBoundedSeqForwardUnion = "RecursiveBoundedSeqForwardUnion";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_RecursiveBoundedSeqForwardUnion;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_RecursiveBoundedSeqForwardUnion;
        CompleteTypeDetail detail_RecursiveBoundedSeqForwardUnion = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_RecursiveBoundedSeqForwardUnion, ann_custom_RecursiveBoundedSeqForwardUnion, type_name_RecursiveBoundedSeqForwardUnion.to_string());
        CompleteAliasHeader header_RecursiveBoundedSeqForwardUnion = TypeObjectUtils::build_complete_alias_header(detail_RecursiveBoundedSeqForwardUnion);
        AliasMemberFlag related_flags_RecursiveBoundedSeqForwardUnion = 0;
        return_code_RecursiveBoundedSeqForwardUnion =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "anonymous_sequence_ForwardUnion_10", type_ids_RecursiveBoundedSeqForwardUnion);

        if (eprosima::fastdds::dds::RETCODE_OK != return_code_RecursiveBoundedSeqForwardUnion)
        {
            return_code_RecursiveBoundedSeqForwardUnion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "ForwardUnion", type_ids_RecursiveBoundedSeqForwardUnion);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_RecursiveBoundedSeqForwardUnion)
            {
            ::register_ForwardUnion_type_identifier(type_ids_RecursiveBoundedSeqForwardUnion);
            }
            bool element_identifier_anonymous_sequence_ForwardUnion_10_ec {false};
            TypeIdentifier* element_identifier_anonymous_sequence_ForwardUnion_10 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_RecursiveBoundedSeqForwardUnion, element_identifier_anonymous_sequence_ForwardUnion_10_ec))};
            if (!element_identifier_anonymous_sequence_ForwardUnion_10_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Sequence element TypeIdentifier inconsistent.");
                return;
            }
            EquivalenceKind equiv_kind_anonymous_sequence_ForwardUnion_10 = EK_COMPLETE;
            if (TK_NONE == type_ids_RecursiveBoundedSeqForwardUnion.type_identifier2()._d())
            {
                equiv_kind_anonymous_sequence_ForwardUnion_10 = EK_BOTH;
            }
            CollectionElementFlag element_flags_anonymous_sequence_ForwardUnion_10 = 0;
            PlainCollectionHeader header_anonymous_sequence_ForwardUnion_10 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_ForwardUnion_10, element_flags_anonymous_sequence_ForwardUnion_10);
            {
                SBound bound = static_cast<SBound>(10);
                PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_ForwardUnion_10, bound,
                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_ForwardUnion_10));
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_ForwardUnion_10", type_ids_RecursiveBoundedSeqForwardUnion))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_sequence_ForwardUnion_10 already registered in TypeObjectRegistry for a different type.");
                }
            }
        }
        bool common_RecursiveBoundedSeqForwardUnion_ec {false};
        CommonAliasBody common_RecursiveBoundedSeqForwardUnion {TypeObjectUtils::build_common_alias_body(related_flags_RecursiveBoundedSeqForwardUnion,
                TypeObjectUtils::retrieve_complete_type_identifier(type_ids_RecursiveBoundedSeqForwardUnion, common_RecursiveBoundedSeqForwardUnion_ec))};
        if (!common_RecursiveBoundedSeqForwardUnion_ec)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "RecursiveBoundedSeqForwardUnion related TypeIdentifier inconsistent.");
            return;
        }
        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_RecursiveBoundedSeqForwardUnion;
        ann_custom_RecursiveBoundedSeqForwardUnion.reset();
        CompleteAliasBody body_RecursiveBoundedSeqForwardUnion = TypeObjectUtils::build_complete_alias_body(common_RecursiveBoundedSeqForwardUnion,
                member_ann_builtin_RecursiveBoundedSeqForwardUnion, ann_custom_RecursiveBoundedSeqForwardUnion);
        CompleteAliasType alias_type_RecursiveBoundedSeqForwardUnion = TypeObjectUtils::build_complete_alias_type(alias_flags_RecursiveBoundedSeqForwardUnion,
                header_RecursiveBoundedSeqForwardUnion, body_RecursiveBoundedSeqForwardUnion);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_alias_type_object(alias_type_RecursiveBoundedSeqForwardUnion,
                    type_name_RecursiveBoundedSeqForwardUnion.to_string(), type_ids_RecursiveBoundedSeqForwardUnion))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "RecursiveBoundedSeqForwardUnion already registered in TypeObjectRegistry for a different type.");
        }
    }
}


namespace ForwardAnnotation {



} // namespace ForwardAnnotation

void register_ForwardAnnotation_type_identifier(
        TypeIdentifierPair& type_ids_ForwardAnnotation)
{
    ReturnCode_t return_code_ForwardAnnotation {eprosima::fastdds::dds::RETCODE_OK};
    return_code_ForwardAnnotation =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "ForwardAnnotation", type_ids_ForwardAnnotation);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_ForwardAnnotation)
    {
        AnnotationTypeFlag annotation_flag_ForwardAnnotation = 0;
        QualifiedTypeName annotation_name_ForwardAnnotation = "ForwardAnnotation";
        CompleteAnnotationHeader header_ForwardAnnotation = TypeObjectUtils::build_complete_annotation_header(annotation_name_ForwardAnnotation);
        CompleteAnnotationParameterSeq member_seq_ForwardAnnotation;
        {
            ReturnCode_t return_code_name;
            TypeIdentifierPair type_ids_name;
            AnnotationParameterFlag member_flags_name = 0;
            return_code_name =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_name);

            if (return_code_name != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_name))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            CommonAnnotationParameter common_name;
            if (EK_COMPLETE == type_ids_name.type_identifier1()._d() || TK_NONE == type_ids_name.type_identifier2()._d())
            {
                common_name = TypeObjectUtils::build_common_annotation_parameter(member_flags_name, type_ids_name.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_name.type_identifier2()._d())
            {
                common_name = TypeObjectUtils::build_common_annotation_parameter(member_flags_name, type_ids_name.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "name annotation parameter TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_name = "name";
            AnnotationParameterValue param_value_name = TypeObjectUtils::build_annotation_parameter_value(eprosima::fastcdr::fixed_string<128>(""));

            CompleteAnnotationParameter param_name = TypeObjectUtils::build_complete_annotation_parameter(common_name, name_name, param_value_name);
            TypeObjectUtils::add_complete_annotation_parameter(member_seq_ForwardAnnotation, param_name);
        }
        {
            ReturnCode_t return_code_value;
            TypeIdentifierPair type_ids_value;
            AnnotationParameterFlag member_flags_value = 0;
            return_code_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int16_t", type_ids_value);

            if (return_code_value != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "value annotation parameter TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonAnnotationParameter common_value;
            if (EK_COMPLETE == type_ids_value.type_identifier1()._d() || TK_NONE == type_ids_value.type_identifier2()._d())
            {
                common_value = TypeObjectUtils::build_common_annotation_parameter(member_flags_value, type_ids_value.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_value.type_identifier2()._d())
            {
                common_value = TypeObjectUtils::build_common_annotation_parameter(member_flags_value, type_ids_value.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "value annotation parameter TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_value = "value";
            AnnotationParameterValue param_value_value = TypeObjectUtils::build_annotation_parameter_value(static_cast<int16_t>(0));

            CompleteAnnotationParameter param_value = TypeObjectUtils::build_complete_annotation_parameter(common_value, name_value, param_value_value);
            TypeObjectUtils::add_complete_annotation_parameter(member_seq_ForwardAnnotation, param_value);
        }
        CompleteAnnotationType annotation_type_ForwardAnnotation = TypeObjectUtils::build_complete_annotation_type(annotation_flag_ForwardAnnotation, header_ForwardAnnotation,
                member_seq_ForwardAnnotation);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_annotation_type_object(annotation_type_ForwardAnnotation,
                    annotation_name_ForwardAnnotation.to_string(), type_ids_ForwardAnnotation))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "ForwardAnnotation already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_ForwardDeclarationsRecursiveStruct_type_identifier(
        TypeIdentifierPair& type_ids_ForwardDeclarationsRecursiveStruct)
{

    ReturnCode_t return_code_ForwardDeclarationsRecursiveStruct {eprosima::fastdds::dds::RETCODE_OK};
    return_code_ForwardDeclarationsRecursiveStruct =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "ForwardDeclarationsRecursiveStruct", type_ids_ForwardDeclarationsRecursiveStruct);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_ForwardDeclarationsRecursiveStruct)
    {
        StructTypeFlag struct_flags_ForwardDeclarationsRecursiveStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_ForwardDeclarationsRecursiveStruct = "ForwardDeclarationsRecursiveStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ForwardDeclarationsRecursiveStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ForwardDeclarationsRecursiveStruct;
        CompleteTypeDetail detail_ForwardDeclarationsRecursiveStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ForwardDeclarationsRecursiveStruct, ann_custom_ForwardDeclarationsRecursiveStruct, type_name_ForwardDeclarationsRecursiveStruct.to_string());
        CompleteStructHeader header_ForwardDeclarationsRecursiveStruct;
        header_ForwardDeclarationsRecursiveStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_ForwardDeclarationsRecursiveStruct);
        CompleteStructMemberSeq member_seq_ForwardDeclarationsRecursiveStruct;
        {
            TypeIdentifierPair type_ids_var_RecursiveUnboundedSeqForwardStruct;
            ReturnCode_t return_code_var_RecursiveUnboundedSeqForwardStruct {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_RecursiveUnboundedSeqForwardStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "RecursiveUnboundedSeqForwardStruct", type_ids_var_RecursiveUnboundedSeqForwardStruct);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_RecursiveUnboundedSeqForwardStruct)
            {
            ::register_RecursiveUnboundedSeqForwardStruct_type_identifier(type_ids_var_RecursiveUnboundedSeqForwardStruct);
            }
            StructMemberFlag member_flags_var_RecursiveUnboundedSeqForwardStruct = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_RecursiveUnboundedSeqForwardStruct = 0x00000000;
            bool common_var_RecursiveUnboundedSeqForwardStruct_ec {false};
            CommonStructMember common_var_RecursiveUnboundedSeqForwardStruct {TypeObjectUtils::build_common_struct_member(member_id_var_RecursiveUnboundedSeqForwardStruct, member_flags_var_RecursiveUnboundedSeqForwardStruct, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_RecursiveUnboundedSeqForwardStruct, common_var_RecursiveUnboundedSeqForwardStruct_ec))};
            if (!common_var_RecursiveUnboundedSeqForwardStruct_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_RecursiveUnboundedSeqForwardStruct member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_RecursiveUnboundedSeqForwardStruct = "var_RecursiveUnboundedSeqForwardStruct";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_RecursiveUnboundedSeqForwardStruct;
            ann_custom_ForwardDeclarationsRecursiveStruct.reset();
            CompleteMemberDetail detail_var_RecursiveUnboundedSeqForwardStruct = TypeObjectUtils::build_complete_member_detail(name_var_RecursiveUnboundedSeqForwardStruct, member_ann_builtin_var_RecursiveUnboundedSeqForwardStruct, ann_custom_ForwardDeclarationsRecursiveStruct);
            CompleteStructMember member_var_RecursiveUnboundedSeqForwardStruct = TypeObjectUtils::build_complete_struct_member(common_var_RecursiveUnboundedSeqForwardStruct, detail_var_RecursiveUnboundedSeqForwardStruct);
            TypeObjectUtils::add_complete_struct_member(member_seq_ForwardDeclarationsRecursiveStruct, member_var_RecursiveUnboundedSeqForwardStruct);
        }
        {
            TypeIdentifierPair type_ids_var_RecursiveBoundedSeqForwardStruct;
            ReturnCode_t return_code_var_RecursiveBoundedSeqForwardStruct {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_RecursiveBoundedSeqForwardStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "RecursiveBoundedSeqForwardStruct", type_ids_var_RecursiveBoundedSeqForwardStruct);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_RecursiveBoundedSeqForwardStruct)
            {
            ::register_RecursiveBoundedSeqForwardStruct_type_identifier(type_ids_var_RecursiveBoundedSeqForwardStruct);
            }
            StructMemberFlag member_flags_var_RecursiveBoundedSeqForwardStruct = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_RecursiveBoundedSeqForwardStruct = 0x00000001;
            bool common_var_RecursiveBoundedSeqForwardStruct_ec {false};
            CommonStructMember common_var_RecursiveBoundedSeqForwardStruct {TypeObjectUtils::build_common_struct_member(member_id_var_RecursiveBoundedSeqForwardStruct, member_flags_var_RecursiveBoundedSeqForwardStruct, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_RecursiveBoundedSeqForwardStruct, common_var_RecursiveBoundedSeqForwardStruct_ec))};
            if (!common_var_RecursiveBoundedSeqForwardStruct_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_RecursiveBoundedSeqForwardStruct member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_RecursiveBoundedSeqForwardStruct = "var_RecursiveBoundedSeqForwardStruct";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_RecursiveBoundedSeqForwardStruct;
            ann_custom_ForwardDeclarationsRecursiveStruct.reset();
            CompleteMemberDetail detail_var_RecursiveBoundedSeqForwardStruct = TypeObjectUtils::build_complete_member_detail(name_var_RecursiveBoundedSeqForwardStruct, member_ann_builtin_var_RecursiveBoundedSeqForwardStruct, ann_custom_ForwardDeclarationsRecursiveStruct);
            CompleteStructMember member_var_RecursiveBoundedSeqForwardStruct = TypeObjectUtils::build_complete_struct_member(common_var_RecursiveBoundedSeqForwardStruct, detail_var_RecursiveBoundedSeqForwardStruct);
            TypeObjectUtils::add_complete_struct_member(member_seq_ForwardDeclarationsRecursiveStruct, member_var_RecursiveBoundedSeqForwardStruct);
        }
        {
            TypeIdentifierPair type_ids_var_RecursiveUnboundedSeqForwardUnion;
            ReturnCode_t return_code_var_RecursiveUnboundedSeqForwardUnion {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_RecursiveUnboundedSeqForwardUnion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "RecursiveUnboundedSeqForwardUnion", type_ids_var_RecursiveUnboundedSeqForwardUnion);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_RecursiveUnboundedSeqForwardUnion)
            {
            ::register_RecursiveUnboundedSeqForwardUnion_type_identifier(type_ids_var_RecursiveUnboundedSeqForwardUnion);
            }
            StructMemberFlag member_flags_var_RecursiveUnboundedSeqForwardUnion = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_RecursiveUnboundedSeqForwardUnion = 0x00000002;
            bool common_var_RecursiveUnboundedSeqForwardUnion_ec {false};
            CommonStructMember common_var_RecursiveUnboundedSeqForwardUnion {TypeObjectUtils::build_common_struct_member(member_id_var_RecursiveUnboundedSeqForwardUnion, member_flags_var_RecursiveUnboundedSeqForwardUnion, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_RecursiveUnboundedSeqForwardUnion, common_var_RecursiveUnboundedSeqForwardUnion_ec))};
            if (!common_var_RecursiveUnboundedSeqForwardUnion_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_RecursiveUnboundedSeqForwardUnion member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_RecursiveUnboundedSeqForwardUnion = "var_RecursiveUnboundedSeqForwardUnion";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_RecursiveUnboundedSeqForwardUnion;
            ann_custom_ForwardDeclarationsRecursiveStruct.reset();
            CompleteMemberDetail detail_var_RecursiveUnboundedSeqForwardUnion = TypeObjectUtils::build_complete_member_detail(name_var_RecursiveUnboundedSeqForwardUnion, member_ann_builtin_var_RecursiveUnboundedSeqForwardUnion, ann_custom_ForwardDeclarationsRecursiveStruct);
            CompleteStructMember member_var_RecursiveUnboundedSeqForwardUnion = TypeObjectUtils::build_complete_struct_member(common_var_RecursiveUnboundedSeqForwardUnion, detail_var_RecursiveUnboundedSeqForwardUnion);
            TypeObjectUtils::add_complete_struct_member(member_seq_ForwardDeclarationsRecursiveStruct, member_var_RecursiveUnboundedSeqForwardUnion);
        }
        {
            TypeIdentifierPair type_ids_var_RecursiveBoundedSeqForwardUnion;
            ReturnCode_t return_code_var_RecursiveBoundedSeqForwardUnion {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_RecursiveBoundedSeqForwardUnion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "RecursiveBoundedSeqForwardUnion", type_ids_var_RecursiveBoundedSeqForwardUnion);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_RecursiveBoundedSeqForwardUnion)
            {
            ::register_RecursiveBoundedSeqForwardUnion_type_identifier(type_ids_var_RecursiveBoundedSeqForwardUnion);
            }
            StructMemberFlag member_flags_var_RecursiveBoundedSeqForwardUnion = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_RecursiveBoundedSeqForwardUnion = 0x00000003;
            bool common_var_RecursiveBoundedSeqForwardUnion_ec {false};
            CommonStructMember common_var_RecursiveBoundedSeqForwardUnion {TypeObjectUtils::build_common_struct_member(member_id_var_RecursiveBoundedSeqForwardUnion, member_flags_var_RecursiveBoundedSeqForwardUnion, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_RecursiveBoundedSeqForwardUnion, common_var_RecursiveBoundedSeqForwardUnion_ec))};
            if (!common_var_RecursiveBoundedSeqForwardUnion_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_RecursiveBoundedSeqForwardUnion member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_RecursiveBoundedSeqForwardUnion = "var_RecursiveBoundedSeqForwardUnion";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_RecursiveBoundedSeqForwardUnion;
            ann_custom_ForwardDeclarationsRecursiveStruct.reset();
            CompleteMemberDetail detail_var_RecursiveBoundedSeqForwardUnion = TypeObjectUtils::build_complete_member_detail(name_var_RecursiveBoundedSeqForwardUnion, member_ann_builtin_var_RecursiveBoundedSeqForwardUnion, ann_custom_ForwardDeclarationsRecursiveStruct);
            CompleteStructMember member_var_RecursiveBoundedSeqForwardUnion = TypeObjectUtils::build_complete_struct_member(common_var_RecursiveBoundedSeqForwardUnion, detail_var_RecursiveBoundedSeqForwardUnion);
            TypeObjectUtils::add_complete_struct_member(member_seq_ForwardDeclarationsRecursiveStruct, member_var_RecursiveBoundedSeqForwardUnion);
        }
        CompleteStructType struct_type_ForwardDeclarationsRecursiveStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_ForwardDeclarationsRecursiveStruct, header_ForwardDeclarationsRecursiveStruct, member_seq_ForwardDeclarationsRecursiveStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_ForwardDeclarationsRecursiveStruct, type_name_ForwardDeclarationsRecursiveStruct.to_string(), type_ids_ForwardDeclarationsRecursiveStruct))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "ForwardDeclarationsRecursiveStruct already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_ForwardUnion_type_identifier(
        TypeIdentifierPair& type_ids_ForwardUnion)
{
    ReturnCode_t return_code_ForwardUnion {eprosima::fastdds::dds::RETCODE_OK};
    return_code_ForwardUnion =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "ForwardUnion", type_ids_ForwardUnion);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_ForwardUnion)
    {
        UnionTypeFlag union_flags_ForwardUnion = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_ForwardUnion = "ForwardUnion";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ForwardUnion;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ForwardUnion;
        CompleteTypeDetail detail_ForwardUnion = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ForwardUnion, ann_custom_ForwardUnion, type_name_ForwardUnion.to_string());
        CompleteUnionHeader header_ForwardUnion = TypeObjectUtils::build_complete_union_header(detail_ForwardUnion);
        UnionDiscriminatorFlag member_flags_ForwardUnion = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                false);
        return_code_ForwardUnion =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "_int32_t", type_ids_ForwardUnion);

        if (return_code_ForwardUnion != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
        CommonDiscriminatorMember common_ForwardUnion;
        if (EK_COMPLETE == type_ids_ForwardUnion.type_identifier1()._d() || TK_NONE == type_ids_ForwardUnion.type_identifier2()._d())
        {
            common_ForwardUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_ForwardUnion, type_ids_ForwardUnion.type_identifier1());
        }
        else if (EK_COMPLETE == type_ids_ForwardUnion.type_identifier2()._d())
        {
            common_ForwardUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_ForwardUnion, type_ids_ForwardUnion.type_identifier2());
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "ForwardUnion discriminator TypeIdentifier inconsistent.");
            return;
        }
        type_ann_builtin_ForwardUnion.reset();
        ann_custom_ForwardUnion.reset();
        CompleteDiscriminatorMember discriminator_ForwardUnion = TypeObjectUtils::build_complete_discriminator_member(common_ForwardUnion,
                type_ann_builtin_ForwardUnion, ann_custom_ForwardUnion);
        CompleteUnionMemberSeq member_seq_ForwardUnion;
        {
            return_code_ForwardUnion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_ForwardUnion);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_ForwardUnion)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "case_zero Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionMemberFlag member_flags_case_zero = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false);
            UnionCaseLabelSeq label_seq_case_zero;
            TypeObjectUtils::add_union_case_label(label_seq_case_zero, static_cast<int32_t>(0));
            MemberId member_id_case_zero = 0x00000001;
            bool common_case_zero_ec {false};
            CommonUnionMember common_case_zero {TypeObjectUtils::build_common_union_member(member_id_case_zero,
                    member_flags_case_zero, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_ForwardUnion,
                        common_case_zero_ec), label_seq_case_zero)};
            if (!common_case_zero_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Union case_zero member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_case_zero = "case_zero";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_case_zero;
            ann_custom_ForwardUnion.reset();
            CompleteMemberDetail detail_case_zero = TypeObjectUtils::build_complete_member_detail(name_case_zero, member_ann_builtin_case_zero, ann_custom_ForwardUnion);
            CompleteUnionMember member_case_zero = TypeObjectUtils::build_complete_union_member(common_case_zero, detail_case_zero);
            TypeObjectUtils::add_complete_union_member(member_seq_ForwardUnion, member_case_zero);
        }
        {
            return_code_ForwardUnion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_ForwardUnion);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_ForwardUnion)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "case_one Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionMemberFlag member_flags_case_one = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false);
            UnionCaseLabelSeq label_seq_case_one;
            TypeObjectUtils::add_union_case_label(label_seq_case_one, static_cast<int32_t>(1));
            MemberId member_id_case_one = 0x00000002;
            bool common_case_one_ec {false};
            CommonUnionMember common_case_one {TypeObjectUtils::build_common_union_member(member_id_case_one,
                    member_flags_case_one, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_ForwardUnion,
                        common_case_one_ec), label_seq_case_one)};
            if (!common_case_one_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Union case_one member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_case_one = "case_one";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_case_one;
            ann_custom_ForwardUnion.reset();
            CompleteMemberDetail detail_case_one = TypeObjectUtils::build_complete_member_detail(name_case_one, member_ann_builtin_case_one, ann_custom_ForwardUnion);
            CompleteUnionMember member_case_one = TypeObjectUtils::build_complete_union_member(common_case_one, detail_case_one);
            TypeObjectUtils::add_complete_union_member(member_seq_ForwardUnion, member_case_one);
        }
        CompleteUnionType union_type_ForwardUnion = TypeObjectUtils::build_complete_union_type(union_flags_ForwardUnion, header_ForwardUnion, discriminator_ForwardUnion,
                member_seq_ForwardUnion);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_union_type_object(union_type_ForwardUnion, type_name_ForwardUnion.to_string(), type_ids_ForwardUnion))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "ForwardUnion already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_ForwardStruct_type_identifier(
        TypeIdentifierPair& type_ids_ForwardStruct)
{

    ReturnCode_t return_code_ForwardStruct {eprosima::fastdds::dds::RETCODE_OK};
    return_code_ForwardStruct =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "ForwardStruct", type_ids_ForwardStruct);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_ForwardStruct)
    {
        StructTypeFlag struct_flags_ForwardStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_ForwardStruct = "ForwardStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ForwardStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ForwardStruct;
        CompleteTypeDetail detail_ForwardStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ForwardStruct, ann_custom_ForwardStruct, type_name_ForwardStruct.to_string());
        CompleteStructHeader header_ForwardStruct;
        header_ForwardStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_ForwardStruct);
        CompleteStructMemberSeq member_seq_ForwardStruct;
        {
            TypeIdentifierPair type_ids_var_short;
            ReturnCode_t return_code_var_short {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_short =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int16_t", type_ids_var_short);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_short)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "var_short Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_var_short = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_short = 0x00000000;
            bool common_var_short_ec {false};
            CommonStructMember common_var_short {TypeObjectUtils::build_common_struct_member(member_id_var_short, member_flags_var_short, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_short, common_var_short_ec))};
            if (!common_var_short_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_short member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_short = "var_short";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_short;
            ann_custom_ForwardStruct.reset();
            CompleteMemberDetail detail_var_short = TypeObjectUtils::build_complete_member_detail(name_var_short, member_ann_builtin_var_short, ann_custom_ForwardStruct);
            CompleteStructMember member_var_short = TypeObjectUtils::build_complete_struct_member(common_var_short, detail_var_short);
            TypeObjectUtils::add_complete_struct_member(member_seq_ForwardStruct, member_var_short);
        }
        {
            TypeIdentifierPair type_ids_var_long;
            ReturnCode_t return_code_var_long {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_long =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_var_long);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_long)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "var_long Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_var_long = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_long = 0x00000001;
            bool common_var_long_ec {false};
            CommonStructMember common_var_long {TypeObjectUtils::build_common_struct_member(member_id_var_long, member_flags_var_long, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_long, common_var_long_ec))};
            if (!common_var_long_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_long member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_long = "var_long";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_long;
            ann_custom_ForwardStruct.reset();
            CompleteMemberDetail detail_var_long = TypeObjectUtils::build_complete_member_detail(name_var_long, member_ann_builtin_var_long, ann_custom_ForwardStruct);
            CompleteStructMember member_var_long = TypeObjectUtils::build_complete_struct_member(common_var_long, detail_var_long);
            TypeObjectUtils::add_complete_struct_member(member_seq_ForwardStruct, member_var_long);
        }
        CompleteStructType struct_type_ForwardStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_ForwardStruct, header_ForwardStruct, member_seq_ForwardStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_ForwardStruct, type_name_ForwardStruct.to_string(), type_ids_ForwardStruct))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "ForwardStruct already registered in TypeObjectRegistry for a different type.");
        }
    }
}namespace declarations_module {
void register_ModuledRecursiveUnboundedSeqForwardStruct_type_identifier(
        TypeIdentifierPair& type_ids_ModuledRecursiveUnboundedSeqForwardStruct)
{
    ReturnCode_t return_code_ModuledRecursiveUnboundedSeqForwardStruct {eprosima::fastdds::dds::RETCODE_OK};
    return_code_ModuledRecursiveUnboundedSeqForwardStruct =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "declarations_module::ModuledRecursiveUnboundedSeqForwardStruct", type_ids_ModuledRecursiveUnboundedSeqForwardStruct);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_ModuledRecursiveUnboundedSeqForwardStruct)
    {
        AliasTypeFlag alias_flags_ModuledRecursiveUnboundedSeqForwardStruct = 0;
        QualifiedTypeName type_name_ModuledRecursiveUnboundedSeqForwardStruct = "declarations_module::ModuledRecursiveUnboundedSeqForwardStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ModuledRecursiveUnboundedSeqForwardStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ModuledRecursiveUnboundedSeqForwardStruct;
        CompleteTypeDetail detail_ModuledRecursiveUnboundedSeqForwardStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ModuledRecursiveUnboundedSeqForwardStruct, ann_custom_ModuledRecursiveUnboundedSeqForwardStruct, type_name_ModuledRecursiveUnboundedSeqForwardStruct.to_string());
        CompleteAliasHeader header_ModuledRecursiveUnboundedSeqForwardStruct = TypeObjectUtils::build_complete_alias_header(detail_ModuledRecursiveUnboundedSeqForwardStruct);
        AliasMemberFlag related_flags_ModuledRecursiveUnboundedSeqForwardStruct = 0;
        return_code_ModuledRecursiveUnboundedSeqForwardStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "anonymous_sequence_declarations_module_ModuledForwardStruct_unbounded", type_ids_ModuledRecursiveUnboundedSeqForwardStruct);

        if (eprosima::fastdds::dds::RETCODE_OK != return_code_ModuledRecursiveUnboundedSeqForwardStruct)
        {
            return_code_ModuledRecursiveUnboundedSeqForwardStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "declarations_module::ModuledForwardStruct", type_ids_ModuledRecursiveUnboundedSeqForwardStruct);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_ModuledRecursiveUnboundedSeqForwardStruct)
            {
                ::declarations_module::register_ModuledForwardStruct_type_identifier(type_ids_ModuledRecursiveUnboundedSeqForwardStruct);
            }
            bool element_identifier_anonymous_sequence_declarations_module_ModuledForwardStruct_unbounded_ec {false};
            TypeIdentifier* element_identifier_anonymous_sequence_declarations_module_ModuledForwardStruct_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_ModuledRecursiveUnboundedSeqForwardStruct, element_identifier_anonymous_sequence_declarations_module_ModuledForwardStruct_unbounded_ec))};
            if (!element_identifier_anonymous_sequence_declarations_module_ModuledForwardStruct_unbounded_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Sequence element TypeIdentifier inconsistent.");
                return;
            }
            EquivalenceKind equiv_kind_anonymous_sequence_declarations_module_ModuledForwardStruct_unbounded = EK_COMPLETE;
            if (TK_NONE == type_ids_ModuledRecursiveUnboundedSeqForwardStruct.type_identifier2()._d())
            {
                equiv_kind_anonymous_sequence_declarations_module_ModuledForwardStruct_unbounded = EK_BOTH;
            }
            CollectionElementFlag element_flags_anonymous_sequence_declarations_module_ModuledForwardStruct_unbounded = 0;
            PlainCollectionHeader header_anonymous_sequence_declarations_module_ModuledForwardStruct_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_declarations_module_ModuledForwardStruct_unbounded, element_flags_anonymous_sequence_declarations_module_ModuledForwardStruct_unbounded);
            {
                SBound bound = 0;
                PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_declarations_module_ModuledForwardStruct_unbounded, bound,
                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_declarations_module_ModuledForwardStruct_unbounded));
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_declarations_module_ModuledForwardStruct_unbounded", type_ids_ModuledRecursiveUnboundedSeqForwardStruct))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_sequence_declarations_module_ModuledForwardStruct_unbounded already registered in TypeObjectRegistry for a different type.");
                }
            }
        }
        bool common_ModuledRecursiveUnboundedSeqForwardStruct_ec {false};
        CommonAliasBody common_ModuledRecursiveUnboundedSeqForwardStruct {TypeObjectUtils::build_common_alias_body(related_flags_ModuledRecursiveUnboundedSeqForwardStruct,
                TypeObjectUtils::retrieve_complete_type_identifier(type_ids_ModuledRecursiveUnboundedSeqForwardStruct, common_ModuledRecursiveUnboundedSeqForwardStruct_ec))};
        if (!common_ModuledRecursiveUnboundedSeqForwardStruct_ec)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "declarations_module::ModuledRecursiveUnboundedSeqForwardStruct related TypeIdentifier inconsistent.");
            return;
        }
        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ModuledRecursiveUnboundedSeqForwardStruct;
        ann_custom_ModuledRecursiveUnboundedSeqForwardStruct.reset();
        CompleteAliasBody body_ModuledRecursiveUnboundedSeqForwardStruct = TypeObjectUtils::build_complete_alias_body(common_ModuledRecursiveUnboundedSeqForwardStruct,
                member_ann_builtin_ModuledRecursiveUnboundedSeqForwardStruct, ann_custom_ModuledRecursiveUnboundedSeqForwardStruct);
        CompleteAliasType alias_type_ModuledRecursiveUnboundedSeqForwardStruct = TypeObjectUtils::build_complete_alias_type(alias_flags_ModuledRecursiveUnboundedSeqForwardStruct,
                header_ModuledRecursiveUnboundedSeqForwardStruct, body_ModuledRecursiveUnboundedSeqForwardStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_alias_type_object(alias_type_ModuledRecursiveUnboundedSeqForwardStruct,
                    type_name_ModuledRecursiveUnboundedSeqForwardStruct.to_string(), type_ids_ModuledRecursiveUnboundedSeqForwardStruct))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "declarations_module::ModuledRecursiveUnboundedSeqForwardStruct already registered in TypeObjectRegistry for a different type.");
        }
    }
}

void register_ModuledRecursiveBoundedSeqForwardStruct_type_identifier(
        TypeIdentifierPair& type_ids_ModuledRecursiveBoundedSeqForwardStruct)
{
    ReturnCode_t return_code_ModuledRecursiveBoundedSeqForwardStruct {eprosima::fastdds::dds::RETCODE_OK};
    return_code_ModuledRecursiveBoundedSeqForwardStruct =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "declarations_module::ModuledRecursiveBoundedSeqForwardStruct", type_ids_ModuledRecursiveBoundedSeqForwardStruct);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_ModuledRecursiveBoundedSeqForwardStruct)
    {
        AliasTypeFlag alias_flags_ModuledRecursiveBoundedSeqForwardStruct = 0;
        QualifiedTypeName type_name_ModuledRecursiveBoundedSeqForwardStruct = "declarations_module::ModuledRecursiveBoundedSeqForwardStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ModuledRecursiveBoundedSeqForwardStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ModuledRecursiveBoundedSeqForwardStruct;
        CompleteTypeDetail detail_ModuledRecursiveBoundedSeqForwardStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ModuledRecursiveBoundedSeqForwardStruct, ann_custom_ModuledRecursiveBoundedSeqForwardStruct, type_name_ModuledRecursiveBoundedSeqForwardStruct.to_string());
        CompleteAliasHeader header_ModuledRecursiveBoundedSeqForwardStruct = TypeObjectUtils::build_complete_alias_header(detail_ModuledRecursiveBoundedSeqForwardStruct);
        AliasMemberFlag related_flags_ModuledRecursiveBoundedSeqForwardStruct = 0;
        return_code_ModuledRecursiveBoundedSeqForwardStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "anonymous_sequence_declarations_module_ModuledForwardStruct_10", type_ids_ModuledRecursiveBoundedSeqForwardStruct);

        if (eprosima::fastdds::dds::RETCODE_OK != return_code_ModuledRecursiveBoundedSeqForwardStruct)
        {
            return_code_ModuledRecursiveBoundedSeqForwardStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "declarations_module::ModuledForwardStruct", type_ids_ModuledRecursiveBoundedSeqForwardStruct);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_ModuledRecursiveBoundedSeqForwardStruct)
            {
                ::declarations_module::register_ModuledForwardStruct_type_identifier(type_ids_ModuledRecursiveBoundedSeqForwardStruct);
            }
            bool element_identifier_anonymous_sequence_declarations_module_ModuledForwardStruct_10_ec {false};
            TypeIdentifier* element_identifier_anonymous_sequence_declarations_module_ModuledForwardStruct_10 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_ModuledRecursiveBoundedSeqForwardStruct, element_identifier_anonymous_sequence_declarations_module_ModuledForwardStruct_10_ec))};
            if (!element_identifier_anonymous_sequence_declarations_module_ModuledForwardStruct_10_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Sequence element TypeIdentifier inconsistent.");
                return;
            }
            EquivalenceKind equiv_kind_anonymous_sequence_declarations_module_ModuledForwardStruct_10 = EK_COMPLETE;
            if (TK_NONE == type_ids_ModuledRecursiveBoundedSeqForwardStruct.type_identifier2()._d())
            {
                equiv_kind_anonymous_sequence_declarations_module_ModuledForwardStruct_10 = EK_BOTH;
            }
            CollectionElementFlag element_flags_anonymous_sequence_declarations_module_ModuledForwardStruct_10 = 0;
            PlainCollectionHeader header_anonymous_sequence_declarations_module_ModuledForwardStruct_10 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_declarations_module_ModuledForwardStruct_10, element_flags_anonymous_sequence_declarations_module_ModuledForwardStruct_10);
            {
                SBound bound = static_cast<SBound>(10);
                PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_declarations_module_ModuledForwardStruct_10, bound,
                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_declarations_module_ModuledForwardStruct_10));
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_declarations_module_ModuledForwardStruct_10", type_ids_ModuledRecursiveBoundedSeqForwardStruct))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_sequence_declarations_module_ModuledForwardStruct_10 already registered in TypeObjectRegistry for a different type.");
                }
            }
        }
        bool common_ModuledRecursiveBoundedSeqForwardStruct_ec {false};
        CommonAliasBody common_ModuledRecursiveBoundedSeqForwardStruct {TypeObjectUtils::build_common_alias_body(related_flags_ModuledRecursiveBoundedSeqForwardStruct,
                TypeObjectUtils::retrieve_complete_type_identifier(type_ids_ModuledRecursiveBoundedSeqForwardStruct, common_ModuledRecursiveBoundedSeqForwardStruct_ec))};
        if (!common_ModuledRecursiveBoundedSeqForwardStruct_ec)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "declarations_module::ModuledRecursiveBoundedSeqForwardStruct related TypeIdentifier inconsistent.");
            return;
        }
        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ModuledRecursiveBoundedSeqForwardStruct;
        ann_custom_ModuledRecursiveBoundedSeqForwardStruct.reset();
        CompleteAliasBody body_ModuledRecursiveBoundedSeqForwardStruct = TypeObjectUtils::build_complete_alias_body(common_ModuledRecursiveBoundedSeqForwardStruct,
                member_ann_builtin_ModuledRecursiveBoundedSeqForwardStruct, ann_custom_ModuledRecursiveBoundedSeqForwardStruct);
        CompleteAliasType alias_type_ModuledRecursiveBoundedSeqForwardStruct = TypeObjectUtils::build_complete_alias_type(alias_flags_ModuledRecursiveBoundedSeqForwardStruct,
                header_ModuledRecursiveBoundedSeqForwardStruct, body_ModuledRecursiveBoundedSeqForwardStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_alias_type_object(alias_type_ModuledRecursiveBoundedSeqForwardStruct,
                    type_name_ModuledRecursiveBoundedSeqForwardStruct.to_string(), type_ids_ModuledRecursiveBoundedSeqForwardStruct))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "declarations_module::ModuledRecursiveBoundedSeqForwardStruct already registered in TypeObjectRegistry for a different type.");
        }
    }
}

void register_ModuledRecursiveUnboundedSeqForwardUnion_type_identifier(
        TypeIdentifierPair& type_ids_ModuledRecursiveUnboundedSeqForwardUnion)
{
    ReturnCode_t return_code_ModuledRecursiveUnboundedSeqForwardUnion {eprosima::fastdds::dds::RETCODE_OK};
    return_code_ModuledRecursiveUnboundedSeqForwardUnion =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "declarations_module::ModuledRecursiveUnboundedSeqForwardUnion", type_ids_ModuledRecursiveUnboundedSeqForwardUnion);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_ModuledRecursiveUnboundedSeqForwardUnion)
    {
        AliasTypeFlag alias_flags_ModuledRecursiveUnboundedSeqForwardUnion = 0;
        QualifiedTypeName type_name_ModuledRecursiveUnboundedSeqForwardUnion = "declarations_module::ModuledRecursiveUnboundedSeqForwardUnion";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ModuledRecursiveUnboundedSeqForwardUnion;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ModuledRecursiveUnboundedSeqForwardUnion;
        CompleteTypeDetail detail_ModuledRecursiveUnboundedSeqForwardUnion = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ModuledRecursiveUnboundedSeqForwardUnion, ann_custom_ModuledRecursiveUnboundedSeqForwardUnion, type_name_ModuledRecursiveUnboundedSeqForwardUnion.to_string());
        CompleteAliasHeader header_ModuledRecursiveUnboundedSeqForwardUnion = TypeObjectUtils::build_complete_alias_header(detail_ModuledRecursiveUnboundedSeqForwardUnion);
        AliasMemberFlag related_flags_ModuledRecursiveUnboundedSeqForwardUnion = 0;
        return_code_ModuledRecursiveUnboundedSeqForwardUnion =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "anonymous_sequence_declarations_module_ModuledForwardUnion_unbounded", type_ids_ModuledRecursiveUnboundedSeqForwardUnion);

        if (eprosima::fastdds::dds::RETCODE_OK != return_code_ModuledRecursiveUnboundedSeqForwardUnion)
        {
            return_code_ModuledRecursiveUnboundedSeqForwardUnion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "declarations_module::ModuledForwardUnion", type_ids_ModuledRecursiveUnboundedSeqForwardUnion);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_ModuledRecursiveUnboundedSeqForwardUnion)
            {
                ::declarations_module::register_ModuledForwardUnion_type_identifier(type_ids_ModuledRecursiveUnboundedSeqForwardUnion);
            }
            bool element_identifier_anonymous_sequence_declarations_module_ModuledForwardUnion_unbounded_ec {false};
            TypeIdentifier* element_identifier_anonymous_sequence_declarations_module_ModuledForwardUnion_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_ModuledRecursiveUnboundedSeqForwardUnion, element_identifier_anonymous_sequence_declarations_module_ModuledForwardUnion_unbounded_ec))};
            if (!element_identifier_anonymous_sequence_declarations_module_ModuledForwardUnion_unbounded_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Sequence element TypeIdentifier inconsistent.");
                return;
            }
            EquivalenceKind equiv_kind_anonymous_sequence_declarations_module_ModuledForwardUnion_unbounded = EK_COMPLETE;
            if (TK_NONE == type_ids_ModuledRecursiveUnboundedSeqForwardUnion.type_identifier2()._d())
            {
                equiv_kind_anonymous_sequence_declarations_module_ModuledForwardUnion_unbounded = EK_BOTH;
            }
            CollectionElementFlag element_flags_anonymous_sequence_declarations_module_ModuledForwardUnion_unbounded = 0;
            PlainCollectionHeader header_anonymous_sequence_declarations_module_ModuledForwardUnion_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_declarations_module_ModuledForwardUnion_unbounded, element_flags_anonymous_sequence_declarations_module_ModuledForwardUnion_unbounded);
            {
                SBound bound = 0;
                PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_declarations_module_ModuledForwardUnion_unbounded, bound,
                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_declarations_module_ModuledForwardUnion_unbounded));
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_declarations_module_ModuledForwardUnion_unbounded", type_ids_ModuledRecursiveUnboundedSeqForwardUnion))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_sequence_declarations_module_ModuledForwardUnion_unbounded already registered in TypeObjectRegistry for a different type.");
                }
            }
        }
        bool common_ModuledRecursiveUnboundedSeqForwardUnion_ec {false};
        CommonAliasBody common_ModuledRecursiveUnboundedSeqForwardUnion {TypeObjectUtils::build_common_alias_body(related_flags_ModuledRecursiveUnboundedSeqForwardUnion,
                TypeObjectUtils::retrieve_complete_type_identifier(type_ids_ModuledRecursiveUnboundedSeqForwardUnion, common_ModuledRecursiveUnboundedSeqForwardUnion_ec))};
        if (!common_ModuledRecursiveUnboundedSeqForwardUnion_ec)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "declarations_module::ModuledRecursiveUnboundedSeqForwardUnion related TypeIdentifier inconsistent.");
            return;
        }
        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ModuledRecursiveUnboundedSeqForwardUnion;
        ann_custom_ModuledRecursiveUnboundedSeqForwardUnion.reset();
        CompleteAliasBody body_ModuledRecursiveUnboundedSeqForwardUnion = TypeObjectUtils::build_complete_alias_body(common_ModuledRecursiveUnboundedSeqForwardUnion,
                member_ann_builtin_ModuledRecursiveUnboundedSeqForwardUnion, ann_custom_ModuledRecursiveUnboundedSeqForwardUnion);
        CompleteAliasType alias_type_ModuledRecursiveUnboundedSeqForwardUnion = TypeObjectUtils::build_complete_alias_type(alias_flags_ModuledRecursiveUnboundedSeqForwardUnion,
                header_ModuledRecursiveUnboundedSeqForwardUnion, body_ModuledRecursiveUnboundedSeqForwardUnion);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_alias_type_object(alias_type_ModuledRecursiveUnboundedSeqForwardUnion,
                    type_name_ModuledRecursiveUnboundedSeqForwardUnion.to_string(), type_ids_ModuledRecursiveUnboundedSeqForwardUnion))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "declarations_module::ModuledRecursiveUnboundedSeqForwardUnion already registered in TypeObjectRegistry for a different type.");
        }
    }
}

void register_ModuledRecursiveBoundedSeqForwardUnion_type_identifier(
        TypeIdentifierPair& type_ids_ModuledRecursiveBoundedSeqForwardUnion)
{
    ReturnCode_t return_code_ModuledRecursiveBoundedSeqForwardUnion {eprosima::fastdds::dds::RETCODE_OK};
    return_code_ModuledRecursiveBoundedSeqForwardUnion =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "declarations_module::ModuledRecursiveBoundedSeqForwardUnion", type_ids_ModuledRecursiveBoundedSeqForwardUnion);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_ModuledRecursiveBoundedSeqForwardUnion)
    {
        AliasTypeFlag alias_flags_ModuledRecursiveBoundedSeqForwardUnion = 0;
        QualifiedTypeName type_name_ModuledRecursiveBoundedSeqForwardUnion = "declarations_module::ModuledRecursiveBoundedSeqForwardUnion";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ModuledRecursiveBoundedSeqForwardUnion;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ModuledRecursiveBoundedSeqForwardUnion;
        CompleteTypeDetail detail_ModuledRecursiveBoundedSeqForwardUnion = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ModuledRecursiveBoundedSeqForwardUnion, ann_custom_ModuledRecursiveBoundedSeqForwardUnion, type_name_ModuledRecursiveBoundedSeqForwardUnion.to_string());
        CompleteAliasHeader header_ModuledRecursiveBoundedSeqForwardUnion = TypeObjectUtils::build_complete_alias_header(detail_ModuledRecursiveBoundedSeqForwardUnion);
        AliasMemberFlag related_flags_ModuledRecursiveBoundedSeqForwardUnion = 0;
        return_code_ModuledRecursiveBoundedSeqForwardUnion =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "anonymous_sequence_declarations_module_ModuledForwardUnion_10", type_ids_ModuledRecursiveBoundedSeqForwardUnion);

        if (eprosima::fastdds::dds::RETCODE_OK != return_code_ModuledRecursiveBoundedSeqForwardUnion)
        {
            return_code_ModuledRecursiveBoundedSeqForwardUnion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "declarations_module::ModuledForwardUnion", type_ids_ModuledRecursiveBoundedSeqForwardUnion);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_ModuledRecursiveBoundedSeqForwardUnion)
            {
                ::declarations_module::register_ModuledForwardUnion_type_identifier(type_ids_ModuledRecursiveBoundedSeqForwardUnion);
            }
            bool element_identifier_anonymous_sequence_declarations_module_ModuledForwardUnion_10_ec {false};
            TypeIdentifier* element_identifier_anonymous_sequence_declarations_module_ModuledForwardUnion_10 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_ModuledRecursiveBoundedSeqForwardUnion, element_identifier_anonymous_sequence_declarations_module_ModuledForwardUnion_10_ec))};
            if (!element_identifier_anonymous_sequence_declarations_module_ModuledForwardUnion_10_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Sequence element TypeIdentifier inconsistent.");
                return;
            }
            EquivalenceKind equiv_kind_anonymous_sequence_declarations_module_ModuledForwardUnion_10 = EK_COMPLETE;
            if (TK_NONE == type_ids_ModuledRecursiveBoundedSeqForwardUnion.type_identifier2()._d())
            {
                equiv_kind_anonymous_sequence_declarations_module_ModuledForwardUnion_10 = EK_BOTH;
            }
            CollectionElementFlag element_flags_anonymous_sequence_declarations_module_ModuledForwardUnion_10 = 0;
            PlainCollectionHeader header_anonymous_sequence_declarations_module_ModuledForwardUnion_10 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_declarations_module_ModuledForwardUnion_10, element_flags_anonymous_sequence_declarations_module_ModuledForwardUnion_10);
            {
                SBound bound = static_cast<SBound>(10);
                PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_declarations_module_ModuledForwardUnion_10, bound,
                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_declarations_module_ModuledForwardUnion_10));
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_declarations_module_ModuledForwardUnion_10", type_ids_ModuledRecursiveBoundedSeqForwardUnion))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_sequence_declarations_module_ModuledForwardUnion_10 already registered in TypeObjectRegistry for a different type.");
                }
            }
        }
        bool common_ModuledRecursiveBoundedSeqForwardUnion_ec {false};
        CommonAliasBody common_ModuledRecursiveBoundedSeqForwardUnion {TypeObjectUtils::build_common_alias_body(related_flags_ModuledRecursiveBoundedSeqForwardUnion,
                TypeObjectUtils::retrieve_complete_type_identifier(type_ids_ModuledRecursiveBoundedSeqForwardUnion, common_ModuledRecursiveBoundedSeqForwardUnion_ec))};
        if (!common_ModuledRecursiveBoundedSeqForwardUnion_ec)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "declarations_module::ModuledRecursiveBoundedSeqForwardUnion related TypeIdentifier inconsistent.");
            return;
        }
        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ModuledRecursiveBoundedSeqForwardUnion;
        ann_custom_ModuledRecursiveBoundedSeqForwardUnion.reset();
        CompleteAliasBody body_ModuledRecursiveBoundedSeqForwardUnion = TypeObjectUtils::build_complete_alias_body(common_ModuledRecursiveBoundedSeqForwardUnion,
                member_ann_builtin_ModuledRecursiveBoundedSeqForwardUnion, ann_custom_ModuledRecursiveBoundedSeqForwardUnion);
        CompleteAliasType alias_type_ModuledRecursiveBoundedSeqForwardUnion = TypeObjectUtils::build_complete_alias_type(alias_flags_ModuledRecursiveBoundedSeqForwardUnion,
                header_ModuledRecursiveBoundedSeqForwardUnion, body_ModuledRecursiveBoundedSeqForwardUnion);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_alias_type_object(alias_type_ModuledRecursiveBoundedSeqForwardUnion,
                    type_name_ModuledRecursiveBoundedSeqForwardUnion.to_string(), type_ids_ModuledRecursiveBoundedSeqForwardUnion))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "declarations_module::ModuledRecursiveBoundedSeqForwardUnion already registered in TypeObjectRegistry for a different type.");
        }
    }
}

// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_ForwardStruct_type_identifier(
        TypeIdentifierPair& type_ids_ForwardStruct)
{

    ReturnCode_t return_code_ForwardStruct {eprosima::fastdds::dds::RETCODE_OK};
    return_code_ForwardStruct =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "declarations_module::ForwardStruct", type_ids_ForwardStruct);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_ForwardStruct)
    {
        StructTypeFlag struct_flags_ForwardStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_ForwardStruct = "declarations_module::ForwardStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ForwardStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ForwardStruct;
        CompleteTypeDetail detail_ForwardStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ForwardStruct, ann_custom_ForwardStruct, type_name_ForwardStruct.to_string());
        CompleteStructHeader header_ForwardStruct;
        header_ForwardStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_ForwardStruct);
        CompleteStructMemberSeq member_seq_ForwardStruct;
        {
            TypeIdentifierPair type_ids_var_u_long_long;
            ReturnCode_t return_code_var_u_long_long {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_u_long_long =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids_var_u_long_long);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_u_long_long)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "var_u_long_long Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_var_u_long_long = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_u_long_long = 0x00000000;
            bool common_var_u_long_long_ec {false};
            CommonStructMember common_var_u_long_long {TypeObjectUtils::build_common_struct_member(member_id_var_u_long_long, member_flags_var_u_long_long, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_u_long_long, common_var_u_long_long_ec))};
            if (!common_var_u_long_long_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_u_long_long member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_u_long_long = "var_u_long_long";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_u_long_long;
            ann_custom_ForwardStruct.reset();
            CompleteMemberDetail detail_var_u_long_long = TypeObjectUtils::build_complete_member_detail(name_var_u_long_long, member_ann_builtin_var_u_long_long, ann_custom_ForwardStruct);
            CompleteStructMember member_var_u_long_long = TypeObjectUtils::build_complete_struct_member(common_var_u_long_long, detail_var_u_long_long);
            TypeObjectUtils::add_complete_struct_member(member_seq_ForwardStruct, member_var_u_long_long);
        }
        CompleteStructType struct_type_ForwardStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_ForwardStruct, header_ForwardStruct, member_seq_ForwardStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_ForwardStruct, type_name_ForwardStruct.to_string(), type_ids_ForwardStruct))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "declarations_module::ForwardStruct already registered in TypeObjectRegistry for a different type.");
        }
    }
}
} // namespace declarations_module
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_ModuledForwardDeclarationsRecursiveStruct_type_identifier(
        TypeIdentifierPair& type_ids_ModuledForwardDeclarationsRecursiveStruct)
{

    ReturnCode_t return_code_ModuledForwardDeclarationsRecursiveStruct {eprosima::fastdds::dds::RETCODE_OK};
    return_code_ModuledForwardDeclarationsRecursiveStruct =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "ModuledForwardDeclarationsRecursiveStruct", type_ids_ModuledForwardDeclarationsRecursiveStruct);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_ModuledForwardDeclarationsRecursiveStruct)
    {
        StructTypeFlag struct_flags_ModuledForwardDeclarationsRecursiveStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_ModuledForwardDeclarationsRecursiveStruct = "ModuledForwardDeclarationsRecursiveStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ModuledForwardDeclarationsRecursiveStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ModuledForwardDeclarationsRecursiveStruct;
        CompleteTypeDetail detail_ModuledForwardDeclarationsRecursiveStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ModuledForwardDeclarationsRecursiveStruct, ann_custom_ModuledForwardDeclarationsRecursiveStruct, type_name_ModuledForwardDeclarationsRecursiveStruct.to_string());
        CompleteStructHeader header_ModuledForwardDeclarationsRecursiveStruct;
        header_ModuledForwardDeclarationsRecursiveStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_ModuledForwardDeclarationsRecursiveStruct);
        CompleteStructMemberSeq member_seq_ModuledForwardDeclarationsRecursiveStruct;
        {
            TypeIdentifierPair type_ids_var_ModuledRecursiveUnboundedSeqForwardStruct;
            ReturnCode_t return_code_var_ModuledRecursiveUnboundedSeqForwardStruct {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_ModuledRecursiveUnboundedSeqForwardStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "declarations_module::ModuledRecursiveUnboundedSeqForwardStruct", type_ids_var_ModuledRecursiveUnboundedSeqForwardStruct);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_ModuledRecursiveUnboundedSeqForwardStruct)
            {
                ::declarations_module::register_ModuledRecursiveUnboundedSeqForwardStruct_type_identifier(type_ids_var_ModuledRecursiveUnboundedSeqForwardStruct);
            }
            StructMemberFlag member_flags_var_ModuledRecursiveUnboundedSeqForwardStruct = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_ModuledRecursiveUnboundedSeqForwardStruct = 0x00000000;
            bool common_var_ModuledRecursiveUnboundedSeqForwardStruct_ec {false};
            CommonStructMember common_var_ModuledRecursiveUnboundedSeqForwardStruct {TypeObjectUtils::build_common_struct_member(member_id_var_ModuledRecursiveUnboundedSeqForwardStruct, member_flags_var_ModuledRecursiveUnboundedSeqForwardStruct, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_ModuledRecursiveUnboundedSeqForwardStruct, common_var_ModuledRecursiveUnboundedSeqForwardStruct_ec))};
            if (!common_var_ModuledRecursiveUnboundedSeqForwardStruct_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_ModuledRecursiveUnboundedSeqForwardStruct member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_ModuledRecursiveUnboundedSeqForwardStruct = "var_ModuledRecursiveUnboundedSeqForwardStruct";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_ModuledRecursiveUnboundedSeqForwardStruct;
            ann_custom_ModuledForwardDeclarationsRecursiveStruct.reset();
            CompleteMemberDetail detail_var_ModuledRecursiveUnboundedSeqForwardStruct = TypeObjectUtils::build_complete_member_detail(name_var_ModuledRecursiveUnboundedSeqForwardStruct, member_ann_builtin_var_ModuledRecursiveUnboundedSeqForwardStruct, ann_custom_ModuledForwardDeclarationsRecursiveStruct);
            CompleteStructMember member_var_ModuledRecursiveUnboundedSeqForwardStruct = TypeObjectUtils::build_complete_struct_member(common_var_ModuledRecursiveUnboundedSeqForwardStruct, detail_var_ModuledRecursiveUnboundedSeqForwardStruct);
            TypeObjectUtils::add_complete_struct_member(member_seq_ModuledForwardDeclarationsRecursiveStruct, member_var_ModuledRecursiveUnboundedSeqForwardStruct);
        }
        {
            TypeIdentifierPair type_ids_var_ModuledRecursiveBoundedSeqForwardStruct;
            ReturnCode_t return_code_var_ModuledRecursiveBoundedSeqForwardStruct {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_ModuledRecursiveBoundedSeqForwardStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "declarations_module::ModuledRecursiveBoundedSeqForwardStruct", type_ids_var_ModuledRecursiveBoundedSeqForwardStruct);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_ModuledRecursiveBoundedSeqForwardStruct)
            {
                ::declarations_module::register_ModuledRecursiveBoundedSeqForwardStruct_type_identifier(type_ids_var_ModuledRecursiveBoundedSeqForwardStruct);
            }
            StructMemberFlag member_flags_var_ModuledRecursiveBoundedSeqForwardStruct = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_ModuledRecursiveBoundedSeqForwardStruct = 0x00000001;
            bool common_var_ModuledRecursiveBoundedSeqForwardStruct_ec {false};
            CommonStructMember common_var_ModuledRecursiveBoundedSeqForwardStruct {TypeObjectUtils::build_common_struct_member(member_id_var_ModuledRecursiveBoundedSeqForwardStruct, member_flags_var_ModuledRecursiveBoundedSeqForwardStruct, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_ModuledRecursiveBoundedSeqForwardStruct, common_var_ModuledRecursiveBoundedSeqForwardStruct_ec))};
            if (!common_var_ModuledRecursiveBoundedSeqForwardStruct_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_ModuledRecursiveBoundedSeqForwardStruct member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_ModuledRecursiveBoundedSeqForwardStruct = "var_ModuledRecursiveBoundedSeqForwardStruct";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_ModuledRecursiveBoundedSeqForwardStruct;
            ann_custom_ModuledForwardDeclarationsRecursiveStruct.reset();
            CompleteMemberDetail detail_var_ModuledRecursiveBoundedSeqForwardStruct = TypeObjectUtils::build_complete_member_detail(name_var_ModuledRecursiveBoundedSeqForwardStruct, member_ann_builtin_var_ModuledRecursiveBoundedSeqForwardStruct, ann_custom_ModuledForwardDeclarationsRecursiveStruct);
            CompleteStructMember member_var_ModuledRecursiveBoundedSeqForwardStruct = TypeObjectUtils::build_complete_struct_member(common_var_ModuledRecursiveBoundedSeqForwardStruct, detail_var_ModuledRecursiveBoundedSeqForwardStruct);
            TypeObjectUtils::add_complete_struct_member(member_seq_ModuledForwardDeclarationsRecursiveStruct, member_var_ModuledRecursiveBoundedSeqForwardStruct);
        }
        {
            TypeIdentifierPair type_ids_var_ModuledRecursiveUnboundedSeqForwardUnion;
            ReturnCode_t return_code_var_ModuledRecursiveUnboundedSeqForwardUnion {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_ModuledRecursiveUnboundedSeqForwardUnion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "declarations_module::ModuledRecursiveUnboundedSeqForwardUnion", type_ids_var_ModuledRecursiveUnboundedSeqForwardUnion);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_ModuledRecursiveUnboundedSeqForwardUnion)
            {
                ::declarations_module::register_ModuledRecursiveUnboundedSeqForwardUnion_type_identifier(type_ids_var_ModuledRecursiveUnboundedSeqForwardUnion);
            }
            StructMemberFlag member_flags_var_ModuledRecursiveUnboundedSeqForwardUnion = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_ModuledRecursiveUnboundedSeqForwardUnion = 0x00000002;
            bool common_var_ModuledRecursiveUnboundedSeqForwardUnion_ec {false};
            CommonStructMember common_var_ModuledRecursiveUnboundedSeqForwardUnion {TypeObjectUtils::build_common_struct_member(member_id_var_ModuledRecursiveUnboundedSeqForwardUnion, member_flags_var_ModuledRecursiveUnboundedSeqForwardUnion, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_ModuledRecursiveUnboundedSeqForwardUnion, common_var_ModuledRecursiveUnboundedSeqForwardUnion_ec))};
            if (!common_var_ModuledRecursiveUnboundedSeqForwardUnion_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_ModuledRecursiveUnboundedSeqForwardUnion member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_ModuledRecursiveUnboundedSeqForwardUnion = "var_ModuledRecursiveUnboundedSeqForwardUnion";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_ModuledRecursiveUnboundedSeqForwardUnion;
            ann_custom_ModuledForwardDeclarationsRecursiveStruct.reset();
            CompleteMemberDetail detail_var_ModuledRecursiveUnboundedSeqForwardUnion = TypeObjectUtils::build_complete_member_detail(name_var_ModuledRecursiveUnboundedSeqForwardUnion, member_ann_builtin_var_ModuledRecursiveUnboundedSeqForwardUnion, ann_custom_ModuledForwardDeclarationsRecursiveStruct);
            CompleteStructMember member_var_ModuledRecursiveUnboundedSeqForwardUnion = TypeObjectUtils::build_complete_struct_member(common_var_ModuledRecursiveUnboundedSeqForwardUnion, detail_var_ModuledRecursiveUnboundedSeqForwardUnion);
            TypeObjectUtils::add_complete_struct_member(member_seq_ModuledForwardDeclarationsRecursiveStruct, member_var_ModuledRecursiveUnboundedSeqForwardUnion);
        }
        {
            TypeIdentifierPair type_ids_var_ModuledRecursiveBoundedSeqForwardUnion;
            ReturnCode_t return_code_var_ModuledRecursiveBoundedSeqForwardUnion {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_ModuledRecursiveBoundedSeqForwardUnion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "declarations_module::ModuledRecursiveBoundedSeqForwardUnion", type_ids_var_ModuledRecursiveBoundedSeqForwardUnion);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_ModuledRecursiveBoundedSeqForwardUnion)
            {
                ::declarations_module::register_ModuledRecursiveBoundedSeqForwardUnion_type_identifier(type_ids_var_ModuledRecursiveBoundedSeqForwardUnion);
            }
            StructMemberFlag member_flags_var_ModuledRecursiveBoundedSeqForwardUnion = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_ModuledRecursiveBoundedSeqForwardUnion = 0x00000003;
            bool common_var_ModuledRecursiveBoundedSeqForwardUnion_ec {false};
            CommonStructMember common_var_ModuledRecursiveBoundedSeqForwardUnion {TypeObjectUtils::build_common_struct_member(member_id_var_ModuledRecursiveBoundedSeqForwardUnion, member_flags_var_ModuledRecursiveBoundedSeqForwardUnion, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_ModuledRecursiveBoundedSeqForwardUnion, common_var_ModuledRecursiveBoundedSeqForwardUnion_ec))};
            if (!common_var_ModuledRecursiveBoundedSeqForwardUnion_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_ModuledRecursiveBoundedSeqForwardUnion member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_ModuledRecursiveBoundedSeqForwardUnion = "var_ModuledRecursiveBoundedSeqForwardUnion";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_ModuledRecursiveBoundedSeqForwardUnion;
            ann_custom_ModuledForwardDeclarationsRecursiveStruct.reset();
            CompleteMemberDetail detail_var_ModuledRecursiveBoundedSeqForwardUnion = TypeObjectUtils::build_complete_member_detail(name_var_ModuledRecursiveBoundedSeqForwardUnion, member_ann_builtin_var_ModuledRecursiveBoundedSeqForwardUnion, ann_custom_ModuledForwardDeclarationsRecursiveStruct);
            CompleteStructMember member_var_ModuledRecursiveBoundedSeqForwardUnion = TypeObjectUtils::build_complete_struct_member(common_var_ModuledRecursiveBoundedSeqForwardUnion, detail_var_ModuledRecursiveBoundedSeqForwardUnion);
            TypeObjectUtils::add_complete_struct_member(member_seq_ModuledForwardDeclarationsRecursiveStruct, member_var_ModuledRecursiveBoundedSeqForwardUnion);
        }
        CompleteStructType struct_type_ModuledForwardDeclarationsRecursiveStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_ModuledForwardDeclarationsRecursiveStruct, header_ModuledForwardDeclarationsRecursiveStruct, member_seq_ModuledForwardDeclarationsRecursiveStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_ModuledForwardDeclarationsRecursiveStruct, type_name_ModuledForwardDeclarationsRecursiveStruct.to_string(), type_ids_ModuledForwardDeclarationsRecursiveStruct))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "ModuledForwardDeclarationsRecursiveStruct already registered in TypeObjectRegistry for a different type.");
        }
    }
}namespace declarations_module {
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_ModuledForwardStruct_type_identifier(
        TypeIdentifierPair& type_ids_ModuledForwardStruct)
{

    ReturnCode_t return_code_ModuledForwardStruct {eprosima::fastdds::dds::RETCODE_OK};
    return_code_ModuledForwardStruct =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "declarations_module::ModuledForwardStruct", type_ids_ModuledForwardStruct);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_ModuledForwardStruct)
    {
        StructTypeFlag struct_flags_ModuledForwardStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_ModuledForwardStruct = "declarations_module::ModuledForwardStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ModuledForwardStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ModuledForwardStruct;
        AppliedAnnotationSeq tmp_ann_custom_ModuledForwardStruct;
        eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim_ModuledForwardStruct;
        {
            eprosima::fastcdr::optional<AppliedAnnotationParameterSeq> applied_annotation_parameter_seq_ModuledForwardStruct;
            AppliedAnnotationParameterSeq tmp_applied_annotation_parameter_seq_ModuledForwardStruct;
        {
            NameHash paramname_hash_name = TypeObjectUtils::name_hash("name");
            AnnotationParameterValue param_value_name = TypeObjectUtils::build_annotation_parameter_value(eprosima::fastcdr::fixed_string<128>("ForwardAnnotation"));

            AppliedAnnotationParameter applied_param_name = TypeObjectUtils::build_applied_annotation_parameter(paramname_hash_name,
                    param_value_name);
            TypeObjectUtils::add_applied_annotation_parameter(tmp_applied_annotation_parameter_seq_ModuledForwardStruct, applied_param_name);
        }

        {
            NameHash paramname_hash_value = TypeObjectUtils::name_hash("value");
            AnnotationParameterValue param_value_value = TypeObjectUtils::build_annotation_parameter_value(static_cast<int16_t>(1));

            AppliedAnnotationParameter applied_param_value = TypeObjectUtils::build_applied_annotation_parameter(paramname_hash_value,
                    param_value_value);
            TypeObjectUtils::add_applied_annotation_parameter(tmp_applied_annotation_parameter_seq_ModuledForwardStruct, applied_param_value);
        }

            {
                AppliedAnnotation applied_annotation_ModuledForwardStruct;
                ReturnCode_t return_code_ForwardAnnotation {eprosima::fastdds::dds::RETCODE_OK};
                TypeIdentifierPair type_ids_ForwardAnnotation;
                return_code_ForwardAnnotation =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "ForwardAnnotation", type_ids_ForwardAnnotation);
                if (return_code_ForwardAnnotation != eprosima::fastdds::dds::RETCODE_OK)
                {
        ::register_ForwardAnnotation_type_identifier(type_ids_ForwardAnnotation);
                }
                if (!tmp_applied_annotation_parameter_seq_ModuledForwardStruct.empty())
                {
                    applied_annotation_parameter_seq_ModuledForwardStruct = tmp_applied_annotation_parameter_seq_ModuledForwardStruct;
                }
                if (EK_COMPLETE == type_ids_ForwardAnnotation.type_identifier1()._d())
                {
                    applied_annotation_ModuledForwardStruct =
                        TypeObjectUtils::build_applied_annotation(type_ids_ForwardAnnotation.type_identifier1(), applied_annotation_parameter_seq_ModuledForwardStruct);
                }
                else if (EK_COMPLETE == type_ids_ForwardAnnotation.type_identifier2()._d())
                {
                    applied_annotation_ModuledForwardStruct =
                        TypeObjectUtils::build_applied_annotation(type_ids_ForwardAnnotation.type_identifier2(), applied_annotation_parameter_seq_ModuledForwardStruct);
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "declarations_module::ModuledForwardStruct Structure: Given Annotation TypeIdentifier is inconsistent.");
                    return;
                }
                TypeObjectUtils::add_applied_annotation(tmp_ann_custom_ModuledForwardStruct, applied_annotation_ModuledForwardStruct);
            }
        }

        if (!tmp_ann_custom_ModuledForwardStruct.empty())
        {
            ann_custom_ModuledForwardStruct = tmp_ann_custom_ModuledForwardStruct;
        }

        CompleteTypeDetail detail_ModuledForwardStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ModuledForwardStruct, ann_custom_ModuledForwardStruct, type_name_ModuledForwardStruct.to_string());
        CompleteStructHeader header_ModuledForwardStruct;
        header_ModuledForwardStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_ModuledForwardStruct);
        CompleteStructMemberSeq member_seq_ModuledForwardStruct;
        {
            TypeIdentifierPair type_ids_var_short;
            ReturnCode_t return_code_var_short {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_short =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int16_t", type_ids_var_short);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_short)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "var_short Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_var_short = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_short = 0x00000000;
            bool common_var_short_ec {false};
            CommonStructMember common_var_short {TypeObjectUtils::build_common_struct_member(member_id_var_short, member_flags_var_short, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_short, common_var_short_ec))};
            if (!common_var_short_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_short member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_short = "var_short";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_short;
            ann_custom_ModuledForwardStruct.reset();
            CompleteMemberDetail detail_var_short = TypeObjectUtils::build_complete_member_detail(name_var_short, member_ann_builtin_var_short, ann_custom_ModuledForwardStruct);
            CompleteStructMember member_var_short = TypeObjectUtils::build_complete_struct_member(common_var_short, detail_var_short);
            TypeObjectUtils::add_complete_struct_member(member_seq_ModuledForwardStruct, member_var_short);
        }
        {
            TypeIdentifierPair type_ids_var_long;
            ReturnCode_t return_code_var_long {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_long =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_var_long);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_long)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "var_long Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_var_long = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_long = 0x00000001;
            bool common_var_long_ec {false};
            CommonStructMember common_var_long {TypeObjectUtils::build_common_struct_member(member_id_var_long, member_flags_var_long, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_long, common_var_long_ec))};
            if (!common_var_long_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_long member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_long = "var_long";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_long;
            ann_custom_ModuledForwardStruct.reset();
            CompleteMemberDetail detail_var_long = TypeObjectUtils::build_complete_member_detail(name_var_long, member_ann_builtin_var_long, ann_custom_ModuledForwardStruct);
            CompleteStructMember member_var_long = TypeObjectUtils::build_complete_struct_member(common_var_long, detail_var_long);
            TypeObjectUtils::add_complete_struct_member(member_seq_ModuledForwardStruct, member_var_long);
        }
        CompleteStructType struct_type_ModuledForwardStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_ModuledForwardStruct, header_ModuledForwardStruct, member_seq_ModuledForwardStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_ModuledForwardStruct, type_name_ModuledForwardStruct.to_string(), type_ids_ModuledForwardStruct))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "declarations_module::ModuledForwardStruct already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_ModuledForwardUnion_type_identifier(
        TypeIdentifierPair& type_ids_ModuledForwardUnion)
{
    ReturnCode_t return_code_ModuledForwardUnion {eprosima::fastdds::dds::RETCODE_OK};
    return_code_ModuledForwardUnion =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "declarations_module::ModuledForwardUnion", type_ids_ModuledForwardUnion);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_ModuledForwardUnion)
    {
        UnionTypeFlag union_flags_ModuledForwardUnion = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_ModuledForwardUnion = "declarations_module::ModuledForwardUnion";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ModuledForwardUnion;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ModuledForwardUnion;
        CompleteTypeDetail detail_ModuledForwardUnion = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ModuledForwardUnion, ann_custom_ModuledForwardUnion, type_name_ModuledForwardUnion.to_string());
        CompleteUnionHeader header_ModuledForwardUnion = TypeObjectUtils::build_complete_union_header(detail_ModuledForwardUnion);
        UnionDiscriminatorFlag member_flags_ModuledForwardUnion = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                false);
        return_code_ModuledForwardUnion =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "_int32_t", type_ids_ModuledForwardUnion);

        if (return_code_ModuledForwardUnion != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
        CommonDiscriminatorMember common_ModuledForwardUnion;
        if (EK_COMPLETE == type_ids_ModuledForwardUnion.type_identifier1()._d() || TK_NONE == type_ids_ModuledForwardUnion.type_identifier2()._d())
        {
            common_ModuledForwardUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_ModuledForwardUnion, type_ids_ModuledForwardUnion.type_identifier1());
        }
        else if (EK_COMPLETE == type_ids_ModuledForwardUnion.type_identifier2()._d())
        {
            common_ModuledForwardUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_ModuledForwardUnion, type_ids_ModuledForwardUnion.type_identifier2());
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "declarations_module::ModuledForwardUnion discriminator TypeIdentifier inconsistent.");
            return;
        }
        type_ann_builtin_ModuledForwardUnion.reset();
        ann_custom_ModuledForwardUnion.reset();
        CompleteDiscriminatorMember discriminator_ModuledForwardUnion = TypeObjectUtils::build_complete_discriminator_member(common_ModuledForwardUnion,
                type_ann_builtin_ModuledForwardUnion, ann_custom_ModuledForwardUnion);
        CompleteUnionMemberSeq member_seq_ModuledForwardUnion;
        {
            return_code_ModuledForwardUnion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_ModuledForwardUnion);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_ModuledForwardUnion)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "case_zero Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionMemberFlag member_flags_case_zero = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false);
            UnionCaseLabelSeq label_seq_case_zero;
            TypeObjectUtils::add_union_case_label(label_seq_case_zero, static_cast<int32_t>(long_const));
            MemberId member_id_case_zero = 0x00000001;
            bool common_case_zero_ec {false};
            CommonUnionMember common_case_zero {TypeObjectUtils::build_common_union_member(member_id_case_zero,
                    member_flags_case_zero, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_ModuledForwardUnion,
                        common_case_zero_ec), label_seq_case_zero)};
            if (!common_case_zero_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Union case_zero member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_case_zero = "case_zero";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_case_zero;
            ann_custom_ModuledForwardUnion.reset();
            CompleteMemberDetail detail_case_zero = TypeObjectUtils::build_complete_member_detail(name_case_zero, member_ann_builtin_case_zero, ann_custom_ModuledForwardUnion);
            CompleteUnionMember member_case_zero = TypeObjectUtils::build_complete_union_member(common_case_zero, detail_case_zero);
            TypeObjectUtils::add_complete_union_member(member_seq_ModuledForwardUnion, member_case_zero);
        }
        {
            return_code_ModuledForwardUnion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_ModuledForwardUnion);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_ModuledForwardUnion)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "case_one Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionMemberFlag member_flags_case_one = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false);
            UnionCaseLabelSeq label_seq_case_one;
            TypeObjectUtils::add_union_case_label(label_seq_case_one, static_cast<int32_t>(1));
            MemberId member_id_case_one = 0x00000002;
            bool common_case_one_ec {false};
            CommonUnionMember common_case_one {TypeObjectUtils::build_common_union_member(member_id_case_one,
                    member_flags_case_one, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_ModuledForwardUnion,
                        common_case_one_ec), label_seq_case_one)};
            if (!common_case_one_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Union case_one member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_case_one = "case_one";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_case_one;
            ann_custom_ModuledForwardUnion.reset();
            CompleteMemberDetail detail_case_one = TypeObjectUtils::build_complete_member_detail(name_case_one, member_ann_builtin_case_one, ann_custom_ModuledForwardUnion);
            CompleteUnionMember member_case_one = TypeObjectUtils::build_complete_union_member(common_case_one, detail_case_one);
            TypeObjectUtils::add_complete_union_member(member_seq_ModuledForwardUnion, member_case_one);
        }
        CompleteUnionType union_type_ModuledForwardUnion = TypeObjectUtils::build_complete_union_type(union_flags_ModuledForwardUnion, header_ModuledForwardUnion, discriminator_ModuledForwardUnion,
                member_seq_ModuledForwardUnion);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_union_type_object(union_type_ModuledForwardUnion, type_name_ModuledForwardUnion.to_string(), type_ids_ModuledForwardUnion))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "declarations_module::ModuledForwardUnion already registered in TypeObjectRegistry for a different type.");
        }
    }
}
} // namespace declarations_module
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_ModuledCommonNameStructure_type_identifier(
        TypeIdentifierPair& type_ids_ModuledCommonNameStructure)
{

    ReturnCode_t return_code_ModuledCommonNameStructure {eprosima::fastdds::dds::RETCODE_OK};
    return_code_ModuledCommonNameStructure =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "ModuledCommonNameStructure", type_ids_ModuledCommonNameStructure);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_ModuledCommonNameStructure)
    {
        StructTypeFlag struct_flags_ModuledCommonNameStructure = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_ModuledCommonNameStructure = "ModuledCommonNameStructure";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ModuledCommonNameStructure;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ModuledCommonNameStructure;
        CompleteTypeDetail detail_ModuledCommonNameStructure = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ModuledCommonNameStructure, ann_custom_ModuledCommonNameStructure, type_name_ModuledCommonNameStructure.to_string());
        CompleteStructHeader header_ModuledCommonNameStructure;
        header_ModuledCommonNameStructure = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_ModuledCommonNameStructure);
        CompleteStructMemberSeq member_seq_ModuledCommonNameStructure;
        {
            TypeIdentifierPair type_ids_global_struct;
            ReturnCode_t return_code_global_struct {eprosima::fastdds::dds::RETCODE_OK};
            return_code_global_struct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "ForwardStruct", type_ids_global_struct);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_global_struct)
            {
            ::register_ForwardStruct_type_identifier(type_ids_global_struct);
            }
            StructMemberFlag member_flags_global_struct = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_global_struct = 0x00000000;
            bool common_global_struct_ec {false};
            CommonStructMember common_global_struct {TypeObjectUtils::build_common_struct_member(member_id_global_struct, member_flags_global_struct, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_global_struct, common_global_struct_ec))};
            if (!common_global_struct_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure global_struct member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_global_struct = "global_struct";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_global_struct;
            ann_custom_ModuledCommonNameStructure.reset();
            CompleteMemberDetail detail_global_struct = TypeObjectUtils::build_complete_member_detail(name_global_struct, member_ann_builtin_global_struct, ann_custom_ModuledCommonNameStructure);
            CompleteStructMember member_global_struct = TypeObjectUtils::build_complete_struct_member(common_global_struct, detail_global_struct);
            TypeObjectUtils::add_complete_struct_member(member_seq_ModuledCommonNameStructure, member_global_struct);
        }
        {
            TypeIdentifierPair type_ids_namespaced_struct;
            ReturnCode_t return_code_namespaced_struct {eprosima::fastdds::dds::RETCODE_OK};
            return_code_namespaced_struct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "declarations_module::ForwardStruct", type_ids_namespaced_struct);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_namespaced_struct)
            {
                ::declarations_module::register_ForwardStruct_type_identifier(type_ids_namespaced_struct);
            }
            StructMemberFlag member_flags_namespaced_struct = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_namespaced_struct = 0x00000001;
            bool common_namespaced_struct_ec {false};
            CommonStructMember common_namespaced_struct {TypeObjectUtils::build_common_struct_member(member_id_namespaced_struct, member_flags_namespaced_struct, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_namespaced_struct, common_namespaced_struct_ec))};
            if (!common_namespaced_struct_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure namespaced_struct member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_namespaced_struct = "namespaced_struct";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_namespaced_struct;
            ann_custom_ModuledCommonNameStructure.reset();
            CompleteMemberDetail detail_namespaced_struct = TypeObjectUtils::build_complete_member_detail(name_namespaced_struct, member_ann_builtin_namespaced_struct, ann_custom_ModuledCommonNameStructure);
            CompleteStructMember member_namespaced_struct = TypeObjectUtils::build_complete_struct_member(common_namespaced_struct, detail_namespaced_struct);
            TypeObjectUtils::add_complete_struct_member(member_seq_ModuledCommonNameStructure, member_namespaced_struct);
        }
        CompleteStructType struct_type_ModuledCommonNameStructure = TypeObjectUtils::build_complete_struct_type(struct_flags_ModuledCommonNameStructure, header_ModuledCommonNameStructure, member_seq_ModuledCommonNameStructure);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_ModuledCommonNameStructure, type_name_ModuledCommonNameStructure.to_string(), type_ids_ModuledCommonNameStructure))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "ModuledCommonNameStructure already registered in TypeObjectRegistry for a different type.");
        }
    }
}
