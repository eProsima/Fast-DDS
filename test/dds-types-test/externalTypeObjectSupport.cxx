// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file externalTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen (version: 4.1.0).
 */

#include "externalTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>
#include "external.hpp"

#include "helpers/basic_inner_types.hpp"

using namespace eprosima::fastdds::dds::xtypes;

// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_short_external_type_identifier(
        TypeIdentifierPair& type_ids_short_external)
{

    ReturnCode_t return_code_short_external {eprosima::fastdds::dds::RETCODE_OK};
    return_code_short_external =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "short_external", type_ids_short_external);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_short_external)
    {
        StructTypeFlag struct_flags_short_external = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_short_external = "short_external";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_short_external;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_short_external;
        CompleteTypeDetail detail_short_external = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_short_external, ann_custom_short_external, type_name_short_external.to_string());
        CompleteStructHeader header_short_external;
        header_short_external = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_short_external);
        CompleteStructMemberSeq member_seq_short_external;
        {
            TypeIdentifierPair type_ids_value;
            ReturnCode_t return_code_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int16_t", type_ids_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "value Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, true);
            MemberId member_id_value = 0x00000000;
            bool common_value_ec {false};
            CommonStructMember common_value {TypeObjectUtils::build_common_struct_member(member_id_value, member_flags_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, common_value_ec))};
            if (!common_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_value = "value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_value;
            ann_custom_short_external.reset();
            AppliedAnnotationSeq tmp_ann_custom_value;
            eprosima::fastcdr::optional<std::string> unit_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> min_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> max_value;
            eprosima::fastcdr::optional<std::string> hash_id_value;
            if (unit_value.has_value() || min_value.has_value() || max_value.has_value() || hash_id_value.has_value())
            {
                member_ann_builtin_value = TypeObjectUtils::build_applied_builtin_member_annotations(unit_value, min_value, max_value, hash_id_value);
            }
            if (!tmp_ann_custom_value.empty())
            {
                ann_custom_short_external = tmp_ann_custom_value;
            }
            CompleteMemberDetail detail_value = TypeObjectUtils::build_complete_member_detail(name_value, member_ann_builtin_value, ann_custom_short_external);
            CompleteStructMember member_value = TypeObjectUtils::build_complete_struct_member(common_value, detail_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_short_external, member_value);
        }
        CompleteStructType struct_type_short_external = TypeObjectUtils::build_complete_struct_type(struct_flags_short_external, header_short_external, member_seq_short_external);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_short_external, type_name_short_external.to_string(), type_ids_short_external))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "short_external already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_ushort_external_type_identifier(
        TypeIdentifierPair& type_ids_ushort_external)
{

    ReturnCode_t return_code_ushort_external {eprosima::fastdds::dds::RETCODE_OK};
    return_code_ushort_external =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "ushort_external", type_ids_ushort_external);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_ushort_external)
    {
        StructTypeFlag struct_flags_ushort_external = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_ushort_external = "ushort_external";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ushort_external;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ushort_external;
        CompleteTypeDetail detail_ushort_external = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ushort_external, ann_custom_ushort_external, type_name_ushort_external.to_string());
        CompleteStructHeader header_ushort_external;
        header_ushort_external = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_ushort_external);
        CompleteStructMemberSeq member_seq_ushort_external;
        {
            TypeIdentifierPair type_ids_value;
            ReturnCode_t return_code_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint16_t", type_ids_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "value Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, true);
            MemberId member_id_value = 0x00000000;
            bool common_value_ec {false};
            CommonStructMember common_value {TypeObjectUtils::build_common_struct_member(member_id_value, member_flags_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, common_value_ec))};
            if (!common_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_value = "value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_value;
            ann_custom_ushort_external.reset();
            AppliedAnnotationSeq tmp_ann_custom_value;
            eprosima::fastcdr::optional<std::string> unit_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> min_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> max_value;
            eprosima::fastcdr::optional<std::string> hash_id_value;
            if (unit_value.has_value() || min_value.has_value() || max_value.has_value() || hash_id_value.has_value())
            {
                member_ann_builtin_value = TypeObjectUtils::build_applied_builtin_member_annotations(unit_value, min_value, max_value, hash_id_value);
            }
            if (!tmp_ann_custom_value.empty())
            {
                ann_custom_ushort_external = tmp_ann_custom_value;
            }
            CompleteMemberDetail detail_value = TypeObjectUtils::build_complete_member_detail(name_value, member_ann_builtin_value, ann_custom_ushort_external);
            CompleteStructMember member_value = TypeObjectUtils::build_complete_struct_member(common_value, detail_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_ushort_external, member_value);
        }
        CompleteStructType struct_type_ushort_external = TypeObjectUtils::build_complete_struct_type(struct_flags_ushort_external, header_ushort_external, member_seq_ushort_external);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_ushort_external, type_name_ushort_external.to_string(), type_ids_ushort_external))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "ushort_external already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_long_external_type_identifier(
        TypeIdentifierPair& type_ids_long_external)
{

    ReturnCode_t return_code_long_external {eprosima::fastdds::dds::RETCODE_OK};
    return_code_long_external =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "long_external", type_ids_long_external);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_long_external)
    {
        StructTypeFlag struct_flags_long_external = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_long_external = "long_external";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_long_external;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_long_external;
        CompleteTypeDetail detail_long_external = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_long_external, ann_custom_long_external, type_name_long_external.to_string());
        CompleteStructHeader header_long_external;
        header_long_external = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_long_external);
        CompleteStructMemberSeq member_seq_long_external;
        {
            TypeIdentifierPair type_ids_value;
            ReturnCode_t return_code_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "value Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, true);
            MemberId member_id_value = 0x00000000;
            bool common_value_ec {false};
            CommonStructMember common_value {TypeObjectUtils::build_common_struct_member(member_id_value, member_flags_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, common_value_ec))};
            if (!common_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_value = "value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_value;
            ann_custom_long_external.reset();
            AppliedAnnotationSeq tmp_ann_custom_value;
            eprosima::fastcdr::optional<std::string> unit_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> min_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> max_value;
            eprosima::fastcdr::optional<std::string> hash_id_value;
            if (unit_value.has_value() || min_value.has_value() || max_value.has_value() || hash_id_value.has_value())
            {
                member_ann_builtin_value = TypeObjectUtils::build_applied_builtin_member_annotations(unit_value, min_value, max_value, hash_id_value);
            }
            if (!tmp_ann_custom_value.empty())
            {
                ann_custom_long_external = tmp_ann_custom_value;
            }
            CompleteMemberDetail detail_value = TypeObjectUtils::build_complete_member_detail(name_value, member_ann_builtin_value, ann_custom_long_external);
            CompleteStructMember member_value = TypeObjectUtils::build_complete_struct_member(common_value, detail_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_long_external, member_value);
        }
        CompleteStructType struct_type_long_external = TypeObjectUtils::build_complete_struct_type(struct_flags_long_external, header_long_external, member_seq_long_external);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_long_external, type_name_long_external.to_string(), type_ids_long_external))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "long_external already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_ulong_external_type_identifier(
        TypeIdentifierPair& type_ids_ulong_external)
{

    ReturnCode_t return_code_ulong_external {eprosima::fastdds::dds::RETCODE_OK};
    return_code_ulong_external =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "ulong_external", type_ids_ulong_external);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_ulong_external)
    {
        StructTypeFlag struct_flags_ulong_external = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_ulong_external = "ulong_external";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ulong_external;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ulong_external;
        CompleteTypeDetail detail_ulong_external = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ulong_external, ann_custom_ulong_external, type_name_ulong_external.to_string());
        CompleteStructHeader header_ulong_external;
        header_ulong_external = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_ulong_external);
        CompleteStructMemberSeq member_seq_ulong_external;
        {
            TypeIdentifierPair type_ids_value;
            ReturnCode_t return_code_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "value Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, true);
            MemberId member_id_value = 0x00000000;
            bool common_value_ec {false};
            CommonStructMember common_value {TypeObjectUtils::build_common_struct_member(member_id_value, member_flags_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, common_value_ec))};
            if (!common_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_value = "value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_value;
            ann_custom_ulong_external.reset();
            AppliedAnnotationSeq tmp_ann_custom_value;
            eprosima::fastcdr::optional<std::string> unit_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> min_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> max_value;
            eprosima::fastcdr::optional<std::string> hash_id_value;
            if (unit_value.has_value() || min_value.has_value() || max_value.has_value() || hash_id_value.has_value())
            {
                member_ann_builtin_value = TypeObjectUtils::build_applied_builtin_member_annotations(unit_value, min_value, max_value, hash_id_value);
            }
            if (!tmp_ann_custom_value.empty())
            {
                ann_custom_ulong_external = tmp_ann_custom_value;
            }
            CompleteMemberDetail detail_value = TypeObjectUtils::build_complete_member_detail(name_value, member_ann_builtin_value, ann_custom_ulong_external);
            CompleteStructMember member_value = TypeObjectUtils::build_complete_struct_member(common_value, detail_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_ulong_external, member_value);
        }
        CompleteStructType struct_type_ulong_external = TypeObjectUtils::build_complete_struct_type(struct_flags_ulong_external, header_ulong_external, member_seq_ulong_external);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_ulong_external, type_name_ulong_external.to_string(), type_ids_ulong_external))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "ulong_external already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_longlong_external_type_identifier(
        TypeIdentifierPair& type_ids_longlong_external)
{

    ReturnCode_t return_code_longlong_external {eprosima::fastdds::dds::RETCODE_OK};
    return_code_longlong_external =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "longlong_external", type_ids_longlong_external);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_longlong_external)
    {
        StructTypeFlag struct_flags_longlong_external = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_longlong_external = "longlong_external";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_longlong_external;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_longlong_external;
        CompleteTypeDetail detail_longlong_external = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_longlong_external, ann_custom_longlong_external, type_name_longlong_external.to_string());
        CompleteStructHeader header_longlong_external;
        header_longlong_external = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_longlong_external);
        CompleteStructMemberSeq member_seq_longlong_external;
        {
            TypeIdentifierPair type_ids_value;
            ReturnCode_t return_code_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int64_t", type_ids_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "value Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, true);
            MemberId member_id_value = 0x00000000;
            bool common_value_ec {false};
            CommonStructMember common_value {TypeObjectUtils::build_common_struct_member(member_id_value, member_flags_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, common_value_ec))};
            if (!common_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_value = "value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_value;
            ann_custom_longlong_external.reset();
            AppliedAnnotationSeq tmp_ann_custom_value;
            eprosima::fastcdr::optional<std::string> unit_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> min_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> max_value;
            eprosima::fastcdr::optional<std::string> hash_id_value;
            if (unit_value.has_value() || min_value.has_value() || max_value.has_value() || hash_id_value.has_value())
            {
                member_ann_builtin_value = TypeObjectUtils::build_applied_builtin_member_annotations(unit_value, min_value, max_value, hash_id_value);
            }
            if (!tmp_ann_custom_value.empty())
            {
                ann_custom_longlong_external = tmp_ann_custom_value;
            }
            CompleteMemberDetail detail_value = TypeObjectUtils::build_complete_member_detail(name_value, member_ann_builtin_value, ann_custom_longlong_external);
            CompleteStructMember member_value = TypeObjectUtils::build_complete_struct_member(common_value, detail_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_longlong_external, member_value);
        }
        CompleteStructType struct_type_longlong_external = TypeObjectUtils::build_complete_struct_type(struct_flags_longlong_external, header_longlong_external, member_seq_longlong_external);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_longlong_external, type_name_longlong_external.to_string(), type_ids_longlong_external))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "longlong_external already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_ulonglong_external_type_identifier(
        TypeIdentifierPair& type_ids_ulonglong_external)
{

    ReturnCode_t return_code_ulonglong_external {eprosima::fastdds::dds::RETCODE_OK};
    return_code_ulonglong_external =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "ulonglong_external", type_ids_ulonglong_external);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_ulonglong_external)
    {
        StructTypeFlag struct_flags_ulonglong_external = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_ulonglong_external = "ulonglong_external";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ulonglong_external;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ulonglong_external;
        CompleteTypeDetail detail_ulonglong_external = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ulonglong_external, ann_custom_ulonglong_external, type_name_ulonglong_external.to_string());
        CompleteStructHeader header_ulonglong_external;
        header_ulonglong_external = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_ulonglong_external);
        CompleteStructMemberSeq member_seq_ulonglong_external;
        {
            TypeIdentifierPair type_ids_value;
            ReturnCode_t return_code_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "value Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, true);
            MemberId member_id_value = 0x00000000;
            bool common_value_ec {false};
            CommonStructMember common_value {TypeObjectUtils::build_common_struct_member(member_id_value, member_flags_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, common_value_ec))};
            if (!common_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_value = "value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_value;
            ann_custom_ulonglong_external.reset();
            AppliedAnnotationSeq tmp_ann_custom_value;
            eprosima::fastcdr::optional<std::string> unit_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> min_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> max_value;
            eprosima::fastcdr::optional<std::string> hash_id_value;
            if (unit_value.has_value() || min_value.has_value() || max_value.has_value() || hash_id_value.has_value())
            {
                member_ann_builtin_value = TypeObjectUtils::build_applied_builtin_member_annotations(unit_value, min_value, max_value, hash_id_value);
            }
            if (!tmp_ann_custom_value.empty())
            {
                ann_custom_ulonglong_external = tmp_ann_custom_value;
            }
            CompleteMemberDetail detail_value = TypeObjectUtils::build_complete_member_detail(name_value, member_ann_builtin_value, ann_custom_ulonglong_external);
            CompleteStructMember member_value = TypeObjectUtils::build_complete_struct_member(common_value, detail_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_ulonglong_external, member_value);
        }
        CompleteStructType struct_type_ulonglong_external = TypeObjectUtils::build_complete_struct_type(struct_flags_ulonglong_external, header_ulonglong_external, member_seq_ulonglong_external);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_ulonglong_external, type_name_ulonglong_external.to_string(), type_ids_ulonglong_external))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "ulonglong_external already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_float_external_type_identifier(
        TypeIdentifierPair& type_ids_float_external)
{

    ReturnCode_t return_code_float_external {eprosima::fastdds::dds::RETCODE_OK};
    return_code_float_external =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "float_external", type_ids_float_external);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_float_external)
    {
        StructTypeFlag struct_flags_float_external = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_float_external = "float_external";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_float_external;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_float_external;
        CompleteTypeDetail detail_float_external = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_float_external, ann_custom_float_external, type_name_float_external.to_string());
        CompleteStructHeader header_float_external;
        header_float_external = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_float_external);
        CompleteStructMemberSeq member_seq_float_external;
        {
            TypeIdentifierPair type_ids_value;
            ReturnCode_t return_code_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "value Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, true);
            MemberId member_id_value = 0x00000000;
            bool common_value_ec {false};
            CommonStructMember common_value {TypeObjectUtils::build_common_struct_member(member_id_value, member_flags_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, common_value_ec))};
            if (!common_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_value = "value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_value;
            ann_custom_float_external.reset();
            AppliedAnnotationSeq tmp_ann_custom_value;
            eprosima::fastcdr::optional<std::string> unit_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> min_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> max_value;
            eprosima::fastcdr::optional<std::string> hash_id_value;
            if (unit_value.has_value() || min_value.has_value() || max_value.has_value() || hash_id_value.has_value())
            {
                member_ann_builtin_value = TypeObjectUtils::build_applied_builtin_member_annotations(unit_value, min_value, max_value, hash_id_value);
            }
            if (!tmp_ann_custom_value.empty())
            {
                ann_custom_float_external = tmp_ann_custom_value;
            }
            CompleteMemberDetail detail_value = TypeObjectUtils::build_complete_member_detail(name_value, member_ann_builtin_value, ann_custom_float_external);
            CompleteStructMember member_value = TypeObjectUtils::build_complete_struct_member(common_value, detail_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_float_external, member_value);
        }
        CompleteStructType struct_type_float_external = TypeObjectUtils::build_complete_struct_type(struct_flags_float_external, header_float_external, member_seq_float_external);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_float_external, type_name_float_external.to_string(), type_ids_float_external))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "float_external already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_double_external_type_identifier(
        TypeIdentifierPair& type_ids_double_external)
{

    ReturnCode_t return_code_double_external {eprosima::fastdds::dds::RETCODE_OK};
    return_code_double_external =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "double_external", type_ids_double_external);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_double_external)
    {
        StructTypeFlag struct_flags_double_external = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_double_external = "double_external";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_double_external;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_double_external;
        CompleteTypeDetail detail_double_external = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_double_external, ann_custom_double_external, type_name_double_external.to_string());
        CompleteStructHeader header_double_external;
        header_double_external = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_double_external);
        CompleteStructMemberSeq member_seq_double_external;
        {
            TypeIdentifierPair type_ids_value;
            ReturnCode_t return_code_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "value Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, true);
            MemberId member_id_value = 0x00000000;
            bool common_value_ec {false};
            CommonStructMember common_value {TypeObjectUtils::build_common_struct_member(member_id_value, member_flags_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, common_value_ec))};
            if (!common_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_value = "value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_value;
            ann_custom_double_external.reset();
            AppliedAnnotationSeq tmp_ann_custom_value;
            eprosima::fastcdr::optional<std::string> unit_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> min_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> max_value;
            eprosima::fastcdr::optional<std::string> hash_id_value;
            if (unit_value.has_value() || min_value.has_value() || max_value.has_value() || hash_id_value.has_value())
            {
                member_ann_builtin_value = TypeObjectUtils::build_applied_builtin_member_annotations(unit_value, min_value, max_value, hash_id_value);
            }
            if (!tmp_ann_custom_value.empty())
            {
                ann_custom_double_external = tmp_ann_custom_value;
            }
            CompleteMemberDetail detail_value = TypeObjectUtils::build_complete_member_detail(name_value, member_ann_builtin_value, ann_custom_double_external);
            CompleteStructMember member_value = TypeObjectUtils::build_complete_struct_member(common_value, detail_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_double_external, member_value);
        }
        CompleteStructType struct_type_double_external = TypeObjectUtils::build_complete_struct_type(struct_flags_double_external, header_double_external, member_seq_double_external);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_double_external, type_name_double_external.to_string(), type_ids_double_external))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "double_external already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_longdouble_external_type_identifier(
        TypeIdentifierPair& type_ids_longdouble_external)
{

    ReturnCode_t return_code_longdouble_external {eprosima::fastdds::dds::RETCODE_OK};
    return_code_longdouble_external =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "longdouble_external", type_ids_longdouble_external);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_longdouble_external)
    {
        StructTypeFlag struct_flags_longdouble_external = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_longdouble_external = "longdouble_external";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_longdouble_external;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_longdouble_external;
        CompleteTypeDetail detail_longdouble_external = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_longdouble_external, ann_custom_longdouble_external, type_name_longdouble_external.to_string());
        CompleteStructHeader header_longdouble_external;
        header_longdouble_external = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_longdouble_external);
        CompleteStructMemberSeq member_seq_longdouble_external;
        {
            TypeIdentifierPair type_ids_value;
            ReturnCode_t return_code_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_longdouble", type_ids_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "value Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, true);
            MemberId member_id_value = 0x00000000;
            bool common_value_ec {false};
            CommonStructMember common_value {TypeObjectUtils::build_common_struct_member(member_id_value, member_flags_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, common_value_ec))};
            if (!common_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_value = "value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_value;
            ann_custom_longdouble_external.reset();
            AppliedAnnotationSeq tmp_ann_custom_value;
            eprosima::fastcdr::optional<std::string> unit_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> min_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> max_value;
            eprosima::fastcdr::optional<std::string> hash_id_value;
            if (unit_value.has_value() || min_value.has_value() || max_value.has_value() || hash_id_value.has_value())
            {
                member_ann_builtin_value = TypeObjectUtils::build_applied_builtin_member_annotations(unit_value, min_value, max_value, hash_id_value);
            }
            if (!tmp_ann_custom_value.empty())
            {
                ann_custom_longdouble_external = tmp_ann_custom_value;
            }
            CompleteMemberDetail detail_value = TypeObjectUtils::build_complete_member_detail(name_value, member_ann_builtin_value, ann_custom_longdouble_external);
            CompleteStructMember member_value = TypeObjectUtils::build_complete_struct_member(common_value, detail_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_longdouble_external, member_value);
        }
        CompleteStructType struct_type_longdouble_external = TypeObjectUtils::build_complete_struct_type(struct_flags_longdouble_external, header_longdouble_external, member_seq_longdouble_external);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_longdouble_external, type_name_longdouble_external.to_string(), type_ids_longdouble_external))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "longdouble_external already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_boolean_external_type_identifier(
        TypeIdentifierPair& type_ids_boolean_external)
{

    ReturnCode_t return_code_boolean_external {eprosima::fastdds::dds::RETCODE_OK};
    return_code_boolean_external =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "boolean_external", type_ids_boolean_external);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_boolean_external)
    {
        StructTypeFlag struct_flags_boolean_external = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_boolean_external = "boolean_external";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_boolean_external;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_boolean_external;
        CompleteTypeDetail detail_boolean_external = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_boolean_external, ann_custom_boolean_external, type_name_boolean_external.to_string());
        CompleteStructHeader header_boolean_external;
        header_boolean_external = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_boolean_external);
        CompleteStructMemberSeq member_seq_boolean_external;
        {
            TypeIdentifierPair type_ids_value;
            ReturnCode_t return_code_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "value Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, true);
            MemberId member_id_value = 0x00000000;
            bool common_value_ec {false};
            CommonStructMember common_value {TypeObjectUtils::build_common_struct_member(member_id_value, member_flags_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, common_value_ec))};
            if (!common_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_value = "value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_value;
            ann_custom_boolean_external.reset();
            AppliedAnnotationSeq tmp_ann_custom_value;
            eprosima::fastcdr::optional<std::string> unit_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> min_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> max_value;
            eprosima::fastcdr::optional<std::string> hash_id_value;
            if (unit_value.has_value() || min_value.has_value() || max_value.has_value() || hash_id_value.has_value())
            {
                member_ann_builtin_value = TypeObjectUtils::build_applied_builtin_member_annotations(unit_value, min_value, max_value, hash_id_value);
            }
            if (!tmp_ann_custom_value.empty())
            {
                ann_custom_boolean_external = tmp_ann_custom_value;
            }
            CompleteMemberDetail detail_value = TypeObjectUtils::build_complete_member_detail(name_value, member_ann_builtin_value, ann_custom_boolean_external);
            CompleteStructMember member_value = TypeObjectUtils::build_complete_struct_member(common_value, detail_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_boolean_external, member_value);
        }
        CompleteStructType struct_type_boolean_external = TypeObjectUtils::build_complete_struct_type(struct_flags_boolean_external, header_boolean_external, member_seq_boolean_external);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_boolean_external, type_name_boolean_external.to_string(), type_ids_boolean_external))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "boolean_external already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_octet_external_type_identifier(
        TypeIdentifierPair& type_ids_octet_external)
{

    ReturnCode_t return_code_octet_external {eprosima::fastdds::dds::RETCODE_OK};
    return_code_octet_external =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "octet_external", type_ids_octet_external);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_octet_external)
    {
        StructTypeFlag struct_flags_octet_external = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_octet_external = "octet_external";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_octet_external;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_octet_external;
        CompleteTypeDetail detail_octet_external = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_octet_external, ann_custom_octet_external, type_name_octet_external.to_string());
        CompleteStructHeader header_octet_external;
        header_octet_external = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_octet_external);
        CompleteStructMemberSeq member_seq_octet_external;
        {
            TypeIdentifierPair type_ids_value;
            ReturnCode_t return_code_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_byte", type_ids_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "value Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, true);
            MemberId member_id_value = 0x00000000;
            bool common_value_ec {false};
            CommonStructMember common_value {TypeObjectUtils::build_common_struct_member(member_id_value, member_flags_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, common_value_ec))};
            if (!common_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_value = "value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_value;
            ann_custom_octet_external.reset();
            AppliedAnnotationSeq tmp_ann_custom_value;
            eprosima::fastcdr::optional<std::string> unit_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> min_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> max_value;
            eprosima::fastcdr::optional<std::string> hash_id_value;
            if (unit_value.has_value() || min_value.has_value() || max_value.has_value() || hash_id_value.has_value())
            {
                member_ann_builtin_value = TypeObjectUtils::build_applied_builtin_member_annotations(unit_value, min_value, max_value, hash_id_value);
            }
            if (!tmp_ann_custom_value.empty())
            {
                ann_custom_octet_external = tmp_ann_custom_value;
            }
            CompleteMemberDetail detail_value = TypeObjectUtils::build_complete_member_detail(name_value, member_ann_builtin_value, ann_custom_octet_external);
            CompleteStructMember member_value = TypeObjectUtils::build_complete_struct_member(common_value, detail_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_octet_external, member_value);
        }
        CompleteStructType struct_type_octet_external = TypeObjectUtils::build_complete_struct_type(struct_flags_octet_external, header_octet_external, member_seq_octet_external);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_octet_external, type_name_octet_external.to_string(), type_ids_octet_external))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "octet_external already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_char_external_type_identifier(
        TypeIdentifierPair& type_ids_char_external)
{

    ReturnCode_t return_code_char_external {eprosima::fastdds::dds::RETCODE_OK};
    return_code_char_external =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "char_external", type_ids_char_external);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_char_external)
    {
        StructTypeFlag struct_flags_char_external = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_char_external = "char_external";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_char_external;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_char_external;
        CompleteTypeDetail detail_char_external = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_char_external, ann_custom_char_external, type_name_char_external.to_string());
        CompleteStructHeader header_char_external;
        header_char_external = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_char_external);
        CompleteStructMemberSeq member_seq_char_external;
        {
            TypeIdentifierPair type_ids_value;
            ReturnCode_t return_code_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_char", type_ids_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "value Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, true);
            MemberId member_id_value = 0x00000000;
            bool common_value_ec {false};
            CommonStructMember common_value {TypeObjectUtils::build_common_struct_member(member_id_value, member_flags_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, common_value_ec))};
            if (!common_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_value = "value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_value;
            ann_custom_char_external.reset();
            AppliedAnnotationSeq tmp_ann_custom_value;
            eprosima::fastcdr::optional<std::string> unit_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> min_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> max_value;
            eprosima::fastcdr::optional<std::string> hash_id_value;
            if (unit_value.has_value() || min_value.has_value() || max_value.has_value() || hash_id_value.has_value())
            {
                member_ann_builtin_value = TypeObjectUtils::build_applied_builtin_member_annotations(unit_value, min_value, max_value, hash_id_value);
            }
            if (!tmp_ann_custom_value.empty())
            {
                ann_custom_char_external = tmp_ann_custom_value;
            }
            CompleteMemberDetail detail_value = TypeObjectUtils::build_complete_member_detail(name_value, member_ann_builtin_value, ann_custom_char_external);
            CompleteStructMember member_value = TypeObjectUtils::build_complete_struct_member(common_value, detail_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_char_external, member_value);
        }
        CompleteStructType struct_type_char_external = TypeObjectUtils::build_complete_struct_type(struct_flags_char_external, header_char_external, member_seq_char_external);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_char_external, type_name_char_external.to_string(), type_ids_char_external))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "char_external already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_wchar_external_type_identifier(
        TypeIdentifierPair& type_ids_wchar_external)
{

    ReturnCode_t return_code_wchar_external {eprosima::fastdds::dds::RETCODE_OK};
    return_code_wchar_external =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "wchar_external", type_ids_wchar_external);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_wchar_external)
    {
        StructTypeFlag struct_flags_wchar_external = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_wchar_external = "wchar_external";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_wchar_external;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_wchar_external;
        CompleteTypeDetail detail_wchar_external = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_wchar_external, ann_custom_wchar_external, type_name_wchar_external.to_string());
        CompleteStructHeader header_wchar_external;
        header_wchar_external = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_wchar_external);
        CompleteStructMemberSeq member_seq_wchar_external;
        {
            TypeIdentifierPair type_ids_value;
            ReturnCode_t return_code_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_wchar_t", type_ids_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "value Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, true);
            MemberId member_id_value = 0x00000000;
            bool common_value_ec {false};
            CommonStructMember common_value {TypeObjectUtils::build_common_struct_member(member_id_value, member_flags_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, common_value_ec))};
            if (!common_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_value = "value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_value;
            ann_custom_wchar_external.reset();
            AppliedAnnotationSeq tmp_ann_custom_value;
            eprosima::fastcdr::optional<std::string> unit_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> min_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> max_value;
            eprosima::fastcdr::optional<std::string> hash_id_value;
            if (unit_value.has_value() || min_value.has_value() || max_value.has_value() || hash_id_value.has_value())
            {
                member_ann_builtin_value = TypeObjectUtils::build_applied_builtin_member_annotations(unit_value, min_value, max_value, hash_id_value);
            }
            if (!tmp_ann_custom_value.empty())
            {
                ann_custom_wchar_external = tmp_ann_custom_value;
            }
            CompleteMemberDetail detail_value = TypeObjectUtils::build_complete_member_detail(name_value, member_ann_builtin_value, ann_custom_wchar_external);
            CompleteStructMember member_value = TypeObjectUtils::build_complete_struct_member(common_value, detail_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_wchar_external, member_value);
        }
        CompleteStructType struct_type_wchar_external = TypeObjectUtils::build_complete_struct_type(struct_flags_wchar_external, header_wchar_external, member_seq_wchar_external);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_wchar_external, type_name_wchar_external.to_string(), type_ids_wchar_external))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "wchar_external already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_sequence_short_external_type_identifier(
        TypeIdentifierPair& type_ids_sequence_short_external)
{

    ReturnCode_t return_code_sequence_short_external {eprosima::fastdds::dds::RETCODE_OK};
    return_code_sequence_short_external =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "sequence_short_external", type_ids_sequence_short_external);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_sequence_short_external)
    {
        StructTypeFlag struct_flags_sequence_short_external = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_sequence_short_external = "sequence_short_external";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_sequence_short_external;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_sequence_short_external;
        CompleteTypeDetail detail_sequence_short_external = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_sequence_short_external, ann_custom_sequence_short_external, type_name_sequence_short_external.to_string());
        CompleteStructHeader header_sequence_short_external;
        header_sequence_short_external = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_sequence_short_external);
        CompleteStructMemberSeq member_seq_sequence_short_external;
        {
            TypeIdentifierPair type_ids_value;
            ReturnCode_t return_code_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_int16_t_unbounded", type_ids_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
            {
                return_code_value =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_value);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_sequence_int16_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_sequence_int16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, element_identifier_anonymous_sequence_int16_t_unbounded_ec))};
                if (!element_identifier_anonymous_sequence_int16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_int16_t_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_value.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_int16_t_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_int16_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_int16_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_int16_t_unbounded, element_flags_anonymous_sequence_int16_t_unbounded);
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_int16_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int16_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_int16_t_unbounded", type_ids_value))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_int16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, true);
            MemberId member_id_value = 0x00000000;
            bool common_value_ec {false};
            CommonStructMember common_value {TypeObjectUtils::build_common_struct_member(member_id_value, member_flags_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, common_value_ec))};
            if (!common_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_value = "value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_value;
            ann_custom_sequence_short_external.reset();
            AppliedAnnotationSeq tmp_ann_custom_value;
            eprosima::fastcdr::optional<std::string> unit_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> min_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> max_value;
            eprosima::fastcdr::optional<std::string> hash_id_value;
            if (unit_value.has_value() || min_value.has_value() || max_value.has_value() || hash_id_value.has_value())
            {
                member_ann_builtin_value = TypeObjectUtils::build_applied_builtin_member_annotations(unit_value, min_value, max_value, hash_id_value);
            }
            if (!tmp_ann_custom_value.empty())
            {
                ann_custom_sequence_short_external = tmp_ann_custom_value;
            }
            CompleteMemberDetail detail_value = TypeObjectUtils::build_complete_member_detail(name_value, member_ann_builtin_value, ann_custom_sequence_short_external);
            CompleteStructMember member_value = TypeObjectUtils::build_complete_struct_member(common_value, detail_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_sequence_short_external, member_value);
        }
        CompleteStructType struct_type_sequence_short_external = TypeObjectUtils::build_complete_struct_type(struct_flags_sequence_short_external, header_sequence_short_external, member_seq_sequence_short_external);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_sequence_short_external, type_name_sequence_short_external.to_string(), type_ids_sequence_short_external))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "sequence_short_external already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_string_unbounded_external_type_identifier(
        TypeIdentifierPair& type_ids_string_unbounded_external)
{

    ReturnCode_t return_code_string_unbounded_external {eprosima::fastdds::dds::RETCODE_OK};
    return_code_string_unbounded_external =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "string_unbounded_external", type_ids_string_unbounded_external);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_string_unbounded_external)
    {
        StructTypeFlag struct_flags_string_unbounded_external = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_string_unbounded_external = "string_unbounded_external";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_string_unbounded_external;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_string_unbounded_external;
        CompleteTypeDetail detail_string_unbounded_external = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_string_unbounded_external, ann_custom_string_unbounded_external, type_name_string_unbounded_external.to_string());
        CompleteStructHeader header_string_unbounded_external;
        header_string_unbounded_external = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_string_unbounded_external);
        CompleteStructMemberSeq member_seq_string_unbounded_external;
        {
            TypeIdentifierPair type_ids_value;
            ReturnCode_t return_code_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_value))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, true);
            MemberId member_id_value = 0x00000000;
            bool common_value_ec {false};
            CommonStructMember common_value {TypeObjectUtils::build_common_struct_member(member_id_value, member_flags_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, common_value_ec))};
            if (!common_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_value = "value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_value;
            ann_custom_string_unbounded_external.reset();
            AppliedAnnotationSeq tmp_ann_custom_value;
            eprosima::fastcdr::optional<std::string> unit_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> min_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> max_value;
            eprosima::fastcdr::optional<std::string> hash_id_value;
            if (unit_value.has_value() || min_value.has_value() || max_value.has_value() || hash_id_value.has_value())
            {
                member_ann_builtin_value = TypeObjectUtils::build_applied_builtin_member_annotations(unit_value, min_value, max_value, hash_id_value);
            }
            if (!tmp_ann_custom_value.empty())
            {
                ann_custom_string_unbounded_external = tmp_ann_custom_value;
            }
            CompleteMemberDetail detail_value = TypeObjectUtils::build_complete_member_detail(name_value, member_ann_builtin_value, ann_custom_string_unbounded_external);
            CompleteStructMember member_value = TypeObjectUtils::build_complete_struct_member(common_value, detail_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_string_unbounded_external, member_value);
        }
        CompleteStructType struct_type_string_unbounded_external = TypeObjectUtils::build_complete_struct_type(struct_flags_string_unbounded_external, header_string_unbounded_external, member_seq_string_unbounded_external);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_string_unbounded_external, type_name_string_unbounded_external.to_string(), type_ids_string_unbounded_external))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "string_unbounded_external already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_string_bounded_external_type_identifier(
        TypeIdentifierPair& type_ids_string_bounded_external)
{

    ReturnCode_t return_code_string_bounded_external {eprosima::fastdds::dds::RETCODE_OK};
    return_code_string_bounded_external =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "string_bounded_external", type_ids_string_bounded_external);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_string_bounded_external)
    {
        StructTypeFlag struct_flags_string_bounded_external = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_string_bounded_external = "string_bounded_external";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_string_bounded_external;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_string_bounded_external;
        CompleteTypeDetail detail_string_bounded_external = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_string_bounded_external, ann_custom_string_bounded_external, type_name_string_bounded_external.to_string());
        CompleteStructHeader header_string_bounded_external;
        header_string_bounded_external = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_string_bounded_external);
        CompleteStructMemberSeq member_seq_string_bounded_external;
        {
            TypeIdentifierPair type_ids_value;
            ReturnCode_t return_code_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_8", type_ids_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
            {
                {
                    SBound bound = static_cast<SBound>(8);
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_8", type_ids_value))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_8 already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, true);
            MemberId member_id_value = 0x00000000;
            bool common_value_ec {false};
            CommonStructMember common_value {TypeObjectUtils::build_common_struct_member(member_id_value, member_flags_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, common_value_ec))};
            if (!common_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_value = "value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_value;
            ann_custom_string_bounded_external.reset();
            AppliedAnnotationSeq tmp_ann_custom_value;
            eprosima::fastcdr::optional<std::string> unit_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> min_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> max_value;
            eprosima::fastcdr::optional<std::string> hash_id_value;
            if (unit_value.has_value() || min_value.has_value() || max_value.has_value() || hash_id_value.has_value())
            {
                member_ann_builtin_value = TypeObjectUtils::build_applied_builtin_member_annotations(unit_value, min_value, max_value, hash_id_value);
            }
            if (!tmp_ann_custom_value.empty())
            {
                ann_custom_string_bounded_external = tmp_ann_custom_value;
            }
            CompleteMemberDetail detail_value = TypeObjectUtils::build_complete_member_detail(name_value, member_ann_builtin_value, ann_custom_string_bounded_external);
            CompleteStructMember member_value = TypeObjectUtils::build_complete_struct_member(common_value, detail_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_string_bounded_external, member_value);
        }
        CompleteStructType struct_type_string_bounded_external = TypeObjectUtils::build_complete_struct_type(struct_flags_string_bounded_external, header_string_bounded_external, member_seq_string_bounded_external);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_string_bounded_external, type_name_string_bounded_external.to_string(), type_ids_string_bounded_external))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "string_bounded_external already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_map_short_external_type_identifier(
        TypeIdentifierPair& type_ids_map_short_external)
{

    ReturnCode_t return_code_map_short_external {eprosima::fastdds::dds::RETCODE_OK};
    return_code_map_short_external =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "map_short_external", type_ids_map_short_external);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_map_short_external)
    {
        StructTypeFlag struct_flags_map_short_external = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_map_short_external = "map_short_external";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_map_short_external;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_map_short_external;
        CompleteTypeDetail detail_map_short_external = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_map_short_external, ann_custom_map_short_external, type_name_map_short_external.to_string());
        CompleteStructHeader header_map_short_external;
        header_map_short_external = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_map_short_external);
        CompleteStructMemberSeq member_seq_map_short_external;
        {
            TypeIdentifierPair type_ids_value;
            ReturnCode_t return_code_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_int16_t_unbounded", type_ids_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
            {
                return_code_value =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_value);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int32_t_int16_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int32_t_int16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, element_identifier_anonymous_map_int32_t_int16_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_int32_t_int16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_int16_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_value =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_value);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int32_t_int16_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int32_t_int16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, key_identifier_anonymous_map_int32_t_int16_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_int32_t_int16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_int16_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_int16_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_int16_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_int16_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int16_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int16_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int16_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int16_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_int16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_int16_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_int16_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_int16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_int16_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_int16_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int32_t_int16_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_int16_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_int16_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_int16_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_int16_t_unbounded, element_flags_anonymous_map_int32_t_int16_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_int16_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_int16_t_unbounded), key_flags_anonymous_map_int32_t_int16_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_int16_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_int16_t_unbounded", type_ids_value))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_int16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, true);
            MemberId member_id_value = 0x00000000;
            bool common_value_ec {false};
            CommonStructMember common_value {TypeObjectUtils::build_common_struct_member(member_id_value, member_flags_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, common_value_ec))};
            if (!common_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_value = "value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_value;
            ann_custom_map_short_external.reset();
            AppliedAnnotationSeq tmp_ann_custom_value;
            eprosima::fastcdr::optional<std::string> unit_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> min_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> max_value;
            eprosima::fastcdr::optional<std::string> hash_id_value;
            if (unit_value.has_value() || min_value.has_value() || max_value.has_value() || hash_id_value.has_value())
            {
                member_ann_builtin_value = TypeObjectUtils::build_applied_builtin_member_annotations(unit_value, min_value, max_value, hash_id_value);
            }
            if (!tmp_ann_custom_value.empty())
            {
                ann_custom_map_short_external = tmp_ann_custom_value;
            }
            CompleteMemberDetail detail_value = TypeObjectUtils::build_complete_member_detail(name_value, member_ann_builtin_value, ann_custom_map_short_external);
            CompleteStructMember member_value = TypeObjectUtils::build_complete_struct_member(common_value, detail_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_map_short_external, member_value);
        }
        CompleteStructType struct_type_map_short_external = TypeObjectUtils::build_complete_struct_type(struct_flags_map_short_external, header_map_short_external, member_seq_map_short_external);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_map_short_external, type_name_map_short_external.to_string(), type_ids_map_short_external))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "map_short_external already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_array_short_external_type_identifier(
        TypeIdentifierPair& type_ids_array_short_external)
{

    ReturnCode_t return_code_array_short_external {eprosima::fastdds::dds::RETCODE_OK};
    return_code_array_short_external =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "array_short_external", type_ids_array_short_external);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_array_short_external)
    {
        StructTypeFlag struct_flags_array_short_external = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_array_short_external = "array_short_external";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_array_short_external;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_array_short_external;
        CompleteTypeDetail detail_array_short_external = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_array_short_external, ann_custom_array_short_external, type_name_array_short_external.to_string());
        CompleteStructHeader header_array_short_external;
        header_array_short_external = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_array_short_external);
        CompleteStructMemberSeq member_seq_array_short_external;
        {
            TypeIdentifierPair type_ids_value;
            ReturnCode_t return_code_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_int16_t_10", type_ids_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
            {
                return_code_value =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_value);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_array_int16_t_10_ec {false};
                TypeIdentifier* element_identifier_anonymous_array_int16_t_10 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, element_identifier_anonymous_array_int16_t_10_ec))};
                if (!element_identifier_anonymous_array_int16_t_10_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_int16_t_10 = EK_COMPLETE;
                if (TK_NONE == type_ids_value.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_int16_t_10 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_int16_t_10 = 0;
                PlainCollectionHeader header_anonymous_array_int16_t_10 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_int16_t_10, element_flags_anonymous_array_int16_t_10);
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(10));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_int16_t_10, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_int16_t_10));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_int16_t_10", type_ids_value))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_int16_t_10 already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, true);
            MemberId member_id_value = 0x00000000;
            bool common_value_ec {false};
            CommonStructMember common_value {TypeObjectUtils::build_common_struct_member(member_id_value, member_flags_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, common_value_ec))};
            if (!common_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_value = "value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_value;
            ann_custom_array_short_external.reset();
            AppliedAnnotationSeq tmp_ann_custom_value;
            eprosima::fastcdr::optional<std::string> unit_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> min_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> max_value;
            eprosima::fastcdr::optional<std::string> hash_id_value;
            if (unit_value.has_value() || min_value.has_value() || max_value.has_value() || hash_id_value.has_value())
            {
                member_ann_builtin_value = TypeObjectUtils::build_applied_builtin_member_annotations(unit_value, min_value, max_value, hash_id_value);
            }
            if (!tmp_ann_custom_value.empty())
            {
                ann_custom_array_short_external = tmp_ann_custom_value;
            }
            CompleteMemberDetail detail_value = TypeObjectUtils::build_complete_member_detail(name_value, member_ann_builtin_value, ann_custom_array_short_external);
            CompleteStructMember member_value = TypeObjectUtils::build_complete_struct_member(common_value, detail_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_array_short_external, member_value);
        }
        CompleteStructType struct_type_array_short_external = TypeObjectUtils::build_complete_struct_type(struct_flags_array_short_external, header_array_short_external, member_seq_array_short_external);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_array_short_external, type_name_array_short_external.to_string(), type_ids_array_short_external))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "array_short_external already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_struct_external_type_identifier(
        TypeIdentifierPair& type_ids_struct_external)
{

    ReturnCode_t return_code_struct_external {eprosima::fastdds::dds::RETCODE_OK};
    return_code_struct_external =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "struct_external", type_ids_struct_external);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_struct_external)
    {
        StructTypeFlag struct_flags_struct_external = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_struct_external = "struct_external";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_struct_external;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_struct_external;
        CompleteTypeDetail detail_struct_external = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_struct_external, ann_custom_struct_external, type_name_struct_external.to_string());
        CompleteStructHeader header_struct_external;
        header_struct_external = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_struct_external);
        CompleteStructMemberSeq member_seq_struct_external;
        {
            TypeIdentifierPair type_ids_value;
            ReturnCode_t return_code_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "InnerStructureHelper", type_ids_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
            {
            ::register_InnerStructureHelper_type_identifier(type_ids_value);
            }
            StructMemberFlag member_flags_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, true);
            MemberId member_id_value = 0x00000000;
            bool common_value_ec {false};
            CommonStructMember common_value {TypeObjectUtils::build_common_struct_member(member_id_value, member_flags_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, common_value_ec))};
            if (!common_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_value = "value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_value;
            ann_custom_struct_external.reset();
            AppliedAnnotationSeq tmp_ann_custom_value;
            eprosima::fastcdr::optional<std::string> unit_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> min_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> max_value;
            eprosima::fastcdr::optional<std::string> hash_id_value;
            if (unit_value.has_value() || min_value.has_value() || max_value.has_value() || hash_id_value.has_value())
            {
                member_ann_builtin_value = TypeObjectUtils::build_applied_builtin_member_annotations(unit_value, min_value, max_value, hash_id_value);
            }
            if (!tmp_ann_custom_value.empty())
            {
                ann_custom_struct_external = tmp_ann_custom_value;
            }
            CompleteMemberDetail detail_value = TypeObjectUtils::build_complete_member_detail(name_value, member_ann_builtin_value, ann_custom_struct_external);
            CompleteStructMember member_value = TypeObjectUtils::build_complete_struct_member(common_value, detail_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_struct_external, member_value);
        }
        CompleteStructType struct_type_struct_external = TypeObjectUtils::build_complete_struct_type(struct_flags_struct_external, header_struct_external, member_seq_struct_external);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_struct_external, type_name_struct_external.to_string(), type_ids_struct_external))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "struct_external already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_InnerStructExternal_type_identifier(
        TypeIdentifierPair& type_ids_InnerStructExternal)
{

    ReturnCode_t return_code_InnerStructExternal {eprosima::fastdds::dds::RETCODE_OK};
    return_code_InnerStructExternal =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "InnerStructExternal", type_ids_InnerStructExternal);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_InnerStructExternal)
    {
        StructTypeFlag struct_flags_InnerStructExternal = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_InnerStructExternal = "InnerStructExternal";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_InnerStructExternal;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_InnerStructExternal;
        CompleteTypeDetail detail_InnerStructExternal = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_InnerStructExternal, ann_custom_InnerStructExternal, type_name_InnerStructExternal.to_string());
        CompleteStructHeader header_InnerStructExternal;
        header_InnerStructExternal = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_InnerStructExternal);
        CompleteStructMemberSeq member_seq_InnerStructExternal;
        {
            TypeIdentifierPair type_ids_s;
            ReturnCode_t return_code_s {eprosima::fastdds::dds::RETCODE_OK};
            return_code_s =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int16_t", type_ids_s);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_s)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "s Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_s = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_s = 0x00000000;
            bool common_s_ec {false};
            CommonStructMember common_s {TypeObjectUtils::build_common_struct_member(member_id_s, member_flags_s, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_s, common_s_ec))};
            if (!common_s_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure s member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_s = "s";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_s;
            ann_custom_InnerStructExternal.reset();
            CompleteMemberDetail detail_s = TypeObjectUtils::build_complete_member_detail(name_s, member_ann_builtin_s, ann_custom_InnerStructExternal);
            CompleteStructMember member_s = TypeObjectUtils::build_complete_struct_member(common_s, detail_s);
            TypeObjectUtils::add_complete_struct_member(member_seq_InnerStructExternal, member_s);
        }
        {
            TypeIdentifierPair type_ids_l;
            ReturnCode_t return_code_l {eprosima::fastdds::dds::RETCODE_OK};
            return_code_l =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_l);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_l)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "l Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_l = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, true);
            MemberId member_id_l = 0x00000001;
            bool common_l_ec {false};
            CommonStructMember common_l {TypeObjectUtils::build_common_struct_member(member_id_l, member_flags_l, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_l, common_l_ec))};
            if (!common_l_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure l member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_l = "l";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_l;
            ann_custom_InnerStructExternal.reset();
            AppliedAnnotationSeq tmp_ann_custom_l;
            eprosima::fastcdr::optional<std::string> unit_l;
            eprosima::fastcdr::optional<AnnotationParameterValue> min_l;
            eprosima::fastcdr::optional<AnnotationParameterValue> max_l;
            eprosima::fastcdr::optional<std::string> hash_id_l;
            if (unit_l.has_value() || min_l.has_value() || max_l.has_value() || hash_id_l.has_value())
            {
                member_ann_builtin_l = TypeObjectUtils::build_applied_builtin_member_annotations(unit_l, min_l, max_l, hash_id_l);
            }
            if (!tmp_ann_custom_l.empty())
            {
                ann_custom_InnerStructExternal = tmp_ann_custom_l;
            }
            CompleteMemberDetail detail_l = TypeObjectUtils::build_complete_member_detail(name_l, member_ann_builtin_l, ann_custom_InnerStructExternal);
            CompleteStructMember member_l = TypeObjectUtils::build_complete_struct_member(common_l, detail_l);
            TypeObjectUtils::add_complete_struct_member(member_seq_InnerStructExternal, member_l);
        }
        CompleteStructType struct_type_InnerStructExternal = TypeObjectUtils::build_complete_struct_type(struct_flags_InnerStructExternal, header_InnerStructExternal, member_seq_InnerStructExternal);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_InnerStructExternal, type_name_InnerStructExternal.to_string(), type_ids_InnerStructExternal))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "InnerStructExternal already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_ext_struct_external_type_identifier(
        TypeIdentifierPair& type_ids_ext_struct_external)
{

    ReturnCode_t return_code_ext_struct_external {eprosima::fastdds::dds::RETCODE_OK};
    return_code_ext_struct_external =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "ext_struct_external", type_ids_ext_struct_external);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_ext_struct_external)
    {
        StructTypeFlag struct_flags_ext_struct_external = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_ext_struct_external = "ext_struct_external";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ext_struct_external;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ext_struct_external;
        CompleteTypeDetail detail_ext_struct_external = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ext_struct_external, ann_custom_ext_struct_external, type_name_ext_struct_external.to_string());
        CompleteStructHeader header_ext_struct_external;
        header_ext_struct_external = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_ext_struct_external);
        CompleteStructMemberSeq member_seq_ext_struct_external;
        {
            TypeIdentifierPair type_ids_value;
            ReturnCode_t return_code_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "InnerStructExternal", type_ids_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
            {
            ::register_InnerStructExternal_type_identifier(type_ids_value);
            }
            StructMemberFlag member_flags_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_value = 0x00000000;
            bool common_value_ec {false};
            CommonStructMember common_value {TypeObjectUtils::build_common_struct_member(member_id_value, member_flags_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, common_value_ec))};
            if (!common_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_value = "value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_value;
            ann_custom_ext_struct_external.reset();
            CompleteMemberDetail detail_value = TypeObjectUtils::build_complete_member_detail(name_value, member_ann_builtin_value, ann_custom_ext_struct_external);
            CompleteStructMember member_value = TypeObjectUtils::build_complete_struct_member(common_value, detail_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_ext_struct_external, member_value);
        }
        CompleteStructType struct_type_ext_struct_external = TypeObjectUtils::build_complete_struct_type(struct_flags_ext_struct_external, header_ext_struct_external, member_seq_ext_struct_external);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_ext_struct_external, type_name_ext_struct_external.to_string(), type_ids_ext_struct_external))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "ext_struct_external already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_ext_and_inner_struct_external_type_identifier(
        TypeIdentifierPair& type_ids_ext_and_inner_struct_external)
{

    ReturnCode_t return_code_ext_and_inner_struct_external {eprosima::fastdds::dds::RETCODE_OK};
    return_code_ext_and_inner_struct_external =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "ext_and_inner_struct_external", type_ids_ext_and_inner_struct_external);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_ext_and_inner_struct_external)
    {
        StructTypeFlag struct_flags_ext_and_inner_struct_external = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_ext_and_inner_struct_external = "ext_and_inner_struct_external";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ext_and_inner_struct_external;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ext_and_inner_struct_external;
        CompleteTypeDetail detail_ext_and_inner_struct_external = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ext_and_inner_struct_external, ann_custom_ext_and_inner_struct_external, type_name_ext_and_inner_struct_external.to_string());
        CompleteStructHeader header_ext_and_inner_struct_external;
        header_ext_and_inner_struct_external = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_ext_and_inner_struct_external);
        CompleteStructMemberSeq member_seq_ext_and_inner_struct_external;
        {
            TypeIdentifierPair type_ids_value;
            ReturnCode_t return_code_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "InnerStructExternal", type_ids_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
            {
            ::register_InnerStructExternal_type_identifier(type_ids_value);
            }
            StructMemberFlag member_flags_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, true);
            MemberId member_id_value = 0x00000000;
            bool common_value_ec {false};
            CommonStructMember common_value {TypeObjectUtils::build_common_struct_member(member_id_value, member_flags_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, common_value_ec))};
            if (!common_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_value = "value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_value;
            ann_custom_ext_and_inner_struct_external.reset();
            AppliedAnnotationSeq tmp_ann_custom_value;
            eprosima::fastcdr::optional<std::string> unit_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> min_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> max_value;
            eprosima::fastcdr::optional<std::string> hash_id_value;
            if (unit_value.has_value() || min_value.has_value() || max_value.has_value() || hash_id_value.has_value())
            {
                member_ann_builtin_value = TypeObjectUtils::build_applied_builtin_member_annotations(unit_value, min_value, max_value, hash_id_value);
            }
            if (!tmp_ann_custom_value.empty())
            {
                ann_custom_ext_and_inner_struct_external = tmp_ann_custom_value;
            }
            CompleteMemberDetail detail_value = TypeObjectUtils::build_complete_member_detail(name_value, member_ann_builtin_value, ann_custom_ext_and_inner_struct_external);
            CompleteStructMember member_value = TypeObjectUtils::build_complete_struct_member(common_value, detail_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_ext_and_inner_struct_external, member_value);
        }
        CompleteStructType struct_type_ext_and_inner_struct_external = TypeObjectUtils::build_complete_struct_type(struct_flags_ext_and_inner_struct_external, header_ext_and_inner_struct_external, member_seq_ext_and_inner_struct_external);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_ext_and_inner_struct_external, type_name_ext_and_inner_struct_external.to_string(), type_ids_ext_and_inner_struct_external))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "ext_and_inner_struct_external already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_struct_external_optional_type_identifier(
        TypeIdentifierPair& type_ids_struct_external_optional)
{

    ReturnCode_t return_code_struct_external_optional {eprosima::fastdds::dds::RETCODE_OK};
    return_code_struct_external_optional =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "struct_external_optional", type_ids_struct_external_optional);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_struct_external_optional)
    {
        StructTypeFlag struct_flags_struct_external_optional = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_struct_external_optional = "struct_external_optional";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_struct_external_optional;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_struct_external_optional;
        CompleteTypeDetail detail_struct_external_optional = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_struct_external_optional, ann_custom_struct_external_optional, type_name_struct_external_optional.to_string());
        CompleteStructHeader header_struct_external_optional;
        header_struct_external_optional = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_struct_external_optional);
        CompleteStructMemberSeq member_seq_struct_external_optional;
        {
            TypeIdentifierPair type_ids_value;
            ReturnCode_t return_code_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "InnerStructureHelper", type_ids_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
            {
            ::register_InnerStructureHelper_type_identifier(type_ids_value);
            }
            StructMemberFlag member_flags_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    true, false, false, true);
            MemberId member_id_value = 0x00000000;
            bool common_value_ec {false};
            CommonStructMember common_value {TypeObjectUtils::build_common_struct_member(member_id_value, member_flags_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, common_value_ec))};
            if (!common_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_value = "value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_value;
            ann_custom_struct_external_optional.reset();
            AppliedAnnotationSeq tmp_ann_custom_value;
            eprosima::fastcdr::optional<std::string> unit_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> min_value;
            eprosima::fastcdr::optional<AnnotationParameterValue> max_value;
            eprosima::fastcdr::optional<std::string> hash_id_value;
            if (unit_value.has_value() || min_value.has_value() || max_value.has_value() || hash_id_value.has_value())
            {
                member_ann_builtin_value = TypeObjectUtils::build_applied_builtin_member_annotations(unit_value, min_value, max_value, hash_id_value);
            }
            if (!tmp_ann_custom_value.empty())
            {
                ann_custom_struct_external_optional = tmp_ann_custom_value;
            }
            CompleteMemberDetail detail_value = TypeObjectUtils::build_complete_member_detail(name_value, member_ann_builtin_value, ann_custom_struct_external_optional);
            CompleteStructMember member_value = TypeObjectUtils::build_complete_struct_member(common_value, detail_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_struct_external_optional, member_value);
        }
        CompleteStructType struct_type_struct_external_optional = TypeObjectUtils::build_complete_struct_type(struct_flags_struct_external_optional, header_struct_external_optional, member_seq_struct_external_optional);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_struct_external_optional, type_name_struct_external_optional.to_string(), type_ids_struct_external_optional))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "struct_external_optional already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_recursive_union_container_type_identifier(
        TypeIdentifierPair& type_ids_recursive_union_container)
{
    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "recursive_union_container contains forward declarations (not yet supported).");
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_recursive_union_type_identifier(
        TypeIdentifierPair& type_ids_recursive_union)
{
    ReturnCode_t return_code_recursive_union {eprosima::fastdds::dds::RETCODE_OK};
    return_code_recursive_union =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "recursive_union", type_ids_recursive_union);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_recursive_union)
    {
        UnionTypeFlag union_flags_recursive_union = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                true, false);
        QualifiedTypeName type_name_recursive_union = "recursive_union";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_recursive_union;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_recursive_union;
        AppliedAnnotationSeq tmp_ann_custom_recursive_union;
        eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim_recursive_union;
        if (!tmp_ann_custom_recursive_union.empty())
        {
            ann_custom_recursive_union = tmp_ann_custom_recursive_union;
        }

        CompleteTypeDetail detail_recursive_union = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_recursive_union, ann_custom_recursive_union, type_name_recursive_union.to_string());
        CompleteUnionHeader header_recursive_union = TypeObjectUtils::build_complete_union_header(detail_recursive_union);
        UnionDiscriminatorFlag member_flags_recursive_union = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                false);
        return_code_recursive_union =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "_byte", type_ids_recursive_union);

        if (return_code_recursive_union != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
        CommonDiscriminatorMember common_recursive_union;
        if (EK_COMPLETE == type_ids_recursive_union.type_identifier1()._d() || TK_NONE == type_ids_recursive_union.type_identifier2()._d())
        {
            common_recursive_union = TypeObjectUtils::build_common_discriminator_member(member_flags_recursive_union, type_ids_recursive_union.type_identifier1());
        }
        else if (EK_COMPLETE == type_ids_recursive_union.type_identifier2()._d())
        {
            common_recursive_union = TypeObjectUtils::build_common_discriminator_member(member_flags_recursive_union, type_ids_recursive_union.type_identifier2());
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "recursive_union discriminator TypeIdentifier inconsistent.");
            return;
        }
        type_ann_builtin_recursive_union.reset();
        ann_custom_recursive_union.reset();
        CompleteDiscriminatorMember discriminator_recursive_union = TypeObjectUtils::build_complete_discriminator_member(common_recursive_union,
                type_ann_builtin_recursive_union, ann_custom_recursive_union);
        CompleteUnionMemberSeq member_seq_recursive_union;
        {
            return_code_recursive_union =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_recursive_union);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_recursive_union)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "l Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionMemberFlag member_flags_l = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false);
            UnionCaseLabelSeq label_seq_l;
            TypeObjectUtils::add_union_case_label(label_seq_l, static_cast<int32_t>(1));
            MemberId member_id_l = 0x00000001;
            bool common_l_ec {false};
            CommonUnionMember common_l {TypeObjectUtils::build_common_union_member(member_id_l,
                    member_flags_l, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_recursive_union,
                        common_l_ec), label_seq_l)};
            if (!common_l_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Union l member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_l = "l";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_l;
            ann_custom_recursive_union.reset();
            CompleteMemberDetail detail_l = TypeObjectUtils::build_complete_member_detail(name_l, member_ann_builtin_l, ann_custom_recursive_union);
            CompleteUnionMember member_l = TypeObjectUtils::build_complete_union_member(common_l, detail_l);
            TypeObjectUtils::add_complete_union_member(member_seq_recursive_union, member_l);
        }
        {
            return_code_recursive_union =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "recursive_union_container", type_ids_recursive_union);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_recursive_union)
            {
            ::register_recursive_union_container_type_identifier(type_ids_recursive_union);
            }
            UnionMemberFlag member_flags_c = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false);
            UnionCaseLabelSeq label_seq_c;
            TypeObjectUtils::add_union_case_label(label_seq_c, static_cast<int32_t>(2));
            MemberId member_id_c = 0x00000002;
            bool common_c_ec {false};
            CommonUnionMember common_c {TypeObjectUtils::build_common_union_member(member_id_c,
                    member_flags_c, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_recursive_union,
                        common_c_ec), label_seq_c)};
            if (!common_c_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Union c member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_c = "c";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_c;
            ann_custom_recursive_union.reset();
            CompleteMemberDetail detail_c = TypeObjectUtils::build_complete_member_detail(name_c, member_ann_builtin_c, ann_custom_recursive_union);
            CompleteUnionMember member_c = TypeObjectUtils::build_complete_union_member(common_c, detail_c);
            TypeObjectUtils::add_complete_union_member(member_seq_recursive_union, member_c);
        }
        {
            return_code_recursive_union =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int16_t", type_ids_recursive_union);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_recursive_union)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "s Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionMemberFlag member_flags_s = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false);
            UnionCaseLabelSeq label_seq_s;
            TypeObjectUtils::add_union_case_label(label_seq_s, static_cast<int32_t>(3));
            MemberId member_id_s = 0x00000003;
            bool common_s_ec {false};
            CommonUnionMember common_s {TypeObjectUtils::build_common_union_member(member_id_s,
                    member_flags_s, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_recursive_union,
                        common_s_ec), label_seq_s)};
            if (!common_s_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Union s member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_s = "s";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_s;
            ann_custom_recursive_union.reset();
            CompleteMemberDetail detail_s = TypeObjectUtils::build_complete_member_detail(name_s, member_ann_builtin_s, ann_custom_recursive_union);
            CompleteUnionMember member_s = TypeObjectUtils::build_complete_union_member(common_s, detail_s);
            TypeObjectUtils::add_complete_union_member(member_seq_recursive_union, member_s);
        }
        CompleteUnionType union_type_recursive_union = TypeObjectUtils::build_complete_union_type(union_flags_recursive_union, header_recursive_union, discriminator_recursive_union,
                member_seq_recursive_union);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_union_type_object(union_type_recursive_union, type_name_recursive_union.to_string(), type_ids_recursive_union))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "recursive_union already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_recursive_test_1_type_identifier(
        TypeIdentifierPair& type_ids_recursive_test_1)
{
    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "recursive_test_1 contains forward declarations (not yet supported).");
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_recursive_structure_container_type_identifier(
        TypeIdentifierPair& type_ids_recursive_structure_container)
{
    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "recursive_structure_container contains forward declarations (not yet supported).");
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_recursive_structure_type_identifier(
        TypeIdentifierPair& type_ids_recursive_structure)
{

    ReturnCode_t return_code_recursive_structure {eprosima::fastdds::dds::RETCODE_OK};
    return_code_recursive_structure =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "recursive_structure", type_ids_recursive_structure);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_recursive_structure)
    {
        StructTypeFlag struct_flags_recursive_structure = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                true, false);
        QualifiedTypeName type_name_recursive_structure = "recursive_structure";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_recursive_structure;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_recursive_structure;
        AppliedAnnotationSeq tmp_ann_custom_recursive_structure;
        eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim_recursive_structure;
        if (!tmp_ann_custom_recursive_structure.empty())
        {
            ann_custom_recursive_structure = tmp_ann_custom_recursive_structure;
        }

        CompleteTypeDetail detail_recursive_structure = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_recursive_structure, ann_custom_recursive_structure, type_name_recursive_structure.to_string());
        CompleteStructHeader header_recursive_structure;
        header_recursive_structure = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_recursive_structure);
        CompleteStructMemberSeq member_seq_recursive_structure;
        {
            TypeIdentifierPair type_ids_s;
            ReturnCode_t return_code_s {eprosima::fastdds::dds::RETCODE_OK};
            return_code_s =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int16_t", type_ids_s);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_s)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "s Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_s = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_s = 0x00000000;
            bool common_s_ec {false};
            CommonStructMember common_s {TypeObjectUtils::build_common_struct_member(member_id_s, member_flags_s, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_s, common_s_ec))};
            if (!common_s_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure s member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_s = "s";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_s;
            ann_custom_recursive_structure.reset();
            CompleteMemberDetail detail_s = TypeObjectUtils::build_complete_member_detail(name_s, member_ann_builtin_s, ann_custom_recursive_structure);
            CompleteStructMember member_s = TypeObjectUtils::build_complete_struct_member(common_s, detail_s);
            TypeObjectUtils::add_complete_struct_member(member_seq_recursive_structure, member_s);
        }
        {
            TypeIdentifierPair type_ids_c;
            ReturnCode_t return_code_c {eprosima::fastdds::dds::RETCODE_OK};
            return_code_c =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "recursive_structure_container", type_ids_c);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_c)
            {
            ::register_recursive_structure_container_type_identifier(type_ids_c);
            }
            StructMemberFlag member_flags_c = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_c = 0x00000001;
            bool common_c_ec {false};
            CommonStructMember common_c {TypeObjectUtils::build_common_struct_member(member_id_c, member_flags_c, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_c, common_c_ec))};
            if (!common_c_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure c member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_c = "c";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_c;
            ann_custom_recursive_structure.reset();
            CompleteMemberDetail detail_c = TypeObjectUtils::build_complete_member_detail(name_c, member_ann_builtin_c, ann_custom_recursive_structure);
            CompleteStructMember member_c = TypeObjectUtils::build_complete_struct_member(common_c, detail_c);
            TypeObjectUtils::add_complete_struct_member(member_seq_recursive_structure, member_c);
        }
        CompleteStructType struct_type_recursive_structure = TypeObjectUtils::build_complete_struct_type(struct_flags_recursive_structure, header_recursive_structure, member_seq_recursive_structure);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_recursive_structure, type_name_recursive_structure.to_string(), type_ids_recursive_structure))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "recursive_structure already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_recursive_test_2_type_identifier(
        TypeIdentifierPair& type_ids_recursive_test_2)
{

    ReturnCode_t return_code_recursive_test_2 {eprosima::fastdds::dds::RETCODE_OK};
    return_code_recursive_test_2 =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "recursive_test_2", type_ids_recursive_test_2);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_recursive_test_2)
    {
        StructTypeFlag struct_flags_recursive_test_2 = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_recursive_test_2 = "recursive_test_2";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_recursive_test_2;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_recursive_test_2;
        CompleteTypeDetail detail_recursive_test_2 = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_recursive_test_2, ann_custom_recursive_test_2, type_name_recursive_test_2.to_string());
        CompleteStructHeader header_recursive_test_2;
        header_recursive_test_2 = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_recursive_test_2);
        CompleteStructMemberSeq member_seq_recursive_test_2;
        {
            TypeIdentifierPair type_ids_o;
            ReturnCode_t return_code_o {eprosima::fastdds::dds::RETCODE_OK};
            return_code_o =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_byte", type_ids_o);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_o)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "o Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_o = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_o = 0x00000000;
            bool common_o_ec {false};
            CommonStructMember common_o {TypeObjectUtils::build_common_struct_member(member_id_o, member_flags_o, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_o, common_o_ec))};
            if (!common_o_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure o member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_o = "o";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_o;
            ann_custom_recursive_test_2.reset();
            CompleteMemberDetail detail_o = TypeObjectUtils::build_complete_member_detail(name_o, member_ann_builtin_o, ann_custom_recursive_test_2);
            CompleteStructMember member_o = TypeObjectUtils::build_complete_struct_member(common_o, detail_o);
            TypeObjectUtils::add_complete_struct_member(member_seq_recursive_test_2, member_o);
        }
        {
            TypeIdentifierPair type_ids_s;
            ReturnCode_t return_code_s {eprosima::fastdds::dds::RETCODE_OK};
            return_code_s =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "recursive_structure", type_ids_s);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_s)
            {
            ::register_recursive_structure_type_identifier(type_ids_s);
            }
            StructMemberFlag member_flags_s = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_s = 0x00000001;
            bool common_s_ec {false};
            CommonStructMember common_s {TypeObjectUtils::build_common_struct_member(member_id_s, member_flags_s, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_s, common_s_ec))};
            if (!common_s_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure s member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_s = "s";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_s;
            ann_custom_recursive_test_2.reset();
            CompleteMemberDetail detail_s = TypeObjectUtils::build_complete_member_detail(name_s, member_ann_builtin_s, ann_custom_recursive_test_2);
            CompleteStructMember member_s = TypeObjectUtils::build_complete_struct_member(common_s, detail_s);
            TypeObjectUtils::add_complete_struct_member(member_seq_recursive_test_2, member_s);
        }
        CompleteStructType struct_type_recursive_test_2 = TypeObjectUtils::build_complete_struct_type(struct_flags_recursive_test_2, header_recursive_test_2, member_seq_recursive_test_2);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_recursive_test_2, type_name_recursive_test_2.to_string(), type_ids_recursive_test_2))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "recursive_test_2 already registered in TypeObjectRegistry for a different type.");
        }
    }
}
