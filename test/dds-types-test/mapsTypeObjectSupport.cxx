// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file mapsTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "mapsTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "maps.hpp"

#include "helpers/basic_inner_types.hpp"

using namespace eprosima::fastdds::dds::xtypes;

// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapShortShort_type_identifier(
        TypeIdentifierPair& type_ids_MapShortShort)
{

    ReturnCode_t return_code_MapShortShort {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapShortShort =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapShortShort", type_ids_MapShortShort);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapShortShort)
    {
        StructTypeFlag struct_flags_MapShortShort = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapShortShort = "MapShortShort";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapShortShort;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapShortShort;
        CompleteTypeDetail detail_MapShortShort = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapShortShort, ann_custom_MapShortShort, type_name_MapShortShort.to_string());
        CompleteStructHeader header_MapShortShort;
        header_MapShortShort = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapShortShort);
        CompleteStructMemberSeq member_seq_MapShortShort;
        {
            TypeIdentifierPair type_ids_var_map_short_short;
            ReturnCode_t return_code_var_map_short_short {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_short_short =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int16_t_int16_t_unbounded", type_ids_var_map_short_short);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_short)
            {
                return_code_var_map_short_short =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_short_short);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_short)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int16_t_int16_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int16_t_int16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_short, element_identifier_anonymous_map_int16_t_int16_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_int16_t_int16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_int16_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_short_short =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_short_short);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_short)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int16_t_int16_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int16_t_int16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_short, key_identifier_anonymous_map_int16_t_int16_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_int16_t_int16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_int16_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int16_t_int16_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int16_t_int16_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_int16_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int16_t_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_int16_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int16_t_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_int16_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int16_t_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_int16_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int16_t_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_int16_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int16_t_int16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_int16_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_int16_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int16_t_int16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_int16_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_int16_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int16_t_int16_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int16_t_int16_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int16_t_int16_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int16_t_int16_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int16_t_int16_t_unbounded, element_flags_anonymous_map_int16_t_int16_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int16_t_int16_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_int16_t_unbounded), key_flags_anonymous_map_int16_t_int16_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_int16_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int16_t_int16_t_unbounded", type_ids_var_map_short_short))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int16_t_int16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_short_short = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_short_short = 0x00000000;
            bool common_var_map_short_short_ec {false};
            CommonStructMember common_var_map_short_short {TypeObjectUtils::build_common_struct_member(member_id_var_map_short_short, member_flags_var_map_short_short, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_short, common_var_map_short_short_ec))};
            if (!common_var_map_short_short_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_short_short member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_short_short = "var_map_short_short";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_short_short;
            ann_custom_MapShortShort.reset();
            CompleteMemberDetail detail_var_map_short_short = TypeObjectUtils::build_complete_member_detail(name_var_map_short_short, member_ann_builtin_var_map_short_short, ann_custom_MapShortShort);
            CompleteStructMember member_var_map_short_short = TypeObjectUtils::build_complete_struct_member(common_var_map_short_short, detail_var_map_short_short);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapShortShort, member_var_map_short_short);
        }
        CompleteStructType struct_type_MapShortShort = TypeObjectUtils::build_complete_struct_type(struct_flags_MapShortShort, header_MapShortShort, member_seq_MapShortShort);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapShortShort, type_name_MapShortShort.to_string(), type_ids_MapShortShort))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapShortShort already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapShortUShort_type_identifier(
        TypeIdentifierPair& type_ids_MapShortUShort)
{

    ReturnCode_t return_code_MapShortUShort {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapShortUShort =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapShortUShort", type_ids_MapShortUShort);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapShortUShort)
    {
        StructTypeFlag struct_flags_MapShortUShort = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapShortUShort = "MapShortUShort";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapShortUShort;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapShortUShort;
        CompleteTypeDetail detail_MapShortUShort = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapShortUShort, ann_custom_MapShortUShort, type_name_MapShortUShort.to_string());
        CompleteStructHeader header_MapShortUShort;
        header_MapShortUShort = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapShortUShort);
        CompleteStructMemberSeq member_seq_MapShortUShort;
        {
            TypeIdentifierPair type_ids_var_map_short_ushort;
            ReturnCode_t return_code_var_map_short_ushort {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_short_ushort =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int16_t_uint16_t_unbounded", type_ids_var_map_short_ushort);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_ushort)
            {
                return_code_var_map_short_ushort =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_short_ushort);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_ushort)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int16_t_uint16_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int16_t_uint16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_ushort, element_identifier_anonymous_map_int16_t_uint16_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_int16_t_uint16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_uint16_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_short_ushort =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_short_ushort);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_ushort)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int16_t_uint16_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int16_t_uint16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_ushort, key_identifier_anonymous_map_int16_t_uint16_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_int16_t_uint16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_uint16_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int16_t_uint16_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int16_t_uint16_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_uint16_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int16_t_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_uint16_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int16_t_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_uint16_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int16_t_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_uint16_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int16_t_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_uint16_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int16_t_uint16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_uint16_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_uint16_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int16_t_uint16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_uint16_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_uint16_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int16_t_uint16_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int16_t_uint16_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int16_t_uint16_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int16_t_uint16_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int16_t_uint16_t_unbounded, element_flags_anonymous_map_int16_t_uint16_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int16_t_uint16_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_uint16_t_unbounded), key_flags_anonymous_map_int16_t_uint16_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_uint16_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int16_t_uint16_t_unbounded", type_ids_var_map_short_ushort))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int16_t_uint16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_short_ushort = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_short_ushort = 0x00000000;
            bool common_var_map_short_ushort_ec {false};
            CommonStructMember common_var_map_short_ushort {TypeObjectUtils::build_common_struct_member(member_id_var_map_short_ushort, member_flags_var_map_short_ushort, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_ushort, common_var_map_short_ushort_ec))};
            if (!common_var_map_short_ushort_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_short_ushort member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_short_ushort = "var_map_short_ushort";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_short_ushort;
            ann_custom_MapShortUShort.reset();
            CompleteMemberDetail detail_var_map_short_ushort = TypeObjectUtils::build_complete_member_detail(name_var_map_short_ushort, member_ann_builtin_var_map_short_ushort, ann_custom_MapShortUShort);
            CompleteStructMember member_var_map_short_ushort = TypeObjectUtils::build_complete_struct_member(common_var_map_short_ushort, detail_var_map_short_ushort);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapShortUShort, member_var_map_short_ushort);
        }
        CompleteStructType struct_type_MapShortUShort = TypeObjectUtils::build_complete_struct_type(struct_flags_MapShortUShort, header_MapShortUShort, member_seq_MapShortUShort);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapShortUShort, type_name_MapShortUShort.to_string(), type_ids_MapShortUShort))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapShortUShort already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapShortLong_type_identifier(
        TypeIdentifierPair& type_ids_MapShortLong)
{

    ReturnCode_t return_code_MapShortLong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapShortLong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapShortLong", type_ids_MapShortLong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapShortLong)
    {
        StructTypeFlag struct_flags_MapShortLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapShortLong = "MapShortLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapShortLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapShortLong;
        CompleteTypeDetail detail_MapShortLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapShortLong, ann_custom_MapShortLong, type_name_MapShortLong.to_string());
        CompleteStructHeader header_MapShortLong;
        header_MapShortLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapShortLong);
        CompleteStructMemberSeq member_seq_MapShortLong;
        {
            TypeIdentifierPair type_ids_var_map_short_long;
            ReturnCode_t return_code_var_map_short_long {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_short_long =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int16_t_int32_t_unbounded", type_ids_var_map_short_long);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_long)
            {
                return_code_var_map_short_long =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_short_long);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_long)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int16_t_int32_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int16_t_int32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_long, element_identifier_anonymous_map_int16_t_int32_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_int16_t_int32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_int32_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_short_long =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_short_long);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_long)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int16_t_int32_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int16_t_int32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_long, key_identifier_anonymous_map_int16_t_int32_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_int16_t_int32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_int32_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int16_t_int32_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int16_t_int32_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int16_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int16_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int16_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int16_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int16_t_int32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int16_t_int32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int16_t_int32_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int16_t_int32_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int16_t_int32_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int16_t_int32_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int16_t_int32_t_unbounded, element_flags_anonymous_map_int16_t_int32_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int16_t_int32_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_int32_t_unbounded), key_flags_anonymous_map_int16_t_int32_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_int32_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int16_t_int32_t_unbounded", type_ids_var_map_short_long))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int16_t_int32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_short_long = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_short_long = 0x00000000;
            bool common_var_map_short_long_ec {false};
            CommonStructMember common_var_map_short_long {TypeObjectUtils::build_common_struct_member(member_id_var_map_short_long, member_flags_var_map_short_long, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_long, common_var_map_short_long_ec))};
            if (!common_var_map_short_long_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_short_long member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_short_long = "var_map_short_long";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_short_long;
            ann_custom_MapShortLong.reset();
            CompleteMemberDetail detail_var_map_short_long = TypeObjectUtils::build_complete_member_detail(name_var_map_short_long, member_ann_builtin_var_map_short_long, ann_custom_MapShortLong);
            CompleteStructMember member_var_map_short_long = TypeObjectUtils::build_complete_struct_member(common_var_map_short_long, detail_var_map_short_long);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapShortLong, member_var_map_short_long);
        }
        CompleteStructType struct_type_MapShortLong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapShortLong, header_MapShortLong, member_seq_MapShortLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapShortLong, type_name_MapShortLong.to_string(), type_ids_MapShortLong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapShortLong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapShortULong_type_identifier(
        TypeIdentifierPair& type_ids_MapShortULong)
{

    ReturnCode_t return_code_MapShortULong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapShortULong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapShortULong", type_ids_MapShortULong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapShortULong)
    {
        StructTypeFlag struct_flags_MapShortULong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapShortULong = "MapShortULong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapShortULong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapShortULong;
        CompleteTypeDetail detail_MapShortULong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapShortULong, ann_custom_MapShortULong, type_name_MapShortULong.to_string());
        CompleteStructHeader header_MapShortULong;
        header_MapShortULong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapShortULong);
        CompleteStructMemberSeq member_seq_MapShortULong;
        {
            TypeIdentifierPair type_ids_var_map_short_ulong;
            ReturnCode_t return_code_var_map_short_ulong {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_short_ulong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int16_t_uint32_t_unbounded", type_ids_var_map_short_ulong);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_ulong)
            {
                return_code_var_map_short_ulong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_short_ulong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_ulong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int16_t_uint32_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int16_t_uint32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_ulong, element_identifier_anonymous_map_int16_t_uint32_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_int16_t_uint32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_uint32_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_short_ulong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_short_ulong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_ulong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int16_t_uint32_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int16_t_uint32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_ulong, key_identifier_anonymous_map_int16_t_uint32_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_int16_t_uint32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_uint32_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int16_t_uint32_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int16_t_uint32_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_uint32_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int16_t_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_uint32_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int16_t_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_uint32_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int16_t_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_uint32_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int16_t_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_uint32_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int16_t_uint32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_uint32_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_uint32_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int16_t_uint32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_uint32_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_uint32_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int16_t_uint32_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int16_t_uint32_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int16_t_uint32_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int16_t_uint32_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int16_t_uint32_t_unbounded, element_flags_anonymous_map_int16_t_uint32_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int16_t_uint32_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_uint32_t_unbounded), key_flags_anonymous_map_int16_t_uint32_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_uint32_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int16_t_uint32_t_unbounded", type_ids_var_map_short_ulong))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int16_t_uint32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_short_ulong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_short_ulong = 0x00000000;
            bool common_var_map_short_ulong_ec {false};
            CommonStructMember common_var_map_short_ulong {TypeObjectUtils::build_common_struct_member(member_id_var_map_short_ulong, member_flags_var_map_short_ulong, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_ulong, common_var_map_short_ulong_ec))};
            if (!common_var_map_short_ulong_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_short_ulong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_short_ulong = "var_map_short_ulong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_short_ulong;
            ann_custom_MapShortULong.reset();
            CompleteMemberDetail detail_var_map_short_ulong = TypeObjectUtils::build_complete_member_detail(name_var_map_short_ulong, member_ann_builtin_var_map_short_ulong, ann_custom_MapShortULong);
            CompleteStructMember member_var_map_short_ulong = TypeObjectUtils::build_complete_struct_member(common_var_map_short_ulong, detail_var_map_short_ulong);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapShortULong, member_var_map_short_ulong);
        }
        CompleteStructType struct_type_MapShortULong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapShortULong, header_MapShortULong, member_seq_MapShortULong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapShortULong, type_name_MapShortULong.to_string(), type_ids_MapShortULong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapShortULong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapShortLongLong_type_identifier(
        TypeIdentifierPair& type_ids_MapShortLongLong)
{

    ReturnCode_t return_code_MapShortLongLong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapShortLongLong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapShortLongLong", type_ids_MapShortLongLong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapShortLongLong)
    {
        StructTypeFlag struct_flags_MapShortLongLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapShortLongLong = "MapShortLongLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapShortLongLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapShortLongLong;
        CompleteTypeDetail detail_MapShortLongLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapShortLongLong, ann_custom_MapShortLongLong, type_name_MapShortLongLong.to_string());
        CompleteStructHeader header_MapShortLongLong;
        header_MapShortLongLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapShortLongLong);
        CompleteStructMemberSeq member_seq_MapShortLongLong;
        {
            TypeIdentifierPair type_ids_var_map_short_longlong;
            ReturnCode_t return_code_var_map_short_longlong {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_short_longlong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int16_t_int64_t_unbounded", type_ids_var_map_short_longlong);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_longlong)
            {
                return_code_var_map_short_longlong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_short_longlong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_longlong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int16_t_int64_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int16_t_int64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_longlong, element_identifier_anonymous_map_int16_t_int64_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_int16_t_int64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_int64_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_short_longlong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_short_longlong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_longlong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int16_t_int64_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int16_t_int64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_longlong, key_identifier_anonymous_map_int16_t_int64_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_int16_t_int64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_int64_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int16_t_int64_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int16_t_int64_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_int64_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int16_t_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_int64_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int16_t_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_int64_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int16_t_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_int64_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int16_t_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_int64_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int16_t_int64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_int64_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_int64_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int16_t_int64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_int64_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_int64_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int16_t_int64_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int16_t_int64_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int16_t_int64_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int16_t_int64_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int16_t_int64_t_unbounded, element_flags_anonymous_map_int16_t_int64_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int16_t_int64_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_int64_t_unbounded), key_flags_anonymous_map_int16_t_int64_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_int64_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int16_t_int64_t_unbounded", type_ids_var_map_short_longlong))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int16_t_int64_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_short_longlong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_short_longlong = 0x00000000;
            bool common_var_map_short_longlong_ec {false};
            CommonStructMember common_var_map_short_longlong {TypeObjectUtils::build_common_struct_member(member_id_var_map_short_longlong, member_flags_var_map_short_longlong, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_longlong, common_var_map_short_longlong_ec))};
            if (!common_var_map_short_longlong_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_short_longlong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_short_longlong = "var_map_short_longlong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_short_longlong;
            ann_custom_MapShortLongLong.reset();
            CompleteMemberDetail detail_var_map_short_longlong = TypeObjectUtils::build_complete_member_detail(name_var_map_short_longlong, member_ann_builtin_var_map_short_longlong, ann_custom_MapShortLongLong);
            CompleteStructMember member_var_map_short_longlong = TypeObjectUtils::build_complete_struct_member(common_var_map_short_longlong, detail_var_map_short_longlong);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapShortLongLong, member_var_map_short_longlong);
        }
        CompleteStructType struct_type_MapShortLongLong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapShortLongLong, header_MapShortLongLong, member_seq_MapShortLongLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapShortLongLong, type_name_MapShortLongLong.to_string(), type_ids_MapShortLongLong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapShortLongLong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapShortULongLong_type_identifier(
        TypeIdentifierPair& type_ids_MapShortULongLong)
{

    ReturnCode_t return_code_MapShortULongLong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapShortULongLong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapShortULongLong", type_ids_MapShortULongLong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapShortULongLong)
    {
        StructTypeFlag struct_flags_MapShortULongLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapShortULongLong = "MapShortULongLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapShortULongLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapShortULongLong;
        CompleteTypeDetail detail_MapShortULongLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapShortULongLong, ann_custom_MapShortULongLong, type_name_MapShortULongLong.to_string());
        CompleteStructHeader header_MapShortULongLong;
        header_MapShortULongLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapShortULongLong);
        CompleteStructMemberSeq member_seq_MapShortULongLong;
        {
            TypeIdentifierPair type_ids_var_map_short_ulonglong;
            ReturnCode_t return_code_var_map_short_ulonglong {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_short_ulonglong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int16_t_uint64_t_unbounded", type_ids_var_map_short_ulonglong);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_ulonglong)
            {
                return_code_var_map_short_ulonglong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_short_ulonglong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_ulonglong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int16_t_uint64_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int16_t_uint64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_ulonglong, element_identifier_anonymous_map_int16_t_uint64_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_int16_t_uint64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_uint64_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_short_ulonglong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_short_ulonglong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_ulonglong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int16_t_uint64_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int16_t_uint64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_ulonglong, key_identifier_anonymous_map_int16_t_uint64_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_int16_t_uint64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_uint64_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int16_t_uint64_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int16_t_uint64_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_uint64_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int16_t_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_uint64_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int16_t_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_uint64_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int16_t_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_uint64_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int16_t_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_uint64_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int16_t_uint64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_uint64_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_uint64_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int16_t_uint64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_uint64_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_uint64_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int16_t_uint64_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int16_t_uint64_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int16_t_uint64_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int16_t_uint64_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int16_t_uint64_t_unbounded, element_flags_anonymous_map_int16_t_uint64_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int16_t_uint64_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_uint64_t_unbounded), key_flags_anonymous_map_int16_t_uint64_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_uint64_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int16_t_uint64_t_unbounded", type_ids_var_map_short_ulonglong))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int16_t_uint64_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_short_ulonglong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_short_ulonglong = 0x00000000;
            bool common_var_map_short_ulonglong_ec {false};
            CommonStructMember common_var_map_short_ulonglong {TypeObjectUtils::build_common_struct_member(member_id_var_map_short_ulonglong, member_flags_var_map_short_ulonglong, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_ulonglong, common_var_map_short_ulonglong_ec))};
            if (!common_var_map_short_ulonglong_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_short_ulonglong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_short_ulonglong = "var_map_short_ulonglong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_short_ulonglong;
            ann_custom_MapShortULongLong.reset();
            CompleteMemberDetail detail_var_map_short_ulonglong = TypeObjectUtils::build_complete_member_detail(name_var_map_short_ulonglong, member_ann_builtin_var_map_short_ulonglong, ann_custom_MapShortULongLong);
            CompleteStructMember member_var_map_short_ulonglong = TypeObjectUtils::build_complete_struct_member(common_var_map_short_ulonglong, detail_var_map_short_ulonglong);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapShortULongLong, member_var_map_short_ulonglong);
        }
        CompleteStructType struct_type_MapShortULongLong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapShortULongLong, header_MapShortULongLong, member_seq_MapShortULongLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapShortULongLong, type_name_MapShortULongLong.to_string(), type_ids_MapShortULongLong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapShortULongLong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapShortFloat_type_identifier(
        TypeIdentifierPair& type_ids_MapShortFloat)
{

    ReturnCode_t return_code_MapShortFloat {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapShortFloat =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapShortFloat", type_ids_MapShortFloat);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapShortFloat)
    {
        StructTypeFlag struct_flags_MapShortFloat = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapShortFloat = "MapShortFloat";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapShortFloat;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapShortFloat;
        CompleteTypeDetail detail_MapShortFloat = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapShortFloat, ann_custom_MapShortFloat, type_name_MapShortFloat.to_string());
        CompleteStructHeader header_MapShortFloat;
        header_MapShortFloat = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapShortFloat);
        CompleteStructMemberSeq member_seq_MapShortFloat;
        {
            TypeIdentifierPair type_ids_var_map_short_float;
            ReturnCode_t return_code_var_map_short_float {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_short_float =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int16_t_float_unbounded", type_ids_var_map_short_float);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_float)
            {
                return_code_var_map_short_float =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_float", type_ids_var_map_short_float);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_float)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int16_t_float_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int16_t_float_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_float, element_identifier_anonymous_map_int16_t_float_unbounded_ec))};
                if (!element_identifier_anonymous_map_int16_t_float_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_float_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_short_float =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_short_float);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_float)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int16_t_float_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int16_t_float_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_float, key_identifier_anonymous_map_int16_t_float_unbounded_ec))};
                if (!key_identifier_anonymous_map_int16_t_float_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_float_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int16_t_float_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int16_t_float_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_float_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int16_t_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_float_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int16_t_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_float_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int16_t_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_float_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int16_t_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_float_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int16_t_float_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_float_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_float_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int16_t_float_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_float_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_float_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int16_t_float_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int16_t_float_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int16_t_float_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int16_t_float_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int16_t_float_unbounded, element_flags_anonymous_map_int16_t_float_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int16_t_float_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_float_unbounded), key_flags_anonymous_map_int16_t_float_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_float_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int16_t_float_unbounded", type_ids_var_map_short_float))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int16_t_float_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_short_float = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_short_float = 0x00000000;
            bool common_var_map_short_float_ec {false};
            CommonStructMember common_var_map_short_float {TypeObjectUtils::build_common_struct_member(member_id_var_map_short_float, member_flags_var_map_short_float, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_float, common_var_map_short_float_ec))};
            if (!common_var_map_short_float_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_short_float member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_short_float = "var_map_short_float";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_short_float;
            ann_custom_MapShortFloat.reset();
            CompleteMemberDetail detail_var_map_short_float = TypeObjectUtils::build_complete_member_detail(name_var_map_short_float, member_ann_builtin_var_map_short_float, ann_custom_MapShortFloat);
            CompleteStructMember member_var_map_short_float = TypeObjectUtils::build_complete_struct_member(common_var_map_short_float, detail_var_map_short_float);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapShortFloat, member_var_map_short_float);
        }
        CompleteStructType struct_type_MapShortFloat = TypeObjectUtils::build_complete_struct_type(struct_flags_MapShortFloat, header_MapShortFloat, member_seq_MapShortFloat);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapShortFloat, type_name_MapShortFloat.to_string(), type_ids_MapShortFloat))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapShortFloat already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapShortDouble_type_identifier(
        TypeIdentifierPair& type_ids_MapShortDouble)
{

    ReturnCode_t return_code_MapShortDouble {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapShortDouble =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapShortDouble", type_ids_MapShortDouble);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapShortDouble)
    {
        StructTypeFlag struct_flags_MapShortDouble = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapShortDouble = "MapShortDouble";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapShortDouble;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapShortDouble;
        CompleteTypeDetail detail_MapShortDouble = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapShortDouble, ann_custom_MapShortDouble, type_name_MapShortDouble.to_string());
        CompleteStructHeader header_MapShortDouble;
        header_MapShortDouble = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapShortDouble);
        CompleteStructMemberSeq member_seq_MapShortDouble;
        {
            TypeIdentifierPair type_ids_var_map_short_double;
            ReturnCode_t return_code_var_map_short_double {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_short_double =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int16_t_double_unbounded", type_ids_var_map_short_double);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_double)
            {
                return_code_var_map_short_double =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_double", type_ids_var_map_short_double);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_double)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int16_t_double_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int16_t_double_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_double, element_identifier_anonymous_map_int16_t_double_unbounded_ec))};
                if (!element_identifier_anonymous_map_int16_t_double_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_double_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_short_double =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_short_double);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_double)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int16_t_double_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int16_t_double_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_double, key_identifier_anonymous_map_int16_t_double_unbounded_ec))};
                if (!key_identifier_anonymous_map_int16_t_double_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_double_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int16_t_double_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int16_t_double_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_double_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int16_t_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_double_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int16_t_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_double_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int16_t_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_double_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int16_t_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_double_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int16_t_double_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_double_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_double_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int16_t_double_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_double_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_double_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int16_t_double_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int16_t_double_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int16_t_double_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int16_t_double_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int16_t_double_unbounded, element_flags_anonymous_map_int16_t_double_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int16_t_double_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_double_unbounded), key_flags_anonymous_map_int16_t_double_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_double_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int16_t_double_unbounded", type_ids_var_map_short_double))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int16_t_double_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_short_double = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_short_double = 0x00000000;
            bool common_var_map_short_double_ec {false};
            CommonStructMember common_var_map_short_double {TypeObjectUtils::build_common_struct_member(member_id_var_map_short_double, member_flags_var_map_short_double, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_double, common_var_map_short_double_ec))};
            if (!common_var_map_short_double_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_short_double member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_short_double = "var_map_short_double";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_short_double;
            ann_custom_MapShortDouble.reset();
            CompleteMemberDetail detail_var_map_short_double = TypeObjectUtils::build_complete_member_detail(name_var_map_short_double, member_ann_builtin_var_map_short_double, ann_custom_MapShortDouble);
            CompleteStructMember member_var_map_short_double = TypeObjectUtils::build_complete_struct_member(common_var_map_short_double, detail_var_map_short_double);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapShortDouble, member_var_map_short_double);
        }
        CompleteStructType struct_type_MapShortDouble = TypeObjectUtils::build_complete_struct_type(struct_flags_MapShortDouble, header_MapShortDouble, member_seq_MapShortDouble);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapShortDouble, type_name_MapShortDouble.to_string(), type_ids_MapShortDouble))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapShortDouble already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapShortLongDouble_type_identifier(
        TypeIdentifierPair& type_ids_MapShortLongDouble)
{

    ReturnCode_t return_code_MapShortLongDouble {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapShortLongDouble =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapShortLongDouble", type_ids_MapShortLongDouble);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapShortLongDouble)
    {
        StructTypeFlag struct_flags_MapShortLongDouble = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapShortLongDouble = "MapShortLongDouble";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapShortLongDouble;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapShortLongDouble;
        CompleteTypeDetail detail_MapShortLongDouble = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapShortLongDouble, ann_custom_MapShortLongDouble, type_name_MapShortLongDouble.to_string());
        CompleteStructHeader header_MapShortLongDouble;
        header_MapShortLongDouble = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapShortLongDouble);
        CompleteStructMemberSeq member_seq_MapShortLongDouble;
        {
            TypeIdentifierPair type_ids_var_map_short_longdouble;
            ReturnCode_t return_code_var_map_short_longdouble {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_short_longdouble =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int16_t_longdouble_unbounded", type_ids_var_map_short_longdouble);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_longdouble)
            {
                return_code_var_map_short_longdouble =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_longdouble", type_ids_var_map_short_longdouble);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_longdouble)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int16_t_longdouble_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int16_t_longdouble_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_longdouble, element_identifier_anonymous_map_int16_t_longdouble_unbounded_ec))};
                if (!element_identifier_anonymous_map_int16_t_longdouble_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_longdouble_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_short_longdouble =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_short_longdouble);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_longdouble)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int16_t_longdouble_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int16_t_longdouble_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_longdouble, key_identifier_anonymous_map_int16_t_longdouble_unbounded_ec))};
                if (!key_identifier_anonymous_map_int16_t_longdouble_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_longdouble_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int16_t_longdouble_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int16_t_longdouble_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_longdouble_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int16_t_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_longdouble_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int16_t_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_longdouble_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int16_t_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_longdouble_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int16_t_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_longdouble_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int16_t_longdouble_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_longdouble_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_longdouble_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int16_t_longdouble_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_longdouble_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_longdouble_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int16_t_longdouble_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int16_t_longdouble_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int16_t_longdouble_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int16_t_longdouble_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int16_t_longdouble_unbounded, element_flags_anonymous_map_int16_t_longdouble_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int16_t_longdouble_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_longdouble_unbounded), key_flags_anonymous_map_int16_t_longdouble_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_longdouble_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int16_t_longdouble_unbounded", type_ids_var_map_short_longdouble))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int16_t_longdouble_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_short_longdouble = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_short_longdouble = 0x00000000;
            bool common_var_map_short_longdouble_ec {false};
            CommonStructMember common_var_map_short_longdouble {TypeObjectUtils::build_common_struct_member(member_id_var_map_short_longdouble, member_flags_var_map_short_longdouble, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_longdouble, common_var_map_short_longdouble_ec))};
            if (!common_var_map_short_longdouble_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_short_longdouble member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_short_longdouble = "var_map_short_longdouble";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_short_longdouble;
            ann_custom_MapShortLongDouble.reset();
            CompleteMemberDetail detail_var_map_short_longdouble = TypeObjectUtils::build_complete_member_detail(name_var_map_short_longdouble, member_ann_builtin_var_map_short_longdouble, ann_custom_MapShortLongDouble);
            CompleteStructMember member_var_map_short_longdouble = TypeObjectUtils::build_complete_struct_member(common_var_map_short_longdouble, detail_var_map_short_longdouble);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapShortLongDouble, member_var_map_short_longdouble);
        }
        CompleteStructType struct_type_MapShortLongDouble = TypeObjectUtils::build_complete_struct_type(struct_flags_MapShortLongDouble, header_MapShortLongDouble, member_seq_MapShortLongDouble);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapShortLongDouble, type_name_MapShortLongDouble.to_string(), type_ids_MapShortLongDouble))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapShortLongDouble already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapShortBoolean_type_identifier(
        TypeIdentifierPair& type_ids_MapShortBoolean)
{

    ReturnCode_t return_code_MapShortBoolean {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapShortBoolean =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapShortBoolean", type_ids_MapShortBoolean);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapShortBoolean)
    {
        StructTypeFlag struct_flags_MapShortBoolean = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapShortBoolean = "MapShortBoolean";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapShortBoolean;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapShortBoolean;
        CompleteTypeDetail detail_MapShortBoolean = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapShortBoolean, ann_custom_MapShortBoolean, type_name_MapShortBoolean.to_string());
        CompleteStructHeader header_MapShortBoolean;
        header_MapShortBoolean = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapShortBoolean);
        CompleteStructMemberSeq member_seq_MapShortBoolean;
        {
            TypeIdentifierPair type_ids_var_map_short_boolean;
            ReturnCode_t return_code_var_map_short_boolean {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_short_boolean =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int16_t_bool_unbounded", type_ids_var_map_short_boolean);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_boolean)
            {
                return_code_var_map_short_boolean =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_bool", type_ids_var_map_short_boolean);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_boolean)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int16_t_bool_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int16_t_bool_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_boolean, element_identifier_anonymous_map_int16_t_bool_unbounded_ec))};
                if (!element_identifier_anonymous_map_int16_t_bool_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_bool_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_short_boolean =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_short_boolean);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_boolean)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int16_t_bool_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int16_t_bool_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_boolean, key_identifier_anonymous_map_int16_t_bool_unbounded_ec))};
                if (!key_identifier_anonymous_map_int16_t_bool_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_bool_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int16_t_bool_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int16_t_bool_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_bool_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int16_t_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_bool_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int16_t_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_bool_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int16_t_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_bool_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int16_t_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_bool_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int16_t_bool_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_bool_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_bool_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int16_t_bool_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_bool_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_bool_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int16_t_bool_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int16_t_bool_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int16_t_bool_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int16_t_bool_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int16_t_bool_unbounded, element_flags_anonymous_map_int16_t_bool_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int16_t_bool_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_bool_unbounded), key_flags_anonymous_map_int16_t_bool_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_bool_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int16_t_bool_unbounded", type_ids_var_map_short_boolean))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int16_t_bool_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_short_boolean = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_short_boolean = 0x00000000;
            bool common_var_map_short_boolean_ec {false};
            CommonStructMember common_var_map_short_boolean {TypeObjectUtils::build_common_struct_member(member_id_var_map_short_boolean, member_flags_var_map_short_boolean, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_boolean, common_var_map_short_boolean_ec))};
            if (!common_var_map_short_boolean_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_short_boolean member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_short_boolean = "var_map_short_boolean";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_short_boolean;
            ann_custom_MapShortBoolean.reset();
            CompleteMemberDetail detail_var_map_short_boolean = TypeObjectUtils::build_complete_member_detail(name_var_map_short_boolean, member_ann_builtin_var_map_short_boolean, ann_custom_MapShortBoolean);
            CompleteStructMember member_var_map_short_boolean = TypeObjectUtils::build_complete_struct_member(common_var_map_short_boolean, detail_var_map_short_boolean);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapShortBoolean, member_var_map_short_boolean);
        }
        CompleteStructType struct_type_MapShortBoolean = TypeObjectUtils::build_complete_struct_type(struct_flags_MapShortBoolean, header_MapShortBoolean, member_seq_MapShortBoolean);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapShortBoolean, type_name_MapShortBoolean.to_string(), type_ids_MapShortBoolean))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapShortBoolean already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapShortOctet_type_identifier(
        TypeIdentifierPair& type_ids_MapShortOctet)
{

    ReturnCode_t return_code_MapShortOctet {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapShortOctet =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapShortOctet", type_ids_MapShortOctet);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapShortOctet)
    {
        StructTypeFlag struct_flags_MapShortOctet = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapShortOctet = "MapShortOctet";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapShortOctet;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapShortOctet;
        CompleteTypeDetail detail_MapShortOctet = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapShortOctet, ann_custom_MapShortOctet, type_name_MapShortOctet.to_string());
        CompleteStructHeader header_MapShortOctet;
        header_MapShortOctet = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapShortOctet);
        CompleteStructMemberSeq member_seq_MapShortOctet;
        {
            TypeIdentifierPair type_ids_var_map_short_octet;
            ReturnCode_t return_code_var_map_short_octet {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_short_octet =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int16_t_byte_unbounded", type_ids_var_map_short_octet);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_octet)
            {
                return_code_var_map_short_octet =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_byte", type_ids_var_map_short_octet);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_octet)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int16_t_byte_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int16_t_byte_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_octet, element_identifier_anonymous_map_int16_t_byte_unbounded_ec))};
                if (!element_identifier_anonymous_map_int16_t_byte_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_byte_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_short_octet =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_short_octet);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_octet)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int16_t_byte_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int16_t_byte_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_octet, key_identifier_anonymous_map_int16_t_byte_unbounded_ec))};
                if (!key_identifier_anonymous_map_int16_t_byte_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_byte_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int16_t_byte_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int16_t_byte_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_byte_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int16_t_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_byte_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int16_t_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_byte_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int16_t_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_byte_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int16_t_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_byte_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int16_t_byte_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_byte_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_byte_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int16_t_byte_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_byte_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_byte_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int16_t_byte_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int16_t_byte_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int16_t_byte_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int16_t_byte_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int16_t_byte_unbounded, element_flags_anonymous_map_int16_t_byte_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int16_t_byte_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_byte_unbounded), key_flags_anonymous_map_int16_t_byte_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_byte_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int16_t_byte_unbounded", type_ids_var_map_short_octet))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int16_t_byte_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_short_octet = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_short_octet = 0x00000000;
            bool common_var_map_short_octet_ec {false};
            CommonStructMember common_var_map_short_octet {TypeObjectUtils::build_common_struct_member(member_id_var_map_short_octet, member_flags_var_map_short_octet, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_octet, common_var_map_short_octet_ec))};
            if (!common_var_map_short_octet_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_short_octet member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_short_octet = "var_map_short_octet";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_short_octet;
            ann_custom_MapShortOctet.reset();
            CompleteMemberDetail detail_var_map_short_octet = TypeObjectUtils::build_complete_member_detail(name_var_map_short_octet, member_ann_builtin_var_map_short_octet, ann_custom_MapShortOctet);
            CompleteStructMember member_var_map_short_octet = TypeObjectUtils::build_complete_struct_member(common_var_map_short_octet, detail_var_map_short_octet);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapShortOctet, member_var_map_short_octet);
        }
        CompleteStructType struct_type_MapShortOctet = TypeObjectUtils::build_complete_struct_type(struct_flags_MapShortOctet, header_MapShortOctet, member_seq_MapShortOctet);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapShortOctet, type_name_MapShortOctet.to_string(), type_ids_MapShortOctet))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapShortOctet already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapShortChar_type_identifier(
        TypeIdentifierPair& type_ids_MapShortChar)
{

    ReturnCode_t return_code_MapShortChar {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapShortChar =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapShortChar", type_ids_MapShortChar);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapShortChar)
    {
        StructTypeFlag struct_flags_MapShortChar = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapShortChar = "MapShortChar";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapShortChar;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapShortChar;
        CompleteTypeDetail detail_MapShortChar = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapShortChar, ann_custom_MapShortChar, type_name_MapShortChar.to_string());
        CompleteStructHeader header_MapShortChar;
        header_MapShortChar = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapShortChar);
        CompleteStructMemberSeq member_seq_MapShortChar;
        {
            TypeIdentifierPair type_ids_var_map_short_char;
            ReturnCode_t return_code_var_map_short_char {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_short_char =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int16_t_char_unbounded", type_ids_var_map_short_char);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_char)
            {
                return_code_var_map_short_char =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_char", type_ids_var_map_short_char);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_char)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int16_t_char_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int16_t_char_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_char, element_identifier_anonymous_map_int16_t_char_unbounded_ec))};
                if (!element_identifier_anonymous_map_int16_t_char_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_char_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_short_char =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_short_char);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_char)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int16_t_char_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int16_t_char_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_char, key_identifier_anonymous_map_int16_t_char_unbounded_ec))};
                if (!key_identifier_anonymous_map_int16_t_char_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_char_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int16_t_char_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int16_t_char_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_char_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int16_t_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_char_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int16_t_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_char_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int16_t_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_char_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int16_t_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_char_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int16_t_char_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_char_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_char_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int16_t_char_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_char_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_char_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int16_t_char_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int16_t_char_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int16_t_char_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int16_t_char_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int16_t_char_unbounded, element_flags_anonymous_map_int16_t_char_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int16_t_char_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_char_unbounded), key_flags_anonymous_map_int16_t_char_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_char_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int16_t_char_unbounded", type_ids_var_map_short_char))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int16_t_char_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_short_char = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_short_char = 0x00000000;
            bool common_var_map_short_char_ec {false};
            CommonStructMember common_var_map_short_char {TypeObjectUtils::build_common_struct_member(member_id_var_map_short_char, member_flags_var_map_short_char, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_char, common_var_map_short_char_ec))};
            if (!common_var_map_short_char_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_short_char member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_short_char = "var_map_short_char";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_short_char;
            ann_custom_MapShortChar.reset();
            CompleteMemberDetail detail_var_map_short_char = TypeObjectUtils::build_complete_member_detail(name_var_map_short_char, member_ann_builtin_var_map_short_char, ann_custom_MapShortChar);
            CompleteStructMember member_var_map_short_char = TypeObjectUtils::build_complete_struct_member(common_var_map_short_char, detail_var_map_short_char);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapShortChar, member_var_map_short_char);
        }
        CompleteStructType struct_type_MapShortChar = TypeObjectUtils::build_complete_struct_type(struct_flags_MapShortChar, header_MapShortChar, member_seq_MapShortChar);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapShortChar, type_name_MapShortChar.to_string(), type_ids_MapShortChar))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapShortChar already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapShortWChar_type_identifier(
        TypeIdentifierPair& type_ids_MapShortWChar)
{

    ReturnCode_t return_code_MapShortWChar {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapShortWChar =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapShortWChar", type_ids_MapShortWChar);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapShortWChar)
    {
        StructTypeFlag struct_flags_MapShortWChar = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapShortWChar = "MapShortWChar";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapShortWChar;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapShortWChar;
        CompleteTypeDetail detail_MapShortWChar = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapShortWChar, ann_custom_MapShortWChar, type_name_MapShortWChar.to_string());
        CompleteStructHeader header_MapShortWChar;
        header_MapShortWChar = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapShortWChar);
        CompleteStructMemberSeq member_seq_MapShortWChar;
        {
            TypeIdentifierPair type_ids_var_map_short_wchar;
            ReturnCode_t return_code_var_map_short_wchar {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_short_wchar =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int16_t_wchar_t_unbounded", type_ids_var_map_short_wchar);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_wchar)
            {
                return_code_var_map_short_wchar =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_wchar_t", type_ids_var_map_short_wchar);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_wchar)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int16_t_wchar_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int16_t_wchar_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_wchar, element_identifier_anonymous_map_int16_t_wchar_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_int16_t_wchar_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_wchar_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_short_wchar =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_short_wchar);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_wchar)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int16_t_wchar_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int16_t_wchar_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_wchar, key_identifier_anonymous_map_int16_t_wchar_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_int16_t_wchar_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_wchar_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int16_t_wchar_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int16_t_wchar_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_wchar_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int16_t_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_wchar_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int16_t_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_wchar_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int16_t_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_wchar_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int16_t_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_wchar_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int16_t_wchar_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_wchar_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_wchar_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int16_t_wchar_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_wchar_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_wchar_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int16_t_wchar_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int16_t_wchar_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int16_t_wchar_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int16_t_wchar_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int16_t_wchar_t_unbounded, element_flags_anonymous_map_int16_t_wchar_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int16_t_wchar_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_wchar_t_unbounded), key_flags_anonymous_map_int16_t_wchar_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_wchar_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int16_t_wchar_t_unbounded", type_ids_var_map_short_wchar))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int16_t_wchar_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_short_wchar = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_short_wchar = 0x00000000;
            bool common_var_map_short_wchar_ec {false};
            CommonStructMember common_var_map_short_wchar {TypeObjectUtils::build_common_struct_member(member_id_var_map_short_wchar, member_flags_var_map_short_wchar, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_wchar, common_var_map_short_wchar_ec))};
            if (!common_var_map_short_wchar_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_short_wchar member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_short_wchar = "var_map_short_wchar";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_short_wchar;
            ann_custom_MapShortWChar.reset();
            CompleteMemberDetail detail_var_map_short_wchar = TypeObjectUtils::build_complete_member_detail(name_var_map_short_wchar, member_ann_builtin_var_map_short_wchar, ann_custom_MapShortWChar);
            CompleteStructMember member_var_map_short_wchar = TypeObjectUtils::build_complete_struct_member(common_var_map_short_wchar, detail_var_map_short_wchar);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapShortWChar, member_var_map_short_wchar);
        }
        CompleteStructType struct_type_MapShortWChar = TypeObjectUtils::build_complete_struct_type(struct_flags_MapShortWChar, header_MapShortWChar, member_seq_MapShortWChar);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapShortWChar, type_name_MapShortWChar.to_string(), type_ids_MapShortWChar))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapShortWChar already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapShortString_type_identifier(
        TypeIdentifierPair& type_ids_MapShortString)
{

    ReturnCode_t return_code_MapShortString {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapShortString =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapShortString", type_ids_MapShortString);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapShortString)
    {
        StructTypeFlag struct_flags_MapShortString = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapShortString = "MapShortString";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapShortString;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapShortString;
        CompleteTypeDetail detail_MapShortString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapShortString, ann_custom_MapShortString, type_name_MapShortString.to_string());
        CompleteStructHeader header_MapShortString;
        header_MapShortString = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapShortString);
        CompleteStructMemberSeq member_seq_MapShortString;
        {
            TypeIdentifierPair type_ids_var_map_short_string;
            ReturnCode_t return_code_var_map_short_string {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_short_string =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int16_t_anonymous_string_unbounded_unbounded", type_ids_var_map_short_string);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_string)
            {
                return_code_var_map_short_string =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_short_string);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_string)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_short_string))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool element_identifier_anonymous_map_int16_t_anonymous_string_unbounded_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int16_t_anonymous_string_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_string, element_identifier_anonymous_map_int16_t_anonymous_string_unbounded_unbounded_ec))};
                if (!element_identifier_anonymous_map_int16_t_anonymous_string_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_anonymous_string_unbounded_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_short_string =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_short_string);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_string)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int16_t_anonymous_string_unbounded_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int16_t_anonymous_string_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_string, key_identifier_anonymous_map_int16_t_anonymous_string_unbounded_unbounded_ec))};
                if (!key_identifier_anonymous_map_int16_t_anonymous_string_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_anonymous_string_unbounded_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int16_t_anonymous_string_unbounded_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int16_t_anonymous_string_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_string_unbounded_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int16_t_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_string_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int16_t_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_string_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int16_t_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_string_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int16_t_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_string_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int16_t_anonymous_string_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_string_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_string_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int16_t_anonymous_string_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_string_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_string_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int16_t_anonymous_string_unbounded_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int16_t_anonymous_string_unbounded_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int16_t_anonymous_string_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int16_t_anonymous_string_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int16_t_anonymous_string_unbounded_unbounded, element_flags_anonymous_map_int16_t_anonymous_string_unbounded_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int16_t_anonymous_string_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_anonymous_string_unbounded_unbounded), key_flags_anonymous_map_int16_t_anonymous_string_unbounded_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_anonymous_string_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int16_t_anonymous_string_unbounded_unbounded", type_ids_var_map_short_string))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int16_t_anonymous_string_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_short_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_short_string = 0x00000000;
            bool common_var_map_short_string_ec {false};
            CommonStructMember common_var_map_short_string {TypeObjectUtils::build_common_struct_member(member_id_var_map_short_string, member_flags_var_map_short_string, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_string, common_var_map_short_string_ec))};
            if (!common_var_map_short_string_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_short_string member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_short_string = "var_map_short_string";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_short_string;
            ann_custom_MapShortString.reset();
            CompleteMemberDetail detail_var_map_short_string = TypeObjectUtils::build_complete_member_detail(name_var_map_short_string, member_ann_builtin_var_map_short_string, ann_custom_MapShortString);
            CompleteStructMember member_var_map_short_string = TypeObjectUtils::build_complete_struct_member(common_var_map_short_string, detail_var_map_short_string);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapShortString, member_var_map_short_string);
        }
        CompleteStructType struct_type_MapShortString = TypeObjectUtils::build_complete_struct_type(struct_flags_MapShortString, header_MapShortString, member_seq_MapShortString);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapShortString, type_name_MapShortString.to_string(), type_ids_MapShortString))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapShortString already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapShortWString_type_identifier(
        TypeIdentifierPair& type_ids_MapShortWString)
{

    ReturnCode_t return_code_MapShortWString {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapShortWString =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapShortWString", type_ids_MapShortWString);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapShortWString)
    {
        StructTypeFlag struct_flags_MapShortWString = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapShortWString = "MapShortWString";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapShortWString;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapShortWString;
        CompleteTypeDetail detail_MapShortWString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapShortWString, ann_custom_MapShortWString, type_name_MapShortWString.to_string());
        CompleteStructHeader header_MapShortWString;
        header_MapShortWString = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapShortWString);
        CompleteStructMemberSeq member_seq_MapShortWString;
        {
            TypeIdentifierPair type_ids_var_map_short_wstring;
            ReturnCode_t return_code_var_map_short_wstring {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_short_wstring =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded", type_ids_var_map_short_wstring);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_wstring)
            {
                return_code_var_map_short_wstring =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_short_wstring);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_wstring)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_short_wstring, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool element_identifier_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_wstring, element_identifier_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded_ec))};
                if (!element_identifier_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_short_wstring =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_short_wstring);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_wstring)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_wstring, key_identifier_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded_ec))};
                if (!key_identifier_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded, element_flags_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded), key_flags_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded", type_ids_var_map_short_wstring))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int16_t_anonymous_wstring_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_short_wstring = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_short_wstring = 0x00000000;
            bool common_var_map_short_wstring_ec {false};
            CommonStructMember common_var_map_short_wstring {TypeObjectUtils::build_common_struct_member(member_id_var_map_short_wstring, member_flags_var_map_short_wstring, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_wstring, common_var_map_short_wstring_ec))};
            if (!common_var_map_short_wstring_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_short_wstring member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_short_wstring = "var_map_short_wstring";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_short_wstring;
            ann_custom_MapShortWString.reset();
            CompleteMemberDetail detail_var_map_short_wstring = TypeObjectUtils::build_complete_member_detail(name_var_map_short_wstring, member_ann_builtin_var_map_short_wstring, ann_custom_MapShortWString);
            CompleteStructMember member_var_map_short_wstring = TypeObjectUtils::build_complete_struct_member(common_var_map_short_wstring, detail_var_map_short_wstring);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapShortWString, member_var_map_short_wstring);
        }
        CompleteStructType struct_type_MapShortWString = TypeObjectUtils::build_complete_struct_type(struct_flags_MapShortWString, header_MapShortWString, member_seq_MapShortWString);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapShortWString, type_name_MapShortWString.to_string(), type_ids_MapShortWString))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapShortWString already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapShortInnerAliasBoundedStringHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapShortInnerAliasBoundedStringHelper)
{

    ReturnCode_t return_code_MapShortInnerAliasBoundedStringHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapShortInnerAliasBoundedStringHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapShortInnerAliasBoundedStringHelper", type_ids_MapShortInnerAliasBoundedStringHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapShortInnerAliasBoundedStringHelper)
    {
        StructTypeFlag struct_flags_MapShortInnerAliasBoundedStringHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapShortInnerAliasBoundedStringHelper = "MapShortInnerAliasBoundedStringHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapShortInnerAliasBoundedStringHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapShortInnerAliasBoundedStringHelper;
        CompleteTypeDetail detail_MapShortInnerAliasBoundedStringHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapShortInnerAliasBoundedStringHelper, ann_custom_MapShortInnerAliasBoundedStringHelper, type_name_MapShortInnerAliasBoundedStringHelper.to_string());
        CompleteStructHeader header_MapShortInnerAliasBoundedStringHelper;
        header_MapShortInnerAliasBoundedStringHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapShortInnerAliasBoundedStringHelper);
        CompleteStructMemberSeq member_seq_MapShortInnerAliasBoundedStringHelper;
        {
            TypeIdentifierPair type_ids_var_map_short_inneraliasboundedstringhelper;
            ReturnCode_t return_code_var_map_short_inneraliasboundedstringhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_short_inneraliasboundedstringhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int16_t_anonymous_string_10_unbounded", type_ids_var_map_short_inneraliasboundedstringhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_inneraliasboundedstringhelper)
            {
                return_code_var_map_short_inneraliasboundedstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_short_inneraliasboundedstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_inneraliasboundedstringhelper)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_short_inneraliasboundedstringhelper);
                }
                bool element_identifier_anonymous_map_int16_t_anonymous_string_10_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int16_t_anonymous_string_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_inneraliasboundedstringhelper, element_identifier_anonymous_map_int16_t_anonymous_string_10_unbounded_ec))};
                if (!element_identifier_anonymous_map_int16_t_anonymous_string_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_anonymous_string_10_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_short_inneraliasboundedstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_short_inneraliasboundedstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_inneraliasboundedstringhelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int16_t_anonymous_string_10_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int16_t_anonymous_string_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_inneraliasboundedstringhelper, key_identifier_anonymous_map_int16_t_anonymous_string_10_unbounded_ec))};
                if (!key_identifier_anonymous_map_int16_t_anonymous_string_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_anonymous_string_10_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int16_t_anonymous_string_10_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int16_t_anonymous_string_10_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_string_10_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int16_t_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_string_10_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int16_t_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_string_10_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int16_t_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_string_10_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int16_t_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_string_10_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int16_t_anonymous_string_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_string_10_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_string_10_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int16_t_anonymous_string_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_string_10_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_string_10_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int16_t_anonymous_string_10_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int16_t_anonymous_string_10_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int16_t_anonymous_string_10_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int16_t_anonymous_string_10_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int16_t_anonymous_string_10_unbounded, element_flags_anonymous_map_int16_t_anonymous_string_10_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int16_t_anonymous_string_10_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_anonymous_string_10_unbounded), key_flags_anonymous_map_int16_t_anonymous_string_10_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_anonymous_string_10_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int16_t_anonymous_string_10_unbounded", type_ids_var_map_short_inneraliasboundedstringhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int16_t_anonymous_string_10_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_short_inneraliasboundedstringhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_short_inneraliasboundedstringhelper = 0x00000000;
            bool common_var_map_short_inneraliasboundedstringhelper_ec {false};
            CommonStructMember common_var_map_short_inneraliasboundedstringhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_short_inneraliasboundedstringhelper, member_flags_var_map_short_inneraliasboundedstringhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_inneraliasboundedstringhelper, common_var_map_short_inneraliasboundedstringhelper_ec))};
            if (!common_var_map_short_inneraliasboundedstringhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_short_inneraliasboundedstringhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_short_inneraliasboundedstringhelper = "var_map_short_inneraliasboundedstringhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_short_inneraliasboundedstringhelper;
            ann_custom_MapShortInnerAliasBoundedStringHelper.reset();
            CompleteMemberDetail detail_var_map_short_inneraliasboundedstringhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_short_inneraliasboundedstringhelper, member_ann_builtin_var_map_short_inneraliasboundedstringhelper, ann_custom_MapShortInnerAliasBoundedStringHelper);
            CompleteStructMember member_var_map_short_inneraliasboundedstringhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_short_inneraliasboundedstringhelper, detail_var_map_short_inneraliasboundedstringhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapShortInnerAliasBoundedStringHelper, member_var_map_short_inneraliasboundedstringhelper);
        }
        CompleteStructType struct_type_MapShortInnerAliasBoundedStringHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapShortInnerAliasBoundedStringHelper, header_MapShortInnerAliasBoundedStringHelper, member_seq_MapShortInnerAliasBoundedStringHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapShortInnerAliasBoundedStringHelper, type_name_MapShortInnerAliasBoundedStringHelper.to_string(), type_ids_MapShortInnerAliasBoundedStringHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapShortInnerAliasBoundedStringHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapShortInnerAliasBoundedWStringHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapShortInnerAliasBoundedWStringHelper)
{

    ReturnCode_t return_code_MapShortInnerAliasBoundedWStringHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapShortInnerAliasBoundedWStringHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapShortInnerAliasBoundedWStringHelper", type_ids_MapShortInnerAliasBoundedWStringHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapShortInnerAliasBoundedWStringHelper)
    {
        StructTypeFlag struct_flags_MapShortInnerAliasBoundedWStringHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapShortInnerAliasBoundedWStringHelper = "MapShortInnerAliasBoundedWStringHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapShortInnerAliasBoundedWStringHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapShortInnerAliasBoundedWStringHelper;
        CompleteTypeDetail detail_MapShortInnerAliasBoundedWStringHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapShortInnerAliasBoundedWStringHelper, ann_custom_MapShortInnerAliasBoundedWStringHelper, type_name_MapShortInnerAliasBoundedWStringHelper.to_string());
        CompleteStructHeader header_MapShortInnerAliasBoundedWStringHelper;
        header_MapShortInnerAliasBoundedWStringHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapShortInnerAliasBoundedWStringHelper);
        CompleteStructMemberSeq member_seq_MapShortInnerAliasBoundedWStringHelper;
        {
            TypeIdentifierPair type_ids_var_map_short_inneraliasboundedwstringhelper;
            ReturnCode_t return_code_var_map_short_inneraliasboundedwstringhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_short_inneraliasboundedwstringhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int16_t_anonymous_wstring_10_unbounded", type_ids_var_map_short_inneraliasboundedwstringhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_inneraliasboundedwstringhelper)
            {
                return_code_var_map_short_inneraliasboundedwstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_short_inneraliasboundedwstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_inneraliasboundedwstringhelper)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_short_inneraliasboundedwstringhelper);
                }
                bool element_identifier_anonymous_map_int16_t_anonymous_wstring_10_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int16_t_anonymous_wstring_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_inneraliasboundedwstringhelper, element_identifier_anonymous_map_int16_t_anonymous_wstring_10_unbounded_ec))};
                if (!element_identifier_anonymous_map_int16_t_anonymous_wstring_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_anonymous_wstring_10_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_short_inneraliasboundedwstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_short_inneraliasboundedwstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_inneraliasboundedwstringhelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int16_t_anonymous_wstring_10_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int16_t_anonymous_wstring_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_inneraliasboundedwstringhelper, key_identifier_anonymous_map_int16_t_anonymous_wstring_10_unbounded_ec))};
                if (!key_identifier_anonymous_map_int16_t_anonymous_wstring_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_anonymous_wstring_10_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int16_t_anonymous_wstring_10_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int16_t_anonymous_wstring_10_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_wstring_10_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int16_t_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_wstring_10_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int16_t_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_wstring_10_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int16_t_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_wstring_10_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int16_t_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_wstring_10_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int16_t_anonymous_wstring_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_wstring_10_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_wstring_10_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int16_t_anonymous_wstring_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_wstring_10_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_wstring_10_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int16_t_anonymous_wstring_10_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int16_t_anonymous_wstring_10_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int16_t_anonymous_wstring_10_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int16_t_anonymous_wstring_10_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int16_t_anonymous_wstring_10_unbounded, element_flags_anonymous_map_int16_t_anonymous_wstring_10_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int16_t_anonymous_wstring_10_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_anonymous_wstring_10_unbounded), key_flags_anonymous_map_int16_t_anonymous_wstring_10_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_anonymous_wstring_10_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int16_t_anonymous_wstring_10_unbounded", type_ids_var_map_short_inneraliasboundedwstringhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int16_t_anonymous_wstring_10_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_short_inneraliasboundedwstringhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_short_inneraliasboundedwstringhelper = 0x00000000;
            bool common_var_map_short_inneraliasboundedwstringhelper_ec {false};
            CommonStructMember common_var_map_short_inneraliasboundedwstringhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_short_inneraliasboundedwstringhelper, member_flags_var_map_short_inneraliasboundedwstringhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_inneraliasboundedwstringhelper, common_var_map_short_inneraliasboundedwstringhelper_ec))};
            if (!common_var_map_short_inneraliasboundedwstringhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_short_inneraliasboundedwstringhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_short_inneraliasboundedwstringhelper = "var_map_short_inneraliasboundedwstringhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_short_inneraliasboundedwstringhelper;
            ann_custom_MapShortInnerAliasBoundedWStringHelper.reset();
            CompleteMemberDetail detail_var_map_short_inneraliasboundedwstringhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_short_inneraliasboundedwstringhelper, member_ann_builtin_var_map_short_inneraliasboundedwstringhelper, ann_custom_MapShortInnerAliasBoundedWStringHelper);
            CompleteStructMember member_var_map_short_inneraliasboundedwstringhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_short_inneraliasboundedwstringhelper, detail_var_map_short_inneraliasboundedwstringhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapShortInnerAliasBoundedWStringHelper, member_var_map_short_inneraliasboundedwstringhelper);
        }
        CompleteStructType struct_type_MapShortInnerAliasBoundedWStringHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapShortInnerAliasBoundedWStringHelper, header_MapShortInnerAliasBoundedWStringHelper, member_seq_MapShortInnerAliasBoundedWStringHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapShortInnerAliasBoundedWStringHelper, type_name_MapShortInnerAliasBoundedWStringHelper.to_string(), type_ids_MapShortInnerAliasBoundedWStringHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapShortInnerAliasBoundedWStringHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapShortInnerEnumHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapShortInnerEnumHelper)
{

    ReturnCode_t return_code_MapShortInnerEnumHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapShortInnerEnumHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapShortInnerEnumHelper", type_ids_MapShortInnerEnumHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapShortInnerEnumHelper)
    {
        StructTypeFlag struct_flags_MapShortInnerEnumHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapShortInnerEnumHelper = "MapShortInnerEnumHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapShortInnerEnumHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapShortInnerEnumHelper;
        CompleteTypeDetail detail_MapShortInnerEnumHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapShortInnerEnumHelper, ann_custom_MapShortInnerEnumHelper, type_name_MapShortInnerEnumHelper.to_string());
        CompleteStructHeader header_MapShortInnerEnumHelper;
        header_MapShortInnerEnumHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapShortInnerEnumHelper);
        CompleteStructMemberSeq member_seq_MapShortInnerEnumHelper;
        {
            TypeIdentifierPair type_ids_var_map_short_innerenumhelper;
            ReturnCode_t return_code_var_map_short_innerenumhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_short_innerenumhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int16_t_InnerEnumHelper_unbounded", type_ids_var_map_short_innerenumhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_innerenumhelper)
            {
                return_code_var_map_short_innerenumhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerEnumHelper", type_ids_var_map_short_innerenumhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_innerenumhelper)
                {
                ::register_InnerEnumHelper_type_identifier(type_ids_var_map_short_innerenumhelper);
                }
                bool element_identifier_anonymous_map_int16_t_InnerEnumHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int16_t_InnerEnumHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_innerenumhelper, element_identifier_anonymous_map_int16_t_InnerEnumHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_int16_t_InnerEnumHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_InnerEnumHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_short_innerenumhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_short_innerenumhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_innerenumhelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int16_t_InnerEnumHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int16_t_InnerEnumHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_innerenumhelper, key_identifier_anonymous_map_int16_t_InnerEnumHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_int16_t_InnerEnumHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_InnerEnumHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int16_t_InnerEnumHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int16_t_InnerEnumHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerEnumHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int16_t_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerEnumHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int16_t_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerEnumHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int16_t_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerEnumHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int16_t_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerEnumHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int16_t_InnerEnumHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerEnumHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerEnumHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int16_t_InnerEnumHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerEnumHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerEnumHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int16_t_InnerEnumHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int16_t_InnerEnumHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int16_t_InnerEnumHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int16_t_InnerEnumHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int16_t_InnerEnumHelper_unbounded, element_flags_anonymous_map_int16_t_InnerEnumHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int16_t_InnerEnumHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_InnerEnumHelper_unbounded), key_flags_anonymous_map_int16_t_InnerEnumHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_InnerEnumHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int16_t_InnerEnumHelper_unbounded", type_ids_var_map_short_innerenumhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int16_t_InnerEnumHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_short_innerenumhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_short_innerenumhelper = 0x00000000;
            bool common_var_map_short_innerenumhelper_ec {false};
            CommonStructMember common_var_map_short_innerenumhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_short_innerenumhelper, member_flags_var_map_short_innerenumhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_innerenumhelper, common_var_map_short_innerenumhelper_ec))};
            if (!common_var_map_short_innerenumhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_short_innerenumhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_short_innerenumhelper = "var_map_short_innerenumhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_short_innerenumhelper;
            ann_custom_MapShortInnerEnumHelper.reset();
            CompleteMemberDetail detail_var_map_short_innerenumhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_short_innerenumhelper, member_ann_builtin_var_map_short_innerenumhelper, ann_custom_MapShortInnerEnumHelper);
            CompleteStructMember member_var_map_short_innerenumhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_short_innerenumhelper, detail_var_map_short_innerenumhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapShortInnerEnumHelper, member_var_map_short_innerenumhelper);
        }
        CompleteStructType struct_type_MapShortInnerEnumHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapShortInnerEnumHelper, header_MapShortInnerEnumHelper, member_seq_MapShortInnerEnumHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapShortInnerEnumHelper, type_name_MapShortInnerEnumHelper.to_string(), type_ids_MapShortInnerEnumHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapShortInnerEnumHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapShortInnerBitMaskHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapShortInnerBitMaskHelper)
{

    ReturnCode_t return_code_MapShortInnerBitMaskHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapShortInnerBitMaskHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapShortInnerBitMaskHelper", type_ids_MapShortInnerBitMaskHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapShortInnerBitMaskHelper)
    {
        StructTypeFlag struct_flags_MapShortInnerBitMaskHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapShortInnerBitMaskHelper = "MapShortInnerBitMaskHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapShortInnerBitMaskHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapShortInnerBitMaskHelper;
        CompleteTypeDetail detail_MapShortInnerBitMaskHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapShortInnerBitMaskHelper, ann_custom_MapShortInnerBitMaskHelper, type_name_MapShortInnerBitMaskHelper.to_string());
        CompleteStructHeader header_MapShortInnerBitMaskHelper;
        header_MapShortInnerBitMaskHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapShortInnerBitMaskHelper);
        CompleteStructMemberSeq member_seq_MapShortInnerBitMaskHelper;
        {
            TypeIdentifierPair type_ids_var_map_short_innerbitmaskhelper;
            ReturnCode_t return_code_var_map_short_innerbitmaskhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_short_innerbitmaskhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int16_t_InnerBitMaskHelper_unbounded", type_ids_var_map_short_innerbitmaskhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_innerbitmaskhelper)
            {
                return_code_var_map_short_innerbitmaskhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerBitMaskHelper", type_ids_var_map_short_innerbitmaskhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_innerbitmaskhelper)
                {
                ::register_InnerBitMaskHelper_type_identifier(type_ids_var_map_short_innerbitmaskhelper);
                }
                bool element_identifier_anonymous_map_int16_t_InnerBitMaskHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int16_t_InnerBitMaskHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_innerbitmaskhelper, element_identifier_anonymous_map_int16_t_InnerBitMaskHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_int16_t_InnerBitMaskHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_InnerBitMaskHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_short_innerbitmaskhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_short_innerbitmaskhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_innerbitmaskhelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int16_t_InnerBitMaskHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int16_t_InnerBitMaskHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_innerbitmaskhelper, key_identifier_anonymous_map_int16_t_InnerBitMaskHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_int16_t_InnerBitMaskHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_InnerBitMaskHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int16_t_InnerBitMaskHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int16_t_InnerBitMaskHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerBitMaskHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int16_t_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerBitMaskHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int16_t_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerBitMaskHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int16_t_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerBitMaskHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int16_t_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerBitMaskHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int16_t_InnerBitMaskHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerBitMaskHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerBitMaskHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int16_t_InnerBitMaskHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerBitMaskHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerBitMaskHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int16_t_InnerBitMaskHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int16_t_InnerBitMaskHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int16_t_InnerBitMaskHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int16_t_InnerBitMaskHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int16_t_InnerBitMaskHelper_unbounded, element_flags_anonymous_map_int16_t_InnerBitMaskHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int16_t_InnerBitMaskHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_InnerBitMaskHelper_unbounded), key_flags_anonymous_map_int16_t_InnerBitMaskHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_InnerBitMaskHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int16_t_InnerBitMaskHelper_unbounded", type_ids_var_map_short_innerbitmaskhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int16_t_InnerBitMaskHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_short_innerbitmaskhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_short_innerbitmaskhelper = 0x00000000;
            bool common_var_map_short_innerbitmaskhelper_ec {false};
            CommonStructMember common_var_map_short_innerbitmaskhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_short_innerbitmaskhelper, member_flags_var_map_short_innerbitmaskhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_innerbitmaskhelper, common_var_map_short_innerbitmaskhelper_ec))};
            if (!common_var_map_short_innerbitmaskhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_short_innerbitmaskhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_short_innerbitmaskhelper = "var_map_short_innerbitmaskhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_short_innerbitmaskhelper;
            ann_custom_MapShortInnerBitMaskHelper.reset();
            CompleteMemberDetail detail_var_map_short_innerbitmaskhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_short_innerbitmaskhelper, member_ann_builtin_var_map_short_innerbitmaskhelper, ann_custom_MapShortInnerBitMaskHelper);
            CompleteStructMember member_var_map_short_innerbitmaskhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_short_innerbitmaskhelper, detail_var_map_short_innerbitmaskhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapShortInnerBitMaskHelper, member_var_map_short_innerbitmaskhelper);
        }
        CompleteStructType struct_type_MapShortInnerBitMaskHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapShortInnerBitMaskHelper, header_MapShortInnerBitMaskHelper, member_seq_MapShortInnerBitMaskHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapShortInnerBitMaskHelper, type_name_MapShortInnerBitMaskHelper.to_string(), type_ids_MapShortInnerBitMaskHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapShortInnerBitMaskHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapShortInnerAliasHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapShortInnerAliasHelper)
{

    ReturnCode_t return_code_MapShortInnerAliasHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapShortInnerAliasHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapShortInnerAliasHelper", type_ids_MapShortInnerAliasHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapShortInnerAliasHelper)
    {
        StructTypeFlag struct_flags_MapShortInnerAliasHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapShortInnerAliasHelper = "MapShortInnerAliasHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapShortInnerAliasHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapShortInnerAliasHelper;
        CompleteTypeDetail detail_MapShortInnerAliasHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapShortInnerAliasHelper, ann_custom_MapShortInnerAliasHelper, type_name_MapShortInnerAliasHelper.to_string());
        CompleteStructHeader header_MapShortInnerAliasHelper;
        header_MapShortInnerAliasHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapShortInnerAliasHelper);
        CompleteStructMemberSeq member_seq_MapShortInnerAliasHelper;
        {
            TypeIdentifierPair type_ids_var_map_short_inneraliashelper;
            ReturnCode_t return_code_var_map_short_inneraliashelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_short_inneraliashelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int16_t_InnerAliasHelper_unbounded", type_ids_var_map_short_inneraliashelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_inneraliashelper)
            {
                return_code_var_map_short_inneraliashelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerAliasHelper", type_ids_var_map_short_inneraliashelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_inneraliashelper)
                {
                ::register_InnerAliasHelper_type_identifier(type_ids_var_map_short_inneraliashelper);
                }
                bool element_identifier_anonymous_map_int16_t_InnerAliasHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int16_t_InnerAliasHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_inneraliashelper, element_identifier_anonymous_map_int16_t_InnerAliasHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_int16_t_InnerAliasHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_InnerAliasHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_short_inneraliashelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_short_inneraliashelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_inneraliashelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int16_t_InnerAliasHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int16_t_InnerAliasHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_inneraliashelper, key_identifier_anonymous_map_int16_t_InnerAliasHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_int16_t_InnerAliasHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_InnerAliasHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int16_t_InnerAliasHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int16_t_InnerAliasHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerAliasHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int16_t_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerAliasHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int16_t_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerAliasHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int16_t_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerAliasHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int16_t_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerAliasHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int16_t_InnerAliasHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerAliasHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerAliasHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int16_t_InnerAliasHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerAliasHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerAliasHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int16_t_InnerAliasHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int16_t_InnerAliasHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int16_t_InnerAliasHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int16_t_InnerAliasHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int16_t_InnerAliasHelper_unbounded, element_flags_anonymous_map_int16_t_InnerAliasHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int16_t_InnerAliasHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_InnerAliasHelper_unbounded), key_flags_anonymous_map_int16_t_InnerAliasHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_InnerAliasHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int16_t_InnerAliasHelper_unbounded", type_ids_var_map_short_inneraliashelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int16_t_InnerAliasHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_short_inneraliashelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_short_inneraliashelper = 0x00000000;
            bool common_var_map_short_inneraliashelper_ec {false};
            CommonStructMember common_var_map_short_inneraliashelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_short_inneraliashelper, member_flags_var_map_short_inneraliashelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_inneraliashelper, common_var_map_short_inneraliashelper_ec))};
            if (!common_var_map_short_inneraliashelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_short_inneraliashelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_short_inneraliashelper = "var_map_short_inneraliashelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_short_inneraliashelper;
            ann_custom_MapShortInnerAliasHelper.reset();
            CompleteMemberDetail detail_var_map_short_inneraliashelper = TypeObjectUtils::build_complete_member_detail(name_var_map_short_inneraliashelper, member_ann_builtin_var_map_short_inneraliashelper, ann_custom_MapShortInnerAliasHelper);
            CompleteStructMember member_var_map_short_inneraliashelper = TypeObjectUtils::build_complete_struct_member(common_var_map_short_inneraliashelper, detail_var_map_short_inneraliashelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapShortInnerAliasHelper, member_var_map_short_inneraliashelper);
        }
        CompleteStructType struct_type_MapShortInnerAliasHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapShortInnerAliasHelper, header_MapShortInnerAliasHelper, member_seq_MapShortInnerAliasHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapShortInnerAliasHelper, type_name_MapShortInnerAliasHelper.to_string(), type_ids_MapShortInnerAliasHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapShortInnerAliasHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapShortInnerAliasArrayHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapShortInnerAliasArrayHelper)
{

    ReturnCode_t return_code_MapShortInnerAliasArrayHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapShortInnerAliasArrayHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapShortInnerAliasArrayHelper", type_ids_MapShortInnerAliasArrayHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapShortInnerAliasArrayHelper)
    {
        StructTypeFlag struct_flags_MapShortInnerAliasArrayHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapShortInnerAliasArrayHelper = "MapShortInnerAliasArrayHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapShortInnerAliasArrayHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapShortInnerAliasArrayHelper;
        CompleteTypeDetail detail_MapShortInnerAliasArrayHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapShortInnerAliasArrayHelper, ann_custom_MapShortInnerAliasArrayHelper, type_name_MapShortInnerAliasArrayHelper.to_string());
        CompleteStructHeader header_MapShortInnerAliasArrayHelper;
        header_MapShortInnerAliasArrayHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapShortInnerAliasArrayHelper);
        CompleteStructMemberSeq member_seq_MapShortInnerAliasArrayHelper;
        {
            TypeIdentifierPair type_ids_var_map_short_inneraliasarrayhelper;
            ReturnCode_t return_code_var_map_short_inneraliasarrayhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_short_inneraliasarrayhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded", type_ids_var_map_short_inneraliasarrayhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_inneraliasarrayhelper)
            {
                return_code_var_map_short_inneraliasarrayhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_array_helper", type_ids_var_map_short_inneraliasarrayhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_inneraliasarrayhelper)
                {
                ::register_Inner_alias_array_helper_type_identifier(type_ids_var_map_short_inneraliasarrayhelper);
                }
                bool element_identifier_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_inneraliasarrayhelper, element_identifier_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded_ec))};
                if (!element_identifier_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_short_inneraliasarrayhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_short_inneraliasarrayhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_inneraliasarrayhelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_inneraliasarrayhelper, key_identifier_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded_ec))};
                if (!key_identifier_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded, element_flags_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded), key_flags_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded", type_ids_var_map_short_inneraliasarrayhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int16_t_anonymous_array_int16_t_2_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_short_inneraliasarrayhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_short_inneraliasarrayhelper = 0x00000000;
            bool common_var_map_short_inneraliasarrayhelper_ec {false};
            CommonStructMember common_var_map_short_inneraliasarrayhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_short_inneraliasarrayhelper, member_flags_var_map_short_inneraliasarrayhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_inneraliasarrayhelper, common_var_map_short_inneraliasarrayhelper_ec))};
            if (!common_var_map_short_inneraliasarrayhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_short_inneraliasarrayhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_short_inneraliasarrayhelper = "var_map_short_inneraliasarrayhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_short_inneraliasarrayhelper;
            ann_custom_MapShortInnerAliasArrayHelper.reset();
            CompleteMemberDetail detail_var_map_short_inneraliasarrayhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_short_inneraliasarrayhelper, member_ann_builtin_var_map_short_inneraliasarrayhelper, ann_custom_MapShortInnerAliasArrayHelper);
            CompleteStructMember member_var_map_short_inneraliasarrayhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_short_inneraliasarrayhelper, detail_var_map_short_inneraliasarrayhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapShortInnerAliasArrayHelper, member_var_map_short_inneraliasarrayhelper);
        }
        CompleteStructType struct_type_MapShortInnerAliasArrayHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapShortInnerAliasArrayHelper, header_MapShortInnerAliasArrayHelper, member_seq_MapShortInnerAliasArrayHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapShortInnerAliasArrayHelper, type_name_MapShortInnerAliasArrayHelper.to_string(), type_ids_MapShortInnerAliasArrayHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapShortInnerAliasArrayHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapShortInnerAliasSequenceHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapShortInnerAliasSequenceHelper)
{

    ReturnCode_t return_code_MapShortInnerAliasSequenceHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapShortInnerAliasSequenceHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapShortInnerAliasSequenceHelper", type_ids_MapShortInnerAliasSequenceHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapShortInnerAliasSequenceHelper)
    {
        StructTypeFlag struct_flags_MapShortInnerAliasSequenceHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapShortInnerAliasSequenceHelper = "MapShortInnerAliasSequenceHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapShortInnerAliasSequenceHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapShortInnerAliasSequenceHelper;
        CompleteTypeDetail detail_MapShortInnerAliasSequenceHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapShortInnerAliasSequenceHelper, ann_custom_MapShortInnerAliasSequenceHelper, type_name_MapShortInnerAliasSequenceHelper.to_string());
        CompleteStructHeader header_MapShortInnerAliasSequenceHelper;
        header_MapShortInnerAliasSequenceHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapShortInnerAliasSequenceHelper);
        CompleteStructMemberSeq member_seq_MapShortInnerAliasSequenceHelper;
        {
            TypeIdentifierPair type_ids_var_map_short_inneraliassequencehelper;
            ReturnCode_t return_code_var_map_short_inneraliassequencehelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_short_inneraliassequencehelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded", type_ids_var_map_short_inneraliassequencehelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_inneraliassequencehelper)
            {
                return_code_var_map_short_inneraliassequencehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_sequence_helper", type_ids_var_map_short_inneraliassequencehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_inneraliassequencehelper)
                {
                ::register_Inner_alias_sequence_helper_type_identifier(type_ids_var_map_short_inneraliassequencehelper);
                }
                bool element_identifier_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_inneraliassequencehelper, element_identifier_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded_ec))};
                if (!element_identifier_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_short_inneraliassequencehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_short_inneraliassequencehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_inneraliassequencehelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_inneraliassequencehelper, key_identifier_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded_ec))};
                if (!key_identifier_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded, element_flags_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded), key_flags_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded", type_ids_var_map_short_inneraliassequencehelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int16_t_anonymous_sequence_int16_t_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_short_inneraliassequencehelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_short_inneraliassequencehelper = 0x00000000;
            bool common_var_map_short_inneraliassequencehelper_ec {false};
            CommonStructMember common_var_map_short_inneraliassequencehelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_short_inneraliassequencehelper, member_flags_var_map_short_inneraliassequencehelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_inneraliassequencehelper, common_var_map_short_inneraliassequencehelper_ec))};
            if (!common_var_map_short_inneraliassequencehelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_short_inneraliassequencehelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_short_inneraliassequencehelper = "var_map_short_inneraliassequencehelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_short_inneraliassequencehelper;
            ann_custom_MapShortInnerAliasSequenceHelper.reset();
            CompleteMemberDetail detail_var_map_short_inneraliassequencehelper = TypeObjectUtils::build_complete_member_detail(name_var_map_short_inneraliassequencehelper, member_ann_builtin_var_map_short_inneraliassequencehelper, ann_custom_MapShortInnerAliasSequenceHelper);
            CompleteStructMember member_var_map_short_inneraliassequencehelper = TypeObjectUtils::build_complete_struct_member(common_var_map_short_inneraliassequencehelper, detail_var_map_short_inneraliassequencehelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapShortInnerAliasSequenceHelper, member_var_map_short_inneraliassequencehelper);
        }
        CompleteStructType struct_type_MapShortInnerAliasSequenceHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapShortInnerAliasSequenceHelper, header_MapShortInnerAliasSequenceHelper, member_seq_MapShortInnerAliasSequenceHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapShortInnerAliasSequenceHelper, type_name_MapShortInnerAliasSequenceHelper.to_string(), type_ids_MapShortInnerAliasSequenceHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapShortInnerAliasSequenceHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapShortInnerAliasMapHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapShortInnerAliasMapHelper)
{

    ReturnCode_t return_code_MapShortInnerAliasMapHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapShortInnerAliasMapHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapShortInnerAliasMapHelper", type_ids_MapShortInnerAliasMapHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapShortInnerAliasMapHelper)
    {
        StructTypeFlag struct_flags_MapShortInnerAliasMapHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapShortInnerAliasMapHelper = "MapShortInnerAliasMapHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapShortInnerAliasMapHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapShortInnerAliasMapHelper;
        CompleteTypeDetail detail_MapShortInnerAliasMapHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapShortInnerAliasMapHelper, ann_custom_MapShortInnerAliasMapHelper, type_name_MapShortInnerAliasMapHelper.to_string());
        CompleteStructHeader header_MapShortInnerAliasMapHelper;
        header_MapShortInnerAliasMapHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapShortInnerAliasMapHelper);
        CompleteStructMemberSeq member_seq_MapShortInnerAliasMapHelper;
        {
            TypeIdentifierPair type_ids_var_map_short_inneraliasmaphelper;
            ReturnCode_t return_code_var_map_short_inneraliasmaphelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_short_inneraliasmaphelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded", type_ids_var_map_short_inneraliasmaphelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_inneraliasmaphelper)
            {
                return_code_var_map_short_inneraliasmaphelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_map_helper", type_ids_var_map_short_inneraliasmaphelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_inneraliasmaphelper)
                {
                ::register_Inner_alias_map_helper_type_identifier(type_ids_var_map_short_inneraliasmaphelper);
                }
                bool element_identifier_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_inneraliasmaphelper, element_identifier_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded_ec))};
                if (!element_identifier_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_short_inneraliasmaphelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_short_inneraliasmaphelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_inneraliasmaphelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_inneraliasmaphelper, key_identifier_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded_ec))};
                if (!key_identifier_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded, element_flags_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded), key_flags_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded", type_ids_var_map_short_inneraliasmaphelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int16_t_anonymous_map_int32_t_int32_t_0_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_short_inneraliasmaphelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_short_inneraliasmaphelper = 0x00000000;
            bool common_var_map_short_inneraliasmaphelper_ec {false};
            CommonStructMember common_var_map_short_inneraliasmaphelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_short_inneraliasmaphelper, member_flags_var_map_short_inneraliasmaphelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_inneraliasmaphelper, common_var_map_short_inneraliasmaphelper_ec))};
            if (!common_var_map_short_inneraliasmaphelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_short_inneraliasmaphelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_short_inneraliasmaphelper = "var_map_short_inneraliasmaphelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_short_inneraliasmaphelper;
            ann_custom_MapShortInnerAliasMapHelper.reset();
            CompleteMemberDetail detail_var_map_short_inneraliasmaphelper = TypeObjectUtils::build_complete_member_detail(name_var_map_short_inneraliasmaphelper, member_ann_builtin_var_map_short_inneraliasmaphelper, ann_custom_MapShortInnerAliasMapHelper);
            CompleteStructMember member_var_map_short_inneraliasmaphelper = TypeObjectUtils::build_complete_struct_member(common_var_map_short_inneraliasmaphelper, detail_var_map_short_inneraliasmaphelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapShortInnerAliasMapHelper, member_var_map_short_inneraliasmaphelper);
        }
        CompleteStructType struct_type_MapShortInnerAliasMapHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapShortInnerAliasMapHelper, header_MapShortInnerAliasMapHelper, member_seq_MapShortInnerAliasMapHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapShortInnerAliasMapHelper, type_name_MapShortInnerAliasMapHelper.to_string(), type_ids_MapShortInnerAliasMapHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapShortInnerAliasMapHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapShortInnerUnionHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapShortInnerUnionHelper)
{

    ReturnCode_t return_code_MapShortInnerUnionHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapShortInnerUnionHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapShortInnerUnionHelper", type_ids_MapShortInnerUnionHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapShortInnerUnionHelper)
    {
        StructTypeFlag struct_flags_MapShortInnerUnionHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapShortInnerUnionHelper = "MapShortInnerUnionHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapShortInnerUnionHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapShortInnerUnionHelper;
        CompleteTypeDetail detail_MapShortInnerUnionHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapShortInnerUnionHelper, ann_custom_MapShortInnerUnionHelper, type_name_MapShortInnerUnionHelper.to_string());
        CompleteStructHeader header_MapShortInnerUnionHelper;
        header_MapShortInnerUnionHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapShortInnerUnionHelper);
        CompleteStructMemberSeq member_seq_MapShortInnerUnionHelper;
        {
            TypeIdentifierPair type_ids_var_map_short_innerunionhelper;
            ReturnCode_t return_code_var_map_short_innerunionhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_short_innerunionhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int16_t_InnerUnionHelper_unbounded", type_ids_var_map_short_innerunionhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_innerunionhelper)
            {
                return_code_var_map_short_innerunionhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerUnionHelper", type_ids_var_map_short_innerunionhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_innerunionhelper)
                {
                ::register_InnerUnionHelper_type_identifier(type_ids_var_map_short_innerunionhelper);
                }
                bool element_identifier_anonymous_map_int16_t_InnerUnionHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int16_t_InnerUnionHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_innerunionhelper, element_identifier_anonymous_map_int16_t_InnerUnionHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_int16_t_InnerUnionHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_InnerUnionHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_short_innerunionhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_short_innerunionhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_innerunionhelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int16_t_InnerUnionHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int16_t_InnerUnionHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_innerunionhelper, key_identifier_anonymous_map_int16_t_InnerUnionHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_int16_t_InnerUnionHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_InnerUnionHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int16_t_InnerUnionHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int16_t_InnerUnionHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerUnionHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int16_t_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerUnionHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int16_t_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerUnionHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int16_t_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerUnionHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int16_t_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerUnionHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int16_t_InnerUnionHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerUnionHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerUnionHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int16_t_InnerUnionHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerUnionHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerUnionHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int16_t_InnerUnionHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int16_t_InnerUnionHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int16_t_InnerUnionHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int16_t_InnerUnionHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int16_t_InnerUnionHelper_unbounded, element_flags_anonymous_map_int16_t_InnerUnionHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int16_t_InnerUnionHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_InnerUnionHelper_unbounded), key_flags_anonymous_map_int16_t_InnerUnionHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_InnerUnionHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int16_t_InnerUnionHelper_unbounded", type_ids_var_map_short_innerunionhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int16_t_InnerUnionHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_short_innerunionhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_short_innerunionhelper = 0x00000000;
            bool common_var_map_short_innerunionhelper_ec {false};
            CommonStructMember common_var_map_short_innerunionhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_short_innerunionhelper, member_flags_var_map_short_innerunionhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_innerunionhelper, common_var_map_short_innerunionhelper_ec))};
            if (!common_var_map_short_innerunionhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_short_innerunionhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_short_innerunionhelper = "var_map_short_innerunionhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_short_innerunionhelper;
            ann_custom_MapShortInnerUnionHelper.reset();
            CompleteMemberDetail detail_var_map_short_innerunionhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_short_innerunionhelper, member_ann_builtin_var_map_short_innerunionhelper, ann_custom_MapShortInnerUnionHelper);
            CompleteStructMember member_var_map_short_innerunionhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_short_innerunionhelper, detail_var_map_short_innerunionhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapShortInnerUnionHelper, member_var_map_short_innerunionhelper);
        }
        CompleteStructType struct_type_MapShortInnerUnionHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapShortInnerUnionHelper, header_MapShortInnerUnionHelper, member_seq_MapShortInnerUnionHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapShortInnerUnionHelper, type_name_MapShortInnerUnionHelper.to_string(), type_ids_MapShortInnerUnionHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapShortInnerUnionHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapShortInnerStructureHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapShortInnerStructureHelper)
{

    ReturnCode_t return_code_MapShortInnerStructureHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapShortInnerStructureHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapShortInnerStructureHelper", type_ids_MapShortInnerStructureHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapShortInnerStructureHelper)
    {
        StructTypeFlag struct_flags_MapShortInnerStructureHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapShortInnerStructureHelper = "MapShortInnerStructureHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapShortInnerStructureHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapShortInnerStructureHelper;
        CompleteTypeDetail detail_MapShortInnerStructureHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapShortInnerStructureHelper, ann_custom_MapShortInnerStructureHelper, type_name_MapShortInnerStructureHelper.to_string());
        CompleteStructHeader header_MapShortInnerStructureHelper;
        header_MapShortInnerStructureHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapShortInnerStructureHelper);
        CompleteStructMemberSeq member_seq_MapShortInnerStructureHelper;
        {
            TypeIdentifierPair type_ids_var_map_short_innerstructurehelper;
            ReturnCode_t return_code_var_map_short_innerstructurehelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_short_innerstructurehelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int16_t_InnerStructureHelper_unbounded", type_ids_var_map_short_innerstructurehelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_innerstructurehelper)
            {
                return_code_var_map_short_innerstructurehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerStructureHelper", type_ids_var_map_short_innerstructurehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_innerstructurehelper)
                {
                ::register_InnerStructureHelper_type_identifier(type_ids_var_map_short_innerstructurehelper);
                }
                bool element_identifier_anonymous_map_int16_t_InnerStructureHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int16_t_InnerStructureHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_innerstructurehelper, element_identifier_anonymous_map_int16_t_InnerStructureHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_int16_t_InnerStructureHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_InnerStructureHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_short_innerstructurehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_short_innerstructurehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_innerstructurehelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int16_t_InnerStructureHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int16_t_InnerStructureHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_innerstructurehelper, key_identifier_anonymous_map_int16_t_InnerStructureHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_int16_t_InnerStructureHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_InnerStructureHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int16_t_InnerStructureHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int16_t_InnerStructureHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerStructureHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int16_t_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerStructureHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int16_t_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerStructureHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int16_t_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerStructureHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int16_t_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerStructureHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int16_t_InnerStructureHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerStructureHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerStructureHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int16_t_InnerStructureHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerStructureHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerStructureHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int16_t_InnerStructureHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int16_t_InnerStructureHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int16_t_InnerStructureHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int16_t_InnerStructureHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int16_t_InnerStructureHelper_unbounded, element_flags_anonymous_map_int16_t_InnerStructureHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int16_t_InnerStructureHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_InnerStructureHelper_unbounded), key_flags_anonymous_map_int16_t_InnerStructureHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_InnerStructureHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int16_t_InnerStructureHelper_unbounded", type_ids_var_map_short_innerstructurehelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int16_t_InnerStructureHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_short_innerstructurehelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_short_innerstructurehelper = 0x00000000;
            bool common_var_map_short_innerstructurehelper_ec {false};
            CommonStructMember common_var_map_short_innerstructurehelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_short_innerstructurehelper, member_flags_var_map_short_innerstructurehelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_innerstructurehelper, common_var_map_short_innerstructurehelper_ec))};
            if (!common_var_map_short_innerstructurehelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_short_innerstructurehelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_short_innerstructurehelper = "var_map_short_innerstructurehelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_short_innerstructurehelper;
            ann_custom_MapShortInnerStructureHelper.reset();
            CompleteMemberDetail detail_var_map_short_innerstructurehelper = TypeObjectUtils::build_complete_member_detail(name_var_map_short_innerstructurehelper, member_ann_builtin_var_map_short_innerstructurehelper, ann_custom_MapShortInnerStructureHelper);
            CompleteStructMember member_var_map_short_innerstructurehelper = TypeObjectUtils::build_complete_struct_member(common_var_map_short_innerstructurehelper, detail_var_map_short_innerstructurehelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapShortInnerStructureHelper, member_var_map_short_innerstructurehelper);
        }
        CompleteStructType struct_type_MapShortInnerStructureHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapShortInnerStructureHelper, header_MapShortInnerStructureHelper, member_seq_MapShortInnerStructureHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapShortInnerStructureHelper, type_name_MapShortInnerStructureHelper.to_string(), type_ids_MapShortInnerStructureHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapShortInnerStructureHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapShortInnerBitsetHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapShortInnerBitsetHelper)
{

    ReturnCode_t return_code_MapShortInnerBitsetHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapShortInnerBitsetHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapShortInnerBitsetHelper", type_ids_MapShortInnerBitsetHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapShortInnerBitsetHelper)
    {
        StructTypeFlag struct_flags_MapShortInnerBitsetHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapShortInnerBitsetHelper = "MapShortInnerBitsetHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapShortInnerBitsetHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapShortInnerBitsetHelper;
        CompleteTypeDetail detail_MapShortInnerBitsetHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapShortInnerBitsetHelper, ann_custom_MapShortInnerBitsetHelper, type_name_MapShortInnerBitsetHelper.to_string());
        CompleteStructHeader header_MapShortInnerBitsetHelper;
        header_MapShortInnerBitsetHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapShortInnerBitsetHelper);
        CompleteStructMemberSeq member_seq_MapShortInnerBitsetHelper;
        {
            TypeIdentifierPair type_ids_var_map_short_innerbitsethelper;
            ReturnCode_t return_code_var_map_short_innerbitsethelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_short_innerbitsethelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int16_t_InnerBitsetHelper_unbounded", type_ids_var_map_short_innerbitsethelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_innerbitsethelper)
            {
                return_code_var_map_short_innerbitsethelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerBitsetHelper", type_ids_var_map_short_innerbitsethelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_innerbitsethelper)
                {
                ::register_InnerBitsetHelper_type_identifier(type_ids_var_map_short_innerbitsethelper);
                }
                bool element_identifier_anonymous_map_int16_t_InnerBitsetHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int16_t_InnerBitsetHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_innerbitsethelper, element_identifier_anonymous_map_int16_t_InnerBitsetHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_int16_t_InnerBitsetHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_InnerBitsetHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_short_innerbitsethelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_short_innerbitsethelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_short_innerbitsethelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int16_t_InnerBitsetHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int16_t_InnerBitsetHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_innerbitsethelper, key_identifier_anonymous_map_int16_t_InnerBitsetHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_int16_t_InnerBitsetHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_InnerBitsetHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int16_t_InnerBitsetHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int16_t_InnerBitsetHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerBitsetHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int16_t_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerBitsetHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int16_t_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerBitsetHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int16_t_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerBitsetHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int16_t_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerBitsetHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int16_t_InnerBitsetHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerBitsetHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerBitsetHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int16_t_InnerBitsetHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerBitsetHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_InnerBitsetHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int16_t_InnerBitsetHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int16_t_InnerBitsetHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int16_t_InnerBitsetHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int16_t_InnerBitsetHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int16_t_InnerBitsetHelper_unbounded, element_flags_anonymous_map_int16_t_InnerBitsetHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int16_t_InnerBitsetHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_InnerBitsetHelper_unbounded), key_flags_anonymous_map_int16_t_InnerBitsetHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_InnerBitsetHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int16_t_InnerBitsetHelper_unbounded", type_ids_var_map_short_innerbitsethelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int16_t_InnerBitsetHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_short_innerbitsethelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_short_innerbitsethelper = 0x00000000;
            bool common_var_map_short_innerbitsethelper_ec {false};
            CommonStructMember common_var_map_short_innerbitsethelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_short_innerbitsethelper, member_flags_var_map_short_innerbitsethelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_short_innerbitsethelper, common_var_map_short_innerbitsethelper_ec))};
            if (!common_var_map_short_innerbitsethelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_short_innerbitsethelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_short_innerbitsethelper = "var_map_short_innerbitsethelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_short_innerbitsethelper;
            ann_custom_MapShortInnerBitsetHelper.reset();
            CompleteMemberDetail detail_var_map_short_innerbitsethelper = TypeObjectUtils::build_complete_member_detail(name_var_map_short_innerbitsethelper, member_ann_builtin_var_map_short_innerbitsethelper, ann_custom_MapShortInnerBitsetHelper);
            CompleteStructMember member_var_map_short_innerbitsethelper = TypeObjectUtils::build_complete_struct_member(common_var_map_short_innerbitsethelper, detail_var_map_short_innerbitsethelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapShortInnerBitsetHelper, member_var_map_short_innerbitsethelper);
        }
        CompleteStructType struct_type_MapShortInnerBitsetHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapShortInnerBitsetHelper, header_MapShortInnerBitsetHelper, member_seq_MapShortInnerBitsetHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapShortInnerBitsetHelper, type_name_MapShortInnerBitsetHelper.to_string(), type_ids_MapShortInnerBitsetHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapShortInnerBitsetHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapUShortShort_type_identifier(
        TypeIdentifierPair& type_ids_MapUShortShort)
{

    ReturnCode_t return_code_MapUShortShort {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapUShortShort =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapUShortShort", type_ids_MapUShortShort);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapUShortShort)
    {
        StructTypeFlag struct_flags_MapUShortShort = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapUShortShort = "MapUShortShort";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapUShortShort;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapUShortShort;
        CompleteTypeDetail detail_MapUShortShort = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapUShortShort, ann_custom_MapUShortShort, type_name_MapUShortShort.to_string());
        CompleteStructHeader header_MapUShortShort;
        header_MapUShortShort = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapUShortShort);
        CompleteStructMemberSeq member_seq_MapUShortShort;
        {
            TypeIdentifierPair type_ids_var_map_ushort_short;
            ReturnCode_t return_code_var_map_ushort_short {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ushort_short =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint16_t_int16_t_unbounded", type_ids_var_map_ushort_short);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_short)
            {
                return_code_var_map_ushort_short =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_ushort_short);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_short)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint16_t_int16_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint16_t_int16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_short, element_identifier_anonymous_map_uint16_t_int16_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint16_t_int16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_int16_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ushort_short =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_ushort_short);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_short)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint16_t_int16_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint16_t_int16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_short, key_identifier_anonymous_map_uint16_t_int16_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint16_t_int16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_int16_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint16_t_int16_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint16_t_int16_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_int16_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint16_t_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_int16_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint16_t_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_int16_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint16_t_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_int16_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint16_t_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_int16_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint16_t_int16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_int16_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_int16_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint16_t_int16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_int16_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_int16_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint16_t_int16_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint16_t_int16_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint16_t_int16_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint16_t_int16_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint16_t_int16_t_unbounded, element_flags_anonymous_map_uint16_t_int16_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint16_t_int16_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint16_t_int16_t_unbounded), key_flags_anonymous_map_uint16_t_int16_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint16_t_int16_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint16_t_int16_t_unbounded", type_ids_var_map_ushort_short))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint16_t_int16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ushort_short = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ushort_short = 0x00000000;
            bool common_var_map_ushort_short_ec {false};
            CommonStructMember common_var_map_ushort_short {TypeObjectUtils::build_common_struct_member(member_id_var_map_ushort_short, member_flags_var_map_ushort_short, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_short, common_var_map_ushort_short_ec))};
            if (!common_var_map_ushort_short_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ushort_short member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ushort_short = "var_map_ushort_short";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ushort_short;
            ann_custom_MapUShortShort.reset();
            CompleteMemberDetail detail_var_map_ushort_short = TypeObjectUtils::build_complete_member_detail(name_var_map_ushort_short, member_ann_builtin_var_map_ushort_short, ann_custom_MapUShortShort);
            CompleteStructMember member_var_map_ushort_short = TypeObjectUtils::build_complete_struct_member(common_var_map_ushort_short, detail_var_map_ushort_short);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapUShortShort, member_var_map_ushort_short);
        }
        CompleteStructType struct_type_MapUShortShort = TypeObjectUtils::build_complete_struct_type(struct_flags_MapUShortShort, header_MapUShortShort, member_seq_MapUShortShort);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapUShortShort, type_name_MapUShortShort.to_string(), type_ids_MapUShortShort))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapUShortShort already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapUShortUShort_type_identifier(
        TypeIdentifierPair& type_ids_MapUShortUShort)
{

    ReturnCode_t return_code_MapUShortUShort {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapUShortUShort =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapUShortUShort", type_ids_MapUShortUShort);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapUShortUShort)
    {
        StructTypeFlag struct_flags_MapUShortUShort = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapUShortUShort = "MapUShortUShort";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapUShortUShort;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapUShortUShort;
        CompleteTypeDetail detail_MapUShortUShort = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapUShortUShort, ann_custom_MapUShortUShort, type_name_MapUShortUShort.to_string());
        CompleteStructHeader header_MapUShortUShort;
        header_MapUShortUShort = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapUShortUShort);
        CompleteStructMemberSeq member_seq_MapUShortUShort;
        {
            TypeIdentifierPair type_ids_var_map_ushort_ushort;
            ReturnCode_t return_code_var_map_ushort_ushort {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ushort_ushort =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint16_t_uint16_t_unbounded", type_ids_var_map_ushort_ushort);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_ushort)
            {
                return_code_var_map_ushort_ushort =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_ushort_ushort);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_ushort)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint16_t_uint16_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint16_t_uint16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_ushort, element_identifier_anonymous_map_uint16_t_uint16_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint16_t_uint16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_uint16_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ushort_ushort =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_ushort_ushort);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_ushort)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint16_t_uint16_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint16_t_uint16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_ushort, key_identifier_anonymous_map_uint16_t_uint16_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint16_t_uint16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_uint16_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint16_t_uint16_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint16_t_uint16_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_uint16_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint16_t_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_uint16_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint16_t_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_uint16_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint16_t_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_uint16_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint16_t_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_uint16_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint16_t_uint16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_uint16_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_uint16_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint16_t_uint16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_uint16_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_uint16_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint16_t_uint16_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint16_t_uint16_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint16_t_uint16_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint16_t_uint16_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint16_t_uint16_t_unbounded, element_flags_anonymous_map_uint16_t_uint16_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint16_t_uint16_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint16_t_uint16_t_unbounded), key_flags_anonymous_map_uint16_t_uint16_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint16_t_uint16_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint16_t_uint16_t_unbounded", type_ids_var_map_ushort_ushort))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint16_t_uint16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ushort_ushort = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ushort_ushort = 0x00000000;
            bool common_var_map_ushort_ushort_ec {false};
            CommonStructMember common_var_map_ushort_ushort {TypeObjectUtils::build_common_struct_member(member_id_var_map_ushort_ushort, member_flags_var_map_ushort_ushort, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_ushort, common_var_map_ushort_ushort_ec))};
            if (!common_var_map_ushort_ushort_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ushort_ushort member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ushort_ushort = "var_map_ushort_ushort";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ushort_ushort;
            ann_custom_MapUShortUShort.reset();
            CompleteMemberDetail detail_var_map_ushort_ushort = TypeObjectUtils::build_complete_member_detail(name_var_map_ushort_ushort, member_ann_builtin_var_map_ushort_ushort, ann_custom_MapUShortUShort);
            CompleteStructMember member_var_map_ushort_ushort = TypeObjectUtils::build_complete_struct_member(common_var_map_ushort_ushort, detail_var_map_ushort_ushort);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapUShortUShort, member_var_map_ushort_ushort);
        }
        CompleteStructType struct_type_MapUShortUShort = TypeObjectUtils::build_complete_struct_type(struct_flags_MapUShortUShort, header_MapUShortUShort, member_seq_MapUShortUShort);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapUShortUShort, type_name_MapUShortUShort.to_string(), type_ids_MapUShortUShort))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapUShortUShort already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapUShortLong_type_identifier(
        TypeIdentifierPair& type_ids_MapUShortLong)
{

    ReturnCode_t return_code_MapUShortLong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapUShortLong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapUShortLong", type_ids_MapUShortLong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapUShortLong)
    {
        StructTypeFlag struct_flags_MapUShortLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapUShortLong = "MapUShortLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapUShortLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapUShortLong;
        CompleteTypeDetail detail_MapUShortLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapUShortLong, ann_custom_MapUShortLong, type_name_MapUShortLong.to_string());
        CompleteStructHeader header_MapUShortLong;
        header_MapUShortLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapUShortLong);
        CompleteStructMemberSeq member_seq_MapUShortLong;
        {
            TypeIdentifierPair type_ids_var_map_ushort_long;
            ReturnCode_t return_code_var_map_ushort_long {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ushort_long =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint16_t_int32_t_unbounded", type_ids_var_map_ushort_long);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_long)
            {
                return_code_var_map_ushort_long =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_ushort_long);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_long)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint16_t_int32_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint16_t_int32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_long, element_identifier_anonymous_map_uint16_t_int32_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint16_t_int32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_int32_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ushort_long =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_ushort_long);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_long)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint16_t_int32_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint16_t_int32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_long, key_identifier_anonymous_map_uint16_t_int32_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint16_t_int32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_int32_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint16_t_int32_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint16_t_int32_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_int32_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint16_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_int32_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint16_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_int32_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint16_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_int32_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint16_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_int32_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint16_t_int32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_int32_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_int32_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint16_t_int32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_int32_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_int32_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint16_t_int32_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint16_t_int32_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint16_t_int32_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint16_t_int32_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint16_t_int32_t_unbounded, element_flags_anonymous_map_uint16_t_int32_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint16_t_int32_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint16_t_int32_t_unbounded), key_flags_anonymous_map_uint16_t_int32_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint16_t_int32_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint16_t_int32_t_unbounded", type_ids_var_map_ushort_long))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint16_t_int32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ushort_long = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ushort_long = 0x00000000;
            bool common_var_map_ushort_long_ec {false};
            CommonStructMember common_var_map_ushort_long {TypeObjectUtils::build_common_struct_member(member_id_var_map_ushort_long, member_flags_var_map_ushort_long, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_long, common_var_map_ushort_long_ec))};
            if (!common_var_map_ushort_long_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ushort_long member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ushort_long = "var_map_ushort_long";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ushort_long;
            ann_custom_MapUShortLong.reset();
            CompleteMemberDetail detail_var_map_ushort_long = TypeObjectUtils::build_complete_member_detail(name_var_map_ushort_long, member_ann_builtin_var_map_ushort_long, ann_custom_MapUShortLong);
            CompleteStructMember member_var_map_ushort_long = TypeObjectUtils::build_complete_struct_member(common_var_map_ushort_long, detail_var_map_ushort_long);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapUShortLong, member_var_map_ushort_long);
        }
        CompleteStructType struct_type_MapUShortLong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapUShortLong, header_MapUShortLong, member_seq_MapUShortLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapUShortLong, type_name_MapUShortLong.to_string(), type_ids_MapUShortLong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapUShortLong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapUShortULong_type_identifier(
        TypeIdentifierPair& type_ids_MapUShortULong)
{

    ReturnCode_t return_code_MapUShortULong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapUShortULong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapUShortULong", type_ids_MapUShortULong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapUShortULong)
    {
        StructTypeFlag struct_flags_MapUShortULong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapUShortULong = "MapUShortULong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapUShortULong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapUShortULong;
        CompleteTypeDetail detail_MapUShortULong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapUShortULong, ann_custom_MapUShortULong, type_name_MapUShortULong.to_string());
        CompleteStructHeader header_MapUShortULong;
        header_MapUShortULong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapUShortULong);
        CompleteStructMemberSeq member_seq_MapUShortULong;
        {
            TypeIdentifierPair type_ids_var_map_ushort_ulong;
            ReturnCode_t return_code_var_map_ushort_ulong {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ushort_ulong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint16_t_uint32_t_unbounded", type_ids_var_map_ushort_ulong);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_ulong)
            {
                return_code_var_map_ushort_ulong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_ushort_ulong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_ulong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint16_t_uint32_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint16_t_uint32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_ulong, element_identifier_anonymous_map_uint16_t_uint32_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint16_t_uint32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_uint32_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ushort_ulong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_ushort_ulong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_ulong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint16_t_uint32_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint16_t_uint32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_ulong, key_identifier_anonymous_map_uint16_t_uint32_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint16_t_uint32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_uint32_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint16_t_uint32_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint16_t_uint32_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_uint32_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint16_t_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_uint32_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint16_t_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_uint32_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint16_t_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_uint32_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint16_t_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_uint32_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint16_t_uint32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_uint32_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_uint32_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint16_t_uint32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_uint32_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_uint32_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint16_t_uint32_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint16_t_uint32_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint16_t_uint32_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint16_t_uint32_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint16_t_uint32_t_unbounded, element_flags_anonymous_map_uint16_t_uint32_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint16_t_uint32_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint16_t_uint32_t_unbounded), key_flags_anonymous_map_uint16_t_uint32_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint16_t_uint32_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint16_t_uint32_t_unbounded", type_ids_var_map_ushort_ulong))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint16_t_uint32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ushort_ulong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ushort_ulong = 0x00000000;
            bool common_var_map_ushort_ulong_ec {false};
            CommonStructMember common_var_map_ushort_ulong {TypeObjectUtils::build_common_struct_member(member_id_var_map_ushort_ulong, member_flags_var_map_ushort_ulong, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_ulong, common_var_map_ushort_ulong_ec))};
            if (!common_var_map_ushort_ulong_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ushort_ulong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ushort_ulong = "var_map_ushort_ulong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ushort_ulong;
            ann_custom_MapUShortULong.reset();
            CompleteMemberDetail detail_var_map_ushort_ulong = TypeObjectUtils::build_complete_member_detail(name_var_map_ushort_ulong, member_ann_builtin_var_map_ushort_ulong, ann_custom_MapUShortULong);
            CompleteStructMember member_var_map_ushort_ulong = TypeObjectUtils::build_complete_struct_member(common_var_map_ushort_ulong, detail_var_map_ushort_ulong);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapUShortULong, member_var_map_ushort_ulong);
        }
        CompleteStructType struct_type_MapUShortULong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapUShortULong, header_MapUShortULong, member_seq_MapUShortULong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapUShortULong, type_name_MapUShortULong.to_string(), type_ids_MapUShortULong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapUShortULong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapUShortLongLong_type_identifier(
        TypeIdentifierPair& type_ids_MapUShortLongLong)
{

    ReturnCode_t return_code_MapUShortLongLong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapUShortLongLong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapUShortLongLong", type_ids_MapUShortLongLong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapUShortLongLong)
    {
        StructTypeFlag struct_flags_MapUShortLongLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapUShortLongLong = "MapUShortLongLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapUShortLongLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapUShortLongLong;
        CompleteTypeDetail detail_MapUShortLongLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapUShortLongLong, ann_custom_MapUShortLongLong, type_name_MapUShortLongLong.to_string());
        CompleteStructHeader header_MapUShortLongLong;
        header_MapUShortLongLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapUShortLongLong);
        CompleteStructMemberSeq member_seq_MapUShortLongLong;
        {
            TypeIdentifierPair type_ids_var_map_ushort_longlong;
            ReturnCode_t return_code_var_map_ushort_longlong {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ushort_longlong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint16_t_int64_t_unbounded", type_ids_var_map_ushort_longlong);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_longlong)
            {
                return_code_var_map_ushort_longlong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_ushort_longlong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_longlong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint16_t_int64_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint16_t_int64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_longlong, element_identifier_anonymous_map_uint16_t_int64_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint16_t_int64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_int64_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ushort_longlong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_ushort_longlong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_longlong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint16_t_int64_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint16_t_int64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_longlong, key_identifier_anonymous_map_uint16_t_int64_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint16_t_int64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_int64_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint16_t_int64_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint16_t_int64_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_int64_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint16_t_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_int64_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint16_t_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_int64_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint16_t_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_int64_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint16_t_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_int64_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint16_t_int64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_int64_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_int64_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint16_t_int64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_int64_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_int64_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint16_t_int64_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint16_t_int64_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint16_t_int64_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint16_t_int64_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint16_t_int64_t_unbounded, element_flags_anonymous_map_uint16_t_int64_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint16_t_int64_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint16_t_int64_t_unbounded), key_flags_anonymous_map_uint16_t_int64_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint16_t_int64_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint16_t_int64_t_unbounded", type_ids_var_map_ushort_longlong))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint16_t_int64_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ushort_longlong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ushort_longlong = 0x00000000;
            bool common_var_map_ushort_longlong_ec {false};
            CommonStructMember common_var_map_ushort_longlong {TypeObjectUtils::build_common_struct_member(member_id_var_map_ushort_longlong, member_flags_var_map_ushort_longlong, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_longlong, common_var_map_ushort_longlong_ec))};
            if (!common_var_map_ushort_longlong_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ushort_longlong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ushort_longlong = "var_map_ushort_longlong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ushort_longlong;
            ann_custom_MapUShortLongLong.reset();
            CompleteMemberDetail detail_var_map_ushort_longlong = TypeObjectUtils::build_complete_member_detail(name_var_map_ushort_longlong, member_ann_builtin_var_map_ushort_longlong, ann_custom_MapUShortLongLong);
            CompleteStructMember member_var_map_ushort_longlong = TypeObjectUtils::build_complete_struct_member(common_var_map_ushort_longlong, detail_var_map_ushort_longlong);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapUShortLongLong, member_var_map_ushort_longlong);
        }
        CompleteStructType struct_type_MapUShortLongLong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapUShortLongLong, header_MapUShortLongLong, member_seq_MapUShortLongLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapUShortLongLong, type_name_MapUShortLongLong.to_string(), type_ids_MapUShortLongLong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapUShortLongLong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapUShortULongLong_type_identifier(
        TypeIdentifierPair& type_ids_MapUShortULongLong)
{

    ReturnCode_t return_code_MapUShortULongLong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapUShortULongLong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapUShortULongLong", type_ids_MapUShortULongLong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapUShortULongLong)
    {
        StructTypeFlag struct_flags_MapUShortULongLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapUShortULongLong = "MapUShortULongLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapUShortULongLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapUShortULongLong;
        CompleteTypeDetail detail_MapUShortULongLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapUShortULongLong, ann_custom_MapUShortULongLong, type_name_MapUShortULongLong.to_string());
        CompleteStructHeader header_MapUShortULongLong;
        header_MapUShortULongLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapUShortULongLong);
        CompleteStructMemberSeq member_seq_MapUShortULongLong;
        {
            TypeIdentifierPair type_ids_var_map_ushort_ulonglong;
            ReturnCode_t return_code_var_map_ushort_ulonglong {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ushort_ulonglong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint16_t_uint64_t_unbounded", type_ids_var_map_ushort_ulonglong);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_ulonglong)
            {
                return_code_var_map_ushort_ulonglong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_ushort_ulonglong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_ulonglong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint16_t_uint64_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint16_t_uint64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_ulonglong, element_identifier_anonymous_map_uint16_t_uint64_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint16_t_uint64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_uint64_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ushort_ulonglong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_ushort_ulonglong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_ulonglong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint16_t_uint64_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint16_t_uint64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_ulonglong, key_identifier_anonymous_map_uint16_t_uint64_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint16_t_uint64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_uint64_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint16_t_uint64_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint16_t_uint64_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_uint64_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint16_t_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_uint64_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint16_t_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_uint64_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint16_t_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_uint64_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint16_t_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_uint64_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint16_t_uint64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_uint64_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_uint64_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint16_t_uint64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_uint64_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_uint64_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint16_t_uint64_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint16_t_uint64_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint16_t_uint64_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint16_t_uint64_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint16_t_uint64_t_unbounded, element_flags_anonymous_map_uint16_t_uint64_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint16_t_uint64_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint16_t_uint64_t_unbounded), key_flags_anonymous_map_uint16_t_uint64_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint16_t_uint64_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint16_t_uint64_t_unbounded", type_ids_var_map_ushort_ulonglong))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint16_t_uint64_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ushort_ulonglong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ushort_ulonglong = 0x00000000;
            bool common_var_map_ushort_ulonglong_ec {false};
            CommonStructMember common_var_map_ushort_ulonglong {TypeObjectUtils::build_common_struct_member(member_id_var_map_ushort_ulonglong, member_flags_var_map_ushort_ulonglong, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_ulonglong, common_var_map_ushort_ulonglong_ec))};
            if (!common_var_map_ushort_ulonglong_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ushort_ulonglong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ushort_ulonglong = "var_map_ushort_ulonglong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ushort_ulonglong;
            ann_custom_MapUShortULongLong.reset();
            CompleteMemberDetail detail_var_map_ushort_ulonglong = TypeObjectUtils::build_complete_member_detail(name_var_map_ushort_ulonglong, member_ann_builtin_var_map_ushort_ulonglong, ann_custom_MapUShortULongLong);
            CompleteStructMember member_var_map_ushort_ulonglong = TypeObjectUtils::build_complete_struct_member(common_var_map_ushort_ulonglong, detail_var_map_ushort_ulonglong);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapUShortULongLong, member_var_map_ushort_ulonglong);
        }
        CompleteStructType struct_type_MapUShortULongLong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapUShortULongLong, header_MapUShortULongLong, member_seq_MapUShortULongLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapUShortULongLong, type_name_MapUShortULongLong.to_string(), type_ids_MapUShortULongLong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapUShortULongLong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapUShortFloat_type_identifier(
        TypeIdentifierPair& type_ids_MapUShortFloat)
{

    ReturnCode_t return_code_MapUShortFloat {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapUShortFloat =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapUShortFloat", type_ids_MapUShortFloat);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapUShortFloat)
    {
        StructTypeFlag struct_flags_MapUShortFloat = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapUShortFloat = "MapUShortFloat";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapUShortFloat;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapUShortFloat;
        CompleteTypeDetail detail_MapUShortFloat = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapUShortFloat, ann_custom_MapUShortFloat, type_name_MapUShortFloat.to_string());
        CompleteStructHeader header_MapUShortFloat;
        header_MapUShortFloat = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapUShortFloat);
        CompleteStructMemberSeq member_seq_MapUShortFloat;
        {
            TypeIdentifierPair type_ids_var_map_ushort_float;
            ReturnCode_t return_code_var_map_ushort_float {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ushort_float =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint16_t_float_unbounded", type_ids_var_map_ushort_float);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_float)
            {
                return_code_var_map_ushort_float =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_float", type_ids_var_map_ushort_float);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_float)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint16_t_float_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint16_t_float_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_float, element_identifier_anonymous_map_uint16_t_float_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint16_t_float_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_float_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ushort_float =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_ushort_float);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_float)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint16_t_float_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint16_t_float_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_float, key_identifier_anonymous_map_uint16_t_float_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint16_t_float_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_float_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint16_t_float_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint16_t_float_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_float_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint16_t_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_float_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint16_t_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_float_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint16_t_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_float_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint16_t_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_float_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint16_t_float_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_float_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_float_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint16_t_float_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_float_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_float_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint16_t_float_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint16_t_float_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint16_t_float_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint16_t_float_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint16_t_float_unbounded, element_flags_anonymous_map_uint16_t_float_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint16_t_float_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint16_t_float_unbounded), key_flags_anonymous_map_uint16_t_float_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint16_t_float_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint16_t_float_unbounded", type_ids_var_map_ushort_float))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint16_t_float_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ushort_float = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ushort_float = 0x00000000;
            bool common_var_map_ushort_float_ec {false};
            CommonStructMember common_var_map_ushort_float {TypeObjectUtils::build_common_struct_member(member_id_var_map_ushort_float, member_flags_var_map_ushort_float, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_float, common_var_map_ushort_float_ec))};
            if (!common_var_map_ushort_float_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ushort_float member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ushort_float = "var_map_ushort_float";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ushort_float;
            ann_custom_MapUShortFloat.reset();
            CompleteMemberDetail detail_var_map_ushort_float = TypeObjectUtils::build_complete_member_detail(name_var_map_ushort_float, member_ann_builtin_var_map_ushort_float, ann_custom_MapUShortFloat);
            CompleteStructMember member_var_map_ushort_float = TypeObjectUtils::build_complete_struct_member(common_var_map_ushort_float, detail_var_map_ushort_float);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapUShortFloat, member_var_map_ushort_float);
        }
        CompleteStructType struct_type_MapUShortFloat = TypeObjectUtils::build_complete_struct_type(struct_flags_MapUShortFloat, header_MapUShortFloat, member_seq_MapUShortFloat);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapUShortFloat, type_name_MapUShortFloat.to_string(), type_ids_MapUShortFloat))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapUShortFloat already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapUShortDouble_type_identifier(
        TypeIdentifierPair& type_ids_MapUShortDouble)
{

    ReturnCode_t return_code_MapUShortDouble {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapUShortDouble =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapUShortDouble", type_ids_MapUShortDouble);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapUShortDouble)
    {
        StructTypeFlag struct_flags_MapUShortDouble = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapUShortDouble = "MapUShortDouble";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapUShortDouble;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapUShortDouble;
        CompleteTypeDetail detail_MapUShortDouble = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapUShortDouble, ann_custom_MapUShortDouble, type_name_MapUShortDouble.to_string());
        CompleteStructHeader header_MapUShortDouble;
        header_MapUShortDouble = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapUShortDouble);
        CompleteStructMemberSeq member_seq_MapUShortDouble;
        {
            TypeIdentifierPair type_ids_var_map_ushort_double;
            ReturnCode_t return_code_var_map_ushort_double {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ushort_double =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint16_t_double_unbounded", type_ids_var_map_ushort_double);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_double)
            {
                return_code_var_map_ushort_double =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_double", type_ids_var_map_ushort_double);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_double)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint16_t_double_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint16_t_double_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_double, element_identifier_anonymous_map_uint16_t_double_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint16_t_double_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_double_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ushort_double =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_ushort_double);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_double)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint16_t_double_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint16_t_double_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_double, key_identifier_anonymous_map_uint16_t_double_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint16_t_double_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_double_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint16_t_double_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint16_t_double_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_double_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint16_t_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_double_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint16_t_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_double_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint16_t_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_double_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint16_t_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_double_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint16_t_double_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_double_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_double_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint16_t_double_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_double_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_double_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint16_t_double_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint16_t_double_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint16_t_double_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint16_t_double_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint16_t_double_unbounded, element_flags_anonymous_map_uint16_t_double_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint16_t_double_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint16_t_double_unbounded), key_flags_anonymous_map_uint16_t_double_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint16_t_double_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint16_t_double_unbounded", type_ids_var_map_ushort_double))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint16_t_double_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ushort_double = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ushort_double = 0x00000000;
            bool common_var_map_ushort_double_ec {false};
            CommonStructMember common_var_map_ushort_double {TypeObjectUtils::build_common_struct_member(member_id_var_map_ushort_double, member_flags_var_map_ushort_double, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_double, common_var_map_ushort_double_ec))};
            if (!common_var_map_ushort_double_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ushort_double member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ushort_double = "var_map_ushort_double";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ushort_double;
            ann_custom_MapUShortDouble.reset();
            CompleteMemberDetail detail_var_map_ushort_double = TypeObjectUtils::build_complete_member_detail(name_var_map_ushort_double, member_ann_builtin_var_map_ushort_double, ann_custom_MapUShortDouble);
            CompleteStructMember member_var_map_ushort_double = TypeObjectUtils::build_complete_struct_member(common_var_map_ushort_double, detail_var_map_ushort_double);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapUShortDouble, member_var_map_ushort_double);
        }
        CompleteStructType struct_type_MapUShortDouble = TypeObjectUtils::build_complete_struct_type(struct_flags_MapUShortDouble, header_MapUShortDouble, member_seq_MapUShortDouble);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapUShortDouble, type_name_MapUShortDouble.to_string(), type_ids_MapUShortDouble))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapUShortDouble already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapUShortLongDouble_type_identifier(
        TypeIdentifierPair& type_ids_MapUShortLongDouble)
{

    ReturnCode_t return_code_MapUShortLongDouble {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapUShortLongDouble =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapUShortLongDouble", type_ids_MapUShortLongDouble);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapUShortLongDouble)
    {
        StructTypeFlag struct_flags_MapUShortLongDouble = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapUShortLongDouble = "MapUShortLongDouble";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapUShortLongDouble;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapUShortLongDouble;
        CompleteTypeDetail detail_MapUShortLongDouble = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapUShortLongDouble, ann_custom_MapUShortLongDouble, type_name_MapUShortLongDouble.to_string());
        CompleteStructHeader header_MapUShortLongDouble;
        header_MapUShortLongDouble = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapUShortLongDouble);
        CompleteStructMemberSeq member_seq_MapUShortLongDouble;
        {
            TypeIdentifierPair type_ids_var_map_ushort_longdouble;
            ReturnCode_t return_code_var_map_ushort_longdouble {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ushort_longdouble =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint16_t_longdouble_unbounded", type_ids_var_map_ushort_longdouble);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_longdouble)
            {
                return_code_var_map_ushort_longdouble =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_longdouble", type_ids_var_map_ushort_longdouble);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_longdouble)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint16_t_longdouble_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint16_t_longdouble_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_longdouble, element_identifier_anonymous_map_uint16_t_longdouble_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint16_t_longdouble_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_longdouble_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ushort_longdouble =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_ushort_longdouble);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_longdouble)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint16_t_longdouble_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint16_t_longdouble_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_longdouble, key_identifier_anonymous_map_uint16_t_longdouble_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint16_t_longdouble_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_longdouble_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint16_t_longdouble_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint16_t_longdouble_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_longdouble_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint16_t_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_longdouble_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint16_t_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_longdouble_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint16_t_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_longdouble_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint16_t_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_longdouble_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint16_t_longdouble_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_longdouble_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_longdouble_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint16_t_longdouble_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_longdouble_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_longdouble_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint16_t_longdouble_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint16_t_longdouble_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint16_t_longdouble_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint16_t_longdouble_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint16_t_longdouble_unbounded, element_flags_anonymous_map_uint16_t_longdouble_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint16_t_longdouble_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint16_t_longdouble_unbounded), key_flags_anonymous_map_uint16_t_longdouble_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint16_t_longdouble_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint16_t_longdouble_unbounded", type_ids_var_map_ushort_longdouble))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint16_t_longdouble_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ushort_longdouble = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ushort_longdouble = 0x00000000;
            bool common_var_map_ushort_longdouble_ec {false};
            CommonStructMember common_var_map_ushort_longdouble {TypeObjectUtils::build_common_struct_member(member_id_var_map_ushort_longdouble, member_flags_var_map_ushort_longdouble, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_longdouble, common_var_map_ushort_longdouble_ec))};
            if (!common_var_map_ushort_longdouble_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ushort_longdouble member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ushort_longdouble = "var_map_ushort_longdouble";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ushort_longdouble;
            ann_custom_MapUShortLongDouble.reset();
            CompleteMemberDetail detail_var_map_ushort_longdouble = TypeObjectUtils::build_complete_member_detail(name_var_map_ushort_longdouble, member_ann_builtin_var_map_ushort_longdouble, ann_custom_MapUShortLongDouble);
            CompleteStructMember member_var_map_ushort_longdouble = TypeObjectUtils::build_complete_struct_member(common_var_map_ushort_longdouble, detail_var_map_ushort_longdouble);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapUShortLongDouble, member_var_map_ushort_longdouble);
        }
        CompleteStructType struct_type_MapUShortLongDouble = TypeObjectUtils::build_complete_struct_type(struct_flags_MapUShortLongDouble, header_MapUShortLongDouble, member_seq_MapUShortLongDouble);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapUShortLongDouble, type_name_MapUShortLongDouble.to_string(), type_ids_MapUShortLongDouble))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapUShortLongDouble already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapUShortBoolean_type_identifier(
        TypeIdentifierPair& type_ids_MapUShortBoolean)
{

    ReturnCode_t return_code_MapUShortBoolean {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapUShortBoolean =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapUShortBoolean", type_ids_MapUShortBoolean);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapUShortBoolean)
    {
        StructTypeFlag struct_flags_MapUShortBoolean = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapUShortBoolean = "MapUShortBoolean";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapUShortBoolean;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapUShortBoolean;
        CompleteTypeDetail detail_MapUShortBoolean = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapUShortBoolean, ann_custom_MapUShortBoolean, type_name_MapUShortBoolean.to_string());
        CompleteStructHeader header_MapUShortBoolean;
        header_MapUShortBoolean = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapUShortBoolean);
        CompleteStructMemberSeq member_seq_MapUShortBoolean;
        {
            TypeIdentifierPair type_ids_var_map_ushort_boolean;
            ReturnCode_t return_code_var_map_ushort_boolean {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ushort_boolean =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint16_t_bool_unbounded", type_ids_var_map_ushort_boolean);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_boolean)
            {
                return_code_var_map_ushort_boolean =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_bool", type_ids_var_map_ushort_boolean);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_boolean)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint16_t_bool_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint16_t_bool_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_boolean, element_identifier_anonymous_map_uint16_t_bool_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint16_t_bool_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_bool_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ushort_boolean =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_ushort_boolean);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_boolean)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint16_t_bool_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint16_t_bool_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_boolean, key_identifier_anonymous_map_uint16_t_bool_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint16_t_bool_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_bool_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint16_t_bool_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint16_t_bool_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_bool_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint16_t_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_bool_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint16_t_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_bool_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint16_t_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_bool_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint16_t_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_bool_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint16_t_bool_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_bool_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_bool_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint16_t_bool_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_bool_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_bool_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint16_t_bool_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint16_t_bool_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint16_t_bool_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint16_t_bool_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint16_t_bool_unbounded, element_flags_anonymous_map_uint16_t_bool_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint16_t_bool_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint16_t_bool_unbounded), key_flags_anonymous_map_uint16_t_bool_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint16_t_bool_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint16_t_bool_unbounded", type_ids_var_map_ushort_boolean))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint16_t_bool_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ushort_boolean = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ushort_boolean = 0x00000000;
            bool common_var_map_ushort_boolean_ec {false};
            CommonStructMember common_var_map_ushort_boolean {TypeObjectUtils::build_common_struct_member(member_id_var_map_ushort_boolean, member_flags_var_map_ushort_boolean, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_boolean, common_var_map_ushort_boolean_ec))};
            if (!common_var_map_ushort_boolean_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ushort_boolean member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ushort_boolean = "var_map_ushort_boolean";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ushort_boolean;
            ann_custom_MapUShortBoolean.reset();
            CompleteMemberDetail detail_var_map_ushort_boolean = TypeObjectUtils::build_complete_member_detail(name_var_map_ushort_boolean, member_ann_builtin_var_map_ushort_boolean, ann_custom_MapUShortBoolean);
            CompleteStructMember member_var_map_ushort_boolean = TypeObjectUtils::build_complete_struct_member(common_var_map_ushort_boolean, detail_var_map_ushort_boolean);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapUShortBoolean, member_var_map_ushort_boolean);
        }
        CompleteStructType struct_type_MapUShortBoolean = TypeObjectUtils::build_complete_struct_type(struct_flags_MapUShortBoolean, header_MapUShortBoolean, member_seq_MapUShortBoolean);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapUShortBoolean, type_name_MapUShortBoolean.to_string(), type_ids_MapUShortBoolean))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapUShortBoolean already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapUShortOctet_type_identifier(
        TypeIdentifierPair& type_ids_MapUShortOctet)
{

    ReturnCode_t return_code_MapUShortOctet {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapUShortOctet =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapUShortOctet", type_ids_MapUShortOctet);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapUShortOctet)
    {
        StructTypeFlag struct_flags_MapUShortOctet = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapUShortOctet = "MapUShortOctet";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapUShortOctet;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapUShortOctet;
        CompleteTypeDetail detail_MapUShortOctet = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapUShortOctet, ann_custom_MapUShortOctet, type_name_MapUShortOctet.to_string());
        CompleteStructHeader header_MapUShortOctet;
        header_MapUShortOctet = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapUShortOctet);
        CompleteStructMemberSeq member_seq_MapUShortOctet;
        {
            TypeIdentifierPair type_ids_var_map_ushort_octet;
            ReturnCode_t return_code_var_map_ushort_octet {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ushort_octet =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint16_t_byte_unbounded", type_ids_var_map_ushort_octet);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_octet)
            {
                return_code_var_map_ushort_octet =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_byte", type_ids_var_map_ushort_octet);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_octet)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint16_t_byte_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint16_t_byte_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_octet, element_identifier_anonymous_map_uint16_t_byte_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint16_t_byte_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_byte_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ushort_octet =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_ushort_octet);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_octet)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint16_t_byte_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint16_t_byte_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_octet, key_identifier_anonymous_map_uint16_t_byte_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint16_t_byte_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_byte_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint16_t_byte_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint16_t_byte_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_byte_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint16_t_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_byte_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint16_t_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_byte_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint16_t_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_byte_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint16_t_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_byte_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint16_t_byte_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_byte_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_byte_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint16_t_byte_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_byte_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_byte_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint16_t_byte_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint16_t_byte_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint16_t_byte_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint16_t_byte_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint16_t_byte_unbounded, element_flags_anonymous_map_uint16_t_byte_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint16_t_byte_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint16_t_byte_unbounded), key_flags_anonymous_map_uint16_t_byte_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint16_t_byte_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint16_t_byte_unbounded", type_ids_var_map_ushort_octet))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint16_t_byte_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ushort_octet = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ushort_octet = 0x00000000;
            bool common_var_map_ushort_octet_ec {false};
            CommonStructMember common_var_map_ushort_octet {TypeObjectUtils::build_common_struct_member(member_id_var_map_ushort_octet, member_flags_var_map_ushort_octet, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_octet, common_var_map_ushort_octet_ec))};
            if (!common_var_map_ushort_octet_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ushort_octet member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ushort_octet = "var_map_ushort_octet";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ushort_octet;
            ann_custom_MapUShortOctet.reset();
            CompleteMemberDetail detail_var_map_ushort_octet = TypeObjectUtils::build_complete_member_detail(name_var_map_ushort_octet, member_ann_builtin_var_map_ushort_octet, ann_custom_MapUShortOctet);
            CompleteStructMember member_var_map_ushort_octet = TypeObjectUtils::build_complete_struct_member(common_var_map_ushort_octet, detail_var_map_ushort_octet);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapUShortOctet, member_var_map_ushort_octet);
        }
        CompleteStructType struct_type_MapUShortOctet = TypeObjectUtils::build_complete_struct_type(struct_flags_MapUShortOctet, header_MapUShortOctet, member_seq_MapUShortOctet);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapUShortOctet, type_name_MapUShortOctet.to_string(), type_ids_MapUShortOctet))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapUShortOctet already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapUShortChar_type_identifier(
        TypeIdentifierPair& type_ids_MapUShortChar)
{

    ReturnCode_t return_code_MapUShortChar {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapUShortChar =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapUShortChar", type_ids_MapUShortChar);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapUShortChar)
    {
        StructTypeFlag struct_flags_MapUShortChar = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapUShortChar = "MapUShortChar";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapUShortChar;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapUShortChar;
        CompleteTypeDetail detail_MapUShortChar = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapUShortChar, ann_custom_MapUShortChar, type_name_MapUShortChar.to_string());
        CompleteStructHeader header_MapUShortChar;
        header_MapUShortChar = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapUShortChar);
        CompleteStructMemberSeq member_seq_MapUShortChar;
        {
            TypeIdentifierPair type_ids_var_map_ushort_char;
            ReturnCode_t return_code_var_map_ushort_char {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ushort_char =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint16_t_char_unbounded", type_ids_var_map_ushort_char);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_char)
            {
                return_code_var_map_ushort_char =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_char", type_ids_var_map_ushort_char);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_char)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint16_t_char_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint16_t_char_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_char, element_identifier_anonymous_map_uint16_t_char_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint16_t_char_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_char_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ushort_char =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_ushort_char);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_char)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint16_t_char_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint16_t_char_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_char, key_identifier_anonymous_map_uint16_t_char_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint16_t_char_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_char_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint16_t_char_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint16_t_char_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_char_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint16_t_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_char_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint16_t_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_char_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint16_t_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_char_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint16_t_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_char_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint16_t_char_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_char_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_char_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint16_t_char_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_char_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_char_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint16_t_char_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint16_t_char_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint16_t_char_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint16_t_char_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint16_t_char_unbounded, element_flags_anonymous_map_uint16_t_char_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint16_t_char_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint16_t_char_unbounded), key_flags_anonymous_map_uint16_t_char_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint16_t_char_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint16_t_char_unbounded", type_ids_var_map_ushort_char))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint16_t_char_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ushort_char = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ushort_char = 0x00000000;
            bool common_var_map_ushort_char_ec {false};
            CommonStructMember common_var_map_ushort_char {TypeObjectUtils::build_common_struct_member(member_id_var_map_ushort_char, member_flags_var_map_ushort_char, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_char, common_var_map_ushort_char_ec))};
            if (!common_var_map_ushort_char_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ushort_char member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ushort_char = "var_map_ushort_char";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ushort_char;
            ann_custom_MapUShortChar.reset();
            CompleteMemberDetail detail_var_map_ushort_char = TypeObjectUtils::build_complete_member_detail(name_var_map_ushort_char, member_ann_builtin_var_map_ushort_char, ann_custom_MapUShortChar);
            CompleteStructMember member_var_map_ushort_char = TypeObjectUtils::build_complete_struct_member(common_var_map_ushort_char, detail_var_map_ushort_char);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapUShortChar, member_var_map_ushort_char);
        }
        CompleteStructType struct_type_MapUShortChar = TypeObjectUtils::build_complete_struct_type(struct_flags_MapUShortChar, header_MapUShortChar, member_seq_MapUShortChar);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapUShortChar, type_name_MapUShortChar.to_string(), type_ids_MapUShortChar))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapUShortChar already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapUShortWChar_type_identifier(
        TypeIdentifierPair& type_ids_MapUShortWChar)
{

    ReturnCode_t return_code_MapUShortWChar {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapUShortWChar =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapUShortWChar", type_ids_MapUShortWChar);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapUShortWChar)
    {
        StructTypeFlag struct_flags_MapUShortWChar = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapUShortWChar = "MapUShortWChar";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapUShortWChar;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapUShortWChar;
        CompleteTypeDetail detail_MapUShortWChar = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapUShortWChar, ann_custom_MapUShortWChar, type_name_MapUShortWChar.to_string());
        CompleteStructHeader header_MapUShortWChar;
        header_MapUShortWChar = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapUShortWChar);
        CompleteStructMemberSeq member_seq_MapUShortWChar;
        {
            TypeIdentifierPair type_ids_var_map_ushort_wchar;
            ReturnCode_t return_code_var_map_ushort_wchar {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ushort_wchar =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint16_t_wchar_t_unbounded", type_ids_var_map_ushort_wchar);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_wchar)
            {
                return_code_var_map_ushort_wchar =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_wchar_t", type_ids_var_map_ushort_wchar);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_wchar)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint16_t_wchar_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint16_t_wchar_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_wchar, element_identifier_anonymous_map_uint16_t_wchar_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint16_t_wchar_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_wchar_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ushort_wchar =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_ushort_wchar);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_wchar)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint16_t_wchar_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint16_t_wchar_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_wchar, key_identifier_anonymous_map_uint16_t_wchar_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint16_t_wchar_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_wchar_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint16_t_wchar_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint16_t_wchar_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_wchar_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint16_t_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_wchar_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint16_t_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_wchar_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint16_t_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_wchar_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint16_t_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_wchar_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint16_t_wchar_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_wchar_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_wchar_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint16_t_wchar_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_wchar_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_wchar_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint16_t_wchar_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint16_t_wchar_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint16_t_wchar_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint16_t_wchar_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint16_t_wchar_t_unbounded, element_flags_anonymous_map_uint16_t_wchar_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint16_t_wchar_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint16_t_wchar_t_unbounded), key_flags_anonymous_map_uint16_t_wchar_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint16_t_wchar_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint16_t_wchar_t_unbounded", type_ids_var_map_ushort_wchar))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint16_t_wchar_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ushort_wchar = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ushort_wchar = 0x00000000;
            bool common_var_map_ushort_wchar_ec {false};
            CommonStructMember common_var_map_ushort_wchar {TypeObjectUtils::build_common_struct_member(member_id_var_map_ushort_wchar, member_flags_var_map_ushort_wchar, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_wchar, common_var_map_ushort_wchar_ec))};
            if (!common_var_map_ushort_wchar_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ushort_wchar member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ushort_wchar = "var_map_ushort_wchar";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ushort_wchar;
            ann_custom_MapUShortWChar.reset();
            CompleteMemberDetail detail_var_map_ushort_wchar = TypeObjectUtils::build_complete_member_detail(name_var_map_ushort_wchar, member_ann_builtin_var_map_ushort_wchar, ann_custom_MapUShortWChar);
            CompleteStructMember member_var_map_ushort_wchar = TypeObjectUtils::build_complete_struct_member(common_var_map_ushort_wchar, detail_var_map_ushort_wchar);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapUShortWChar, member_var_map_ushort_wchar);
        }
        CompleteStructType struct_type_MapUShortWChar = TypeObjectUtils::build_complete_struct_type(struct_flags_MapUShortWChar, header_MapUShortWChar, member_seq_MapUShortWChar);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapUShortWChar, type_name_MapUShortWChar.to_string(), type_ids_MapUShortWChar))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapUShortWChar already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapUShortString_type_identifier(
        TypeIdentifierPair& type_ids_MapUShortString)
{

    ReturnCode_t return_code_MapUShortString {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapUShortString =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapUShortString", type_ids_MapUShortString);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapUShortString)
    {
        StructTypeFlag struct_flags_MapUShortString = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapUShortString = "MapUShortString";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapUShortString;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapUShortString;
        CompleteTypeDetail detail_MapUShortString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapUShortString, ann_custom_MapUShortString, type_name_MapUShortString.to_string());
        CompleteStructHeader header_MapUShortString;
        header_MapUShortString = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapUShortString);
        CompleteStructMemberSeq member_seq_MapUShortString;
        {
            TypeIdentifierPair type_ids_var_map_ushort_string;
            ReturnCode_t return_code_var_map_ushort_string {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ushort_string =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint16_t_anonymous_string_unbounded_unbounded", type_ids_var_map_ushort_string);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_string)
            {
                return_code_var_map_ushort_string =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_ushort_string);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_string)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_ushort_string))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool element_identifier_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_string, element_identifier_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_anonymous_string_unbounded_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ushort_string =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_ushort_string);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_string)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_string, key_identifier_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_anonymous_string_unbounded_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded, element_flags_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded), key_flags_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint16_t_anonymous_string_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint16_t_anonymous_string_unbounded_unbounded", type_ids_var_map_ushort_string))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint16_t_anonymous_string_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ushort_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ushort_string = 0x00000000;
            bool common_var_map_ushort_string_ec {false};
            CommonStructMember common_var_map_ushort_string {TypeObjectUtils::build_common_struct_member(member_id_var_map_ushort_string, member_flags_var_map_ushort_string, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_string, common_var_map_ushort_string_ec))};
            if (!common_var_map_ushort_string_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ushort_string member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ushort_string = "var_map_ushort_string";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ushort_string;
            ann_custom_MapUShortString.reset();
            CompleteMemberDetail detail_var_map_ushort_string = TypeObjectUtils::build_complete_member_detail(name_var_map_ushort_string, member_ann_builtin_var_map_ushort_string, ann_custom_MapUShortString);
            CompleteStructMember member_var_map_ushort_string = TypeObjectUtils::build_complete_struct_member(common_var_map_ushort_string, detail_var_map_ushort_string);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapUShortString, member_var_map_ushort_string);
        }
        CompleteStructType struct_type_MapUShortString = TypeObjectUtils::build_complete_struct_type(struct_flags_MapUShortString, header_MapUShortString, member_seq_MapUShortString);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapUShortString, type_name_MapUShortString.to_string(), type_ids_MapUShortString))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapUShortString already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapUShortWString_type_identifier(
        TypeIdentifierPair& type_ids_MapUShortWString)
{

    ReturnCode_t return_code_MapUShortWString {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapUShortWString =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapUShortWString", type_ids_MapUShortWString);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapUShortWString)
    {
        StructTypeFlag struct_flags_MapUShortWString = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapUShortWString = "MapUShortWString";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapUShortWString;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapUShortWString;
        CompleteTypeDetail detail_MapUShortWString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapUShortWString, ann_custom_MapUShortWString, type_name_MapUShortWString.to_string());
        CompleteStructHeader header_MapUShortWString;
        header_MapUShortWString = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapUShortWString);
        CompleteStructMemberSeq member_seq_MapUShortWString;
        {
            TypeIdentifierPair type_ids_var_map_ushort_wstring;
            ReturnCode_t return_code_var_map_ushort_wstring {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ushort_wstring =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded", type_ids_var_map_ushort_wstring);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_wstring)
            {
                return_code_var_map_ushort_wstring =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_ushort_wstring);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_wstring)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_ushort_wstring, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool element_identifier_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_wstring, element_identifier_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ushort_wstring =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_ushort_wstring);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_wstring)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_wstring, key_identifier_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded, element_flags_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded), key_flags_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded", type_ids_var_map_ushort_wstring))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint16_t_anonymous_wstring_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ushort_wstring = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ushort_wstring = 0x00000000;
            bool common_var_map_ushort_wstring_ec {false};
            CommonStructMember common_var_map_ushort_wstring {TypeObjectUtils::build_common_struct_member(member_id_var_map_ushort_wstring, member_flags_var_map_ushort_wstring, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_wstring, common_var_map_ushort_wstring_ec))};
            if (!common_var_map_ushort_wstring_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ushort_wstring member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ushort_wstring = "var_map_ushort_wstring";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ushort_wstring;
            ann_custom_MapUShortWString.reset();
            CompleteMemberDetail detail_var_map_ushort_wstring = TypeObjectUtils::build_complete_member_detail(name_var_map_ushort_wstring, member_ann_builtin_var_map_ushort_wstring, ann_custom_MapUShortWString);
            CompleteStructMember member_var_map_ushort_wstring = TypeObjectUtils::build_complete_struct_member(common_var_map_ushort_wstring, detail_var_map_ushort_wstring);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapUShortWString, member_var_map_ushort_wstring);
        }
        CompleteStructType struct_type_MapUShortWString = TypeObjectUtils::build_complete_struct_type(struct_flags_MapUShortWString, header_MapUShortWString, member_seq_MapUShortWString);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapUShortWString, type_name_MapUShortWString.to_string(), type_ids_MapUShortWString))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapUShortWString already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapUShortInnerAliasBoundedStringHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapUShortInnerAliasBoundedStringHelper)
{

    ReturnCode_t return_code_MapUShortInnerAliasBoundedStringHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapUShortInnerAliasBoundedStringHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapUShortInnerAliasBoundedStringHelper", type_ids_MapUShortInnerAliasBoundedStringHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapUShortInnerAliasBoundedStringHelper)
    {
        StructTypeFlag struct_flags_MapUShortInnerAliasBoundedStringHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapUShortInnerAliasBoundedStringHelper = "MapUShortInnerAliasBoundedStringHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapUShortInnerAliasBoundedStringHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapUShortInnerAliasBoundedStringHelper;
        CompleteTypeDetail detail_MapUShortInnerAliasBoundedStringHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapUShortInnerAliasBoundedStringHelper, ann_custom_MapUShortInnerAliasBoundedStringHelper, type_name_MapUShortInnerAliasBoundedStringHelper.to_string());
        CompleteStructHeader header_MapUShortInnerAliasBoundedStringHelper;
        header_MapUShortInnerAliasBoundedStringHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapUShortInnerAliasBoundedStringHelper);
        CompleteStructMemberSeq member_seq_MapUShortInnerAliasBoundedStringHelper;
        {
            TypeIdentifierPair type_ids_var_map_ushort_inneraliasboundedstringhelper;
            ReturnCode_t return_code_var_map_ushort_inneraliasboundedstringhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ushort_inneraliasboundedstringhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint16_t_anonymous_string_10_unbounded", type_ids_var_map_ushort_inneraliasboundedstringhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_inneraliasboundedstringhelper)
            {
                return_code_var_map_ushort_inneraliasboundedstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_ushort_inneraliasboundedstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_inneraliasboundedstringhelper)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_ushort_inneraliasboundedstringhelper);
                }
                bool element_identifier_anonymous_map_uint16_t_anonymous_string_10_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint16_t_anonymous_string_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_inneraliasboundedstringhelper, element_identifier_anonymous_map_uint16_t_anonymous_string_10_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint16_t_anonymous_string_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_anonymous_string_10_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ushort_inneraliasboundedstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_ushort_inneraliasboundedstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_inneraliasboundedstringhelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint16_t_anonymous_string_10_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint16_t_anonymous_string_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_inneraliasboundedstringhelper, key_identifier_anonymous_map_uint16_t_anonymous_string_10_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint16_t_anonymous_string_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_anonymous_string_10_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint16_t_anonymous_string_10_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint16_t_anonymous_string_10_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_string_10_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint16_t_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_string_10_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint16_t_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_string_10_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint16_t_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_string_10_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint16_t_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_string_10_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint16_t_anonymous_string_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_string_10_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_string_10_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint16_t_anonymous_string_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_string_10_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_string_10_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint16_t_anonymous_string_10_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint16_t_anonymous_string_10_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint16_t_anonymous_string_10_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint16_t_anonymous_string_10_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint16_t_anonymous_string_10_unbounded, element_flags_anonymous_map_uint16_t_anonymous_string_10_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint16_t_anonymous_string_10_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint16_t_anonymous_string_10_unbounded), key_flags_anonymous_map_uint16_t_anonymous_string_10_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint16_t_anonymous_string_10_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint16_t_anonymous_string_10_unbounded", type_ids_var_map_ushort_inneraliasboundedstringhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint16_t_anonymous_string_10_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ushort_inneraliasboundedstringhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ushort_inneraliasboundedstringhelper = 0x00000000;
            bool common_var_map_ushort_inneraliasboundedstringhelper_ec {false};
            CommonStructMember common_var_map_ushort_inneraliasboundedstringhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_ushort_inneraliasboundedstringhelper, member_flags_var_map_ushort_inneraliasboundedstringhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_inneraliasboundedstringhelper, common_var_map_ushort_inneraliasboundedstringhelper_ec))};
            if (!common_var_map_ushort_inneraliasboundedstringhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ushort_inneraliasboundedstringhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ushort_inneraliasboundedstringhelper = "var_map_ushort_inneraliasboundedstringhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ushort_inneraliasboundedstringhelper;
            ann_custom_MapUShortInnerAliasBoundedStringHelper.reset();
            CompleteMemberDetail detail_var_map_ushort_inneraliasboundedstringhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_ushort_inneraliasboundedstringhelper, member_ann_builtin_var_map_ushort_inneraliasboundedstringhelper, ann_custom_MapUShortInnerAliasBoundedStringHelper);
            CompleteStructMember member_var_map_ushort_inneraliasboundedstringhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_ushort_inneraliasboundedstringhelper, detail_var_map_ushort_inneraliasboundedstringhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapUShortInnerAliasBoundedStringHelper, member_var_map_ushort_inneraliasboundedstringhelper);
        }
        CompleteStructType struct_type_MapUShortInnerAliasBoundedStringHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapUShortInnerAliasBoundedStringHelper, header_MapUShortInnerAliasBoundedStringHelper, member_seq_MapUShortInnerAliasBoundedStringHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapUShortInnerAliasBoundedStringHelper, type_name_MapUShortInnerAliasBoundedStringHelper.to_string(), type_ids_MapUShortInnerAliasBoundedStringHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapUShortInnerAliasBoundedStringHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapUShortInnerAliasBoundedWStringHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapUShortInnerAliasBoundedWStringHelper)
{

    ReturnCode_t return_code_MapUShortInnerAliasBoundedWStringHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapUShortInnerAliasBoundedWStringHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapUShortInnerAliasBoundedWStringHelper", type_ids_MapUShortInnerAliasBoundedWStringHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapUShortInnerAliasBoundedWStringHelper)
    {
        StructTypeFlag struct_flags_MapUShortInnerAliasBoundedWStringHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapUShortInnerAliasBoundedWStringHelper = "MapUShortInnerAliasBoundedWStringHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapUShortInnerAliasBoundedWStringHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapUShortInnerAliasBoundedWStringHelper;
        CompleteTypeDetail detail_MapUShortInnerAliasBoundedWStringHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapUShortInnerAliasBoundedWStringHelper, ann_custom_MapUShortInnerAliasBoundedWStringHelper, type_name_MapUShortInnerAliasBoundedWStringHelper.to_string());
        CompleteStructHeader header_MapUShortInnerAliasBoundedWStringHelper;
        header_MapUShortInnerAliasBoundedWStringHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapUShortInnerAliasBoundedWStringHelper);
        CompleteStructMemberSeq member_seq_MapUShortInnerAliasBoundedWStringHelper;
        {
            TypeIdentifierPair type_ids_var_map_ushort_inneraliasboundedwstringhelper;
            ReturnCode_t return_code_var_map_ushort_inneraliasboundedwstringhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ushort_inneraliasboundedwstringhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint16_t_anonymous_wstring_10_unbounded", type_ids_var_map_ushort_inneraliasboundedwstringhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_inneraliasboundedwstringhelper)
            {
                return_code_var_map_ushort_inneraliasboundedwstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_ushort_inneraliasboundedwstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_inneraliasboundedwstringhelper)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_ushort_inneraliasboundedwstringhelper);
                }
                bool element_identifier_anonymous_map_uint16_t_anonymous_wstring_10_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint16_t_anonymous_wstring_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_inneraliasboundedwstringhelper, element_identifier_anonymous_map_uint16_t_anonymous_wstring_10_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint16_t_anonymous_wstring_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_anonymous_wstring_10_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ushort_inneraliasboundedwstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_ushort_inneraliasboundedwstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_inneraliasboundedwstringhelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint16_t_anonymous_wstring_10_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint16_t_anonymous_wstring_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_inneraliasboundedwstringhelper, key_identifier_anonymous_map_uint16_t_anonymous_wstring_10_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint16_t_anonymous_wstring_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_anonymous_wstring_10_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint16_t_anonymous_wstring_10_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint16_t_anonymous_wstring_10_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_wstring_10_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint16_t_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_wstring_10_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint16_t_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_wstring_10_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint16_t_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_wstring_10_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint16_t_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_wstring_10_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint16_t_anonymous_wstring_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_wstring_10_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_wstring_10_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint16_t_anonymous_wstring_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_wstring_10_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_wstring_10_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint16_t_anonymous_wstring_10_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint16_t_anonymous_wstring_10_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint16_t_anonymous_wstring_10_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint16_t_anonymous_wstring_10_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint16_t_anonymous_wstring_10_unbounded, element_flags_anonymous_map_uint16_t_anonymous_wstring_10_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint16_t_anonymous_wstring_10_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint16_t_anonymous_wstring_10_unbounded), key_flags_anonymous_map_uint16_t_anonymous_wstring_10_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint16_t_anonymous_wstring_10_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint16_t_anonymous_wstring_10_unbounded", type_ids_var_map_ushort_inneraliasboundedwstringhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint16_t_anonymous_wstring_10_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ushort_inneraliasboundedwstringhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ushort_inneraliasboundedwstringhelper = 0x00000000;
            bool common_var_map_ushort_inneraliasboundedwstringhelper_ec {false};
            CommonStructMember common_var_map_ushort_inneraliasboundedwstringhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_ushort_inneraliasboundedwstringhelper, member_flags_var_map_ushort_inneraliasboundedwstringhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_inneraliasboundedwstringhelper, common_var_map_ushort_inneraliasboundedwstringhelper_ec))};
            if (!common_var_map_ushort_inneraliasboundedwstringhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ushort_inneraliasboundedwstringhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ushort_inneraliasboundedwstringhelper = "var_map_ushort_inneraliasboundedwstringhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ushort_inneraliasboundedwstringhelper;
            ann_custom_MapUShortInnerAliasBoundedWStringHelper.reset();
            CompleteMemberDetail detail_var_map_ushort_inneraliasboundedwstringhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_ushort_inneraliasboundedwstringhelper, member_ann_builtin_var_map_ushort_inneraliasboundedwstringhelper, ann_custom_MapUShortInnerAliasBoundedWStringHelper);
            CompleteStructMember member_var_map_ushort_inneraliasboundedwstringhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_ushort_inneraliasboundedwstringhelper, detail_var_map_ushort_inneraliasboundedwstringhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapUShortInnerAliasBoundedWStringHelper, member_var_map_ushort_inneraliasboundedwstringhelper);
        }
        CompleteStructType struct_type_MapUShortInnerAliasBoundedWStringHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapUShortInnerAliasBoundedWStringHelper, header_MapUShortInnerAliasBoundedWStringHelper, member_seq_MapUShortInnerAliasBoundedWStringHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapUShortInnerAliasBoundedWStringHelper, type_name_MapUShortInnerAliasBoundedWStringHelper.to_string(), type_ids_MapUShortInnerAliasBoundedWStringHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapUShortInnerAliasBoundedWStringHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapUShortInnerEnumHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapUShortInnerEnumHelper)
{

    ReturnCode_t return_code_MapUShortInnerEnumHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapUShortInnerEnumHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapUShortInnerEnumHelper", type_ids_MapUShortInnerEnumHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapUShortInnerEnumHelper)
    {
        StructTypeFlag struct_flags_MapUShortInnerEnumHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapUShortInnerEnumHelper = "MapUShortInnerEnumHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapUShortInnerEnumHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapUShortInnerEnumHelper;
        CompleteTypeDetail detail_MapUShortInnerEnumHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapUShortInnerEnumHelper, ann_custom_MapUShortInnerEnumHelper, type_name_MapUShortInnerEnumHelper.to_string());
        CompleteStructHeader header_MapUShortInnerEnumHelper;
        header_MapUShortInnerEnumHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapUShortInnerEnumHelper);
        CompleteStructMemberSeq member_seq_MapUShortInnerEnumHelper;
        {
            TypeIdentifierPair type_ids_var_map_ushort_innerenumhelper;
            ReturnCode_t return_code_var_map_ushort_innerenumhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ushort_innerenumhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint16_t_InnerEnumHelper_unbounded", type_ids_var_map_ushort_innerenumhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_innerenumhelper)
            {
                return_code_var_map_ushort_innerenumhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerEnumHelper", type_ids_var_map_ushort_innerenumhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_innerenumhelper)
                {
                ::register_InnerEnumHelper_type_identifier(type_ids_var_map_ushort_innerenumhelper);
                }
                bool element_identifier_anonymous_map_uint16_t_InnerEnumHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint16_t_InnerEnumHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_innerenumhelper, element_identifier_anonymous_map_uint16_t_InnerEnumHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint16_t_InnerEnumHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_InnerEnumHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ushort_innerenumhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_ushort_innerenumhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_innerenumhelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint16_t_InnerEnumHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint16_t_InnerEnumHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_innerenumhelper, key_identifier_anonymous_map_uint16_t_InnerEnumHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint16_t_InnerEnumHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_InnerEnumHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint16_t_InnerEnumHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint16_t_InnerEnumHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerEnumHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint16_t_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerEnumHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint16_t_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerEnumHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint16_t_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerEnumHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint16_t_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerEnumHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint16_t_InnerEnumHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerEnumHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerEnumHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint16_t_InnerEnumHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerEnumHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerEnumHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint16_t_InnerEnumHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint16_t_InnerEnumHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint16_t_InnerEnumHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint16_t_InnerEnumHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint16_t_InnerEnumHelper_unbounded, element_flags_anonymous_map_uint16_t_InnerEnumHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint16_t_InnerEnumHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint16_t_InnerEnumHelper_unbounded), key_flags_anonymous_map_uint16_t_InnerEnumHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint16_t_InnerEnumHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint16_t_InnerEnumHelper_unbounded", type_ids_var_map_ushort_innerenumhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint16_t_InnerEnumHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ushort_innerenumhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ushort_innerenumhelper = 0x00000000;
            bool common_var_map_ushort_innerenumhelper_ec {false};
            CommonStructMember common_var_map_ushort_innerenumhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_ushort_innerenumhelper, member_flags_var_map_ushort_innerenumhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_innerenumhelper, common_var_map_ushort_innerenumhelper_ec))};
            if (!common_var_map_ushort_innerenumhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ushort_innerenumhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ushort_innerenumhelper = "var_map_ushort_innerenumhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ushort_innerenumhelper;
            ann_custom_MapUShortInnerEnumHelper.reset();
            CompleteMemberDetail detail_var_map_ushort_innerenumhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_ushort_innerenumhelper, member_ann_builtin_var_map_ushort_innerenumhelper, ann_custom_MapUShortInnerEnumHelper);
            CompleteStructMember member_var_map_ushort_innerenumhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_ushort_innerenumhelper, detail_var_map_ushort_innerenumhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapUShortInnerEnumHelper, member_var_map_ushort_innerenumhelper);
        }
        CompleteStructType struct_type_MapUShortInnerEnumHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapUShortInnerEnumHelper, header_MapUShortInnerEnumHelper, member_seq_MapUShortInnerEnumHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapUShortInnerEnumHelper, type_name_MapUShortInnerEnumHelper.to_string(), type_ids_MapUShortInnerEnumHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapUShortInnerEnumHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapUShortInnerBitMaskHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapUShortInnerBitMaskHelper)
{

    ReturnCode_t return_code_MapUShortInnerBitMaskHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapUShortInnerBitMaskHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapUShortInnerBitMaskHelper", type_ids_MapUShortInnerBitMaskHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapUShortInnerBitMaskHelper)
    {
        StructTypeFlag struct_flags_MapUShortInnerBitMaskHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapUShortInnerBitMaskHelper = "MapUShortInnerBitMaskHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapUShortInnerBitMaskHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapUShortInnerBitMaskHelper;
        CompleteTypeDetail detail_MapUShortInnerBitMaskHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapUShortInnerBitMaskHelper, ann_custom_MapUShortInnerBitMaskHelper, type_name_MapUShortInnerBitMaskHelper.to_string());
        CompleteStructHeader header_MapUShortInnerBitMaskHelper;
        header_MapUShortInnerBitMaskHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapUShortInnerBitMaskHelper);
        CompleteStructMemberSeq member_seq_MapUShortInnerBitMaskHelper;
        {
            TypeIdentifierPair type_ids_var_map_ushort_innerbitmaskhelper;
            ReturnCode_t return_code_var_map_ushort_innerbitmaskhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ushort_innerbitmaskhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint16_t_InnerBitMaskHelper_unbounded", type_ids_var_map_ushort_innerbitmaskhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_innerbitmaskhelper)
            {
                return_code_var_map_ushort_innerbitmaskhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerBitMaskHelper", type_ids_var_map_ushort_innerbitmaskhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_innerbitmaskhelper)
                {
                ::register_InnerBitMaskHelper_type_identifier(type_ids_var_map_ushort_innerbitmaskhelper);
                }
                bool element_identifier_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_innerbitmaskhelper, element_identifier_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_InnerBitMaskHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ushort_innerbitmaskhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_ushort_innerbitmaskhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_innerbitmaskhelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_innerbitmaskhelper, key_identifier_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_InnerBitMaskHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded, element_flags_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded), key_flags_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint16_t_InnerBitMaskHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint16_t_InnerBitMaskHelper_unbounded", type_ids_var_map_ushort_innerbitmaskhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint16_t_InnerBitMaskHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ushort_innerbitmaskhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ushort_innerbitmaskhelper = 0x00000000;
            bool common_var_map_ushort_innerbitmaskhelper_ec {false};
            CommonStructMember common_var_map_ushort_innerbitmaskhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_ushort_innerbitmaskhelper, member_flags_var_map_ushort_innerbitmaskhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_innerbitmaskhelper, common_var_map_ushort_innerbitmaskhelper_ec))};
            if (!common_var_map_ushort_innerbitmaskhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ushort_innerbitmaskhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ushort_innerbitmaskhelper = "var_map_ushort_innerbitmaskhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ushort_innerbitmaskhelper;
            ann_custom_MapUShortInnerBitMaskHelper.reset();
            CompleteMemberDetail detail_var_map_ushort_innerbitmaskhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_ushort_innerbitmaskhelper, member_ann_builtin_var_map_ushort_innerbitmaskhelper, ann_custom_MapUShortInnerBitMaskHelper);
            CompleteStructMember member_var_map_ushort_innerbitmaskhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_ushort_innerbitmaskhelper, detail_var_map_ushort_innerbitmaskhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapUShortInnerBitMaskHelper, member_var_map_ushort_innerbitmaskhelper);
        }
        CompleteStructType struct_type_MapUShortInnerBitMaskHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapUShortInnerBitMaskHelper, header_MapUShortInnerBitMaskHelper, member_seq_MapUShortInnerBitMaskHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapUShortInnerBitMaskHelper, type_name_MapUShortInnerBitMaskHelper.to_string(), type_ids_MapUShortInnerBitMaskHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapUShortInnerBitMaskHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapUShortInnerAliasHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapUShortInnerAliasHelper)
{

    ReturnCode_t return_code_MapUShortInnerAliasHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapUShortInnerAliasHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapUShortInnerAliasHelper", type_ids_MapUShortInnerAliasHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapUShortInnerAliasHelper)
    {
        StructTypeFlag struct_flags_MapUShortInnerAliasHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapUShortInnerAliasHelper = "MapUShortInnerAliasHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapUShortInnerAliasHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapUShortInnerAliasHelper;
        CompleteTypeDetail detail_MapUShortInnerAliasHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapUShortInnerAliasHelper, ann_custom_MapUShortInnerAliasHelper, type_name_MapUShortInnerAliasHelper.to_string());
        CompleteStructHeader header_MapUShortInnerAliasHelper;
        header_MapUShortInnerAliasHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapUShortInnerAliasHelper);
        CompleteStructMemberSeq member_seq_MapUShortInnerAliasHelper;
        {
            TypeIdentifierPair type_ids_var_map_ushort_inneraliashelper;
            ReturnCode_t return_code_var_map_ushort_inneraliashelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ushort_inneraliashelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint16_t_InnerAliasHelper_unbounded", type_ids_var_map_ushort_inneraliashelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_inneraliashelper)
            {
                return_code_var_map_ushort_inneraliashelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerAliasHelper", type_ids_var_map_ushort_inneraliashelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_inneraliashelper)
                {
                ::register_InnerAliasHelper_type_identifier(type_ids_var_map_ushort_inneraliashelper);
                }
                bool element_identifier_anonymous_map_uint16_t_InnerAliasHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint16_t_InnerAliasHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_inneraliashelper, element_identifier_anonymous_map_uint16_t_InnerAliasHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint16_t_InnerAliasHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_InnerAliasHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ushort_inneraliashelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_ushort_inneraliashelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_inneraliashelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint16_t_InnerAliasHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint16_t_InnerAliasHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_inneraliashelper, key_identifier_anonymous_map_uint16_t_InnerAliasHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint16_t_InnerAliasHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_InnerAliasHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint16_t_InnerAliasHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint16_t_InnerAliasHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerAliasHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint16_t_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerAliasHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint16_t_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerAliasHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint16_t_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerAliasHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint16_t_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerAliasHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint16_t_InnerAliasHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerAliasHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerAliasHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint16_t_InnerAliasHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerAliasHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerAliasHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint16_t_InnerAliasHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint16_t_InnerAliasHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint16_t_InnerAliasHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint16_t_InnerAliasHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint16_t_InnerAliasHelper_unbounded, element_flags_anonymous_map_uint16_t_InnerAliasHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint16_t_InnerAliasHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint16_t_InnerAliasHelper_unbounded), key_flags_anonymous_map_uint16_t_InnerAliasHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint16_t_InnerAliasHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint16_t_InnerAliasHelper_unbounded", type_ids_var_map_ushort_inneraliashelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint16_t_InnerAliasHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ushort_inneraliashelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ushort_inneraliashelper = 0x00000000;
            bool common_var_map_ushort_inneraliashelper_ec {false};
            CommonStructMember common_var_map_ushort_inneraliashelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_ushort_inneraliashelper, member_flags_var_map_ushort_inneraliashelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_inneraliashelper, common_var_map_ushort_inneraliashelper_ec))};
            if (!common_var_map_ushort_inneraliashelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ushort_inneraliashelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ushort_inneraliashelper = "var_map_ushort_inneraliashelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ushort_inneraliashelper;
            ann_custom_MapUShortInnerAliasHelper.reset();
            CompleteMemberDetail detail_var_map_ushort_inneraliashelper = TypeObjectUtils::build_complete_member_detail(name_var_map_ushort_inneraliashelper, member_ann_builtin_var_map_ushort_inneraliashelper, ann_custom_MapUShortInnerAliasHelper);
            CompleteStructMember member_var_map_ushort_inneraliashelper = TypeObjectUtils::build_complete_struct_member(common_var_map_ushort_inneraliashelper, detail_var_map_ushort_inneraliashelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapUShortInnerAliasHelper, member_var_map_ushort_inneraliashelper);
        }
        CompleteStructType struct_type_MapUShortInnerAliasHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapUShortInnerAliasHelper, header_MapUShortInnerAliasHelper, member_seq_MapUShortInnerAliasHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapUShortInnerAliasHelper, type_name_MapUShortInnerAliasHelper.to_string(), type_ids_MapUShortInnerAliasHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapUShortInnerAliasHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapUShortInnerAliasArrayHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapUShortInnerAliasArrayHelper)
{

    ReturnCode_t return_code_MapUShortInnerAliasArrayHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapUShortInnerAliasArrayHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapUShortInnerAliasArrayHelper", type_ids_MapUShortInnerAliasArrayHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapUShortInnerAliasArrayHelper)
    {
        StructTypeFlag struct_flags_MapUShortInnerAliasArrayHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapUShortInnerAliasArrayHelper = "MapUShortInnerAliasArrayHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapUShortInnerAliasArrayHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapUShortInnerAliasArrayHelper;
        CompleteTypeDetail detail_MapUShortInnerAliasArrayHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapUShortInnerAliasArrayHelper, ann_custom_MapUShortInnerAliasArrayHelper, type_name_MapUShortInnerAliasArrayHelper.to_string());
        CompleteStructHeader header_MapUShortInnerAliasArrayHelper;
        header_MapUShortInnerAliasArrayHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapUShortInnerAliasArrayHelper);
        CompleteStructMemberSeq member_seq_MapUShortInnerAliasArrayHelper;
        {
            TypeIdentifierPair type_ids_var_map_ushort_inneraliasarrayhelper;
            ReturnCode_t return_code_var_map_ushort_inneraliasarrayhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ushort_inneraliasarrayhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded", type_ids_var_map_ushort_inneraliasarrayhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_inneraliasarrayhelper)
            {
                return_code_var_map_ushort_inneraliasarrayhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_array_helper", type_ids_var_map_ushort_inneraliasarrayhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_inneraliasarrayhelper)
                {
                ::register_Inner_alias_array_helper_type_identifier(type_ids_var_map_ushort_inneraliasarrayhelper);
                }
                bool element_identifier_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_inneraliasarrayhelper, element_identifier_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ushort_inneraliasarrayhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_ushort_inneraliasarrayhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_inneraliasarrayhelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_inneraliasarrayhelper, key_identifier_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded, element_flags_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded), key_flags_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded", type_ids_var_map_ushort_inneraliasarrayhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint16_t_anonymous_array_int16_t_2_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ushort_inneraliasarrayhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ushort_inneraliasarrayhelper = 0x00000000;
            bool common_var_map_ushort_inneraliasarrayhelper_ec {false};
            CommonStructMember common_var_map_ushort_inneraliasarrayhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_ushort_inneraliasarrayhelper, member_flags_var_map_ushort_inneraliasarrayhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_inneraliasarrayhelper, common_var_map_ushort_inneraliasarrayhelper_ec))};
            if (!common_var_map_ushort_inneraliasarrayhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ushort_inneraliasarrayhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ushort_inneraliasarrayhelper = "var_map_ushort_inneraliasarrayhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ushort_inneraliasarrayhelper;
            ann_custom_MapUShortInnerAliasArrayHelper.reset();
            CompleteMemberDetail detail_var_map_ushort_inneraliasarrayhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_ushort_inneraliasarrayhelper, member_ann_builtin_var_map_ushort_inneraliasarrayhelper, ann_custom_MapUShortInnerAliasArrayHelper);
            CompleteStructMember member_var_map_ushort_inneraliasarrayhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_ushort_inneraliasarrayhelper, detail_var_map_ushort_inneraliasarrayhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapUShortInnerAliasArrayHelper, member_var_map_ushort_inneraliasarrayhelper);
        }
        CompleteStructType struct_type_MapUShortInnerAliasArrayHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapUShortInnerAliasArrayHelper, header_MapUShortInnerAliasArrayHelper, member_seq_MapUShortInnerAliasArrayHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapUShortInnerAliasArrayHelper, type_name_MapUShortInnerAliasArrayHelper.to_string(), type_ids_MapUShortInnerAliasArrayHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapUShortInnerAliasArrayHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapUShortInnerAliasSequenceHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapUShortInnerAliasSequenceHelper)
{

    ReturnCode_t return_code_MapUShortInnerAliasSequenceHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapUShortInnerAliasSequenceHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapUShortInnerAliasSequenceHelper", type_ids_MapUShortInnerAliasSequenceHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapUShortInnerAliasSequenceHelper)
    {
        StructTypeFlag struct_flags_MapUShortInnerAliasSequenceHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapUShortInnerAliasSequenceHelper = "MapUShortInnerAliasSequenceHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapUShortInnerAliasSequenceHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapUShortInnerAliasSequenceHelper;
        CompleteTypeDetail detail_MapUShortInnerAliasSequenceHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapUShortInnerAliasSequenceHelper, ann_custom_MapUShortInnerAliasSequenceHelper, type_name_MapUShortInnerAliasSequenceHelper.to_string());
        CompleteStructHeader header_MapUShortInnerAliasSequenceHelper;
        header_MapUShortInnerAliasSequenceHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapUShortInnerAliasSequenceHelper);
        CompleteStructMemberSeq member_seq_MapUShortInnerAliasSequenceHelper;
        {
            TypeIdentifierPair type_ids_var_map_ushort_inneraliassequencehelper;
            ReturnCode_t return_code_var_map_ushort_inneraliassequencehelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ushort_inneraliassequencehelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded", type_ids_var_map_ushort_inneraliassequencehelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_inneraliassequencehelper)
            {
                return_code_var_map_ushort_inneraliassequencehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_sequence_helper", type_ids_var_map_ushort_inneraliassequencehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_inneraliassequencehelper)
                {
                ::register_Inner_alias_sequence_helper_type_identifier(type_ids_var_map_ushort_inneraliassequencehelper);
                }
                bool element_identifier_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_inneraliassequencehelper, element_identifier_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ushort_inneraliassequencehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_ushort_inneraliassequencehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_inneraliassequencehelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_inneraliassequencehelper, key_identifier_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded, element_flags_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded), key_flags_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded", type_ids_var_map_ushort_inneraliassequencehelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint16_t_anonymous_sequence_int16_t_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ushort_inneraliassequencehelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ushort_inneraliassequencehelper = 0x00000000;
            bool common_var_map_ushort_inneraliassequencehelper_ec {false};
            CommonStructMember common_var_map_ushort_inneraliassequencehelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_ushort_inneraliassequencehelper, member_flags_var_map_ushort_inneraliassequencehelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_inneraliassequencehelper, common_var_map_ushort_inneraliassequencehelper_ec))};
            if (!common_var_map_ushort_inneraliassequencehelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ushort_inneraliassequencehelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ushort_inneraliassequencehelper = "var_map_ushort_inneraliassequencehelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ushort_inneraliassequencehelper;
            ann_custom_MapUShortInnerAliasSequenceHelper.reset();
            CompleteMemberDetail detail_var_map_ushort_inneraliassequencehelper = TypeObjectUtils::build_complete_member_detail(name_var_map_ushort_inneraliassequencehelper, member_ann_builtin_var_map_ushort_inneraliassequencehelper, ann_custom_MapUShortInnerAliasSequenceHelper);
            CompleteStructMember member_var_map_ushort_inneraliassequencehelper = TypeObjectUtils::build_complete_struct_member(common_var_map_ushort_inneraliassequencehelper, detail_var_map_ushort_inneraliassequencehelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapUShortInnerAliasSequenceHelper, member_var_map_ushort_inneraliassequencehelper);
        }
        CompleteStructType struct_type_MapUShortInnerAliasSequenceHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapUShortInnerAliasSequenceHelper, header_MapUShortInnerAliasSequenceHelper, member_seq_MapUShortInnerAliasSequenceHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapUShortInnerAliasSequenceHelper, type_name_MapUShortInnerAliasSequenceHelper.to_string(), type_ids_MapUShortInnerAliasSequenceHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapUShortInnerAliasSequenceHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapUShortInnerAliasMapHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapUShortInnerAliasMapHelper)
{

    ReturnCode_t return_code_MapUShortInnerAliasMapHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapUShortInnerAliasMapHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapUShortInnerAliasMapHelper", type_ids_MapUShortInnerAliasMapHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapUShortInnerAliasMapHelper)
    {
        StructTypeFlag struct_flags_MapUShortInnerAliasMapHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapUShortInnerAliasMapHelper = "MapUShortInnerAliasMapHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapUShortInnerAliasMapHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapUShortInnerAliasMapHelper;
        CompleteTypeDetail detail_MapUShortInnerAliasMapHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapUShortInnerAliasMapHelper, ann_custom_MapUShortInnerAliasMapHelper, type_name_MapUShortInnerAliasMapHelper.to_string());
        CompleteStructHeader header_MapUShortInnerAliasMapHelper;
        header_MapUShortInnerAliasMapHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapUShortInnerAliasMapHelper);
        CompleteStructMemberSeq member_seq_MapUShortInnerAliasMapHelper;
        {
            TypeIdentifierPair type_ids_var_map_ushort_inneraliasmaphelper;
            ReturnCode_t return_code_var_map_ushort_inneraliasmaphelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ushort_inneraliasmaphelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded", type_ids_var_map_ushort_inneraliasmaphelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_inneraliasmaphelper)
            {
                return_code_var_map_ushort_inneraliasmaphelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_map_helper", type_ids_var_map_ushort_inneraliasmaphelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_inneraliasmaphelper)
                {
                ::register_Inner_alias_map_helper_type_identifier(type_ids_var_map_ushort_inneraliasmaphelper);
                }
                bool element_identifier_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_inneraliasmaphelper, element_identifier_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ushort_inneraliasmaphelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_ushort_inneraliasmaphelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_inneraliasmaphelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_inneraliasmaphelper, key_identifier_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded, element_flags_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded), key_flags_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded", type_ids_var_map_ushort_inneraliasmaphelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint16_t_anonymous_map_int32_t_int32_t_0_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ushort_inneraliasmaphelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ushort_inneraliasmaphelper = 0x00000000;
            bool common_var_map_ushort_inneraliasmaphelper_ec {false};
            CommonStructMember common_var_map_ushort_inneraliasmaphelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_ushort_inneraliasmaphelper, member_flags_var_map_ushort_inneraliasmaphelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_inneraliasmaphelper, common_var_map_ushort_inneraliasmaphelper_ec))};
            if (!common_var_map_ushort_inneraliasmaphelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ushort_inneraliasmaphelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ushort_inneraliasmaphelper = "var_map_ushort_inneraliasmaphelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ushort_inneraliasmaphelper;
            ann_custom_MapUShortInnerAliasMapHelper.reset();
            CompleteMemberDetail detail_var_map_ushort_inneraliasmaphelper = TypeObjectUtils::build_complete_member_detail(name_var_map_ushort_inneraliasmaphelper, member_ann_builtin_var_map_ushort_inneraliasmaphelper, ann_custom_MapUShortInnerAliasMapHelper);
            CompleteStructMember member_var_map_ushort_inneraliasmaphelper = TypeObjectUtils::build_complete_struct_member(common_var_map_ushort_inneraliasmaphelper, detail_var_map_ushort_inneraliasmaphelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapUShortInnerAliasMapHelper, member_var_map_ushort_inneraliasmaphelper);
        }
        CompleteStructType struct_type_MapUShortInnerAliasMapHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapUShortInnerAliasMapHelper, header_MapUShortInnerAliasMapHelper, member_seq_MapUShortInnerAliasMapHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapUShortInnerAliasMapHelper, type_name_MapUShortInnerAliasMapHelper.to_string(), type_ids_MapUShortInnerAliasMapHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapUShortInnerAliasMapHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapUShortInnerUnionHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapUShortInnerUnionHelper)
{

    ReturnCode_t return_code_MapUShortInnerUnionHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapUShortInnerUnionHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapUShortInnerUnionHelper", type_ids_MapUShortInnerUnionHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapUShortInnerUnionHelper)
    {
        StructTypeFlag struct_flags_MapUShortInnerUnionHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapUShortInnerUnionHelper = "MapUShortInnerUnionHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapUShortInnerUnionHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapUShortInnerUnionHelper;
        CompleteTypeDetail detail_MapUShortInnerUnionHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapUShortInnerUnionHelper, ann_custom_MapUShortInnerUnionHelper, type_name_MapUShortInnerUnionHelper.to_string());
        CompleteStructHeader header_MapUShortInnerUnionHelper;
        header_MapUShortInnerUnionHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapUShortInnerUnionHelper);
        CompleteStructMemberSeq member_seq_MapUShortInnerUnionHelper;
        {
            TypeIdentifierPair type_ids_var_map_ushort_innerunionhelper;
            ReturnCode_t return_code_var_map_ushort_innerunionhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ushort_innerunionhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint16_t_InnerUnionHelper_unbounded", type_ids_var_map_ushort_innerunionhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_innerunionhelper)
            {
                return_code_var_map_ushort_innerunionhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerUnionHelper", type_ids_var_map_ushort_innerunionhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_innerunionhelper)
                {
                ::register_InnerUnionHelper_type_identifier(type_ids_var_map_ushort_innerunionhelper);
                }
                bool element_identifier_anonymous_map_uint16_t_InnerUnionHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint16_t_InnerUnionHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_innerunionhelper, element_identifier_anonymous_map_uint16_t_InnerUnionHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint16_t_InnerUnionHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_InnerUnionHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ushort_innerunionhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_ushort_innerunionhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_innerunionhelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint16_t_InnerUnionHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint16_t_InnerUnionHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_innerunionhelper, key_identifier_anonymous_map_uint16_t_InnerUnionHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint16_t_InnerUnionHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_InnerUnionHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint16_t_InnerUnionHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint16_t_InnerUnionHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerUnionHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint16_t_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerUnionHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint16_t_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerUnionHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint16_t_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerUnionHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint16_t_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerUnionHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint16_t_InnerUnionHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerUnionHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerUnionHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint16_t_InnerUnionHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerUnionHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerUnionHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint16_t_InnerUnionHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint16_t_InnerUnionHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint16_t_InnerUnionHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint16_t_InnerUnionHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint16_t_InnerUnionHelper_unbounded, element_flags_anonymous_map_uint16_t_InnerUnionHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint16_t_InnerUnionHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint16_t_InnerUnionHelper_unbounded), key_flags_anonymous_map_uint16_t_InnerUnionHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint16_t_InnerUnionHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint16_t_InnerUnionHelper_unbounded", type_ids_var_map_ushort_innerunionhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint16_t_InnerUnionHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ushort_innerunionhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ushort_innerunionhelper = 0x00000000;
            bool common_var_map_ushort_innerunionhelper_ec {false};
            CommonStructMember common_var_map_ushort_innerunionhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_ushort_innerunionhelper, member_flags_var_map_ushort_innerunionhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_innerunionhelper, common_var_map_ushort_innerunionhelper_ec))};
            if (!common_var_map_ushort_innerunionhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ushort_innerunionhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ushort_innerunionhelper = "var_map_ushort_innerunionhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ushort_innerunionhelper;
            ann_custom_MapUShortInnerUnionHelper.reset();
            CompleteMemberDetail detail_var_map_ushort_innerunionhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_ushort_innerunionhelper, member_ann_builtin_var_map_ushort_innerunionhelper, ann_custom_MapUShortInnerUnionHelper);
            CompleteStructMember member_var_map_ushort_innerunionhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_ushort_innerunionhelper, detail_var_map_ushort_innerunionhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapUShortInnerUnionHelper, member_var_map_ushort_innerunionhelper);
        }
        CompleteStructType struct_type_MapUShortInnerUnionHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapUShortInnerUnionHelper, header_MapUShortInnerUnionHelper, member_seq_MapUShortInnerUnionHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapUShortInnerUnionHelper, type_name_MapUShortInnerUnionHelper.to_string(), type_ids_MapUShortInnerUnionHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapUShortInnerUnionHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapUShortInnerStructureHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapUShortInnerStructureHelper)
{

    ReturnCode_t return_code_MapUShortInnerStructureHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapUShortInnerStructureHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapUShortInnerStructureHelper", type_ids_MapUShortInnerStructureHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapUShortInnerStructureHelper)
    {
        StructTypeFlag struct_flags_MapUShortInnerStructureHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapUShortInnerStructureHelper = "MapUShortInnerStructureHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapUShortInnerStructureHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapUShortInnerStructureHelper;
        CompleteTypeDetail detail_MapUShortInnerStructureHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapUShortInnerStructureHelper, ann_custom_MapUShortInnerStructureHelper, type_name_MapUShortInnerStructureHelper.to_string());
        CompleteStructHeader header_MapUShortInnerStructureHelper;
        header_MapUShortInnerStructureHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapUShortInnerStructureHelper);
        CompleteStructMemberSeq member_seq_MapUShortInnerStructureHelper;
        {
            TypeIdentifierPair type_ids_var_map_ushort_innerstructurehelper;
            ReturnCode_t return_code_var_map_ushort_innerstructurehelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ushort_innerstructurehelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint16_t_InnerStructureHelper_unbounded", type_ids_var_map_ushort_innerstructurehelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_innerstructurehelper)
            {
                return_code_var_map_ushort_innerstructurehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerStructureHelper", type_ids_var_map_ushort_innerstructurehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_innerstructurehelper)
                {
                ::register_InnerStructureHelper_type_identifier(type_ids_var_map_ushort_innerstructurehelper);
                }
                bool element_identifier_anonymous_map_uint16_t_InnerStructureHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint16_t_InnerStructureHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_innerstructurehelper, element_identifier_anonymous_map_uint16_t_InnerStructureHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint16_t_InnerStructureHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_InnerStructureHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ushort_innerstructurehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_ushort_innerstructurehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_innerstructurehelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint16_t_InnerStructureHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint16_t_InnerStructureHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_innerstructurehelper, key_identifier_anonymous_map_uint16_t_InnerStructureHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint16_t_InnerStructureHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_InnerStructureHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint16_t_InnerStructureHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint16_t_InnerStructureHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerStructureHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint16_t_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerStructureHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint16_t_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerStructureHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint16_t_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerStructureHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint16_t_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerStructureHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint16_t_InnerStructureHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerStructureHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerStructureHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint16_t_InnerStructureHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerStructureHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerStructureHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint16_t_InnerStructureHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint16_t_InnerStructureHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint16_t_InnerStructureHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint16_t_InnerStructureHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint16_t_InnerStructureHelper_unbounded, element_flags_anonymous_map_uint16_t_InnerStructureHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint16_t_InnerStructureHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint16_t_InnerStructureHelper_unbounded), key_flags_anonymous_map_uint16_t_InnerStructureHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint16_t_InnerStructureHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint16_t_InnerStructureHelper_unbounded", type_ids_var_map_ushort_innerstructurehelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint16_t_InnerStructureHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ushort_innerstructurehelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ushort_innerstructurehelper = 0x00000000;
            bool common_var_map_ushort_innerstructurehelper_ec {false};
            CommonStructMember common_var_map_ushort_innerstructurehelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_ushort_innerstructurehelper, member_flags_var_map_ushort_innerstructurehelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_innerstructurehelper, common_var_map_ushort_innerstructurehelper_ec))};
            if (!common_var_map_ushort_innerstructurehelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ushort_innerstructurehelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ushort_innerstructurehelper = "var_map_ushort_innerstructurehelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ushort_innerstructurehelper;
            ann_custom_MapUShortInnerStructureHelper.reset();
            CompleteMemberDetail detail_var_map_ushort_innerstructurehelper = TypeObjectUtils::build_complete_member_detail(name_var_map_ushort_innerstructurehelper, member_ann_builtin_var_map_ushort_innerstructurehelper, ann_custom_MapUShortInnerStructureHelper);
            CompleteStructMember member_var_map_ushort_innerstructurehelper = TypeObjectUtils::build_complete_struct_member(common_var_map_ushort_innerstructurehelper, detail_var_map_ushort_innerstructurehelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapUShortInnerStructureHelper, member_var_map_ushort_innerstructurehelper);
        }
        CompleteStructType struct_type_MapUShortInnerStructureHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapUShortInnerStructureHelper, header_MapUShortInnerStructureHelper, member_seq_MapUShortInnerStructureHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapUShortInnerStructureHelper, type_name_MapUShortInnerStructureHelper.to_string(), type_ids_MapUShortInnerStructureHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapUShortInnerStructureHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapUShortInnerBitsetHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapUShortInnerBitsetHelper)
{

    ReturnCode_t return_code_MapUShortInnerBitsetHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapUShortInnerBitsetHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapUShortInnerBitsetHelper", type_ids_MapUShortInnerBitsetHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapUShortInnerBitsetHelper)
    {
        StructTypeFlag struct_flags_MapUShortInnerBitsetHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapUShortInnerBitsetHelper = "MapUShortInnerBitsetHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapUShortInnerBitsetHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapUShortInnerBitsetHelper;
        CompleteTypeDetail detail_MapUShortInnerBitsetHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapUShortInnerBitsetHelper, ann_custom_MapUShortInnerBitsetHelper, type_name_MapUShortInnerBitsetHelper.to_string());
        CompleteStructHeader header_MapUShortInnerBitsetHelper;
        header_MapUShortInnerBitsetHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapUShortInnerBitsetHelper);
        CompleteStructMemberSeq member_seq_MapUShortInnerBitsetHelper;
        {
            TypeIdentifierPair type_ids_var_map_ushort_innerbitsethelper;
            ReturnCode_t return_code_var_map_ushort_innerbitsethelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ushort_innerbitsethelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint16_t_InnerBitsetHelper_unbounded", type_ids_var_map_ushort_innerbitsethelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_innerbitsethelper)
            {
                return_code_var_map_ushort_innerbitsethelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerBitsetHelper", type_ids_var_map_ushort_innerbitsethelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_innerbitsethelper)
                {
                ::register_InnerBitsetHelper_type_identifier(type_ids_var_map_ushort_innerbitsethelper);
                }
                bool element_identifier_anonymous_map_uint16_t_InnerBitsetHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint16_t_InnerBitsetHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_innerbitsethelper, element_identifier_anonymous_map_uint16_t_InnerBitsetHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint16_t_InnerBitsetHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_InnerBitsetHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ushort_innerbitsethelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_ushort_innerbitsethelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ushort_innerbitsethelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint16_t_InnerBitsetHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint16_t_InnerBitsetHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_innerbitsethelper, key_identifier_anonymous_map_uint16_t_InnerBitsetHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint16_t_InnerBitsetHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint16_t_InnerBitsetHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint16_t_InnerBitsetHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint16_t_InnerBitsetHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerBitsetHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint16_t_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerBitsetHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint16_t_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerBitsetHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint16_t_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerBitsetHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint16_t_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerBitsetHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint16_t_InnerBitsetHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerBitsetHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerBitsetHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint16_t_InnerBitsetHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerBitsetHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint16_t_InnerBitsetHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint16_t_InnerBitsetHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint16_t_InnerBitsetHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint16_t_InnerBitsetHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint16_t_InnerBitsetHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint16_t_InnerBitsetHelper_unbounded, element_flags_anonymous_map_uint16_t_InnerBitsetHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint16_t_InnerBitsetHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint16_t_InnerBitsetHelper_unbounded), key_flags_anonymous_map_uint16_t_InnerBitsetHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint16_t_InnerBitsetHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint16_t_InnerBitsetHelper_unbounded", type_ids_var_map_ushort_innerbitsethelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint16_t_InnerBitsetHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ushort_innerbitsethelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ushort_innerbitsethelper = 0x00000000;
            bool common_var_map_ushort_innerbitsethelper_ec {false};
            CommonStructMember common_var_map_ushort_innerbitsethelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_ushort_innerbitsethelper, member_flags_var_map_ushort_innerbitsethelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ushort_innerbitsethelper, common_var_map_ushort_innerbitsethelper_ec))};
            if (!common_var_map_ushort_innerbitsethelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ushort_innerbitsethelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ushort_innerbitsethelper = "var_map_ushort_innerbitsethelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ushort_innerbitsethelper;
            ann_custom_MapUShortInnerBitsetHelper.reset();
            CompleteMemberDetail detail_var_map_ushort_innerbitsethelper = TypeObjectUtils::build_complete_member_detail(name_var_map_ushort_innerbitsethelper, member_ann_builtin_var_map_ushort_innerbitsethelper, ann_custom_MapUShortInnerBitsetHelper);
            CompleteStructMember member_var_map_ushort_innerbitsethelper = TypeObjectUtils::build_complete_struct_member(common_var_map_ushort_innerbitsethelper, detail_var_map_ushort_innerbitsethelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapUShortInnerBitsetHelper, member_var_map_ushort_innerbitsethelper);
        }
        CompleteStructType struct_type_MapUShortInnerBitsetHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapUShortInnerBitsetHelper, header_MapUShortInnerBitsetHelper, member_seq_MapUShortInnerBitsetHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapUShortInnerBitsetHelper, type_name_MapUShortInnerBitsetHelper.to_string(), type_ids_MapUShortInnerBitsetHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapUShortInnerBitsetHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongShort_type_identifier(
        TypeIdentifierPair& type_ids_MapLongShort)
{

    ReturnCode_t return_code_MapLongShort {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongShort =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongShort", type_ids_MapLongShort);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongShort)
    {
        StructTypeFlag struct_flags_MapLongShort = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongShort = "MapLongShort";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongShort;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongShort;
        CompleteTypeDetail detail_MapLongShort = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongShort, ann_custom_MapLongShort, type_name_MapLongShort.to_string());
        CompleteStructHeader header_MapLongShort;
        header_MapLongShort = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongShort);
        CompleteStructMemberSeq member_seq_MapLongShort;
        {
            TypeIdentifierPair type_ids_var_map_long_short;
            ReturnCode_t return_code_var_map_long_short {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_long_short =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_int16_t_unbounded", type_ids_var_map_long_short);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_short)
            {
                return_code_var_map_long_short =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_long_short);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_short)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int32_t_int16_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int32_t_int16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_short, element_identifier_anonymous_map_int32_t_int16_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_int32_t_int16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_int16_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_long_short =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_long_short);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_short)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int32_t_int16_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int32_t_int16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_short, key_identifier_anonymous_map_int32_t_int16_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_int32_t_int16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_int16_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_int16_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_int16_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_int16_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int16_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int16_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int16_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int16_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_int16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_int16_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_int16_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_int16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_int16_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_int16_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int32_t_int16_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_int16_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_int16_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_int16_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_int16_t_unbounded, element_flags_anonymous_map_int32_t_int16_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_int16_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_int16_t_unbounded), key_flags_anonymous_map_int32_t_int16_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_int16_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_int16_t_unbounded", type_ids_var_map_long_short))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_int16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_long_short = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_long_short = 0x00000000;
            bool common_var_map_long_short_ec {false};
            CommonStructMember common_var_map_long_short {TypeObjectUtils::build_common_struct_member(member_id_var_map_long_short, member_flags_var_map_long_short, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_short, common_var_map_long_short_ec))};
            if (!common_var_map_long_short_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_long_short member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_long_short = "var_map_long_short";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_long_short;
            ann_custom_MapLongShort.reset();
            CompleteMemberDetail detail_var_map_long_short = TypeObjectUtils::build_complete_member_detail(name_var_map_long_short, member_ann_builtin_var_map_long_short, ann_custom_MapLongShort);
            CompleteStructMember member_var_map_long_short = TypeObjectUtils::build_complete_struct_member(common_var_map_long_short, detail_var_map_long_short);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongShort, member_var_map_long_short);
        }
        CompleteStructType struct_type_MapLongShort = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongShort, header_MapLongShort, member_seq_MapLongShort);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongShort, type_name_MapLongShort.to_string(), type_ids_MapLongShort))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongShort already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongUShort_type_identifier(
        TypeIdentifierPair& type_ids_MapLongUShort)
{

    ReturnCode_t return_code_MapLongUShort {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongUShort =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongUShort", type_ids_MapLongUShort);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongUShort)
    {
        StructTypeFlag struct_flags_MapLongUShort = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongUShort = "MapLongUShort";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongUShort;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongUShort;
        CompleteTypeDetail detail_MapLongUShort = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongUShort, ann_custom_MapLongUShort, type_name_MapLongUShort.to_string());
        CompleteStructHeader header_MapLongUShort;
        header_MapLongUShort = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongUShort);
        CompleteStructMemberSeq member_seq_MapLongUShort;
        {
            TypeIdentifierPair type_ids_var_map_long_ushort;
            ReturnCode_t return_code_var_map_long_ushort {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_long_ushort =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_uint16_t_unbounded", type_ids_var_map_long_ushort);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_ushort)
            {
                return_code_var_map_long_ushort =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_long_ushort);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_ushort)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int32_t_uint16_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int32_t_uint16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_ushort, element_identifier_anonymous_map_int32_t_uint16_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_int32_t_uint16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_uint16_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_long_ushort =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_long_ushort);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_ushort)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int32_t_uint16_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int32_t_uint16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_ushort, key_identifier_anonymous_map_int32_t_uint16_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_int32_t_uint16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_uint16_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_uint16_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_uint16_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_uint16_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_uint16_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_uint16_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_uint16_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_uint16_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_uint16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_uint16_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_uint16_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_uint16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_uint16_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_uint16_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int32_t_uint16_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_uint16_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_uint16_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_uint16_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_uint16_t_unbounded, element_flags_anonymous_map_int32_t_uint16_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_uint16_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_uint16_t_unbounded), key_flags_anonymous_map_int32_t_uint16_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_uint16_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_uint16_t_unbounded", type_ids_var_map_long_ushort))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_uint16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_long_ushort = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_long_ushort = 0x00000000;
            bool common_var_map_long_ushort_ec {false};
            CommonStructMember common_var_map_long_ushort {TypeObjectUtils::build_common_struct_member(member_id_var_map_long_ushort, member_flags_var_map_long_ushort, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_ushort, common_var_map_long_ushort_ec))};
            if (!common_var_map_long_ushort_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_long_ushort member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_long_ushort = "var_map_long_ushort";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_long_ushort;
            ann_custom_MapLongUShort.reset();
            CompleteMemberDetail detail_var_map_long_ushort = TypeObjectUtils::build_complete_member_detail(name_var_map_long_ushort, member_ann_builtin_var_map_long_ushort, ann_custom_MapLongUShort);
            CompleteStructMember member_var_map_long_ushort = TypeObjectUtils::build_complete_struct_member(common_var_map_long_ushort, detail_var_map_long_ushort);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongUShort, member_var_map_long_ushort);
        }
        CompleteStructType struct_type_MapLongUShort = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongUShort, header_MapLongUShort, member_seq_MapLongUShort);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongUShort, type_name_MapLongUShort.to_string(), type_ids_MapLongUShort))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongUShort already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongLong_type_identifier(
        TypeIdentifierPair& type_ids_MapLongLong)
{

    ReturnCode_t return_code_MapLongLong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongLong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongLong", type_ids_MapLongLong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongLong)
    {
        StructTypeFlag struct_flags_MapLongLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongLong = "MapLongLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongLong;
        CompleteTypeDetail detail_MapLongLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongLong, ann_custom_MapLongLong, type_name_MapLongLong.to_string());
        CompleteStructHeader header_MapLongLong;
        header_MapLongLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongLong);
        CompleteStructMemberSeq member_seq_MapLongLong;
        {
            TypeIdentifierPair type_ids_var_map_long_long;
            ReturnCode_t return_code_var_map_long_long {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_long_long =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_int32_t_unbounded", type_ids_var_map_long_long);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_long)
            {
                return_code_var_map_long_long =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_long_long);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_long)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int32_t_int32_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int32_t_int32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_long, element_identifier_anonymous_map_int32_t_int32_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_int32_t_int32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_int32_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_long_long =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_long_long);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_long)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int32_t_int32_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int32_t_int32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_long, key_identifier_anonymous_map_int32_t_int32_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_int32_t_int32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_int32_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_int32_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_int32_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_int32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int32_t_int32_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_int32_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_int32_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_int32_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_int32_t_unbounded, element_flags_anonymous_map_int32_t_int32_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_int32_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_int32_t_unbounded), key_flags_anonymous_map_int32_t_int32_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_int32_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_int32_t_unbounded", type_ids_var_map_long_long))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_int32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_long_long = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_long_long = 0x00000000;
            bool common_var_map_long_long_ec {false};
            CommonStructMember common_var_map_long_long {TypeObjectUtils::build_common_struct_member(member_id_var_map_long_long, member_flags_var_map_long_long, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_long, common_var_map_long_long_ec))};
            if (!common_var_map_long_long_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_long_long member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_long_long = "var_map_long_long";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_long_long;
            ann_custom_MapLongLong.reset();
            CompleteMemberDetail detail_var_map_long_long = TypeObjectUtils::build_complete_member_detail(name_var_map_long_long, member_ann_builtin_var_map_long_long, ann_custom_MapLongLong);
            CompleteStructMember member_var_map_long_long = TypeObjectUtils::build_complete_struct_member(common_var_map_long_long, detail_var_map_long_long);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongLong, member_var_map_long_long);
        }
        CompleteStructType struct_type_MapLongLong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongLong, header_MapLongLong, member_seq_MapLongLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongLong, type_name_MapLongLong.to_string(), type_ids_MapLongLong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongLong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongULong_type_identifier(
        TypeIdentifierPair& type_ids_MapLongULong)
{

    ReturnCode_t return_code_MapLongULong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongULong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongULong", type_ids_MapLongULong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongULong)
    {
        StructTypeFlag struct_flags_MapLongULong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongULong = "MapLongULong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongULong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongULong;
        CompleteTypeDetail detail_MapLongULong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongULong, ann_custom_MapLongULong, type_name_MapLongULong.to_string());
        CompleteStructHeader header_MapLongULong;
        header_MapLongULong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongULong);
        CompleteStructMemberSeq member_seq_MapLongULong;
        {
            TypeIdentifierPair type_ids_var_map_long_ulong;
            ReturnCode_t return_code_var_map_long_ulong {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_long_ulong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_uint32_t_unbounded", type_ids_var_map_long_ulong);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_ulong)
            {
                return_code_var_map_long_ulong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_long_ulong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_ulong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int32_t_uint32_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int32_t_uint32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_ulong, element_identifier_anonymous_map_int32_t_uint32_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_int32_t_uint32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_uint32_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_long_ulong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_long_ulong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_ulong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int32_t_uint32_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int32_t_uint32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_ulong, key_identifier_anonymous_map_int32_t_uint32_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_int32_t_uint32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_uint32_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_uint32_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_uint32_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_uint32_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_uint32_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_uint32_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_uint32_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_uint32_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_uint32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_uint32_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_uint32_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_uint32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_uint32_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_uint32_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int32_t_uint32_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_uint32_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_uint32_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_uint32_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_uint32_t_unbounded, element_flags_anonymous_map_int32_t_uint32_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_uint32_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_uint32_t_unbounded), key_flags_anonymous_map_int32_t_uint32_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_uint32_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_uint32_t_unbounded", type_ids_var_map_long_ulong))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_uint32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_long_ulong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_long_ulong = 0x00000000;
            bool common_var_map_long_ulong_ec {false};
            CommonStructMember common_var_map_long_ulong {TypeObjectUtils::build_common_struct_member(member_id_var_map_long_ulong, member_flags_var_map_long_ulong, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_ulong, common_var_map_long_ulong_ec))};
            if (!common_var_map_long_ulong_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_long_ulong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_long_ulong = "var_map_long_ulong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_long_ulong;
            ann_custom_MapLongULong.reset();
            CompleteMemberDetail detail_var_map_long_ulong = TypeObjectUtils::build_complete_member_detail(name_var_map_long_ulong, member_ann_builtin_var_map_long_ulong, ann_custom_MapLongULong);
            CompleteStructMember member_var_map_long_ulong = TypeObjectUtils::build_complete_struct_member(common_var_map_long_ulong, detail_var_map_long_ulong);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongULong, member_var_map_long_ulong);
        }
        CompleteStructType struct_type_MapLongULong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongULong, header_MapLongULong, member_seq_MapLongULong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongULong, type_name_MapLongULong.to_string(), type_ids_MapLongULong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongULong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongKeyLongLongValue_type_identifier(
        TypeIdentifierPair& type_ids_MapLongKeyLongLongValue)
{

    ReturnCode_t return_code_MapLongKeyLongLongValue {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongKeyLongLongValue =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongKeyLongLongValue", type_ids_MapLongKeyLongLongValue);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongKeyLongLongValue)
    {
        StructTypeFlag struct_flags_MapLongKeyLongLongValue = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongKeyLongLongValue = "MapLongKeyLongLongValue";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongKeyLongLongValue;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongKeyLongLongValue;
        CompleteTypeDetail detail_MapLongKeyLongLongValue = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongKeyLongLongValue, ann_custom_MapLongKeyLongLongValue, type_name_MapLongKeyLongLongValue.to_string());
        CompleteStructHeader header_MapLongKeyLongLongValue;
        header_MapLongKeyLongLongValue = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongKeyLongLongValue);
        CompleteStructMemberSeq member_seq_MapLongKeyLongLongValue;
        {
            TypeIdentifierPair type_ids_var_map_long_longlong;
            ReturnCode_t return_code_var_map_long_longlong {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_long_longlong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_int64_t_unbounded", type_ids_var_map_long_longlong);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_longlong)
            {
                return_code_var_map_long_longlong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_long_longlong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_longlong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int32_t_int64_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int32_t_int64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_longlong, element_identifier_anonymous_map_int32_t_int64_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_int32_t_int64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_int64_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_long_longlong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_long_longlong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_longlong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int32_t_int64_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int32_t_int64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_longlong, key_identifier_anonymous_map_int32_t_int64_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_int32_t_int64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_int64_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_int64_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_int64_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_int64_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int64_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int64_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int64_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int64_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_int64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_int64_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_int64_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_int64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_int64_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_int64_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int32_t_int64_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_int64_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_int64_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_int64_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_int64_t_unbounded, element_flags_anonymous_map_int32_t_int64_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_int64_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_int64_t_unbounded), key_flags_anonymous_map_int32_t_int64_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_int64_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_int64_t_unbounded", type_ids_var_map_long_longlong))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_int64_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_long_longlong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_long_longlong = 0x00000000;
            bool common_var_map_long_longlong_ec {false};
            CommonStructMember common_var_map_long_longlong {TypeObjectUtils::build_common_struct_member(member_id_var_map_long_longlong, member_flags_var_map_long_longlong, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_longlong, common_var_map_long_longlong_ec))};
            if (!common_var_map_long_longlong_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_long_longlong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_long_longlong = "var_map_long_longlong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_long_longlong;
            ann_custom_MapLongKeyLongLongValue.reset();
            CompleteMemberDetail detail_var_map_long_longlong = TypeObjectUtils::build_complete_member_detail(name_var_map_long_longlong, member_ann_builtin_var_map_long_longlong, ann_custom_MapLongKeyLongLongValue);
            CompleteStructMember member_var_map_long_longlong = TypeObjectUtils::build_complete_struct_member(common_var_map_long_longlong, detail_var_map_long_longlong);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongKeyLongLongValue, member_var_map_long_longlong);
        }
        CompleteStructType struct_type_MapLongKeyLongLongValue = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongKeyLongLongValue, header_MapLongKeyLongLongValue, member_seq_MapLongKeyLongLongValue);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongKeyLongLongValue, type_name_MapLongKeyLongLongValue.to_string(), type_ids_MapLongKeyLongLongValue))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongKeyLongLongValue already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongULongLong_type_identifier(
        TypeIdentifierPair& type_ids_MapLongULongLong)
{

    ReturnCode_t return_code_MapLongULongLong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongULongLong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongULongLong", type_ids_MapLongULongLong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongULongLong)
    {
        StructTypeFlag struct_flags_MapLongULongLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongULongLong = "MapLongULongLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongULongLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongULongLong;
        CompleteTypeDetail detail_MapLongULongLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongULongLong, ann_custom_MapLongULongLong, type_name_MapLongULongLong.to_string());
        CompleteStructHeader header_MapLongULongLong;
        header_MapLongULongLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongULongLong);
        CompleteStructMemberSeq member_seq_MapLongULongLong;
        {
            TypeIdentifierPair type_ids_var_map_long_ulonglong;
            ReturnCode_t return_code_var_map_long_ulonglong {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_long_ulonglong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_uint64_t_unbounded", type_ids_var_map_long_ulonglong);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_ulonglong)
            {
                return_code_var_map_long_ulonglong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_long_ulonglong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_ulonglong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int32_t_uint64_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int32_t_uint64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_ulonglong, element_identifier_anonymous_map_int32_t_uint64_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_int32_t_uint64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_uint64_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_long_ulonglong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_long_ulonglong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_ulonglong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int32_t_uint64_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int32_t_uint64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_ulonglong, key_identifier_anonymous_map_int32_t_uint64_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_int32_t_uint64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_uint64_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_uint64_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_uint64_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_uint64_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_uint64_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_uint64_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_uint64_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_uint64_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_uint64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_uint64_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_uint64_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_uint64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_uint64_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_uint64_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int32_t_uint64_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_uint64_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_uint64_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_uint64_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_uint64_t_unbounded, element_flags_anonymous_map_int32_t_uint64_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_uint64_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_uint64_t_unbounded), key_flags_anonymous_map_int32_t_uint64_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_uint64_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_uint64_t_unbounded", type_ids_var_map_long_ulonglong))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_uint64_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_long_ulonglong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_long_ulonglong = 0x00000000;
            bool common_var_map_long_ulonglong_ec {false};
            CommonStructMember common_var_map_long_ulonglong {TypeObjectUtils::build_common_struct_member(member_id_var_map_long_ulonglong, member_flags_var_map_long_ulonglong, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_ulonglong, common_var_map_long_ulonglong_ec))};
            if (!common_var_map_long_ulonglong_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_long_ulonglong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_long_ulonglong = "var_map_long_ulonglong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_long_ulonglong;
            ann_custom_MapLongULongLong.reset();
            CompleteMemberDetail detail_var_map_long_ulonglong = TypeObjectUtils::build_complete_member_detail(name_var_map_long_ulonglong, member_ann_builtin_var_map_long_ulonglong, ann_custom_MapLongULongLong);
            CompleteStructMember member_var_map_long_ulonglong = TypeObjectUtils::build_complete_struct_member(common_var_map_long_ulonglong, detail_var_map_long_ulonglong);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongULongLong, member_var_map_long_ulonglong);
        }
        CompleteStructType struct_type_MapLongULongLong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongULongLong, header_MapLongULongLong, member_seq_MapLongULongLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongULongLong, type_name_MapLongULongLong.to_string(), type_ids_MapLongULongLong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongULongLong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongFloat_type_identifier(
        TypeIdentifierPair& type_ids_MapLongFloat)
{

    ReturnCode_t return_code_MapLongFloat {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongFloat =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongFloat", type_ids_MapLongFloat);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongFloat)
    {
        StructTypeFlag struct_flags_MapLongFloat = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongFloat = "MapLongFloat";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongFloat;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongFloat;
        CompleteTypeDetail detail_MapLongFloat = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongFloat, ann_custom_MapLongFloat, type_name_MapLongFloat.to_string());
        CompleteStructHeader header_MapLongFloat;
        header_MapLongFloat = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongFloat);
        CompleteStructMemberSeq member_seq_MapLongFloat;
        {
            TypeIdentifierPair type_ids_var_map_long_float;
            ReturnCode_t return_code_var_map_long_float {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_long_float =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_float_unbounded", type_ids_var_map_long_float);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_float)
            {
                return_code_var_map_long_float =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_float", type_ids_var_map_long_float);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_float)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int32_t_float_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int32_t_float_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_float, element_identifier_anonymous_map_int32_t_float_unbounded_ec))};
                if (!element_identifier_anonymous_map_int32_t_float_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_float_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_long_float =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_long_float);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_float)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int32_t_float_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int32_t_float_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_float, key_identifier_anonymous_map_int32_t_float_unbounded_ec))};
                if (!key_identifier_anonymous_map_int32_t_float_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_float_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_float_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_float_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_float_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_float_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_float_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_float_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_float_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_float_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_float_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_float_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_float_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_float_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_float_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int32_t_float_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_float_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_float_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_float_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_float_unbounded, element_flags_anonymous_map_int32_t_float_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_float_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_float_unbounded), key_flags_anonymous_map_int32_t_float_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_float_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_float_unbounded", type_ids_var_map_long_float))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_float_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_long_float = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_long_float = 0x00000000;
            bool common_var_map_long_float_ec {false};
            CommonStructMember common_var_map_long_float {TypeObjectUtils::build_common_struct_member(member_id_var_map_long_float, member_flags_var_map_long_float, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_float, common_var_map_long_float_ec))};
            if (!common_var_map_long_float_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_long_float member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_long_float = "var_map_long_float";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_long_float;
            ann_custom_MapLongFloat.reset();
            CompleteMemberDetail detail_var_map_long_float = TypeObjectUtils::build_complete_member_detail(name_var_map_long_float, member_ann_builtin_var_map_long_float, ann_custom_MapLongFloat);
            CompleteStructMember member_var_map_long_float = TypeObjectUtils::build_complete_struct_member(common_var_map_long_float, detail_var_map_long_float);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongFloat, member_var_map_long_float);
        }
        CompleteStructType struct_type_MapLongFloat = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongFloat, header_MapLongFloat, member_seq_MapLongFloat);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongFloat, type_name_MapLongFloat.to_string(), type_ids_MapLongFloat))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongFloat already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongDouble_type_identifier(
        TypeIdentifierPair& type_ids_MapLongDouble)
{

    ReturnCode_t return_code_MapLongDouble {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongDouble =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongDouble", type_ids_MapLongDouble);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongDouble)
    {
        StructTypeFlag struct_flags_MapLongDouble = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongDouble = "MapLongDouble";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongDouble;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongDouble;
        CompleteTypeDetail detail_MapLongDouble = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongDouble, ann_custom_MapLongDouble, type_name_MapLongDouble.to_string());
        CompleteStructHeader header_MapLongDouble;
        header_MapLongDouble = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongDouble);
        CompleteStructMemberSeq member_seq_MapLongDouble;
        {
            TypeIdentifierPair type_ids_var_map_long_double;
            ReturnCode_t return_code_var_map_long_double {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_long_double =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_double_unbounded", type_ids_var_map_long_double);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_double)
            {
                return_code_var_map_long_double =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_double", type_ids_var_map_long_double);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_double)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int32_t_double_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int32_t_double_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_double, element_identifier_anonymous_map_int32_t_double_unbounded_ec))};
                if (!element_identifier_anonymous_map_int32_t_double_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_double_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_long_double =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_long_double);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_double)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int32_t_double_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int32_t_double_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_double, key_identifier_anonymous_map_int32_t_double_unbounded_ec))};
                if (!key_identifier_anonymous_map_int32_t_double_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_double_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_double_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_double_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_double_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_double_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_double_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_double_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_double_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_double_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_double_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_double_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_double_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_double_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_double_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int32_t_double_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_double_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_double_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_double_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_double_unbounded, element_flags_anonymous_map_int32_t_double_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_double_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_double_unbounded), key_flags_anonymous_map_int32_t_double_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_double_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_double_unbounded", type_ids_var_map_long_double))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_double_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_long_double = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_long_double = 0x00000000;
            bool common_var_map_long_double_ec {false};
            CommonStructMember common_var_map_long_double {TypeObjectUtils::build_common_struct_member(member_id_var_map_long_double, member_flags_var_map_long_double, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_double, common_var_map_long_double_ec))};
            if (!common_var_map_long_double_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_long_double member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_long_double = "var_map_long_double";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_long_double;
            ann_custom_MapLongDouble.reset();
            CompleteMemberDetail detail_var_map_long_double = TypeObjectUtils::build_complete_member_detail(name_var_map_long_double, member_ann_builtin_var_map_long_double, ann_custom_MapLongDouble);
            CompleteStructMember member_var_map_long_double = TypeObjectUtils::build_complete_struct_member(common_var_map_long_double, detail_var_map_long_double);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongDouble, member_var_map_long_double);
        }
        CompleteStructType struct_type_MapLongDouble = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongDouble, header_MapLongDouble, member_seq_MapLongDouble);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongDouble, type_name_MapLongDouble.to_string(), type_ids_MapLongDouble))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongDouble already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongKeyLongDoubleValue_type_identifier(
        TypeIdentifierPair& type_ids_MapLongKeyLongDoubleValue)
{

    ReturnCode_t return_code_MapLongKeyLongDoubleValue {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongKeyLongDoubleValue =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongKeyLongDoubleValue", type_ids_MapLongKeyLongDoubleValue);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongKeyLongDoubleValue)
    {
        StructTypeFlag struct_flags_MapLongKeyLongDoubleValue = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongKeyLongDoubleValue = "MapLongKeyLongDoubleValue";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongKeyLongDoubleValue;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongKeyLongDoubleValue;
        CompleteTypeDetail detail_MapLongKeyLongDoubleValue = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongKeyLongDoubleValue, ann_custom_MapLongKeyLongDoubleValue, type_name_MapLongKeyLongDoubleValue.to_string());
        CompleteStructHeader header_MapLongKeyLongDoubleValue;
        header_MapLongKeyLongDoubleValue = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongKeyLongDoubleValue);
        CompleteStructMemberSeq member_seq_MapLongKeyLongDoubleValue;
        {
            TypeIdentifierPair type_ids_var_map_long_longdouble;
            ReturnCode_t return_code_var_map_long_longdouble {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_long_longdouble =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_longdouble_unbounded", type_ids_var_map_long_longdouble);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_longdouble)
            {
                return_code_var_map_long_longdouble =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_longdouble", type_ids_var_map_long_longdouble);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_longdouble)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int32_t_longdouble_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int32_t_longdouble_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_longdouble, element_identifier_anonymous_map_int32_t_longdouble_unbounded_ec))};
                if (!element_identifier_anonymous_map_int32_t_longdouble_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_longdouble_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_long_longdouble =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_long_longdouble);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_longdouble)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int32_t_longdouble_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int32_t_longdouble_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_longdouble, key_identifier_anonymous_map_int32_t_longdouble_unbounded_ec))};
                if (!key_identifier_anonymous_map_int32_t_longdouble_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_longdouble_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_longdouble_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_longdouble_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_longdouble_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_longdouble_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_longdouble_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_longdouble_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_longdouble_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_longdouble_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_longdouble_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_longdouble_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_longdouble_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_longdouble_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_longdouble_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int32_t_longdouble_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_longdouble_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_longdouble_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_longdouble_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_longdouble_unbounded, element_flags_anonymous_map_int32_t_longdouble_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_longdouble_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_longdouble_unbounded), key_flags_anonymous_map_int32_t_longdouble_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_longdouble_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_longdouble_unbounded", type_ids_var_map_long_longdouble))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_longdouble_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_long_longdouble = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_long_longdouble = 0x00000000;
            bool common_var_map_long_longdouble_ec {false};
            CommonStructMember common_var_map_long_longdouble {TypeObjectUtils::build_common_struct_member(member_id_var_map_long_longdouble, member_flags_var_map_long_longdouble, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_longdouble, common_var_map_long_longdouble_ec))};
            if (!common_var_map_long_longdouble_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_long_longdouble member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_long_longdouble = "var_map_long_longdouble";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_long_longdouble;
            ann_custom_MapLongKeyLongDoubleValue.reset();
            CompleteMemberDetail detail_var_map_long_longdouble = TypeObjectUtils::build_complete_member_detail(name_var_map_long_longdouble, member_ann_builtin_var_map_long_longdouble, ann_custom_MapLongKeyLongDoubleValue);
            CompleteStructMember member_var_map_long_longdouble = TypeObjectUtils::build_complete_struct_member(common_var_map_long_longdouble, detail_var_map_long_longdouble);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongKeyLongDoubleValue, member_var_map_long_longdouble);
        }
        CompleteStructType struct_type_MapLongKeyLongDoubleValue = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongKeyLongDoubleValue, header_MapLongKeyLongDoubleValue, member_seq_MapLongKeyLongDoubleValue);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongKeyLongDoubleValue, type_name_MapLongKeyLongDoubleValue.to_string(), type_ids_MapLongKeyLongDoubleValue))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongKeyLongDoubleValue already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongBoolean_type_identifier(
        TypeIdentifierPair& type_ids_MapLongBoolean)
{

    ReturnCode_t return_code_MapLongBoolean {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongBoolean =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongBoolean", type_ids_MapLongBoolean);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongBoolean)
    {
        StructTypeFlag struct_flags_MapLongBoolean = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongBoolean = "MapLongBoolean";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongBoolean;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongBoolean;
        CompleteTypeDetail detail_MapLongBoolean = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongBoolean, ann_custom_MapLongBoolean, type_name_MapLongBoolean.to_string());
        CompleteStructHeader header_MapLongBoolean;
        header_MapLongBoolean = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongBoolean);
        CompleteStructMemberSeq member_seq_MapLongBoolean;
        {
            TypeIdentifierPair type_ids_var_map_long_boolean;
            ReturnCode_t return_code_var_map_long_boolean {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_long_boolean =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_bool_unbounded", type_ids_var_map_long_boolean);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_boolean)
            {
                return_code_var_map_long_boolean =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_bool", type_ids_var_map_long_boolean);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_boolean)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int32_t_bool_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int32_t_bool_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_boolean, element_identifier_anonymous_map_int32_t_bool_unbounded_ec))};
                if (!element_identifier_anonymous_map_int32_t_bool_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_bool_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_long_boolean =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_long_boolean);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_boolean)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int32_t_bool_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int32_t_bool_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_boolean, key_identifier_anonymous_map_int32_t_bool_unbounded_ec))};
                if (!key_identifier_anonymous_map_int32_t_bool_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_bool_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_bool_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_bool_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_bool_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_bool_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_bool_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_bool_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_bool_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_bool_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_bool_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_bool_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_bool_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_bool_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_bool_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int32_t_bool_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_bool_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_bool_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_bool_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_bool_unbounded, element_flags_anonymous_map_int32_t_bool_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_bool_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_bool_unbounded), key_flags_anonymous_map_int32_t_bool_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_bool_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_bool_unbounded", type_ids_var_map_long_boolean))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_bool_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_long_boolean = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_long_boolean = 0x00000000;
            bool common_var_map_long_boolean_ec {false};
            CommonStructMember common_var_map_long_boolean {TypeObjectUtils::build_common_struct_member(member_id_var_map_long_boolean, member_flags_var_map_long_boolean, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_boolean, common_var_map_long_boolean_ec))};
            if (!common_var_map_long_boolean_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_long_boolean member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_long_boolean = "var_map_long_boolean";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_long_boolean;
            ann_custom_MapLongBoolean.reset();
            CompleteMemberDetail detail_var_map_long_boolean = TypeObjectUtils::build_complete_member_detail(name_var_map_long_boolean, member_ann_builtin_var_map_long_boolean, ann_custom_MapLongBoolean);
            CompleteStructMember member_var_map_long_boolean = TypeObjectUtils::build_complete_struct_member(common_var_map_long_boolean, detail_var_map_long_boolean);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongBoolean, member_var_map_long_boolean);
        }
        CompleteStructType struct_type_MapLongBoolean = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongBoolean, header_MapLongBoolean, member_seq_MapLongBoolean);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongBoolean, type_name_MapLongBoolean.to_string(), type_ids_MapLongBoolean))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongBoolean already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongOctet_type_identifier(
        TypeIdentifierPair& type_ids_MapLongOctet)
{

    ReturnCode_t return_code_MapLongOctet {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongOctet =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongOctet", type_ids_MapLongOctet);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongOctet)
    {
        StructTypeFlag struct_flags_MapLongOctet = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongOctet = "MapLongOctet";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongOctet;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongOctet;
        CompleteTypeDetail detail_MapLongOctet = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongOctet, ann_custom_MapLongOctet, type_name_MapLongOctet.to_string());
        CompleteStructHeader header_MapLongOctet;
        header_MapLongOctet = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongOctet);
        CompleteStructMemberSeq member_seq_MapLongOctet;
        {
            TypeIdentifierPair type_ids_var_map_long_octet;
            ReturnCode_t return_code_var_map_long_octet {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_long_octet =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_byte_unbounded", type_ids_var_map_long_octet);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_octet)
            {
                return_code_var_map_long_octet =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_byte", type_ids_var_map_long_octet);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_octet)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int32_t_byte_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int32_t_byte_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_octet, element_identifier_anonymous_map_int32_t_byte_unbounded_ec))};
                if (!element_identifier_anonymous_map_int32_t_byte_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_byte_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_long_octet =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_long_octet);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_octet)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int32_t_byte_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int32_t_byte_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_octet, key_identifier_anonymous_map_int32_t_byte_unbounded_ec))};
                if (!key_identifier_anonymous_map_int32_t_byte_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_byte_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_byte_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_byte_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_byte_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_byte_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_byte_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_byte_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_byte_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_byte_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_byte_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_byte_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_byte_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_byte_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_byte_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int32_t_byte_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_byte_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_byte_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_byte_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_byte_unbounded, element_flags_anonymous_map_int32_t_byte_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_byte_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_byte_unbounded), key_flags_anonymous_map_int32_t_byte_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_byte_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_byte_unbounded", type_ids_var_map_long_octet))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_byte_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_long_octet = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_long_octet = 0x00000000;
            bool common_var_map_long_octet_ec {false};
            CommonStructMember common_var_map_long_octet {TypeObjectUtils::build_common_struct_member(member_id_var_map_long_octet, member_flags_var_map_long_octet, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_octet, common_var_map_long_octet_ec))};
            if (!common_var_map_long_octet_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_long_octet member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_long_octet = "var_map_long_octet";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_long_octet;
            ann_custom_MapLongOctet.reset();
            CompleteMemberDetail detail_var_map_long_octet = TypeObjectUtils::build_complete_member_detail(name_var_map_long_octet, member_ann_builtin_var_map_long_octet, ann_custom_MapLongOctet);
            CompleteStructMember member_var_map_long_octet = TypeObjectUtils::build_complete_struct_member(common_var_map_long_octet, detail_var_map_long_octet);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongOctet, member_var_map_long_octet);
        }
        CompleteStructType struct_type_MapLongOctet = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongOctet, header_MapLongOctet, member_seq_MapLongOctet);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongOctet, type_name_MapLongOctet.to_string(), type_ids_MapLongOctet))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongOctet already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongChar_type_identifier(
        TypeIdentifierPair& type_ids_MapLongChar)
{

    ReturnCode_t return_code_MapLongChar {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongChar =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongChar", type_ids_MapLongChar);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongChar)
    {
        StructTypeFlag struct_flags_MapLongChar = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongChar = "MapLongChar";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongChar;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongChar;
        CompleteTypeDetail detail_MapLongChar = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongChar, ann_custom_MapLongChar, type_name_MapLongChar.to_string());
        CompleteStructHeader header_MapLongChar;
        header_MapLongChar = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongChar);
        CompleteStructMemberSeq member_seq_MapLongChar;
        {
            TypeIdentifierPair type_ids_var_map_long_char;
            ReturnCode_t return_code_var_map_long_char {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_long_char =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_char_unbounded", type_ids_var_map_long_char);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_char)
            {
                return_code_var_map_long_char =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_char", type_ids_var_map_long_char);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_char)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int32_t_char_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int32_t_char_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_char, element_identifier_anonymous_map_int32_t_char_unbounded_ec))};
                if (!element_identifier_anonymous_map_int32_t_char_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_char_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_long_char =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_long_char);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_char)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int32_t_char_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int32_t_char_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_char, key_identifier_anonymous_map_int32_t_char_unbounded_ec))};
                if (!key_identifier_anonymous_map_int32_t_char_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_char_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_char_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_char_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_char_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_char_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_char_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_char_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_char_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_char_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_char_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_char_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_char_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_char_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_char_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int32_t_char_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_char_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_char_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_char_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_char_unbounded, element_flags_anonymous_map_int32_t_char_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_char_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_char_unbounded), key_flags_anonymous_map_int32_t_char_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_char_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_char_unbounded", type_ids_var_map_long_char))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_char_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_long_char = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_long_char = 0x00000000;
            bool common_var_map_long_char_ec {false};
            CommonStructMember common_var_map_long_char {TypeObjectUtils::build_common_struct_member(member_id_var_map_long_char, member_flags_var_map_long_char, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_char, common_var_map_long_char_ec))};
            if (!common_var_map_long_char_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_long_char member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_long_char = "var_map_long_char";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_long_char;
            ann_custom_MapLongChar.reset();
            CompleteMemberDetail detail_var_map_long_char = TypeObjectUtils::build_complete_member_detail(name_var_map_long_char, member_ann_builtin_var_map_long_char, ann_custom_MapLongChar);
            CompleteStructMember member_var_map_long_char = TypeObjectUtils::build_complete_struct_member(common_var_map_long_char, detail_var_map_long_char);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongChar, member_var_map_long_char);
        }
        CompleteStructType struct_type_MapLongChar = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongChar, header_MapLongChar, member_seq_MapLongChar);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongChar, type_name_MapLongChar.to_string(), type_ids_MapLongChar))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongChar already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongWChar_type_identifier(
        TypeIdentifierPair& type_ids_MapLongWChar)
{

    ReturnCode_t return_code_MapLongWChar {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongWChar =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongWChar", type_ids_MapLongWChar);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongWChar)
    {
        StructTypeFlag struct_flags_MapLongWChar = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongWChar = "MapLongWChar";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongWChar;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongWChar;
        CompleteTypeDetail detail_MapLongWChar = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongWChar, ann_custom_MapLongWChar, type_name_MapLongWChar.to_string());
        CompleteStructHeader header_MapLongWChar;
        header_MapLongWChar = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongWChar);
        CompleteStructMemberSeq member_seq_MapLongWChar;
        {
            TypeIdentifierPair type_ids_var_map_long_wchar;
            ReturnCode_t return_code_var_map_long_wchar {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_long_wchar =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_wchar_t_unbounded", type_ids_var_map_long_wchar);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_wchar)
            {
                return_code_var_map_long_wchar =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_wchar_t", type_ids_var_map_long_wchar);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_wchar)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int32_t_wchar_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int32_t_wchar_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_wchar, element_identifier_anonymous_map_int32_t_wchar_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_int32_t_wchar_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_wchar_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_long_wchar =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_long_wchar);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_wchar)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int32_t_wchar_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int32_t_wchar_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_wchar, key_identifier_anonymous_map_int32_t_wchar_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_int32_t_wchar_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_wchar_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_wchar_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_wchar_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_wchar_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_wchar_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_wchar_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_wchar_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_wchar_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_wchar_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_wchar_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_wchar_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_wchar_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_wchar_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_wchar_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int32_t_wchar_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_wchar_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_wchar_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_wchar_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_wchar_t_unbounded, element_flags_anonymous_map_int32_t_wchar_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_wchar_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_wchar_t_unbounded), key_flags_anonymous_map_int32_t_wchar_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_wchar_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_wchar_t_unbounded", type_ids_var_map_long_wchar))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_wchar_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_long_wchar = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_long_wchar = 0x00000000;
            bool common_var_map_long_wchar_ec {false};
            CommonStructMember common_var_map_long_wchar {TypeObjectUtils::build_common_struct_member(member_id_var_map_long_wchar, member_flags_var_map_long_wchar, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_wchar, common_var_map_long_wchar_ec))};
            if (!common_var_map_long_wchar_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_long_wchar member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_long_wchar = "var_map_long_wchar";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_long_wchar;
            ann_custom_MapLongWChar.reset();
            CompleteMemberDetail detail_var_map_long_wchar = TypeObjectUtils::build_complete_member_detail(name_var_map_long_wchar, member_ann_builtin_var_map_long_wchar, ann_custom_MapLongWChar);
            CompleteStructMember member_var_map_long_wchar = TypeObjectUtils::build_complete_struct_member(common_var_map_long_wchar, detail_var_map_long_wchar);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongWChar, member_var_map_long_wchar);
        }
        CompleteStructType struct_type_MapLongWChar = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongWChar, header_MapLongWChar, member_seq_MapLongWChar);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongWChar, type_name_MapLongWChar.to_string(), type_ids_MapLongWChar))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongWChar already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongString_type_identifier(
        TypeIdentifierPair& type_ids_MapLongString)
{

    ReturnCode_t return_code_MapLongString {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongString =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongString", type_ids_MapLongString);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongString)
    {
        StructTypeFlag struct_flags_MapLongString = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongString = "MapLongString";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongString;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongString;
        CompleteTypeDetail detail_MapLongString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongString, ann_custom_MapLongString, type_name_MapLongString.to_string());
        CompleteStructHeader header_MapLongString;
        header_MapLongString = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongString);
        CompleteStructMemberSeq member_seq_MapLongString;
        {
            TypeIdentifierPair type_ids_var_map_long_string;
            ReturnCode_t return_code_var_map_long_string {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_long_string =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_anonymous_string_unbounded_unbounded", type_ids_var_map_long_string);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_string)
            {
                return_code_var_map_long_string =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_long_string);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_string)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_long_string))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_string, element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_unbounded_ec))};
                if (!element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_anonymous_string_unbounded_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_long_string =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_long_string);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_string)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int32_t_anonymous_string_unbounded_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int32_t_anonymous_string_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_string, key_identifier_anonymous_map_int32_t_anonymous_string_unbounded_unbounded_ec))};
                if (!key_identifier_anonymous_map_int32_t_anonymous_string_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_anonymous_string_unbounded_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_anonymous_string_unbounded_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_anonymous_string_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int32_t_anonymous_string_unbounded_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_anonymous_string_unbounded_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_anonymous_string_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_anonymous_string_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_anonymous_string_unbounded_unbounded, element_flags_anonymous_map_int32_t_anonymous_string_unbounded_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_anonymous_string_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_unbounded), key_flags_anonymous_map_int32_t_anonymous_string_unbounded_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_anonymous_string_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_anonymous_string_unbounded_unbounded", type_ids_var_map_long_string))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_anonymous_string_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_long_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_long_string = 0x00000000;
            bool common_var_map_long_string_ec {false};
            CommonStructMember common_var_map_long_string {TypeObjectUtils::build_common_struct_member(member_id_var_map_long_string, member_flags_var_map_long_string, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_string, common_var_map_long_string_ec))};
            if (!common_var_map_long_string_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_long_string member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_long_string = "var_map_long_string";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_long_string;
            ann_custom_MapLongString.reset();
            CompleteMemberDetail detail_var_map_long_string = TypeObjectUtils::build_complete_member_detail(name_var_map_long_string, member_ann_builtin_var_map_long_string, ann_custom_MapLongString);
            CompleteStructMember member_var_map_long_string = TypeObjectUtils::build_complete_struct_member(common_var_map_long_string, detail_var_map_long_string);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongString, member_var_map_long_string);
        }
        CompleteStructType struct_type_MapLongString = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongString, header_MapLongString, member_seq_MapLongString);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongString, type_name_MapLongString.to_string(), type_ids_MapLongString))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongString already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongWString_type_identifier(
        TypeIdentifierPair& type_ids_MapLongWString)
{

    ReturnCode_t return_code_MapLongWString {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongWString =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongWString", type_ids_MapLongWString);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongWString)
    {
        StructTypeFlag struct_flags_MapLongWString = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongWString = "MapLongWString";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongWString;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongWString;
        CompleteTypeDetail detail_MapLongWString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongWString, ann_custom_MapLongWString, type_name_MapLongWString.to_string());
        CompleteStructHeader header_MapLongWString;
        header_MapLongWString = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongWString);
        CompleteStructMemberSeq member_seq_MapLongWString;
        {
            TypeIdentifierPair type_ids_var_map_long_wstring;
            ReturnCode_t return_code_var_map_long_wstring {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_long_wstring =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded", type_ids_var_map_long_wstring);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_wstring)
            {
                return_code_var_map_long_wstring =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_long_wstring);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_wstring)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_long_wstring, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool element_identifier_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_wstring, element_identifier_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded_ec))};
                if (!element_identifier_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_long_wstring =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_long_wstring);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_wstring)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_wstring, key_identifier_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded_ec))};
                if (!key_identifier_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded, element_flags_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded), key_flags_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded", type_ids_var_map_long_wstring))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_anonymous_wstring_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_long_wstring = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_long_wstring = 0x00000000;
            bool common_var_map_long_wstring_ec {false};
            CommonStructMember common_var_map_long_wstring {TypeObjectUtils::build_common_struct_member(member_id_var_map_long_wstring, member_flags_var_map_long_wstring, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_wstring, common_var_map_long_wstring_ec))};
            if (!common_var_map_long_wstring_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_long_wstring member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_long_wstring = "var_map_long_wstring";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_long_wstring;
            ann_custom_MapLongWString.reset();
            CompleteMemberDetail detail_var_map_long_wstring = TypeObjectUtils::build_complete_member_detail(name_var_map_long_wstring, member_ann_builtin_var_map_long_wstring, ann_custom_MapLongWString);
            CompleteStructMember member_var_map_long_wstring = TypeObjectUtils::build_complete_struct_member(common_var_map_long_wstring, detail_var_map_long_wstring);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongWString, member_var_map_long_wstring);
        }
        CompleteStructType struct_type_MapLongWString = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongWString, header_MapLongWString, member_seq_MapLongWString);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongWString, type_name_MapLongWString.to_string(), type_ids_MapLongWString))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongWString already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongInnerAliasBoundedStringHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapLongInnerAliasBoundedStringHelper)
{

    ReturnCode_t return_code_MapLongInnerAliasBoundedStringHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongInnerAliasBoundedStringHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongInnerAliasBoundedStringHelper", type_ids_MapLongInnerAliasBoundedStringHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongInnerAliasBoundedStringHelper)
    {
        StructTypeFlag struct_flags_MapLongInnerAliasBoundedStringHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongInnerAliasBoundedStringHelper = "MapLongInnerAliasBoundedStringHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongInnerAliasBoundedStringHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongInnerAliasBoundedStringHelper;
        CompleteTypeDetail detail_MapLongInnerAliasBoundedStringHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongInnerAliasBoundedStringHelper, ann_custom_MapLongInnerAliasBoundedStringHelper, type_name_MapLongInnerAliasBoundedStringHelper.to_string());
        CompleteStructHeader header_MapLongInnerAliasBoundedStringHelper;
        header_MapLongInnerAliasBoundedStringHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongInnerAliasBoundedStringHelper);
        CompleteStructMemberSeq member_seq_MapLongInnerAliasBoundedStringHelper;
        {
            TypeIdentifierPair type_ids_var_map_long_inneraliasboundedstringhelper;
            ReturnCode_t return_code_var_map_long_inneraliasboundedstringhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_long_inneraliasboundedstringhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_anonymous_string_10_unbounded", type_ids_var_map_long_inneraliasboundedstringhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_inneraliasboundedstringhelper)
            {
                return_code_var_map_long_inneraliasboundedstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_long_inneraliasboundedstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_inneraliasboundedstringhelper)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_long_inneraliasboundedstringhelper);
                }
                bool element_identifier_anonymous_map_int32_t_anonymous_string_10_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int32_t_anonymous_string_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_inneraliasboundedstringhelper, element_identifier_anonymous_map_int32_t_anonymous_string_10_unbounded_ec))};
                if (!element_identifier_anonymous_map_int32_t_anonymous_string_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_anonymous_string_10_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_long_inneraliasboundedstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_long_inneraliasboundedstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_inneraliasboundedstringhelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int32_t_anonymous_string_10_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int32_t_anonymous_string_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_inneraliasboundedstringhelper, key_identifier_anonymous_map_int32_t_anonymous_string_10_unbounded_ec))};
                if (!key_identifier_anonymous_map_int32_t_anonymous_string_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_anonymous_string_10_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_anonymous_string_10_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_anonymous_string_10_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_10_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_10_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_10_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_10_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_10_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_anonymous_string_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_10_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_10_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_anonymous_string_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_10_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_10_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int32_t_anonymous_string_10_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_anonymous_string_10_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_anonymous_string_10_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_anonymous_string_10_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_anonymous_string_10_unbounded, element_flags_anonymous_map_int32_t_anonymous_string_10_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_anonymous_string_10_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_anonymous_string_10_unbounded), key_flags_anonymous_map_int32_t_anonymous_string_10_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_anonymous_string_10_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_anonymous_string_10_unbounded", type_ids_var_map_long_inneraliasboundedstringhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_anonymous_string_10_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_long_inneraliasboundedstringhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_long_inneraliasboundedstringhelper = 0x00000000;
            bool common_var_map_long_inneraliasboundedstringhelper_ec {false};
            CommonStructMember common_var_map_long_inneraliasboundedstringhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_long_inneraliasboundedstringhelper, member_flags_var_map_long_inneraliasboundedstringhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_inneraliasboundedstringhelper, common_var_map_long_inneraliasboundedstringhelper_ec))};
            if (!common_var_map_long_inneraliasboundedstringhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_long_inneraliasboundedstringhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_long_inneraliasboundedstringhelper = "var_map_long_inneraliasboundedstringhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_long_inneraliasboundedstringhelper;
            ann_custom_MapLongInnerAliasBoundedStringHelper.reset();
            CompleteMemberDetail detail_var_map_long_inneraliasboundedstringhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_long_inneraliasboundedstringhelper, member_ann_builtin_var_map_long_inneraliasboundedstringhelper, ann_custom_MapLongInnerAliasBoundedStringHelper);
            CompleteStructMember member_var_map_long_inneraliasboundedstringhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_long_inneraliasboundedstringhelper, detail_var_map_long_inneraliasboundedstringhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongInnerAliasBoundedStringHelper, member_var_map_long_inneraliasboundedstringhelper);
        }
        CompleteStructType struct_type_MapLongInnerAliasBoundedStringHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongInnerAliasBoundedStringHelper, header_MapLongInnerAliasBoundedStringHelper, member_seq_MapLongInnerAliasBoundedStringHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongInnerAliasBoundedStringHelper, type_name_MapLongInnerAliasBoundedStringHelper.to_string(), type_ids_MapLongInnerAliasBoundedStringHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongInnerAliasBoundedStringHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongInnerAliasBoundedWStringHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapLongInnerAliasBoundedWStringHelper)
{

    ReturnCode_t return_code_MapLongInnerAliasBoundedWStringHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongInnerAliasBoundedWStringHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongInnerAliasBoundedWStringHelper", type_ids_MapLongInnerAliasBoundedWStringHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongInnerAliasBoundedWStringHelper)
    {
        StructTypeFlag struct_flags_MapLongInnerAliasBoundedWStringHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongInnerAliasBoundedWStringHelper = "MapLongInnerAliasBoundedWStringHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongInnerAliasBoundedWStringHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongInnerAliasBoundedWStringHelper;
        CompleteTypeDetail detail_MapLongInnerAliasBoundedWStringHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongInnerAliasBoundedWStringHelper, ann_custom_MapLongInnerAliasBoundedWStringHelper, type_name_MapLongInnerAliasBoundedWStringHelper.to_string());
        CompleteStructHeader header_MapLongInnerAliasBoundedWStringHelper;
        header_MapLongInnerAliasBoundedWStringHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongInnerAliasBoundedWStringHelper);
        CompleteStructMemberSeq member_seq_MapLongInnerAliasBoundedWStringHelper;
        {
            TypeIdentifierPair type_ids_var_map_long_inneraliasboundedwstringhelper;
            ReturnCode_t return_code_var_map_long_inneraliasboundedwstringhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_long_inneraliasboundedwstringhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_anonymous_wstring_10_unbounded", type_ids_var_map_long_inneraliasboundedwstringhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_inneraliasboundedwstringhelper)
            {
                return_code_var_map_long_inneraliasboundedwstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_long_inneraliasboundedwstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_inneraliasboundedwstringhelper)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_long_inneraliasboundedwstringhelper);
                }
                bool element_identifier_anonymous_map_int32_t_anonymous_wstring_10_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int32_t_anonymous_wstring_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_inneraliasboundedwstringhelper, element_identifier_anonymous_map_int32_t_anonymous_wstring_10_unbounded_ec))};
                if (!element_identifier_anonymous_map_int32_t_anonymous_wstring_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_anonymous_wstring_10_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_long_inneraliasboundedwstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_long_inneraliasboundedwstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_inneraliasboundedwstringhelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int32_t_anonymous_wstring_10_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int32_t_anonymous_wstring_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_inneraliasboundedwstringhelper, key_identifier_anonymous_map_int32_t_anonymous_wstring_10_unbounded_ec))};
                if (!key_identifier_anonymous_map_int32_t_anonymous_wstring_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_anonymous_wstring_10_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_anonymous_wstring_10_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_anonymous_wstring_10_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_wstring_10_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_wstring_10_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_wstring_10_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_wstring_10_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_wstring_10_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_anonymous_wstring_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_wstring_10_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_wstring_10_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_anonymous_wstring_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_wstring_10_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_wstring_10_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int32_t_anonymous_wstring_10_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_anonymous_wstring_10_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_anonymous_wstring_10_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_anonymous_wstring_10_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_anonymous_wstring_10_unbounded, element_flags_anonymous_map_int32_t_anonymous_wstring_10_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_anonymous_wstring_10_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_anonymous_wstring_10_unbounded), key_flags_anonymous_map_int32_t_anonymous_wstring_10_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_anonymous_wstring_10_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_anonymous_wstring_10_unbounded", type_ids_var_map_long_inneraliasboundedwstringhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_anonymous_wstring_10_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_long_inneraliasboundedwstringhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_long_inneraliasboundedwstringhelper = 0x00000000;
            bool common_var_map_long_inneraliasboundedwstringhelper_ec {false};
            CommonStructMember common_var_map_long_inneraliasboundedwstringhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_long_inneraliasboundedwstringhelper, member_flags_var_map_long_inneraliasboundedwstringhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_inneraliasboundedwstringhelper, common_var_map_long_inneraliasboundedwstringhelper_ec))};
            if (!common_var_map_long_inneraliasboundedwstringhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_long_inneraliasboundedwstringhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_long_inneraliasboundedwstringhelper = "var_map_long_inneraliasboundedwstringhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_long_inneraliasboundedwstringhelper;
            ann_custom_MapLongInnerAliasBoundedWStringHelper.reset();
            CompleteMemberDetail detail_var_map_long_inneraliasboundedwstringhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_long_inneraliasboundedwstringhelper, member_ann_builtin_var_map_long_inneraliasboundedwstringhelper, ann_custom_MapLongInnerAliasBoundedWStringHelper);
            CompleteStructMember member_var_map_long_inneraliasboundedwstringhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_long_inneraliasboundedwstringhelper, detail_var_map_long_inneraliasboundedwstringhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongInnerAliasBoundedWStringHelper, member_var_map_long_inneraliasboundedwstringhelper);
        }
        CompleteStructType struct_type_MapLongInnerAliasBoundedWStringHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongInnerAliasBoundedWStringHelper, header_MapLongInnerAliasBoundedWStringHelper, member_seq_MapLongInnerAliasBoundedWStringHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongInnerAliasBoundedWStringHelper, type_name_MapLongInnerAliasBoundedWStringHelper.to_string(), type_ids_MapLongInnerAliasBoundedWStringHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongInnerAliasBoundedWStringHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongInnerEnumHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapLongInnerEnumHelper)
{

    ReturnCode_t return_code_MapLongInnerEnumHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongInnerEnumHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongInnerEnumHelper", type_ids_MapLongInnerEnumHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongInnerEnumHelper)
    {
        StructTypeFlag struct_flags_MapLongInnerEnumHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongInnerEnumHelper = "MapLongInnerEnumHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongInnerEnumHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongInnerEnumHelper;
        CompleteTypeDetail detail_MapLongInnerEnumHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongInnerEnumHelper, ann_custom_MapLongInnerEnumHelper, type_name_MapLongInnerEnumHelper.to_string());
        CompleteStructHeader header_MapLongInnerEnumHelper;
        header_MapLongInnerEnumHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongInnerEnumHelper);
        CompleteStructMemberSeq member_seq_MapLongInnerEnumHelper;
        {
            TypeIdentifierPair type_ids_var_map_long_innerenumhelper;
            ReturnCode_t return_code_var_map_long_innerenumhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_long_innerenumhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_InnerEnumHelper_unbounded", type_ids_var_map_long_innerenumhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_innerenumhelper)
            {
                return_code_var_map_long_innerenumhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerEnumHelper", type_ids_var_map_long_innerenumhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_innerenumhelper)
                {
                ::register_InnerEnumHelper_type_identifier(type_ids_var_map_long_innerenumhelper);
                }
                bool element_identifier_anonymous_map_int32_t_InnerEnumHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int32_t_InnerEnumHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_innerenumhelper, element_identifier_anonymous_map_int32_t_InnerEnumHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_int32_t_InnerEnumHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_InnerEnumHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_long_innerenumhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_long_innerenumhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_innerenumhelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int32_t_InnerEnumHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int32_t_InnerEnumHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_innerenumhelper, key_identifier_anonymous_map_int32_t_InnerEnumHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_int32_t_InnerEnumHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_InnerEnumHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_InnerEnumHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_InnerEnumHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerEnumHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerEnumHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerEnumHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerEnumHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerEnumHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_InnerEnumHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerEnumHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerEnumHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_InnerEnumHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerEnumHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerEnumHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int32_t_InnerEnumHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_InnerEnumHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_InnerEnumHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_InnerEnumHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_InnerEnumHelper_unbounded, element_flags_anonymous_map_int32_t_InnerEnumHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_InnerEnumHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_InnerEnumHelper_unbounded), key_flags_anonymous_map_int32_t_InnerEnumHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_InnerEnumHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_InnerEnumHelper_unbounded", type_ids_var_map_long_innerenumhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_InnerEnumHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_long_innerenumhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_long_innerenumhelper = 0x00000000;
            bool common_var_map_long_innerenumhelper_ec {false};
            CommonStructMember common_var_map_long_innerenumhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_long_innerenumhelper, member_flags_var_map_long_innerenumhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_innerenumhelper, common_var_map_long_innerenumhelper_ec))};
            if (!common_var_map_long_innerenumhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_long_innerenumhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_long_innerenumhelper = "var_map_long_innerenumhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_long_innerenumhelper;
            ann_custom_MapLongInnerEnumHelper.reset();
            CompleteMemberDetail detail_var_map_long_innerenumhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_long_innerenumhelper, member_ann_builtin_var_map_long_innerenumhelper, ann_custom_MapLongInnerEnumHelper);
            CompleteStructMember member_var_map_long_innerenumhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_long_innerenumhelper, detail_var_map_long_innerenumhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongInnerEnumHelper, member_var_map_long_innerenumhelper);
        }
        CompleteStructType struct_type_MapLongInnerEnumHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongInnerEnumHelper, header_MapLongInnerEnumHelper, member_seq_MapLongInnerEnumHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongInnerEnumHelper, type_name_MapLongInnerEnumHelper.to_string(), type_ids_MapLongInnerEnumHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongInnerEnumHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongInnerBitMaskHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapLongInnerBitMaskHelper)
{

    ReturnCode_t return_code_MapLongInnerBitMaskHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongInnerBitMaskHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongInnerBitMaskHelper", type_ids_MapLongInnerBitMaskHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongInnerBitMaskHelper)
    {
        StructTypeFlag struct_flags_MapLongInnerBitMaskHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongInnerBitMaskHelper = "MapLongInnerBitMaskHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongInnerBitMaskHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongInnerBitMaskHelper;
        CompleteTypeDetail detail_MapLongInnerBitMaskHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongInnerBitMaskHelper, ann_custom_MapLongInnerBitMaskHelper, type_name_MapLongInnerBitMaskHelper.to_string());
        CompleteStructHeader header_MapLongInnerBitMaskHelper;
        header_MapLongInnerBitMaskHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongInnerBitMaskHelper);
        CompleteStructMemberSeq member_seq_MapLongInnerBitMaskHelper;
        {
            TypeIdentifierPair type_ids_var_map_long_innerbitmaskhelper;
            ReturnCode_t return_code_var_map_long_innerbitmaskhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_long_innerbitmaskhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_InnerBitMaskHelper_unbounded", type_ids_var_map_long_innerbitmaskhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_innerbitmaskhelper)
            {
                return_code_var_map_long_innerbitmaskhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerBitMaskHelper", type_ids_var_map_long_innerbitmaskhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_innerbitmaskhelper)
                {
                ::register_InnerBitMaskHelper_type_identifier(type_ids_var_map_long_innerbitmaskhelper);
                }
                bool element_identifier_anonymous_map_int32_t_InnerBitMaskHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int32_t_InnerBitMaskHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_innerbitmaskhelper, element_identifier_anonymous_map_int32_t_InnerBitMaskHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_int32_t_InnerBitMaskHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_InnerBitMaskHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_long_innerbitmaskhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_long_innerbitmaskhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_innerbitmaskhelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int32_t_InnerBitMaskHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int32_t_InnerBitMaskHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_innerbitmaskhelper, key_identifier_anonymous_map_int32_t_InnerBitMaskHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_int32_t_InnerBitMaskHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_InnerBitMaskHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_InnerBitMaskHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_InnerBitMaskHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerBitMaskHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerBitMaskHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerBitMaskHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerBitMaskHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerBitMaskHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_InnerBitMaskHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerBitMaskHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerBitMaskHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_InnerBitMaskHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerBitMaskHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerBitMaskHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int32_t_InnerBitMaskHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_InnerBitMaskHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_InnerBitMaskHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_InnerBitMaskHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_InnerBitMaskHelper_unbounded, element_flags_anonymous_map_int32_t_InnerBitMaskHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_InnerBitMaskHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_InnerBitMaskHelper_unbounded), key_flags_anonymous_map_int32_t_InnerBitMaskHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_InnerBitMaskHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_InnerBitMaskHelper_unbounded", type_ids_var_map_long_innerbitmaskhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_InnerBitMaskHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_long_innerbitmaskhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_long_innerbitmaskhelper = 0x00000000;
            bool common_var_map_long_innerbitmaskhelper_ec {false};
            CommonStructMember common_var_map_long_innerbitmaskhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_long_innerbitmaskhelper, member_flags_var_map_long_innerbitmaskhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_innerbitmaskhelper, common_var_map_long_innerbitmaskhelper_ec))};
            if (!common_var_map_long_innerbitmaskhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_long_innerbitmaskhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_long_innerbitmaskhelper = "var_map_long_innerbitmaskhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_long_innerbitmaskhelper;
            ann_custom_MapLongInnerBitMaskHelper.reset();
            CompleteMemberDetail detail_var_map_long_innerbitmaskhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_long_innerbitmaskhelper, member_ann_builtin_var_map_long_innerbitmaskhelper, ann_custom_MapLongInnerBitMaskHelper);
            CompleteStructMember member_var_map_long_innerbitmaskhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_long_innerbitmaskhelper, detail_var_map_long_innerbitmaskhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongInnerBitMaskHelper, member_var_map_long_innerbitmaskhelper);
        }
        CompleteStructType struct_type_MapLongInnerBitMaskHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongInnerBitMaskHelper, header_MapLongInnerBitMaskHelper, member_seq_MapLongInnerBitMaskHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongInnerBitMaskHelper, type_name_MapLongInnerBitMaskHelper.to_string(), type_ids_MapLongInnerBitMaskHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongInnerBitMaskHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongInnerAliasHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapLongInnerAliasHelper)
{

    ReturnCode_t return_code_MapLongInnerAliasHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongInnerAliasHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongInnerAliasHelper", type_ids_MapLongInnerAliasHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongInnerAliasHelper)
    {
        StructTypeFlag struct_flags_MapLongInnerAliasHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongInnerAliasHelper = "MapLongInnerAliasHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongInnerAliasHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongInnerAliasHelper;
        CompleteTypeDetail detail_MapLongInnerAliasHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongInnerAliasHelper, ann_custom_MapLongInnerAliasHelper, type_name_MapLongInnerAliasHelper.to_string());
        CompleteStructHeader header_MapLongInnerAliasHelper;
        header_MapLongInnerAliasHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongInnerAliasHelper);
        CompleteStructMemberSeq member_seq_MapLongInnerAliasHelper;
        {
            TypeIdentifierPair type_ids_var_map_long_inneraliashelper;
            ReturnCode_t return_code_var_map_long_inneraliashelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_long_inneraliashelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_InnerAliasHelper_unbounded", type_ids_var_map_long_inneraliashelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_inneraliashelper)
            {
                return_code_var_map_long_inneraliashelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerAliasHelper", type_ids_var_map_long_inneraliashelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_inneraliashelper)
                {
                ::register_InnerAliasHelper_type_identifier(type_ids_var_map_long_inneraliashelper);
                }
                bool element_identifier_anonymous_map_int32_t_InnerAliasHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int32_t_InnerAliasHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_inneraliashelper, element_identifier_anonymous_map_int32_t_InnerAliasHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_int32_t_InnerAliasHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_InnerAliasHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_long_inneraliashelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_long_inneraliashelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_inneraliashelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int32_t_InnerAliasHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int32_t_InnerAliasHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_inneraliashelper, key_identifier_anonymous_map_int32_t_InnerAliasHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_int32_t_InnerAliasHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_InnerAliasHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_InnerAliasHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_InnerAliasHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerAliasHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerAliasHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerAliasHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerAliasHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerAliasHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_InnerAliasHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerAliasHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerAliasHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_InnerAliasHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerAliasHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerAliasHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int32_t_InnerAliasHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_InnerAliasHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_InnerAliasHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_InnerAliasHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_InnerAliasHelper_unbounded, element_flags_anonymous_map_int32_t_InnerAliasHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_InnerAliasHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_InnerAliasHelper_unbounded), key_flags_anonymous_map_int32_t_InnerAliasHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_InnerAliasHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_InnerAliasHelper_unbounded", type_ids_var_map_long_inneraliashelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_InnerAliasHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_long_inneraliashelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_long_inneraliashelper = 0x00000000;
            bool common_var_map_long_inneraliashelper_ec {false};
            CommonStructMember common_var_map_long_inneraliashelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_long_inneraliashelper, member_flags_var_map_long_inneraliashelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_inneraliashelper, common_var_map_long_inneraliashelper_ec))};
            if (!common_var_map_long_inneraliashelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_long_inneraliashelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_long_inneraliashelper = "var_map_long_inneraliashelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_long_inneraliashelper;
            ann_custom_MapLongInnerAliasHelper.reset();
            CompleteMemberDetail detail_var_map_long_inneraliashelper = TypeObjectUtils::build_complete_member_detail(name_var_map_long_inneraliashelper, member_ann_builtin_var_map_long_inneraliashelper, ann_custom_MapLongInnerAliasHelper);
            CompleteStructMember member_var_map_long_inneraliashelper = TypeObjectUtils::build_complete_struct_member(common_var_map_long_inneraliashelper, detail_var_map_long_inneraliashelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongInnerAliasHelper, member_var_map_long_inneraliashelper);
        }
        CompleteStructType struct_type_MapLongInnerAliasHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongInnerAliasHelper, header_MapLongInnerAliasHelper, member_seq_MapLongInnerAliasHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongInnerAliasHelper, type_name_MapLongInnerAliasHelper.to_string(), type_ids_MapLongInnerAliasHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongInnerAliasHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongInnerAliasArrayHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapLongInnerAliasArrayHelper)
{

    ReturnCode_t return_code_MapLongInnerAliasArrayHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongInnerAliasArrayHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongInnerAliasArrayHelper", type_ids_MapLongInnerAliasArrayHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongInnerAliasArrayHelper)
    {
        StructTypeFlag struct_flags_MapLongInnerAliasArrayHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongInnerAliasArrayHelper = "MapLongInnerAliasArrayHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongInnerAliasArrayHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongInnerAliasArrayHelper;
        CompleteTypeDetail detail_MapLongInnerAliasArrayHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongInnerAliasArrayHelper, ann_custom_MapLongInnerAliasArrayHelper, type_name_MapLongInnerAliasArrayHelper.to_string());
        CompleteStructHeader header_MapLongInnerAliasArrayHelper;
        header_MapLongInnerAliasArrayHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongInnerAliasArrayHelper);
        CompleteStructMemberSeq member_seq_MapLongInnerAliasArrayHelper;
        {
            TypeIdentifierPair type_ids_var_map_long_inneraliasarrayhelper;
            ReturnCode_t return_code_var_map_long_inneraliasarrayhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_long_inneraliasarrayhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded", type_ids_var_map_long_inneraliasarrayhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_inneraliasarrayhelper)
            {
                return_code_var_map_long_inneraliasarrayhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_array_helper", type_ids_var_map_long_inneraliasarrayhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_inneraliasarrayhelper)
                {
                ::register_Inner_alias_array_helper_type_identifier(type_ids_var_map_long_inneraliasarrayhelper);
                }
                bool element_identifier_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_inneraliasarrayhelper, element_identifier_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded_ec))};
                if (!element_identifier_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_long_inneraliasarrayhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_long_inneraliasarrayhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_inneraliasarrayhelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_inneraliasarrayhelper, key_identifier_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded_ec))};
                if (!key_identifier_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded, element_flags_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded), key_flags_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded", type_ids_var_map_long_inneraliasarrayhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_anonymous_array_int16_t_2_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_long_inneraliasarrayhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_long_inneraliasarrayhelper = 0x00000000;
            bool common_var_map_long_inneraliasarrayhelper_ec {false};
            CommonStructMember common_var_map_long_inneraliasarrayhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_long_inneraliasarrayhelper, member_flags_var_map_long_inneraliasarrayhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_inneraliasarrayhelper, common_var_map_long_inneraliasarrayhelper_ec))};
            if (!common_var_map_long_inneraliasarrayhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_long_inneraliasarrayhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_long_inneraliasarrayhelper = "var_map_long_inneraliasarrayhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_long_inneraliasarrayhelper;
            ann_custom_MapLongInnerAliasArrayHelper.reset();
            CompleteMemberDetail detail_var_map_long_inneraliasarrayhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_long_inneraliasarrayhelper, member_ann_builtin_var_map_long_inneraliasarrayhelper, ann_custom_MapLongInnerAliasArrayHelper);
            CompleteStructMember member_var_map_long_inneraliasarrayhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_long_inneraliasarrayhelper, detail_var_map_long_inneraliasarrayhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongInnerAliasArrayHelper, member_var_map_long_inneraliasarrayhelper);
        }
        CompleteStructType struct_type_MapLongInnerAliasArrayHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongInnerAliasArrayHelper, header_MapLongInnerAliasArrayHelper, member_seq_MapLongInnerAliasArrayHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongInnerAliasArrayHelper, type_name_MapLongInnerAliasArrayHelper.to_string(), type_ids_MapLongInnerAliasArrayHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongInnerAliasArrayHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongInnerAliasSequenceHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapLongInnerAliasSequenceHelper)
{

    ReturnCode_t return_code_MapLongInnerAliasSequenceHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongInnerAliasSequenceHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongInnerAliasSequenceHelper", type_ids_MapLongInnerAliasSequenceHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongInnerAliasSequenceHelper)
    {
        StructTypeFlag struct_flags_MapLongInnerAliasSequenceHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongInnerAliasSequenceHelper = "MapLongInnerAliasSequenceHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongInnerAliasSequenceHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongInnerAliasSequenceHelper;
        CompleteTypeDetail detail_MapLongInnerAliasSequenceHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongInnerAliasSequenceHelper, ann_custom_MapLongInnerAliasSequenceHelper, type_name_MapLongInnerAliasSequenceHelper.to_string());
        CompleteStructHeader header_MapLongInnerAliasSequenceHelper;
        header_MapLongInnerAliasSequenceHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongInnerAliasSequenceHelper);
        CompleteStructMemberSeq member_seq_MapLongInnerAliasSequenceHelper;
        {
            TypeIdentifierPair type_ids_var_map_long_inneraliassequencehelper;
            ReturnCode_t return_code_var_map_long_inneraliassequencehelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_long_inneraliassequencehelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded", type_ids_var_map_long_inneraliassequencehelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_inneraliassequencehelper)
            {
                return_code_var_map_long_inneraliassequencehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_sequence_helper", type_ids_var_map_long_inneraliassequencehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_inneraliassequencehelper)
                {
                ::register_Inner_alias_sequence_helper_type_identifier(type_ids_var_map_long_inneraliassequencehelper);
                }
                bool element_identifier_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_inneraliassequencehelper, element_identifier_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded_ec))};
                if (!element_identifier_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_long_inneraliassequencehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_long_inneraliassequencehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_inneraliassequencehelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_inneraliassequencehelper, key_identifier_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded_ec))};
                if (!key_identifier_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded, element_flags_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded), key_flags_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded", type_ids_var_map_long_inneraliassequencehelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_anonymous_sequence_int16_t_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_long_inneraliassequencehelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_long_inneraliassequencehelper = 0x00000000;
            bool common_var_map_long_inneraliassequencehelper_ec {false};
            CommonStructMember common_var_map_long_inneraliassequencehelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_long_inneraliassequencehelper, member_flags_var_map_long_inneraliassequencehelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_inneraliassequencehelper, common_var_map_long_inneraliassequencehelper_ec))};
            if (!common_var_map_long_inneraliassequencehelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_long_inneraliassequencehelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_long_inneraliassequencehelper = "var_map_long_inneraliassequencehelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_long_inneraliassequencehelper;
            ann_custom_MapLongInnerAliasSequenceHelper.reset();
            CompleteMemberDetail detail_var_map_long_inneraliassequencehelper = TypeObjectUtils::build_complete_member_detail(name_var_map_long_inneraliassequencehelper, member_ann_builtin_var_map_long_inneraliassequencehelper, ann_custom_MapLongInnerAliasSequenceHelper);
            CompleteStructMember member_var_map_long_inneraliassequencehelper = TypeObjectUtils::build_complete_struct_member(common_var_map_long_inneraliassequencehelper, detail_var_map_long_inneraliassequencehelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongInnerAliasSequenceHelper, member_var_map_long_inneraliassequencehelper);
        }
        CompleteStructType struct_type_MapLongInnerAliasSequenceHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongInnerAliasSequenceHelper, header_MapLongInnerAliasSequenceHelper, member_seq_MapLongInnerAliasSequenceHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongInnerAliasSequenceHelper, type_name_MapLongInnerAliasSequenceHelper.to_string(), type_ids_MapLongInnerAliasSequenceHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongInnerAliasSequenceHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongInnerAliasMapHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapLongInnerAliasMapHelper)
{

    ReturnCode_t return_code_MapLongInnerAliasMapHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongInnerAliasMapHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongInnerAliasMapHelper", type_ids_MapLongInnerAliasMapHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongInnerAliasMapHelper)
    {
        StructTypeFlag struct_flags_MapLongInnerAliasMapHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongInnerAliasMapHelper = "MapLongInnerAliasMapHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongInnerAliasMapHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongInnerAliasMapHelper;
        CompleteTypeDetail detail_MapLongInnerAliasMapHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongInnerAliasMapHelper, ann_custom_MapLongInnerAliasMapHelper, type_name_MapLongInnerAliasMapHelper.to_string());
        CompleteStructHeader header_MapLongInnerAliasMapHelper;
        header_MapLongInnerAliasMapHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongInnerAliasMapHelper);
        CompleteStructMemberSeq member_seq_MapLongInnerAliasMapHelper;
        {
            TypeIdentifierPair type_ids_var_map_long_inneraliasmaphelper;
            ReturnCode_t return_code_var_map_long_inneraliasmaphelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_long_inneraliasmaphelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded", type_ids_var_map_long_inneraliasmaphelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_inneraliasmaphelper)
            {
                return_code_var_map_long_inneraliasmaphelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_map_helper", type_ids_var_map_long_inneraliasmaphelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_inneraliasmaphelper)
                {
                ::register_Inner_alias_map_helper_type_identifier(type_ids_var_map_long_inneraliasmaphelper);
                }
                bool element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_inneraliasmaphelper, element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded_ec))};
                if (!element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_long_inneraliasmaphelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_long_inneraliasmaphelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_inneraliasmaphelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_inneraliasmaphelper, key_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded_ec))};
                if (!key_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded, element_flags_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded), key_flags_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded", type_ids_var_map_long_inneraliasmaphelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_anonymous_map_int32_t_int32_t_0_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_long_inneraliasmaphelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_long_inneraliasmaphelper = 0x00000000;
            bool common_var_map_long_inneraliasmaphelper_ec {false};
            CommonStructMember common_var_map_long_inneraliasmaphelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_long_inneraliasmaphelper, member_flags_var_map_long_inneraliasmaphelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_inneraliasmaphelper, common_var_map_long_inneraliasmaphelper_ec))};
            if (!common_var_map_long_inneraliasmaphelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_long_inneraliasmaphelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_long_inneraliasmaphelper = "var_map_long_inneraliasmaphelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_long_inneraliasmaphelper;
            ann_custom_MapLongInnerAliasMapHelper.reset();
            CompleteMemberDetail detail_var_map_long_inneraliasmaphelper = TypeObjectUtils::build_complete_member_detail(name_var_map_long_inneraliasmaphelper, member_ann_builtin_var_map_long_inneraliasmaphelper, ann_custom_MapLongInnerAliasMapHelper);
            CompleteStructMember member_var_map_long_inneraliasmaphelper = TypeObjectUtils::build_complete_struct_member(common_var_map_long_inneraliasmaphelper, detail_var_map_long_inneraliasmaphelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongInnerAliasMapHelper, member_var_map_long_inneraliasmaphelper);
        }
        CompleteStructType struct_type_MapLongInnerAliasMapHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongInnerAliasMapHelper, header_MapLongInnerAliasMapHelper, member_seq_MapLongInnerAliasMapHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongInnerAliasMapHelper, type_name_MapLongInnerAliasMapHelper.to_string(), type_ids_MapLongInnerAliasMapHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongInnerAliasMapHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongInnerUnionHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapLongInnerUnionHelper)
{

    ReturnCode_t return_code_MapLongInnerUnionHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongInnerUnionHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongInnerUnionHelper", type_ids_MapLongInnerUnionHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongInnerUnionHelper)
    {
        StructTypeFlag struct_flags_MapLongInnerUnionHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongInnerUnionHelper = "MapLongInnerUnionHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongInnerUnionHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongInnerUnionHelper;
        CompleteTypeDetail detail_MapLongInnerUnionHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongInnerUnionHelper, ann_custom_MapLongInnerUnionHelper, type_name_MapLongInnerUnionHelper.to_string());
        CompleteStructHeader header_MapLongInnerUnionHelper;
        header_MapLongInnerUnionHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongInnerUnionHelper);
        CompleteStructMemberSeq member_seq_MapLongInnerUnionHelper;
        {
            TypeIdentifierPair type_ids_var_map_long_innerunionhelper;
            ReturnCode_t return_code_var_map_long_innerunionhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_long_innerunionhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_InnerUnionHelper_unbounded", type_ids_var_map_long_innerunionhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_innerunionhelper)
            {
                return_code_var_map_long_innerunionhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerUnionHelper", type_ids_var_map_long_innerunionhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_innerunionhelper)
                {
                ::register_InnerUnionHelper_type_identifier(type_ids_var_map_long_innerunionhelper);
                }
                bool element_identifier_anonymous_map_int32_t_InnerUnionHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int32_t_InnerUnionHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_innerunionhelper, element_identifier_anonymous_map_int32_t_InnerUnionHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_int32_t_InnerUnionHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_InnerUnionHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_long_innerunionhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_long_innerunionhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_innerunionhelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int32_t_InnerUnionHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int32_t_InnerUnionHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_innerunionhelper, key_identifier_anonymous_map_int32_t_InnerUnionHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_int32_t_InnerUnionHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_InnerUnionHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_InnerUnionHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_InnerUnionHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerUnionHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerUnionHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerUnionHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerUnionHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerUnionHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_InnerUnionHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerUnionHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerUnionHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_InnerUnionHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerUnionHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerUnionHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int32_t_InnerUnionHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_InnerUnionHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_InnerUnionHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_InnerUnionHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_InnerUnionHelper_unbounded, element_flags_anonymous_map_int32_t_InnerUnionHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_InnerUnionHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_InnerUnionHelper_unbounded), key_flags_anonymous_map_int32_t_InnerUnionHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_InnerUnionHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_InnerUnionHelper_unbounded", type_ids_var_map_long_innerunionhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_InnerUnionHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_long_innerunionhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_long_innerunionhelper = 0x00000000;
            bool common_var_map_long_innerunionhelper_ec {false};
            CommonStructMember common_var_map_long_innerunionhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_long_innerunionhelper, member_flags_var_map_long_innerunionhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_innerunionhelper, common_var_map_long_innerunionhelper_ec))};
            if (!common_var_map_long_innerunionhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_long_innerunionhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_long_innerunionhelper = "var_map_long_innerunionhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_long_innerunionhelper;
            ann_custom_MapLongInnerUnionHelper.reset();
            CompleteMemberDetail detail_var_map_long_innerunionhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_long_innerunionhelper, member_ann_builtin_var_map_long_innerunionhelper, ann_custom_MapLongInnerUnionHelper);
            CompleteStructMember member_var_map_long_innerunionhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_long_innerunionhelper, detail_var_map_long_innerunionhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongInnerUnionHelper, member_var_map_long_innerunionhelper);
        }
        CompleteStructType struct_type_MapLongInnerUnionHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongInnerUnionHelper, header_MapLongInnerUnionHelper, member_seq_MapLongInnerUnionHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongInnerUnionHelper, type_name_MapLongInnerUnionHelper.to_string(), type_ids_MapLongInnerUnionHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongInnerUnionHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongInnerStructureHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapLongInnerStructureHelper)
{

    ReturnCode_t return_code_MapLongInnerStructureHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongInnerStructureHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongInnerStructureHelper", type_ids_MapLongInnerStructureHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongInnerStructureHelper)
    {
        StructTypeFlag struct_flags_MapLongInnerStructureHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongInnerStructureHelper = "MapLongInnerStructureHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongInnerStructureHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongInnerStructureHelper;
        CompleteTypeDetail detail_MapLongInnerStructureHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongInnerStructureHelper, ann_custom_MapLongInnerStructureHelper, type_name_MapLongInnerStructureHelper.to_string());
        CompleteStructHeader header_MapLongInnerStructureHelper;
        header_MapLongInnerStructureHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongInnerStructureHelper);
        CompleteStructMemberSeq member_seq_MapLongInnerStructureHelper;
        {
            TypeIdentifierPair type_ids_var_map_long_innerstructurehelper;
            ReturnCode_t return_code_var_map_long_innerstructurehelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_long_innerstructurehelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_InnerStructureHelper_unbounded", type_ids_var_map_long_innerstructurehelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_innerstructurehelper)
            {
                return_code_var_map_long_innerstructurehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerStructureHelper", type_ids_var_map_long_innerstructurehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_innerstructurehelper)
                {
                ::register_InnerStructureHelper_type_identifier(type_ids_var_map_long_innerstructurehelper);
                }
                bool element_identifier_anonymous_map_int32_t_InnerStructureHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int32_t_InnerStructureHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_innerstructurehelper, element_identifier_anonymous_map_int32_t_InnerStructureHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_int32_t_InnerStructureHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_InnerStructureHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_long_innerstructurehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_long_innerstructurehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_innerstructurehelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int32_t_InnerStructureHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int32_t_InnerStructureHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_innerstructurehelper, key_identifier_anonymous_map_int32_t_InnerStructureHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_int32_t_InnerStructureHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_InnerStructureHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_InnerStructureHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_InnerStructureHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerStructureHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerStructureHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerStructureHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerStructureHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerStructureHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_InnerStructureHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerStructureHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerStructureHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_InnerStructureHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerStructureHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerStructureHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int32_t_InnerStructureHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_InnerStructureHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_InnerStructureHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_InnerStructureHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_InnerStructureHelper_unbounded, element_flags_anonymous_map_int32_t_InnerStructureHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_InnerStructureHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_InnerStructureHelper_unbounded), key_flags_anonymous_map_int32_t_InnerStructureHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_InnerStructureHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_InnerStructureHelper_unbounded", type_ids_var_map_long_innerstructurehelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_InnerStructureHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_long_innerstructurehelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_long_innerstructurehelper = 0x00000000;
            bool common_var_map_long_innerstructurehelper_ec {false};
            CommonStructMember common_var_map_long_innerstructurehelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_long_innerstructurehelper, member_flags_var_map_long_innerstructurehelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_innerstructurehelper, common_var_map_long_innerstructurehelper_ec))};
            if (!common_var_map_long_innerstructurehelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_long_innerstructurehelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_long_innerstructurehelper = "var_map_long_innerstructurehelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_long_innerstructurehelper;
            ann_custom_MapLongInnerStructureHelper.reset();
            CompleteMemberDetail detail_var_map_long_innerstructurehelper = TypeObjectUtils::build_complete_member_detail(name_var_map_long_innerstructurehelper, member_ann_builtin_var_map_long_innerstructurehelper, ann_custom_MapLongInnerStructureHelper);
            CompleteStructMember member_var_map_long_innerstructurehelper = TypeObjectUtils::build_complete_struct_member(common_var_map_long_innerstructurehelper, detail_var_map_long_innerstructurehelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongInnerStructureHelper, member_var_map_long_innerstructurehelper);
        }
        CompleteStructType struct_type_MapLongInnerStructureHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongInnerStructureHelper, header_MapLongInnerStructureHelper, member_seq_MapLongInnerStructureHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongInnerStructureHelper, type_name_MapLongInnerStructureHelper.to_string(), type_ids_MapLongInnerStructureHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongInnerStructureHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongInnerBitsetHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapLongInnerBitsetHelper)
{

    ReturnCode_t return_code_MapLongInnerBitsetHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongInnerBitsetHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongInnerBitsetHelper", type_ids_MapLongInnerBitsetHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongInnerBitsetHelper)
    {
        StructTypeFlag struct_flags_MapLongInnerBitsetHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongInnerBitsetHelper = "MapLongInnerBitsetHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongInnerBitsetHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongInnerBitsetHelper;
        CompleteTypeDetail detail_MapLongInnerBitsetHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongInnerBitsetHelper, ann_custom_MapLongInnerBitsetHelper, type_name_MapLongInnerBitsetHelper.to_string());
        CompleteStructHeader header_MapLongInnerBitsetHelper;
        header_MapLongInnerBitsetHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongInnerBitsetHelper);
        CompleteStructMemberSeq member_seq_MapLongInnerBitsetHelper;
        {
            TypeIdentifierPair type_ids_var_map_long_innerbitsethelper;
            ReturnCode_t return_code_var_map_long_innerbitsethelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_long_innerbitsethelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_InnerBitsetHelper_unbounded", type_ids_var_map_long_innerbitsethelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_innerbitsethelper)
            {
                return_code_var_map_long_innerbitsethelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerBitsetHelper", type_ids_var_map_long_innerbitsethelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_innerbitsethelper)
                {
                ::register_InnerBitsetHelper_type_identifier(type_ids_var_map_long_innerbitsethelper);
                }
                bool element_identifier_anonymous_map_int32_t_InnerBitsetHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int32_t_InnerBitsetHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_innerbitsethelper, element_identifier_anonymous_map_int32_t_InnerBitsetHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_int32_t_InnerBitsetHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_InnerBitsetHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_long_innerbitsethelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_long_innerbitsethelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_long_innerbitsethelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int32_t_InnerBitsetHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int32_t_InnerBitsetHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_innerbitsethelper, key_identifier_anonymous_map_int32_t_InnerBitsetHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_int32_t_InnerBitsetHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_InnerBitsetHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_InnerBitsetHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_InnerBitsetHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerBitsetHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerBitsetHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerBitsetHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerBitsetHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerBitsetHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_InnerBitsetHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerBitsetHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerBitsetHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_InnerBitsetHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerBitsetHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_InnerBitsetHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int32_t_InnerBitsetHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_InnerBitsetHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_InnerBitsetHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_InnerBitsetHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_InnerBitsetHelper_unbounded, element_flags_anonymous_map_int32_t_InnerBitsetHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_InnerBitsetHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_InnerBitsetHelper_unbounded), key_flags_anonymous_map_int32_t_InnerBitsetHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_InnerBitsetHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_InnerBitsetHelper_unbounded", type_ids_var_map_long_innerbitsethelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_InnerBitsetHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_long_innerbitsethelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_long_innerbitsethelper = 0x00000000;
            bool common_var_map_long_innerbitsethelper_ec {false};
            CommonStructMember common_var_map_long_innerbitsethelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_long_innerbitsethelper, member_flags_var_map_long_innerbitsethelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_long_innerbitsethelper, common_var_map_long_innerbitsethelper_ec))};
            if (!common_var_map_long_innerbitsethelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_long_innerbitsethelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_long_innerbitsethelper = "var_map_long_innerbitsethelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_long_innerbitsethelper;
            ann_custom_MapLongInnerBitsetHelper.reset();
            CompleteMemberDetail detail_var_map_long_innerbitsethelper = TypeObjectUtils::build_complete_member_detail(name_var_map_long_innerbitsethelper, member_ann_builtin_var_map_long_innerbitsethelper, ann_custom_MapLongInnerBitsetHelper);
            CompleteStructMember member_var_map_long_innerbitsethelper = TypeObjectUtils::build_complete_struct_member(common_var_map_long_innerbitsethelper, detail_var_map_long_innerbitsethelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongInnerBitsetHelper, member_var_map_long_innerbitsethelper);
        }
        CompleteStructType struct_type_MapLongInnerBitsetHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongInnerBitsetHelper, header_MapLongInnerBitsetHelper, member_seq_MapLongInnerBitsetHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongInnerBitsetHelper, type_name_MapLongInnerBitsetHelper.to_string(), type_ids_MapLongInnerBitsetHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongInnerBitsetHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongShort_type_identifier(
        TypeIdentifierPair& type_ids_MapULongShort)
{

    ReturnCode_t return_code_MapULongShort {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongShort =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongShort", type_ids_MapULongShort);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongShort)
    {
        StructTypeFlag struct_flags_MapULongShort = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongShort = "MapULongShort";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongShort;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongShort;
        CompleteTypeDetail detail_MapULongShort = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongShort, ann_custom_MapULongShort, type_name_MapULongShort.to_string());
        CompleteStructHeader header_MapULongShort;
        header_MapULongShort = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongShort);
        CompleteStructMemberSeq member_seq_MapULongShort;
        {
            TypeIdentifierPair type_ids_var_map_ulong_short;
            ReturnCode_t return_code_var_map_ulong_short {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ulong_short =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint32_t_int16_t_unbounded", type_ids_var_map_ulong_short);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_short)
            {
                return_code_var_map_ulong_short =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_ulong_short);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_short)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint32_t_int16_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint32_t_int16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_short, element_identifier_anonymous_map_uint32_t_int16_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint32_t_int16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_int16_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ulong_short =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_ulong_short);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_short)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint32_t_int16_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint32_t_int16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_short, key_identifier_anonymous_map_uint32_t_int16_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint32_t_int16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_int16_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint32_t_int16_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint32_t_int16_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_int16_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint32_t_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_int16_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint32_t_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_int16_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint32_t_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_int16_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint32_t_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_int16_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint32_t_int16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_int16_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_int16_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint32_t_int16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_int16_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_int16_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint32_t_int16_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint32_t_int16_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint32_t_int16_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint32_t_int16_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint32_t_int16_t_unbounded, element_flags_anonymous_map_uint32_t_int16_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint32_t_int16_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint32_t_int16_t_unbounded), key_flags_anonymous_map_uint32_t_int16_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint32_t_int16_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint32_t_int16_t_unbounded", type_ids_var_map_ulong_short))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint32_t_int16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ulong_short = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ulong_short = 0x00000000;
            bool common_var_map_ulong_short_ec {false};
            CommonStructMember common_var_map_ulong_short {TypeObjectUtils::build_common_struct_member(member_id_var_map_ulong_short, member_flags_var_map_ulong_short, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_short, common_var_map_ulong_short_ec))};
            if (!common_var_map_ulong_short_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ulong_short member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ulong_short = "var_map_ulong_short";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ulong_short;
            ann_custom_MapULongShort.reset();
            CompleteMemberDetail detail_var_map_ulong_short = TypeObjectUtils::build_complete_member_detail(name_var_map_ulong_short, member_ann_builtin_var_map_ulong_short, ann_custom_MapULongShort);
            CompleteStructMember member_var_map_ulong_short = TypeObjectUtils::build_complete_struct_member(common_var_map_ulong_short, detail_var_map_ulong_short);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongShort, member_var_map_ulong_short);
        }
        CompleteStructType struct_type_MapULongShort = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongShort, header_MapULongShort, member_seq_MapULongShort);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongShort, type_name_MapULongShort.to_string(), type_ids_MapULongShort))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongShort already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongUShort_type_identifier(
        TypeIdentifierPair& type_ids_MapULongUShort)
{

    ReturnCode_t return_code_MapULongUShort {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongUShort =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongUShort", type_ids_MapULongUShort);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongUShort)
    {
        StructTypeFlag struct_flags_MapULongUShort = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongUShort = "MapULongUShort";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongUShort;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongUShort;
        CompleteTypeDetail detail_MapULongUShort = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongUShort, ann_custom_MapULongUShort, type_name_MapULongUShort.to_string());
        CompleteStructHeader header_MapULongUShort;
        header_MapULongUShort = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongUShort);
        CompleteStructMemberSeq member_seq_MapULongUShort;
        {
            TypeIdentifierPair type_ids_var_map_ulong_ushort;
            ReturnCode_t return_code_var_map_ulong_ushort {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ulong_ushort =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint32_t_uint16_t_unbounded", type_ids_var_map_ulong_ushort);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_ushort)
            {
                return_code_var_map_ulong_ushort =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_ulong_ushort);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_ushort)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint32_t_uint16_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint32_t_uint16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_ushort, element_identifier_anonymous_map_uint32_t_uint16_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint32_t_uint16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_uint16_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ulong_ushort =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_ulong_ushort);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_ushort)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint32_t_uint16_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint32_t_uint16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_ushort, key_identifier_anonymous_map_uint32_t_uint16_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint32_t_uint16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_uint16_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint32_t_uint16_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint32_t_uint16_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_uint16_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint32_t_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_uint16_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint32_t_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_uint16_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint32_t_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_uint16_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint32_t_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_uint16_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint32_t_uint16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_uint16_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_uint16_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint32_t_uint16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_uint16_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_uint16_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint32_t_uint16_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint32_t_uint16_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint32_t_uint16_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint32_t_uint16_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint32_t_uint16_t_unbounded, element_flags_anonymous_map_uint32_t_uint16_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint32_t_uint16_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint32_t_uint16_t_unbounded), key_flags_anonymous_map_uint32_t_uint16_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint32_t_uint16_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint32_t_uint16_t_unbounded", type_ids_var_map_ulong_ushort))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint32_t_uint16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ulong_ushort = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ulong_ushort = 0x00000000;
            bool common_var_map_ulong_ushort_ec {false};
            CommonStructMember common_var_map_ulong_ushort {TypeObjectUtils::build_common_struct_member(member_id_var_map_ulong_ushort, member_flags_var_map_ulong_ushort, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_ushort, common_var_map_ulong_ushort_ec))};
            if (!common_var_map_ulong_ushort_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ulong_ushort member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ulong_ushort = "var_map_ulong_ushort";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ulong_ushort;
            ann_custom_MapULongUShort.reset();
            CompleteMemberDetail detail_var_map_ulong_ushort = TypeObjectUtils::build_complete_member_detail(name_var_map_ulong_ushort, member_ann_builtin_var_map_ulong_ushort, ann_custom_MapULongUShort);
            CompleteStructMember member_var_map_ulong_ushort = TypeObjectUtils::build_complete_struct_member(common_var_map_ulong_ushort, detail_var_map_ulong_ushort);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongUShort, member_var_map_ulong_ushort);
        }
        CompleteStructType struct_type_MapULongUShort = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongUShort, header_MapULongUShort, member_seq_MapULongUShort);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongUShort, type_name_MapULongUShort.to_string(), type_ids_MapULongUShort))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongUShort already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongLong_type_identifier(
        TypeIdentifierPair& type_ids_MapULongLong)
{

    ReturnCode_t return_code_MapULongLong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongLong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongLong", type_ids_MapULongLong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongLong)
    {
        StructTypeFlag struct_flags_MapULongLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongLong = "MapULongLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongLong;
        CompleteTypeDetail detail_MapULongLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongLong, ann_custom_MapULongLong, type_name_MapULongLong.to_string());
        CompleteStructHeader header_MapULongLong;
        header_MapULongLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongLong);
        CompleteStructMemberSeq member_seq_MapULongLong;
        {
            TypeIdentifierPair type_ids_var_map_ulong_long;
            ReturnCode_t return_code_var_map_ulong_long {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ulong_long =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint32_t_int32_t_unbounded", type_ids_var_map_ulong_long);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_long)
            {
                return_code_var_map_ulong_long =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_ulong_long);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_long)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint32_t_int32_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint32_t_int32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_long, element_identifier_anonymous_map_uint32_t_int32_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint32_t_int32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_int32_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ulong_long =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_ulong_long);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_long)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint32_t_int32_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint32_t_int32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_long, key_identifier_anonymous_map_uint32_t_int32_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint32_t_int32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_int32_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint32_t_int32_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint32_t_int32_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_int32_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint32_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_int32_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint32_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_int32_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint32_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_int32_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint32_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_int32_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint32_t_int32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_int32_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_int32_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint32_t_int32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_int32_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_int32_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint32_t_int32_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint32_t_int32_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint32_t_int32_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint32_t_int32_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint32_t_int32_t_unbounded, element_flags_anonymous_map_uint32_t_int32_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint32_t_int32_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint32_t_int32_t_unbounded), key_flags_anonymous_map_uint32_t_int32_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint32_t_int32_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint32_t_int32_t_unbounded", type_ids_var_map_ulong_long))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint32_t_int32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ulong_long = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ulong_long = 0x00000000;
            bool common_var_map_ulong_long_ec {false};
            CommonStructMember common_var_map_ulong_long {TypeObjectUtils::build_common_struct_member(member_id_var_map_ulong_long, member_flags_var_map_ulong_long, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_long, common_var_map_ulong_long_ec))};
            if (!common_var_map_ulong_long_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ulong_long member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ulong_long = "var_map_ulong_long";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ulong_long;
            ann_custom_MapULongLong.reset();
            CompleteMemberDetail detail_var_map_ulong_long = TypeObjectUtils::build_complete_member_detail(name_var_map_ulong_long, member_ann_builtin_var_map_ulong_long, ann_custom_MapULongLong);
            CompleteStructMember member_var_map_ulong_long = TypeObjectUtils::build_complete_struct_member(common_var_map_ulong_long, detail_var_map_ulong_long);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongLong, member_var_map_ulong_long);
        }
        CompleteStructType struct_type_MapULongLong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongLong, header_MapULongLong, member_seq_MapULongLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongLong, type_name_MapULongLong.to_string(), type_ids_MapULongLong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongLong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongULong_type_identifier(
        TypeIdentifierPair& type_ids_MapULongULong)
{

    ReturnCode_t return_code_MapULongULong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongULong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongULong", type_ids_MapULongULong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongULong)
    {
        StructTypeFlag struct_flags_MapULongULong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongULong = "MapULongULong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongULong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongULong;
        CompleteTypeDetail detail_MapULongULong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongULong, ann_custom_MapULongULong, type_name_MapULongULong.to_string());
        CompleteStructHeader header_MapULongULong;
        header_MapULongULong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongULong);
        CompleteStructMemberSeq member_seq_MapULongULong;
        {
            TypeIdentifierPair type_ids_var_map_ulong_ulong;
            ReturnCode_t return_code_var_map_ulong_ulong {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ulong_ulong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint32_t_uint32_t_unbounded", type_ids_var_map_ulong_ulong);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_ulong)
            {
                return_code_var_map_ulong_ulong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_ulong_ulong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_ulong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint32_t_uint32_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint32_t_uint32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_ulong, element_identifier_anonymous_map_uint32_t_uint32_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint32_t_uint32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_uint32_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ulong_ulong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_ulong_ulong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_ulong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint32_t_uint32_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint32_t_uint32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_ulong, key_identifier_anonymous_map_uint32_t_uint32_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint32_t_uint32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_uint32_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint32_t_uint32_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint32_t_uint32_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_uint32_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint32_t_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_uint32_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint32_t_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_uint32_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint32_t_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_uint32_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint32_t_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_uint32_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint32_t_uint32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_uint32_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_uint32_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint32_t_uint32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_uint32_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_uint32_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint32_t_uint32_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint32_t_uint32_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint32_t_uint32_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint32_t_uint32_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint32_t_uint32_t_unbounded, element_flags_anonymous_map_uint32_t_uint32_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint32_t_uint32_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint32_t_uint32_t_unbounded), key_flags_anonymous_map_uint32_t_uint32_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint32_t_uint32_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint32_t_uint32_t_unbounded", type_ids_var_map_ulong_ulong))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint32_t_uint32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ulong_ulong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ulong_ulong = 0x00000000;
            bool common_var_map_ulong_ulong_ec {false};
            CommonStructMember common_var_map_ulong_ulong {TypeObjectUtils::build_common_struct_member(member_id_var_map_ulong_ulong, member_flags_var_map_ulong_ulong, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_ulong, common_var_map_ulong_ulong_ec))};
            if (!common_var_map_ulong_ulong_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ulong_ulong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ulong_ulong = "var_map_ulong_ulong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ulong_ulong;
            ann_custom_MapULongULong.reset();
            CompleteMemberDetail detail_var_map_ulong_ulong = TypeObjectUtils::build_complete_member_detail(name_var_map_ulong_ulong, member_ann_builtin_var_map_ulong_ulong, ann_custom_MapULongULong);
            CompleteStructMember member_var_map_ulong_ulong = TypeObjectUtils::build_complete_struct_member(common_var_map_ulong_ulong, detail_var_map_ulong_ulong);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongULong, member_var_map_ulong_ulong);
        }
        CompleteStructType struct_type_MapULongULong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongULong, header_MapULongULong, member_seq_MapULongULong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongULong, type_name_MapULongULong.to_string(), type_ids_MapULongULong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongULong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapKeyULongValueLongLong_type_identifier(
        TypeIdentifierPair& type_ids_MapKeyULongValueLongLong)
{

    ReturnCode_t return_code_MapKeyULongValueLongLong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapKeyULongValueLongLong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapKeyULongValueLongLong", type_ids_MapKeyULongValueLongLong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapKeyULongValueLongLong)
    {
        StructTypeFlag struct_flags_MapKeyULongValueLongLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapKeyULongValueLongLong = "MapKeyULongValueLongLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapKeyULongValueLongLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapKeyULongValueLongLong;
        CompleteTypeDetail detail_MapKeyULongValueLongLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapKeyULongValueLongLong, ann_custom_MapKeyULongValueLongLong, type_name_MapKeyULongValueLongLong.to_string());
        CompleteStructHeader header_MapKeyULongValueLongLong;
        header_MapKeyULongValueLongLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapKeyULongValueLongLong);
        CompleteStructMemberSeq member_seq_MapKeyULongValueLongLong;
        {
            TypeIdentifierPair type_ids_var_map_ulong_longlong;
            ReturnCode_t return_code_var_map_ulong_longlong {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ulong_longlong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint32_t_int64_t_unbounded", type_ids_var_map_ulong_longlong);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_longlong)
            {
                return_code_var_map_ulong_longlong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_ulong_longlong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_longlong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint32_t_int64_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint32_t_int64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_longlong, element_identifier_anonymous_map_uint32_t_int64_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint32_t_int64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_int64_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ulong_longlong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_ulong_longlong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_longlong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint32_t_int64_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint32_t_int64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_longlong, key_identifier_anonymous_map_uint32_t_int64_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint32_t_int64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_int64_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint32_t_int64_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint32_t_int64_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_int64_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint32_t_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_int64_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint32_t_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_int64_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint32_t_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_int64_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint32_t_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_int64_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint32_t_int64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_int64_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_int64_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint32_t_int64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_int64_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_int64_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint32_t_int64_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint32_t_int64_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint32_t_int64_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint32_t_int64_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint32_t_int64_t_unbounded, element_flags_anonymous_map_uint32_t_int64_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint32_t_int64_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint32_t_int64_t_unbounded), key_flags_anonymous_map_uint32_t_int64_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint32_t_int64_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint32_t_int64_t_unbounded", type_ids_var_map_ulong_longlong))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint32_t_int64_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ulong_longlong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ulong_longlong = 0x00000000;
            bool common_var_map_ulong_longlong_ec {false};
            CommonStructMember common_var_map_ulong_longlong {TypeObjectUtils::build_common_struct_member(member_id_var_map_ulong_longlong, member_flags_var_map_ulong_longlong, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_longlong, common_var_map_ulong_longlong_ec))};
            if (!common_var_map_ulong_longlong_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ulong_longlong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ulong_longlong = "var_map_ulong_longlong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ulong_longlong;
            ann_custom_MapKeyULongValueLongLong.reset();
            CompleteMemberDetail detail_var_map_ulong_longlong = TypeObjectUtils::build_complete_member_detail(name_var_map_ulong_longlong, member_ann_builtin_var_map_ulong_longlong, ann_custom_MapKeyULongValueLongLong);
            CompleteStructMember member_var_map_ulong_longlong = TypeObjectUtils::build_complete_struct_member(common_var_map_ulong_longlong, detail_var_map_ulong_longlong);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapKeyULongValueLongLong, member_var_map_ulong_longlong);
        }
        CompleteStructType struct_type_MapKeyULongValueLongLong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapKeyULongValueLongLong, header_MapKeyULongValueLongLong, member_seq_MapKeyULongValueLongLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapKeyULongValueLongLong, type_name_MapKeyULongValueLongLong.to_string(), type_ids_MapKeyULongValueLongLong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapKeyULongValueLongLong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongULongLong_type_identifier(
        TypeIdentifierPair& type_ids_MapULongULongLong)
{

    ReturnCode_t return_code_MapULongULongLong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongULongLong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongULongLong", type_ids_MapULongULongLong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongULongLong)
    {
        StructTypeFlag struct_flags_MapULongULongLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongULongLong = "MapULongULongLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongULongLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongULongLong;
        CompleteTypeDetail detail_MapULongULongLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongULongLong, ann_custom_MapULongULongLong, type_name_MapULongULongLong.to_string());
        CompleteStructHeader header_MapULongULongLong;
        header_MapULongULongLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongULongLong);
        CompleteStructMemberSeq member_seq_MapULongULongLong;
        {
            TypeIdentifierPair type_ids_var_map_ulong_ulonglong;
            ReturnCode_t return_code_var_map_ulong_ulonglong {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ulong_ulonglong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint32_t_uint64_t_unbounded", type_ids_var_map_ulong_ulonglong);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_ulonglong)
            {
                return_code_var_map_ulong_ulonglong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_ulong_ulonglong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_ulonglong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint32_t_uint64_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint32_t_uint64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_ulonglong, element_identifier_anonymous_map_uint32_t_uint64_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint32_t_uint64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_uint64_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ulong_ulonglong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_ulong_ulonglong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_ulonglong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint32_t_uint64_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint32_t_uint64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_ulonglong, key_identifier_anonymous_map_uint32_t_uint64_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint32_t_uint64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_uint64_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint32_t_uint64_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint32_t_uint64_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_uint64_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint32_t_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_uint64_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint32_t_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_uint64_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint32_t_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_uint64_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint32_t_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_uint64_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint32_t_uint64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_uint64_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_uint64_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint32_t_uint64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_uint64_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_uint64_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint32_t_uint64_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint32_t_uint64_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint32_t_uint64_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint32_t_uint64_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint32_t_uint64_t_unbounded, element_flags_anonymous_map_uint32_t_uint64_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint32_t_uint64_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint32_t_uint64_t_unbounded), key_flags_anonymous_map_uint32_t_uint64_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint32_t_uint64_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint32_t_uint64_t_unbounded", type_ids_var_map_ulong_ulonglong))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint32_t_uint64_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ulong_ulonglong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ulong_ulonglong = 0x00000000;
            bool common_var_map_ulong_ulonglong_ec {false};
            CommonStructMember common_var_map_ulong_ulonglong {TypeObjectUtils::build_common_struct_member(member_id_var_map_ulong_ulonglong, member_flags_var_map_ulong_ulonglong, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_ulonglong, common_var_map_ulong_ulonglong_ec))};
            if (!common_var_map_ulong_ulonglong_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ulong_ulonglong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ulong_ulonglong = "var_map_ulong_ulonglong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ulong_ulonglong;
            ann_custom_MapULongULongLong.reset();
            CompleteMemberDetail detail_var_map_ulong_ulonglong = TypeObjectUtils::build_complete_member_detail(name_var_map_ulong_ulonglong, member_ann_builtin_var_map_ulong_ulonglong, ann_custom_MapULongULongLong);
            CompleteStructMember member_var_map_ulong_ulonglong = TypeObjectUtils::build_complete_struct_member(common_var_map_ulong_ulonglong, detail_var_map_ulong_ulonglong);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongULongLong, member_var_map_ulong_ulonglong);
        }
        CompleteStructType struct_type_MapULongULongLong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongULongLong, header_MapULongULongLong, member_seq_MapULongULongLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongULongLong, type_name_MapULongULongLong.to_string(), type_ids_MapULongULongLong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongULongLong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongFloat_type_identifier(
        TypeIdentifierPair& type_ids_MapULongFloat)
{

    ReturnCode_t return_code_MapULongFloat {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongFloat =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongFloat", type_ids_MapULongFloat);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongFloat)
    {
        StructTypeFlag struct_flags_MapULongFloat = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongFloat = "MapULongFloat";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongFloat;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongFloat;
        CompleteTypeDetail detail_MapULongFloat = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongFloat, ann_custom_MapULongFloat, type_name_MapULongFloat.to_string());
        CompleteStructHeader header_MapULongFloat;
        header_MapULongFloat = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongFloat);
        CompleteStructMemberSeq member_seq_MapULongFloat;
        {
            TypeIdentifierPair type_ids_var_map_ulong_float;
            ReturnCode_t return_code_var_map_ulong_float {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ulong_float =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint32_t_float_unbounded", type_ids_var_map_ulong_float);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_float)
            {
                return_code_var_map_ulong_float =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_float", type_ids_var_map_ulong_float);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_float)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint32_t_float_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint32_t_float_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_float, element_identifier_anonymous_map_uint32_t_float_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint32_t_float_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_float_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ulong_float =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_ulong_float);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_float)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint32_t_float_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint32_t_float_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_float, key_identifier_anonymous_map_uint32_t_float_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint32_t_float_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_float_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint32_t_float_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint32_t_float_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_float_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint32_t_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_float_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint32_t_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_float_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint32_t_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_float_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint32_t_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_float_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint32_t_float_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_float_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_float_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint32_t_float_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_float_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_float_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint32_t_float_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint32_t_float_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint32_t_float_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint32_t_float_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint32_t_float_unbounded, element_flags_anonymous_map_uint32_t_float_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint32_t_float_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint32_t_float_unbounded), key_flags_anonymous_map_uint32_t_float_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint32_t_float_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint32_t_float_unbounded", type_ids_var_map_ulong_float))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint32_t_float_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ulong_float = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ulong_float = 0x00000000;
            bool common_var_map_ulong_float_ec {false};
            CommonStructMember common_var_map_ulong_float {TypeObjectUtils::build_common_struct_member(member_id_var_map_ulong_float, member_flags_var_map_ulong_float, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_float, common_var_map_ulong_float_ec))};
            if (!common_var_map_ulong_float_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ulong_float member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ulong_float = "var_map_ulong_float";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ulong_float;
            ann_custom_MapULongFloat.reset();
            CompleteMemberDetail detail_var_map_ulong_float = TypeObjectUtils::build_complete_member_detail(name_var_map_ulong_float, member_ann_builtin_var_map_ulong_float, ann_custom_MapULongFloat);
            CompleteStructMember member_var_map_ulong_float = TypeObjectUtils::build_complete_struct_member(common_var_map_ulong_float, detail_var_map_ulong_float);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongFloat, member_var_map_ulong_float);
        }
        CompleteStructType struct_type_MapULongFloat = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongFloat, header_MapULongFloat, member_seq_MapULongFloat);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongFloat, type_name_MapULongFloat.to_string(), type_ids_MapULongFloat))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongFloat already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongDouble_type_identifier(
        TypeIdentifierPair& type_ids_MapULongDouble)
{

    ReturnCode_t return_code_MapULongDouble {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongDouble =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongDouble", type_ids_MapULongDouble);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongDouble)
    {
        StructTypeFlag struct_flags_MapULongDouble = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongDouble = "MapULongDouble";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongDouble;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongDouble;
        CompleteTypeDetail detail_MapULongDouble = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongDouble, ann_custom_MapULongDouble, type_name_MapULongDouble.to_string());
        CompleteStructHeader header_MapULongDouble;
        header_MapULongDouble = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongDouble);
        CompleteStructMemberSeq member_seq_MapULongDouble;
        {
            TypeIdentifierPair type_ids_var_map_ulong_double;
            ReturnCode_t return_code_var_map_ulong_double {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ulong_double =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint32_t_double_unbounded", type_ids_var_map_ulong_double);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_double)
            {
                return_code_var_map_ulong_double =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_double", type_ids_var_map_ulong_double);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_double)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint32_t_double_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint32_t_double_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_double, element_identifier_anonymous_map_uint32_t_double_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint32_t_double_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_double_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ulong_double =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_ulong_double);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_double)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint32_t_double_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint32_t_double_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_double, key_identifier_anonymous_map_uint32_t_double_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint32_t_double_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_double_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint32_t_double_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint32_t_double_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_double_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint32_t_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_double_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint32_t_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_double_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint32_t_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_double_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint32_t_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_double_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint32_t_double_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_double_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_double_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint32_t_double_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_double_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_double_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint32_t_double_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint32_t_double_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint32_t_double_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint32_t_double_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint32_t_double_unbounded, element_flags_anonymous_map_uint32_t_double_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint32_t_double_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint32_t_double_unbounded), key_flags_anonymous_map_uint32_t_double_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint32_t_double_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint32_t_double_unbounded", type_ids_var_map_ulong_double))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint32_t_double_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ulong_double = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ulong_double = 0x00000000;
            bool common_var_map_ulong_double_ec {false};
            CommonStructMember common_var_map_ulong_double {TypeObjectUtils::build_common_struct_member(member_id_var_map_ulong_double, member_flags_var_map_ulong_double, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_double, common_var_map_ulong_double_ec))};
            if (!common_var_map_ulong_double_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ulong_double member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ulong_double = "var_map_ulong_double";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ulong_double;
            ann_custom_MapULongDouble.reset();
            CompleteMemberDetail detail_var_map_ulong_double = TypeObjectUtils::build_complete_member_detail(name_var_map_ulong_double, member_ann_builtin_var_map_ulong_double, ann_custom_MapULongDouble);
            CompleteStructMember member_var_map_ulong_double = TypeObjectUtils::build_complete_struct_member(common_var_map_ulong_double, detail_var_map_ulong_double);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongDouble, member_var_map_ulong_double);
        }
        CompleteStructType struct_type_MapULongDouble = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongDouble, header_MapULongDouble, member_seq_MapULongDouble);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongDouble, type_name_MapULongDouble.to_string(), type_ids_MapULongDouble))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongDouble already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapKeyULongValueLongDouble_type_identifier(
        TypeIdentifierPair& type_ids_MapKeyULongValueLongDouble)
{

    ReturnCode_t return_code_MapKeyULongValueLongDouble {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapKeyULongValueLongDouble =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapKeyULongValueLongDouble", type_ids_MapKeyULongValueLongDouble);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapKeyULongValueLongDouble)
    {
        StructTypeFlag struct_flags_MapKeyULongValueLongDouble = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapKeyULongValueLongDouble = "MapKeyULongValueLongDouble";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapKeyULongValueLongDouble;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapKeyULongValueLongDouble;
        CompleteTypeDetail detail_MapKeyULongValueLongDouble = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapKeyULongValueLongDouble, ann_custom_MapKeyULongValueLongDouble, type_name_MapKeyULongValueLongDouble.to_string());
        CompleteStructHeader header_MapKeyULongValueLongDouble;
        header_MapKeyULongValueLongDouble = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapKeyULongValueLongDouble);
        CompleteStructMemberSeq member_seq_MapKeyULongValueLongDouble;
        {
            TypeIdentifierPair type_ids_var_map_ulong_longdouble;
            ReturnCode_t return_code_var_map_ulong_longdouble {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ulong_longdouble =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint32_t_longdouble_unbounded", type_ids_var_map_ulong_longdouble);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_longdouble)
            {
                return_code_var_map_ulong_longdouble =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_longdouble", type_ids_var_map_ulong_longdouble);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_longdouble)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint32_t_longdouble_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint32_t_longdouble_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_longdouble, element_identifier_anonymous_map_uint32_t_longdouble_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint32_t_longdouble_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_longdouble_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ulong_longdouble =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_ulong_longdouble);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_longdouble)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint32_t_longdouble_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint32_t_longdouble_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_longdouble, key_identifier_anonymous_map_uint32_t_longdouble_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint32_t_longdouble_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_longdouble_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint32_t_longdouble_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint32_t_longdouble_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_longdouble_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint32_t_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_longdouble_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint32_t_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_longdouble_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint32_t_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_longdouble_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint32_t_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_longdouble_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint32_t_longdouble_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_longdouble_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_longdouble_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint32_t_longdouble_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_longdouble_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_longdouble_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint32_t_longdouble_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint32_t_longdouble_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint32_t_longdouble_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint32_t_longdouble_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint32_t_longdouble_unbounded, element_flags_anonymous_map_uint32_t_longdouble_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint32_t_longdouble_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint32_t_longdouble_unbounded), key_flags_anonymous_map_uint32_t_longdouble_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint32_t_longdouble_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint32_t_longdouble_unbounded", type_ids_var_map_ulong_longdouble))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint32_t_longdouble_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ulong_longdouble = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ulong_longdouble = 0x00000000;
            bool common_var_map_ulong_longdouble_ec {false};
            CommonStructMember common_var_map_ulong_longdouble {TypeObjectUtils::build_common_struct_member(member_id_var_map_ulong_longdouble, member_flags_var_map_ulong_longdouble, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_longdouble, common_var_map_ulong_longdouble_ec))};
            if (!common_var_map_ulong_longdouble_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ulong_longdouble member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ulong_longdouble = "var_map_ulong_longdouble";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ulong_longdouble;
            ann_custom_MapKeyULongValueLongDouble.reset();
            CompleteMemberDetail detail_var_map_ulong_longdouble = TypeObjectUtils::build_complete_member_detail(name_var_map_ulong_longdouble, member_ann_builtin_var_map_ulong_longdouble, ann_custom_MapKeyULongValueLongDouble);
            CompleteStructMember member_var_map_ulong_longdouble = TypeObjectUtils::build_complete_struct_member(common_var_map_ulong_longdouble, detail_var_map_ulong_longdouble);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapKeyULongValueLongDouble, member_var_map_ulong_longdouble);
        }
        CompleteStructType struct_type_MapKeyULongValueLongDouble = TypeObjectUtils::build_complete_struct_type(struct_flags_MapKeyULongValueLongDouble, header_MapKeyULongValueLongDouble, member_seq_MapKeyULongValueLongDouble);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapKeyULongValueLongDouble, type_name_MapKeyULongValueLongDouble.to_string(), type_ids_MapKeyULongValueLongDouble))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapKeyULongValueLongDouble already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongBoolean_type_identifier(
        TypeIdentifierPair& type_ids_MapULongBoolean)
{

    ReturnCode_t return_code_MapULongBoolean {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongBoolean =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongBoolean", type_ids_MapULongBoolean);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongBoolean)
    {
        StructTypeFlag struct_flags_MapULongBoolean = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongBoolean = "MapULongBoolean";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongBoolean;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongBoolean;
        CompleteTypeDetail detail_MapULongBoolean = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongBoolean, ann_custom_MapULongBoolean, type_name_MapULongBoolean.to_string());
        CompleteStructHeader header_MapULongBoolean;
        header_MapULongBoolean = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongBoolean);
        CompleteStructMemberSeq member_seq_MapULongBoolean;
        {
            TypeIdentifierPair type_ids_var_map_ulong_boolean;
            ReturnCode_t return_code_var_map_ulong_boolean {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ulong_boolean =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint32_t_bool_unbounded", type_ids_var_map_ulong_boolean);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_boolean)
            {
                return_code_var_map_ulong_boolean =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_bool", type_ids_var_map_ulong_boolean);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_boolean)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint32_t_bool_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint32_t_bool_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_boolean, element_identifier_anonymous_map_uint32_t_bool_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint32_t_bool_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_bool_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ulong_boolean =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_ulong_boolean);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_boolean)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint32_t_bool_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint32_t_bool_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_boolean, key_identifier_anonymous_map_uint32_t_bool_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint32_t_bool_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_bool_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint32_t_bool_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint32_t_bool_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_bool_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint32_t_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_bool_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint32_t_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_bool_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint32_t_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_bool_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint32_t_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_bool_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint32_t_bool_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_bool_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_bool_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint32_t_bool_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_bool_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_bool_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint32_t_bool_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint32_t_bool_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint32_t_bool_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint32_t_bool_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint32_t_bool_unbounded, element_flags_anonymous_map_uint32_t_bool_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint32_t_bool_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint32_t_bool_unbounded), key_flags_anonymous_map_uint32_t_bool_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint32_t_bool_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint32_t_bool_unbounded", type_ids_var_map_ulong_boolean))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint32_t_bool_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ulong_boolean = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ulong_boolean = 0x00000000;
            bool common_var_map_ulong_boolean_ec {false};
            CommonStructMember common_var_map_ulong_boolean {TypeObjectUtils::build_common_struct_member(member_id_var_map_ulong_boolean, member_flags_var_map_ulong_boolean, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_boolean, common_var_map_ulong_boolean_ec))};
            if (!common_var_map_ulong_boolean_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ulong_boolean member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ulong_boolean = "var_map_ulong_boolean";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ulong_boolean;
            ann_custom_MapULongBoolean.reset();
            CompleteMemberDetail detail_var_map_ulong_boolean = TypeObjectUtils::build_complete_member_detail(name_var_map_ulong_boolean, member_ann_builtin_var_map_ulong_boolean, ann_custom_MapULongBoolean);
            CompleteStructMember member_var_map_ulong_boolean = TypeObjectUtils::build_complete_struct_member(common_var_map_ulong_boolean, detail_var_map_ulong_boolean);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongBoolean, member_var_map_ulong_boolean);
        }
        CompleteStructType struct_type_MapULongBoolean = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongBoolean, header_MapULongBoolean, member_seq_MapULongBoolean);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongBoolean, type_name_MapULongBoolean.to_string(), type_ids_MapULongBoolean))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongBoolean already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongOctet_type_identifier(
        TypeIdentifierPair& type_ids_MapULongOctet)
{

    ReturnCode_t return_code_MapULongOctet {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongOctet =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongOctet", type_ids_MapULongOctet);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongOctet)
    {
        StructTypeFlag struct_flags_MapULongOctet = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongOctet = "MapULongOctet";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongOctet;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongOctet;
        CompleteTypeDetail detail_MapULongOctet = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongOctet, ann_custom_MapULongOctet, type_name_MapULongOctet.to_string());
        CompleteStructHeader header_MapULongOctet;
        header_MapULongOctet = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongOctet);
        CompleteStructMemberSeq member_seq_MapULongOctet;
        {
            TypeIdentifierPair type_ids_var_map_ulong_octet;
            ReturnCode_t return_code_var_map_ulong_octet {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ulong_octet =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint32_t_byte_unbounded", type_ids_var_map_ulong_octet);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_octet)
            {
                return_code_var_map_ulong_octet =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_byte", type_ids_var_map_ulong_octet);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_octet)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint32_t_byte_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint32_t_byte_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_octet, element_identifier_anonymous_map_uint32_t_byte_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint32_t_byte_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_byte_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ulong_octet =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_ulong_octet);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_octet)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint32_t_byte_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint32_t_byte_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_octet, key_identifier_anonymous_map_uint32_t_byte_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint32_t_byte_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_byte_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint32_t_byte_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint32_t_byte_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_byte_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint32_t_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_byte_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint32_t_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_byte_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint32_t_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_byte_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint32_t_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_byte_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint32_t_byte_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_byte_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_byte_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint32_t_byte_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_byte_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_byte_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint32_t_byte_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint32_t_byte_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint32_t_byte_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint32_t_byte_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint32_t_byte_unbounded, element_flags_anonymous_map_uint32_t_byte_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint32_t_byte_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint32_t_byte_unbounded), key_flags_anonymous_map_uint32_t_byte_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint32_t_byte_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint32_t_byte_unbounded", type_ids_var_map_ulong_octet))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint32_t_byte_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ulong_octet = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ulong_octet = 0x00000000;
            bool common_var_map_ulong_octet_ec {false};
            CommonStructMember common_var_map_ulong_octet {TypeObjectUtils::build_common_struct_member(member_id_var_map_ulong_octet, member_flags_var_map_ulong_octet, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_octet, common_var_map_ulong_octet_ec))};
            if (!common_var_map_ulong_octet_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ulong_octet member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ulong_octet = "var_map_ulong_octet";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ulong_octet;
            ann_custom_MapULongOctet.reset();
            CompleteMemberDetail detail_var_map_ulong_octet = TypeObjectUtils::build_complete_member_detail(name_var_map_ulong_octet, member_ann_builtin_var_map_ulong_octet, ann_custom_MapULongOctet);
            CompleteStructMember member_var_map_ulong_octet = TypeObjectUtils::build_complete_struct_member(common_var_map_ulong_octet, detail_var_map_ulong_octet);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongOctet, member_var_map_ulong_octet);
        }
        CompleteStructType struct_type_MapULongOctet = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongOctet, header_MapULongOctet, member_seq_MapULongOctet);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongOctet, type_name_MapULongOctet.to_string(), type_ids_MapULongOctet))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongOctet already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongChar_type_identifier(
        TypeIdentifierPair& type_ids_MapULongChar)
{

    ReturnCode_t return_code_MapULongChar {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongChar =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongChar", type_ids_MapULongChar);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongChar)
    {
        StructTypeFlag struct_flags_MapULongChar = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongChar = "MapULongChar";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongChar;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongChar;
        CompleteTypeDetail detail_MapULongChar = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongChar, ann_custom_MapULongChar, type_name_MapULongChar.to_string());
        CompleteStructHeader header_MapULongChar;
        header_MapULongChar = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongChar);
        CompleteStructMemberSeq member_seq_MapULongChar;
        {
            TypeIdentifierPair type_ids_var_map_ulong_char;
            ReturnCode_t return_code_var_map_ulong_char {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ulong_char =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint32_t_char_unbounded", type_ids_var_map_ulong_char);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_char)
            {
                return_code_var_map_ulong_char =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_char", type_ids_var_map_ulong_char);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_char)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint32_t_char_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint32_t_char_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_char, element_identifier_anonymous_map_uint32_t_char_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint32_t_char_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_char_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ulong_char =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_ulong_char);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_char)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint32_t_char_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint32_t_char_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_char, key_identifier_anonymous_map_uint32_t_char_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint32_t_char_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_char_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint32_t_char_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint32_t_char_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_char_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint32_t_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_char_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint32_t_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_char_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint32_t_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_char_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint32_t_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_char_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint32_t_char_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_char_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_char_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint32_t_char_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_char_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_char_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint32_t_char_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint32_t_char_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint32_t_char_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint32_t_char_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint32_t_char_unbounded, element_flags_anonymous_map_uint32_t_char_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint32_t_char_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint32_t_char_unbounded), key_flags_anonymous_map_uint32_t_char_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint32_t_char_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint32_t_char_unbounded", type_ids_var_map_ulong_char))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint32_t_char_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ulong_char = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ulong_char = 0x00000000;
            bool common_var_map_ulong_char_ec {false};
            CommonStructMember common_var_map_ulong_char {TypeObjectUtils::build_common_struct_member(member_id_var_map_ulong_char, member_flags_var_map_ulong_char, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_char, common_var_map_ulong_char_ec))};
            if (!common_var_map_ulong_char_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ulong_char member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ulong_char = "var_map_ulong_char";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ulong_char;
            ann_custom_MapULongChar.reset();
            CompleteMemberDetail detail_var_map_ulong_char = TypeObjectUtils::build_complete_member_detail(name_var_map_ulong_char, member_ann_builtin_var_map_ulong_char, ann_custom_MapULongChar);
            CompleteStructMember member_var_map_ulong_char = TypeObjectUtils::build_complete_struct_member(common_var_map_ulong_char, detail_var_map_ulong_char);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongChar, member_var_map_ulong_char);
        }
        CompleteStructType struct_type_MapULongChar = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongChar, header_MapULongChar, member_seq_MapULongChar);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongChar, type_name_MapULongChar.to_string(), type_ids_MapULongChar))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongChar already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongWChar_type_identifier(
        TypeIdentifierPair& type_ids_MapULongWChar)
{

    ReturnCode_t return_code_MapULongWChar {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongWChar =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongWChar", type_ids_MapULongWChar);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongWChar)
    {
        StructTypeFlag struct_flags_MapULongWChar = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongWChar = "MapULongWChar";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongWChar;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongWChar;
        CompleteTypeDetail detail_MapULongWChar = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongWChar, ann_custom_MapULongWChar, type_name_MapULongWChar.to_string());
        CompleteStructHeader header_MapULongWChar;
        header_MapULongWChar = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongWChar);
        CompleteStructMemberSeq member_seq_MapULongWChar;
        {
            TypeIdentifierPair type_ids_var_map_ulong_wchar;
            ReturnCode_t return_code_var_map_ulong_wchar {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ulong_wchar =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint32_t_wchar_t_unbounded", type_ids_var_map_ulong_wchar);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_wchar)
            {
                return_code_var_map_ulong_wchar =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_wchar_t", type_ids_var_map_ulong_wchar);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_wchar)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint32_t_wchar_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint32_t_wchar_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_wchar, element_identifier_anonymous_map_uint32_t_wchar_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint32_t_wchar_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_wchar_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ulong_wchar =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_ulong_wchar);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_wchar)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint32_t_wchar_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint32_t_wchar_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_wchar, key_identifier_anonymous_map_uint32_t_wchar_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint32_t_wchar_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_wchar_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint32_t_wchar_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint32_t_wchar_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_wchar_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint32_t_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_wchar_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint32_t_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_wchar_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint32_t_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_wchar_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint32_t_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_wchar_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint32_t_wchar_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_wchar_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_wchar_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint32_t_wchar_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_wchar_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_wchar_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint32_t_wchar_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint32_t_wchar_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint32_t_wchar_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint32_t_wchar_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint32_t_wchar_t_unbounded, element_flags_anonymous_map_uint32_t_wchar_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint32_t_wchar_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint32_t_wchar_t_unbounded), key_flags_anonymous_map_uint32_t_wchar_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint32_t_wchar_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint32_t_wchar_t_unbounded", type_ids_var_map_ulong_wchar))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint32_t_wchar_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ulong_wchar = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ulong_wchar = 0x00000000;
            bool common_var_map_ulong_wchar_ec {false};
            CommonStructMember common_var_map_ulong_wchar {TypeObjectUtils::build_common_struct_member(member_id_var_map_ulong_wchar, member_flags_var_map_ulong_wchar, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_wchar, common_var_map_ulong_wchar_ec))};
            if (!common_var_map_ulong_wchar_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ulong_wchar member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ulong_wchar = "var_map_ulong_wchar";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ulong_wchar;
            ann_custom_MapULongWChar.reset();
            CompleteMemberDetail detail_var_map_ulong_wchar = TypeObjectUtils::build_complete_member_detail(name_var_map_ulong_wchar, member_ann_builtin_var_map_ulong_wchar, ann_custom_MapULongWChar);
            CompleteStructMember member_var_map_ulong_wchar = TypeObjectUtils::build_complete_struct_member(common_var_map_ulong_wchar, detail_var_map_ulong_wchar);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongWChar, member_var_map_ulong_wchar);
        }
        CompleteStructType struct_type_MapULongWChar = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongWChar, header_MapULongWChar, member_seq_MapULongWChar);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongWChar, type_name_MapULongWChar.to_string(), type_ids_MapULongWChar))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongWChar already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongString_type_identifier(
        TypeIdentifierPair& type_ids_MapULongString)
{

    ReturnCode_t return_code_MapULongString {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongString =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongString", type_ids_MapULongString);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongString)
    {
        StructTypeFlag struct_flags_MapULongString = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongString = "MapULongString";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongString;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongString;
        CompleteTypeDetail detail_MapULongString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongString, ann_custom_MapULongString, type_name_MapULongString.to_string());
        CompleteStructHeader header_MapULongString;
        header_MapULongString = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongString);
        CompleteStructMemberSeq member_seq_MapULongString;
        {
            TypeIdentifierPair type_ids_var_map_ulong_string;
            ReturnCode_t return_code_var_map_ulong_string {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ulong_string =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint32_t_anonymous_string_unbounded_unbounded", type_ids_var_map_ulong_string);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_string)
            {
                return_code_var_map_ulong_string =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_ulong_string);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_string)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_ulong_string))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool element_identifier_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_string, element_identifier_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_anonymous_string_unbounded_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ulong_string =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_ulong_string);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_string)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_string, key_identifier_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_anonymous_string_unbounded_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded, element_flags_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded), key_flags_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint32_t_anonymous_string_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint32_t_anonymous_string_unbounded_unbounded", type_ids_var_map_ulong_string))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint32_t_anonymous_string_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ulong_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ulong_string = 0x00000000;
            bool common_var_map_ulong_string_ec {false};
            CommonStructMember common_var_map_ulong_string {TypeObjectUtils::build_common_struct_member(member_id_var_map_ulong_string, member_flags_var_map_ulong_string, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_string, common_var_map_ulong_string_ec))};
            if (!common_var_map_ulong_string_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ulong_string member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ulong_string = "var_map_ulong_string";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ulong_string;
            ann_custom_MapULongString.reset();
            CompleteMemberDetail detail_var_map_ulong_string = TypeObjectUtils::build_complete_member_detail(name_var_map_ulong_string, member_ann_builtin_var_map_ulong_string, ann_custom_MapULongString);
            CompleteStructMember member_var_map_ulong_string = TypeObjectUtils::build_complete_struct_member(common_var_map_ulong_string, detail_var_map_ulong_string);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongString, member_var_map_ulong_string);
        }
        CompleteStructType struct_type_MapULongString = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongString, header_MapULongString, member_seq_MapULongString);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongString, type_name_MapULongString.to_string(), type_ids_MapULongString))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongString already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongWString_type_identifier(
        TypeIdentifierPair& type_ids_MapULongWString)
{

    ReturnCode_t return_code_MapULongWString {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongWString =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongWString", type_ids_MapULongWString);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongWString)
    {
        StructTypeFlag struct_flags_MapULongWString = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongWString = "MapULongWString";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongWString;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongWString;
        CompleteTypeDetail detail_MapULongWString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongWString, ann_custom_MapULongWString, type_name_MapULongWString.to_string());
        CompleteStructHeader header_MapULongWString;
        header_MapULongWString = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongWString);
        CompleteStructMemberSeq member_seq_MapULongWString;
        {
            TypeIdentifierPair type_ids_var_map_ulong_wstring;
            ReturnCode_t return_code_var_map_ulong_wstring {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ulong_wstring =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded", type_ids_var_map_ulong_wstring);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_wstring)
            {
                return_code_var_map_ulong_wstring =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_ulong_wstring);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_wstring)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_ulong_wstring, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool element_identifier_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_wstring, element_identifier_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ulong_wstring =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_ulong_wstring);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_wstring)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_wstring, key_identifier_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded, element_flags_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded), key_flags_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded", type_ids_var_map_ulong_wstring))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint32_t_anonymous_wstring_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ulong_wstring = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ulong_wstring = 0x00000000;
            bool common_var_map_ulong_wstring_ec {false};
            CommonStructMember common_var_map_ulong_wstring {TypeObjectUtils::build_common_struct_member(member_id_var_map_ulong_wstring, member_flags_var_map_ulong_wstring, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_wstring, common_var_map_ulong_wstring_ec))};
            if (!common_var_map_ulong_wstring_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ulong_wstring member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ulong_wstring = "var_map_ulong_wstring";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ulong_wstring;
            ann_custom_MapULongWString.reset();
            CompleteMemberDetail detail_var_map_ulong_wstring = TypeObjectUtils::build_complete_member_detail(name_var_map_ulong_wstring, member_ann_builtin_var_map_ulong_wstring, ann_custom_MapULongWString);
            CompleteStructMember member_var_map_ulong_wstring = TypeObjectUtils::build_complete_struct_member(common_var_map_ulong_wstring, detail_var_map_ulong_wstring);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongWString, member_var_map_ulong_wstring);
        }
        CompleteStructType struct_type_MapULongWString = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongWString, header_MapULongWString, member_seq_MapULongWString);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongWString, type_name_MapULongWString.to_string(), type_ids_MapULongWString))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongWString already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongInnerAliasBoundedStringHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapULongInnerAliasBoundedStringHelper)
{

    ReturnCode_t return_code_MapULongInnerAliasBoundedStringHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongInnerAliasBoundedStringHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongInnerAliasBoundedStringHelper", type_ids_MapULongInnerAliasBoundedStringHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongInnerAliasBoundedStringHelper)
    {
        StructTypeFlag struct_flags_MapULongInnerAliasBoundedStringHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongInnerAliasBoundedStringHelper = "MapULongInnerAliasBoundedStringHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongInnerAliasBoundedStringHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongInnerAliasBoundedStringHelper;
        CompleteTypeDetail detail_MapULongInnerAliasBoundedStringHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongInnerAliasBoundedStringHelper, ann_custom_MapULongInnerAliasBoundedStringHelper, type_name_MapULongInnerAliasBoundedStringHelper.to_string());
        CompleteStructHeader header_MapULongInnerAliasBoundedStringHelper;
        header_MapULongInnerAliasBoundedStringHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongInnerAliasBoundedStringHelper);
        CompleteStructMemberSeq member_seq_MapULongInnerAliasBoundedStringHelper;
        {
            TypeIdentifierPair type_ids_var_map_ulong_inneraliasboundedstringhelper;
            ReturnCode_t return_code_var_map_ulong_inneraliasboundedstringhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ulong_inneraliasboundedstringhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint32_t_anonymous_string_10_unbounded", type_ids_var_map_ulong_inneraliasboundedstringhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_inneraliasboundedstringhelper)
            {
                return_code_var_map_ulong_inneraliasboundedstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_ulong_inneraliasboundedstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_inneraliasboundedstringhelper)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_ulong_inneraliasboundedstringhelper);
                }
                bool element_identifier_anonymous_map_uint32_t_anonymous_string_10_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint32_t_anonymous_string_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_inneraliasboundedstringhelper, element_identifier_anonymous_map_uint32_t_anonymous_string_10_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint32_t_anonymous_string_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_anonymous_string_10_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ulong_inneraliasboundedstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_ulong_inneraliasboundedstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_inneraliasboundedstringhelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint32_t_anonymous_string_10_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint32_t_anonymous_string_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_inneraliasboundedstringhelper, key_identifier_anonymous_map_uint32_t_anonymous_string_10_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint32_t_anonymous_string_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_anonymous_string_10_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint32_t_anonymous_string_10_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint32_t_anonymous_string_10_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_string_10_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint32_t_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_string_10_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint32_t_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_string_10_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint32_t_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_string_10_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint32_t_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_string_10_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint32_t_anonymous_string_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_string_10_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_string_10_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint32_t_anonymous_string_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_string_10_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_string_10_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint32_t_anonymous_string_10_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint32_t_anonymous_string_10_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint32_t_anonymous_string_10_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint32_t_anonymous_string_10_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint32_t_anonymous_string_10_unbounded, element_flags_anonymous_map_uint32_t_anonymous_string_10_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint32_t_anonymous_string_10_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint32_t_anonymous_string_10_unbounded), key_flags_anonymous_map_uint32_t_anonymous_string_10_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint32_t_anonymous_string_10_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint32_t_anonymous_string_10_unbounded", type_ids_var_map_ulong_inneraliasboundedstringhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint32_t_anonymous_string_10_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ulong_inneraliasboundedstringhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ulong_inneraliasboundedstringhelper = 0x00000000;
            bool common_var_map_ulong_inneraliasboundedstringhelper_ec {false};
            CommonStructMember common_var_map_ulong_inneraliasboundedstringhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_ulong_inneraliasboundedstringhelper, member_flags_var_map_ulong_inneraliasboundedstringhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_inneraliasboundedstringhelper, common_var_map_ulong_inneraliasboundedstringhelper_ec))};
            if (!common_var_map_ulong_inneraliasboundedstringhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ulong_inneraliasboundedstringhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ulong_inneraliasboundedstringhelper = "var_map_ulong_inneraliasboundedstringhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ulong_inneraliasboundedstringhelper;
            ann_custom_MapULongInnerAliasBoundedStringHelper.reset();
            CompleteMemberDetail detail_var_map_ulong_inneraliasboundedstringhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_ulong_inneraliasboundedstringhelper, member_ann_builtin_var_map_ulong_inneraliasboundedstringhelper, ann_custom_MapULongInnerAliasBoundedStringHelper);
            CompleteStructMember member_var_map_ulong_inneraliasboundedstringhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_ulong_inneraliasboundedstringhelper, detail_var_map_ulong_inneraliasboundedstringhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongInnerAliasBoundedStringHelper, member_var_map_ulong_inneraliasboundedstringhelper);
        }
        CompleteStructType struct_type_MapULongInnerAliasBoundedStringHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongInnerAliasBoundedStringHelper, header_MapULongInnerAliasBoundedStringHelper, member_seq_MapULongInnerAliasBoundedStringHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongInnerAliasBoundedStringHelper, type_name_MapULongInnerAliasBoundedStringHelper.to_string(), type_ids_MapULongInnerAliasBoundedStringHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongInnerAliasBoundedStringHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongInnerAliasBoundedWStringHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapULongInnerAliasBoundedWStringHelper)
{

    ReturnCode_t return_code_MapULongInnerAliasBoundedWStringHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongInnerAliasBoundedWStringHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongInnerAliasBoundedWStringHelper", type_ids_MapULongInnerAliasBoundedWStringHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongInnerAliasBoundedWStringHelper)
    {
        StructTypeFlag struct_flags_MapULongInnerAliasBoundedWStringHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongInnerAliasBoundedWStringHelper = "MapULongInnerAliasBoundedWStringHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongInnerAliasBoundedWStringHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongInnerAliasBoundedWStringHelper;
        CompleteTypeDetail detail_MapULongInnerAliasBoundedWStringHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongInnerAliasBoundedWStringHelper, ann_custom_MapULongInnerAliasBoundedWStringHelper, type_name_MapULongInnerAliasBoundedWStringHelper.to_string());
        CompleteStructHeader header_MapULongInnerAliasBoundedWStringHelper;
        header_MapULongInnerAliasBoundedWStringHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongInnerAliasBoundedWStringHelper);
        CompleteStructMemberSeq member_seq_MapULongInnerAliasBoundedWStringHelper;
        {
            TypeIdentifierPair type_ids_var_map_ulong_inneraliasboundedwstringhelper;
            ReturnCode_t return_code_var_map_ulong_inneraliasboundedwstringhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ulong_inneraliasboundedwstringhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint32_t_anonymous_wstring_10_unbounded", type_ids_var_map_ulong_inneraliasboundedwstringhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_inneraliasboundedwstringhelper)
            {
                return_code_var_map_ulong_inneraliasboundedwstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_ulong_inneraliasboundedwstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_inneraliasboundedwstringhelper)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_ulong_inneraliasboundedwstringhelper);
                }
                bool element_identifier_anonymous_map_uint32_t_anonymous_wstring_10_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint32_t_anonymous_wstring_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_inneraliasboundedwstringhelper, element_identifier_anonymous_map_uint32_t_anonymous_wstring_10_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint32_t_anonymous_wstring_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_anonymous_wstring_10_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ulong_inneraliasboundedwstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_ulong_inneraliasboundedwstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_inneraliasboundedwstringhelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint32_t_anonymous_wstring_10_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint32_t_anonymous_wstring_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_inneraliasboundedwstringhelper, key_identifier_anonymous_map_uint32_t_anonymous_wstring_10_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint32_t_anonymous_wstring_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_anonymous_wstring_10_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint32_t_anonymous_wstring_10_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint32_t_anonymous_wstring_10_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_wstring_10_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint32_t_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_wstring_10_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint32_t_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_wstring_10_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint32_t_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_wstring_10_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint32_t_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_wstring_10_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint32_t_anonymous_wstring_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_wstring_10_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_wstring_10_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint32_t_anonymous_wstring_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_wstring_10_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_wstring_10_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint32_t_anonymous_wstring_10_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint32_t_anonymous_wstring_10_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint32_t_anonymous_wstring_10_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint32_t_anonymous_wstring_10_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint32_t_anonymous_wstring_10_unbounded, element_flags_anonymous_map_uint32_t_anonymous_wstring_10_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint32_t_anonymous_wstring_10_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint32_t_anonymous_wstring_10_unbounded), key_flags_anonymous_map_uint32_t_anonymous_wstring_10_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint32_t_anonymous_wstring_10_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint32_t_anonymous_wstring_10_unbounded", type_ids_var_map_ulong_inneraliasboundedwstringhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint32_t_anonymous_wstring_10_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ulong_inneraliasboundedwstringhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ulong_inneraliasboundedwstringhelper = 0x00000000;
            bool common_var_map_ulong_inneraliasboundedwstringhelper_ec {false};
            CommonStructMember common_var_map_ulong_inneraliasboundedwstringhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_ulong_inneraliasboundedwstringhelper, member_flags_var_map_ulong_inneraliasboundedwstringhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_inneraliasboundedwstringhelper, common_var_map_ulong_inneraliasboundedwstringhelper_ec))};
            if (!common_var_map_ulong_inneraliasboundedwstringhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ulong_inneraliasboundedwstringhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ulong_inneraliasboundedwstringhelper = "var_map_ulong_inneraliasboundedwstringhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ulong_inneraliasboundedwstringhelper;
            ann_custom_MapULongInnerAliasBoundedWStringHelper.reset();
            CompleteMemberDetail detail_var_map_ulong_inneraliasboundedwstringhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_ulong_inneraliasboundedwstringhelper, member_ann_builtin_var_map_ulong_inneraliasboundedwstringhelper, ann_custom_MapULongInnerAliasBoundedWStringHelper);
            CompleteStructMember member_var_map_ulong_inneraliasboundedwstringhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_ulong_inneraliasboundedwstringhelper, detail_var_map_ulong_inneraliasboundedwstringhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongInnerAliasBoundedWStringHelper, member_var_map_ulong_inneraliasboundedwstringhelper);
        }
        CompleteStructType struct_type_MapULongInnerAliasBoundedWStringHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongInnerAliasBoundedWStringHelper, header_MapULongInnerAliasBoundedWStringHelper, member_seq_MapULongInnerAliasBoundedWStringHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongInnerAliasBoundedWStringHelper, type_name_MapULongInnerAliasBoundedWStringHelper.to_string(), type_ids_MapULongInnerAliasBoundedWStringHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongInnerAliasBoundedWStringHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongInnerEnumHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapULongInnerEnumHelper)
{

    ReturnCode_t return_code_MapULongInnerEnumHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongInnerEnumHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongInnerEnumHelper", type_ids_MapULongInnerEnumHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongInnerEnumHelper)
    {
        StructTypeFlag struct_flags_MapULongInnerEnumHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongInnerEnumHelper = "MapULongInnerEnumHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongInnerEnumHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongInnerEnumHelper;
        CompleteTypeDetail detail_MapULongInnerEnumHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongInnerEnumHelper, ann_custom_MapULongInnerEnumHelper, type_name_MapULongInnerEnumHelper.to_string());
        CompleteStructHeader header_MapULongInnerEnumHelper;
        header_MapULongInnerEnumHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongInnerEnumHelper);
        CompleteStructMemberSeq member_seq_MapULongInnerEnumHelper;
        {
            TypeIdentifierPair type_ids_var_map_ulong_innerenumhelper;
            ReturnCode_t return_code_var_map_ulong_innerenumhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ulong_innerenumhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint32_t_InnerEnumHelper_unbounded", type_ids_var_map_ulong_innerenumhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_innerenumhelper)
            {
                return_code_var_map_ulong_innerenumhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerEnumHelper", type_ids_var_map_ulong_innerenumhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_innerenumhelper)
                {
                ::register_InnerEnumHelper_type_identifier(type_ids_var_map_ulong_innerenumhelper);
                }
                bool element_identifier_anonymous_map_uint32_t_InnerEnumHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint32_t_InnerEnumHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_innerenumhelper, element_identifier_anonymous_map_uint32_t_InnerEnumHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint32_t_InnerEnumHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_InnerEnumHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ulong_innerenumhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_ulong_innerenumhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_innerenumhelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint32_t_InnerEnumHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint32_t_InnerEnumHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_innerenumhelper, key_identifier_anonymous_map_uint32_t_InnerEnumHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint32_t_InnerEnumHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_InnerEnumHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint32_t_InnerEnumHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint32_t_InnerEnumHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerEnumHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint32_t_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerEnumHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint32_t_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerEnumHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint32_t_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerEnumHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint32_t_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerEnumHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint32_t_InnerEnumHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerEnumHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerEnumHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint32_t_InnerEnumHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerEnumHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerEnumHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint32_t_InnerEnumHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint32_t_InnerEnumHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint32_t_InnerEnumHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint32_t_InnerEnumHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint32_t_InnerEnumHelper_unbounded, element_flags_anonymous_map_uint32_t_InnerEnumHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint32_t_InnerEnumHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint32_t_InnerEnumHelper_unbounded), key_flags_anonymous_map_uint32_t_InnerEnumHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint32_t_InnerEnumHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint32_t_InnerEnumHelper_unbounded", type_ids_var_map_ulong_innerenumhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint32_t_InnerEnumHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ulong_innerenumhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ulong_innerenumhelper = 0x00000000;
            bool common_var_map_ulong_innerenumhelper_ec {false};
            CommonStructMember common_var_map_ulong_innerenumhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_ulong_innerenumhelper, member_flags_var_map_ulong_innerenumhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_innerenumhelper, common_var_map_ulong_innerenumhelper_ec))};
            if (!common_var_map_ulong_innerenumhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ulong_innerenumhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ulong_innerenumhelper = "var_map_ulong_innerenumhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ulong_innerenumhelper;
            ann_custom_MapULongInnerEnumHelper.reset();
            CompleteMemberDetail detail_var_map_ulong_innerenumhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_ulong_innerenumhelper, member_ann_builtin_var_map_ulong_innerenumhelper, ann_custom_MapULongInnerEnumHelper);
            CompleteStructMember member_var_map_ulong_innerenumhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_ulong_innerenumhelper, detail_var_map_ulong_innerenumhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongInnerEnumHelper, member_var_map_ulong_innerenumhelper);
        }
        CompleteStructType struct_type_MapULongInnerEnumHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongInnerEnumHelper, header_MapULongInnerEnumHelper, member_seq_MapULongInnerEnumHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongInnerEnumHelper, type_name_MapULongInnerEnumHelper.to_string(), type_ids_MapULongInnerEnumHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongInnerEnumHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongInnerBitMaskHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapULongInnerBitMaskHelper)
{

    ReturnCode_t return_code_MapULongInnerBitMaskHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongInnerBitMaskHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongInnerBitMaskHelper", type_ids_MapULongInnerBitMaskHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongInnerBitMaskHelper)
    {
        StructTypeFlag struct_flags_MapULongInnerBitMaskHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongInnerBitMaskHelper = "MapULongInnerBitMaskHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongInnerBitMaskHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongInnerBitMaskHelper;
        CompleteTypeDetail detail_MapULongInnerBitMaskHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongInnerBitMaskHelper, ann_custom_MapULongInnerBitMaskHelper, type_name_MapULongInnerBitMaskHelper.to_string());
        CompleteStructHeader header_MapULongInnerBitMaskHelper;
        header_MapULongInnerBitMaskHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongInnerBitMaskHelper);
        CompleteStructMemberSeq member_seq_MapULongInnerBitMaskHelper;
        {
            TypeIdentifierPair type_ids_var_map_ulong_innerbitmaskhelper;
            ReturnCode_t return_code_var_map_ulong_innerbitmaskhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ulong_innerbitmaskhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint32_t_InnerBitMaskHelper_unbounded", type_ids_var_map_ulong_innerbitmaskhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_innerbitmaskhelper)
            {
                return_code_var_map_ulong_innerbitmaskhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerBitMaskHelper", type_ids_var_map_ulong_innerbitmaskhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_innerbitmaskhelper)
                {
                ::register_InnerBitMaskHelper_type_identifier(type_ids_var_map_ulong_innerbitmaskhelper);
                }
                bool element_identifier_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_innerbitmaskhelper, element_identifier_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_InnerBitMaskHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ulong_innerbitmaskhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_ulong_innerbitmaskhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_innerbitmaskhelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_innerbitmaskhelper, key_identifier_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_InnerBitMaskHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded, element_flags_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded), key_flags_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint32_t_InnerBitMaskHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint32_t_InnerBitMaskHelper_unbounded", type_ids_var_map_ulong_innerbitmaskhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint32_t_InnerBitMaskHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ulong_innerbitmaskhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ulong_innerbitmaskhelper = 0x00000000;
            bool common_var_map_ulong_innerbitmaskhelper_ec {false};
            CommonStructMember common_var_map_ulong_innerbitmaskhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_ulong_innerbitmaskhelper, member_flags_var_map_ulong_innerbitmaskhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_innerbitmaskhelper, common_var_map_ulong_innerbitmaskhelper_ec))};
            if (!common_var_map_ulong_innerbitmaskhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ulong_innerbitmaskhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ulong_innerbitmaskhelper = "var_map_ulong_innerbitmaskhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ulong_innerbitmaskhelper;
            ann_custom_MapULongInnerBitMaskHelper.reset();
            CompleteMemberDetail detail_var_map_ulong_innerbitmaskhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_ulong_innerbitmaskhelper, member_ann_builtin_var_map_ulong_innerbitmaskhelper, ann_custom_MapULongInnerBitMaskHelper);
            CompleteStructMember member_var_map_ulong_innerbitmaskhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_ulong_innerbitmaskhelper, detail_var_map_ulong_innerbitmaskhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongInnerBitMaskHelper, member_var_map_ulong_innerbitmaskhelper);
        }
        CompleteStructType struct_type_MapULongInnerBitMaskHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongInnerBitMaskHelper, header_MapULongInnerBitMaskHelper, member_seq_MapULongInnerBitMaskHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongInnerBitMaskHelper, type_name_MapULongInnerBitMaskHelper.to_string(), type_ids_MapULongInnerBitMaskHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongInnerBitMaskHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongInnerAliasHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapULongInnerAliasHelper)
{

    ReturnCode_t return_code_MapULongInnerAliasHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongInnerAliasHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongInnerAliasHelper", type_ids_MapULongInnerAliasHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongInnerAliasHelper)
    {
        StructTypeFlag struct_flags_MapULongInnerAliasHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongInnerAliasHelper = "MapULongInnerAliasHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongInnerAliasHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongInnerAliasHelper;
        CompleteTypeDetail detail_MapULongInnerAliasHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongInnerAliasHelper, ann_custom_MapULongInnerAliasHelper, type_name_MapULongInnerAliasHelper.to_string());
        CompleteStructHeader header_MapULongInnerAliasHelper;
        header_MapULongInnerAliasHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongInnerAliasHelper);
        CompleteStructMemberSeq member_seq_MapULongInnerAliasHelper;
        {
            TypeIdentifierPair type_ids_var_map_ulong_inneraliashelper;
            ReturnCode_t return_code_var_map_ulong_inneraliashelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ulong_inneraliashelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint32_t_InnerAliasHelper_unbounded", type_ids_var_map_ulong_inneraliashelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_inneraliashelper)
            {
                return_code_var_map_ulong_inneraliashelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerAliasHelper", type_ids_var_map_ulong_inneraliashelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_inneraliashelper)
                {
                ::register_InnerAliasHelper_type_identifier(type_ids_var_map_ulong_inneraliashelper);
                }
                bool element_identifier_anonymous_map_uint32_t_InnerAliasHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint32_t_InnerAliasHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_inneraliashelper, element_identifier_anonymous_map_uint32_t_InnerAliasHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint32_t_InnerAliasHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_InnerAliasHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ulong_inneraliashelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_ulong_inneraliashelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_inneraliashelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint32_t_InnerAliasHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint32_t_InnerAliasHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_inneraliashelper, key_identifier_anonymous_map_uint32_t_InnerAliasHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint32_t_InnerAliasHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_InnerAliasHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint32_t_InnerAliasHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint32_t_InnerAliasHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerAliasHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint32_t_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerAliasHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint32_t_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerAliasHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint32_t_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerAliasHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint32_t_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerAliasHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint32_t_InnerAliasHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerAliasHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerAliasHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint32_t_InnerAliasHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerAliasHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerAliasHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint32_t_InnerAliasHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint32_t_InnerAliasHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint32_t_InnerAliasHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint32_t_InnerAliasHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint32_t_InnerAliasHelper_unbounded, element_flags_anonymous_map_uint32_t_InnerAliasHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint32_t_InnerAliasHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint32_t_InnerAliasHelper_unbounded), key_flags_anonymous_map_uint32_t_InnerAliasHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint32_t_InnerAliasHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint32_t_InnerAliasHelper_unbounded", type_ids_var_map_ulong_inneraliashelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint32_t_InnerAliasHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ulong_inneraliashelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ulong_inneraliashelper = 0x00000000;
            bool common_var_map_ulong_inneraliashelper_ec {false};
            CommonStructMember common_var_map_ulong_inneraliashelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_ulong_inneraliashelper, member_flags_var_map_ulong_inneraliashelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_inneraliashelper, common_var_map_ulong_inneraliashelper_ec))};
            if (!common_var_map_ulong_inneraliashelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ulong_inneraliashelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ulong_inneraliashelper = "var_map_ulong_inneraliashelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ulong_inneraliashelper;
            ann_custom_MapULongInnerAliasHelper.reset();
            CompleteMemberDetail detail_var_map_ulong_inneraliashelper = TypeObjectUtils::build_complete_member_detail(name_var_map_ulong_inneraliashelper, member_ann_builtin_var_map_ulong_inneraliashelper, ann_custom_MapULongInnerAliasHelper);
            CompleteStructMember member_var_map_ulong_inneraliashelper = TypeObjectUtils::build_complete_struct_member(common_var_map_ulong_inneraliashelper, detail_var_map_ulong_inneraliashelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongInnerAliasHelper, member_var_map_ulong_inneraliashelper);
        }
        CompleteStructType struct_type_MapULongInnerAliasHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongInnerAliasHelper, header_MapULongInnerAliasHelper, member_seq_MapULongInnerAliasHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongInnerAliasHelper, type_name_MapULongInnerAliasHelper.to_string(), type_ids_MapULongInnerAliasHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongInnerAliasHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongInnerAliasArrayHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapULongInnerAliasArrayHelper)
{

    ReturnCode_t return_code_MapULongInnerAliasArrayHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongInnerAliasArrayHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongInnerAliasArrayHelper", type_ids_MapULongInnerAliasArrayHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongInnerAliasArrayHelper)
    {
        StructTypeFlag struct_flags_MapULongInnerAliasArrayHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongInnerAliasArrayHelper = "MapULongInnerAliasArrayHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongInnerAliasArrayHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongInnerAliasArrayHelper;
        CompleteTypeDetail detail_MapULongInnerAliasArrayHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongInnerAliasArrayHelper, ann_custom_MapULongInnerAliasArrayHelper, type_name_MapULongInnerAliasArrayHelper.to_string());
        CompleteStructHeader header_MapULongInnerAliasArrayHelper;
        header_MapULongInnerAliasArrayHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongInnerAliasArrayHelper);
        CompleteStructMemberSeq member_seq_MapULongInnerAliasArrayHelper;
        {
            TypeIdentifierPair type_ids_var_map_ulong_inneraliasarrayhelper;
            ReturnCode_t return_code_var_map_ulong_inneraliasarrayhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ulong_inneraliasarrayhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded", type_ids_var_map_ulong_inneraliasarrayhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_inneraliasarrayhelper)
            {
                return_code_var_map_ulong_inneraliasarrayhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_array_helper", type_ids_var_map_ulong_inneraliasarrayhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_inneraliasarrayhelper)
                {
                ::register_Inner_alias_array_helper_type_identifier(type_ids_var_map_ulong_inneraliasarrayhelper);
                }
                bool element_identifier_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_inneraliasarrayhelper, element_identifier_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ulong_inneraliasarrayhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_ulong_inneraliasarrayhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_inneraliasarrayhelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_inneraliasarrayhelper, key_identifier_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded, element_flags_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded), key_flags_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded", type_ids_var_map_ulong_inneraliasarrayhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint32_t_anonymous_array_int16_t_2_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ulong_inneraliasarrayhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ulong_inneraliasarrayhelper = 0x00000000;
            bool common_var_map_ulong_inneraliasarrayhelper_ec {false};
            CommonStructMember common_var_map_ulong_inneraliasarrayhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_ulong_inneraliasarrayhelper, member_flags_var_map_ulong_inneraliasarrayhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_inneraliasarrayhelper, common_var_map_ulong_inneraliasarrayhelper_ec))};
            if (!common_var_map_ulong_inneraliasarrayhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ulong_inneraliasarrayhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ulong_inneraliasarrayhelper = "var_map_ulong_inneraliasarrayhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ulong_inneraliasarrayhelper;
            ann_custom_MapULongInnerAliasArrayHelper.reset();
            CompleteMemberDetail detail_var_map_ulong_inneraliasarrayhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_ulong_inneraliasarrayhelper, member_ann_builtin_var_map_ulong_inneraliasarrayhelper, ann_custom_MapULongInnerAliasArrayHelper);
            CompleteStructMember member_var_map_ulong_inneraliasarrayhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_ulong_inneraliasarrayhelper, detail_var_map_ulong_inneraliasarrayhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongInnerAliasArrayHelper, member_var_map_ulong_inneraliasarrayhelper);
        }
        CompleteStructType struct_type_MapULongInnerAliasArrayHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongInnerAliasArrayHelper, header_MapULongInnerAliasArrayHelper, member_seq_MapULongInnerAliasArrayHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongInnerAliasArrayHelper, type_name_MapULongInnerAliasArrayHelper.to_string(), type_ids_MapULongInnerAliasArrayHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongInnerAliasArrayHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongInnerAliasSequenceHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapULongInnerAliasSequenceHelper)
{

    ReturnCode_t return_code_MapULongInnerAliasSequenceHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongInnerAliasSequenceHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongInnerAliasSequenceHelper", type_ids_MapULongInnerAliasSequenceHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongInnerAliasSequenceHelper)
    {
        StructTypeFlag struct_flags_MapULongInnerAliasSequenceHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongInnerAliasSequenceHelper = "MapULongInnerAliasSequenceHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongInnerAliasSequenceHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongInnerAliasSequenceHelper;
        CompleteTypeDetail detail_MapULongInnerAliasSequenceHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongInnerAliasSequenceHelper, ann_custom_MapULongInnerAliasSequenceHelper, type_name_MapULongInnerAliasSequenceHelper.to_string());
        CompleteStructHeader header_MapULongInnerAliasSequenceHelper;
        header_MapULongInnerAliasSequenceHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongInnerAliasSequenceHelper);
        CompleteStructMemberSeq member_seq_MapULongInnerAliasSequenceHelper;
        {
            TypeIdentifierPair type_ids_var_map_ulong_inneraliassequencehelper;
            ReturnCode_t return_code_var_map_ulong_inneraliassequencehelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ulong_inneraliassequencehelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded", type_ids_var_map_ulong_inneraliassequencehelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_inneraliassequencehelper)
            {
                return_code_var_map_ulong_inneraliassequencehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_sequence_helper", type_ids_var_map_ulong_inneraliassequencehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_inneraliassequencehelper)
                {
                ::register_Inner_alias_sequence_helper_type_identifier(type_ids_var_map_ulong_inneraliassequencehelper);
                }
                bool element_identifier_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_inneraliassequencehelper, element_identifier_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ulong_inneraliassequencehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_ulong_inneraliassequencehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_inneraliassequencehelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_inneraliassequencehelper, key_identifier_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded, element_flags_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded), key_flags_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded", type_ids_var_map_ulong_inneraliassequencehelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint32_t_anonymous_sequence_int16_t_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ulong_inneraliassequencehelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ulong_inneraliassequencehelper = 0x00000000;
            bool common_var_map_ulong_inneraliassequencehelper_ec {false};
            CommonStructMember common_var_map_ulong_inneraliassequencehelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_ulong_inneraliassequencehelper, member_flags_var_map_ulong_inneraliassequencehelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_inneraliassequencehelper, common_var_map_ulong_inneraliassequencehelper_ec))};
            if (!common_var_map_ulong_inneraliassequencehelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ulong_inneraliassequencehelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ulong_inneraliassequencehelper = "var_map_ulong_inneraliassequencehelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ulong_inneraliassequencehelper;
            ann_custom_MapULongInnerAliasSequenceHelper.reset();
            CompleteMemberDetail detail_var_map_ulong_inneraliassequencehelper = TypeObjectUtils::build_complete_member_detail(name_var_map_ulong_inneraliassequencehelper, member_ann_builtin_var_map_ulong_inneraliassequencehelper, ann_custom_MapULongInnerAliasSequenceHelper);
            CompleteStructMember member_var_map_ulong_inneraliassequencehelper = TypeObjectUtils::build_complete_struct_member(common_var_map_ulong_inneraliassequencehelper, detail_var_map_ulong_inneraliassequencehelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongInnerAliasSequenceHelper, member_var_map_ulong_inneraliassequencehelper);
        }
        CompleteStructType struct_type_MapULongInnerAliasSequenceHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongInnerAliasSequenceHelper, header_MapULongInnerAliasSequenceHelper, member_seq_MapULongInnerAliasSequenceHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongInnerAliasSequenceHelper, type_name_MapULongInnerAliasSequenceHelper.to_string(), type_ids_MapULongInnerAliasSequenceHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongInnerAliasSequenceHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongInnerAliasMapHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapULongInnerAliasMapHelper)
{

    ReturnCode_t return_code_MapULongInnerAliasMapHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongInnerAliasMapHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongInnerAliasMapHelper", type_ids_MapULongInnerAliasMapHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongInnerAliasMapHelper)
    {
        StructTypeFlag struct_flags_MapULongInnerAliasMapHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongInnerAliasMapHelper = "MapULongInnerAliasMapHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongInnerAliasMapHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongInnerAliasMapHelper;
        CompleteTypeDetail detail_MapULongInnerAliasMapHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongInnerAliasMapHelper, ann_custom_MapULongInnerAliasMapHelper, type_name_MapULongInnerAliasMapHelper.to_string());
        CompleteStructHeader header_MapULongInnerAliasMapHelper;
        header_MapULongInnerAliasMapHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongInnerAliasMapHelper);
        CompleteStructMemberSeq member_seq_MapULongInnerAliasMapHelper;
        {
            TypeIdentifierPair type_ids_var_map_ulong_inneraliasmaphelper;
            ReturnCode_t return_code_var_map_ulong_inneraliasmaphelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ulong_inneraliasmaphelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded", type_ids_var_map_ulong_inneraliasmaphelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_inneraliasmaphelper)
            {
                return_code_var_map_ulong_inneraliasmaphelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_map_helper", type_ids_var_map_ulong_inneraliasmaphelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_inneraliasmaphelper)
                {
                ::register_Inner_alias_map_helper_type_identifier(type_ids_var_map_ulong_inneraliasmaphelper);
                }
                bool element_identifier_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_inneraliasmaphelper, element_identifier_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ulong_inneraliasmaphelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_ulong_inneraliasmaphelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_inneraliasmaphelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_inneraliasmaphelper, key_identifier_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded, element_flags_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded), key_flags_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded", type_ids_var_map_ulong_inneraliasmaphelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint32_t_anonymous_map_int32_t_int32_t_0_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ulong_inneraliasmaphelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ulong_inneraliasmaphelper = 0x00000000;
            bool common_var_map_ulong_inneraliasmaphelper_ec {false};
            CommonStructMember common_var_map_ulong_inneraliasmaphelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_ulong_inneraliasmaphelper, member_flags_var_map_ulong_inneraliasmaphelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_inneraliasmaphelper, common_var_map_ulong_inneraliasmaphelper_ec))};
            if (!common_var_map_ulong_inneraliasmaphelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ulong_inneraliasmaphelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ulong_inneraliasmaphelper = "var_map_ulong_inneraliasmaphelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ulong_inneraliasmaphelper;
            ann_custom_MapULongInnerAliasMapHelper.reset();
            CompleteMemberDetail detail_var_map_ulong_inneraliasmaphelper = TypeObjectUtils::build_complete_member_detail(name_var_map_ulong_inneraliasmaphelper, member_ann_builtin_var_map_ulong_inneraliasmaphelper, ann_custom_MapULongInnerAliasMapHelper);
            CompleteStructMember member_var_map_ulong_inneraliasmaphelper = TypeObjectUtils::build_complete_struct_member(common_var_map_ulong_inneraliasmaphelper, detail_var_map_ulong_inneraliasmaphelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongInnerAliasMapHelper, member_var_map_ulong_inneraliasmaphelper);
        }
        CompleteStructType struct_type_MapULongInnerAliasMapHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongInnerAliasMapHelper, header_MapULongInnerAliasMapHelper, member_seq_MapULongInnerAliasMapHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongInnerAliasMapHelper, type_name_MapULongInnerAliasMapHelper.to_string(), type_ids_MapULongInnerAliasMapHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongInnerAliasMapHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongInnerUnionHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapULongInnerUnionHelper)
{

    ReturnCode_t return_code_MapULongInnerUnionHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongInnerUnionHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongInnerUnionHelper", type_ids_MapULongInnerUnionHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongInnerUnionHelper)
    {
        StructTypeFlag struct_flags_MapULongInnerUnionHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongInnerUnionHelper = "MapULongInnerUnionHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongInnerUnionHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongInnerUnionHelper;
        CompleteTypeDetail detail_MapULongInnerUnionHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongInnerUnionHelper, ann_custom_MapULongInnerUnionHelper, type_name_MapULongInnerUnionHelper.to_string());
        CompleteStructHeader header_MapULongInnerUnionHelper;
        header_MapULongInnerUnionHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongInnerUnionHelper);
        CompleteStructMemberSeq member_seq_MapULongInnerUnionHelper;
        {
            TypeIdentifierPair type_ids_var_map_ulong_innerunionhelper;
            ReturnCode_t return_code_var_map_ulong_innerunionhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ulong_innerunionhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint32_t_InnerUnionHelper_unbounded", type_ids_var_map_ulong_innerunionhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_innerunionhelper)
            {
                return_code_var_map_ulong_innerunionhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerUnionHelper", type_ids_var_map_ulong_innerunionhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_innerunionhelper)
                {
                ::register_InnerUnionHelper_type_identifier(type_ids_var_map_ulong_innerunionhelper);
                }
                bool element_identifier_anonymous_map_uint32_t_InnerUnionHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint32_t_InnerUnionHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_innerunionhelper, element_identifier_anonymous_map_uint32_t_InnerUnionHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint32_t_InnerUnionHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_InnerUnionHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ulong_innerunionhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_ulong_innerunionhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_innerunionhelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint32_t_InnerUnionHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint32_t_InnerUnionHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_innerunionhelper, key_identifier_anonymous_map_uint32_t_InnerUnionHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint32_t_InnerUnionHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_InnerUnionHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint32_t_InnerUnionHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint32_t_InnerUnionHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerUnionHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint32_t_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerUnionHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint32_t_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerUnionHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint32_t_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerUnionHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint32_t_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerUnionHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint32_t_InnerUnionHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerUnionHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerUnionHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint32_t_InnerUnionHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerUnionHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerUnionHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint32_t_InnerUnionHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint32_t_InnerUnionHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint32_t_InnerUnionHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint32_t_InnerUnionHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint32_t_InnerUnionHelper_unbounded, element_flags_anonymous_map_uint32_t_InnerUnionHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint32_t_InnerUnionHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint32_t_InnerUnionHelper_unbounded), key_flags_anonymous_map_uint32_t_InnerUnionHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint32_t_InnerUnionHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint32_t_InnerUnionHelper_unbounded", type_ids_var_map_ulong_innerunionhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint32_t_InnerUnionHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ulong_innerunionhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ulong_innerunionhelper = 0x00000000;
            bool common_var_map_ulong_innerunionhelper_ec {false};
            CommonStructMember common_var_map_ulong_innerunionhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_ulong_innerunionhelper, member_flags_var_map_ulong_innerunionhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_innerunionhelper, common_var_map_ulong_innerunionhelper_ec))};
            if (!common_var_map_ulong_innerunionhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ulong_innerunionhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ulong_innerunionhelper = "var_map_ulong_innerunionhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ulong_innerunionhelper;
            ann_custom_MapULongInnerUnionHelper.reset();
            CompleteMemberDetail detail_var_map_ulong_innerunionhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_ulong_innerunionhelper, member_ann_builtin_var_map_ulong_innerunionhelper, ann_custom_MapULongInnerUnionHelper);
            CompleteStructMember member_var_map_ulong_innerunionhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_ulong_innerunionhelper, detail_var_map_ulong_innerunionhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongInnerUnionHelper, member_var_map_ulong_innerunionhelper);
        }
        CompleteStructType struct_type_MapULongInnerUnionHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongInnerUnionHelper, header_MapULongInnerUnionHelper, member_seq_MapULongInnerUnionHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongInnerUnionHelper, type_name_MapULongInnerUnionHelper.to_string(), type_ids_MapULongInnerUnionHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongInnerUnionHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongInnerStructureHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapULongInnerStructureHelper)
{

    ReturnCode_t return_code_MapULongInnerStructureHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongInnerStructureHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongInnerStructureHelper", type_ids_MapULongInnerStructureHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongInnerStructureHelper)
    {
        StructTypeFlag struct_flags_MapULongInnerStructureHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongInnerStructureHelper = "MapULongInnerStructureHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongInnerStructureHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongInnerStructureHelper;
        CompleteTypeDetail detail_MapULongInnerStructureHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongInnerStructureHelper, ann_custom_MapULongInnerStructureHelper, type_name_MapULongInnerStructureHelper.to_string());
        CompleteStructHeader header_MapULongInnerStructureHelper;
        header_MapULongInnerStructureHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongInnerStructureHelper);
        CompleteStructMemberSeq member_seq_MapULongInnerStructureHelper;
        {
            TypeIdentifierPair type_ids_var_map_ulong_innerstructurehelper;
            ReturnCode_t return_code_var_map_ulong_innerstructurehelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ulong_innerstructurehelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint32_t_InnerStructureHelper_unbounded", type_ids_var_map_ulong_innerstructurehelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_innerstructurehelper)
            {
                return_code_var_map_ulong_innerstructurehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerStructureHelper", type_ids_var_map_ulong_innerstructurehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_innerstructurehelper)
                {
                ::register_InnerStructureHelper_type_identifier(type_ids_var_map_ulong_innerstructurehelper);
                }
                bool element_identifier_anonymous_map_uint32_t_InnerStructureHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint32_t_InnerStructureHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_innerstructurehelper, element_identifier_anonymous_map_uint32_t_InnerStructureHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint32_t_InnerStructureHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_InnerStructureHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ulong_innerstructurehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_ulong_innerstructurehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_innerstructurehelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint32_t_InnerStructureHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint32_t_InnerStructureHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_innerstructurehelper, key_identifier_anonymous_map_uint32_t_InnerStructureHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint32_t_InnerStructureHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_InnerStructureHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint32_t_InnerStructureHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint32_t_InnerStructureHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerStructureHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint32_t_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerStructureHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint32_t_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerStructureHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint32_t_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerStructureHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint32_t_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerStructureHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint32_t_InnerStructureHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerStructureHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerStructureHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint32_t_InnerStructureHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerStructureHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerStructureHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint32_t_InnerStructureHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint32_t_InnerStructureHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint32_t_InnerStructureHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint32_t_InnerStructureHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint32_t_InnerStructureHelper_unbounded, element_flags_anonymous_map_uint32_t_InnerStructureHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint32_t_InnerStructureHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint32_t_InnerStructureHelper_unbounded), key_flags_anonymous_map_uint32_t_InnerStructureHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint32_t_InnerStructureHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint32_t_InnerStructureHelper_unbounded", type_ids_var_map_ulong_innerstructurehelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint32_t_InnerStructureHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ulong_innerstructurehelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ulong_innerstructurehelper = 0x00000000;
            bool common_var_map_ulong_innerstructurehelper_ec {false};
            CommonStructMember common_var_map_ulong_innerstructurehelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_ulong_innerstructurehelper, member_flags_var_map_ulong_innerstructurehelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_innerstructurehelper, common_var_map_ulong_innerstructurehelper_ec))};
            if (!common_var_map_ulong_innerstructurehelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ulong_innerstructurehelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ulong_innerstructurehelper = "var_map_ulong_innerstructurehelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ulong_innerstructurehelper;
            ann_custom_MapULongInnerStructureHelper.reset();
            CompleteMemberDetail detail_var_map_ulong_innerstructurehelper = TypeObjectUtils::build_complete_member_detail(name_var_map_ulong_innerstructurehelper, member_ann_builtin_var_map_ulong_innerstructurehelper, ann_custom_MapULongInnerStructureHelper);
            CompleteStructMember member_var_map_ulong_innerstructurehelper = TypeObjectUtils::build_complete_struct_member(common_var_map_ulong_innerstructurehelper, detail_var_map_ulong_innerstructurehelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongInnerStructureHelper, member_var_map_ulong_innerstructurehelper);
        }
        CompleteStructType struct_type_MapULongInnerStructureHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongInnerStructureHelper, header_MapULongInnerStructureHelper, member_seq_MapULongInnerStructureHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongInnerStructureHelper, type_name_MapULongInnerStructureHelper.to_string(), type_ids_MapULongInnerStructureHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongInnerStructureHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongInnerBitsetHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapULongInnerBitsetHelper)
{

    ReturnCode_t return_code_MapULongInnerBitsetHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongInnerBitsetHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongInnerBitsetHelper", type_ids_MapULongInnerBitsetHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongInnerBitsetHelper)
    {
        StructTypeFlag struct_flags_MapULongInnerBitsetHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongInnerBitsetHelper = "MapULongInnerBitsetHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongInnerBitsetHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongInnerBitsetHelper;
        CompleteTypeDetail detail_MapULongInnerBitsetHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongInnerBitsetHelper, ann_custom_MapULongInnerBitsetHelper, type_name_MapULongInnerBitsetHelper.to_string());
        CompleteStructHeader header_MapULongInnerBitsetHelper;
        header_MapULongInnerBitsetHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongInnerBitsetHelper);
        CompleteStructMemberSeq member_seq_MapULongInnerBitsetHelper;
        {
            TypeIdentifierPair type_ids_var_map_ulong_innerbitsethelper;
            ReturnCode_t return_code_var_map_ulong_innerbitsethelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_ulong_innerbitsethelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint32_t_InnerBitsetHelper_unbounded", type_ids_var_map_ulong_innerbitsethelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_innerbitsethelper)
            {
                return_code_var_map_ulong_innerbitsethelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerBitsetHelper", type_ids_var_map_ulong_innerbitsethelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_innerbitsethelper)
                {
                ::register_InnerBitsetHelper_type_identifier(type_ids_var_map_ulong_innerbitsethelper);
                }
                bool element_identifier_anonymous_map_uint32_t_InnerBitsetHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint32_t_InnerBitsetHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_innerbitsethelper, element_identifier_anonymous_map_uint32_t_InnerBitsetHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint32_t_InnerBitsetHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_InnerBitsetHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_ulong_innerbitsethelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_ulong_innerbitsethelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_ulong_innerbitsethelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint32_t_InnerBitsetHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint32_t_InnerBitsetHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_innerbitsethelper, key_identifier_anonymous_map_uint32_t_InnerBitsetHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint32_t_InnerBitsetHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint32_t_InnerBitsetHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint32_t_InnerBitsetHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint32_t_InnerBitsetHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerBitsetHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint32_t_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerBitsetHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint32_t_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerBitsetHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint32_t_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerBitsetHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint32_t_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerBitsetHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint32_t_InnerBitsetHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerBitsetHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerBitsetHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint32_t_InnerBitsetHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerBitsetHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint32_t_InnerBitsetHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint32_t_InnerBitsetHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint32_t_InnerBitsetHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint32_t_InnerBitsetHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint32_t_InnerBitsetHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint32_t_InnerBitsetHelper_unbounded, element_flags_anonymous_map_uint32_t_InnerBitsetHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint32_t_InnerBitsetHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint32_t_InnerBitsetHelper_unbounded), key_flags_anonymous_map_uint32_t_InnerBitsetHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint32_t_InnerBitsetHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint32_t_InnerBitsetHelper_unbounded", type_ids_var_map_ulong_innerbitsethelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint32_t_InnerBitsetHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_ulong_innerbitsethelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_ulong_innerbitsethelper = 0x00000000;
            bool common_var_map_ulong_innerbitsethelper_ec {false};
            CommonStructMember common_var_map_ulong_innerbitsethelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_ulong_innerbitsethelper, member_flags_var_map_ulong_innerbitsethelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_ulong_innerbitsethelper, common_var_map_ulong_innerbitsethelper_ec))};
            if (!common_var_map_ulong_innerbitsethelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_ulong_innerbitsethelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_ulong_innerbitsethelper = "var_map_ulong_innerbitsethelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_ulong_innerbitsethelper;
            ann_custom_MapULongInnerBitsetHelper.reset();
            CompleteMemberDetail detail_var_map_ulong_innerbitsethelper = TypeObjectUtils::build_complete_member_detail(name_var_map_ulong_innerbitsethelper, member_ann_builtin_var_map_ulong_innerbitsethelper, ann_custom_MapULongInnerBitsetHelper);
            CompleteStructMember member_var_map_ulong_innerbitsethelper = TypeObjectUtils::build_complete_struct_member(common_var_map_ulong_innerbitsethelper, detail_var_map_ulong_innerbitsethelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongInnerBitsetHelper, member_var_map_ulong_innerbitsethelper);
        }
        CompleteStructType struct_type_MapULongInnerBitsetHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongInnerBitsetHelper, header_MapULongInnerBitsetHelper, member_seq_MapULongInnerBitsetHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongInnerBitsetHelper, type_name_MapULongInnerBitsetHelper.to_string(), type_ids_MapULongInnerBitsetHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongInnerBitsetHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongLongShort_type_identifier(
        TypeIdentifierPair& type_ids_MapLongLongShort)
{

    ReturnCode_t return_code_MapLongLongShort {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongLongShort =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongLongShort", type_ids_MapLongLongShort);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongLongShort)
    {
        StructTypeFlag struct_flags_MapLongLongShort = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongLongShort = "MapLongLongShort";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongLongShort;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongLongShort;
        CompleteTypeDetail detail_MapLongLongShort = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongLongShort, ann_custom_MapLongLongShort, type_name_MapLongLongShort.to_string());
        CompleteStructHeader header_MapLongLongShort;
        header_MapLongLongShort = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongLongShort);
        CompleteStructMemberSeq member_seq_MapLongLongShort;
        {
            TypeIdentifierPair type_ids_var_map_longlong_short;
            ReturnCode_t return_code_var_map_longlong_short {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_longlong_short =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int64_t_int16_t_unbounded", type_ids_var_map_longlong_short);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_short)
            {
                return_code_var_map_longlong_short =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_longlong_short);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_short)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int64_t_int16_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int64_t_int16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_short, element_identifier_anonymous_map_int64_t_int16_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_int64_t_int16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_int16_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_longlong_short =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_longlong_short);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_short)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int64_t_int16_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int64_t_int16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_short, key_identifier_anonymous_map_int64_t_int16_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_int64_t_int16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_int16_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int64_t_int16_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int64_t_int16_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_int16_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int64_t_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_int16_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int64_t_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_int16_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int64_t_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_int16_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int64_t_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_int16_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int64_t_int16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_int16_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_int16_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int64_t_int16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_int16_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_int16_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int64_t_int16_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int64_t_int16_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int64_t_int16_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int64_t_int16_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int64_t_int16_t_unbounded, element_flags_anonymous_map_int64_t_int16_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int64_t_int16_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int64_t_int16_t_unbounded), key_flags_anonymous_map_int64_t_int16_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int64_t_int16_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int64_t_int16_t_unbounded", type_ids_var_map_longlong_short))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int64_t_int16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_longlong_short = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_longlong_short = 0x00000000;
            bool common_var_map_longlong_short_ec {false};
            CommonStructMember common_var_map_longlong_short {TypeObjectUtils::build_common_struct_member(member_id_var_map_longlong_short, member_flags_var_map_longlong_short, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_short, common_var_map_longlong_short_ec))};
            if (!common_var_map_longlong_short_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_longlong_short member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_longlong_short = "var_map_longlong_short";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_longlong_short;
            ann_custom_MapLongLongShort.reset();
            CompleteMemberDetail detail_var_map_longlong_short = TypeObjectUtils::build_complete_member_detail(name_var_map_longlong_short, member_ann_builtin_var_map_longlong_short, ann_custom_MapLongLongShort);
            CompleteStructMember member_var_map_longlong_short = TypeObjectUtils::build_complete_struct_member(common_var_map_longlong_short, detail_var_map_longlong_short);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongLongShort, member_var_map_longlong_short);
        }
        CompleteStructType struct_type_MapLongLongShort = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongLongShort, header_MapLongLongShort, member_seq_MapLongLongShort);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongLongShort, type_name_MapLongLongShort.to_string(), type_ids_MapLongLongShort))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongLongShort already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongLongUShort_type_identifier(
        TypeIdentifierPair& type_ids_MapLongLongUShort)
{

    ReturnCode_t return_code_MapLongLongUShort {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongLongUShort =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongLongUShort", type_ids_MapLongLongUShort);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongLongUShort)
    {
        StructTypeFlag struct_flags_MapLongLongUShort = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongLongUShort = "MapLongLongUShort";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongLongUShort;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongLongUShort;
        CompleteTypeDetail detail_MapLongLongUShort = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongLongUShort, ann_custom_MapLongLongUShort, type_name_MapLongLongUShort.to_string());
        CompleteStructHeader header_MapLongLongUShort;
        header_MapLongLongUShort = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongLongUShort);
        CompleteStructMemberSeq member_seq_MapLongLongUShort;
        {
            TypeIdentifierPair type_ids_var_map_longlong_ushort;
            ReturnCode_t return_code_var_map_longlong_ushort {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_longlong_ushort =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int64_t_uint16_t_unbounded", type_ids_var_map_longlong_ushort);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_ushort)
            {
                return_code_var_map_longlong_ushort =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_longlong_ushort);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_ushort)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int64_t_uint16_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int64_t_uint16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_ushort, element_identifier_anonymous_map_int64_t_uint16_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_int64_t_uint16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_uint16_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_longlong_ushort =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_longlong_ushort);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_ushort)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int64_t_uint16_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int64_t_uint16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_ushort, key_identifier_anonymous_map_int64_t_uint16_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_int64_t_uint16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_uint16_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int64_t_uint16_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int64_t_uint16_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_uint16_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int64_t_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_uint16_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int64_t_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_uint16_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int64_t_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_uint16_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int64_t_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_uint16_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int64_t_uint16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_uint16_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_uint16_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int64_t_uint16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_uint16_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_uint16_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int64_t_uint16_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int64_t_uint16_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int64_t_uint16_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int64_t_uint16_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int64_t_uint16_t_unbounded, element_flags_anonymous_map_int64_t_uint16_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int64_t_uint16_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int64_t_uint16_t_unbounded), key_flags_anonymous_map_int64_t_uint16_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int64_t_uint16_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int64_t_uint16_t_unbounded", type_ids_var_map_longlong_ushort))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int64_t_uint16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_longlong_ushort = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_longlong_ushort = 0x00000000;
            bool common_var_map_longlong_ushort_ec {false};
            CommonStructMember common_var_map_longlong_ushort {TypeObjectUtils::build_common_struct_member(member_id_var_map_longlong_ushort, member_flags_var_map_longlong_ushort, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_ushort, common_var_map_longlong_ushort_ec))};
            if (!common_var_map_longlong_ushort_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_longlong_ushort member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_longlong_ushort = "var_map_longlong_ushort";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_longlong_ushort;
            ann_custom_MapLongLongUShort.reset();
            CompleteMemberDetail detail_var_map_longlong_ushort = TypeObjectUtils::build_complete_member_detail(name_var_map_longlong_ushort, member_ann_builtin_var_map_longlong_ushort, ann_custom_MapLongLongUShort);
            CompleteStructMember member_var_map_longlong_ushort = TypeObjectUtils::build_complete_struct_member(common_var_map_longlong_ushort, detail_var_map_longlong_ushort);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongLongUShort, member_var_map_longlong_ushort);
        }
        CompleteStructType struct_type_MapLongLongUShort = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongLongUShort, header_MapLongLongUShort, member_seq_MapLongLongUShort);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongLongUShort, type_name_MapLongLongUShort.to_string(), type_ids_MapLongLongUShort))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongLongUShort already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongLongKeyLongValue_type_identifier(
        TypeIdentifierPair& type_ids_MapLongLongKeyLongValue)
{

    ReturnCode_t return_code_MapLongLongKeyLongValue {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongLongKeyLongValue =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongLongKeyLongValue", type_ids_MapLongLongKeyLongValue);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongLongKeyLongValue)
    {
        StructTypeFlag struct_flags_MapLongLongKeyLongValue = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongLongKeyLongValue = "MapLongLongKeyLongValue";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongLongKeyLongValue;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongLongKeyLongValue;
        CompleteTypeDetail detail_MapLongLongKeyLongValue = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongLongKeyLongValue, ann_custom_MapLongLongKeyLongValue, type_name_MapLongLongKeyLongValue.to_string());
        CompleteStructHeader header_MapLongLongKeyLongValue;
        header_MapLongLongKeyLongValue = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongLongKeyLongValue);
        CompleteStructMemberSeq member_seq_MapLongLongKeyLongValue;
        {
            TypeIdentifierPair type_ids_var_map_longlong_long;
            ReturnCode_t return_code_var_map_longlong_long {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_longlong_long =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int64_t_int32_t_unbounded", type_ids_var_map_longlong_long);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_long)
            {
                return_code_var_map_longlong_long =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_longlong_long);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_long)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int64_t_int32_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int64_t_int32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_long, element_identifier_anonymous_map_int64_t_int32_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_int64_t_int32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_int32_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_longlong_long =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_longlong_long);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_long)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int64_t_int32_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int64_t_int32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_long, key_identifier_anonymous_map_int64_t_int32_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_int64_t_int32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_int32_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int64_t_int32_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int64_t_int32_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_int32_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int64_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_int32_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int64_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_int32_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int64_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_int32_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int64_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_int32_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int64_t_int32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_int32_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_int32_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int64_t_int32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_int32_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_int32_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int64_t_int32_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int64_t_int32_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int64_t_int32_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int64_t_int32_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int64_t_int32_t_unbounded, element_flags_anonymous_map_int64_t_int32_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int64_t_int32_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int64_t_int32_t_unbounded), key_flags_anonymous_map_int64_t_int32_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int64_t_int32_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int64_t_int32_t_unbounded", type_ids_var_map_longlong_long))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int64_t_int32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_longlong_long = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_longlong_long = 0x00000000;
            bool common_var_map_longlong_long_ec {false};
            CommonStructMember common_var_map_longlong_long {TypeObjectUtils::build_common_struct_member(member_id_var_map_longlong_long, member_flags_var_map_longlong_long, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_long, common_var_map_longlong_long_ec))};
            if (!common_var_map_longlong_long_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_longlong_long member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_longlong_long = "var_map_longlong_long";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_longlong_long;
            ann_custom_MapLongLongKeyLongValue.reset();
            CompleteMemberDetail detail_var_map_longlong_long = TypeObjectUtils::build_complete_member_detail(name_var_map_longlong_long, member_ann_builtin_var_map_longlong_long, ann_custom_MapLongLongKeyLongValue);
            CompleteStructMember member_var_map_longlong_long = TypeObjectUtils::build_complete_struct_member(common_var_map_longlong_long, detail_var_map_longlong_long);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongLongKeyLongValue, member_var_map_longlong_long);
        }
        CompleteStructType struct_type_MapLongLongKeyLongValue = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongLongKeyLongValue, header_MapLongLongKeyLongValue, member_seq_MapLongLongKeyLongValue);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongLongKeyLongValue, type_name_MapLongLongKeyLongValue.to_string(), type_ids_MapLongLongKeyLongValue))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongLongKeyLongValue already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongLongULong_type_identifier(
        TypeIdentifierPair& type_ids_MapLongLongULong)
{

    ReturnCode_t return_code_MapLongLongULong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongLongULong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongLongULong", type_ids_MapLongLongULong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongLongULong)
    {
        StructTypeFlag struct_flags_MapLongLongULong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongLongULong = "MapLongLongULong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongLongULong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongLongULong;
        CompleteTypeDetail detail_MapLongLongULong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongLongULong, ann_custom_MapLongLongULong, type_name_MapLongLongULong.to_string());
        CompleteStructHeader header_MapLongLongULong;
        header_MapLongLongULong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongLongULong);
        CompleteStructMemberSeq member_seq_MapLongLongULong;
        {
            TypeIdentifierPair type_ids_var_map_longlong_ulong;
            ReturnCode_t return_code_var_map_longlong_ulong {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_longlong_ulong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int64_t_uint32_t_unbounded", type_ids_var_map_longlong_ulong);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_ulong)
            {
                return_code_var_map_longlong_ulong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_longlong_ulong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_ulong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int64_t_uint32_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int64_t_uint32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_ulong, element_identifier_anonymous_map_int64_t_uint32_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_int64_t_uint32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_uint32_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_longlong_ulong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_longlong_ulong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_ulong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int64_t_uint32_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int64_t_uint32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_ulong, key_identifier_anonymous_map_int64_t_uint32_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_int64_t_uint32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_uint32_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int64_t_uint32_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int64_t_uint32_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_uint32_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int64_t_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_uint32_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int64_t_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_uint32_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int64_t_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_uint32_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int64_t_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_uint32_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int64_t_uint32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_uint32_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_uint32_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int64_t_uint32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_uint32_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_uint32_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int64_t_uint32_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int64_t_uint32_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int64_t_uint32_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int64_t_uint32_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int64_t_uint32_t_unbounded, element_flags_anonymous_map_int64_t_uint32_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int64_t_uint32_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int64_t_uint32_t_unbounded), key_flags_anonymous_map_int64_t_uint32_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int64_t_uint32_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int64_t_uint32_t_unbounded", type_ids_var_map_longlong_ulong))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int64_t_uint32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_longlong_ulong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_longlong_ulong = 0x00000000;
            bool common_var_map_longlong_ulong_ec {false};
            CommonStructMember common_var_map_longlong_ulong {TypeObjectUtils::build_common_struct_member(member_id_var_map_longlong_ulong, member_flags_var_map_longlong_ulong, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_ulong, common_var_map_longlong_ulong_ec))};
            if (!common_var_map_longlong_ulong_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_longlong_ulong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_longlong_ulong = "var_map_longlong_ulong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_longlong_ulong;
            ann_custom_MapLongLongULong.reset();
            CompleteMemberDetail detail_var_map_longlong_ulong = TypeObjectUtils::build_complete_member_detail(name_var_map_longlong_ulong, member_ann_builtin_var_map_longlong_ulong, ann_custom_MapLongLongULong);
            CompleteStructMember member_var_map_longlong_ulong = TypeObjectUtils::build_complete_struct_member(common_var_map_longlong_ulong, detail_var_map_longlong_ulong);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongLongULong, member_var_map_longlong_ulong);
        }
        CompleteStructType struct_type_MapLongLongULong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongLongULong, header_MapLongLongULong, member_seq_MapLongLongULong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongLongULong, type_name_MapLongLongULong.to_string(), type_ids_MapLongLongULong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongLongULong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongLongLongLong_type_identifier(
        TypeIdentifierPair& type_ids_MapLongLongLongLong)
{

    ReturnCode_t return_code_MapLongLongLongLong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongLongLongLong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongLongLongLong", type_ids_MapLongLongLongLong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongLongLongLong)
    {
        StructTypeFlag struct_flags_MapLongLongLongLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongLongLongLong = "MapLongLongLongLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongLongLongLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongLongLongLong;
        CompleteTypeDetail detail_MapLongLongLongLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongLongLongLong, ann_custom_MapLongLongLongLong, type_name_MapLongLongLongLong.to_string());
        CompleteStructHeader header_MapLongLongLongLong;
        header_MapLongLongLongLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongLongLongLong);
        CompleteStructMemberSeq member_seq_MapLongLongLongLong;
        {
            TypeIdentifierPair type_ids_var_map_longlong_longlong;
            ReturnCode_t return_code_var_map_longlong_longlong {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_longlong_longlong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int64_t_int64_t_unbounded", type_ids_var_map_longlong_longlong);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_longlong)
            {
                return_code_var_map_longlong_longlong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_longlong_longlong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_longlong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int64_t_int64_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int64_t_int64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_longlong, element_identifier_anonymous_map_int64_t_int64_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_int64_t_int64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_int64_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_longlong_longlong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_longlong_longlong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_longlong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int64_t_int64_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int64_t_int64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_longlong, key_identifier_anonymous_map_int64_t_int64_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_int64_t_int64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_int64_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int64_t_int64_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int64_t_int64_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_int64_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int64_t_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_int64_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int64_t_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_int64_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int64_t_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_int64_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int64_t_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_int64_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int64_t_int64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_int64_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_int64_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int64_t_int64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_int64_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_int64_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int64_t_int64_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int64_t_int64_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int64_t_int64_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int64_t_int64_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int64_t_int64_t_unbounded, element_flags_anonymous_map_int64_t_int64_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int64_t_int64_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int64_t_int64_t_unbounded), key_flags_anonymous_map_int64_t_int64_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int64_t_int64_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int64_t_int64_t_unbounded", type_ids_var_map_longlong_longlong))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int64_t_int64_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_longlong_longlong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_longlong_longlong = 0x00000000;
            bool common_var_map_longlong_longlong_ec {false};
            CommonStructMember common_var_map_longlong_longlong {TypeObjectUtils::build_common_struct_member(member_id_var_map_longlong_longlong, member_flags_var_map_longlong_longlong, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_longlong, common_var_map_longlong_longlong_ec))};
            if (!common_var_map_longlong_longlong_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_longlong_longlong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_longlong_longlong = "var_map_longlong_longlong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_longlong_longlong;
            ann_custom_MapLongLongLongLong.reset();
            CompleteMemberDetail detail_var_map_longlong_longlong = TypeObjectUtils::build_complete_member_detail(name_var_map_longlong_longlong, member_ann_builtin_var_map_longlong_longlong, ann_custom_MapLongLongLongLong);
            CompleteStructMember member_var_map_longlong_longlong = TypeObjectUtils::build_complete_struct_member(common_var_map_longlong_longlong, detail_var_map_longlong_longlong);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongLongLongLong, member_var_map_longlong_longlong);
        }
        CompleteStructType struct_type_MapLongLongLongLong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongLongLongLong, header_MapLongLongLongLong, member_seq_MapLongLongLongLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongLongLongLong, type_name_MapLongLongLongLong.to_string(), type_ids_MapLongLongLongLong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongLongLongLong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongLongULongLong_type_identifier(
        TypeIdentifierPair& type_ids_MapLongLongULongLong)
{

    ReturnCode_t return_code_MapLongLongULongLong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongLongULongLong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongLongULongLong", type_ids_MapLongLongULongLong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongLongULongLong)
    {
        StructTypeFlag struct_flags_MapLongLongULongLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongLongULongLong = "MapLongLongULongLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongLongULongLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongLongULongLong;
        CompleteTypeDetail detail_MapLongLongULongLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongLongULongLong, ann_custom_MapLongLongULongLong, type_name_MapLongLongULongLong.to_string());
        CompleteStructHeader header_MapLongLongULongLong;
        header_MapLongLongULongLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongLongULongLong);
        CompleteStructMemberSeq member_seq_MapLongLongULongLong;
        {
            TypeIdentifierPair type_ids_var_map_longlong_ulonglong;
            ReturnCode_t return_code_var_map_longlong_ulonglong {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_longlong_ulonglong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int64_t_uint64_t_unbounded", type_ids_var_map_longlong_ulonglong);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_ulonglong)
            {
                return_code_var_map_longlong_ulonglong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_longlong_ulonglong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_ulonglong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int64_t_uint64_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int64_t_uint64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_ulonglong, element_identifier_anonymous_map_int64_t_uint64_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_int64_t_uint64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_uint64_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_longlong_ulonglong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_longlong_ulonglong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_ulonglong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int64_t_uint64_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int64_t_uint64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_ulonglong, key_identifier_anonymous_map_int64_t_uint64_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_int64_t_uint64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_uint64_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int64_t_uint64_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int64_t_uint64_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_uint64_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int64_t_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_uint64_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int64_t_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_uint64_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int64_t_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_uint64_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int64_t_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_uint64_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int64_t_uint64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_uint64_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_uint64_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int64_t_uint64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_uint64_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_uint64_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int64_t_uint64_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int64_t_uint64_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int64_t_uint64_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int64_t_uint64_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int64_t_uint64_t_unbounded, element_flags_anonymous_map_int64_t_uint64_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int64_t_uint64_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int64_t_uint64_t_unbounded), key_flags_anonymous_map_int64_t_uint64_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int64_t_uint64_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int64_t_uint64_t_unbounded", type_ids_var_map_longlong_ulonglong))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int64_t_uint64_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_longlong_ulonglong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_longlong_ulonglong = 0x00000000;
            bool common_var_map_longlong_ulonglong_ec {false};
            CommonStructMember common_var_map_longlong_ulonglong {TypeObjectUtils::build_common_struct_member(member_id_var_map_longlong_ulonglong, member_flags_var_map_longlong_ulonglong, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_ulonglong, common_var_map_longlong_ulonglong_ec))};
            if (!common_var_map_longlong_ulonglong_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_longlong_ulonglong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_longlong_ulonglong = "var_map_longlong_ulonglong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_longlong_ulonglong;
            ann_custom_MapLongLongULongLong.reset();
            CompleteMemberDetail detail_var_map_longlong_ulonglong = TypeObjectUtils::build_complete_member_detail(name_var_map_longlong_ulonglong, member_ann_builtin_var_map_longlong_ulonglong, ann_custom_MapLongLongULongLong);
            CompleteStructMember member_var_map_longlong_ulonglong = TypeObjectUtils::build_complete_struct_member(common_var_map_longlong_ulonglong, detail_var_map_longlong_ulonglong);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongLongULongLong, member_var_map_longlong_ulonglong);
        }
        CompleteStructType struct_type_MapLongLongULongLong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongLongULongLong, header_MapLongLongULongLong, member_seq_MapLongLongULongLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongLongULongLong, type_name_MapLongLongULongLong.to_string(), type_ids_MapLongLongULongLong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongLongULongLong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongLongFloat_type_identifier(
        TypeIdentifierPair& type_ids_MapLongLongFloat)
{

    ReturnCode_t return_code_MapLongLongFloat {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongLongFloat =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongLongFloat", type_ids_MapLongLongFloat);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongLongFloat)
    {
        StructTypeFlag struct_flags_MapLongLongFloat = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongLongFloat = "MapLongLongFloat";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongLongFloat;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongLongFloat;
        CompleteTypeDetail detail_MapLongLongFloat = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongLongFloat, ann_custom_MapLongLongFloat, type_name_MapLongLongFloat.to_string());
        CompleteStructHeader header_MapLongLongFloat;
        header_MapLongLongFloat = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongLongFloat);
        CompleteStructMemberSeq member_seq_MapLongLongFloat;
        {
            TypeIdentifierPair type_ids_var_map_longlong_float;
            ReturnCode_t return_code_var_map_longlong_float {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_longlong_float =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int64_t_float_unbounded", type_ids_var_map_longlong_float);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_float)
            {
                return_code_var_map_longlong_float =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_float", type_ids_var_map_longlong_float);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_float)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int64_t_float_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int64_t_float_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_float, element_identifier_anonymous_map_int64_t_float_unbounded_ec))};
                if (!element_identifier_anonymous_map_int64_t_float_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_float_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_longlong_float =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_longlong_float);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_float)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int64_t_float_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int64_t_float_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_float, key_identifier_anonymous_map_int64_t_float_unbounded_ec))};
                if (!key_identifier_anonymous_map_int64_t_float_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_float_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int64_t_float_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int64_t_float_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_float_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int64_t_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_float_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int64_t_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_float_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int64_t_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_float_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int64_t_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_float_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int64_t_float_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_float_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_float_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int64_t_float_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_float_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_float_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int64_t_float_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int64_t_float_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int64_t_float_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int64_t_float_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int64_t_float_unbounded, element_flags_anonymous_map_int64_t_float_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int64_t_float_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int64_t_float_unbounded), key_flags_anonymous_map_int64_t_float_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int64_t_float_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int64_t_float_unbounded", type_ids_var_map_longlong_float))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int64_t_float_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_longlong_float = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_longlong_float = 0x00000000;
            bool common_var_map_longlong_float_ec {false};
            CommonStructMember common_var_map_longlong_float {TypeObjectUtils::build_common_struct_member(member_id_var_map_longlong_float, member_flags_var_map_longlong_float, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_float, common_var_map_longlong_float_ec))};
            if (!common_var_map_longlong_float_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_longlong_float member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_longlong_float = "var_map_longlong_float";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_longlong_float;
            ann_custom_MapLongLongFloat.reset();
            CompleteMemberDetail detail_var_map_longlong_float = TypeObjectUtils::build_complete_member_detail(name_var_map_longlong_float, member_ann_builtin_var_map_longlong_float, ann_custom_MapLongLongFloat);
            CompleteStructMember member_var_map_longlong_float = TypeObjectUtils::build_complete_struct_member(common_var_map_longlong_float, detail_var_map_longlong_float);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongLongFloat, member_var_map_longlong_float);
        }
        CompleteStructType struct_type_MapLongLongFloat = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongLongFloat, header_MapLongLongFloat, member_seq_MapLongLongFloat);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongLongFloat, type_name_MapLongLongFloat.to_string(), type_ids_MapLongLongFloat))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongLongFloat already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongLongKeyDoubleValue_type_identifier(
        TypeIdentifierPair& type_ids_MapLongLongKeyDoubleValue)
{

    ReturnCode_t return_code_MapLongLongKeyDoubleValue {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongLongKeyDoubleValue =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongLongKeyDoubleValue", type_ids_MapLongLongKeyDoubleValue);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongLongKeyDoubleValue)
    {
        StructTypeFlag struct_flags_MapLongLongKeyDoubleValue = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongLongKeyDoubleValue = "MapLongLongKeyDoubleValue";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongLongKeyDoubleValue;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongLongKeyDoubleValue;
        CompleteTypeDetail detail_MapLongLongKeyDoubleValue = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongLongKeyDoubleValue, ann_custom_MapLongLongKeyDoubleValue, type_name_MapLongLongKeyDoubleValue.to_string());
        CompleteStructHeader header_MapLongLongKeyDoubleValue;
        header_MapLongLongKeyDoubleValue = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongLongKeyDoubleValue);
        CompleteStructMemberSeq member_seq_MapLongLongKeyDoubleValue;
        {
            TypeIdentifierPair type_ids_var_map_longlong_double;
            ReturnCode_t return_code_var_map_longlong_double {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_longlong_double =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int64_t_double_unbounded", type_ids_var_map_longlong_double);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_double)
            {
                return_code_var_map_longlong_double =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_double", type_ids_var_map_longlong_double);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_double)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int64_t_double_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int64_t_double_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_double, element_identifier_anonymous_map_int64_t_double_unbounded_ec))};
                if (!element_identifier_anonymous_map_int64_t_double_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_double_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_longlong_double =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_longlong_double);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_double)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int64_t_double_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int64_t_double_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_double, key_identifier_anonymous_map_int64_t_double_unbounded_ec))};
                if (!key_identifier_anonymous_map_int64_t_double_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_double_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int64_t_double_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int64_t_double_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_double_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int64_t_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_double_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int64_t_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_double_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int64_t_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_double_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int64_t_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_double_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int64_t_double_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_double_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_double_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int64_t_double_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_double_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_double_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int64_t_double_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int64_t_double_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int64_t_double_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int64_t_double_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int64_t_double_unbounded, element_flags_anonymous_map_int64_t_double_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int64_t_double_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int64_t_double_unbounded), key_flags_anonymous_map_int64_t_double_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int64_t_double_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int64_t_double_unbounded", type_ids_var_map_longlong_double))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int64_t_double_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_longlong_double = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_longlong_double = 0x00000000;
            bool common_var_map_longlong_double_ec {false};
            CommonStructMember common_var_map_longlong_double {TypeObjectUtils::build_common_struct_member(member_id_var_map_longlong_double, member_flags_var_map_longlong_double, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_double, common_var_map_longlong_double_ec))};
            if (!common_var_map_longlong_double_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_longlong_double member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_longlong_double = "var_map_longlong_double";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_longlong_double;
            ann_custom_MapLongLongKeyDoubleValue.reset();
            CompleteMemberDetail detail_var_map_longlong_double = TypeObjectUtils::build_complete_member_detail(name_var_map_longlong_double, member_ann_builtin_var_map_longlong_double, ann_custom_MapLongLongKeyDoubleValue);
            CompleteStructMember member_var_map_longlong_double = TypeObjectUtils::build_complete_struct_member(common_var_map_longlong_double, detail_var_map_longlong_double);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongLongKeyDoubleValue, member_var_map_longlong_double);
        }
        CompleteStructType struct_type_MapLongLongKeyDoubleValue = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongLongKeyDoubleValue, header_MapLongLongKeyDoubleValue, member_seq_MapLongLongKeyDoubleValue);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongLongKeyDoubleValue, type_name_MapLongLongKeyDoubleValue.to_string(), type_ids_MapLongLongKeyDoubleValue))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongLongKeyDoubleValue already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongLongLongDouble_type_identifier(
        TypeIdentifierPair& type_ids_MapLongLongLongDouble)
{

    ReturnCode_t return_code_MapLongLongLongDouble {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongLongLongDouble =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongLongLongDouble", type_ids_MapLongLongLongDouble);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongLongLongDouble)
    {
        StructTypeFlag struct_flags_MapLongLongLongDouble = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongLongLongDouble = "MapLongLongLongDouble";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongLongLongDouble;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongLongLongDouble;
        CompleteTypeDetail detail_MapLongLongLongDouble = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongLongLongDouble, ann_custom_MapLongLongLongDouble, type_name_MapLongLongLongDouble.to_string());
        CompleteStructHeader header_MapLongLongLongDouble;
        header_MapLongLongLongDouble = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongLongLongDouble);
        CompleteStructMemberSeq member_seq_MapLongLongLongDouble;
        {
            TypeIdentifierPair type_ids_var_map_longlong_longdouble;
            ReturnCode_t return_code_var_map_longlong_longdouble {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_longlong_longdouble =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int64_t_longdouble_unbounded", type_ids_var_map_longlong_longdouble);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_longdouble)
            {
                return_code_var_map_longlong_longdouble =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_longdouble", type_ids_var_map_longlong_longdouble);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_longdouble)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int64_t_longdouble_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int64_t_longdouble_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_longdouble, element_identifier_anonymous_map_int64_t_longdouble_unbounded_ec))};
                if (!element_identifier_anonymous_map_int64_t_longdouble_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_longdouble_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_longlong_longdouble =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_longlong_longdouble);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_longdouble)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int64_t_longdouble_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int64_t_longdouble_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_longdouble, key_identifier_anonymous_map_int64_t_longdouble_unbounded_ec))};
                if (!key_identifier_anonymous_map_int64_t_longdouble_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_longdouble_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int64_t_longdouble_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int64_t_longdouble_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_longdouble_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int64_t_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_longdouble_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int64_t_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_longdouble_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int64_t_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_longdouble_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int64_t_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_longdouble_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int64_t_longdouble_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_longdouble_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_longdouble_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int64_t_longdouble_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_longdouble_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_longdouble_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int64_t_longdouble_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int64_t_longdouble_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int64_t_longdouble_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int64_t_longdouble_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int64_t_longdouble_unbounded, element_flags_anonymous_map_int64_t_longdouble_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int64_t_longdouble_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int64_t_longdouble_unbounded), key_flags_anonymous_map_int64_t_longdouble_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int64_t_longdouble_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int64_t_longdouble_unbounded", type_ids_var_map_longlong_longdouble))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int64_t_longdouble_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_longlong_longdouble = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_longlong_longdouble = 0x00000000;
            bool common_var_map_longlong_longdouble_ec {false};
            CommonStructMember common_var_map_longlong_longdouble {TypeObjectUtils::build_common_struct_member(member_id_var_map_longlong_longdouble, member_flags_var_map_longlong_longdouble, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_longdouble, common_var_map_longlong_longdouble_ec))};
            if (!common_var_map_longlong_longdouble_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_longlong_longdouble member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_longlong_longdouble = "var_map_longlong_longdouble";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_longlong_longdouble;
            ann_custom_MapLongLongLongDouble.reset();
            CompleteMemberDetail detail_var_map_longlong_longdouble = TypeObjectUtils::build_complete_member_detail(name_var_map_longlong_longdouble, member_ann_builtin_var_map_longlong_longdouble, ann_custom_MapLongLongLongDouble);
            CompleteStructMember member_var_map_longlong_longdouble = TypeObjectUtils::build_complete_struct_member(common_var_map_longlong_longdouble, detail_var_map_longlong_longdouble);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongLongLongDouble, member_var_map_longlong_longdouble);
        }
        CompleteStructType struct_type_MapLongLongLongDouble = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongLongLongDouble, header_MapLongLongLongDouble, member_seq_MapLongLongLongDouble);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongLongLongDouble, type_name_MapLongLongLongDouble.to_string(), type_ids_MapLongLongLongDouble))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongLongLongDouble already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongLongBoolean_type_identifier(
        TypeIdentifierPair& type_ids_MapLongLongBoolean)
{

    ReturnCode_t return_code_MapLongLongBoolean {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongLongBoolean =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongLongBoolean", type_ids_MapLongLongBoolean);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongLongBoolean)
    {
        StructTypeFlag struct_flags_MapLongLongBoolean = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongLongBoolean = "MapLongLongBoolean";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongLongBoolean;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongLongBoolean;
        CompleteTypeDetail detail_MapLongLongBoolean = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongLongBoolean, ann_custom_MapLongLongBoolean, type_name_MapLongLongBoolean.to_string());
        CompleteStructHeader header_MapLongLongBoolean;
        header_MapLongLongBoolean = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongLongBoolean);
        CompleteStructMemberSeq member_seq_MapLongLongBoolean;
        {
            TypeIdentifierPair type_ids_var_map_longlong_boolean;
            ReturnCode_t return_code_var_map_longlong_boolean {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_longlong_boolean =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int64_t_bool_unbounded", type_ids_var_map_longlong_boolean);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_boolean)
            {
                return_code_var_map_longlong_boolean =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_bool", type_ids_var_map_longlong_boolean);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_boolean)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int64_t_bool_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int64_t_bool_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_boolean, element_identifier_anonymous_map_int64_t_bool_unbounded_ec))};
                if (!element_identifier_anonymous_map_int64_t_bool_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_bool_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_longlong_boolean =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_longlong_boolean);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_boolean)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int64_t_bool_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int64_t_bool_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_boolean, key_identifier_anonymous_map_int64_t_bool_unbounded_ec))};
                if (!key_identifier_anonymous_map_int64_t_bool_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_bool_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int64_t_bool_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int64_t_bool_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_bool_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int64_t_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_bool_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int64_t_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_bool_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int64_t_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_bool_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int64_t_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_bool_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int64_t_bool_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_bool_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_bool_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int64_t_bool_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_bool_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_bool_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int64_t_bool_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int64_t_bool_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int64_t_bool_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int64_t_bool_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int64_t_bool_unbounded, element_flags_anonymous_map_int64_t_bool_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int64_t_bool_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int64_t_bool_unbounded), key_flags_anonymous_map_int64_t_bool_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int64_t_bool_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int64_t_bool_unbounded", type_ids_var_map_longlong_boolean))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int64_t_bool_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_longlong_boolean = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_longlong_boolean = 0x00000000;
            bool common_var_map_longlong_boolean_ec {false};
            CommonStructMember common_var_map_longlong_boolean {TypeObjectUtils::build_common_struct_member(member_id_var_map_longlong_boolean, member_flags_var_map_longlong_boolean, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_boolean, common_var_map_longlong_boolean_ec))};
            if (!common_var_map_longlong_boolean_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_longlong_boolean member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_longlong_boolean = "var_map_longlong_boolean";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_longlong_boolean;
            ann_custom_MapLongLongBoolean.reset();
            CompleteMemberDetail detail_var_map_longlong_boolean = TypeObjectUtils::build_complete_member_detail(name_var_map_longlong_boolean, member_ann_builtin_var_map_longlong_boolean, ann_custom_MapLongLongBoolean);
            CompleteStructMember member_var_map_longlong_boolean = TypeObjectUtils::build_complete_struct_member(common_var_map_longlong_boolean, detail_var_map_longlong_boolean);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongLongBoolean, member_var_map_longlong_boolean);
        }
        CompleteStructType struct_type_MapLongLongBoolean = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongLongBoolean, header_MapLongLongBoolean, member_seq_MapLongLongBoolean);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongLongBoolean, type_name_MapLongLongBoolean.to_string(), type_ids_MapLongLongBoolean))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongLongBoolean already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongLongOctet_type_identifier(
        TypeIdentifierPair& type_ids_MapLongLongOctet)
{

    ReturnCode_t return_code_MapLongLongOctet {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongLongOctet =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongLongOctet", type_ids_MapLongLongOctet);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongLongOctet)
    {
        StructTypeFlag struct_flags_MapLongLongOctet = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongLongOctet = "MapLongLongOctet";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongLongOctet;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongLongOctet;
        CompleteTypeDetail detail_MapLongLongOctet = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongLongOctet, ann_custom_MapLongLongOctet, type_name_MapLongLongOctet.to_string());
        CompleteStructHeader header_MapLongLongOctet;
        header_MapLongLongOctet = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongLongOctet);
        CompleteStructMemberSeq member_seq_MapLongLongOctet;
        {
            TypeIdentifierPair type_ids_var_map_longlong_octet;
            ReturnCode_t return_code_var_map_longlong_octet {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_longlong_octet =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int64_t_byte_unbounded", type_ids_var_map_longlong_octet);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_octet)
            {
                return_code_var_map_longlong_octet =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_byte", type_ids_var_map_longlong_octet);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_octet)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int64_t_byte_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int64_t_byte_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_octet, element_identifier_anonymous_map_int64_t_byte_unbounded_ec))};
                if (!element_identifier_anonymous_map_int64_t_byte_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_byte_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_longlong_octet =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_longlong_octet);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_octet)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int64_t_byte_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int64_t_byte_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_octet, key_identifier_anonymous_map_int64_t_byte_unbounded_ec))};
                if (!key_identifier_anonymous_map_int64_t_byte_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_byte_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int64_t_byte_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int64_t_byte_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_byte_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int64_t_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_byte_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int64_t_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_byte_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int64_t_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_byte_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int64_t_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_byte_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int64_t_byte_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_byte_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_byte_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int64_t_byte_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_byte_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_byte_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int64_t_byte_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int64_t_byte_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int64_t_byte_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int64_t_byte_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int64_t_byte_unbounded, element_flags_anonymous_map_int64_t_byte_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int64_t_byte_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int64_t_byte_unbounded), key_flags_anonymous_map_int64_t_byte_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int64_t_byte_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int64_t_byte_unbounded", type_ids_var_map_longlong_octet))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int64_t_byte_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_longlong_octet = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_longlong_octet = 0x00000000;
            bool common_var_map_longlong_octet_ec {false};
            CommonStructMember common_var_map_longlong_octet {TypeObjectUtils::build_common_struct_member(member_id_var_map_longlong_octet, member_flags_var_map_longlong_octet, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_octet, common_var_map_longlong_octet_ec))};
            if (!common_var_map_longlong_octet_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_longlong_octet member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_longlong_octet = "var_map_longlong_octet";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_longlong_octet;
            ann_custom_MapLongLongOctet.reset();
            CompleteMemberDetail detail_var_map_longlong_octet = TypeObjectUtils::build_complete_member_detail(name_var_map_longlong_octet, member_ann_builtin_var_map_longlong_octet, ann_custom_MapLongLongOctet);
            CompleteStructMember member_var_map_longlong_octet = TypeObjectUtils::build_complete_struct_member(common_var_map_longlong_octet, detail_var_map_longlong_octet);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongLongOctet, member_var_map_longlong_octet);
        }
        CompleteStructType struct_type_MapLongLongOctet = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongLongOctet, header_MapLongLongOctet, member_seq_MapLongLongOctet);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongLongOctet, type_name_MapLongLongOctet.to_string(), type_ids_MapLongLongOctet))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongLongOctet already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongLongChar_type_identifier(
        TypeIdentifierPair& type_ids_MapLongLongChar)
{

    ReturnCode_t return_code_MapLongLongChar {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongLongChar =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongLongChar", type_ids_MapLongLongChar);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongLongChar)
    {
        StructTypeFlag struct_flags_MapLongLongChar = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongLongChar = "MapLongLongChar";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongLongChar;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongLongChar;
        CompleteTypeDetail detail_MapLongLongChar = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongLongChar, ann_custom_MapLongLongChar, type_name_MapLongLongChar.to_string());
        CompleteStructHeader header_MapLongLongChar;
        header_MapLongLongChar = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongLongChar);
        CompleteStructMemberSeq member_seq_MapLongLongChar;
        {
            TypeIdentifierPair type_ids_var_map_longlong_char;
            ReturnCode_t return_code_var_map_longlong_char {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_longlong_char =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int64_t_char_unbounded", type_ids_var_map_longlong_char);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_char)
            {
                return_code_var_map_longlong_char =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_char", type_ids_var_map_longlong_char);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_char)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int64_t_char_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int64_t_char_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_char, element_identifier_anonymous_map_int64_t_char_unbounded_ec))};
                if (!element_identifier_anonymous_map_int64_t_char_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_char_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_longlong_char =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_longlong_char);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_char)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int64_t_char_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int64_t_char_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_char, key_identifier_anonymous_map_int64_t_char_unbounded_ec))};
                if (!key_identifier_anonymous_map_int64_t_char_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_char_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int64_t_char_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int64_t_char_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_char_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int64_t_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_char_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int64_t_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_char_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int64_t_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_char_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int64_t_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_char_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int64_t_char_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_char_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_char_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int64_t_char_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_char_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_char_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int64_t_char_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int64_t_char_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int64_t_char_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int64_t_char_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int64_t_char_unbounded, element_flags_anonymous_map_int64_t_char_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int64_t_char_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int64_t_char_unbounded), key_flags_anonymous_map_int64_t_char_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int64_t_char_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int64_t_char_unbounded", type_ids_var_map_longlong_char))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int64_t_char_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_longlong_char = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_longlong_char = 0x00000000;
            bool common_var_map_longlong_char_ec {false};
            CommonStructMember common_var_map_longlong_char {TypeObjectUtils::build_common_struct_member(member_id_var_map_longlong_char, member_flags_var_map_longlong_char, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_char, common_var_map_longlong_char_ec))};
            if (!common_var_map_longlong_char_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_longlong_char member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_longlong_char = "var_map_longlong_char";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_longlong_char;
            ann_custom_MapLongLongChar.reset();
            CompleteMemberDetail detail_var_map_longlong_char = TypeObjectUtils::build_complete_member_detail(name_var_map_longlong_char, member_ann_builtin_var_map_longlong_char, ann_custom_MapLongLongChar);
            CompleteStructMember member_var_map_longlong_char = TypeObjectUtils::build_complete_struct_member(common_var_map_longlong_char, detail_var_map_longlong_char);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongLongChar, member_var_map_longlong_char);
        }
        CompleteStructType struct_type_MapLongLongChar = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongLongChar, header_MapLongLongChar, member_seq_MapLongLongChar);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongLongChar, type_name_MapLongLongChar.to_string(), type_ids_MapLongLongChar))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongLongChar already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongLongWChar_type_identifier(
        TypeIdentifierPair& type_ids_MapLongLongWChar)
{

    ReturnCode_t return_code_MapLongLongWChar {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongLongWChar =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongLongWChar", type_ids_MapLongLongWChar);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongLongWChar)
    {
        StructTypeFlag struct_flags_MapLongLongWChar = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongLongWChar = "MapLongLongWChar";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongLongWChar;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongLongWChar;
        CompleteTypeDetail detail_MapLongLongWChar = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongLongWChar, ann_custom_MapLongLongWChar, type_name_MapLongLongWChar.to_string());
        CompleteStructHeader header_MapLongLongWChar;
        header_MapLongLongWChar = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongLongWChar);
        CompleteStructMemberSeq member_seq_MapLongLongWChar;
        {
            TypeIdentifierPair type_ids_var_map_longlong_wchar;
            ReturnCode_t return_code_var_map_longlong_wchar {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_longlong_wchar =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int64_t_wchar_t_unbounded", type_ids_var_map_longlong_wchar);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_wchar)
            {
                return_code_var_map_longlong_wchar =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_wchar_t", type_ids_var_map_longlong_wchar);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_wchar)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int64_t_wchar_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int64_t_wchar_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_wchar, element_identifier_anonymous_map_int64_t_wchar_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_int64_t_wchar_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_wchar_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_longlong_wchar =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_longlong_wchar);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_wchar)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int64_t_wchar_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int64_t_wchar_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_wchar, key_identifier_anonymous_map_int64_t_wchar_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_int64_t_wchar_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_wchar_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int64_t_wchar_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int64_t_wchar_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_wchar_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int64_t_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_wchar_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int64_t_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_wchar_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int64_t_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_wchar_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int64_t_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_wchar_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int64_t_wchar_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_wchar_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_wchar_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int64_t_wchar_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_wchar_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_wchar_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int64_t_wchar_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int64_t_wchar_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int64_t_wchar_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int64_t_wchar_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int64_t_wchar_t_unbounded, element_flags_anonymous_map_int64_t_wchar_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int64_t_wchar_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int64_t_wchar_t_unbounded), key_flags_anonymous_map_int64_t_wchar_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int64_t_wchar_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int64_t_wchar_t_unbounded", type_ids_var_map_longlong_wchar))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int64_t_wchar_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_longlong_wchar = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_longlong_wchar = 0x00000000;
            bool common_var_map_longlong_wchar_ec {false};
            CommonStructMember common_var_map_longlong_wchar {TypeObjectUtils::build_common_struct_member(member_id_var_map_longlong_wchar, member_flags_var_map_longlong_wchar, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_wchar, common_var_map_longlong_wchar_ec))};
            if (!common_var_map_longlong_wchar_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_longlong_wchar member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_longlong_wchar = "var_map_longlong_wchar";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_longlong_wchar;
            ann_custom_MapLongLongWChar.reset();
            CompleteMemberDetail detail_var_map_longlong_wchar = TypeObjectUtils::build_complete_member_detail(name_var_map_longlong_wchar, member_ann_builtin_var_map_longlong_wchar, ann_custom_MapLongLongWChar);
            CompleteStructMember member_var_map_longlong_wchar = TypeObjectUtils::build_complete_struct_member(common_var_map_longlong_wchar, detail_var_map_longlong_wchar);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongLongWChar, member_var_map_longlong_wchar);
        }
        CompleteStructType struct_type_MapLongLongWChar = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongLongWChar, header_MapLongLongWChar, member_seq_MapLongLongWChar);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongLongWChar, type_name_MapLongLongWChar.to_string(), type_ids_MapLongLongWChar))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongLongWChar already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongLongString_type_identifier(
        TypeIdentifierPair& type_ids_MapLongLongString)
{

    ReturnCode_t return_code_MapLongLongString {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongLongString =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongLongString", type_ids_MapLongLongString);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongLongString)
    {
        StructTypeFlag struct_flags_MapLongLongString = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongLongString = "MapLongLongString";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongLongString;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongLongString;
        CompleteTypeDetail detail_MapLongLongString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongLongString, ann_custom_MapLongLongString, type_name_MapLongLongString.to_string());
        CompleteStructHeader header_MapLongLongString;
        header_MapLongLongString = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongLongString);
        CompleteStructMemberSeq member_seq_MapLongLongString;
        {
            TypeIdentifierPair type_ids_var_map_longlong_string;
            ReturnCode_t return_code_var_map_longlong_string {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_longlong_string =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int64_t_anonymous_string_unbounded_unbounded", type_ids_var_map_longlong_string);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_string)
            {
                return_code_var_map_longlong_string =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_longlong_string);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_string)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_longlong_string))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool element_identifier_anonymous_map_int64_t_anonymous_string_unbounded_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int64_t_anonymous_string_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_string, element_identifier_anonymous_map_int64_t_anonymous_string_unbounded_unbounded_ec))};
                if (!element_identifier_anonymous_map_int64_t_anonymous_string_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_anonymous_string_unbounded_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_longlong_string =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_longlong_string);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_string)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int64_t_anonymous_string_unbounded_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int64_t_anonymous_string_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_string, key_identifier_anonymous_map_int64_t_anonymous_string_unbounded_unbounded_ec))};
                if (!key_identifier_anonymous_map_int64_t_anonymous_string_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_anonymous_string_unbounded_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int64_t_anonymous_string_unbounded_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int64_t_anonymous_string_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_string_unbounded_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int64_t_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_string_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int64_t_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_string_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int64_t_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_string_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int64_t_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_string_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int64_t_anonymous_string_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_string_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_string_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int64_t_anonymous_string_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_string_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_string_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int64_t_anonymous_string_unbounded_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int64_t_anonymous_string_unbounded_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int64_t_anonymous_string_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int64_t_anonymous_string_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int64_t_anonymous_string_unbounded_unbounded, element_flags_anonymous_map_int64_t_anonymous_string_unbounded_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int64_t_anonymous_string_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int64_t_anonymous_string_unbounded_unbounded), key_flags_anonymous_map_int64_t_anonymous_string_unbounded_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int64_t_anonymous_string_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int64_t_anonymous_string_unbounded_unbounded", type_ids_var_map_longlong_string))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int64_t_anonymous_string_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_longlong_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_longlong_string = 0x00000000;
            bool common_var_map_longlong_string_ec {false};
            CommonStructMember common_var_map_longlong_string {TypeObjectUtils::build_common_struct_member(member_id_var_map_longlong_string, member_flags_var_map_longlong_string, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_string, common_var_map_longlong_string_ec))};
            if (!common_var_map_longlong_string_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_longlong_string member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_longlong_string = "var_map_longlong_string";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_longlong_string;
            ann_custom_MapLongLongString.reset();
            CompleteMemberDetail detail_var_map_longlong_string = TypeObjectUtils::build_complete_member_detail(name_var_map_longlong_string, member_ann_builtin_var_map_longlong_string, ann_custom_MapLongLongString);
            CompleteStructMember member_var_map_longlong_string = TypeObjectUtils::build_complete_struct_member(common_var_map_longlong_string, detail_var_map_longlong_string);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongLongString, member_var_map_longlong_string);
        }
        CompleteStructType struct_type_MapLongLongString = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongLongString, header_MapLongLongString, member_seq_MapLongLongString);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongLongString, type_name_MapLongLongString.to_string(), type_ids_MapLongLongString))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongLongString already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongLongWString_type_identifier(
        TypeIdentifierPair& type_ids_MapLongLongWString)
{

    ReturnCode_t return_code_MapLongLongWString {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongLongWString =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongLongWString", type_ids_MapLongLongWString);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongLongWString)
    {
        StructTypeFlag struct_flags_MapLongLongWString = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongLongWString = "MapLongLongWString";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongLongWString;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongLongWString;
        CompleteTypeDetail detail_MapLongLongWString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongLongWString, ann_custom_MapLongLongWString, type_name_MapLongLongWString.to_string());
        CompleteStructHeader header_MapLongLongWString;
        header_MapLongLongWString = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongLongWString);
        CompleteStructMemberSeq member_seq_MapLongLongWString;
        {
            TypeIdentifierPair type_ids_var_map_longlong_wstring;
            ReturnCode_t return_code_var_map_longlong_wstring {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_longlong_wstring =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded", type_ids_var_map_longlong_wstring);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_wstring)
            {
                return_code_var_map_longlong_wstring =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_longlong_wstring);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_wstring)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_longlong_wstring, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool element_identifier_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_wstring, element_identifier_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded_ec))};
                if (!element_identifier_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_longlong_wstring =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_longlong_wstring);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_wstring)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_wstring, key_identifier_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded_ec))};
                if (!key_identifier_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded, element_flags_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded), key_flags_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded", type_ids_var_map_longlong_wstring))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int64_t_anonymous_wstring_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_longlong_wstring = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_longlong_wstring = 0x00000000;
            bool common_var_map_longlong_wstring_ec {false};
            CommonStructMember common_var_map_longlong_wstring {TypeObjectUtils::build_common_struct_member(member_id_var_map_longlong_wstring, member_flags_var_map_longlong_wstring, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_wstring, common_var_map_longlong_wstring_ec))};
            if (!common_var_map_longlong_wstring_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_longlong_wstring member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_longlong_wstring = "var_map_longlong_wstring";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_longlong_wstring;
            ann_custom_MapLongLongWString.reset();
            CompleteMemberDetail detail_var_map_longlong_wstring = TypeObjectUtils::build_complete_member_detail(name_var_map_longlong_wstring, member_ann_builtin_var_map_longlong_wstring, ann_custom_MapLongLongWString);
            CompleteStructMember member_var_map_longlong_wstring = TypeObjectUtils::build_complete_struct_member(common_var_map_longlong_wstring, detail_var_map_longlong_wstring);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongLongWString, member_var_map_longlong_wstring);
        }
        CompleteStructType struct_type_MapLongLongWString = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongLongWString, header_MapLongLongWString, member_seq_MapLongLongWString);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongLongWString, type_name_MapLongLongWString.to_string(), type_ids_MapLongLongWString))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongLongWString already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongLongInnerAliasBoundedStringHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapLongLongInnerAliasBoundedStringHelper)
{

    ReturnCode_t return_code_MapLongLongInnerAliasBoundedStringHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongLongInnerAliasBoundedStringHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongLongInnerAliasBoundedStringHelper", type_ids_MapLongLongInnerAliasBoundedStringHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongLongInnerAliasBoundedStringHelper)
    {
        StructTypeFlag struct_flags_MapLongLongInnerAliasBoundedStringHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongLongInnerAliasBoundedStringHelper = "MapLongLongInnerAliasBoundedStringHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongLongInnerAliasBoundedStringHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongLongInnerAliasBoundedStringHelper;
        CompleteTypeDetail detail_MapLongLongInnerAliasBoundedStringHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongLongInnerAliasBoundedStringHelper, ann_custom_MapLongLongInnerAliasBoundedStringHelper, type_name_MapLongLongInnerAliasBoundedStringHelper.to_string());
        CompleteStructHeader header_MapLongLongInnerAliasBoundedStringHelper;
        header_MapLongLongInnerAliasBoundedStringHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongLongInnerAliasBoundedStringHelper);
        CompleteStructMemberSeq member_seq_MapLongLongInnerAliasBoundedStringHelper;
        {
            TypeIdentifierPair type_ids_var_map_longlong_inneraliasboundedstringhelper;
            ReturnCode_t return_code_var_map_longlong_inneraliasboundedstringhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_longlong_inneraliasboundedstringhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int64_t_anonymous_string_10_unbounded", type_ids_var_map_longlong_inneraliasboundedstringhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_inneraliasboundedstringhelper)
            {
                return_code_var_map_longlong_inneraliasboundedstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_longlong_inneraliasboundedstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_inneraliasboundedstringhelper)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_longlong_inneraliasboundedstringhelper);
                }
                bool element_identifier_anonymous_map_int64_t_anonymous_string_10_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int64_t_anonymous_string_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_inneraliasboundedstringhelper, element_identifier_anonymous_map_int64_t_anonymous_string_10_unbounded_ec))};
                if (!element_identifier_anonymous_map_int64_t_anonymous_string_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_anonymous_string_10_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_longlong_inneraliasboundedstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_longlong_inneraliasboundedstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_inneraliasboundedstringhelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int64_t_anonymous_string_10_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int64_t_anonymous_string_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_inneraliasboundedstringhelper, key_identifier_anonymous_map_int64_t_anonymous_string_10_unbounded_ec))};
                if (!key_identifier_anonymous_map_int64_t_anonymous_string_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_anonymous_string_10_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int64_t_anonymous_string_10_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int64_t_anonymous_string_10_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_string_10_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int64_t_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_string_10_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int64_t_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_string_10_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int64_t_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_string_10_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int64_t_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_string_10_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int64_t_anonymous_string_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_string_10_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_string_10_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int64_t_anonymous_string_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_string_10_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_string_10_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int64_t_anonymous_string_10_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int64_t_anonymous_string_10_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int64_t_anonymous_string_10_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int64_t_anonymous_string_10_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int64_t_anonymous_string_10_unbounded, element_flags_anonymous_map_int64_t_anonymous_string_10_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int64_t_anonymous_string_10_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int64_t_anonymous_string_10_unbounded), key_flags_anonymous_map_int64_t_anonymous_string_10_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int64_t_anonymous_string_10_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int64_t_anonymous_string_10_unbounded", type_ids_var_map_longlong_inneraliasboundedstringhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int64_t_anonymous_string_10_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_longlong_inneraliasboundedstringhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_longlong_inneraliasboundedstringhelper = 0x00000000;
            bool common_var_map_longlong_inneraliasboundedstringhelper_ec {false};
            CommonStructMember common_var_map_longlong_inneraliasboundedstringhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_longlong_inneraliasboundedstringhelper, member_flags_var_map_longlong_inneraliasboundedstringhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_inneraliasboundedstringhelper, common_var_map_longlong_inneraliasboundedstringhelper_ec))};
            if (!common_var_map_longlong_inneraliasboundedstringhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_longlong_inneraliasboundedstringhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_longlong_inneraliasboundedstringhelper = "var_map_longlong_inneraliasboundedstringhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_longlong_inneraliasboundedstringhelper;
            ann_custom_MapLongLongInnerAliasBoundedStringHelper.reset();
            CompleteMemberDetail detail_var_map_longlong_inneraliasboundedstringhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_longlong_inneraliasboundedstringhelper, member_ann_builtin_var_map_longlong_inneraliasboundedstringhelper, ann_custom_MapLongLongInnerAliasBoundedStringHelper);
            CompleteStructMember member_var_map_longlong_inneraliasboundedstringhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_longlong_inneraliasboundedstringhelper, detail_var_map_longlong_inneraliasboundedstringhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongLongInnerAliasBoundedStringHelper, member_var_map_longlong_inneraliasboundedstringhelper);
        }
        CompleteStructType struct_type_MapLongLongInnerAliasBoundedStringHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongLongInnerAliasBoundedStringHelper, header_MapLongLongInnerAliasBoundedStringHelper, member_seq_MapLongLongInnerAliasBoundedStringHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongLongInnerAliasBoundedStringHelper, type_name_MapLongLongInnerAliasBoundedStringHelper.to_string(), type_ids_MapLongLongInnerAliasBoundedStringHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongLongInnerAliasBoundedStringHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongLongInnerAliasBoundedWStringHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapLongLongInnerAliasBoundedWStringHelper)
{

    ReturnCode_t return_code_MapLongLongInnerAliasBoundedWStringHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongLongInnerAliasBoundedWStringHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongLongInnerAliasBoundedWStringHelper", type_ids_MapLongLongInnerAliasBoundedWStringHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongLongInnerAliasBoundedWStringHelper)
    {
        StructTypeFlag struct_flags_MapLongLongInnerAliasBoundedWStringHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongLongInnerAliasBoundedWStringHelper = "MapLongLongInnerAliasBoundedWStringHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongLongInnerAliasBoundedWStringHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongLongInnerAliasBoundedWStringHelper;
        CompleteTypeDetail detail_MapLongLongInnerAliasBoundedWStringHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongLongInnerAliasBoundedWStringHelper, ann_custom_MapLongLongInnerAliasBoundedWStringHelper, type_name_MapLongLongInnerAliasBoundedWStringHelper.to_string());
        CompleteStructHeader header_MapLongLongInnerAliasBoundedWStringHelper;
        header_MapLongLongInnerAliasBoundedWStringHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongLongInnerAliasBoundedWStringHelper);
        CompleteStructMemberSeq member_seq_MapLongLongInnerAliasBoundedWStringHelper;
        {
            TypeIdentifierPair type_ids_var_map_longlong_inneraliasboundedwstringhelper;
            ReturnCode_t return_code_var_map_longlong_inneraliasboundedwstringhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_longlong_inneraliasboundedwstringhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int64_t_anonymous_wstring_10_unbounded", type_ids_var_map_longlong_inneraliasboundedwstringhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_inneraliasboundedwstringhelper)
            {
                return_code_var_map_longlong_inneraliasboundedwstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_longlong_inneraliasboundedwstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_inneraliasboundedwstringhelper)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_longlong_inneraliasboundedwstringhelper);
                }
                bool element_identifier_anonymous_map_int64_t_anonymous_wstring_10_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int64_t_anonymous_wstring_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_inneraliasboundedwstringhelper, element_identifier_anonymous_map_int64_t_anonymous_wstring_10_unbounded_ec))};
                if (!element_identifier_anonymous_map_int64_t_anonymous_wstring_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_anonymous_wstring_10_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_longlong_inneraliasboundedwstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_longlong_inneraliasboundedwstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_inneraliasboundedwstringhelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int64_t_anonymous_wstring_10_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int64_t_anonymous_wstring_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_inneraliasboundedwstringhelper, key_identifier_anonymous_map_int64_t_anonymous_wstring_10_unbounded_ec))};
                if (!key_identifier_anonymous_map_int64_t_anonymous_wstring_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_anonymous_wstring_10_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int64_t_anonymous_wstring_10_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int64_t_anonymous_wstring_10_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_wstring_10_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int64_t_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_wstring_10_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int64_t_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_wstring_10_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int64_t_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_wstring_10_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int64_t_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_wstring_10_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int64_t_anonymous_wstring_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_wstring_10_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_wstring_10_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int64_t_anonymous_wstring_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_wstring_10_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_wstring_10_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int64_t_anonymous_wstring_10_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int64_t_anonymous_wstring_10_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int64_t_anonymous_wstring_10_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int64_t_anonymous_wstring_10_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int64_t_anonymous_wstring_10_unbounded, element_flags_anonymous_map_int64_t_anonymous_wstring_10_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int64_t_anonymous_wstring_10_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int64_t_anonymous_wstring_10_unbounded), key_flags_anonymous_map_int64_t_anonymous_wstring_10_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int64_t_anonymous_wstring_10_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int64_t_anonymous_wstring_10_unbounded", type_ids_var_map_longlong_inneraliasboundedwstringhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int64_t_anonymous_wstring_10_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_longlong_inneraliasboundedwstringhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_longlong_inneraliasboundedwstringhelper = 0x00000000;
            bool common_var_map_longlong_inneraliasboundedwstringhelper_ec {false};
            CommonStructMember common_var_map_longlong_inneraliasboundedwstringhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_longlong_inneraliasboundedwstringhelper, member_flags_var_map_longlong_inneraliasboundedwstringhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_inneraliasboundedwstringhelper, common_var_map_longlong_inneraliasboundedwstringhelper_ec))};
            if (!common_var_map_longlong_inneraliasboundedwstringhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_longlong_inneraliasboundedwstringhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_longlong_inneraliasboundedwstringhelper = "var_map_longlong_inneraliasboundedwstringhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_longlong_inneraliasboundedwstringhelper;
            ann_custom_MapLongLongInnerAliasBoundedWStringHelper.reset();
            CompleteMemberDetail detail_var_map_longlong_inneraliasboundedwstringhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_longlong_inneraliasboundedwstringhelper, member_ann_builtin_var_map_longlong_inneraliasboundedwstringhelper, ann_custom_MapLongLongInnerAliasBoundedWStringHelper);
            CompleteStructMember member_var_map_longlong_inneraliasboundedwstringhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_longlong_inneraliasboundedwstringhelper, detail_var_map_longlong_inneraliasboundedwstringhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongLongInnerAliasBoundedWStringHelper, member_var_map_longlong_inneraliasboundedwstringhelper);
        }
        CompleteStructType struct_type_MapLongLongInnerAliasBoundedWStringHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongLongInnerAliasBoundedWStringHelper, header_MapLongLongInnerAliasBoundedWStringHelper, member_seq_MapLongLongInnerAliasBoundedWStringHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongLongInnerAliasBoundedWStringHelper, type_name_MapLongLongInnerAliasBoundedWStringHelper.to_string(), type_ids_MapLongLongInnerAliasBoundedWStringHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongLongInnerAliasBoundedWStringHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongLongInnerEnumHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapLongLongInnerEnumHelper)
{

    ReturnCode_t return_code_MapLongLongInnerEnumHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongLongInnerEnumHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongLongInnerEnumHelper", type_ids_MapLongLongInnerEnumHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongLongInnerEnumHelper)
    {
        StructTypeFlag struct_flags_MapLongLongInnerEnumHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongLongInnerEnumHelper = "MapLongLongInnerEnumHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongLongInnerEnumHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongLongInnerEnumHelper;
        CompleteTypeDetail detail_MapLongLongInnerEnumHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongLongInnerEnumHelper, ann_custom_MapLongLongInnerEnumHelper, type_name_MapLongLongInnerEnumHelper.to_string());
        CompleteStructHeader header_MapLongLongInnerEnumHelper;
        header_MapLongLongInnerEnumHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongLongInnerEnumHelper);
        CompleteStructMemberSeq member_seq_MapLongLongInnerEnumHelper;
        {
            TypeIdentifierPair type_ids_var_map_longlong_innerenumhelper;
            ReturnCode_t return_code_var_map_longlong_innerenumhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_longlong_innerenumhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int64_t_InnerEnumHelper_unbounded", type_ids_var_map_longlong_innerenumhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_innerenumhelper)
            {
                return_code_var_map_longlong_innerenumhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerEnumHelper", type_ids_var_map_longlong_innerenumhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_innerenumhelper)
                {
                ::register_InnerEnumHelper_type_identifier(type_ids_var_map_longlong_innerenumhelper);
                }
                bool element_identifier_anonymous_map_int64_t_InnerEnumHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int64_t_InnerEnumHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_innerenumhelper, element_identifier_anonymous_map_int64_t_InnerEnumHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_int64_t_InnerEnumHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_InnerEnumHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_longlong_innerenumhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_longlong_innerenumhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_innerenumhelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int64_t_InnerEnumHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int64_t_InnerEnumHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_innerenumhelper, key_identifier_anonymous_map_int64_t_InnerEnumHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_int64_t_InnerEnumHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_InnerEnumHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int64_t_InnerEnumHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int64_t_InnerEnumHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerEnumHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int64_t_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerEnumHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int64_t_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerEnumHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int64_t_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerEnumHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int64_t_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerEnumHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int64_t_InnerEnumHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerEnumHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerEnumHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int64_t_InnerEnumHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerEnumHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerEnumHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int64_t_InnerEnumHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int64_t_InnerEnumHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int64_t_InnerEnumHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int64_t_InnerEnumHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int64_t_InnerEnumHelper_unbounded, element_flags_anonymous_map_int64_t_InnerEnumHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int64_t_InnerEnumHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int64_t_InnerEnumHelper_unbounded), key_flags_anonymous_map_int64_t_InnerEnumHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int64_t_InnerEnumHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int64_t_InnerEnumHelper_unbounded", type_ids_var_map_longlong_innerenumhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int64_t_InnerEnumHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_longlong_innerenumhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_longlong_innerenumhelper = 0x00000000;
            bool common_var_map_longlong_innerenumhelper_ec {false};
            CommonStructMember common_var_map_longlong_innerenumhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_longlong_innerenumhelper, member_flags_var_map_longlong_innerenumhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_innerenumhelper, common_var_map_longlong_innerenumhelper_ec))};
            if (!common_var_map_longlong_innerenumhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_longlong_innerenumhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_longlong_innerenumhelper = "var_map_longlong_innerenumhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_longlong_innerenumhelper;
            ann_custom_MapLongLongInnerEnumHelper.reset();
            CompleteMemberDetail detail_var_map_longlong_innerenumhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_longlong_innerenumhelper, member_ann_builtin_var_map_longlong_innerenumhelper, ann_custom_MapLongLongInnerEnumHelper);
            CompleteStructMember member_var_map_longlong_innerenumhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_longlong_innerenumhelper, detail_var_map_longlong_innerenumhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongLongInnerEnumHelper, member_var_map_longlong_innerenumhelper);
        }
        CompleteStructType struct_type_MapLongLongInnerEnumHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongLongInnerEnumHelper, header_MapLongLongInnerEnumHelper, member_seq_MapLongLongInnerEnumHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongLongInnerEnumHelper, type_name_MapLongLongInnerEnumHelper.to_string(), type_ids_MapLongLongInnerEnumHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongLongInnerEnumHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongLongInnerBitMaskHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapLongLongInnerBitMaskHelper)
{

    ReturnCode_t return_code_MapLongLongInnerBitMaskHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongLongInnerBitMaskHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongLongInnerBitMaskHelper", type_ids_MapLongLongInnerBitMaskHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongLongInnerBitMaskHelper)
    {
        StructTypeFlag struct_flags_MapLongLongInnerBitMaskHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongLongInnerBitMaskHelper = "MapLongLongInnerBitMaskHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongLongInnerBitMaskHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongLongInnerBitMaskHelper;
        CompleteTypeDetail detail_MapLongLongInnerBitMaskHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongLongInnerBitMaskHelper, ann_custom_MapLongLongInnerBitMaskHelper, type_name_MapLongLongInnerBitMaskHelper.to_string());
        CompleteStructHeader header_MapLongLongInnerBitMaskHelper;
        header_MapLongLongInnerBitMaskHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongLongInnerBitMaskHelper);
        CompleteStructMemberSeq member_seq_MapLongLongInnerBitMaskHelper;
        {
            TypeIdentifierPair type_ids_var_map_longlong_innerbitmaskhelper;
            ReturnCode_t return_code_var_map_longlong_innerbitmaskhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_longlong_innerbitmaskhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int64_t_InnerBitMaskHelper_unbounded", type_ids_var_map_longlong_innerbitmaskhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_innerbitmaskhelper)
            {
                return_code_var_map_longlong_innerbitmaskhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerBitMaskHelper", type_ids_var_map_longlong_innerbitmaskhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_innerbitmaskhelper)
                {
                ::register_InnerBitMaskHelper_type_identifier(type_ids_var_map_longlong_innerbitmaskhelper);
                }
                bool element_identifier_anonymous_map_int64_t_InnerBitMaskHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int64_t_InnerBitMaskHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_innerbitmaskhelper, element_identifier_anonymous_map_int64_t_InnerBitMaskHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_int64_t_InnerBitMaskHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_InnerBitMaskHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_longlong_innerbitmaskhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_longlong_innerbitmaskhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_innerbitmaskhelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int64_t_InnerBitMaskHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int64_t_InnerBitMaskHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_innerbitmaskhelper, key_identifier_anonymous_map_int64_t_InnerBitMaskHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_int64_t_InnerBitMaskHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_InnerBitMaskHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int64_t_InnerBitMaskHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int64_t_InnerBitMaskHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerBitMaskHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int64_t_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerBitMaskHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int64_t_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerBitMaskHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int64_t_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerBitMaskHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int64_t_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerBitMaskHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int64_t_InnerBitMaskHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerBitMaskHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerBitMaskHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int64_t_InnerBitMaskHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerBitMaskHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerBitMaskHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int64_t_InnerBitMaskHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int64_t_InnerBitMaskHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int64_t_InnerBitMaskHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int64_t_InnerBitMaskHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int64_t_InnerBitMaskHelper_unbounded, element_flags_anonymous_map_int64_t_InnerBitMaskHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int64_t_InnerBitMaskHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int64_t_InnerBitMaskHelper_unbounded), key_flags_anonymous_map_int64_t_InnerBitMaskHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int64_t_InnerBitMaskHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int64_t_InnerBitMaskHelper_unbounded", type_ids_var_map_longlong_innerbitmaskhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int64_t_InnerBitMaskHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_longlong_innerbitmaskhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_longlong_innerbitmaskhelper = 0x00000000;
            bool common_var_map_longlong_innerbitmaskhelper_ec {false};
            CommonStructMember common_var_map_longlong_innerbitmaskhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_longlong_innerbitmaskhelper, member_flags_var_map_longlong_innerbitmaskhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_innerbitmaskhelper, common_var_map_longlong_innerbitmaskhelper_ec))};
            if (!common_var_map_longlong_innerbitmaskhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_longlong_innerbitmaskhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_longlong_innerbitmaskhelper = "var_map_longlong_innerbitmaskhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_longlong_innerbitmaskhelper;
            ann_custom_MapLongLongInnerBitMaskHelper.reset();
            CompleteMemberDetail detail_var_map_longlong_innerbitmaskhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_longlong_innerbitmaskhelper, member_ann_builtin_var_map_longlong_innerbitmaskhelper, ann_custom_MapLongLongInnerBitMaskHelper);
            CompleteStructMember member_var_map_longlong_innerbitmaskhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_longlong_innerbitmaskhelper, detail_var_map_longlong_innerbitmaskhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongLongInnerBitMaskHelper, member_var_map_longlong_innerbitmaskhelper);
        }
        CompleteStructType struct_type_MapLongLongInnerBitMaskHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongLongInnerBitMaskHelper, header_MapLongLongInnerBitMaskHelper, member_seq_MapLongLongInnerBitMaskHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongLongInnerBitMaskHelper, type_name_MapLongLongInnerBitMaskHelper.to_string(), type_ids_MapLongLongInnerBitMaskHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongLongInnerBitMaskHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongLongInnerAliasHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapLongLongInnerAliasHelper)
{

    ReturnCode_t return_code_MapLongLongInnerAliasHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongLongInnerAliasHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongLongInnerAliasHelper", type_ids_MapLongLongInnerAliasHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongLongInnerAliasHelper)
    {
        StructTypeFlag struct_flags_MapLongLongInnerAliasHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongLongInnerAliasHelper = "MapLongLongInnerAliasHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongLongInnerAliasHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongLongInnerAliasHelper;
        CompleteTypeDetail detail_MapLongLongInnerAliasHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongLongInnerAliasHelper, ann_custom_MapLongLongInnerAliasHelper, type_name_MapLongLongInnerAliasHelper.to_string());
        CompleteStructHeader header_MapLongLongInnerAliasHelper;
        header_MapLongLongInnerAliasHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongLongInnerAliasHelper);
        CompleteStructMemberSeq member_seq_MapLongLongInnerAliasHelper;
        {
            TypeIdentifierPair type_ids_var_map_longlong_inneraliashelper;
            ReturnCode_t return_code_var_map_longlong_inneraliashelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_longlong_inneraliashelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int64_t_InnerAliasHelper_unbounded", type_ids_var_map_longlong_inneraliashelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_inneraliashelper)
            {
                return_code_var_map_longlong_inneraliashelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerAliasHelper", type_ids_var_map_longlong_inneraliashelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_inneraliashelper)
                {
                ::register_InnerAliasHelper_type_identifier(type_ids_var_map_longlong_inneraliashelper);
                }
                bool element_identifier_anonymous_map_int64_t_InnerAliasHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int64_t_InnerAliasHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_inneraliashelper, element_identifier_anonymous_map_int64_t_InnerAliasHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_int64_t_InnerAliasHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_InnerAliasHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_longlong_inneraliashelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_longlong_inneraliashelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_inneraliashelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int64_t_InnerAliasHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int64_t_InnerAliasHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_inneraliashelper, key_identifier_anonymous_map_int64_t_InnerAliasHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_int64_t_InnerAliasHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_InnerAliasHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int64_t_InnerAliasHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int64_t_InnerAliasHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerAliasHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int64_t_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerAliasHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int64_t_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerAliasHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int64_t_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerAliasHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int64_t_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerAliasHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int64_t_InnerAliasHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerAliasHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerAliasHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int64_t_InnerAliasHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerAliasHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerAliasHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int64_t_InnerAliasHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int64_t_InnerAliasHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int64_t_InnerAliasHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int64_t_InnerAliasHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int64_t_InnerAliasHelper_unbounded, element_flags_anonymous_map_int64_t_InnerAliasHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int64_t_InnerAliasHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int64_t_InnerAliasHelper_unbounded), key_flags_anonymous_map_int64_t_InnerAliasHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int64_t_InnerAliasHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int64_t_InnerAliasHelper_unbounded", type_ids_var_map_longlong_inneraliashelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int64_t_InnerAliasHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_longlong_inneraliashelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_longlong_inneraliashelper = 0x00000000;
            bool common_var_map_longlong_inneraliashelper_ec {false};
            CommonStructMember common_var_map_longlong_inneraliashelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_longlong_inneraliashelper, member_flags_var_map_longlong_inneraliashelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_inneraliashelper, common_var_map_longlong_inneraliashelper_ec))};
            if (!common_var_map_longlong_inneraliashelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_longlong_inneraliashelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_longlong_inneraliashelper = "var_map_longlong_inneraliashelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_longlong_inneraliashelper;
            ann_custom_MapLongLongInnerAliasHelper.reset();
            CompleteMemberDetail detail_var_map_longlong_inneraliashelper = TypeObjectUtils::build_complete_member_detail(name_var_map_longlong_inneraliashelper, member_ann_builtin_var_map_longlong_inneraliashelper, ann_custom_MapLongLongInnerAliasHelper);
            CompleteStructMember member_var_map_longlong_inneraliashelper = TypeObjectUtils::build_complete_struct_member(common_var_map_longlong_inneraliashelper, detail_var_map_longlong_inneraliashelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongLongInnerAliasHelper, member_var_map_longlong_inneraliashelper);
        }
        CompleteStructType struct_type_MapLongLongInnerAliasHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongLongInnerAliasHelper, header_MapLongLongInnerAliasHelper, member_seq_MapLongLongInnerAliasHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongLongInnerAliasHelper, type_name_MapLongLongInnerAliasHelper.to_string(), type_ids_MapLongLongInnerAliasHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongLongInnerAliasHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongLongInnerAliasArrayHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapLongLongInnerAliasArrayHelper)
{

    ReturnCode_t return_code_MapLongLongInnerAliasArrayHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongLongInnerAliasArrayHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongLongInnerAliasArrayHelper", type_ids_MapLongLongInnerAliasArrayHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongLongInnerAliasArrayHelper)
    {
        StructTypeFlag struct_flags_MapLongLongInnerAliasArrayHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongLongInnerAliasArrayHelper = "MapLongLongInnerAliasArrayHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongLongInnerAliasArrayHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongLongInnerAliasArrayHelper;
        CompleteTypeDetail detail_MapLongLongInnerAliasArrayHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongLongInnerAliasArrayHelper, ann_custom_MapLongLongInnerAliasArrayHelper, type_name_MapLongLongInnerAliasArrayHelper.to_string());
        CompleteStructHeader header_MapLongLongInnerAliasArrayHelper;
        header_MapLongLongInnerAliasArrayHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongLongInnerAliasArrayHelper);
        CompleteStructMemberSeq member_seq_MapLongLongInnerAliasArrayHelper;
        {
            TypeIdentifierPair type_ids_var_map_longlong_inneraliasarrayhelper;
            ReturnCode_t return_code_var_map_longlong_inneraliasarrayhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_longlong_inneraliasarrayhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded", type_ids_var_map_longlong_inneraliasarrayhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_inneraliasarrayhelper)
            {
                return_code_var_map_longlong_inneraliasarrayhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_array_helper", type_ids_var_map_longlong_inneraliasarrayhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_inneraliasarrayhelper)
                {
                ::register_Inner_alias_array_helper_type_identifier(type_ids_var_map_longlong_inneraliasarrayhelper);
                }
                bool element_identifier_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_inneraliasarrayhelper, element_identifier_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded_ec))};
                if (!element_identifier_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_longlong_inneraliasarrayhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_longlong_inneraliasarrayhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_inneraliasarrayhelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_inneraliasarrayhelper, key_identifier_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded_ec))};
                if (!key_identifier_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded, element_flags_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded), key_flags_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded", type_ids_var_map_longlong_inneraliasarrayhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int64_t_anonymous_array_int16_t_2_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_longlong_inneraliasarrayhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_longlong_inneraliasarrayhelper = 0x00000000;
            bool common_var_map_longlong_inneraliasarrayhelper_ec {false};
            CommonStructMember common_var_map_longlong_inneraliasarrayhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_longlong_inneraliasarrayhelper, member_flags_var_map_longlong_inneraliasarrayhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_inneraliasarrayhelper, common_var_map_longlong_inneraliasarrayhelper_ec))};
            if (!common_var_map_longlong_inneraliasarrayhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_longlong_inneraliasarrayhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_longlong_inneraliasarrayhelper = "var_map_longlong_inneraliasarrayhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_longlong_inneraliasarrayhelper;
            ann_custom_MapLongLongInnerAliasArrayHelper.reset();
            CompleteMemberDetail detail_var_map_longlong_inneraliasarrayhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_longlong_inneraliasarrayhelper, member_ann_builtin_var_map_longlong_inneraliasarrayhelper, ann_custom_MapLongLongInnerAliasArrayHelper);
            CompleteStructMember member_var_map_longlong_inneraliasarrayhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_longlong_inneraliasarrayhelper, detail_var_map_longlong_inneraliasarrayhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongLongInnerAliasArrayHelper, member_var_map_longlong_inneraliasarrayhelper);
        }
        CompleteStructType struct_type_MapLongLongInnerAliasArrayHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongLongInnerAliasArrayHelper, header_MapLongLongInnerAliasArrayHelper, member_seq_MapLongLongInnerAliasArrayHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongLongInnerAliasArrayHelper, type_name_MapLongLongInnerAliasArrayHelper.to_string(), type_ids_MapLongLongInnerAliasArrayHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongLongInnerAliasArrayHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongLongInnerAliasSequenceHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapLongLongInnerAliasSequenceHelper)
{

    ReturnCode_t return_code_MapLongLongInnerAliasSequenceHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongLongInnerAliasSequenceHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongLongInnerAliasSequenceHelper", type_ids_MapLongLongInnerAliasSequenceHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongLongInnerAliasSequenceHelper)
    {
        StructTypeFlag struct_flags_MapLongLongInnerAliasSequenceHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongLongInnerAliasSequenceHelper = "MapLongLongInnerAliasSequenceHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongLongInnerAliasSequenceHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongLongInnerAliasSequenceHelper;
        CompleteTypeDetail detail_MapLongLongInnerAliasSequenceHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongLongInnerAliasSequenceHelper, ann_custom_MapLongLongInnerAliasSequenceHelper, type_name_MapLongLongInnerAliasSequenceHelper.to_string());
        CompleteStructHeader header_MapLongLongInnerAliasSequenceHelper;
        header_MapLongLongInnerAliasSequenceHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongLongInnerAliasSequenceHelper);
        CompleteStructMemberSeq member_seq_MapLongLongInnerAliasSequenceHelper;
        {
            TypeIdentifierPair type_ids_var_map_longlong_inneraliassequencehelper;
            ReturnCode_t return_code_var_map_longlong_inneraliassequencehelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_longlong_inneraliassequencehelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded", type_ids_var_map_longlong_inneraliassequencehelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_inneraliassequencehelper)
            {
                return_code_var_map_longlong_inneraliassequencehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_sequence_helper", type_ids_var_map_longlong_inneraliassequencehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_inneraliassequencehelper)
                {
                ::register_Inner_alias_sequence_helper_type_identifier(type_ids_var_map_longlong_inneraliassequencehelper);
                }
                bool element_identifier_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_inneraliassequencehelper, element_identifier_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded_ec))};
                if (!element_identifier_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_longlong_inneraliassequencehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_longlong_inneraliassequencehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_inneraliassequencehelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_inneraliassequencehelper, key_identifier_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded_ec))};
                if (!key_identifier_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded, element_flags_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded), key_flags_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded", type_ids_var_map_longlong_inneraliassequencehelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int64_t_anonymous_sequence_int16_t_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_longlong_inneraliassequencehelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_longlong_inneraliassequencehelper = 0x00000000;
            bool common_var_map_longlong_inneraliassequencehelper_ec {false};
            CommonStructMember common_var_map_longlong_inneraliassequencehelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_longlong_inneraliassequencehelper, member_flags_var_map_longlong_inneraliassequencehelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_inneraliassequencehelper, common_var_map_longlong_inneraliassequencehelper_ec))};
            if (!common_var_map_longlong_inneraliassequencehelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_longlong_inneraliassequencehelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_longlong_inneraliassequencehelper = "var_map_longlong_inneraliassequencehelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_longlong_inneraliassequencehelper;
            ann_custom_MapLongLongInnerAliasSequenceHelper.reset();
            CompleteMemberDetail detail_var_map_longlong_inneraliassequencehelper = TypeObjectUtils::build_complete_member_detail(name_var_map_longlong_inneraliassequencehelper, member_ann_builtin_var_map_longlong_inneraliassequencehelper, ann_custom_MapLongLongInnerAliasSequenceHelper);
            CompleteStructMember member_var_map_longlong_inneraliassequencehelper = TypeObjectUtils::build_complete_struct_member(common_var_map_longlong_inneraliassequencehelper, detail_var_map_longlong_inneraliassequencehelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongLongInnerAliasSequenceHelper, member_var_map_longlong_inneraliassequencehelper);
        }
        CompleteStructType struct_type_MapLongLongInnerAliasSequenceHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongLongInnerAliasSequenceHelper, header_MapLongLongInnerAliasSequenceHelper, member_seq_MapLongLongInnerAliasSequenceHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongLongInnerAliasSequenceHelper, type_name_MapLongLongInnerAliasSequenceHelper.to_string(), type_ids_MapLongLongInnerAliasSequenceHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongLongInnerAliasSequenceHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongLongInnerAliasMapHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapLongLongInnerAliasMapHelper)
{

    ReturnCode_t return_code_MapLongLongInnerAliasMapHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongLongInnerAliasMapHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongLongInnerAliasMapHelper", type_ids_MapLongLongInnerAliasMapHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongLongInnerAliasMapHelper)
    {
        StructTypeFlag struct_flags_MapLongLongInnerAliasMapHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongLongInnerAliasMapHelper = "MapLongLongInnerAliasMapHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongLongInnerAliasMapHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongLongInnerAliasMapHelper;
        CompleteTypeDetail detail_MapLongLongInnerAliasMapHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongLongInnerAliasMapHelper, ann_custom_MapLongLongInnerAliasMapHelper, type_name_MapLongLongInnerAliasMapHelper.to_string());
        CompleteStructHeader header_MapLongLongInnerAliasMapHelper;
        header_MapLongLongInnerAliasMapHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongLongInnerAliasMapHelper);
        CompleteStructMemberSeq member_seq_MapLongLongInnerAliasMapHelper;
        {
            TypeIdentifierPair type_ids_var_map_longlong_inneraliasmaphelper;
            ReturnCode_t return_code_var_map_longlong_inneraliasmaphelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_longlong_inneraliasmaphelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded", type_ids_var_map_longlong_inneraliasmaphelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_inneraliasmaphelper)
            {
                return_code_var_map_longlong_inneraliasmaphelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_map_helper", type_ids_var_map_longlong_inneraliasmaphelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_inneraliasmaphelper)
                {
                ::register_Inner_alias_map_helper_type_identifier(type_ids_var_map_longlong_inneraliasmaphelper);
                }
                bool element_identifier_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_inneraliasmaphelper, element_identifier_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded_ec))};
                if (!element_identifier_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_longlong_inneraliasmaphelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_longlong_inneraliasmaphelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_inneraliasmaphelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_inneraliasmaphelper, key_identifier_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded_ec))};
                if (!key_identifier_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded, element_flags_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded), key_flags_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded", type_ids_var_map_longlong_inneraliasmaphelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int64_t_anonymous_map_int32_t_int32_t_0_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_longlong_inneraliasmaphelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_longlong_inneraliasmaphelper = 0x00000000;
            bool common_var_map_longlong_inneraliasmaphelper_ec {false};
            CommonStructMember common_var_map_longlong_inneraliasmaphelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_longlong_inneraliasmaphelper, member_flags_var_map_longlong_inneraliasmaphelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_inneraliasmaphelper, common_var_map_longlong_inneraliasmaphelper_ec))};
            if (!common_var_map_longlong_inneraliasmaphelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_longlong_inneraliasmaphelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_longlong_inneraliasmaphelper = "var_map_longlong_inneraliasmaphelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_longlong_inneraliasmaphelper;
            ann_custom_MapLongLongInnerAliasMapHelper.reset();
            CompleteMemberDetail detail_var_map_longlong_inneraliasmaphelper = TypeObjectUtils::build_complete_member_detail(name_var_map_longlong_inneraliasmaphelper, member_ann_builtin_var_map_longlong_inneraliasmaphelper, ann_custom_MapLongLongInnerAliasMapHelper);
            CompleteStructMember member_var_map_longlong_inneraliasmaphelper = TypeObjectUtils::build_complete_struct_member(common_var_map_longlong_inneraliasmaphelper, detail_var_map_longlong_inneraliasmaphelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongLongInnerAliasMapHelper, member_var_map_longlong_inneraliasmaphelper);
        }
        CompleteStructType struct_type_MapLongLongInnerAliasMapHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongLongInnerAliasMapHelper, header_MapLongLongInnerAliasMapHelper, member_seq_MapLongLongInnerAliasMapHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongLongInnerAliasMapHelper, type_name_MapLongLongInnerAliasMapHelper.to_string(), type_ids_MapLongLongInnerAliasMapHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongLongInnerAliasMapHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongLongInnerUnionHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapLongLongInnerUnionHelper)
{

    ReturnCode_t return_code_MapLongLongInnerUnionHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongLongInnerUnionHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongLongInnerUnionHelper", type_ids_MapLongLongInnerUnionHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongLongInnerUnionHelper)
    {
        StructTypeFlag struct_flags_MapLongLongInnerUnionHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongLongInnerUnionHelper = "MapLongLongInnerUnionHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongLongInnerUnionHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongLongInnerUnionHelper;
        CompleteTypeDetail detail_MapLongLongInnerUnionHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongLongInnerUnionHelper, ann_custom_MapLongLongInnerUnionHelper, type_name_MapLongLongInnerUnionHelper.to_string());
        CompleteStructHeader header_MapLongLongInnerUnionHelper;
        header_MapLongLongInnerUnionHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongLongInnerUnionHelper);
        CompleteStructMemberSeq member_seq_MapLongLongInnerUnionHelper;
        {
            TypeIdentifierPair type_ids_var_map_longlong_innerunionhelper;
            ReturnCode_t return_code_var_map_longlong_innerunionhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_longlong_innerunionhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int64_t_InnerUnionHelper_unbounded", type_ids_var_map_longlong_innerunionhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_innerunionhelper)
            {
                return_code_var_map_longlong_innerunionhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerUnionHelper", type_ids_var_map_longlong_innerunionhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_innerunionhelper)
                {
                ::register_InnerUnionHelper_type_identifier(type_ids_var_map_longlong_innerunionhelper);
                }
                bool element_identifier_anonymous_map_int64_t_InnerUnionHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int64_t_InnerUnionHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_innerunionhelper, element_identifier_anonymous_map_int64_t_InnerUnionHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_int64_t_InnerUnionHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_InnerUnionHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_longlong_innerunionhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_longlong_innerunionhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_innerunionhelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int64_t_InnerUnionHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int64_t_InnerUnionHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_innerunionhelper, key_identifier_anonymous_map_int64_t_InnerUnionHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_int64_t_InnerUnionHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_InnerUnionHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int64_t_InnerUnionHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int64_t_InnerUnionHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerUnionHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int64_t_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerUnionHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int64_t_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerUnionHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int64_t_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerUnionHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int64_t_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerUnionHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int64_t_InnerUnionHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerUnionHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerUnionHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int64_t_InnerUnionHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerUnionHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerUnionHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int64_t_InnerUnionHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int64_t_InnerUnionHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int64_t_InnerUnionHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int64_t_InnerUnionHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int64_t_InnerUnionHelper_unbounded, element_flags_anonymous_map_int64_t_InnerUnionHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int64_t_InnerUnionHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int64_t_InnerUnionHelper_unbounded), key_flags_anonymous_map_int64_t_InnerUnionHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int64_t_InnerUnionHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int64_t_InnerUnionHelper_unbounded", type_ids_var_map_longlong_innerunionhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int64_t_InnerUnionHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_longlong_innerunionhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_longlong_innerunionhelper = 0x00000000;
            bool common_var_map_longlong_innerunionhelper_ec {false};
            CommonStructMember common_var_map_longlong_innerunionhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_longlong_innerunionhelper, member_flags_var_map_longlong_innerunionhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_innerunionhelper, common_var_map_longlong_innerunionhelper_ec))};
            if (!common_var_map_longlong_innerunionhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_longlong_innerunionhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_longlong_innerunionhelper = "var_map_longlong_innerunionhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_longlong_innerunionhelper;
            ann_custom_MapLongLongInnerUnionHelper.reset();
            CompleteMemberDetail detail_var_map_longlong_innerunionhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_longlong_innerunionhelper, member_ann_builtin_var_map_longlong_innerunionhelper, ann_custom_MapLongLongInnerUnionHelper);
            CompleteStructMember member_var_map_longlong_innerunionhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_longlong_innerunionhelper, detail_var_map_longlong_innerunionhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongLongInnerUnionHelper, member_var_map_longlong_innerunionhelper);
        }
        CompleteStructType struct_type_MapLongLongInnerUnionHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongLongInnerUnionHelper, header_MapLongLongInnerUnionHelper, member_seq_MapLongLongInnerUnionHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongLongInnerUnionHelper, type_name_MapLongLongInnerUnionHelper.to_string(), type_ids_MapLongLongInnerUnionHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongLongInnerUnionHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongLongInnerStructureHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapLongLongInnerStructureHelper)
{

    ReturnCode_t return_code_MapLongLongInnerStructureHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongLongInnerStructureHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongLongInnerStructureHelper", type_ids_MapLongLongInnerStructureHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongLongInnerStructureHelper)
    {
        StructTypeFlag struct_flags_MapLongLongInnerStructureHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongLongInnerStructureHelper = "MapLongLongInnerStructureHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongLongInnerStructureHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongLongInnerStructureHelper;
        CompleteTypeDetail detail_MapLongLongInnerStructureHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongLongInnerStructureHelper, ann_custom_MapLongLongInnerStructureHelper, type_name_MapLongLongInnerStructureHelper.to_string());
        CompleteStructHeader header_MapLongLongInnerStructureHelper;
        header_MapLongLongInnerStructureHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongLongInnerStructureHelper);
        CompleteStructMemberSeq member_seq_MapLongLongInnerStructureHelper;
        {
            TypeIdentifierPair type_ids_var_map_longlong_innerstructurehelper;
            ReturnCode_t return_code_var_map_longlong_innerstructurehelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_longlong_innerstructurehelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int64_t_InnerStructureHelper_unbounded", type_ids_var_map_longlong_innerstructurehelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_innerstructurehelper)
            {
                return_code_var_map_longlong_innerstructurehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerStructureHelper", type_ids_var_map_longlong_innerstructurehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_innerstructurehelper)
                {
                ::register_InnerStructureHelper_type_identifier(type_ids_var_map_longlong_innerstructurehelper);
                }
                bool element_identifier_anonymous_map_int64_t_InnerStructureHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int64_t_InnerStructureHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_innerstructurehelper, element_identifier_anonymous_map_int64_t_InnerStructureHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_int64_t_InnerStructureHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_InnerStructureHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_longlong_innerstructurehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_longlong_innerstructurehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_innerstructurehelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int64_t_InnerStructureHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int64_t_InnerStructureHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_innerstructurehelper, key_identifier_anonymous_map_int64_t_InnerStructureHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_int64_t_InnerStructureHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_InnerStructureHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int64_t_InnerStructureHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int64_t_InnerStructureHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerStructureHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int64_t_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerStructureHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int64_t_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerStructureHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int64_t_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerStructureHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int64_t_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerStructureHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int64_t_InnerStructureHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerStructureHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerStructureHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int64_t_InnerStructureHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerStructureHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerStructureHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int64_t_InnerStructureHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int64_t_InnerStructureHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int64_t_InnerStructureHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int64_t_InnerStructureHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int64_t_InnerStructureHelper_unbounded, element_flags_anonymous_map_int64_t_InnerStructureHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int64_t_InnerStructureHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int64_t_InnerStructureHelper_unbounded), key_flags_anonymous_map_int64_t_InnerStructureHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int64_t_InnerStructureHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int64_t_InnerStructureHelper_unbounded", type_ids_var_map_longlong_innerstructurehelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int64_t_InnerStructureHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_longlong_innerstructurehelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_longlong_innerstructurehelper = 0x00000000;
            bool common_var_map_longlong_innerstructurehelper_ec {false};
            CommonStructMember common_var_map_longlong_innerstructurehelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_longlong_innerstructurehelper, member_flags_var_map_longlong_innerstructurehelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_innerstructurehelper, common_var_map_longlong_innerstructurehelper_ec))};
            if (!common_var_map_longlong_innerstructurehelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_longlong_innerstructurehelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_longlong_innerstructurehelper = "var_map_longlong_innerstructurehelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_longlong_innerstructurehelper;
            ann_custom_MapLongLongInnerStructureHelper.reset();
            CompleteMemberDetail detail_var_map_longlong_innerstructurehelper = TypeObjectUtils::build_complete_member_detail(name_var_map_longlong_innerstructurehelper, member_ann_builtin_var_map_longlong_innerstructurehelper, ann_custom_MapLongLongInnerStructureHelper);
            CompleteStructMember member_var_map_longlong_innerstructurehelper = TypeObjectUtils::build_complete_struct_member(common_var_map_longlong_innerstructurehelper, detail_var_map_longlong_innerstructurehelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongLongInnerStructureHelper, member_var_map_longlong_innerstructurehelper);
        }
        CompleteStructType struct_type_MapLongLongInnerStructureHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongLongInnerStructureHelper, header_MapLongLongInnerStructureHelper, member_seq_MapLongLongInnerStructureHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongLongInnerStructureHelper, type_name_MapLongLongInnerStructureHelper.to_string(), type_ids_MapLongLongInnerStructureHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongLongInnerStructureHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapLongLongInnerBitsetHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapLongLongInnerBitsetHelper)
{

    ReturnCode_t return_code_MapLongLongInnerBitsetHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapLongLongInnerBitsetHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapLongLongInnerBitsetHelper", type_ids_MapLongLongInnerBitsetHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapLongLongInnerBitsetHelper)
    {
        StructTypeFlag struct_flags_MapLongLongInnerBitsetHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapLongLongInnerBitsetHelper = "MapLongLongInnerBitsetHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapLongLongInnerBitsetHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapLongLongInnerBitsetHelper;
        CompleteTypeDetail detail_MapLongLongInnerBitsetHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapLongLongInnerBitsetHelper, ann_custom_MapLongLongInnerBitsetHelper, type_name_MapLongLongInnerBitsetHelper.to_string());
        CompleteStructHeader header_MapLongLongInnerBitsetHelper;
        header_MapLongLongInnerBitsetHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapLongLongInnerBitsetHelper);
        CompleteStructMemberSeq member_seq_MapLongLongInnerBitsetHelper;
        {
            TypeIdentifierPair type_ids_var_map_longlong_innerbitsethelper;
            ReturnCode_t return_code_var_map_longlong_innerbitsethelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_longlong_innerbitsethelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int64_t_InnerBitsetHelper_unbounded", type_ids_var_map_longlong_innerbitsethelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_innerbitsethelper)
            {
                return_code_var_map_longlong_innerbitsethelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerBitsetHelper", type_ids_var_map_longlong_innerbitsethelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_innerbitsethelper)
                {
                ::register_InnerBitsetHelper_type_identifier(type_ids_var_map_longlong_innerbitsethelper);
                }
                bool element_identifier_anonymous_map_int64_t_InnerBitsetHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int64_t_InnerBitsetHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_innerbitsethelper, element_identifier_anonymous_map_int64_t_InnerBitsetHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_int64_t_InnerBitsetHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_InnerBitsetHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_longlong_innerbitsethelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_longlong_innerbitsethelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_longlong_innerbitsethelper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int64_t_InnerBitsetHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int64_t_InnerBitsetHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_innerbitsethelper, key_identifier_anonymous_map_int64_t_InnerBitsetHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_int64_t_InnerBitsetHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int64_t_InnerBitsetHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int64_t_InnerBitsetHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int64_t_InnerBitsetHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerBitsetHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int64_t_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerBitsetHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int64_t_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerBitsetHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int64_t_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerBitsetHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int64_t_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerBitsetHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int64_t_InnerBitsetHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerBitsetHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerBitsetHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int64_t_InnerBitsetHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerBitsetHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int64_t_InnerBitsetHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int64_t_InnerBitsetHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int64_t_InnerBitsetHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int64_t_InnerBitsetHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int64_t_InnerBitsetHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int64_t_InnerBitsetHelper_unbounded, element_flags_anonymous_map_int64_t_InnerBitsetHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int64_t_InnerBitsetHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int64_t_InnerBitsetHelper_unbounded), key_flags_anonymous_map_int64_t_InnerBitsetHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int64_t_InnerBitsetHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int64_t_InnerBitsetHelper_unbounded", type_ids_var_map_longlong_innerbitsethelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int64_t_InnerBitsetHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_longlong_innerbitsethelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_longlong_innerbitsethelper = 0x00000000;
            bool common_var_map_longlong_innerbitsethelper_ec {false};
            CommonStructMember common_var_map_longlong_innerbitsethelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_longlong_innerbitsethelper, member_flags_var_map_longlong_innerbitsethelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_longlong_innerbitsethelper, common_var_map_longlong_innerbitsethelper_ec))};
            if (!common_var_map_longlong_innerbitsethelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_longlong_innerbitsethelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_longlong_innerbitsethelper = "var_map_longlong_innerbitsethelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_longlong_innerbitsethelper;
            ann_custom_MapLongLongInnerBitsetHelper.reset();
            CompleteMemberDetail detail_var_map_longlong_innerbitsethelper = TypeObjectUtils::build_complete_member_detail(name_var_map_longlong_innerbitsethelper, member_ann_builtin_var_map_longlong_innerbitsethelper, ann_custom_MapLongLongInnerBitsetHelper);
            CompleteStructMember member_var_map_longlong_innerbitsethelper = TypeObjectUtils::build_complete_struct_member(common_var_map_longlong_innerbitsethelper, detail_var_map_longlong_innerbitsethelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapLongLongInnerBitsetHelper, member_var_map_longlong_innerbitsethelper);
        }
        CompleteStructType struct_type_MapLongLongInnerBitsetHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapLongLongInnerBitsetHelper, header_MapLongLongInnerBitsetHelper, member_seq_MapLongLongInnerBitsetHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapLongLongInnerBitsetHelper, type_name_MapLongLongInnerBitsetHelper.to_string(), type_ids_MapLongLongInnerBitsetHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapLongLongInnerBitsetHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongLongShort_type_identifier(
        TypeIdentifierPair& type_ids_MapULongLongShort)
{

    ReturnCode_t return_code_MapULongLongShort {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongLongShort =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongLongShort", type_ids_MapULongLongShort);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongLongShort)
    {
        StructTypeFlag struct_flags_MapULongLongShort = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongLongShort = "MapULongLongShort";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongLongShort;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongLongShort;
        CompleteTypeDetail detail_MapULongLongShort = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongLongShort, ann_custom_MapULongLongShort, type_name_MapULongLongShort.to_string());
        CompleteStructHeader header_MapULongLongShort;
        header_MapULongLongShort = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongLongShort);
        CompleteStructMemberSeq member_seq_MapULongLongShort;
        {
            TypeIdentifierPair type_ids_var_map_u_long_long_short;
            ReturnCode_t return_code_var_map_u_long_long_short {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_u_long_long_short =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint64_t_int16_t_unbounded", type_ids_var_map_u_long_long_short);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_short)
            {
                return_code_var_map_u_long_long_short =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_u_long_long_short);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_short)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint64_t_int16_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint64_t_int16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_short, element_identifier_anonymous_map_uint64_t_int16_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint64_t_int16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_int16_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_u_long_long_short =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_u_long_long_short);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_short)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint64_t_int16_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint64_t_int16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_short, key_identifier_anonymous_map_uint64_t_int16_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint64_t_int16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_int16_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint64_t_int16_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint64_t_int16_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_int16_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint64_t_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_int16_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint64_t_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_int16_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint64_t_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_int16_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint64_t_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_int16_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint64_t_int16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_int16_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_int16_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint64_t_int16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_int16_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_int16_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint64_t_int16_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint64_t_int16_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint64_t_int16_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint64_t_int16_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint64_t_int16_t_unbounded, element_flags_anonymous_map_uint64_t_int16_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint64_t_int16_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint64_t_int16_t_unbounded), key_flags_anonymous_map_uint64_t_int16_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint64_t_int16_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint64_t_int16_t_unbounded", type_ids_var_map_u_long_long_short))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint64_t_int16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_u_long_long_short = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_u_long_long_short = 0x00000000;
            bool common_var_map_u_long_long_short_ec {false};
            CommonStructMember common_var_map_u_long_long_short {TypeObjectUtils::build_common_struct_member(member_id_var_map_u_long_long_short, member_flags_var_map_u_long_long_short, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_short, common_var_map_u_long_long_short_ec))};
            if (!common_var_map_u_long_long_short_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_u_long_long_short member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_u_long_long_short = "var_map_u_long_long_short";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_u_long_long_short;
            ann_custom_MapULongLongShort.reset();
            CompleteMemberDetail detail_var_map_u_long_long_short = TypeObjectUtils::build_complete_member_detail(name_var_map_u_long_long_short, member_ann_builtin_var_map_u_long_long_short, ann_custom_MapULongLongShort);
            CompleteStructMember member_var_map_u_long_long_short = TypeObjectUtils::build_complete_struct_member(common_var_map_u_long_long_short, detail_var_map_u_long_long_short);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongLongShort, member_var_map_u_long_long_short);
        }
        CompleteStructType struct_type_MapULongLongShort = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongLongShort, header_MapULongLongShort, member_seq_MapULongLongShort);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongLongShort, type_name_MapULongLongShort.to_string(), type_ids_MapULongLongShort))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongLongShort already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongLongUShort_type_identifier(
        TypeIdentifierPair& type_ids_MapULongLongUShort)
{

    ReturnCode_t return_code_MapULongLongUShort {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongLongUShort =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongLongUShort", type_ids_MapULongLongUShort);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongLongUShort)
    {
        StructTypeFlag struct_flags_MapULongLongUShort = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongLongUShort = "MapULongLongUShort";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongLongUShort;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongLongUShort;
        CompleteTypeDetail detail_MapULongLongUShort = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongLongUShort, ann_custom_MapULongLongUShort, type_name_MapULongLongUShort.to_string());
        CompleteStructHeader header_MapULongLongUShort;
        header_MapULongLongUShort = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongLongUShort);
        CompleteStructMemberSeq member_seq_MapULongLongUShort;
        {
            TypeIdentifierPair type_ids_var_map_u_long_long_u_short;
            ReturnCode_t return_code_var_map_u_long_long_u_short {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_u_long_long_u_short =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint64_t_uint16_t_unbounded", type_ids_var_map_u_long_long_u_short);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_u_short)
            {
                return_code_var_map_u_long_long_u_short =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_u_long_long_u_short);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_u_short)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint64_t_uint16_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint64_t_uint16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_u_short, element_identifier_anonymous_map_uint64_t_uint16_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint64_t_uint16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_uint16_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_u_long_long_u_short =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_u_long_long_u_short);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_u_short)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint64_t_uint16_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint64_t_uint16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_u_short, key_identifier_anonymous_map_uint64_t_uint16_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint64_t_uint16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_uint16_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint64_t_uint16_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint64_t_uint16_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_uint16_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint64_t_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_uint16_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint64_t_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_uint16_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint64_t_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_uint16_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint64_t_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_uint16_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint64_t_uint16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_uint16_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_uint16_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint64_t_uint16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_uint16_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_uint16_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint64_t_uint16_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint64_t_uint16_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint64_t_uint16_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint64_t_uint16_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint64_t_uint16_t_unbounded, element_flags_anonymous_map_uint64_t_uint16_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint64_t_uint16_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint64_t_uint16_t_unbounded), key_flags_anonymous_map_uint64_t_uint16_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint64_t_uint16_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint64_t_uint16_t_unbounded", type_ids_var_map_u_long_long_u_short))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint64_t_uint16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_u_long_long_u_short = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_u_long_long_u_short = 0x00000000;
            bool common_var_map_u_long_long_u_short_ec {false};
            CommonStructMember common_var_map_u_long_long_u_short {TypeObjectUtils::build_common_struct_member(member_id_var_map_u_long_long_u_short, member_flags_var_map_u_long_long_u_short, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_u_short, common_var_map_u_long_long_u_short_ec))};
            if (!common_var_map_u_long_long_u_short_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_u_long_long_u_short member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_u_long_long_u_short = "var_map_u_long_long_u_short";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_u_long_long_u_short;
            ann_custom_MapULongLongUShort.reset();
            CompleteMemberDetail detail_var_map_u_long_long_u_short = TypeObjectUtils::build_complete_member_detail(name_var_map_u_long_long_u_short, member_ann_builtin_var_map_u_long_long_u_short, ann_custom_MapULongLongUShort);
            CompleteStructMember member_var_map_u_long_long_u_short = TypeObjectUtils::build_complete_struct_member(common_var_map_u_long_long_u_short, detail_var_map_u_long_long_u_short);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongLongUShort, member_var_map_u_long_long_u_short);
        }
        CompleteStructType struct_type_MapULongLongUShort = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongLongUShort, header_MapULongLongUShort, member_seq_MapULongLongUShort);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongLongUShort, type_name_MapULongLongUShort.to_string(), type_ids_MapULongLongUShort))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongLongUShort already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongLongLong_type_identifier(
        TypeIdentifierPair& type_ids_MapULongLongLong)
{

    ReturnCode_t return_code_MapULongLongLong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongLongLong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongLongLong", type_ids_MapULongLongLong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongLongLong)
    {
        StructTypeFlag struct_flags_MapULongLongLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongLongLong = "MapULongLongLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongLongLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongLongLong;
        CompleteTypeDetail detail_MapULongLongLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongLongLong, ann_custom_MapULongLongLong, type_name_MapULongLongLong.to_string());
        CompleteStructHeader header_MapULongLongLong;
        header_MapULongLongLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongLongLong);
        CompleteStructMemberSeq member_seq_MapULongLongLong;
        {
            TypeIdentifierPair type_ids_var_map_u_long_long_long;
            ReturnCode_t return_code_var_map_u_long_long_long {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_u_long_long_long =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint64_t_int32_t_unbounded", type_ids_var_map_u_long_long_long);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_long)
            {
                return_code_var_map_u_long_long_long =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_u_long_long_long);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_long)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint64_t_int32_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint64_t_int32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_long, element_identifier_anonymous_map_uint64_t_int32_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint64_t_int32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_int32_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_u_long_long_long =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_u_long_long_long);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_long)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint64_t_int32_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint64_t_int32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_long, key_identifier_anonymous_map_uint64_t_int32_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint64_t_int32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_int32_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint64_t_int32_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint64_t_int32_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_int32_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint64_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_int32_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint64_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_int32_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint64_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_int32_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint64_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_int32_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint64_t_int32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_int32_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_int32_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint64_t_int32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_int32_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_int32_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint64_t_int32_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint64_t_int32_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint64_t_int32_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint64_t_int32_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint64_t_int32_t_unbounded, element_flags_anonymous_map_uint64_t_int32_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint64_t_int32_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint64_t_int32_t_unbounded), key_flags_anonymous_map_uint64_t_int32_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint64_t_int32_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint64_t_int32_t_unbounded", type_ids_var_map_u_long_long_long))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint64_t_int32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_u_long_long_long = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_u_long_long_long = 0x00000000;
            bool common_var_map_u_long_long_long_ec {false};
            CommonStructMember common_var_map_u_long_long_long {TypeObjectUtils::build_common_struct_member(member_id_var_map_u_long_long_long, member_flags_var_map_u_long_long_long, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_long, common_var_map_u_long_long_long_ec))};
            if (!common_var_map_u_long_long_long_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_u_long_long_long member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_u_long_long_long = "var_map_u_long_long_long";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_u_long_long_long;
            ann_custom_MapULongLongLong.reset();
            CompleteMemberDetail detail_var_map_u_long_long_long = TypeObjectUtils::build_complete_member_detail(name_var_map_u_long_long_long, member_ann_builtin_var_map_u_long_long_long, ann_custom_MapULongLongLong);
            CompleteStructMember member_var_map_u_long_long_long = TypeObjectUtils::build_complete_struct_member(common_var_map_u_long_long_long, detail_var_map_u_long_long_long);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongLongLong, member_var_map_u_long_long_long);
        }
        CompleteStructType struct_type_MapULongLongLong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongLongLong, header_MapULongLongLong, member_seq_MapULongLongLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongLongLong, type_name_MapULongLongLong.to_string(), type_ids_MapULongLongLong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongLongLong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongLongULong_type_identifier(
        TypeIdentifierPair& type_ids_MapULongLongULong)
{

    ReturnCode_t return_code_MapULongLongULong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongLongULong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongLongULong", type_ids_MapULongLongULong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongLongULong)
    {
        StructTypeFlag struct_flags_MapULongLongULong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongLongULong = "MapULongLongULong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongLongULong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongLongULong;
        CompleteTypeDetail detail_MapULongLongULong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongLongULong, ann_custom_MapULongLongULong, type_name_MapULongLongULong.to_string());
        CompleteStructHeader header_MapULongLongULong;
        header_MapULongLongULong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongLongULong);
        CompleteStructMemberSeq member_seq_MapULongLongULong;
        {
            TypeIdentifierPair type_ids_var_map_u_long_long_u_long;
            ReturnCode_t return_code_var_map_u_long_long_u_long {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_u_long_long_u_long =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint64_t_uint32_t_unbounded", type_ids_var_map_u_long_long_u_long);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_u_long)
            {
                return_code_var_map_u_long_long_u_long =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_u_long_long_u_long);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_u_long)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint64_t_uint32_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint64_t_uint32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_u_long, element_identifier_anonymous_map_uint64_t_uint32_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint64_t_uint32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_uint32_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_u_long_long_u_long =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_u_long_long_u_long);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_u_long)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint64_t_uint32_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint64_t_uint32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_u_long, key_identifier_anonymous_map_uint64_t_uint32_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint64_t_uint32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_uint32_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint64_t_uint32_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint64_t_uint32_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_uint32_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint64_t_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_uint32_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint64_t_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_uint32_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint64_t_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_uint32_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint64_t_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_uint32_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint64_t_uint32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_uint32_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_uint32_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint64_t_uint32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_uint32_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_uint32_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint64_t_uint32_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint64_t_uint32_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint64_t_uint32_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint64_t_uint32_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint64_t_uint32_t_unbounded, element_flags_anonymous_map_uint64_t_uint32_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint64_t_uint32_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint64_t_uint32_t_unbounded), key_flags_anonymous_map_uint64_t_uint32_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint64_t_uint32_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint64_t_uint32_t_unbounded", type_ids_var_map_u_long_long_u_long))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint64_t_uint32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_u_long_long_u_long = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_u_long_long_u_long = 0x00000000;
            bool common_var_map_u_long_long_u_long_ec {false};
            CommonStructMember common_var_map_u_long_long_u_long {TypeObjectUtils::build_common_struct_member(member_id_var_map_u_long_long_u_long, member_flags_var_map_u_long_long_u_long, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_u_long, common_var_map_u_long_long_u_long_ec))};
            if (!common_var_map_u_long_long_u_long_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_u_long_long_u_long member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_u_long_long_u_long = "var_map_u_long_long_u_long";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_u_long_long_u_long;
            ann_custom_MapULongLongULong.reset();
            CompleteMemberDetail detail_var_map_u_long_long_u_long = TypeObjectUtils::build_complete_member_detail(name_var_map_u_long_long_u_long, member_ann_builtin_var_map_u_long_long_u_long, ann_custom_MapULongLongULong);
            CompleteStructMember member_var_map_u_long_long_u_long = TypeObjectUtils::build_complete_struct_member(common_var_map_u_long_long_u_long, detail_var_map_u_long_long_u_long);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongLongULong, member_var_map_u_long_long_u_long);
        }
        CompleteStructType struct_type_MapULongLongULong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongLongULong, header_MapULongLongULong, member_seq_MapULongLongULong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongLongULong, type_name_MapULongLongULong.to_string(), type_ids_MapULongLongULong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongLongULong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongLongLongLong_type_identifier(
        TypeIdentifierPair& type_ids_MapULongLongLongLong)
{

    ReturnCode_t return_code_MapULongLongLongLong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongLongLongLong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongLongLongLong", type_ids_MapULongLongLongLong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongLongLongLong)
    {
        StructTypeFlag struct_flags_MapULongLongLongLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongLongLongLong = "MapULongLongLongLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongLongLongLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongLongLongLong;
        CompleteTypeDetail detail_MapULongLongLongLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongLongLongLong, ann_custom_MapULongLongLongLong, type_name_MapULongLongLongLong.to_string());
        CompleteStructHeader header_MapULongLongLongLong;
        header_MapULongLongLongLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongLongLongLong);
        CompleteStructMemberSeq member_seq_MapULongLongLongLong;
        {
            TypeIdentifierPair type_ids_var_map_u_long_long_long_long;
            ReturnCode_t return_code_var_map_u_long_long_long_long {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_u_long_long_long_long =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint64_t_int64_t_unbounded", type_ids_var_map_u_long_long_long_long);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_long_long)
            {
                return_code_var_map_u_long_long_long_long =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_u_long_long_long_long);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_long_long)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint64_t_int64_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint64_t_int64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_long_long, element_identifier_anonymous_map_uint64_t_int64_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint64_t_int64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_int64_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_u_long_long_long_long =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_u_long_long_long_long);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_long_long)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint64_t_int64_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint64_t_int64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_long_long, key_identifier_anonymous_map_uint64_t_int64_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint64_t_int64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_int64_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint64_t_int64_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint64_t_int64_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_int64_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint64_t_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_int64_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint64_t_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_int64_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint64_t_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_int64_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint64_t_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_int64_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint64_t_int64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_int64_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_int64_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint64_t_int64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_int64_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_int64_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint64_t_int64_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint64_t_int64_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint64_t_int64_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint64_t_int64_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint64_t_int64_t_unbounded, element_flags_anonymous_map_uint64_t_int64_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint64_t_int64_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint64_t_int64_t_unbounded), key_flags_anonymous_map_uint64_t_int64_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint64_t_int64_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint64_t_int64_t_unbounded", type_ids_var_map_u_long_long_long_long))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint64_t_int64_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_u_long_long_long_long = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_u_long_long_long_long = 0x00000000;
            bool common_var_map_u_long_long_long_long_ec {false};
            CommonStructMember common_var_map_u_long_long_long_long {TypeObjectUtils::build_common_struct_member(member_id_var_map_u_long_long_long_long, member_flags_var_map_u_long_long_long_long, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_long_long, common_var_map_u_long_long_long_long_ec))};
            if (!common_var_map_u_long_long_long_long_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_u_long_long_long_long member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_u_long_long_long_long = "var_map_u_long_long_long_long";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_u_long_long_long_long;
            ann_custom_MapULongLongLongLong.reset();
            CompleteMemberDetail detail_var_map_u_long_long_long_long = TypeObjectUtils::build_complete_member_detail(name_var_map_u_long_long_long_long, member_ann_builtin_var_map_u_long_long_long_long, ann_custom_MapULongLongLongLong);
            CompleteStructMember member_var_map_u_long_long_long_long = TypeObjectUtils::build_complete_struct_member(common_var_map_u_long_long_long_long, detail_var_map_u_long_long_long_long);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongLongLongLong, member_var_map_u_long_long_long_long);
        }
        CompleteStructType struct_type_MapULongLongLongLong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongLongLongLong, header_MapULongLongLongLong, member_seq_MapULongLongLongLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongLongLongLong, type_name_MapULongLongLongLong.to_string(), type_ids_MapULongLongLongLong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongLongLongLong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongLongULongLong_type_identifier(
        TypeIdentifierPair& type_ids_MapULongLongULongLong)
{

    ReturnCode_t return_code_MapULongLongULongLong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongLongULongLong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongLongULongLong", type_ids_MapULongLongULongLong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongLongULongLong)
    {
        StructTypeFlag struct_flags_MapULongLongULongLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongLongULongLong = "MapULongLongULongLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongLongULongLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongLongULongLong;
        CompleteTypeDetail detail_MapULongLongULongLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongLongULongLong, ann_custom_MapULongLongULongLong, type_name_MapULongLongULongLong.to_string());
        CompleteStructHeader header_MapULongLongULongLong;
        header_MapULongLongULongLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongLongULongLong);
        CompleteStructMemberSeq member_seq_MapULongLongULongLong;
        {
            TypeIdentifierPair type_ids_var_map_u_long_long_u_long_long;
            ReturnCode_t return_code_var_map_u_long_long_u_long_long {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_u_long_long_u_long_long =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint64_t_uint64_t_unbounded", type_ids_var_map_u_long_long_u_long_long);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_u_long_long)
            {
                return_code_var_map_u_long_long_u_long_long =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_u_long_long_u_long_long);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_u_long_long)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint64_t_uint64_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint64_t_uint64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_u_long_long, element_identifier_anonymous_map_uint64_t_uint64_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint64_t_uint64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_uint64_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_u_long_long_u_long_long =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_u_long_long_u_long_long);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_u_long_long)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint64_t_uint64_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint64_t_uint64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_u_long_long, key_identifier_anonymous_map_uint64_t_uint64_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint64_t_uint64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_uint64_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint64_t_uint64_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint64_t_uint64_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_uint64_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint64_t_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_uint64_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint64_t_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_uint64_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint64_t_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_uint64_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint64_t_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_uint64_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint64_t_uint64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_uint64_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_uint64_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint64_t_uint64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_uint64_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_uint64_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint64_t_uint64_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint64_t_uint64_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint64_t_uint64_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint64_t_uint64_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint64_t_uint64_t_unbounded, element_flags_anonymous_map_uint64_t_uint64_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint64_t_uint64_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint64_t_uint64_t_unbounded), key_flags_anonymous_map_uint64_t_uint64_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint64_t_uint64_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint64_t_uint64_t_unbounded", type_ids_var_map_u_long_long_u_long_long))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint64_t_uint64_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_u_long_long_u_long_long = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_u_long_long_u_long_long = 0x00000000;
            bool common_var_map_u_long_long_u_long_long_ec {false};
            CommonStructMember common_var_map_u_long_long_u_long_long {TypeObjectUtils::build_common_struct_member(member_id_var_map_u_long_long_u_long_long, member_flags_var_map_u_long_long_u_long_long, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_u_long_long, common_var_map_u_long_long_u_long_long_ec))};
            if (!common_var_map_u_long_long_u_long_long_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_u_long_long_u_long_long member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_u_long_long_u_long_long = "var_map_u_long_long_u_long_long";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_u_long_long_u_long_long;
            ann_custom_MapULongLongULongLong.reset();
            CompleteMemberDetail detail_var_map_u_long_long_u_long_long = TypeObjectUtils::build_complete_member_detail(name_var_map_u_long_long_u_long_long, member_ann_builtin_var_map_u_long_long_u_long_long, ann_custom_MapULongLongULongLong);
            CompleteStructMember member_var_map_u_long_long_u_long_long = TypeObjectUtils::build_complete_struct_member(common_var_map_u_long_long_u_long_long, detail_var_map_u_long_long_u_long_long);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongLongULongLong, member_var_map_u_long_long_u_long_long);
        }
        CompleteStructType struct_type_MapULongLongULongLong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongLongULongLong, header_MapULongLongULongLong, member_seq_MapULongLongULongLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongLongULongLong, type_name_MapULongLongULongLong.to_string(), type_ids_MapULongLongULongLong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongLongULongLong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongLongFloat_type_identifier(
        TypeIdentifierPair& type_ids_MapULongLongFloat)
{

    ReturnCode_t return_code_MapULongLongFloat {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongLongFloat =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongLongFloat", type_ids_MapULongLongFloat);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongLongFloat)
    {
        StructTypeFlag struct_flags_MapULongLongFloat = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongLongFloat = "MapULongLongFloat";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongLongFloat;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongLongFloat;
        CompleteTypeDetail detail_MapULongLongFloat = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongLongFloat, ann_custom_MapULongLongFloat, type_name_MapULongLongFloat.to_string());
        CompleteStructHeader header_MapULongLongFloat;
        header_MapULongLongFloat = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongLongFloat);
        CompleteStructMemberSeq member_seq_MapULongLongFloat;
        {
            TypeIdentifierPair type_ids_var_map_u_long_long_float;
            ReturnCode_t return_code_var_map_u_long_long_float {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_u_long_long_float =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint64_t_float_unbounded", type_ids_var_map_u_long_long_float);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_float)
            {
                return_code_var_map_u_long_long_float =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_float", type_ids_var_map_u_long_long_float);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_float)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint64_t_float_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint64_t_float_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_float, element_identifier_anonymous_map_uint64_t_float_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint64_t_float_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_float_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_u_long_long_float =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_u_long_long_float);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_float)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint64_t_float_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint64_t_float_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_float, key_identifier_anonymous_map_uint64_t_float_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint64_t_float_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_float_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint64_t_float_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint64_t_float_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_float_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint64_t_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_float_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint64_t_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_float_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint64_t_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_float_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint64_t_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_float_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint64_t_float_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_float_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_float_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint64_t_float_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_float_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_float_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint64_t_float_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint64_t_float_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint64_t_float_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint64_t_float_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint64_t_float_unbounded, element_flags_anonymous_map_uint64_t_float_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint64_t_float_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint64_t_float_unbounded), key_flags_anonymous_map_uint64_t_float_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint64_t_float_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint64_t_float_unbounded", type_ids_var_map_u_long_long_float))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint64_t_float_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_u_long_long_float = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_u_long_long_float = 0x00000000;
            bool common_var_map_u_long_long_float_ec {false};
            CommonStructMember common_var_map_u_long_long_float {TypeObjectUtils::build_common_struct_member(member_id_var_map_u_long_long_float, member_flags_var_map_u_long_long_float, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_float, common_var_map_u_long_long_float_ec))};
            if (!common_var_map_u_long_long_float_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_u_long_long_float member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_u_long_long_float = "var_map_u_long_long_float";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_u_long_long_float;
            ann_custom_MapULongLongFloat.reset();
            CompleteMemberDetail detail_var_map_u_long_long_float = TypeObjectUtils::build_complete_member_detail(name_var_map_u_long_long_float, member_ann_builtin_var_map_u_long_long_float, ann_custom_MapULongLongFloat);
            CompleteStructMember member_var_map_u_long_long_float = TypeObjectUtils::build_complete_struct_member(common_var_map_u_long_long_float, detail_var_map_u_long_long_float);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongLongFloat, member_var_map_u_long_long_float);
        }
        CompleteStructType struct_type_MapULongLongFloat = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongLongFloat, header_MapULongLongFloat, member_seq_MapULongLongFloat);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongLongFloat, type_name_MapULongLongFloat.to_string(), type_ids_MapULongLongFloat))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongLongFloat already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapKeyULongLongValueDouble_type_identifier(
        TypeIdentifierPair& type_ids_MapKeyULongLongValueDouble)
{

    ReturnCode_t return_code_MapKeyULongLongValueDouble {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapKeyULongLongValueDouble =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapKeyULongLongValueDouble", type_ids_MapKeyULongLongValueDouble);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapKeyULongLongValueDouble)
    {
        StructTypeFlag struct_flags_MapKeyULongLongValueDouble = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapKeyULongLongValueDouble = "MapKeyULongLongValueDouble";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapKeyULongLongValueDouble;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapKeyULongLongValueDouble;
        CompleteTypeDetail detail_MapKeyULongLongValueDouble = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapKeyULongLongValueDouble, ann_custom_MapKeyULongLongValueDouble, type_name_MapKeyULongLongValueDouble.to_string());
        CompleteStructHeader header_MapKeyULongLongValueDouble;
        header_MapKeyULongLongValueDouble = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapKeyULongLongValueDouble);
        CompleteStructMemberSeq member_seq_MapKeyULongLongValueDouble;
        {
            TypeIdentifierPair type_ids_var_map_u_long_long_double;
            ReturnCode_t return_code_var_map_u_long_long_double {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_u_long_long_double =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint64_t_double_unbounded", type_ids_var_map_u_long_long_double);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_double)
            {
                return_code_var_map_u_long_long_double =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_double", type_ids_var_map_u_long_long_double);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_double)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint64_t_double_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint64_t_double_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_double, element_identifier_anonymous_map_uint64_t_double_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint64_t_double_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_double_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_u_long_long_double =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_u_long_long_double);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_double)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint64_t_double_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint64_t_double_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_double, key_identifier_anonymous_map_uint64_t_double_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint64_t_double_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_double_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint64_t_double_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint64_t_double_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_double_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint64_t_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_double_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint64_t_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_double_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint64_t_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_double_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint64_t_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_double_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint64_t_double_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_double_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_double_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint64_t_double_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_double_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_double_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint64_t_double_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint64_t_double_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint64_t_double_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint64_t_double_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint64_t_double_unbounded, element_flags_anonymous_map_uint64_t_double_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint64_t_double_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint64_t_double_unbounded), key_flags_anonymous_map_uint64_t_double_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint64_t_double_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint64_t_double_unbounded", type_ids_var_map_u_long_long_double))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint64_t_double_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_u_long_long_double = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_u_long_long_double = 0x00000000;
            bool common_var_map_u_long_long_double_ec {false};
            CommonStructMember common_var_map_u_long_long_double {TypeObjectUtils::build_common_struct_member(member_id_var_map_u_long_long_double, member_flags_var_map_u_long_long_double, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_double, common_var_map_u_long_long_double_ec))};
            if (!common_var_map_u_long_long_double_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_u_long_long_double member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_u_long_long_double = "var_map_u_long_long_double";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_u_long_long_double;
            ann_custom_MapKeyULongLongValueDouble.reset();
            CompleteMemberDetail detail_var_map_u_long_long_double = TypeObjectUtils::build_complete_member_detail(name_var_map_u_long_long_double, member_ann_builtin_var_map_u_long_long_double, ann_custom_MapKeyULongLongValueDouble);
            CompleteStructMember member_var_map_u_long_long_double = TypeObjectUtils::build_complete_struct_member(common_var_map_u_long_long_double, detail_var_map_u_long_long_double);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapKeyULongLongValueDouble, member_var_map_u_long_long_double);
        }
        CompleteStructType struct_type_MapKeyULongLongValueDouble = TypeObjectUtils::build_complete_struct_type(struct_flags_MapKeyULongLongValueDouble, header_MapKeyULongLongValueDouble, member_seq_MapKeyULongLongValueDouble);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapKeyULongLongValueDouble, type_name_MapKeyULongLongValueDouble.to_string(), type_ids_MapKeyULongLongValueDouble))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapKeyULongLongValueDouble already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongLongLongDouble_type_identifier(
        TypeIdentifierPair& type_ids_MapULongLongLongDouble)
{

    ReturnCode_t return_code_MapULongLongLongDouble {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongLongLongDouble =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongLongLongDouble", type_ids_MapULongLongLongDouble);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongLongLongDouble)
    {
        StructTypeFlag struct_flags_MapULongLongLongDouble = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongLongLongDouble = "MapULongLongLongDouble";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongLongLongDouble;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongLongLongDouble;
        CompleteTypeDetail detail_MapULongLongLongDouble = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongLongLongDouble, ann_custom_MapULongLongLongDouble, type_name_MapULongLongLongDouble.to_string());
        CompleteStructHeader header_MapULongLongLongDouble;
        header_MapULongLongLongDouble = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongLongLongDouble);
        CompleteStructMemberSeq member_seq_MapULongLongLongDouble;
        {
            TypeIdentifierPair type_ids_var_map_u_long_long_long_double;
            ReturnCode_t return_code_var_map_u_long_long_long_double {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_u_long_long_long_double =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint64_t_longdouble_unbounded", type_ids_var_map_u_long_long_long_double);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_long_double)
            {
                return_code_var_map_u_long_long_long_double =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_longdouble", type_ids_var_map_u_long_long_long_double);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_long_double)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint64_t_longdouble_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint64_t_longdouble_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_long_double, element_identifier_anonymous_map_uint64_t_longdouble_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint64_t_longdouble_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_longdouble_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_u_long_long_long_double =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_u_long_long_long_double);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_long_double)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint64_t_longdouble_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint64_t_longdouble_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_long_double, key_identifier_anonymous_map_uint64_t_longdouble_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint64_t_longdouble_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_longdouble_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint64_t_longdouble_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint64_t_longdouble_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_longdouble_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint64_t_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_longdouble_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint64_t_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_longdouble_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint64_t_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_longdouble_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint64_t_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_longdouble_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint64_t_longdouble_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_longdouble_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_longdouble_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint64_t_longdouble_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_longdouble_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_longdouble_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint64_t_longdouble_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint64_t_longdouble_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint64_t_longdouble_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint64_t_longdouble_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint64_t_longdouble_unbounded, element_flags_anonymous_map_uint64_t_longdouble_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint64_t_longdouble_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint64_t_longdouble_unbounded), key_flags_anonymous_map_uint64_t_longdouble_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint64_t_longdouble_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint64_t_longdouble_unbounded", type_ids_var_map_u_long_long_long_double))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint64_t_longdouble_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_u_long_long_long_double = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_u_long_long_long_double = 0x00000000;
            bool common_var_map_u_long_long_long_double_ec {false};
            CommonStructMember common_var_map_u_long_long_long_double {TypeObjectUtils::build_common_struct_member(member_id_var_map_u_long_long_long_double, member_flags_var_map_u_long_long_long_double, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_long_double, common_var_map_u_long_long_long_double_ec))};
            if (!common_var_map_u_long_long_long_double_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_u_long_long_long_double member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_u_long_long_long_double = "var_map_u_long_long_long_double";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_u_long_long_long_double;
            ann_custom_MapULongLongLongDouble.reset();
            CompleteMemberDetail detail_var_map_u_long_long_long_double = TypeObjectUtils::build_complete_member_detail(name_var_map_u_long_long_long_double, member_ann_builtin_var_map_u_long_long_long_double, ann_custom_MapULongLongLongDouble);
            CompleteStructMember member_var_map_u_long_long_long_double = TypeObjectUtils::build_complete_struct_member(common_var_map_u_long_long_long_double, detail_var_map_u_long_long_long_double);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongLongLongDouble, member_var_map_u_long_long_long_double);
        }
        CompleteStructType struct_type_MapULongLongLongDouble = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongLongLongDouble, header_MapULongLongLongDouble, member_seq_MapULongLongLongDouble);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongLongLongDouble, type_name_MapULongLongLongDouble.to_string(), type_ids_MapULongLongLongDouble))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongLongLongDouble already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongLongBoolean_type_identifier(
        TypeIdentifierPair& type_ids_MapULongLongBoolean)
{

    ReturnCode_t return_code_MapULongLongBoolean {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongLongBoolean =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongLongBoolean", type_ids_MapULongLongBoolean);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongLongBoolean)
    {
        StructTypeFlag struct_flags_MapULongLongBoolean = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongLongBoolean = "MapULongLongBoolean";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongLongBoolean;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongLongBoolean;
        CompleteTypeDetail detail_MapULongLongBoolean = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongLongBoolean, ann_custom_MapULongLongBoolean, type_name_MapULongLongBoolean.to_string());
        CompleteStructHeader header_MapULongLongBoolean;
        header_MapULongLongBoolean = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongLongBoolean);
        CompleteStructMemberSeq member_seq_MapULongLongBoolean;
        {
            TypeIdentifierPair type_ids_var_map_u_long_long_boolean;
            ReturnCode_t return_code_var_map_u_long_long_boolean {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_u_long_long_boolean =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint64_t_bool_unbounded", type_ids_var_map_u_long_long_boolean);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_boolean)
            {
                return_code_var_map_u_long_long_boolean =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_bool", type_ids_var_map_u_long_long_boolean);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_boolean)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint64_t_bool_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint64_t_bool_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_boolean, element_identifier_anonymous_map_uint64_t_bool_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint64_t_bool_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_bool_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_u_long_long_boolean =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_u_long_long_boolean);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_boolean)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint64_t_bool_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint64_t_bool_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_boolean, key_identifier_anonymous_map_uint64_t_bool_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint64_t_bool_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_bool_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint64_t_bool_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint64_t_bool_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_bool_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint64_t_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_bool_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint64_t_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_bool_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint64_t_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_bool_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint64_t_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_bool_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint64_t_bool_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_bool_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_bool_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint64_t_bool_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_bool_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_bool_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint64_t_bool_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint64_t_bool_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint64_t_bool_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint64_t_bool_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint64_t_bool_unbounded, element_flags_anonymous_map_uint64_t_bool_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint64_t_bool_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint64_t_bool_unbounded), key_flags_anonymous_map_uint64_t_bool_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint64_t_bool_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint64_t_bool_unbounded", type_ids_var_map_u_long_long_boolean))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint64_t_bool_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_u_long_long_boolean = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_u_long_long_boolean = 0x00000000;
            bool common_var_map_u_long_long_boolean_ec {false};
            CommonStructMember common_var_map_u_long_long_boolean {TypeObjectUtils::build_common_struct_member(member_id_var_map_u_long_long_boolean, member_flags_var_map_u_long_long_boolean, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_boolean, common_var_map_u_long_long_boolean_ec))};
            if (!common_var_map_u_long_long_boolean_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_u_long_long_boolean member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_u_long_long_boolean = "var_map_u_long_long_boolean";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_u_long_long_boolean;
            ann_custom_MapULongLongBoolean.reset();
            CompleteMemberDetail detail_var_map_u_long_long_boolean = TypeObjectUtils::build_complete_member_detail(name_var_map_u_long_long_boolean, member_ann_builtin_var_map_u_long_long_boolean, ann_custom_MapULongLongBoolean);
            CompleteStructMember member_var_map_u_long_long_boolean = TypeObjectUtils::build_complete_struct_member(common_var_map_u_long_long_boolean, detail_var_map_u_long_long_boolean);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongLongBoolean, member_var_map_u_long_long_boolean);
        }
        CompleteStructType struct_type_MapULongLongBoolean = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongLongBoolean, header_MapULongLongBoolean, member_seq_MapULongLongBoolean);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongLongBoolean, type_name_MapULongLongBoolean.to_string(), type_ids_MapULongLongBoolean))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongLongBoolean already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongLongOctet_type_identifier(
        TypeIdentifierPair& type_ids_MapULongLongOctet)
{

    ReturnCode_t return_code_MapULongLongOctet {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongLongOctet =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongLongOctet", type_ids_MapULongLongOctet);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongLongOctet)
    {
        StructTypeFlag struct_flags_MapULongLongOctet = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongLongOctet = "MapULongLongOctet";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongLongOctet;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongLongOctet;
        CompleteTypeDetail detail_MapULongLongOctet = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongLongOctet, ann_custom_MapULongLongOctet, type_name_MapULongLongOctet.to_string());
        CompleteStructHeader header_MapULongLongOctet;
        header_MapULongLongOctet = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongLongOctet);
        CompleteStructMemberSeq member_seq_MapULongLongOctet;
        {
            TypeIdentifierPair type_ids_var_map_u_long_long_octet;
            ReturnCode_t return_code_var_map_u_long_long_octet {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_u_long_long_octet =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint64_t_byte_unbounded", type_ids_var_map_u_long_long_octet);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_octet)
            {
                return_code_var_map_u_long_long_octet =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_byte", type_ids_var_map_u_long_long_octet);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_octet)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint64_t_byte_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint64_t_byte_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_octet, element_identifier_anonymous_map_uint64_t_byte_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint64_t_byte_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_byte_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_u_long_long_octet =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_u_long_long_octet);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_octet)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint64_t_byte_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint64_t_byte_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_octet, key_identifier_anonymous_map_uint64_t_byte_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint64_t_byte_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_byte_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint64_t_byte_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint64_t_byte_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_byte_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint64_t_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_byte_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint64_t_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_byte_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint64_t_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_byte_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint64_t_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_byte_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint64_t_byte_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_byte_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_byte_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint64_t_byte_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_byte_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_byte_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint64_t_byte_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint64_t_byte_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint64_t_byte_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint64_t_byte_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint64_t_byte_unbounded, element_flags_anonymous_map_uint64_t_byte_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint64_t_byte_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint64_t_byte_unbounded), key_flags_anonymous_map_uint64_t_byte_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint64_t_byte_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint64_t_byte_unbounded", type_ids_var_map_u_long_long_octet))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint64_t_byte_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_u_long_long_octet = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_u_long_long_octet = 0x00000000;
            bool common_var_map_u_long_long_octet_ec {false};
            CommonStructMember common_var_map_u_long_long_octet {TypeObjectUtils::build_common_struct_member(member_id_var_map_u_long_long_octet, member_flags_var_map_u_long_long_octet, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_octet, common_var_map_u_long_long_octet_ec))};
            if (!common_var_map_u_long_long_octet_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_u_long_long_octet member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_u_long_long_octet = "var_map_u_long_long_octet";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_u_long_long_octet;
            ann_custom_MapULongLongOctet.reset();
            CompleteMemberDetail detail_var_map_u_long_long_octet = TypeObjectUtils::build_complete_member_detail(name_var_map_u_long_long_octet, member_ann_builtin_var_map_u_long_long_octet, ann_custom_MapULongLongOctet);
            CompleteStructMember member_var_map_u_long_long_octet = TypeObjectUtils::build_complete_struct_member(common_var_map_u_long_long_octet, detail_var_map_u_long_long_octet);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongLongOctet, member_var_map_u_long_long_octet);
        }
        CompleteStructType struct_type_MapULongLongOctet = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongLongOctet, header_MapULongLongOctet, member_seq_MapULongLongOctet);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongLongOctet, type_name_MapULongLongOctet.to_string(), type_ids_MapULongLongOctet))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongLongOctet already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongLongChar_type_identifier(
        TypeIdentifierPair& type_ids_MapULongLongChar)
{

    ReturnCode_t return_code_MapULongLongChar {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongLongChar =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongLongChar", type_ids_MapULongLongChar);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongLongChar)
    {
        StructTypeFlag struct_flags_MapULongLongChar = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongLongChar = "MapULongLongChar";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongLongChar;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongLongChar;
        CompleteTypeDetail detail_MapULongLongChar = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongLongChar, ann_custom_MapULongLongChar, type_name_MapULongLongChar.to_string());
        CompleteStructHeader header_MapULongLongChar;
        header_MapULongLongChar = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongLongChar);
        CompleteStructMemberSeq member_seq_MapULongLongChar;
        {
            TypeIdentifierPair type_ids_var_map_u_long_long_char;
            ReturnCode_t return_code_var_map_u_long_long_char {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_u_long_long_char =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint64_t_char_unbounded", type_ids_var_map_u_long_long_char);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_char)
            {
                return_code_var_map_u_long_long_char =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_char", type_ids_var_map_u_long_long_char);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_char)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint64_t_char_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint64_t_char_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_char, element_identifier_anonymous_map_uint64_t_char_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint64_t_char_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_char_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_u_long_long_char =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_u_long_long_char);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_char)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint64_t_char_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint64_t_char_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_char, key_identifier_anonymous_map_uint64_t_char_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint64_t_char_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_char_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint64_t_char_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint64_t_char_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_char_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint64_t_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_char_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint64_t_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_char_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint64_t_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_char_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint64_t_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_char_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint64_t_char_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_char_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_char_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint64_t_char_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_char_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_char_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint64_t_char_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint64_t_char_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint64_t_char_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint64_t_char_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint64_t_char_unbounded, element_flags_anonymous_map_uint64_t_char_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint64_t_char_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint64_t_char_unbounded), key_flags_anonymous_map_uint64_t_char_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint64_t_char_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint64_t_char_unbounded", type_ids_var_map_u_long_long_char))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint64_t_char_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_u_long_long_char = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_u_long_long_char = 0x00000000;
            bool common_var_map_u_long_long_char_ec {false};
            CommonStructMember common_var_map_u_long_long_char {TypeObjectUtils::build_common_struct_member(member_id_var_map_u_long_long_char, member_flags_var_map_u_long_long_char, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_char, common_var_map_u_long_long_char_ec))};
            if (!common_var_map_u_long_long_char_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_u_long_long_char member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_u_long_long_char = "var_map_u_long_long_char";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_u_long_long_char;
            ann_custom_MapULongLongChar.reset();
            CompleteMemberDetail detail_var_map_u_long_long_char = TypeObjectUtils::build_complete_member_detail(name_var_map_u_long_long_char, member_ann_builtin_var_map_u_long_long_char, ann_custom_MapULongLongChar);
            CompleteStructMember member_var_map_u_long_long_char = TypeObjectUtils::build_complete_struct_member(common_var_map_u_long_long_char, detail_var_map_u_long_long_char);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongLongChar, member_var_map_u_long_long_char);
        }
        CompleteStructType struct_type_MapULongLongChar = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongLongChar, header_MapULongLongChar, member_seq_MapULongLongChar);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongLongChar, type_name_MapULongLongChar.to_string(), type_ids_MapULongLongChar))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongLongChar already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongLongWChar_type_identifier(
        TypeIdentifierPair& type_ids_MapULongLongWChar)
{

    ReturnCode_t return_code_MapULongLongWChar {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongLongWChar =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongLongWChar", type_ids_MapULongLongWChar);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongLongWChar)
    {
        StructTypeFlag struct_flags_MapULongLongWChar = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongLongWChar = "MapULongLongWChar";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongLongWChar;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongLongWChar;
        CompleteTypeDetail detail_MapULongLongWChar = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongLongWChar, ann_custom_MapULongLongWChar, type_name_MapULongLongWChar.to_string());
        CompleteStructHeader header_MapULongLongWChar;
        header_MapULongLongWChar = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongLongWChar);
        CompleteStructMemberSeq member_seq_MapULongLongWChar;
        {
            TypeIdentifierPair type_ids_var_map_u_long_long_wchar;
            ReturnCode_t return_code_var_map_u_long_long_wchar {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_u_long_long_wchar =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint64_t_wchar_t_unbounded", type_ids_var_map_u_long_long_wchar);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_wchar)
            {
                return_code_var_map_u_long_long_wchar =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_wchar_t", type_ids_var_map_u_long_long_wchar);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_wchar)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_uint64_t_wchar_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint64_t_wchar_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_wchar, element_identifier_anonymous_map_uint64_t_wchar_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint64_t_wchar_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_wchar_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_u_long_long_wchar =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_u_long_long_wchar);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_wchar)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint64_t_wchar_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint64_t_wchar_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_wchar, key_identifier_anonymous_map_uint64_t_wchar_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint64_t_wchar_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_wchar_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint64_t_wchar_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint64_t_wchar_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_wchar_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint64_t_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_wchar_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint64_t_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_wchar_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint64_t_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_wchar_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint64_t_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_wchar_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint64_t_wchar_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_wchar_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_wchar_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint64_t_wchar_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_wchar_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_wchar_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint64_t_wchar_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint64_t_wchar_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint64_t_wchar_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint64_t_wchar_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint64_t_wchar_t_unbounded, element_flags_anonymous_map_uint64_t_wchar_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint64_t_wchar_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint64_t_wchar_t_unbounded), key_flags_anonymous_map_uint64_t_wchar_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint64_t_wchar_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint64_t_wchar_t_unbounded", type_ids_var_map_u_long_long_wchar))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint64_t_wchar_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_u_long_long_wchar = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_u_long_long_wchar = 0x00000000;
            bool common_var_map_u_long_long_wchar_ec {false};
            CommonStructMember common_var_map_u_long_long_wchar {TypeObjectUtils::build_common_struct_member(member_id_var_map_u_long_long_wchar, member_flags_var_map_u_long_long_wchar, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_wchar, common_var_map_u_long_long_wchar_ec))};
            if (!common_var_map_u_long_long_wchar_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_u_long_long_wchar member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_u_long_long_wchar = "var_map_u_long_long_wchar";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_u_long_long_wchar;
            ann_custom_MapULongLongWChar.reset();
            CompleteMemberDetail detail_var_map_u_long_long_wchar = TypeObjectUtils::build_complete_member_detail(name_var_map_u_long_long_wchar, member_ann_builtin_var_map_u_long_long_wchar, ann_custom_MapULongLongWChar);
            CompleteStructMember member_var_map_u_long_long_wchar = TypeObjectUtils::build_complete_struct_member(common_var_map_u_long_long_wchar, detail_var_map_u_long_long_wchar);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongLongWChar, member_var_map_u_long_long_wchar);
        }
        CompleteStructType struct_type_MapULongLongWChar = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongLongWChar, header_MapULongLongWChar, member_seq_MapULongLongWChar);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongLongWChar, type_name_MapULongLongWChar.to_string(), type_ids_MapULongLongWChar))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongLongWChar already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongLongString_type_identifier(
        TypeIdentifierPair& type_ids_MapULongLongString)
{

    ReturnCode_t return_code_MapULongLongString {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongLongString =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongLongString", type_ids_MapULongLongString);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongLongString)
    {
        StructTypeFlag struct_flags_MapULongLongString = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongLongString = "MapULongLongString";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongLongString;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongLongString;
        CompleteTypeDetail detail_MapULongLongString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongLongString, ann_custom_MapULongLongString, type_name_MapULongLongString.to_string());
        CompleteStructHeader header_MapULongLongString;
        header_MapULongLongString = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongLongString);
        CompleteStructMemberSeq member_seq_MapULongLongString;
        {
            TypeIdentifierPair type_ids_var_map_u_long_long_string;
            ReturnCode_t return_code_var_map_u_long_long_string {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_u_long_long_string =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint64_t_anonymous_string_unbounded_unbounded", type_ids_var_map_u_long_long_string);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_string)
            {
                return_code_var_map_u_long_long_string =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_u_long_long_string);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_string)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_u_long_long_string))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool element_identifier_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_string, element_identifier_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_anonymous_string_unbounded_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_u_long_long_string =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_u_long_long_string);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_string)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_string, key_identifier_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_anonymous_string_unbounded_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded, element_flags_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded), key_flags_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint64_t_anonymous_string_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint64_t_anonymous_string_unbounded_unbounded", type_ids_var_map_u_long_long_string))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint64_t_anonymous_string_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_u_long_long_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_u_long_long_string = 0x00000000;
            bool common_var_map_u_long_long_string_ec {false};
            CommonStructMember common_var_map_u_long_long_string {TypeObjectUtils::build_common_struct_member(member_id_var_map_u_long_long_string, member_flags_var_map_u_long_long_string, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_string, common_var_map_u_long_long_string_ec))};
            if (!common_var_map_u_long_long_string_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_u_long_long_string member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_u_long_long_string = "var_map_u_long_long_string";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_u_long_long_string;
            ann_custom_MapULongLongString.reset();
            CompleteMemberDetail detail_var_map_u_long_long_string = TypeObjectUtils::build_complete_member_detail(name_var_map_u_long_long_string, member_ann_builtin_var_map_u_long_long_string, ann_custom_MapULongLongString);
            CompleteStructMember member_var_map_u_long_long_string = TypeObjectUtils::build_complete_struct_member(common_var_map_u_long_long_string, detail_var_map_u_long_long_string);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongLongString, member_var_map_u_long_long_string);
        }
        CompleteStructType struct_type_MapULongLongString = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongLongString, header_MapULongLongString, member_seq_MapULongLongString);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongLongString, type_name_MapULongLongString.to_string(), type_ids_MapULongLongString))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongLongString already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongLongWString_type_identifier(
        TypeIdentifierPair& type_ids_MapULongLongWString)
{

    ReturnCode_t return_code_MapULongLongWString {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongLongWString =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongLongWString", type_ids_MapULongLongWString);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongLongWString)
    {
        StructTypeFlag struct_flags_MapULongLongWString = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongLongWString = "MapULongLongWString";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongLongWString;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongLongWString;
        CompleteTypeDetail detail_MapULongLongWString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongLongWString, ann_custom_MapULongLongWString, type_name_MapULongLongWString.to_string());
        CompleteStructHeader header_MapULongLongWString;
        header_MapULongLongWString = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongLongWString);
        CompleteStructMemberSeq member_seq_MapULongLongWString;
        {
            TypeIdentifierPair type_ids_var_map_u_long_long_wstring;
            ReturnCode_t return_code_var_map_u_long_long_wstring {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_u_long_long_wstring =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded", type_ids_var_map_u_long_long_wstring);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_wstring)
            {
                return_code_var_map_u_long_long_wstring =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_u_long_long_wstring);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_wstring)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_u_long_long_wstring, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool element_identifier_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_wstring, element_identifier_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_u_long_long_wstring =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_u_long_long_wstring);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_wstring)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_wstring, key_identifier_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded, element_flags_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded), key_flags_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded", type_ids_var_map_u_long_long_wstring))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint64_t_anonymous_wstring_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_u_long_long_wstring = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_u_long_long_wstring = 0x00000000;
            bool common_var_map_u_long_long_wstring_ec {false};
            CommonStructMember common_var_map_u_long_long_wstring {TypeObjectUtils::build_common_struct_member(member_id_var_map_u_long_long_wstring, member_flags_var_map_u_long_long_wstring, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_wstring, common_var_map_u_long_long_wstring_ec))};
            if (!common_var_map_u_long_long_wstring_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_u_long_long_wstring member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_u_long_long_wstring = "var_map_u_long_long_wstring";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_u_long_long_wstring;
            ann_custom_MapULongLongWString.reset();
            CompleteMemberDetail detail_var_map_u_long_long_wstring = TypeObjectUtils::build_complete_member_detail(name_var_map_u_long_long_wstring, member_ann_builtin_var_map_u_long_long_wstring, ann_custom_MapULongLongWString);
            CompleteStructMember member_var_map_u_long_long_wstring = TypeObjectUtils::build_complete_struct_member(common_var_map_u_long_long_wstring, detail_var_map_u_long_long_wstring);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongLongWString, member_var_map_u_long_long_wstring);
        }
        CompleteStructType struct_type_MapULongLongWString = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongLongWString, header_MapULongLongWString, member_seq_MapULongLongWString);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongLongWString, type_name_MapULongLongWString.to_string(), type_ids_MapULongLongWString))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongLongWString already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongLongInnerAliasBoundedStringHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapULongLongInnerAliasBoundedStringHelper)
{

    ReturnCode_t return_code_MapULongLongInnerAliasBoundedStringHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongLongInnerAliasBoundedStringHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongLongInnerAliasBoundedStringHelper", type_ids_MapULongLongInnerAliasBoundedStringHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongLongInnerAliasBoundedStringHelper)
    {
        StructTypeFlag struct_flags_MapULongLongInnerAliasBoundedStringHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongLongInnerAliasBoundedStringHelper = "MapULongLongInnerAliasBoundedStringHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongLongInnerAliasBoundedStringHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongLongInnerAliasBoundedStringHelper;
        CompleteTypeDetail detail_MapULongLongInnerAliasBoundedStringHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongLongInnerAliasBoundedStringHelper, ann_custom_MapULongLongInnerAliasBoundedStringHelper, type_name_MapULongLongInnerAliasBoundedStringHelper.to_string());
        CompleteStructHeader header_MapULongLongInnerAliasBoundedStringHelper;
        header_MapULongLongInnerAliasBoundedStringHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongLongInnerAliasBoundedStringHelper);
        CompleteStructMemberSeq member_seq_MapULongLongInnerAliasBoundedStringHelper;
        {
            TypeIdentifierPair type_ids_var_map_u_long_long_inner_alias_bounded_string_helper;
            ReturnCode_t return_code_var_map_u_long_long_inner_alias_bounded_string_helper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_u_long_long_inner_alias_bounded_string_helper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint64_t_anonymous_string_10_unbounded", type_ids_var_map_u_long_long_inner_alias_bounded_string_helper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_inner_alias_bounded_string_helper)
            {
                return_code_var_map_u_long_long_inner_alias_bounded_string_helper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_u_long_long_inner_alias_bounded_string_helper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_inner_alias_bounded_string_helper)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_u_long_long_inner_alias_bounded_string_helper);
                }
                bool element_identifier_anonymous_map_uint64_t_anonymous_string_10_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint64_t_anonymous_string_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_inner_alias_bounded_string_helper, element_identifier_anonymous_map_uint64_t_anonymous_string_10_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint64_t_anonymous_string_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_anonymous_string_10_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_u_long_long_inner_alias_bounded_string_helper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_u_long_long_inner_alias_bounded_string_helper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_inner_alias_bounded_string_helper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint64_t_anonymous_string_10_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint64_t_anonymous_string_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_inner_alias_bounded_string_helper, key_identifier_anonymous_map_uint64_t_anonymous_string_10_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint64_t_anonymous_string_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_anonymous_string_10_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint64_t_anonymous_string_10_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint64_t_anonymous_string_10_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_string_10_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint64_t_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_string_10_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint64_t_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_string_10_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint64_t_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_string_10_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint64_t_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_string_10_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint64_t_anonymous_string_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_string_10_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_string_10_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint64_t_anonymous_string_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_string_10_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_string_10_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint64_t_anonymous_string_10_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint64_t_anonymous_string_10_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint64_t_anonymous_string_10_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint64_t_anonymous_string_10_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint64_t_anonymous_string_10_unbounded, element_flags_anonymous_map_uint64_t_anonymous_string_10_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint64_t_anonymous_string_10_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint64_t_anonymous_string_10_unbounded), key_flags_anonymous_map_uint64_t_anonymous_string_10_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint64_t_anonymous_string_10_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint64_t_anonymous_string_10_unbounded", type_ids_var_map_u_long_long_inner_alias_bounded_string_helper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint64_t_anonymous_string_10_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_u_long_long_inner_alias_bounded_string_helper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_u_long_long_inner_alias_bounded_string_helper = 0x00000000;
            bool common_var_map_u_long_long_inner_alias_bounded_string_helper_ec {false};
            CommonStructMember common_var_map_u_long_long_inner_alias_bounded_string_helper {TypeObjectUtils::build_common_struct_member(member_id_var_map_u_long_long_inner_alias_bounded_string_helper, member_flags_var_map_u_long_long_inner_alias_bounded_string_helper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_inner_alias_bounded_string_helper, common_var_map_u_long_long_inner_alias_bounded_string_helper_ec))};
            if (!common_var_map_u_long_long_inner_alias_bounded_string_helper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_u_long_long_inner_alias_bounded_string_helper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_u_long_long_inner_alias_bounded_string_helper = "var_map_u_long_long_inner_alias_bounded_string_helper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_u_long_long_inner_alias_bounded_string_helper;
            ann_custom_MapULongLongInnerAliasBoundedStringHelper.reset();
            CompleteMemberDetail detail_var_map_u_long_long_inner_alias_bounded_string_helper = TypeObjectUtils::build_complete_member_detail(name_var_map_u_long_long_inner_alias_bounded_string_helper, member_ann_builtin_var_map_u_long_long_inner_alias_bounded_string_helper, ann_custom_MapULongLongInnerAliasBoundedStringHelper);
            CompleteStructMember member_var_map_u_long_long_inner_alias_bounded_string_helper = TypeObjectUtils::build_complete_struct_member(common_var_map_u_long_long_inner_alias_bounded_string_helper, detail_var_map_u_long_long_inner_alias_bounded_string_helper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongLongInnerAliasBoundedStringHelper, member_var_map_u_long_long_inner_alias_bounded_string_helper);
        }
        CompleteStructType struct_type_MapULongLongInnerAliasBoundedStringHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongLongInnerAliasBoundedStringHelper, header_MapULongLongInnerAliasBoundedStringHelper, member_seq_MapULongLongInnerAliasBoundedStringHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongLongInnerAliasBoundedStringHelper, type_name_MapULongLongInnerAliasBoundedStringHelper.to_string(), type_ids_MapULongLongInnerAliasBoundedStringHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongLongInnerAliasBoundedStringHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongLongInnerAliasBoundedWStringHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapULongLongInnerAliasBoundedWStringHelper)
{

    ReturnCode_t return_code_MapULongLongInnerAliasBoundedWStringHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongLongInnerAliasBoundedWStringHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongLongInnerAliasBoundedWStringHelper", type_ids_MapULongLongInnerAliasBoundedWStringHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongLongInnerAliasBoundedWStringHelper)
    {
        StructTypeFlag struct_flags_MapULongLongInnerAliasBoundedWStringHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongLongInnerAliasBoundedWStringHelper = "MapULongLongInnerAliasBoundedWStringHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongLongInnerAliasBoundedWStringHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongLongInnerAliasBoundedWStringHelper;
        CompleteTypeDetail detail_MapULongLongInnerAliasBoundedWStringHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongLongInnerAliasBoundedWStringHelper, ann_custom_MapULongLongInnerAliasBoundedWStringHelper, type_name_MapULongLongInnerAliasBoundedWStringHelper.to_string());
        CompleteStructHeader header_MapULongLongInnerAliasBoundedWStringHelper;
        header_MapULongLongInnerAliasBoundedWStringHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongLongInnerAliasBoundedWStringHelper);
        CompleteStructMemberSeq member_seq_MapULongLongInnerAliasBoundedWStringHelper;
        {
            TypeIdentifierPair type_ids_var_map_u_long_long_inner_alias_bounded_wstring_helper;
            ReturnCode_t return_code_var_map_u_long_long_inner_alias_bounded_wstring_helper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_u_long_long_inner_alias_bounded_wstring_helper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint64_t_anonymous_wstring_10_unbounded", type_ids_var_map_u_long_long_inner_alias_bounded_wstring_helper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_inner_alias_bounded_wstring_helper)
            {
                return_code_var_map_u_long_long_inner_alias_bounded_wstring_helper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_u_long_long_inner_alias_bounded_wstring_helper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_inner_alias_bounded_wstring_helper)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_u_long_long_inner_alias_bounded_wstring_helper);
                }
                bool element_identifier_anonymous_map_uint64_t_anonymous_wstring_10_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint64_t_anonymous_wstring_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_inner_alias_bounded_wstring_helper, element_identifier_anonymous_map_uint64_t_anonymous_wstring_10_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint64_t_anonymous_wstring_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_anonymous_wstring_10_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_u_long_long_inner_alias_bounded_wstring_helper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_u_long_long_inner_alias_bounded_wstring_helper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_inner_alias_bounded_wstring_helper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint64_t_anonymous_wstring_10_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint64_t_anonymous_wstring_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_inner_alias_bounded_wstring_helper, key_identifier_anonymous_map_uint64_t_anonymous_wstring_10_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint64_t_anonymous_wstring_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_anonymous_wstring_10_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint64_t_anonymous_wstring_10_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint64_t_anonymous_wstring_10_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_wstring_10_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint64_t_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_wstring_10_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint64_t_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_wstring_10_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint64_t_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_wstring_10_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint64_t_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_wstring_10_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint64_t_anonymous_wstring_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_wstring_10_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_wstring_10_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint64_t_anonymous_wstring_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_wstring_10_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_wstring_10_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint64_t_anonymous_wstring_10_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint64_t_anonymous_wstring_10_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint64_t_anonymous_wstring_10_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint64_t_anonymous_wstring_10_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint64_t_anonymous_wstring_10_unbounded, element_flags_anonymous_map_uint64_t_anonymous_wstring_10_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint64_t_anonymous_wstring_10_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint64_t_anonymous_wstring_10_unbounded), key_flags_anonymous_map_uint64_t_anonymous_wstring_10_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint64_t_anonymous_wstring_10_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint64_t_anonymous_wstring_10_unbounded", type_ids_var_map_u_long_long_inner_alias_bounded_wstring_helper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint64_t_anonymous_wstring_10_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_u_long_long_inner_alias_bounded_wstring_helper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_u_long_long_inner_alias_bounded_wstring_helper = 0x00000000;
            bool common_var_map_u_long_long_inner_alias_bounded_wstring_helper_ec {false};
            CommonStructMember common_var_map_u_long_long_inner_alias_bounded_wstring_helper {TypeObjectUtils::build_common_struct_member(member_id_var_map_u_long_long_inner_alias_bounded_wstring_helper, member_flags_var_map_u_long_long_inner_alias_bounded_wstring_helper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_inner_alias_bounded_wstring_helper, common_var_map_u_long_long_inner_alias_bounded_wstring_helper_ec))};
            if (!common_var_map_u_long_long_inner_alias_bounded_wstring_helper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_u_long_long_inner_alias_bounded_wstring_helper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_u_long_long_inner_alias_bounded_wstring_helper = "var_map_u_long_long_inner_alias_bounded_wstring_helper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_u_long_long_inner_alias_bounded_wstring_helper;
            ann_custom_MapULongLongInnerAliasBoundedWStringHelper.reset();
            CompleteMemberDetail detail_var_map_u_long_long_inner_alias_bounded_wstring_helper = TypeObjectUtils::build_complete_member_detail(name_var_map_u_long_long_inner_alias_bounded_wstring_helper, member_ann_builtin_var_map_u_long_long_inner_alias_bounded_wstring_helper, ann_custom_MapULongLongInnerAliasBoundedWStringHelper);
            CompleteStructMember member_var_map_u_long_long_inner_alias_bounded_wstring_helper = TypeObjectUtils::build_complete_struct_member(common_var_map_u_long_long_inner_alias_bounded_wstring_helper, detail_var_map_u_long_long_inner_alias_bounded_wstring_helper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongLongInnerAliasBoundedWStringHelper, member_var_map_u_long_long_inner_alias_bounded_wstring_helper);
        }
        CompleteStructType struct_type_MapULongLongInnerAliasBoundedWStringHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongLongInnerAliasBoundedWStringHelper, header_MapULongLongInnerAliasBoundedWStringHelper, member_seq_MapULongLongInnerAliasBoundedWStringHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongLongInnerAliasBoundedWStringHelper, type_name_MapULongLongInnerAliasBoundedWStringHelper.to_string(), type_ids_MapULongLongInnerAliasBoundedWStringHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongLongInnerAliasBoundedWStringHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongLongInnerEnumHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapULongLongInnerEnumHelper)
{

    ReturnCode_t return_code_MapULongLongInnerEnumHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongLongInnerEnumHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongLongInnerEnumHelper", type_ids_MapULongLongInnerEnumHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongLongInnerEnumHelper)
    {
        StructTypeFlag struct_flags_MapULongLongInnerEnumHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongLongInnerEnumHelper = "MapULongLongInnerEnumHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongLongInnerEnumHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongLongInnerEnumHelper;
        CompleteTypeDetail detail_MapULongLongInnerEnumHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongLongInnerEnumHelper, ann_custom_MapULongLongInnerEnumHelper, type_name_MapULongLongInnerEnumHelper.to_string());
        CompleteStructHeader header_MapULongLongInnerEnumHelper;
        header_MapULongLongInnerEnumHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongLongInnerEnumHelper);
        CompleteStructMemberSeq member_seq_MapULongLongInnerEnumHelper;
        {
            TypeIdentifierPair type_ids_var_map_u_long_long_inner_enum_helper;
            ReturnCode_t return_code_var_map_u_long_long_inner_enum_helper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_u_long_long_inner_enum_helper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint64_t_InnerEnumHelper_unbounded", type_ids_var_map_u_long_long_inner_enum_helper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_inner_enum_helper)
            {
                return_code_var_map_u_long_long_inner_enum_helper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerEnumHelper", type_ids_var_map_u_long_long_inner_enum_helper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_inner_enum_helper)
                {
                ::register_InnerEnumHelper_type_identifier(type_ids_var_map_u_long_long_inner_enum_helper);
                }
                bool element_identifier_anonymous_map_uint64_t_InnerEnumHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint64_t_InnerEnumHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_inner_enum_helper, element_identifier_anonymous_map_uint64_t_InnerEnumHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint64_t_InnerEnumHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_InnerEnumHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_u_long_long_inner_enum_helper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_u_long_long_inner_enum_helper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_inner_enum_helper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint64_t_InnerEnumHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint64_t_InnerEnumHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_inner_enum_helper, key_identifier_anonymous_map_uint64_t_InnerEnumHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint64_t_InnerEnumHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_InnerEnumHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint64_t_InnerEnumHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint64_t_InnerEnumHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerEnumHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint64_t_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerEnumHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint64_t_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerEnumHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint64_t_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerEnumHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint64_t_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerEnumHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint64_t_InnerEnumHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerEnumHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerEnumHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint64_t_InnerEnumHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerEnumHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerEnumHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint64_t_InnerEnumHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint64_t_InnerEnumHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint64_t_InnerEnumHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint64_t_InnerEnumHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint64_t_InnerEnumHelper_unbounded, element_flags_anonymous_map_uint64_t_InnerEnumHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint64_t_InnerEnumHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint64_t_InnerEnumHelper_unbounded), key_flags_anonymous_map_uint64_t_InnerEnumHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint64_t_InnerEnumHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint64_t_InnerEnumHelper_unbounded", type_ids_var_map_u_long_long_inner_enum_helper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint64_t_InnerEnumHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_u_long_long_inner_enum_helper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_u_long_long_inner_enum_helper = 0x00000000;
            bool common_var_map_u_long_long_inner_enum_helper_ec {false};
            CommonStructMember common_var_map_u_long_long_inner_enum_helper {TypeObjectUtils::build_common_struct_member(member_id_var_map_u_long_long_inner_enum_helper, member_flags_var_map_u_long_long_inner_enum_helper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_inner_enum_helper, common_var_map_u_long_long_inner_enum_helper_ec))};
            if (!common_var_map_u_long_long_inner_enum_helper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_u_long_long_inner_enum_helper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_u_long_long_inner_enum_helper = "var_map_u_long_long_inner_enum_helper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_u_long_long_inner_enum_helper;
            ann_custom_MapULongLongInnerEnumHelper.reset();
            CompleteMemberDetail detail_var_map_u_long_long_inner_enum_helper = TypeObjectUtils::build_complete_member_detail(name_var_map_u_long_long_inner_enum_helper, member_ann_builtin_var_map_u_long_long_inner_enum_helper, ann_custom_MapULongLongInnerEnumHelper);
            CompleteStructMember member_var_map_u_long_long_inner_enum_helper = TypeObjectUtils::build_complete_struct_member(common_var_map_u_long_long_inner_enum_helper, detail_var_map_u_long_long_inner_enum_helper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongLongInnerEnumHelper, member_var_map_u_long_long_inner_enum_helper);
        }
        CompleteStructType struct_type_MapULongLongInnerEnumHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongLongInnerEnumHelper, header_MapULongLongInnerEnumHelper, member_seq_MapULongLongInnerEnumHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongLongInnerEnumHelper, type_name_MapULongLongInnerEnumHelper.to_string(), type_ids_MapULongLongInnerEnumHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongLongInnerEnumHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongLongInnerBitMaskHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapULongLongInnerBitMaskHelper)
{

    ReturnCode_t return_code_MapULongLongInnerBitMaskHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongLongInnerBitMaskHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongLongInnerBitMaskHelper", type_ids_MapULongLongInnerBitMaskHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongLongInnerBitMaskHelper)
    {
        StructTypeFlag struct_flags_MapULongLongInnerBitMaskHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongLongInnerBitMaskHelper = "MapULongLongInnerBitMaskHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongLongInnerBitMaskHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongLongInnerBitMaskHelper;
        CompleteTypeDetail detail_MapULongLongInnerBitMaskHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongLongInnerBitMaskHelper, ann_custom_MapULongLongInnerBitMaskHelper, type_name_MapULongLongInnerBitMaskHelper.to_string());
        CompleteStructHeader header_MapULongLongInnerBitMaskHelper;
        header_MapULongLongInnerBitMaskHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongLongInnerBitMaskHelper);
        CompleteStructMemberSeq member_seq_MapULongLongInnerBitMaskHelper;
        {
            TypeIdentifierPair type_ids_var_map_u_long_long_inner_bit_mask_helper;
            ReturnCode_t return_code_var_map_u_long_long_inner_bit_mask_helper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_u_long_long_inner_bit_mask_helper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint64_t_InnerBitMaskHelper_unbounded", type_ids_var_map_u_long_long_inner_bit_mask_helper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_inner_bit_mask_helper)
            {
                return_code_var_map_u_long_long_inner_bit_mask_helper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerBitMaskHelper", type_ids_var_map_u_long_long_inner_bit_mask_helper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_inner_bit_mask_helper)
                {
                ::register_InnerBitMaskHelper_type_identifier(type_ids_var_map_u_long_long_inner_bit_mask_helper);
                }
                bool element_identifier_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_inner_bit_mask_helper, element_identifier_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_InnerBitMaskHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_u_long_long_inner_bit_mask_helper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_u_long_long_inner_bit_mask_helper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_inner_bit_mask_helper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_inner_bit_mask_helper, key_identifier_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_InnerBitMaskHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded, element_flags_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded), key_flags_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint64_t_InnerBitMaskHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint64_t_InnerBitMaskHelper_unbounded", type_ids_var_map_u_long_long_inner_bit_mask_helper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint64_t_InnerBitMaskHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_u_long_long_inner_bit_mask_helper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_u_long_long_inner_bit_mask_helper = 0x00000000;
            bool common_var_map_u_long_long_inner_bit_mask_helper_ec {false};
            CommonStructMember common_var_map_u_long_long_inner_bit_mask_helper {TypeObjectUtils::build_common_struct_member(member_id_var_map_u_long_long_inner_bit_mask_helper, member_flags_var_map_u_long_long_inner_bit_mask_helper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_inner_bit_mask_helper, common_var_map_u_long_long_inner_bit_mask_helper_ec))};
            if (!common_var_map_u_long_long_inner_bit_mask_helper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_u_long_long_inner_bit_mask_helper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_u_long_long_inner_bit_mask_helper = "var_map_u_long_long_inner_bit_mask_helper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_u_long_long_inner_bit_mask_helper;
            ann_custom_MapULongLongInnerBitMaskHelper.reset();
            CompleteMemberDetail detail_var_map_u_long_long_inner_bit_mask_helper = TypeObjectUtils::build_complete_member_detail(name_var_map_u_long_long_inner_bit_mask_helper, member_ann_builtin_var_map_u_long_long_inner_bit_mask_helper, ann_custom_MapULongLongInnerBitMaskHelper);
            CompleteStructMember member_var_map_u_long_long_inner_bit_mask_helper = TypeObjectUtils::build_complete_struct_member(common_var_map_u_long_long_inner_bit_mask_helper, detail_var_map_u_long_long_inner_bit_mask_helper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongLongInnerBitMaskHelper, member_var_map_u_long_long_inner_bit_mask_helper);
        }
        CompleteStructType struct_type_MapULongLongInnerBitMaskHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongLongInnerBitMaskHelper, header_MapULongLongInnerBitMaskHelper, member_seq_MapULongLongInnerBitMaskHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongLongInnerBitMaskHelper, type_name_MapULongLongInnerBitMaskHelper.to_string(), type_ids_MapULongLongInnerBitMaskHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongLongInnerBitMaskHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongLongInnerAliasHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapULongLongInnerAliasHelper)
{

    ReturnCode_t return_code_MapULongLongInnerAliasHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongLongInnerAliasHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongLongInnerAliasHelper", type_ids_MapULongLongInnerAliasHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongLongInnerAliasHelper)
    {
        StructTypeFlag struct_flags_MapULongLongInnerAliasHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongLongInnerAliasHelper = "MapULongLongInnerAliasHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongLongInnerAliasHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongLongInnerAliasHelper;
        CompleteTypeDetail detail_MapULongLongInnerAliasHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongLongInnerAliasHelper, ann_custom_MapULongLongInnerAliasHelper, type_name_MapULongLongInnerAliasHelper.to_string());
        CompleteStructHeader header_MapULongLongInnerAliasHelper;
        header_MapULongLongInnerAliasHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongLongInnerAliasHelper);
        CompleteStructMemberSeq member_seq_MapULongLongInnerAliasHelper;
        {
            TypeIdentifierPair type_ids_var_map_u_long_long_inner_alias_helper;
            ReturnCode_t return_code_var_map_u_long_long_inner_alias_helper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_u_long_long_inner_alias_helper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint64_t_InnerAliasHelper_unbounded", type_ids_var_map_u_long_long_inner_alias_helper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_inner_alias_helper)
            {
                return_code_var_map_u_long_long_inner_alias_helper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerAliasHelper", type_ids_var_map_u_long_long_inner_alias_helper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_inner_alias_helper)
                {
                ::register_InnerAliasHelper_type_identifier(type_ids_var_map_u_long_long_inner_alias_helper);
                }
                bool element_identifier_anonymous_map_uint64_t_InnerAliasHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint64_t_InnerAliasHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_inner_alias_helper, element_identifier_anonymous_map_uint64_t_InnerAliasHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint64_t_InnerAliasHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_InnerAliasHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_u_long_long_inner_alias_helper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_u_long_long_inner_alias_helper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_inner_alias_helper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint64_t_InnerAliasHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint64_t_InnerAliasHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_inner_alias_helper, key_identifier_anonymous_map_uint64_t_InnerAliasHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint64_t_InnerAliasHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_InnerAliasHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint64_t_InnerAliasHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint64_t_InnerAliasHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerAliasHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint64_t_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerAliasHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint64_t_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerAliasHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint64_t_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerAliasHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint64_t_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerAliasHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint64_t_InnerAliasHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerAliasHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerAliasHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint64_t_InnerAliasHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerAliasHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerAliasHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint64_t_InnerAliasHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint64_t_InnerAliasHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint64_t_InnerAliasHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint64_t_InnerAliasHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint64_t_InnerAliasHelper_unbounded, element_flags_anonymous_map_uint64_t_InnerAliasHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint64_t_InnerAliasHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint64_t_InnerAliasHelper_unbounded), key_flags_anonymous_map_uint64_t_InnerAliasHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint64_t_InnerAliasHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint64_t_InnerAliasHelper_unbounded", type_ids_var_map_u_long_long_inner_alias_helper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint64_t_InnerAliasHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_u_long_long_inner_alias_helper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_u_long_long_inner_alias_helper = 0x00000000;
            bool common_var_map_u_long_long_inner_alias_helper_ec {false};
            CommonStructMember common_var_map_u_long_long_inner_alias_helper {TypeObjectUtils::build_common_struct_member(member_id_var_map_u_long_long_inner_alias_helper, member_flags_var_map_u_long_long_inner_alias_helper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_inner_alias_helper, common_var_map_u_long_long_inner_alias_helper_ec))};
            if (!common_var_map_u_long_long_inner_alias_helper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_u_long_long_inner_alias_helper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_u_long_long_inner_alias_helper = "var_map_u_long_long_inner_alias_helper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_u_long_long_inner_alias_helper;
            ann_custom_MapULongLongInnerAliasHelper.reset();
            CompleteMemberDetail detail_var_map_u_long_long_inner_alias_helper = TypeObjectUtils::build_complete_member_detail(name_var_map_u_long_long_inner_alias_helper, member_ann_builtin_var_map_u_long_long_inner_alias_helper, ann_custom_MapULongLongInnerAliasHelper);
            CompleteStructMember member_var_map_u_long_long_inner_alias_helper = TypeObjectUtils::build_complete_struct_member(common_var_map_u_long_long_inner_alias_helper, detail_var_map_u_long_long_inner_alias_helper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongLongInnerAliasHelper, member_var_map_u_long_long_inner_alias_helper);
        }
        CompleteStructType struct_type_MapULongLongInnerAliasHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongLongInnerAliasHelper, header_MapULongLongInnerAliasHelper, member_seq_MapULongLongInnerAliasHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongLongInnerAliasHelper, type_name_MapULongLongInnerAliasHelper.to_string(), type_ids_MapULongLongInnerAliasHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongLongInnerAliasHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongLongInnerAliasArrayHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapULongLongInnerAliasArrayHelper)
{

    ReturnCode_t return_code_MapULongLongInnerAliasArrayHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongLongInnerAliasArrayHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongLongInnerAliasArrayHelper", type_ids_MapULongLongInnerAliasArrayHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongLongInnerAliasArrayHelper)
    {
        StructTypeFlag struct_flags_MapULongLongInnerAliasArrayHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongLongInnerAliasArrayHelper = "MapULongLongInnerAliasArrayHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongLongInnerAliasArrayHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongLongInnerAliasArrayHelper;
        CompleteTypeDetail detail_MapULongLongInnerAliasArrayHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongLongInnerAliasArrayHelper, ann_custom_MapULongLongInnerAliasArrayHelper, type_name_MapULongLongInnerAliasArrayHelper.to_string());
        CompleteStructHeader header_MapULongLongInnerAliasArrayHelper;
        header_MapULongLongInnerAliasArrayHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongLongInnerAliasArrayHelper);
        CompleteStructMemberSeq member_seq_MapULongLongInnerAliasArrayHelper;
        {
            TypeIdentifierPair type_ids_var_map_u_long_long_inner_alias_array_helper;
            ReturnCode_t return_code_var_map_u_long_long_inner_alias_array_helper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_u_long_long_inner_alias_array_helper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded", type_ids_var_map_u_long_long_inner_alias_array_helper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_inner_alias_array_helper)
            {
                return_code_var_map_u_long_long_inner_alias_array_helper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_array_helper", type_ids_var_map_u_long_long_inner_alias_array_helper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_inner_alias_array_helper)
                {
                ::register_Inner_alias_array_helper_type_identifier(type_ids_var_map_u_long_long_inner_alias_array_helper);
                }
                bool element_identifier_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_inner_alias_array_helper, element_identifier_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_u_long_long_inner_alias_array_helper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_u_long_long_inner_alias_array_helper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_inner_alias_array_helper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_inner_alias_array_helper, key_identifier_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded, element_flags_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded), key_flags_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded", type_ids_var_map_u_long_long_inner_alias_array_helper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint64_t_anonymous_array_int16_t_2_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_u_long_long_inner_alias_array_helper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_u_long_long_inner_alias_array_helper = 0x00000000;
            bool common_var_map_u_long_long_inner_alias_array_helper_ec {false};
            CommonStructMember common_var_map_u_long_long_inner_alias_array_helper {TypeObjectUtils::build_common_struct_member(member_id_var_map_u_long_long_inner_alias_array_helper, member_flags_var_map_u_long_long_inner_alias_array_helper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_inner_alias_array_helper, common_var_map_u_long_long_inner_alias_array_helper_ec))};
            if (!common_var_map_u_long_long_inner_alias_array_helper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_u_long_long_inner_alias_array_helper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_u_long_long_inner_alias_array_helper = "var_map_u_long_long_inner_alias_array_helper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_u_long_long_inner_alias_array_helper;
            ann_custom_MapULongLongInnerAliasArrayHelper.reset();
            CompleteMemberDetail detail_var_map_u_long_long_inner_alias_array_helper = TypeObjectUtils::build_complete_member_detail(name_var_map_u_long_long_inner_alias_array_helper, member_ann_builtin_var_map_u_long_long_inner_alias_array_helper, ann_custom_MapULongLongInnerAliasArrayHelper);
            CompleteStructMember member_var_map_u_long_long_inner_alias_array_helper = TypeObjectUtils::build_complete_struct_member(common_var_map_u_long_long_inner_alias_array_helper, detail_var_map_u_long_long_inner_alias_array_helper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongLongInnerAliasArrayHelper, member_var_map_u_long_long_inner_alias_array_helper);
        }
        CompleteStructType struct_type_MapULongLongInnerAliasArrayHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongLongInnerAliasArrayHelper, header_MapULongLongInnerAliasArrayHelper, member_seq_MapULongLongInnerAliasArrayHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongLongInnerAliasArrayHelper, type_name_MapULongLongInnerAliasArrayHelper.to_string(), type_ids_MapULongLongInnerAliasArrayHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongLongInnerAliasArrayHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongLongInnerAliasSequenceHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapULongLongInnerAliasSequenceHelper)
{

    ReturnCode_t return_code_MapULongLongInnerAliasSequenceHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongLongInnerAliasSequenceHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongLongInnerAliasSequenceHelper", type_ids_MapULongLongInnerAliasSequenceHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongLongInnerAliasSequenceHelper)
    {
        StructTypeFlag struct_flags_MapULongLongInnerAliasSequenceHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongLongInnerAliasSequenceHelper = "MapULongLongInnerAliasSequenceHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongLongInnerAliasSequenceHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongLongInnerAliasSequenceHelper;
        CompleteTypeDetail detail_MapULongLongInnerAliasSequenceHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongLongInnerAliasSequenceHelper, ann_custom_MapULongLongInnerAliasSequenceHelper, type_name_MapULongLongInnerAliasSequenceHelper.to_string());
        CompleteStructHeader header_MapULongLongInnerAliasSequenceHelper;
        header_MapULongLongInnerAliasSequenceHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongLongInnerAliasSequenceHelper);
        CompleteStructMemberSeq member_seq_MapULongLongInnerAliasSequenceHelper;
        {
            TypeIdentifierPair type_ids_var_map_u_long_long_inner_alias_sequence_helper;
            ReturnCode_t return_code_var_map_u_long_long_inner_alias_sequence_helper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_u_long_long_inner_alias_sequence_helper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded", type_ids_var_map_u_long_long_inner_alias_sequence_helper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_inner_alias_sequence_helper)
            {
                return_code_var_map_u_long_long_inner_alias_sequence_helper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_sequence_helper", type_ids_var_map_u_long_long_inner_alias_sequence_helper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_inner_alias_sequence_helper)
                {
                ::register_Inner_alias_sequence_helper_type_identifier(type_ids_var_map_u_long_long_inner_alias_sequence_helper);
                }
                bool element_identifier_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_inner_alias_sequence_helper, element_identifier_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_u_long_long_inner_alias_sequence_helper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_u_long_long_inner_alias_sequence_helper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_inner_alias_sequence_helper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_inner_alias_sequence_helper, key_identifier_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded, element_flags_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded), key_flags_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded", type_ids_var_map_u_long_long_inner_alias_sequence_helper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint64_t_anonymous_sequence_int16_t_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_u_long_long_inner_alias_sequence_helper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_u_long_long_inner_alias_sequence_helper = 0x00000000;
            bool common_var_map_u_long_long_inner_alias_sequence_helper_ec {false};
            CommonStructMember common_var_map_u_long_long_inner_alias_sequence_helper {TypeObjectUtils::build_common_struct_member(member_id_var_map_u_long_long_inner_alias_sequence_helper, member_flags_var_map_u_long_long_inner_alias_sequence_helper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_inner_alias_sequence_helper, common_var_map_u_long_long_inner_alias_sequence_helper_ec))};
            if (!common_var_map_u_long_long_inner_alias_sequence_helper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_u_long_long_inner_alias_sequence_helper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_u_long_long_inner_alias_sequence_helper = "var_map_u_long_long_inner_alias_sequence_helper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_u_long_long_inner_alias_sequence_helper;
            ann_custom_MapULongLongInnerAliasSequenceHelper.reset();
            CompleteMemberDetail detail_var_map_u_long_long_inner_alias_sequence_helper = TypeObjectUtils::build_complete_member_detail(name_var_map_u_long_long_inner_alias_sequence_helper, member_ann_builtin_var_map_u_long_long_inner_alias_sequence_helper, ann_custom_MapULongLongInnerAliasSequenceHelper);
            CompleteStructMember member_var_map_u_long_long_inner_alias_sequence_helper = TypeObjectUtils::build_complete_struct_member(common_var_map_u_long_long_inner_alias_sequence_helper, detail_var_map_u_long_long_inner_alias_sequence_helper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongLongInnerAliasSequenceHelper, member_var_map_u_long_long_inner_alias_sequence_helper);
        }
        CompleteStructType struct_type_MapULongLongInnerAliasSequenceHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongLongInnerAliasSequenceHelper, header_MapULongLongInnerAliasSequenceHelper, member_seq_MapULongLongInnerAliasSequenceHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongLongInnerAliasSequenceHelper, type_name_MapULongLongInnerAliasSequenceHelper.to_string(), type_ids_MapULongLongInnerAliasSequenceHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongLongInnerAliasSequenceHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongLongInnerAliasMapHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapULongLongInnerAliasMapHelper)
{

    ReturnCode_t return_code_MapULongLongInnerAliasMapHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongLongInnerAliasMapHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongLongInnerAliasMapHelper", type_ids_MapULongLongInnerAliasMapHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongLongInnerAliasMapHelper)
    {
        StructTypeFlag struct_flags_MapULongLongInnerAliasMapHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongLongInnerAliasMapHelper = "MapULongLongInnerAliasMapHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongLongInnerAliasMapHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongLongInnerAliasMapHelper;
        CompleteTypeDetail detail_MapULongLongInnerAliasMapHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongLongInnerAliasMapHelper, ann_custom_MapULongLongInnerAliasMapHelper, type_name_MapULongLongInnerAliasMapHelper.to_string());
        CompleteStructHeader header_MapULongLongInnerAliasMapHelper;
        header_MapULongLongInnerAliasMapHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongLongInnerAliasMapHelper);
        CompleteStructMemberSeq member_seq_MapULongLongInnerAliasMapHelper;
        {
            TypeIdentifierPair type_ids_var_map_u_long_long_inner_alias_map_helper;
            ReturnCode_t return_code_var_map_u_long_long_inner_alias_map_helper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_u_long_long_inner_alias_map_helper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded", type_ids_var_map_u_long_long_inner_alias_map_helper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_inner_alias_map_helper)
            {
                return_code_var_map_u_long_long_inner_alias_map_helper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_map_helper", type_ids_var_map_u_long_long_inner_alias_map_helper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_inner_alias_map_helper)
                {
                ::register_Inner_alias_map_helper_type_identifier(type_ids_var_map_u_long_long_inner_alias_map_helper);
                }
                bool element_identifier_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_inner_alias_map_helper, element_identifier_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_u_long_long_inner_alias_map_helper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_u_long_long_inner_alias_map_helper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_inner_alias_map_helper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_inner_alias_map_helper, key_identifier_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded, element_flags_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded), key_flags_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded", type_ids_var_map_u_long_long_inner_alias_map_helper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint64_t_anonymous_map_int32_t_int32_t_0_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_u_long_long_inner_alias_map_helper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_u_long_long_inner_alias_map_helper = 0x00000000;
            bool common_var_map_u_long_long_inner_alias_map_helper_ec {false};
            CommonStructMember common_var_map_u_long_long_inner_alias_map_helper {TypeObjectUtils::build_common_struct_member(member_id_var_map_u_long_long_inner_alias_map_helper, member_flags_var_map_u_long_long_inner_alias_map_helper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_inner_alias_map_helper, common_var_map_u_long_long_inner_alias_map_helper_ec))};
            if (!common_var_map_u_long_long_inner_alias_map_helper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_u_long_long_inner_alias_map_helper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_u_long_long_inner_alias_map_helper = "var_map_u_long_long_inner_alias_map_helper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_u_long_long_inner_alias_map_helper;
            ann_custom_MapULongLongInnerAliasMapHelper.reset();
            CompleteMemberDetail detail_var_map_u_long_long_inner_alias_map_helper = TypeObjectUtils::build_complete_member_detail(name_var_map_u_long_long_inner_alias_map_helper, member_ann_builtin_var_map_u_long_long_inner_alias_map_helper, ann_custom_MapULongLongInnerAliasMapHelper);
            CompleteStructMember member_var_map_u_long_long_inner_alias_map_helper = TypeObjectUtils::build_complete_struct_member(common_var_map_u_long_long_inner_alias_map_helper, detail_var_map_u_long_long_inner_alias_map_helper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongLongInnerAliasMapHelper, member_var_map_u_long_long_inner_alias_map_helper);
        }
        CompleteStructType struct_type_MapULongLongInnerAliasMapHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongLongInnerAliasMapHelper, header_MapULongLongInnerAliasMapHelper, member_seq_MapULongLongInnerAliasMapHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongLongInnerAliasMapHelper, type_name_MapULongLongInnerAliasMapHelper.to_string(), type_ids_MapULongLongInnerAliasMapHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongLongInnerAliasMapHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongLongInnerUnionHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapULongLongInnerUnionHelper)
{

    ReturnCode_t return_code_MapULongLongInnerUnionHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongLongInnerUnionHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongLongInnerUnionHelper", type_ids_MapULongLongInnerUnionHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongLongInnerUnionHelper)
    {
        StructTypeFlag struct_flags_MapULongLongInnerUnionHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongLongInnerUnionHelper = "MapULongLongInnerUnionHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongLongInnerUnionHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongLongInnerUnionHelper;
        CompleteTypeDetail detail_MapULongLongInnerUnionHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongLongInnerUnionHelper, ann_custom_MapULongLongInnerUnionHelper, type_name_MapULongLongInnerUnionHelper.to_string());
        CompleteStructHeader header_MapULongLongInnerUnionHelper;
        header_MapULongLongInnerUnionHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongLongInnerUnionHelper);
        CompleteStructMemberSeq member_seq_MapULongLongInnerUnionHelper;
        {
            TypeIdentifierPair type_ids_var_map_u_long_long_inner_union_helper;
            ReturnCode_t return_code_var_map_u_long_long_inner_union_helper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_u_long_long_inner_union_helper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint64_t_InnerUnionHelper_unbounded", type_ids_var_map_u_long_long_inner_union_helper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_inner_union_helper)
            {
                return_code_var_map_u_long_long_inner_union_helper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerUnionHelper", type_ids_var_map_u_long_long_inner_union_helper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_inner_union_helper)
                {
                ::register_InnerUnionHelper_type_identifier(type_ids_var_map_u_long_long_inner_union_helper);
                }
                bool element_identifier_anonymous_map_uint64_t_InnerUnionHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint64_t_InnerUnionHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_inner_union_helper, element_identifier_anonymous_map_uint64_t_InnerUnionHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint64_t_InnerUnionHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_InnerUnionHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_u_long_long_inner_union_helper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_u_long_long_inner_union_helper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_inner_union_helper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint64_t_InnerUnionHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint64_t_InnerUnionHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_inner_union_helper, key_identifier_anonymous_map_uint64_t_InnerUnionHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint64_t_InnerUnionHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_InnerUnionHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint64_t_InnerUnionHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint64_t_InnerUnionHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerUnionHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint64_t_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerUnionHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint64_t_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerUnionHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint64_t_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerUnionHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint64_t_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerUnionHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint64_t_InnerUnionHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerUnionHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerUnionHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint64_t_InnerUnionHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerUnionHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerUnionHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint64_t_InnerUnionHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint64_t_InnerUnionHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint64_t_InnerUnionHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint64_t_InnerUnionHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint64_t_InnerUnionHelper_unbounded, element_flags_anonymous_map_uint64_t_InnerUnionHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint64_t_InnerUnionHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint64_t_InnerUnionHelper_unbounded), key_flags_anonymous_map_uint64_t_InnerUnionHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint64_t_InnerUnionHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint64_t_InnerUnionHelper_unbounded", type_ids_var_map_u_long_long_inner_union_helper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint64_t_InnerUnionHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_u_long_long_inner_union_helper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_u_long_long_inner_union_helper = 0x00000000;
            bool common_var_map_u_long_long_inner_union_helper_ec {false};
            CommonStructMember common_var_map_u_long_long_inner_union_helper {TypeObjectUtils::build_common_struct_member(member_id_var_map_u_long_long_inner_union_helper, member_flags_var_map_u_long_long_inner_union_helper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_inner_union_helper, common_var_map_u_long_long_inner_union_helper_ec))};
            if (!common_var_map_u_long_long_inner_union_helper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_u_long_long_inner_union_helper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_u_long_long_inner_union_helper = "var_map_u_long_long_inner_union_helper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_u_long_long_inner_union_helper;
            ann_custom_MapULongLongInnerUnionHelper.reset();
            CompleteMemberDetail detail_var_map_u_long_long_inner_union_helper = TypeObjectUtils::build_complete_member_detail(name_var_map_u_long_long_inner_union_helper, member_ann_builtin_var_map_u_long_long_inner_union_helper, ann_custom_MapULongLongInnerUnionHelper);
            CompleteStructMember member_var_map_u_long_long_inner_union_helper = TypeObjectUtils::build_complete_struct_member(common_var_map_u_long_long_inner_union_helper, detail_var_map_u_long_long_inner_union_helper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongLongInnerUnionHelper, member_var_map_u_long_long_inner_union_helper);
        }
        CompleteStructType struct_type_MapULongLongInnerUnionHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongLongInnerUnionHelper, header_MapULongLongInnerUnionHelper, member_seq_MapULongLongInnerUnionHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongLongInnerUnionHelper, type_name_MapULongLongInnerUnionHelper.to_string(), type_ids_MapULongLongInnerUnionHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongLongInnerUnionHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongLongInnerStructureHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapULongLongInnerStructureHelper)
{

    ReturnCode_t return_code_MapULongLongInnerStructureHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongLongInnerStructureHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongLongInnerStructureHelper", type_ids_MapULongLongInnerStructureHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongLongInnerStructureHelper)
    {
        StructTypeFlag struct_flags_MapULongLongInnerStructureHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongLongInnerStructureHelper = "MapULongLongInnerStructureHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongLongInnerStructureHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongLongInnerStructureHelper;
        CompleteTypeDetail detail_MapULongLongInnerStructureHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongLongInnerStructureHelper, ann_custom_MapULongLongInnerStructureHelper, type_name_MapULongLongInnerStructureHelper.to_string());
        CompleteStructHeader header_MapULongLongInnerStructureHelper;
        header_MapULongLongInnerStructureHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongLongInnerStructureHelper);
        CompleteStructMemberSeq member_seq_MapULongLongInnerStructureHelper;
        {
            TypeIdentifierPair type_ids_var_map_u_long_long_inner_structure_helper;
            ReturnCode_t return_code_var_map_u_long_long_inner_structure_helper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_u_long_long_inner_structure_helper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint64_t_InnerStructureHelper_unbounded", type_ids_var_map_u_long_long_inner_structure_helper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_inner_structure_helper)
            {
                return_code_var_map_u_long_long_inner_structure_helper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerStructureHelper", type_ids_var_map_u_long_long_inner_structure_helper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_inner_structure_helper)
                {
                ::register_InnerStructureHelper_type_identifier(type_ids_var_map_u_long_long_inner_structure_helper);
                }
                bool element_identifier_anonymous_map_uint64_t_InnerStructureHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint64_t_InnerStructureHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_inner_structure_helper, element_identifier_anonymous_map_uint64_t_InnerStructureHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint64_t_InnerStructureHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_InnerStructureHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_u_long_long_inner_structure_helper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_u_long_long_inner_structure_helper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_inner_structure_helper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint64_t_InnerStructureHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint64_t_InnerStructureHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_inner_structure_helper, key_identifier_anonymous_map_uint64_t_InnerStructureHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint64_t_InnerStructureHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_InnerStructureHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint64_t_InnerStructureHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint64_t_InnerStructureHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerStructureHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint64_t_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerStructureHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint64_t_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerStructureHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint64_t_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerStructureHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint64_t_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerStructureHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint64_t_InnerStructureHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerStructureHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerStructureHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint64_t_InnerStructureHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerStructureHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerStructureHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint64_t_InnerStructureHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint64_t_InnerStructureHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint64_t_InnerStructureHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint64_t_InnerStructureHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint64_t_InnerStructureHelper_unbounded, element_flags_anonymous_map_uint64_t_InnerStructureHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint64_t_InnerStructureHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint64_t_InnerStructureHelper_unbounded), key_flags_anonymous_map_uint64_t_InnerStructureHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint64_t_InnerStructureHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint64_t_InnerStructureHelper_unbounded", type_ids_var_map_u_long_long_inner_structure_helper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint64_t_InnerStructureHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_u_long_long_inner_structure_helper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_u_long_long_inner_structure_helper = 0x00000000;
            bool common_var_map_u_long_long_inner_structure_helper_ec {false};
            CommonStructMember common_var_map_u_long_long_inner_structure_helper {TypeObjectUtils::build_common_struct_member(member_id_var_map_u_long_long_inner_structure_helper, member_flags_var_map_u_long_long_inner_structure_helper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_inner_structure_helper, common_var_map_u_long_long_inner_structure_helper_ec))};
            if (!common_var_map_u_long_long_inner_structure_helper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_u_long_long_inner_structure_helper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_u_long_long_inner_structure_helper = "var_map_u_long_long_inner_structure_helper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_u_long_long_inner_structure_helper;
            ann_custom_MapULongLongInnerStructureHelper.reset();
            CompleteMemberDetail detail_var_map_u_long_long_inner_structure_helper = TypeObjectUtils::build_complete_member_detail(name_var_map_u_long_long_inner_structure_helper, member_ann_builtin_var_map_u_long_long_inner_structure_helper, ann_custom_MapULongLongInnerStructureHelper);
            CompleteStructMember member_var_map_u_long_long_inner_structure_helper = TypeObjectUtils::build_complete_struct_member(common_var_map_u_long_long_inner_structure_helper, detail_var_map_u_long_long_inner_structure_helper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongLongInnerStructureHelper, member_var_map_u_long_long_inner_structure_helper);
        }
        CompleteStructType struct_type_MapULongLongInnerStructureHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongLongInnerStructureHelper, header_MapULongLongInnerStructureHelper, member_seq_MapULongLongInnerStructureHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongLongInnerStructureHelper, type_name_MapULongLongInnerStructureHelper.to_string(), type_ids_MapULongLongInnerStructureHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongLongInnerStructureHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapULongLongInnerBitsetHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapULongLongInnerBitsetHelper)
{

    ReturnCode_t return_code_MapULongLongInnerBitsetHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapULongLongInnerBitsetHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapULongLongInnerBitsetHelper", type_ids_MapULongLongInnerBitsetHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapULongLongInnerBitsetHelper)
    {
        StructTypeFlag struct_flags_MapULongLongInnerBitsetHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapULongLongInnerBitsetHelper = "MapULongLongInnerBitsetHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapULongLongInnerBitsetHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapULongLongInnerBitsetHelper;
        CompleteTypeDetail detail_MapULongLongInnerBitsetHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapULongLongInnerBitsetHelper, ann_custom_MapULongLongInnerBitsetHelper, type_name_MapULongLongInnerBitsetHelper.to_string());
        CompleteStructHeader header_MapULongLongInnerBitsetHelper;
        header_MapULongLongInnerBitsetHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapULongLongInnerBitsetHelper);
        CompleteStructMemberSeq member_seq_MapULongLongInnerBitsetHelper;
        {
            TypeIdentifierPair type_ids_var_map_u_long_long_inner_bitset_helper;
            ReturnCode_t return_code_var_map_u_long_long_inner_bitset_helper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_u_long_long_inner_bitset_helper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint64_t_InnerBitsetHelper_unbounded", type_ids_var_map_u_long_long_inner_bitset_helper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_inner_bitset_helper)
            {
                return_code_var_map_u_long_long_inner_bitset_helper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerBitsetHelper", type_ids_var_map_u_long_long_inner_bitset_helper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_inner_bitset_helper)
                {
                ::register_InnerBitsetHelper_type_identifier(type_ids_var_map_u_long_long_inner_bitset_helper);
                }
                bool element_identifier_anonymous_map_uint64_t_InnerBitsetHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_uint64_t_InnerBitsetHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_inner_bitset_helper, element_identifier_anonymous_map_uint64_t_InnerBitsetHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_uint64_t_InnerBitsetHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_InnerBitsetHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_u_long_long_inner_bitset_helper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_u_long_long_inner_bitset_helper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_u_long_long_inner_bitset_helper)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_uint64_t_InnerBitsetHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_uint64_t_InnerBitsetHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_inner_bitset_helper, key_identifier_anonymous_map_uint64_t_InnerBitsetHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_uint64_t_InnerBitsetHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint64_t_InnerBitsetHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint64_t_InnerBitsetHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_uint64_t_InnerBitsetHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerBitsetHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint64_t_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerBitsetHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint64_t_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerBitsetHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint64_t_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerBitsetHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint64_t_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerBitsetHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint64_t_InnerBitsetHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerBitsetHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerBitsetHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint64_t_InnerBitsetHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerBitsetHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_uint64_t_InnerBitsetHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_uint64_t_InnerBitsetHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint64_t_InnerBitsetHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_uint64_t_InnerBitsetHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_uint64_t_InnerBitsetHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint64_t_InnerBitsetHelper_unbounded, element_flags_anonymous_map_uint64_t_InnerBitsetHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint64_t_InnerBitsetHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint64_t_InnerBitsetHelper_unbounded), key_flags_anonymous_map_uint64_t_InnerBitsetHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint64_t_InnerBitsetHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint64_t_InnerBitsetHelper_unbounded", type_ids_var_map_u_long_long_inner_bitset_helper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint64_t_InnerBitsetHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_u_long_long_inner_bitset_helper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_u_long_long_inner_bitset_helper = 0x00000000;
            bool common_var_map_u_long_long_inner_bitset_helper_ec {false};
            CommonStructMember common_var_map_u_long_long_inner_bitset_helper {TypeObjectUtils::build_common_struct_member(member_id_var_map_u_long_long_inner_bitset_helper, member_flags_var_map_u_long_long_inner_bitset_helper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_u_long_long_inner_bitset_helper, common_var_map_u_long_long_inner_bitset_helper_ec))};
            if (!common_var_map_u_long_long_inner_bitset_helper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_u_long_long_inner_bitset_helper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_u_long_long_inner_bitset_helper = "var_map_u_long_long_inner_bitset_helper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_u_long_long_inner_bitset_helper;
            ann_custom_MapULongLongInnerBitsetHelper.reset();
            CompleteMemberDetail detail_var_map_u_long_long_inner_bitset_helper = TypeObjectUtils::build_complete_member_detail(name_var_map_u_long_long_inner_bitset_helper, member_ann_builtin_var_map_u_long_long_inner_bitset_helper, ann_custom_MapULongLongInnerBitsetHelper);
            CompleteStructMember member_var_map_u_long_long_inner_bitset_helper = TypeObjectUtils::build_complete_struct_member(common_var_map_u_long_long_inner_bitset_helper, detail_var_map_u_long_long_inner_bitset_helper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapULongLongInnerBitsetHelper, member_var_map_u_long_long_inner_bitset_helper);
        }
        CompleteStructType struct_type_MapULongLongInnerBitsetHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapULongLongInnerBitsetHelper, header_MapULongLongInnerBitsetHelper, member_seq_MapULongLongInnerBitsetHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapULongLongInnerBitsetHelper, type_name_MapULongLongInnerBitsetHelper.to_string(), type_ids_MapULongLongInnerBitsetHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapULongLongInnerBitsetHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapStringShort_type_identifier(
        TypeIdentifierPair& type_ids_MapStringShort)
{

    ReturnCode_t return_code_MapStringShort {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapStringShort =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapStringShort", type_ids_MapStringShort);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapStringShort)
    {
        StructTypeFlag struct_flags_MapStringShort = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapStringShort = "MapStringShort";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapStringShort;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapStringShort;
        CompleteTypeDetail detail_MapStringShort = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapStringShort, ann_custom_MapStringShort, type_name_MapStringShort.to_string());
        CompleteStructHeader header_MapStringShort;
        header_MapStringShort = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapStringShort);
        CompleteStructMemberSeq member_seq_MapStringShort;
        {
            TypeIdentifierPair type_ids_var_map_string_short;
            ReturnCode_t return_code_var_map_string_short {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_string_short =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_unbounded_int16_t_unbounded", type_ids_var_map_string_short);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_short)
            {
                return_code_var_map_string_short =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_string_short);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_short)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_string_unbounded_int16_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_int16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_short, element_identifier_anonymous_map_anonymous_string_unbounded_int16_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_unbounded_int16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_int16_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_string_short =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_string_short);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_short)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_string_short))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_string_unbounded_int16_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_int16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_short, key_identifier_anonymous_map_anonymous_string_unbounded_int16_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_unbounded_int16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_int16_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_int16_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_int16_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int16_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int16_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int16_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int16_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int16_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_int16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int16_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int16_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_int16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int16_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int16_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_unbounded_int16_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_int16_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_int16_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_int16_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_int16_t_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_int16_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_int16_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_int16_t_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_int16_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_int16_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_int16_t_unbounded", type_ids_var_map_string_short))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_unbounded_int16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_string_short = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_string_short = 0x00000000;
            bool common_var_map_string_short_ec {false};
            CommonStructMember common_var_map_string_short {TypeObjectUtils::build_common_struct_member(member_id_var_map_string_short, member_flags_var_map_string_short, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_short, common_var_map_string_short_ec))};
            if (!common_var_map_string_short_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_string_short member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_string_short = "var_map_string_short";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_string_short;
            ann_custom_MapStringShort.reset();
            CompleteMemberDetail detail_var_map_string_short = TypeObjectUtils::build_complete_member_detail(name_var_map_string_short, member_ann_builtin_var_map_string_short, ann_custom_MapStringShort);
            CompleteStructMember member_var_map_string_short = TypeObjectUtils::build_complete_struct_member(common_var_map_string_short, detail_var_map_string_short);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapStringShort, member_var_map_string_short);
        }
        CompleteStructType struct_type_MapStringShort = TypeObjectUtils::build_complete_struct_type(struct_flags_MapStringShort, header_MapStringShort, member_seq_MapStringShort);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapStringShort, type_name_MapStringShort.to_string(), type_ids_MapStringShort))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapStringShort already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapStringUShort_type_identifier(
        TypeIdentifierPair& type_ids_MapStringUShort)
{

    ReturnCode_t return_code_MapStringUShort {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapStringUShort =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapStringUShort", type_ids_MapStringUShort);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapStringUShort)
    {
        StructTypeFlag struct_flags_MapStringUShort = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapStringUShort = "MapStringUShort";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapStringUShort;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapStringUShort;
        CompleteTypeDetail detail_MapStringUShort = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapStringUShort, ann_custom_MapStringUShort, type_name_MapStringUShort.to_string());
        CompleteStructHeader header_MapStringUShort;
        header_MapStringUShort = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapStringUShort);
        CompleteStructMemberSeq member_seq_MapStringUShort;
        {
            TypeIdentifierPair type_ids_var_map_string_ushort;
            ReturnCode_t return_code_var_map_string_ushort {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_string_ushort =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_unbounded_uint16_t_unbounded", type_ids_var_map_string_ushort);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_ushort)
            {
                return_code_var_map_string_ushort =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_string_ushort);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_ushort)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_ushort, element_identifier_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_uint16_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_string_ushort =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_string_ushort);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_ushort)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_string_ushort))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_ushort, key_identifier_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_uint16_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_uint16_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_uint16_t_unbounded", type_ids_var_map_string_ushort))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_unbounded_uint16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_string_ushort = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_string_ushort = 0x00000000;
            bool common_var_map_string_ushort_ec {false};
            CommonStructMember common_var_map_string_ushort {TypeObjectUtils::build_common_struct_member(member_id_var_map_string_ushort, member_flags_var_map_string_ushort, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_ushort, common_var_map_string_ushort_ec))};
            if (!common_var_map_string_ushort_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_string_ushort member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_string_ushort = "var_map_string_ushort";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_string_ushort;
            ann_custom_MapStringUShort.reset();
            CompleteMemberDetail detail_var_map_string_ushort = TypeObjectUtils::build_complete_member_detail(name_var_map_string_ushort, member_ann_builtin_var_map_string_ushort, ann_custom_MapStringUShort);
            CompleteStructMember member_var_map_string_ushort = TypeObjectUtils::build_complete_struct_member(common_var_map_string_ushort, detail_var_map_string_ushort);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapStringUShort, member_var_map_string_ushort);
        }
        CompleteStructType struct_type_MapStringUShort = TypeObjectUtils::build_complete_struct_type(struct_flags_MapStringUShort, header_MapStringUShort, member_seq_MapStringUShort);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapStringUShort, type_name_MapStringUShort.to_string(), type_ids_MapStringUShort))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapStringUShort already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapStringLong_type_identifier(
        TypeIdentifierPair& type_ids_MapStringLong)
{

    ReturnCode_t return_code_MapStringLong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapStringLong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapStringLong", type_ids_MapStringLong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapStringLong)
    {
        StructTypeFlag struct_flags_MapStringLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapStringLong = "MapStringLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapStringLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapStringLong;
        CompleteTypeDetail detail_MapStringLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapStringLong, ann_custom_MapStringLong, type_name_MapStringLong.to_string());
        CompleteStructHeader header_MapStringLong;
        header_MapStringLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapStringLong);
        CompleteStructMemberSeq member_seq_MapStringLong;
        {
            TypeIdentifierPair type_ids_var_map_string_long;
            ReturnCode_t return_code_var_map_string_long {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_string_long =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_unbounded_int32_t_unbounded", type_ids_var_map_string_long);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_long)
            {
                return_code_var_map_string_long =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_string_long);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_long)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_long, element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_int32_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_string_long =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_string_long);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_long)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_string_long))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_string_unbounded_int32_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_int32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_long, key_identifier_anonymous_map_anonymous_string_unbounded_int32_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_unbounded_int32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_int32_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_int32_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_int32_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_unbounded_int32_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_int32_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_int32_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_int32_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_int32_t_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_int32_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_int32_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_int32_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_int32_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_int32_t_unbounded", type_ids_var_map_string_long))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_unbounded_int32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_string_long = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_string_long = 0x00000000;
            bool common_var_map_string_long_ec {false};
            CommonStructMember common_var_map_string_long {TypeObjectUtils::build_common_struct_member(member_id_var_map_string_long, member_flags_var_map_string_long, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_long, common_var_map_string_long_ec))};
            if (!common_var_map_string_long_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_string_long member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_string_long = "var_map_string_long";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_string_long;
            ann_custom_MapStringLong.reset();
            CompleteMemberDetail detail_var_map_string_long = TypeObjectUtils::build_complete_member_detail(name_var_map_string_long, member_ann_builtin_var_map_string_long, ann_custom_MapStringLong);
            CompleteStructMember member_var_map_string_long = TypeObjectUtils::build_complete_struct_member(common_var_map_string_long, detail_var_map_string_long);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapStringLong, member_var_map_string_long);
        }
        CompleteStructType struct_type_MapStringLong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapStringLong, header_MapStringLong, member_seq_MapStringLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapStringLong, type_name_MapStringLong.to_string(), type_ids_MapStringLong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapStringLong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapStringULong_type_identifier(
        TypeIdentifierPair& type_ids_MapStringULong)
{

    ReturnCode_t return_code_MapStringULong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapStringULong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapStringULong", type_ids_MapStringULong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapStringULong)
    {
        StructTypeFlag struct_flags_MapStringULong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapStringULong = "MapStringULong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapStringULong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapStringULong;
        CompleteTypeDetail detail_MapStringULong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapStringULong, ann_custom_MapStringULong, type_name_MapStringULong.to_string());
        CompleteStructHeader header_MapStringULong;
        header_MapStringULong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapStringULong);
        CompleteStructMemberSeq member_seq_MapStringULong;
        {
            TypeIdentifierPair type_ids_var_map_string_ulong;
            ReturnCode_t return_code_var_map_string_ulong {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_string_ulong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_unbounded_uint32_t_unbounded", type_ids_var_map_string_ulong);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_ulong)
            {
                return_code_var_map_string_ulong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_string_ulong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_ulong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_ulong, element_identifier_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_uint32_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_string_ulong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_string_ulong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_ulong)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_string_ulong))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_ulong, key_identifier_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_uint32_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_uint32_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_uint32_t_unbounded", type_ids_var_map_string_ulong))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_unbounded_uint32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_string_ulong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_string_ulong = 0x00000000;
            bool common_var_map_string_ulong_ec {false};
            CommonStructMember common_var_map_string_ulong {TypeObjectUtils::build_common_struct_member(member_id_var_map_string_ulong, member_flags_var_map_string_ulong, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_ulong, common_var_map_string_ulong_ec))};
            if (!common_var_map_string_ulong_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_string_ulong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_string_ulong = "var_map_string_ulong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_string_ulong;
            ann_custom_MapStringULong.reset();
            CompleteMemberDetail detail_var_map_string_ulong = TypeObjectUtils::build_complete_member_detail(name_var_map_string_ulong, member_ann_builtin_var_map_string_ulong, ann_custom_MapStringULong);
            CompleteStructMember member_var_map_string_ulong = TypeObjectUtils::build_complete_struct_member(common_var_map_string_ulong, detail_var_map_string_ulong);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapStringULong, member_var_map_string_ulong);
        }
        CompleteStructType struct_type_MapStringULong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapStringULong, header_MapStringULong, member_seq_MapStringULong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapStringULong, type_name_MapStringULong.to_string(), type_ids_MapStringULong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapStringULong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapStringLongLong_type_identifier(
        TypeIdentifierPair& type_ids_MapStringLongLong)
{

    ReturnCode_t return_code_MapStringLongLong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapStringLongLong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapStringLongLong", type_ids_MapStringLongLong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapStringLongLong)
    {
        StructTypeFlag struct_flags_MapStringLongLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapStringLongLong = "MapStringLongLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapStringLongLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapStringLongLong;
        CompleteTypeDetail detail_MapStringLongLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapStringLongLong, ann_custom_MapStringLongLong, type_name_MapStringLongLong.to_string());
        CompleteStructHeader header_MapStringLongLong;
        header_MapStringLongLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapStringLongLong);
        CompleteStructMemberSeq member_seq_MapStringLongLong;
        {
            TypeIdentifierPair type_ids_var_map_string_longlong;
            ReturnCode_t return_code_var_map_string_longlong {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_string_longlong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_unbounded_int64_t_unbounded", type_ids_var_map_string_longlong);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_longlong)
            {
                return_code_var_map_string_longlong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_string_longlong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_longlong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_string_unbounded_int64_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_int64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_longlong, element_identifier_anonymous_map_anonymous_string_unbounded_int64_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_unbounded_int64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_int64_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_string_longlong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_string_longlong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_longlong)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_string_longlong))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_string_unbounded_int64_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_int64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_longlong, key_identifier_anonymous_map_anonymous_string_unbounded_int64_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_unbounded_int64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_int64_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_int64_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_int64_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int64_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int64_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int64_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int64_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int64_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_int64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int64_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int64_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_int64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int64_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int64_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_unbounded_int64_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_int64_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_int64_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_int64_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_int64_t_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_int64_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_int64_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_int64_t_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_int64_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_int64_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_int64_t_unbounded", type_ids_var_map_string_longlong))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_unbounded_int64_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_string_longlong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_string_longlong = 0x00000000;
            bool common_var_map_string_longlong_ec {false};
            CommonStructMember common_var_map_string_longlong {TypeObjectUtils::build_common_struct_member(member_id_var_map_string_longlong, member_flags_var_map_string_longlong, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_longlong, common_var_map_string_longlong_ec))};
            if (!common_var_map_string_longlong_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_string_longlong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_string_longlong = "var_map_string_longlong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_string_longlong;
            ann_custom_MapStringLongLong.reset();
            CompleteMemberDetail detail_var_map_string_longlong = TypeObjectUtils::build_complete_member_detail(name_var_map_string_longlong, member_ann_builtin_var_map_string_longlong, ann_custom_MapStringLongLong);
            CompleteStructMember member_var_map_string_longlong = TypeObjectUtils::build_complete_struct_member(common_var_map_string_longlong, detail_var_map_string_longlong);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapStringLongLong, member_var_map_string_longlong);
        }
        CompleteStructType struct_type_MapStringLongLong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapStringLongLong, header_MapStringLongLong, member_seq_MapStringLongLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapStringLongLong, type_name_MapStringLongLong.to_string(), type_ids_MapStringLongLong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapStringLongLong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapStringULongLong_type_identifier(
        TypeIdentifierPair& type_ids_MapStringULongLong)
{

    ReturnCode_t return_code_MapStringULongLong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapStringULongLong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapStringULongLong", type_ids_MapStringULongLong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapStringULongLong)
    {
        StructTypeFlag struct_flags_MapStringULongLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapStringULongLong = "MapStringULongLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapStringULongLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapStringULongLong;
        CompleteTypeDetail detail_MapStringULongLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapStringULongLong, ann_custom_MapStringULongLong, type_name_MapStringULongLong.to_string());
        CompleteStructHeader header_MapStringULongLong;
        header_MapStringULongLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapStringULongLong);
        CompleteStructMemberSeq member_seq_MapStringULongLong;
        {
            TypeIdentifierPair type_ids_var_map_string_ulonglong;
            ReturnCode_t return_code_var_map_string_ulonglong {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_string_ulonglong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_unbounded_uint64_t_unbounded", type_ids_var_map_string_ulonglong);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_ulonglong)
            {
                return_code_var_map_string_ulonglong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_string_ulonglong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_ulonglong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_ulonglong, element_identifier_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_uint64_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_string_ulonglong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_string_ulonglong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_ulonglong)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_string_ulonglong))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_ulonglong, key_identifier_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_uint64_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_uint64_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_uint64_t_unbounded", type_ids_var_map_string_ulonglong))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_unbounded_uint64_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_string_ulonglong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_string_ulonglong = 0x00000000;
            bool common_var_map_string_ulonglong_ec {false};
            CommonStructMember common_var_map_string_ulonglong {TypeObjectUtils::build_common_struct_member(member_id_var_map_string_ulonglong, member_flags_var_map_string_ulonglong, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_ulonglong, common_var_map_string_ulonglong_ec))};
            if (!common_var_map_string_ulonglong_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_string_ulonglong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_string_ulonglong = "var_map_string_ulonglong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_string_ulonglong;
            ann_custom_MapStringULongLong.reset();
            CompleteMemberDetail detail_var_map_string_ulonglong = TypeObjectUtils::build_complete_member_detail(name_var_map_string_ulonglong, member_ann_builtin_var_map_string_ulonglong, ann_custom_MapStringULongLong);
            CompleteStructMember member_var_map_string_ulonglong = TypeObjectUtils::build_complete_struct_member(common_var_map_string_ulonglong, detail_var_map_string_ulonglong);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapStringULongLong, member_var_map_string_ulonglong);
        }
        CompleteStructType struct_type_MapStringULongLong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapStringULongLong, header_MapStringULongLong, member_seq_MapStringULongLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapStringULongLong, type_name_MapStringULongLong.to_string(), type_ids_MapStringULongLong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapStringULongLong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapStringFloat_type_identifier(
        TypeIdentifierPair& type_ids_MapStringFloat)
{

    ReturnCode_t return_code_MapStringFloat {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapStringFloat =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapStringFloat", type_ids_MapStringFloat);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapStringFloat)
    {
        StructTypeFlag struct_flags_MapStringFloat = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapStringFloat = "MapStringFloat";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapStringFloat;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapStringFloat;
        CompleteTypeDetail detail_MapStringFloat = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapStringFloat, ann_custom_MapStringFloat, type_name_MapStringFloat.to_string());
        CompleteStructHeader header_MapStringFloat;
        header_MapStringFloat = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapStringFloat);
        CompleteStructMemberSeq member_seq_MapStringFloat;
        {
            TypeIdentifierPair type_ids_var_map_string_float;
            ReturnCode_t return_code_var_map_string_float {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_string_float =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_unbounded_float_unbounded", type_ids_var_map_string_float);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_float)
            {
                return_code_var_map_string_float =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_float", type_ids_var_map_string_float);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_float)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_string_unbounded_float_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_float_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_float, element_identifier_anonymous_map_anonymous_string_unbounded_float_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_unbounded_float_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_float_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_string_float =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_string_float);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_float)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_string_float))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_string_unbounded_float_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_float_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_float, key_identifier_anonymous_map_anonymous_string_unbounded_float_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_unbounded_float_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_float_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_float_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_float_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_float_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_float_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_float_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_float_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_float_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_float_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_float_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_float_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_float_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_float_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_float_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_unbounded_float_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_float_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_float_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_float_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_float_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_float_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_float_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_float_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_float_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_float_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_float_unbounded", type_ids_var_map_string_float))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_unbounded_float_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_string_float = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_string_float = 0x00000000;
            bool common_var_map_string_float_ec {false};
            CommonStructMember common_var_map_string_float {TypeObjectUtils::build_common_struct_member(member_id_var_map_string_float, member_flags_var_map_string_float, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_float, common_var_map_string_float_ec))};
            if (!common_var_map_string_float_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_string_float member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_string_float = "var_map_string_float";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_string_float;
            ann_custom_MapStringFloat.reset();
            CompleteMemberDetail detail_var_map_string_float = TypeObjectUtils::build_complete_member_detail(name_var_map_string_float, member_ann_builtin_var_map_string_float, ann_custom_MapStringFloat);
            CompleteStructMember member_var_map_string_float = TypeObjectUtils::build_complete_struct_member(common_var_map_string_float, detail_var_map_string_float);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapStringFloat, member_var_map_string_float);
        }
        CompleteStructType struct_type_MapStringFloat = TypeObjectUtils::build_complete_struct_type(struct_flags_MapStringFloat, header_MapStringFloat, member_seq_MapStringFloat);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapStringFloat, type_name_MapStringFloat.to_string(), type_ids_MapStringFloat))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapStringFloat already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapStringDouble_type_identifier(
        TypeIdentifierPair& type_ids_MapStringDouble)
{

    ReturnCode_t return_code_MapStringDouble {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapStringDouble =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapStringDouble", type_ids_MapStringDouble);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapStringDouble)
    {
        StructTypeFlag struct_flags_MapStringDouble = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapStringDouble = "MapStringDouble";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapStringDouble;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapStringDouble;
        CompleteTypeDetail detail_MapStringDouble = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapStringDouble, ann_custom_MapStringDouble, type_name_MapStringDouble.to_string());
        CompleteStructHeader header_MapStringDouble;
        header_MapStringDouble = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapStringDouble);
        CompleteStructMemberSeq member_seq_MapStringDouble;
        {
            TypeIdentifierPair type_ids_var_map_string_double;
            ReturnCode_t return_code_var_map_string_double {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_string_double =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_unbounded_double_unbounded", type_ids_var_map_string_double);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_double)
            {
                return_code_var_map_string_double =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_double", type_ids_var_map_string_double);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_double)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_string_unbounded_double_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_double_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_double, element_identifier_anonymous_map_anonymous_string_unbounded_double_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_unbounded_double_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_double_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_string_double =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_string_double);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_double)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_string_double))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_string_unbounded_double_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_double_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_double, key_identifier_anonymous_map_anonymous_string_unbounded_double_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_unbounded_double_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_double_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_double_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_double_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_double_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_double_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_double_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_double_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_double_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_double_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_double_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_double_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_double_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_double_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_double_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_unbounded_double_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_double_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_double_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_double_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_double_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_double_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_double_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_double_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_double_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_double_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_double_unbounded", type_ids_var_map_string_double))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_unbounded_double_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_string_double = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_string_double = 0x00000000;
            bool common_var_map_string_double_ec {false};
            CommonStructMember common_var_map_string_double {TypeObjectUtils::build_common_struct_member(member_id_var_map_string_double, member_flags_var_map_string_double, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_double, common_var_map_string_double_ec))};
            if (!common_var_map_string_double_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_string_double member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_string_double = "var_map_string_double";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_string_double;
            ann_custom_MapStringDouble.reset();
            CompleteMemberDetail detail_var_map_string_double = TypeObjectUtils::build_complete_member_detail(name_var_map_string_double, member_ann_builtin_var_map_string_double, ann_custom_MapStringDouble);
            CompleteStructMember member_var_map_string_double = TypeObjectUtils::build_complete_struct_member(common_var_map_string_double, detail_var_map_string_double);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapStringDouble, member_var_map_string_double);
        }
        CompleteStructType struct_type_MapStringDouble = TypeObjectUtils::build_complete_struct_type(struct_flags_MapStringDouble, header_MapStringDouble, member_seq_MapStringDouble);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapStringDouble, type_name_MapStringDouble.to_string(), type_ids_MapStringDouble))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapStringDouble already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapStringLongDouble_type_identifier(
        TypeIdentifierPair& type_ids_MapStringLongDouble)
{

    ReturnCode_t return_code_MapStringLongDouble {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapStringLongDouble =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapStringLongDouble", type_ids_MapStringLongDouble);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapStringLongDouble)
    {
        StructTypeFlag struct_flags_MapStringLongDouble = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapStringLongDouble = "MapStringLongDouble";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapStringLongDouble;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapStringLongDouble;
        CompleteTypeDetail detail_MapStringLongDouble = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapStringLongDouble, ann_custom_MapStringLongDouble, type_name_MapStringLongDouble.to_string());
        CompleteStructHeader header_MapStringLongDouble;
        header_MapStringLongDouble = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapStringLongDouble);
        CompleteStructMemberSeq member_seq_MapStringLongDouble;
        {
            TypeIdentifierPair type_ids_var_map_string_longdouble;
            ReturnCode_t return_code_var_map_string_longdouble {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_string_longdouble =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_unbounded_longdouble_unbounded", type_ids_var_map_string_longdouble);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_longdouble)
            {
                return_code_var_map_string_longdouble =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_longdouble", type_ids_var_map_string_longdouble);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_longdouble)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_string_unbounded_longdouble_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_longdouble_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_longdouble, element_identifier_anonymous_map_anonymous_string_unbounded_longdouble_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_unbounded_longdouble_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_longdouble_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_string_longdouble =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_string_longdouble);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_longdouble)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_string_longdouble))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_string_unbounded_longdouble_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_longdouble_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_longdouble, key_identifier_anonymous_map_anonymous_string_unbounded_longdouble_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_unbounded_longdouble_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_longdouble_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_longdouble_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_longdouble_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_longdouble_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_longdouble_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_longdouble_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_longdouble_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_longdouble_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_longdouble_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_longdouble_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_longdouble_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_longdouble_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_longdouble_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_longdouble_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_unbounded_longdouble_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_longdouble_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_longdouble_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_longdouble_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_longdouble_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_longdouble_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_longdouble_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_longdouble_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_longdouble_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_longdouble_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_longdouble_unbounded", type_ids_var_map_string_longdouble))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_unbounded_longdouble_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_string_longdouble = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_string_longdouble = 0x00000000;
            bool common_var_map_string_longdouble_ec {false};
            CommonStructMember common_var_map_string_longdouble {TypeObjectUtils::build_common_struct_member(member_id_var_map_string_longdouble, member_flags_var_map_string_longdouble, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_longdouble, common_var_map_string_longdouble_ec))};
            if (!common_var_map_string_longdouble_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_string_longdouble member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_string_longdouble = "var_map_string_longdouble";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_string_longdouble;
            ann_custom_MapStringLongDouble.reset();
            CompleteMemberDetail detail_var_map_string_longdouble = TypeObjectUtils::build_complete_member_detail(name_var_map_string_longdouble, member_ann_builtin_var_map_string_longdouble, ann_custom_MapStringLongDouble);
            CompleteStructMember member_var_map_string_longdouble = TypeObjectUtils::build_complete_struct_member(common_var_map_string_longdouble, detail_var_map_string_longdouble);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapStringLongDouble, member_var_map_string_longdouble);
        }
        CompleteStructType struct_type_MapStringLongDouble = TypeObjectUtils::build_complete_struct_type(struct_flags_MapStringLongDouble, header_MapStringLongDouble, member_seq_MapStringLongDouble);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapStringLongDouble, type_name_MapStringLongDouble.to_string(), type_ids_MapStringLongDouble))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapStringLongDouble already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapStringBoolean_type_identifier(
        TypeIdentifierPair& type_ids_MapStringBoolean)
{

    ReturnCode_t return_code_MapStringBoolean {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapStringBoolean =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapStringBoolean", type_ids_MapStringBoolean);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapStringBoolean)
    {
        StructTypeFlag struct_flags_MapStringBoolean = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapStringBoolean = "MapStringBoolean";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapStringBoolean;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapStringBoolean;
        CompleteTypeDetail detail_MapStringBoolean = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapStringBoolean, ann_custom_MapStringBoolean, type_name_MapStringBoolean.to_string());
        CompleteStructHeader header_MapStringBoolean;
        header_MapStringBoolean = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapStringBoolean);
        CompleteStructMemberSeq member_seq_MapStringBoolean;
        {
            TypeIdentifierPair type_ids_var_map_string_boolean;
            ReturnCode_t return_code_var_map_string_boolean {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_string_boolean =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_unbounded_bool_unbounded", type_ids_var_map_string_boolean);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_boolean)
            {
                return_code_var_map_string_boolean =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_bool", type_ids_var_map_string_boolean);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_boolean)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_string_unbounded_bool_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_bool_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_boolean, element_identifier_anonymous_map_anonymous_string_unbounded_bool_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_unbounded_bool_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_bool_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_string_boolean =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_string_boolean);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_boolean)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_string_boolean))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_string_unbounded_bool_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_bool_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_boolean, key_identifier_anonymous_map_anonymous_string_unbounded_bool_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_unbounded_bool_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_bool_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_bool_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_bool_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_bool_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_bool_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_bool_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_bool_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_bool_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_bool_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_bool_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_bool_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_bool_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_bool_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_bool_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_unbounded_bool_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_bool_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_bool_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_bool_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_bool_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_bool_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_bool_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_bool_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_bool_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_bool_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_bool_unbounded", type_ids_var_map_string_boolean))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_unbounded_bool_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_string_boolean = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_string_boolean = 0x00000000;
            bool common_var_map_string_boolean_ec {false};
            CommonStructMember common_var_map_string_boolean {TypeObjectUtils::build_common_struct_member(member_id_var_map_string_boolean, member_flags_var_map_string_boolean, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_boolean, common_var_map_string_boolean_ec))};
            if (!common_var_map_string_boolean_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_string_boolean member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_string_boolean = "var_map_string_boolean";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_string_boolean;
            ann_custom_MapStringBoolean.reset();
            CompleteMemberDetail detail_var_map_string_boolean = TypeObjectUtils::build_complete_member_detail(name_var_map_string_boolean, member_ann_builtin_var_map_string_boolean, ann_custom_MapStringBoolean);
            CompleteStructMember member_var_map_string_boolean = TypeObjectUtils::build_complete_struct_member(common_var_map_string_boolean, detail_var_map_string_boolean);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapStringBoolean, member_var_map_string_boolean);
        }
        CompleteStructType struct_type_MapStringBoolean = TypeObjectUtils::build_complete_struct_type(struct_flags_MapStringBoolean, header_MapStringBoolean, member_seq_MapStringBoolean);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapStringBoolean, type_name_MapStringBoolean.to_string(), type_ids_MapStringBoolean))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapStringBoolean already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapStringOctet_type_identifier(
        TypeIdentifierPair& type_ids_MapStringOctet)
{

    ReturnCode_t return_code_MapStringOctet {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapStringOctet =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapStringOctet", type_ids_MapStringOctet);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapStringOctet)
    {
        StructTypeFlag struct_flags_MapStringOctet = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapStringOctet = "MapStringOctet";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapStringOctet;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapStringOctet;
        CompleteTypeDetail detail_MapStringOctet = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapStringOctet, ann_custom_MapStringOctet, type_name_MapStringOctet.to_string());
        CompleteStructHeader header_MapStringOctet;
        header_MapStringOctet = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapStringOctet);
        CompleteStructMemberSeq member_seq_MapStringOctet;
        {
            TypeIdentifierPair type_ids_var_map_string_octet;
            ReturnCode_t return_code_var_map_string_octet {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_string_octet =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_unbounded_byte_unbounded", type_ids_var_map_string_octet);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_octet)
            {
                return_code_var_map_string_octet =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_byte", type_ids_var_map_string_octet);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_octet)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_string_unbounded_byte_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_byte_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_octet, element_identifier_anonymous_map_anonymous_string_unbounded_byte_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_unbounded_byte_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_byte_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_string_octet =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_string_octet);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_octet)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_string_octet))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_string_unbounded_byte_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_byte_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_octet, key_identifier_anonymous_map_anonymous_string_unbounded_byte_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_unbounded_byte_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_byte_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_byte_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_byte_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_byte_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_byte_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_byte_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_byte_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_byte_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_byte_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_byte_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_byte_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_byte_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_byte_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_byte_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_unbounded_byte_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_byte_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_byte_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_byte_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_byte_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_byte_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_byte_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_byte_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_byte_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_byte_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_byte_unbounded", type_ids_var_map_string_octet))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_unbounded_byte_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_string_octet = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_string_octet = 0x00000000;
            bool common_var_map_string_octet_ec {false};
            CommonStructMember common_var_map_string_octet {TypeObjectUtils::build_common_struct_member(member_id_var_map_string_octet, member_flags_var_map_string_octet, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_octet, common_var_map_string_octet_ec))};
            if (!common_var_map_string_octet_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_string_octet member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_string_octet = "var_map_string_octet";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_string_octet;
            ann_custom_MapStringOctet.reset();
            CompleteMemberDetail detail_var_map_string_octet = TypeObjectUtils::build_complete_member_detail(name_var_map_string_octet, member_ann_builtin_var_map_string_octet, ann_custom_MapStringOctet);
            CompleteStructMember member_var_map_string_octet = TypeObjectUtils::build_complete_struct_member(common_var_map_string_octet, detail_var_map_string_octet);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapStringOctet, member_var_map_string_octet);
        }
        CompleteStructType struct_type_MapStringOctet = TypeObjectUtils::build_complete_struct_type(struct_flags_MapStringOctet, header_MapStringOctet, member_seq_MapStringOctet);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapStringOctet, type_name_MapStringOctet.to_string(), type_ids_MapStringOctet))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapStringOctet already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapStringChar_type_identifier(
        TypeIdentifierPair& type_ids_MapStringChar)
{

    ReturnCode_t return_code_MapStringChar {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapStringChar =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapStringChar", type_ids_MapStringChar);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapStringChar)
    {
        StructTypeFlag struct_flags_MapStringChar = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapStringChar = "MapStringChar";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapStringChar;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapStringChar;
        CompleteTypeDetail detail_MapStringChar = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapStringChar, ann_custom_MapStringChar, type_name_MapStringChar.to_string());
        CompleteStructHeader header_MapStringChar;
        header_MapStringChar = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapStringChar);
        CompleteStructMemberSeq member_seq_MapStringChar;
        {
            TypeIdentifierPair type_ids_var_map_string_char;
            ReturnCode_t return_code_var_map_string_char {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_string_char =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_unbounded_char_unbounded", type_ids_var_map_string_char);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_char)
            {
                return_code_var_map_string_char =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_char", type_ids_var_map_string_char);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_char)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_string_unbounded_char_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_char_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_char, element_identifier_anonymous_map_anonymous_string_unbounded_char_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_unbounded_char_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_char_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_string_char =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_string_char);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_char)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_string_char))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_string_unbounded_char_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_char_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_char, key_identifier_anonymous_map_anonymous_string_unbounded_char_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_unbounded_char_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_char_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_char_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_char_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_char_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_char_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_char_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_char_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_char_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_char_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_char_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_char_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_char_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_char_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_char_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_unbounded_char_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_char_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_char_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_char_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_char_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_char_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_char_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_char_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_char_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_char_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_char_unbounded", type_ids_var_map_string_char))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_unbounded_char_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_string_char = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_string_char = 0x00000000;
            bool common_var_map_string_char_ec {false};
            CommonStructMember common_var_map_string_char {TypeObjectUtils::build_common_struct_member(member_id_var_map_string_char, member_flags_var_map_string_char, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_char, common_var_map_string_char_ec))};
            if (!common_var_map_string_char_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_string_char member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_string_char = "var_map_string_char";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_string_char;
            ann_custom_MapStringChar.reset();
            CompleteMemberDetail detail_var_map_string_char = TypeObjectUtils::build_complete_member_detail(name_var_map_string_char, member_ann_builtin_var_map_string_char, ann_custom_MapStringChar);
            CompleteStructMember member_var_map_string_char = TypeObjectUtils::build_complete_struct_member(common_var_map_string_char, detail_var_map_string_char);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapStringChar, member_var_map_string_char);
        }
        CompleteStructType struct_type_MapStringChar = TypeObjectUtils::build_complete_struct_type(struct_flags_MapStringChar, header_MapStringChar, member_seq_MapStringChar);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapStringChar, type_name_MapStringChar.to_string(), type_ids_MapStringChar))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapStringChar already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapStringWChar_type_identifier(
        TypeIdentifierPair& type_ids_MapStringWChar)
{

    ReturnCode_t return_code_MapStringWChar {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapStringWChar =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapStringWChar", type_ids_MapStringWChar);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapStringWChar)
    {
        StructTypeFlag struct_flags_MapStringWChar = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapStringWChar = "MapStringWChar";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapStringWChar;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapStringWChar;
        CompleteTypeDetail detail_MapStringWChar = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapStringWChar, ann_custom_MapStringWChar, type_name_MapStringWChar.to_string());
        CompleteStructHeader header_MapStringWChar;
        header_MapStringWChar = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapStringWChar);
        CompleteStructMemberSeq member_seq_MapStringWChar;
        {
            TypeIdentifierPair type_ids_var_map_string_wchar;
            ReturnCode_t return_code_var_map_string_wchar {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_string_wchar =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_unbounded_wchar_t_unbounded", type_ids_var_map_string_wchar);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_wchar)
            {
                return_code_var_map_string_wchar =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_wchar_t", type_ids_var_map_string_wchar);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_wchar)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_wchar, element_identifier_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_wchar_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_string_wchar =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_string_wchar);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_wchar)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_string_wchar))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_wchar, key_identifier_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_wchar_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_wchar_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_wchar_t_unbounded", type_ids_var_map_string_wchar))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_unbounded_wchar_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_string_wchar = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_string_wchar = 0x00000000;
            bool common_var_map_string_wchar_ec {false};
            CommonStructMember common_var_map_string_wchar {TypeObjectUtils::build_common_struct_member(member_id_var_map_string_wchar, member_flags_var_map_string_wchar, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_wchar, common_var_map_string_wchar_ec))};
            if (!common_var_map_string_wchar_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_string_wchar member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_string_wchar = "var_map_string_wchar";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_string_wchar;
            ann_custom_MapStringWChar.reset();
            CompleteMemberDetail detail_var_map_string_wchar = TypeObjectUtils::build_complete_member_detail(name_var_map_string_wchar, member_ann_builtin_var_map_string_wchar, ann_custom_MapStringWChar);
            CompleteStructMember member_var_map_string_wchar = TypeObjectUtils::build_complete_struct_member(common_var_map_string_wchar, detail_var_map_string_wchar);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapStringWChar, member_var_map_string_wchar);
        }
        CompleteStructType struct_type_MapStringWChar = TypeObjectUtils::build_complete_struct_type(struct_flags_MapStringWChar, header_MapStringWChar, member_seq_MapStringWChar);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapStringWChar, type_name_MapStringWChar.to_string(), type_ids_MapStringWChar))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapStringWChar already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapStringString_type_identifier(
        TypeIdentifierPair& type_ids_MapStringString)
{

    ReturnCode_t return_code_MapStringString {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapStringString =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapStringString", type_ids_MapStringString);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapStringString)
    {
        StructTypeFlag struct_flags_MapStringString = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapStringString = "MapStringString";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapStringString;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapStringString;
        CompleteTypeDetail detail_MapStringString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapStringString, ann_custom_MapStringString, type_name_MapStringString.to_string());
        CompleteStructHeader header_MapStringString;
        header_MapStringString = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapStringString);
        CompleteStructMemberSeq member_seq_MapStringString;
        {
            TypeIdentifierPair type_ids_var_map_string_string;
            ReturnCode_t return_code_var_map_string_string {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_string_string =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded", type_ids_var_map_string_string);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_string)
            {
                return_code_var_map_string_string =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_string_string);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_string)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_string_string))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_string, element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_string_string =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_string_string);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_string)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_string_string))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_string, key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded", type_ids_var_map_string_string))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_string_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_string_string = 0x00000000;
            bool common_var_map_string_string_ec {false};
            CommonStructMember common_var_map_string_string {TypeObjectUtils::build_common_struct_member(member_id_var_map_string_string, member_flags_var_map_string_string, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_string, common_var_map_string_string_ec))};
            if (!common_var_map_string_string_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_string_string member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_string_string = "var_map_string_string";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_string_string;
            ann_custom_MapStringString.reset();
            CompleteMemberDetail detail_var_map_string_string = TypeObjectUtils::build_complete_member_detail(name_var_map_string_string, member_ann_builtin_var_map_string_string, ann_custom_MapStringString);
            CompleteStructMember member_var_map_string_string = TypeObjectUtils::build_complete_struct_member(common_var_map_string_string, detail_var_map_string_string);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapStringString, member_var_map_string_string);
        }
        CompleteStructType struct_type_MapStringString = TypeObjectUtils::build_complete_struct_type(struct_flags_MapStringString, header_MapStringString, member_seq_MapStringString);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapStringString, type_name_MapStringString.to_string(), type_ids_MapStringString))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapStringString already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapStringWString_type_identifier(
        TypeIdentifierPair& type_ids_MapStringWString)
{

    ReturnCode_t return_code_MapStringWString {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapStringWString =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapStringWString", type_ids_MapStringWString);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapStringWString)
    {
        StructTypeFlag struct_flags_MapStringWString = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapStringWString = "MapStringWString";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapStringWString;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapStringWString;
        CompleteTypeDetail detail_MapStringWString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapStringWString, ann_custom_MapStringWString, type_name_MapStringWString.to_string());
        CompleteStructHeader header_MapStringWString;
        header_MapStringWString = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapStringWString);
        CompleteStructMemberSeq member_seq_MapStringWString;
        {
            TypeIdentifierPair type_ids_var_map_string_wstring;
            ReturnCode_t return_code_var_map_string_wstring {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_string_wstring =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded", type_ids_var_map_string_wstring);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_wstring)
            {
                return_code_var_map_string_wstring =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_string_wstring);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_wstring)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_string_wstring, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_wstring, element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_string_wstring =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_string_wstring);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_wstring)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_string_wstring))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_wstring, key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded", type_ids_var_map_string_wstring))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_unbounded_anonymous_wstring_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_string_wstring = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_string_wstring = 0x00000000;
            bool common_var_map_string_wstring_ec {false};
            CommonStructMember common_var_map_string_wstring {TypeObjectUtils::build_common_struct_member(member_id_var_map_string_wstring, member_flags_var_map_string_wstring, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_wstring, common_var_map_string_wstring_ec))};
            if (!common_var_map_string_wstring_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_string_wstring member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_string_wstring = "var_map_string_wstring";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_string_wstring;
            ann_custom_MapStringWString.reset();
            CompleteMemberDetail detail_var_map_string_wstring = TypeObjectUtils::build_complete_member_detail(name_var_map_string_wstring, member_ann_builtin_var_map_string_wstring, ann_custom_MapStringWString);
            CompleteStructMember member_var_map_string_wstring = TypeObjectUtils::build_complete_struct_member(common_var_map_string_wstring, detail_var_map_string_wstring);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapStringWString, member_var_map_string_wstring);
        }
        CompleteStructType struct_type_MapStringWString = TypeObjectUtils::build_complete_struct_type(struct_flags_MapStringWString, header_MapStringWString, member_seq_MapStringWString);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapStringWString, type_name_MapStringWString.to_string(), type_ids_MapStringWString))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapStringWString already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapStringInnerAliasBoundedStringHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapStringInnerAliasBoundedStringHelper)
{

    ReturnCode_t return_code_MapStringInnerAliasBoundedStringHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapStringInnerAliasBoundedStringHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapStringInnerAliasBoundedStringHelper", type_ids_MapStringInnerAliasBoundedStringHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapStringInnerAliasBoundedStringHelper)
    {
        StructTypeFlag struct_flags_MapStringInnerAliasBoundedStringHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapStringInnerAliasBoundedStringHelper = "MapStringInnerAliasBoundedStringHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapStringInnerAliasBoundedStringHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapStringInnerAliasBoundedStringHelper;
        CompleteTypeDetail detail_MapStringInnerAliasBoundedStringHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapStringInnerAliasBoundedStringHelper, ann_custom_MapStringInnerAliasBoundedStringHelper, type_name_MapStringInnerAliasBoundedStringHelper.to_string());
        CompleteStructHeader header_MapStringInnerAliasBoundedStringHelper;
        header_MapStringInnerAliasBoundedStringHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapStringInnerAliasBoundedStringHelper);
        CompleteStructMemberSeq member_seq_MapStringInnerAliasBoundedStringHelper;
        {
            TypeIdentifierPair type_ids_var_map_string_inneraliasboundedstringhelper;
            ReturnCode_t return_code_var_map_string_inneraliasboundedstringhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_string_inneraliasboundedstringhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded", type_ids_var_map_string_inneraliasboundedstringhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_inneraliasboundedstringhelper)
            {
                return_code_var_map_string_inneraliasboundedstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_string_inneraliasboundedstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_inneraliasboundedstringhelper)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_string_inneraliasboundedstringhelper);
                }
                bool element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_inneraliasboundedstringhelper, element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_string_inneraliasboundedstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_string_inneraliasboundedstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_inneraliasboundedstringhelper)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_string_inneraliasboundedstringhelper))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_inneraliasboundedstringhelper, key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded", type_ids_var_map_string_inneraliasboundedstringhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_unbounded_anonymous_string_10_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_string_inneraliasboundedstringhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_string_inneraliasboundedstringhelper = 0x00000000;
            bool common_var_map_string_inneraliasboundedstringhelper_ec {false};
            CommonStructMember common_var_map_string_inneraliasboundedstringhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_string_inneraliasboundedstringhelper, member_flags_var_map_string_inneraliasboundedstringhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_inneraliasboundedstringhelper, common_var_map_string_inneraliasboundedstringhelper_ec))};
            if (!common_var_map_string_inneraliasboundedstringhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_string_inneraliasboundedstringhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_string_inneraliasboundedstringhelper = "var_map_string_inneraliasboundedstringhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_string_inneraliasboundedstringhelper;
            ann_custom_MapStringInnerAliasBoundedStringHelper.reset();
            CompleteMemberDetail detail_var_map_string_inneraliasboundedstringhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_string_inneraliasboundedstringhelper, member_ann_builtin_var_map_string_inneraliasboundedstringhelper, ann_custom_MapStringInnerAliasBoundedStringHelper);
            CompleteStructMember member_var_map_string_inneraliasboundedstringhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_string_inneraliasboundedstringhelper, detail_var_map_string_inneraliasboundedstringhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapStringInnerAliasBoundedStringHelper, member_var_map_string_inneraliasboundedstringhelper);
        }
        CompleteStructType struct_type_MapStringInnerAliasBoundedStringHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapStringInnerAliasBoundedStringHelper, header_MapStringInnerAliasBoundedStringHelper, member_seq_MapStringInnerAliasBoundedStringHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapStringInnerAliasBoundedStringHelper, type_name_MapStringInnerAliasBoundedStringHelper.to_string(), type_ids_MapStringInnerAliasBoundedStringHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapStringInnerAliasBoundedStringHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapStringInnerAliasBoundedWStringHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapStringInnerAliasBoundedWStringHelper)
{

    ReturnCode_t return_code_MapStringInnerAliasBoundedWStringHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapStringInnerAliasBoundedWStringHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapStringInnerAliasBoundedWStringHelper", type_ids_MapStringInnerAliasBoundedWStringHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapStringInnerAliasBoundedWStringHelper)
    {
        StructTypeFlag struct_flags_MapStringInnerAliasBoundedWStringHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapStringInnerAliasBoundedWStringHelper = "MapStringInnerAliasBoundedWStringHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapStringInnerAliasBoundedWStringHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapStringInnerAliasBoundedWStringHelper;
        CompleteTypeDetail detail_MapStringInnerAliasBoundedWStringHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapStringInnerAliasBoundedWStringHelper, ann_custom_MapStringInnerAliasBoundedWStringHelper, type_name_MapStringInnerAliasBoundedWStringHelper.to_string());
        CompleteStructHeader header_MapStringInnerAliasBoundedWStringHelper;
        header_MapStringInnerAliasBoundedWStringHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapStringInnerAliasBoundedWStringHelper);
        CompleteStructMemberSeq member_seq_MapStringInnerAliasBoundedWStringHelper;
        {
            TypeIdentifierPair type_ids_var_map_string_inneraliasboundedwstringhelper;
            ReturnCode_t return_code_var_map_string_inneraliasboundedwstringhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_string_inneraliasboundedwstringhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded", type_ids_var_map_string_inneraliasboundedwstringhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_inneraliasboundedwstringhelper)
            {
                return_code_var_map_string_inneraliasboundedwstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_string_inneraliasboundedwstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_inneraliasboundedwstringhelper)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_string_inneraliasboundedwstringhelper);
                }
                bool element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_inneraliasboundedwstringhelper, element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_string_inneraliasboundedwstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_string_inneraliasboundedwstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_inneraliasboundedwstringhelper)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_string_inneraliasboundedwstringhelper))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_inneraliasboundedwstringhelper, key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded", type_ids_var_map_string_inneraliasboundedwstringhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_unbounded_anonymous_wstring_10_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_string_inneraliasboundedwstringhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_string_inneraliasboundedwstringhelper = 0x00000000;
            bool common_var_map_string_inneraliasboundedwstringhelper_ec {false};
            CommonStructMember common_var_map_string_inneraliasboundedwstringhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_string_inneraliasboundedwstringhelper, member_flags_var_map_string_inneraliasboundedwstringhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_inneraliasboundedwstringhelper, common_var_map_string_inneraliasboundedwstringhelper_ec))};
            if (!common_var_map_string_inneraliasboundedwstringhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_string_inneraliasboundedwstringhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_string_inneraliasboundedwstringhelper = "var_map_string_inneraliasboundedwstringhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_string_inneraliasboundedwstringhelper;
            ann_custom_MapStringInnerAliasBoundedWStringHelper.reset();
            CompleteMemberDetail detail_var_map_string_inneraliasboundedwstringhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_string_inneraliasboundedwstringhelper, member_ann_builtin_var_map_string_inneraliasboundedwstringhelper, ann_custom_MapStringInnerAliasBoundedWStringHelper);
            CompleteStructMember member_var_map_string_inneraliasboundedwstringhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_string_inneraliasboundedwstringhelper, detail_var_map_string_inneraliasboundedwstringhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapStringInnerAliasBoundedWStringHelper, member_var_map_string_inneraliasboundedwstringhelper);
        }
        CompleteStructType struct_type_MapStringInnerAliasBoundedWStringHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapStringInnerAliasBoundedWStringHelper, header_MapStringInnerAliasBoundedWStringHelper, member_seq_MapStringInnerAliasBoundedWStringHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapStringInnerAliasBoundedWStringHelper, type_name_MapStringInnerAliasBoundedWStringHelper.to_string(), type_ids_MapStringInnerAliasBoundedWStringHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapStringInnerAliasBoundedWStringHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapStringInnerEnumHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapStringInnerEnumHelper)
{

    ReturnCode_t return_code_MapStringInnerEnumHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapStringInnerEnumHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapStringInnerEnumHelper", type_ids_MapStringInnerEnumHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapStringInnerEnumHelper)
    {
        StructTypeFlag struct_flags_MapStringInnerEnumHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapStringInnerEnumHelper = "MapStringInnerEnumHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapStringInnerEnumHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapStringInnerEnumHelper;
        CompleteTypeDetail detail_MapStringInnerEnumHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapStringInnerEnumHelper, ann_custom_MapStringInnerEnumHelper, type_name_MapStringInnerEnumHelper.to_string());
        CompleteStructHeader header_MapStringInnerEnumHelper;
        header_MapStringInnerEnumHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapStringInnerEnumHelper);
        CompleteStructMemberSeq member_seq_MapStringInnerEnumHelper;
        {
            TypeIdentifierPair type_ids_var_map_string_innerenumhelper;
            ReturnCode_t return_code_var_map_string_innerenumhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_string_innerenumhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded", type_ids_var_map_string_innerenumhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_innerenumhelper)
            {
                return_code_var_map_string_innerenumhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerEnumHelper", type_ids_var_map_string_innerenumhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_innerenumhelper)
                {
                ::register_InnerEnumHelper_type_identifier(type_ids_var_map_string_innerenumhelper);
                }
                bool element_identifier_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_innerenumhelper, element_identifier_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_string_innerenumhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_string_innerenumhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_innerenumhelper)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_string_innerenumhelper))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_innerenumhelper, key_identifier_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded", type_ids_var_map_string_innerenumhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_unbounded_InnerEnumHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_string_innerenumhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_string_innerenumhelper = 0x00000000;
            bool common_var_map_string_innerenumhelper_ec {false};
            CommonStructMember common_var_map_string_innerenumhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_string_innerenumhelper, member_flags_var_map_string_innerenumhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_innerenumhelper, common_var_map_string_innerenumhelper_ec))};
            if (!common_var_map_string_innerenumhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_string_innerenumhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_string_innerenumhelper = "var_map_string_innerenumhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_string_innerenumhelper;
            ann_custom_MapStringInnerEnumHelper.reset();
            CompleteMemberDetail detail_var_map_string_innerenumhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_string_innerenumhelper, member_ann_builtin_var_map_string_innerenumhelper, ann_custom_MapStringInnerEnumHelper);
            CompleteStructMember member_var_map_string_innerenumhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_string_innerenumhelper, detail_var_map_string_innerenumhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapStringInnerEnumHelper, member_var_map_string_innerenumhelper);
        }
        CompleteStructType struct_type_MapStringInnerEnumHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapStringInnerEnumHelper, header_MapStringInnerEnumHelper, member_seq_MapStringInnerEnumHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapStringInnerEnumHelper, type_name_MapStringInnerEnumHelper.to_string(), type_ids_MapStringInnerEnumHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapStringInnerEnumHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapStringInnerBitMaskHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapStringInnerBitMaskHelper)
{

    ReturnCode_t return_code_MapStringInnerBitMaskHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapStringInnerBitMaskHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapStringInnerBitMaskHelper", type_ids_MapStringInnerBitMaskHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapStringInnerBitMaskHelper)
    {
        StructTypeFlag struct_flags_MapStringInnerBitMaskHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapStringInnerBitMaskHelper = "MapStringInnerBitMaskHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapStringInnerBitMaskHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapStringInnerBitMaskHelper;
        CompleteTypeDetail detail_MapStringInnerBitMaskHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapStringInnerBitMaskHelper, ann_custom_MapStringInnerBitMaskHelper, type_name_MapStringInnerBitMaskHelper.to_string());
        CompleteStructHeader header_MapStringInnerBitMaskHelper;
        header_MapStringInnerBitMaskHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapStringInnerBitMaskHelper);
        CompleteStructMemberSeq member_seq_MapStringInnerBitMaskHelper;
        {
            TypeIdentifierPair type_ids_var_map_string_innerbitmaskhelper;
            ReturnCode_t return_code_var_map_string_innerbitmaskhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_string_innerbitmaskhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded", type_ids_var_map_string_innerbitmaskhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_innerbitmaskhelper)
            {
                return_code_var_map_string_innerbitmaskhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerBitMaskHelper", type_ids_var_map_string_innerbitmaskhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_innerbitmaskhelper)
                {
                ::register_InnerBitMaskHelper_type_identifier(type_ids_var_map_string_innerbitmaskhelper);
                }
                bool element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_innerbitmaskhelper, element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_string_innerbitmaskhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_string_innerbitmaskhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_innerbitmaskhelper)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_string_innerbitmaskhelper))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_innerbitmaskhelper, key_identifier_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded", type_ids_var_map_string_innerbitmaskhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_unbounded_InnerBitMaskHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_string_innerbitmaskhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_string_innerbitmaskhelper = 0x00000000;
            bool common_var_map_string_innerbitmaskhelper_ec {false};
            CommonStructMember common_var_map_string_innerbitmaskhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_string_innerbitmaskhelper, member_flags_var_map_string_innerbitmaskhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_innerbitmaskhelper, common_var_map_string_innerbitmaskhelper_ec))};
            if (!common_var_map_string_innerbitmaskhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_string_innerbitmaskhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_string_innerbitmaskhelper = "var_map_string_innerbitmaskhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_string_innerbitmaskhelper;
            ann_custom_MapStringInnerBitMaskHelper.reset();
            CompleteMemberDetail detail_var_map_string_innerbitmaskhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_string_innerbitmaskhelper, member_ann_builtin_var_map_string_innerbitmaskhelper, ann_custom_MapStringInnerBitMaskHelper);
            CompleteStructMember member_var_map_string_innerbitmaskhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_string_innerbitmaskhelper, detail_var_map_string_innerbitmaskhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapStringInnerBitMaskHelper, member_var_map_string_innerbitmaskhelper);
        }
        CompleteStructType struct_type_MapStringInnerBitMaskHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapStringInnerBitMaskHelper, header_MapStringInnerBitMaskHelper, member_seq_MapStringInnerBitMaskHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapStringInnerBitMaskHelper, type_name_MapStringInnerBitMaskHelper.to_string(), type_ids_MapStringInnerBitMaskHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapStringInnerBitMaskHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapStringInnerAliasHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapStringInnerAliasHelper)
{

    ReturnCode_t return_code_MapStringInnerAliasHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapStringInnerAliasHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapStringInnerAliasHelper", type_ids_MapStringInnerAliasHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapStringInnerAliasHelper)
    {
        StructTypeFlag struct_flags_MapStringInnerAliasHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapStringInnerAliasHelper = "MapStringInnerAliasHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapStringInnerAliasHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapStringInnerAliasHelper;
        CompleteTypeDetail detail_MapStringInnerAliasHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapStringInnerAliasHelper, ann_custom_MapStringInnerAliasHelper, type_name_MapStringInnerAliasHelper.to_string());
        CompleteStructHeader header_MapStringInnerAliasHelper;
        header_MapStringInnerAliasHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapStringInnerAliasHelper);
        CompleteStructMemberSeq member_seq_MapStringInnerAliasHelper;
        {
            TypeIdentifierPair type_ids_var_map_string_inneraliashelper;
            ReturnCode_t return_code_var_map_string_inneraliashelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_string_inneraliashelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded", type_ids_var_map_string_inneraliashelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_inneraliashelper)
            {
                return_code_var_map_string_inneraliashelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerAliasHelper", type_ids_var_map_string_inneraliashelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_inneraliashelper)
                {
                ::register_InnerAliasHelper_type_identifier(type_ids_var_map_string_inneraliashelper);
                }
                bool element_identifier_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_inneraliashelper, element_identifier_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_string_inneraliashelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_string_inneraliashelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_inneraliashelper)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_string_inneraliashelper))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_inneraliashelper, key_identifier_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded", type_ids_var_map_string_inneraliashelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_unbounded_InnerAliasHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_string_inneraliashelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_string_inneraliashelper = 0x00000000;
            bool common_var_map_string_inneraliashelper_ec {false};
            CommonStructMember common_var_map_string_inneraliashelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_string_inneraliashelper, member_flags_var_map_string_inneraliashelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_inneraliashelper, common_var_map_string_inneraliashelper_ec))};
            if (!common_var_map_string_inneraliashelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_string_inneraliashelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_string_inneraliashelper = "var_map_string_inneraliashelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_string_inneraliashelper;
            ann_custom_MapStringInnerAliasHelper.reset();
            CompleteMemberDetail detail_var_map_string_inneraliashelper = TypeObjectUtils::build_complete_member_detail(name_var_map_string_inneraliashelper, member_ann_builtin_var_map_string_inneraliashelper, ann_custom_MapStringInnerAliasHelper);
            CompleteStructMember member_var_map_string_inneraliashelper = TypeObjectUtils::build_complete_struct_member(common_var_map_string_inneraliashelper, detail_var_map_string_inneraliashelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapStringInnerAliasHelper, member_var_map_string_inneraliashelper);
        }
        CompleteStructType struct_type_MapStringInnerAliasHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapStringInnerAliasHelper, header_MapStringInnerAliasHelper, member_seq_MapStringInnerAliasHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapStringInnerAliasHelper, type_name_MapStringInnerAliasHelper.to_string(), type_ids_MapStringInnerAliasHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapStringInnerAliasHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapStringInnerAliasArrayHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapStringInnerAliasArrayHelper)
{

    ReturnCode_t return_code_MapStringInnerAliasArrayHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapStringInnerAliasArrayHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapStringInnerAliasArrayHelper", type_ids_MapStringInnerAliasArrayHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapStringInnerAliasArrayHelper)
    {
        StructTypeFlag struct_flags_MapStringInnerAliasArrayHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapStringInnerAliasArrayHelper = "MapStringInnerAliasArrayHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapStringInnerAliasArrayHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapStringInnerAliasArrayHelper;
        CompleteTypeDetail detail_MapStringInnerAliasArrayHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapStringInnerAliasArrayHelper, ann_custom_MapStringInnerAliasArrayHelper, type_name_MapStringInnerAliasArrayHelper.to_string());
        CompleteStructHeader header_MapStringInnerAliasArrayHelper;
        header_MapStringInnerAliasArrayHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapStringInnerAliasArrayHelper);
        CompleteStructMemberSeq member_seq_MapStringInnerAliasArrayHelper;
        {
            TypeIdentifierPair type_ids_var_map_string_inneraliasarrayhelper;
            ReturnCode_t return_code_var_map_string_inneraliasarrayhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_string_inneraliasarrayhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded", type_ids_var_map_string_inneraliasarrayhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_inneraliasarrayhelper)
            {
                return_code_var_map_string_inneraliasarrayhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_array_helper", type_ids_var_map_string_inneraliasarrayhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_inneraliasarrayhelper)
                {
                ::register_Inner_alias_array_helper_type_identifier(type_ids_var_map_string_inneraliasarrayhelper);
                }
                bool element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_inneraliasarrayhelper, element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_string_inneraliasarrayhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_string_inneraliasarrayhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_inneraliasarrayhelper)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_string_inneraliasarrayhelper))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_inneraliasarrayhelper, key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded", type_ids_var_map_string_inneraliasarrayhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_unbounded_anonymous_array_int16_t_2_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_string_inneraliasarrayhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_string_inneraliasarrayhelper = 0x00000000;
            bool common_var_map_string_inneraliasarrayhelper_ec {false};
            CommonStructMember common_var_map_string_inneraliasarrayhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_string_inneraliasarrayhelper, member_flags_var_map_string_inneraliasarrayhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_inneraliasarrayhelper, common_var_map_string_inneraliasarrayhelper_ec))};
            if (!common_var_map_string_inneraliasarrayhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_string_inneraliasarrayhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_string_inneraliasarrayhelper = "var_map_string_inneraliasarrayhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_string_inneraliasarrayhelper;
            ann_custom_MapStringInnerAliasArrayHelper.reset();
            CompleteMemberDetail detail_var_map_string_inneraliasarrayhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_string_inneraliasarrayhelper, member_ann_builtin_var_map_string_inneraliasarrayhelper, ann_custom_MapStringInnerAliasArrayHelper);
            CompleteStructMember member_var_map_string_inneraliasarrayhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_string_inneraliasarrayhelper, detail_var_map_string_inneraliasarrayhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapStringInnerAliasArrayHelper, member_var_map_string_inneraliasarrayhelper);
        }
        CompleteStructType struct_type_MapStringInnerAliasArrayHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapStringInnerAliasArrayHelper, header_MapStringInnerAliasArrayHelper, member_seq_MapStringInnerAliasArrayHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapStringInnerAliasArrayHelper, type_name_MapStringInnerAliasArrayHelper.to_string(), type_ids_MapStringInnerAliasArrayHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapStringInnerAliasArrayHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapStringInnerAliasSequenceHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapStringInnerAliasSequenceHelper)
{

    ReturnCode_t return_code_MapStringInnerAliasSequenceHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapStringInnerAliasSequenceHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapStringInnerAliasSequenceHelper", type_ids_MapStringInnerAliasSequenceHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapStringInnerAliasSequenceHelper)
    {
        StructTypeFlag struct_flags_MapStringInnerAliasSequenceHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapStringInnerAliasSequenceHelper = "MapStringInnerAliasSequenceHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapStringInnerAliasSequenceHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapStringInnerAliasSequenceHelper;
        CompleteTypeDetail detail_MapStringInnerAliasSequenceHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapStringInnerAliasSequenceHelper, ann_custom_MapStringInnerAliasSequenceHelper, type_name_MapStringInnerAliasSequenceHelper.to_string());
        CompleteStructHeader header_MapStringInnerAliasSequenceHelper;
        header_MapStringInnerAliasSequenceHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapStringInnerAliasSequenceHelper);
        CompleteStructMemberSeq member_seq_MapStringInnerAliasSequenceHelper;
        {
            TypeIdentifierPair type_ids_var_map_string_inneraliassequencehelper;
            ReturnCode_t return_code_var_map_string_inneraliassequencehelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_string_inneraliassequencehelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded", type_ids_var_map_string_inneraliassequencehelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_inneraliassequencehelper)
            {
                return_code_var_map_string_inneraliassequencehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_sequence_helper", type_ids_var_map_string_inneraliassequencehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_inneraliassequencehelper)
                {
                ::register_Inner_alias_sequence_helper_type_identifier(type_ids_var_map_string_inneraliassequencehelper);
                }
                bool element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_inneraliassequencehelper, element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_string_inneraliassequencehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_string_inneraliassequencehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_inneraliassequencehelper)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_string_inneraliassequencehelper))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_inneraliassequencehelper, key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded", type_ids_var_map_string_inneraliassequencehelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_unbounded_anonymous_sequence_int16_t_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_string_inneraliassequencehelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_string_inneraliassequencehelper = 0x00000000;
            bool common_var_map_string_inneraliassequencehelper_ec {false};
            CommonStructMember common_var_map_string_inneraliassequencehelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_string_inneraliassequencehelper, member_flags_var_map_string_inneraliassequencehelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_inneraliassequencehelper, common_var_map_string_inneraliassequencehelper_ec))};
            if (!common_var_map_string_inneraliassequencehelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_string_inneraliassequencehelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_string_inneraliassequencehelper = "var_map_string_inneraliassequencehelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_string_inneraliassequencehelper;
            ann_custom_MapStringInnerAliasSequenceHelper.reset();
            CompleteMemberDetail detail_var_map_string_inneraliassequencehelper = TypeObjectUtils::build_complete_member_detail(name_var_map_string_inneraliassequencehelper, member_ann_builtin_var_map_string_inneraliassequencehelper, ann_custom_MapStringInnerAliasSequenceHelper);
            CompleteStructMember member_var_map_string_inneraliassequencehelper = TypeObjectUtils::build_complete_struct_member(common_var_map_string_inneraliassequencehelper, detail_var_map_string_inneraliassequencehelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapStringInnerAliasSequenceHelper, member_var_map_string_inneraliassequencehelper);
        }
        CompleteStructType struct_type_MapStringInnerAliasSequenceHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapStringInnerAliasSequenceHelper, header_MapStringInnerAliasSequenceHelper, member_seq_MapStringInnerAliasSequenceHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapStringInnerAliasSequenceHelper, type_name_MapStringInnerAliasSequenceHelper.to_string(), type_ids_MapStringInnerAliasSequenceHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapStringInnerAliasSequenceHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapStringInnerAliasMapHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapStringInnerAliasMapHelper)
{

    ReturnCode_t return_code_MapStringInnerAliasMapHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapStringInnerAliasMapHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapStringInnerAliasMapHelper", type_ids_MapStringInnerAliasMapHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapStringInnerAliasMapHelper)
    {
        StructTypeFlag struct_flags_MapStringInnerAliasMapHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapStringInnerAliasMapHelper = "MapStringInnerAliasMapHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapStringInnerAliasMapHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapStringInnerAliasMapHelper;
        CompleteTypeDetail detail_MapStringInnerAliasMapHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapStringInnerAliasMapHelper, ann_custom_MapStringInnerAliasMapHelper, type_name_MapStringInnerAliasMapHelper.to_string());
        CompleteStructHeader header_MapStringInnerAliasMapHelper;
        header_MapStringInnerAliasMapHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapStringInnerAliasMapHelper);
        CompleteStructMemberSeq member_seq_MapStringInnerAliasMapHelper;
        {
            TypeIdentifierPair type_ids_var_map_string_inneraliasmaphelper;
            ReturnCode_t return_code_var_map_string_inneraliasmaphelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_string_inneraliasmaphelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded", type_ids_var_map_string_inneraliasmaphelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_inneraliasmaphelper)
            {
                return_code_var_map_string_inneraliasmaphelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_map_helper", type_ids_var_map_string_inneraliasmaphelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_inneraliasmaphelper)
                {
                ::register_Inner_alias_map_helper_type_identifier(type_ids_var_map_string_inneraliasmaphelper);
                }
                bool element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_inneraliasmaphelper, element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_string_inneraliasmaphelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_string_inneraliasmaphelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_inneraliasmaphelper)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_string_inneraliasmaphelper))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_inneraliasmaphelper, key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded", type_ids_var_map_string_inneraliasmaphelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_unbounded_anonymous_map_int32_t_int32_t_0_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_string_inneraliasmaphelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_string_inneraliasmaphelper = 0x00000000;
            bool common_var_map_string_inneraliasmaphelper_ec {false};
            CommonStructMember common_var_map_string_inneraliasmaphelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_string_inneraliasmaphelper, member_flags_var_map_string_inneraliasmaphelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_inneraliasmaphelper, common_var_map_string_inneraliasmaphelper_ec))};
            if (!common_var_map_string_inneraliasmaphelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_string_inneraliasmaphelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_string_inneraliasmaphelper = "var_map_string_inneraliasmaphelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_string_inneraliasmaphelper;
            ann_custom_MapStringInnerAliasMapHelper.reset();
            CompleteMemberDetail detail_var_map_string_inneraliasmaphelper = TypeObjectUtils::build_complete_member_detail(name_var_map_string_inneraliasmaphelper, member_ann_builtin_var_map_string_inneraliasmaphelper, ann_custom_MapStringInnerAliasMapHelper);
            CompleteStructMember member_var_map_string_inneraliasmaphelper = TypeObjectUtils::build_complete_struct_member(common_var_map_string_inneraliasmaphelper, detail_var_map_string_inneraliasmaphelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapStringInnerAliasMapHelper, member_var_map_string_inneraliasmaphelper);
        }
        CompleteStructType struct_type_MapStringInnerAliasMapHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapStringInnerAliasMapHelper, header_MapStringInnerAliasMapHelper, member_seq_MapStringInnerAliasMapHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapStringInnerAliasMapHelper, type_name_MapStringInnerAliasMapHelper.to_string(), type_ids_MapStringInnerAliasMapHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapStringInnerAliasMapHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapStringInnerUnionHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapStringInnerUnionHelper)
{

    ReturnCode_t return_code_MapStringInnerUnionHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapStringInnerUnionHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapStringInnerUnionHelper", type_ids_MapStringInnerUnionHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapStringInnerUnionHelper)
    {
        StructTypeFlag struct_flags_MapStringInnerUnionHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapStringInnerUnionHelper = "MapStringInnerUnionHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapStringInnerUnionHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapStringInnerUnionHelper;
        CompleteTypeDetail detail_MapStringInnerUnionHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapStringInnerUnionHelper, ann_custom_MapStringInnerUnionHelper, type_name_MapStringInnerUnionHelper.to_string());
        CompleteStructHeader header_MapStringInnerUnionHelper;
        header_MapStringInnerUnionHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapStringInnerUnionHelper);
        CompleteStructMemberSeq member_seq_MapStringInnerUnionHelper;
        {
            TypeIdentifierPair type_ids_var_map_string_innerunionhelper;
            ReturnCode_t return_code_var_map_string_innerunionhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_string_innerunionhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded", type_ids_var_map_string_innerunionhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_innerunionhelper)
            {
                return_code_var_map_string_innerunionhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerUnionHelper", type_ids_var_map_string_innerunionhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_innerunionhelper)
                {
                ::register_InnerUnionHelper_type_identifier(type_ids_var_map_string_innerunionhelper);
                }
                bool element_identifier_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_innerunionhelper, element_identifier_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_string_innerunionhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_string_innerunionhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_innerunionhelper)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_string_innerunionhelper))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_innerunionhelper, key_identifier_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded", type_ids_var_map_string_innerunionhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_unbounded_InnerUnionHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_string_innerunionhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_string_innerunionhelper = 0x00000000;
            bool common_var_map_string_innerunionhelper_ec {false};
            CommonStructMember common_var_map_string_innerunionhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_string_innerunionhelper, member_flags_var_map_string_innerunionhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_innerunionhelper, common_var_map_string_innerunionhelper_ec))};
            if (!common_var_map_string_innerunionhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_string_innerunionhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_string_innerunionhelper = "var_map_string_innerunionhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_string_innerunionhelper;
            ann_custom_MapStringInnerUnionHelper.reset();
            CompleteMemberDetail detail_var_map_string_innerunionhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_string_innerunionhelper, member_ann_builtin_var_map_string_innerunionhelper, ann_custom_MapStringInnerUnionHelper);
            CompleteStructMember member_var_map_string_innerunionhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_string_innerunionhelper, detail_var_map_string_innerunionhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapStringInnerUnionHelper, member_var_map_string_innerunionhelper);
        }
        CompleteStructType struct_type_MapStringInnerUnionHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapStringInnerUnionHelper, header_MapStringInnerUnionHelper, member_seq_MapStringInnerUnionHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapStringInnerUnionHelper, type_name_MapStringInnerUnionHelper.to_string(), type_ids_MapStringInnerUnionHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapStringInnerUnionHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapStringInnerStructureHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapStringInnerStructureHelper)
{

    ReturnCode_t return_code_MapStringInnerStructureHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapStringInnerStructureHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapStringInnerStructureHelper", type_ids_MapStringInnerStructureHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapStringInnerStructureHelper)
    {
        StructTypeFlag struct_flags_MapStringInnerStructureHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapStringInnerStructureHelper = "MapStringInnerStructureHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapStringInnerStructureHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapStringInnerStructureHelper;
        CompleteTypeDetail detail_MapStringInnerStructureHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapStringInnerStructureHelper, ann_custom_MapStringInnerStructureHelper, type_name_MapStringInnerStructureHelper.to_string());
        CompleteStructHeader header_MapStringInnerStructureHelper;
        header_MapStringInnerStructureHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapStringInnerStructureHelper);
        CompleteStructMemberSeq member_seq_MapStringInnerStructureHelper;
        {
            TypeIdentifierPair type_ids_var_map_string_innerstructurehelper;
            ReturnCode_t return_code_var_map_string_innerstructurehelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_string_innerstructurehelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded", type_ids_var_map_string_innerstructurehelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_innerstructurehelper)
            {
                return_code_var_map_string_innerstructurehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerStructureHelper", type_ids_var_map_string_innerstructurehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_innerstructurehelper)
                {
                ::register_InnerStructureHelper_type_identifier(type_ids_var_map_string_innerstructurehelper);
                }
                bool element_identifier_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_innerstructurehelper, element_identifier_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_string_innerstructurehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_string_innerstructurehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_innerstructurehelper)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_string_innerstructurehelper))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_innerstructurehelper, key_identifier_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded", type_ids_var_map_string_innerstructurehelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_unbounded_InnerStructureHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_string_innerstructurehelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_string_innerstructurehelper = 0x00000000;
            bool common_var_map_string_innerstructurehelper_ec {false};
            CommonStructMember common_var_map_string_innerstructurehelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_string_innerstructurehelper, member_flags_var_map_string_innerstructurehelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_innerstructurehelper, common_var_map_string_innerstructurehelper_ec))};
            if (!common_var_map_string_innerstructurehelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_string_innerstructurehelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_string_innerstructurehelper = "var_map_string_innerstructurehelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_string_innerstructurehelper;
            ann_custom_MapStringInnerStructureHelper.reset();
            CompleteMemberDetail detail_var_map_string_innerstructurehelper = TypeObjectUtils::build_complete_member_detail(name_var_map_string_innerstructurehelper, member_ann_builtin_var_map_string_innerstructurehelper, ann_custom_MapStringInnerStructureHelper);
            CompleteStructMember member_var_map_string_innerstructurehelper = TypeObjectUtils::build_complete_struct_member(common_var_map_string_innerstructurehelper, detail_var_map_string_innerstructurehelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapStringInnerStructureHelper, member_var_map_string_innerstructurehelper);
        }
        CompleteStructType struct_type_MapStringInnerStructureHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapStringInnerStructureHelper, header_MapStringInnerStructureHelper, member_seq_MapStringInnerStructureHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapStringInnerStructureHelper, type_name_MapStringInnerStructureHelper.to_string(), type_ids_MapStringInnerStructureHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapStringInnerStructureHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapStringInnerBitsetHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapStringInnerBitsetHelper)
{

    ReturnCode_t return_code_MapStringInnerBitsetHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapStringInnerBitsetHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapStringInnerBitsetHelper", type_ids_MapStringInnerBitsetHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapStringInnerBitsetHelper)
    {
        StructTypeFlag struct_flags_MapStringInnerBitsetHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapStringInnerBitsetHelper = "MapStringInnerBitsetHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapStringInnerBitsetHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapStringInnerBitsetHelper;
        CompleteTypeDetail detail_MapStringInnerBitsetHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapStringInnerBitsetHelper, ann_custom_MapStringInnerBitsetHelper, type_name_MapStringInnerBitsetHelper.to_string());
        CompleteStructHeader header_MapStringInnerBitsetHelper;
        header_MapStringInnerBitsetHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapStringInnerBitsetHelper);
        CompleteStructMemberSeq member_seq_MapStringInnerBitsetHelper;
        {
            TypeIdentifierPair type_ids_var_map_string_innerbitsethelper;
            ReturnCode_t return_code_var_map_string_innerbitsethelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_string_innerbitsethelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded", type_ids_var_map_string_innerbitsethelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_innerbitsethelper)
            {
                return_code_var_map_string_innerbitsethelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerBitsetHelper", type_ids_var_map_string_innerbitsethelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_innerbitsethelper)
                {
                ::register_InnerBitsetHelper_type_identifier(type_ids_var_map_string_innerbitsethelper);
                }
                bool element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_innerbitsethelper, element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_string_innerbitsethelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_string_innerbitsethelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_string_innerbitsethelper)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_string_innerbitsethelper))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_innerbitsethelper, key_identifier_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded", type_ids_var_map_string_innerbitsethelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_unbounded_InnerBitsetHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_string_innerbitsethelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_string_innerbitsethelper = 0x00000000;
            bool common_var_map_string_innerbitsethelper_ec {false};
            CommonStructMember common_var_map_string_innerbitsethelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_string_innerbitsethelper, member_flags_var_map_string_innerbitsethelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_string_innerbitsethelper, common_var_map_string_innerbitsethelper_ec))};
            if (!common_var_map_string_innerbitsethelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_string_innerbitsethelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_string_innerbitsethelper = "var_map_string_innerbitsethelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_string_innerbitsethelper;
            ann_custom_MapStringInnerBitsetHelper.reset();
            CompleteMemberDetail detail_var_map_string_innerbitsethelper = TypeObjectUtils::build_complete_member_detail(name_var_map_string_innerbitsethelper, member_ann_builtin_var_map_string_innerbitsethelper, ann_custom_MapStringInnerBitsetHelper);
            CompleteStructMember member_var_map_string_innerbitsethelper = TypeObjectUtils::build_complete_struct_member(common_var_map_string_innerbitsethelper, detail_var_map_string_innerbitsethelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapStringInnerBitsetHelper, member_var_map_string_innerbitsethelper);
        }
        CompleteStructType struct_type_MapStringInnerBitsetHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapStringInnerBitsetHelper, header_MapStringInnerBitsetHelper, member_seq_MapStringInnerBitsetHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapStringInnerBitsetHelper, type_name_MapStringInnerBitsetHelper.to_string(), type_ids_MapStringInnerBitsetHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapStringInnerBitsetHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapWStringShort_type_identifier(
        TypeIdentifierPair& type_ids_MapWStringShort)
{

    ReturnCode_t return_code_MapWStringShort {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapWStringShort =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapWStringShort", type_ids_MapWStringShort);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapWStringShort)
    {
        StructTypeFlag struct_flags_MapWStringShort = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapWStringShort = "MapWStringShort";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapWStringShort;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapWStringShort;
        CompleteTypeDetail detail_MapWStringShort = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapWStringShort, ann_custom_MapWStringShort, type_name_MapWStringShort.to_string());
        CompleteStructHeader header_MapWStringShort;
        header_MapWStringShort = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapWStringShort);
        CompleteStructMemberSeq member_seq_MapWStringShort;
        {
            TypeIdentifierPair type_ids_var_map_wstring_short;
            ReturnCode_t return_code_var_map_wstring_short {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_wstring_short =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded", type_ids_var_map_wstring_short);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_short)
            {
                return_code_var_map_wstring_short =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_wstring_short);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_short)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_short, element_identifier_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_wstring_short =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_wstring_short);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_short)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_wstring_short, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_short, key_identifier_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded, element_flags_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded), key_flags_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded", type_ids_var_map_wstring_short))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_unbounded_int16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_wstring_short = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_wstring_short = 0x00000000;
            bool common_var_map_wstring_short_ec {false};
            CommonStructMember common_var_map_wstring_short {TypeObjectUtils::build_common_struct_member(member_id_var_map_wstring_short, member_flags_var_map_wstring_short, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_short, common_var_map_wstring_short_ec))};
            if (!common_var_map_wstring_short_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_wstring_short member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_wstring_short = "var_map_wstring_short";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_wstring_short;
            ann_custom_MapWStringShort.reset();
            CompleteMemberDetail detail_var_map_wstring_short = TypeObjectUtils::build_complete_member_detail(name_var_map_wstring_short, member_ann_builtin_var_map_wstring_short, ann_custom_MapWStringShort);
            CompleteStructMember member_var_map_wstring_short = TypeObjectUtils::build_complete_struct_member(common_var_map_wstring_short, detail_var_map_wstring_short);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapWStringShort, member_var_map_wstring_short);
        }
        CompleteStructType struct_type_MapWStringShort = TypeObjectUtils::build_complete_struct_type(struct_flags_MapWStringShort, header_MapWStringShort, member_seq_MapWStringShort);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapWStringShort, type_name_MapWStringShort.to_string(), type_ids_MapWStringShort))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapWStringShort already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapWStringUShort_type_identifier(
        TypeIdentifierPair& type_ids_MapWStringUShort)
{

    ReturnCode_t return_code_MapWStringUShort {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapWStringUShort =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapWStringUShort", type_ids_MapWStringUShort);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapWStringUShort)
    {
        StructTypeFlag struct_flags_MapWStringUShort = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapWStringUShort = "MapWStringUShort";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapWStringUShort;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapWStringUShort;
        CompleteTypeDetail detail_MapWStringUShort = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapWStringUShort, ann_custom_MapWStringUShort, type_name_MapWStringUShort.to_string());
        CompleteStructHeader header_MapWStringUShort;
        header_MapWStringUShort = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapWStringUShort);
        CompleteStructMemberSeq member_seq_MapWStringUShort;
        {
            TypeIdentifierPair type_ids_var_map_wstring_ushort;
            ReturnCode_t return_code_var_map_wstring_ushort {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_wstring_ushort =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded", type_ids_var_map_wstring_ushort);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_ushort)
            {
                return_code_var_map_wstring_ushort =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_wstring_ushort);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_ushort)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_ushort, element_identifier_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_wstring_ushort =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_wstring_ushort);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_ushort)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_wstring_ushort, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_ushort, key_identifier_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded, element_flags_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded), key_flags_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded", type_ids_var_map_wstring_ushort))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_unbounded_uint16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_wstring_ushort = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_wstring_ushort = 0x00000000;
            bool common_var_map_wstring_ushort_ec {false};
            CommonStructMember common_var_map_wstring_ushort {TypeObjectUtils::build_common_struct_member(member_id_var_map_wstring_ushort, member_flags_var_map_wstring_ushort, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_ushort, common_var_map_wstring_ushort_ec))};
            if (!common_var_map_wstring_ushort_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_wstring_ushort member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_wstring_ushort = "var_map_wstring_ushort";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_wstring_ushort;
            ann_custom_MapWStringUShort.reset();
            CompleteMemberDetail detail_var_map_wstring_ushort = TypeObjectUtils::build_complete_member_detail(name_var_map_wstring_ushort, member_ann_builtin_var_map_wstring_ushort, ann_custom_MapWStringUShort);
            CompleteStructMember member_var_map_wstring_ushort = TypeObjectUtils::build_complete_struct_member(common_var_map_wstring_ushort, detail_var_map_wstring_ushort);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapWStringUShort, member_var_map_wstring_ushort);
        }
        CompleteStructType struct_type_MapWStringUShort = TypeObjectUtils::build_complete_struct_type(struct_flags_MapWStringUShort, header_MapWStringUShort, member_seq_MapWStringUShort);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapWStringUShort, type_name_MapWStringUShort.to_string(), type_ids_MapWStringUShort))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapWStringUShort already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapWStringLong_type_identifier(
        TypeIdentifierPair& type_ids_MapWStringLong)
{

    ReturnCode_t return_code_MapWStringLong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapWStringLong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapWStringLong", type_ids_MapWStringLong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapWStringLong)
    {
        StructTypeFlag struct_flags_MapWStringLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapWStringLong = "MapWStringLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapWStringLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapWStringLong;
        CompleteTypeDetail detail_MapWStringLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapWStringLong, ann_custom_MapWStringLong, type_name_MapWStringLong.to_string());
        CompleteStructHeader header_MapWStringLong;
        header_MapWStringLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapWStringLong);
        CompleteStructMemberSeq member_seq_MapWStringLong;
        {
            TypeIdentifierPair type_ids_var_map_wstring_long;
            ReturnCode_t return_code_var_map_wstring_long {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_wstring_long =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded", type_ids_var_map_wstring_long);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_long)
            {
                return_code_var_map_wstring_long =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_wstring_long);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_long)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_long, element_identifier_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_wstring_long =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_wstring_long);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_long)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_wstring_long, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_long, key_identifier_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded, element_flags_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded), key_flags_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded", type_ids_var_map_wstring_long))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_unbounded_int32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_wstring_long = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_wstring_long = 0x00000000;
            bool common_var_map_wstring_long_ec {false};
            CommonStructMember common_var_map_wstring_long {TypeObjectUtils::build_common_struct_member(member_id_var_map_wstring_long, member_flags_var_map_wstring_long, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_long, common_var_map_wstring_long_ec))};
            if (!common_var_map_wstring_long_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_wstring_long member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_wstring_long = "var_map_wstring_long";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_wstring_long;
            ann_custom_MapWStringLong.reset();
            CompleteMemberDetail detail_var_map_wstring_long = TypeObjectUtils::build_complete_member_detail(name_var_map_wstring_long, member_ann_builtin_var_map_wstring_long, ann_custom_MapWStringLong);
            CompleteStructMember member_var_map_wstring_long = TypeObjectUtils::build_complete_struct_member(common_var_map_wstring_long, detail_var_map_wstring_long);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapWStringLong, member_var_map_wstring_long);
        }
        CompleteStructType struct_type_MapWStringLong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapWStringLong, header_MapWStringLong, member_seq_MapWStringLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapWStringLong, type_name_MapWStringLong.to_string(), type_ids_MapWStringLong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapWStringLong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapWStringULong_type_identifier(
        TypeIdentifierPair& type_ids_MapWStringULong)
{

    ReturnCode_t return_code_MapWStringULong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapWStringULong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapWStringULong", type_ids_MapWStringULong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapWStringULong)
    {
        StructTypeFlag struct_flags_MapWStringULong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapWStringULong = "MapWStringULong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapWStringULong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapWStringULong;
        CompleteTypeDetail detail_MapWStringULong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapWStringULong, ann_custom_MapWStringULong, type_name_MapWStringULong.to_string());
        CompleteStructHeader header_MapWStringULong;
        header_MapWStringULong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapWStringULong);
        CompleteStructMemberSeq member_seq_MapWStringULong;
        {
            TypeIdentifierPair type_ids_var_map_wstring_ulong;
            ReturnCode_t return_code_var_map_wstring_ulong {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_wstring_ulong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded", type_ids_var_map_wstring_ulong);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_ulong)
            {
                return_code_var_map_wstring_ulong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_wstring_ulong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_ulong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_ulong, element_identifier_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_wstring_ulong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_wstring_ulong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_ulong)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_wstring_ulong, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_ulong, key_identifier_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded, element_flags_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded), key_flags_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded", type_ids_var_map_wstring_ulong))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_unbounded_uint32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_wstring_ulong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_wstring_ulong = 0x00000000;
            bool common_var_map_wstring_ulong_ec {false};
            CommonStructMember common_var_map_wstring_ulong {TypeObjectUtils::build_common_struct_member(member_id_var_map_wstring_ulong, member_flags_var_map_wstring_ulong, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_ulong, common_var_map_wstring_ulong_ec))};
            if (!common_var_map_wstring_ulong_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_wstring_ulong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_wstring_ulong = "var_map_wstring_ulong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_wstring_ulong;
            ann_custom_MapWStringULong.reset();
            CompleteMemberDetail detail_var_map_wstring_ulong = TypeObjectUtils::build_complete_member_detail(name_var_map_wstring_ulong, member_ann_builtin_var_map_wstring_ulong, ann_custom_MapWStringULong);
            CompleteStructMember member_var_map_wstring_ulong = TypeObjectUtils::build_complete_struct_member(common_var_map_wstring_ulong, detail_var_map_wstring_ulong);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapWStringULong, member_var_map_wstring_ulong);
        }
        CompleteStructType struct_type_MapWStringULong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapWStringULong, header_MapWStringULong, member_seq_MapWStringULong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapWStringULong, type_name_MapWStringULong.to_string(), type_ids_MapWStringULong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapWStringULong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapWStringLongLong_type_identifier(
        TypeIdentifierPair& type_ids_MapWStringLongLong)
{

    ReturnCode_t return_code_MapWStringLongLong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapWStringLongLong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapWStringLongLong", type_ids_MapWStringLongLong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapWStringLongLong)
    {
        StructTypeFlag struct_flags_MapWStringLongLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapWStringLongLong = "MapWStringLongLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapWStringLongLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapWStringLongLong;
        CompleteTypeDetail detail_MapWStringLongLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapWStringLongLong, ann_custom_MapWStringLongLong, type_name_MapWStringLongLong.to_string());
        CompleteStructHeader header_MapWStringLongLong;
        header_MapWStringLongLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapWStringLongLong);
        CompleteStructMemberSeq member_seq_MapWStringLongLong;
        {
            TypeIdentifierPair type_ids_var_map_wstring_longlong;
            ReturnCode_t return_code_var_map_wstring_longlong {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_wstring_longlong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded", type_ids_var_map_wstring_longlong);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_longlong)
            {
                return_code_var_map_wstring_longlong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_wstring_longlong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_longlong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_longlong, element_identifier_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_wstring_longlong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_wstring_longlong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_longlong)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_wstring_longlong, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_longlong, key_identifier_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded, element_flags_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded), key_flags_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded", type_ids_var_map_wstring_longlong))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_unbounded_int64_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_wstring_longlong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_wstring_longlong = 0x00000000;
            bool common_var_map_wstring_longlong_ec {false};
            CommonStructMember common_var_map_wstring_longlong {TypeObjectUtils::build_common_struct_member(member_id_var_map_wstring_longlong, member_flags_var_map_wstring_longlong, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_longlong, common_var_map_wstring_longlong_ec))};
            if (!common_var_map_wstring_longlong_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_wstring_longlong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_wstring_longlong = "var_map_wstring_longlong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_wstring_longlong;
            ann_custom_MapWStringLongLong.reset();
            CompleteMemberDetail detail_var_map_wstring_longlong = TypeObjectUtils::build_complete_member_detail(name_var_map_wstring_longlong, member_ann_builtin_var_map_wstring_longlong, ann_custom_MapWStringLongLong);
            CompleteStructMember member_var_map_wstring_longlong = TypeObjectUtils::build_complete_struct_member(common_var_map_wstring_longlong, detail_var_map_wstring_longlong);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapWStringLongLong, member_var_map_wstring_longlong);
        }
        CompleteStructType struct_type_MapWStringLongLong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapWStringLongLong, header_MapWStringLongLong, member_seq_MapWStringLongLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapWStringLongLong, type_name_MapWStringLongLong.to_string(), type_ids_MapWStringLongLong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapWStringLongLong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapWStringULongLong_type_identifier(
        TypeIdentifierPair& type_ids_MapWStringULongLong)
{

    ReturnCode_t return_code_MapWStringULongLong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapWStringULongLong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapWStringULongLong", type_ids_MapWStringULongLong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapWStringULongLong)
    {
        StructTypeFlag struct_flags_MapWStringULongLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapWStringULongLong = "MapWStringULongLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapWStringULongLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapWStringULongLong;
        CompleteTypeDetail detail_MapWStringULongLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapWStringULongLong, ann_custom_MapWStringULongLong, type_name_MapWStringULongLong.to_string());
        CompleteStructHeader header_MapWStringULongLong;
        header_MapWStringULongLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapWStringULongLong);
        CompleteStructMemberSeq member_seq_MapWStringULongLong;
        {
            TypeIdentifierPair type_ids_var_map_wstring_ulonglong;
            ReturnCode_t return_code_var_map_wstring_ulonglong {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_wstring_ulonglong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded", type_ids_var_map_wstring_ulonglong);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_ulonglong)
            {
                return_code_var_map_wstring_ulonglong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_wstring_ulonglong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_ulonglong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_ulonglong, element_identifier_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_wstring_ulonglong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_wstring_ulonglong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_ulonglong)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_wstring_ulonglong, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_ulonglong, key_identifier_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded, element_flags_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded), key_flags_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded", type_ids_var_map_wstring_ulonglong))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_unbounded_uint64_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_wstring_ulonglong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_wstring_ulonglong = 0x00000000;
            bool common_var_map_wstring_ulonglong_ec {false};
            CommonStructMember common_var_map_wstring_ulonglong {TypeObjectUtils::build_common_struct_member(member_id_var_map_wstring_ulonglong, member_flags_var_map_wstring_ulonglong, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_ulonglong, common_var_map_wstring_ulonglong_ec))};
            if (!common_var_map_wstring_ulonglong_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_wstring_ulonglong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_wstring_ulonglong = "var_map_wstring_ulonglong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_wstring_ulonglong;
            ann_custom_MapWStringULongLong.reset();
            CompleteMemberDetail detail_var_map_wstring_ulonglong = TypeObjectUtils::build_complete_member_detail(name_var_map_wstring_ulonglong, member_ann_builtin_var_map_wstring_ulonglong, ann_custom_MapWStringULongLong);
            CompleteStructMember member_var_map_wstring_ulonglong = TypeObjectUtils::build_complete_struct_member(common_var_map_wstring_ulonglong, detail_var_map_wstring_ulonglong);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapWStringULongLong, member_var_map_wstring_ulonglong);
        }
        CompleteStructType struct_type_MapWStringULongLong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapWStringULongLong, header_MapWStringULongLong, member_seq_MapWStringULongLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapWStringULongLong, type_name_MapWStringULongLong.to_string(), type_ids_MapWStringULongLong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapWStringULongLong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapWStringFloat_type_identifier(
        TypeIdentifierPair& type_ids_MapWStringFloat)
{

    ReturnCode_t return_code_MapWStringFloat {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapWStringFloat =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapWStringFloat", type_ids_MapWStringFloat);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapWStringFloat)
    {
        StructTypeFlag struct_flags_MapWStringFloat = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapWStringFloat = "MapWStringFloat";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapWStringFloat;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapWStringFloat;
        CompleteTypeDetail detail_MapWStringFloat = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapWStringFloat, ann_custom_MapWStringFloat, type_name_MapWStringFloat.to_string());
        CompleteStructHeader header_MapWStringFloat;
        header_MapWStringFloat = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapWStringFloat);
        CompleteStructMemberSeq member_seq_MapWStringFloat;
        {
            TypeIdentifierPair type_ids_var_map_wstring_float;
            ReturnCode_t return_code_var_map_wstring_float {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_wstring_float =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_unbounded_float_unbounded", type_ids_var_map_wstring_float);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_float)
            {
                return_code_var_map_wstring_float =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_float", type_ids_var_map_wstring_float);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_float)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_wstring_unbounded_float_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_unbounded_float_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_float, element_identifier_anonymous_map_anonymous_wstring_unbounded_float_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_unbounded_float_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_float_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_wstring_float =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_wstring_float);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_float)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_wstring_float, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_wstring_unbounded_float_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_unbounded_float_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_float, key_identifier_anonymous_map_anonymous_wstring_unbounded_float_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_unbounded_float_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_float_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_unbounded_float_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_unbounded_float_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_float_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_float_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_float_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_float_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_float_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_float_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_float_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_float_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_float_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_float_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_float_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_unbounded_float_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_unbounded_float_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_unbounded_float_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_unbounded_float_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_unbounded_float_unbounded, element_flags_anonymous_map_anonymous_wstring_unbounded_float_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_unbounded_float_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_unbounded_float_unbounded), key_flags_anonymous_map_anonymous_wstring_unbounded_float_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_unbounded_float_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_unbounded_float_unbounded", type_ids_var_map_wstring_float))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_unbounded_float_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_wstring_float = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_wstring_float = 0x00000000;
            bool common_var_map_wstring_float_ec {false};
            CommonStructMember common_var_map_wstring_float {TypeObjectUtils::build_common_struct_member(member_id_var_map_wstring_float, member_flags_var_map_wstring_float, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_float, common_var_map_wstring_float_ec))};
            if (!common_var_map_wstring_float_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_wstring_float member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_wstring_float = "var_map_wstring_float";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_wstring_float;
            ann_custom_MapWStringFloat.reset();
            CompleteMemberDetail detail_var_map_wstring_float = TypeObjectUtils::build_complete_member_detail(name_var_map_wstring_float, member_ann_builtin_var_map_wstring_float, ann_custom_MapWStringFloat);
            CompleteStructMember member_var_map_wstring_float = TypeObjectUtils::build_complete_struct_member(common_var_map_wstring_float, detail_var_map_wstring_float);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapWStringFloat, member_var_map_wstring_float);
        }
        CompleteStructType struct_type_MapWStringFloat = TypeObjectUtils::build_complete_struct_type(struct_flags_MapWStringFloat, header_MapWStringFloat, member_seq_MapWStringFloat);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapWStringFloat, type_name_MapWStringFloat.to_string(), type_ids_MapWStringFloat))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapWStringFloat already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapWStringDouble_type_identifier(
        TypeIdentifierPair& type_ids_MapWStringDouble)
{

    ReturnCode_t return_code_MapWStringDouble {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapWStringDouble =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapWStringDouble", type_ids_MapWStringDouble);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapWStringDouble)
    {
        StructTypeFlag struct_flags_MapWStringDouble = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapWStringDouble = "MapWStringDouble";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapWStringDouble;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapWStringDouble;
        CompleteTypeDetail detail_MapWStringDouble = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapWStringDouble, ann_custom_MapWStringDouble, type_name_MapWStringDouble.to_string());
        CompleteStructHeader header_MapWStringDouble;
        header_MapWStringDouble = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapWStringDouble);
        CompleteStructMemberSeq member_seq_MapWStringDouble;
        {
            TypeIdentifierPair type_ids_var_map_wstring_double;
            ReturnCode_t return_code_var_map_wstring_double {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_wstring_double =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_unbounded_double_unbounded", type_ids_var_map_wstring_double);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_double)
            {
                return_code_var_map_wstring_double =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_double", type_ids_var_map_wstring_double);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_double)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_wstring_unbounded_double_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_unbounded_double_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_double, element_identifier_anonymous_map_anonymous_wstring_unbounded_double_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_unbounded_double_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_double_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_wstring_double =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_wstring_double);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_double)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_wstring_double, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_wstring_unbounded_double_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_unbounded_double_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_double, key_identifier_anonymous_map_anonymous_wstring_unbounded_double_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_unbounded_double_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_double_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_unbounded_double_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_unbounded_double_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_double_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_double_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_double_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_double_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_double_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_double_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_double_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_double_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_double_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_double_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_double_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_unbounded_double_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_unbounded_double_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_unbounded_double_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_unbounded_double_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_unbounded_double_unbounded, element_flags_anonymous_map_anonymous_wstring_unbounded_double_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_unbounded_double_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_unbounded_double_unbounded), key_flags_anonymous_map_anonymous_wstring_unbounded_double_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_unbounded_double_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_unbounded_double_unbounded", type_ids_var_map_wstring_double))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_unbounded_double_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_wstring_double = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_wstring_double = 0x00000000;
            bool common_var_map_wstring_double_ec {false};
            CommonStructMember common_var_map_wstring_double {TypeObjectUtils::build_common_struct_member(member_id_var_map_wstring_double, member_flags_var_map_wstring_double, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_double, common_var_map_wstring_double_ec))};
            if (!common_var_map_wstring_double_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_wstring_double member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_wstring_double = "var_map_wstring_double";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_wstring_double;
            ann_custom_MapWStringDouble.reset();
            CompleteMemberDetail detail_var_map_wstring_double = TypeObjectUtils::build_complete_member_detail(name_var_map_wstring_double, member_ann_builtin_var_map_wstring_double, ann_custom_MapWStringDouble);
            CompleteStructMember member_var_map_wstring_double = TypeObjectUtils::build_complete_struct_member(common_var_map_wstring_double, detail_var_map_wstring_double);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapWStringDouble, member_var_map_wstring_double);
        }
        CompleteStructType struct_type_MapWStringDouble = TypeObjectUtils::build_complete_struct_type(struct_flags_MapWStringDouble, header_MapWStringDouble, member_seq_MapWStringDouble);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapWStringDouble, type_name_MapWStringDouble.to_string(), type_ids_MapWStringDouble))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapWStringDouble already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapWStringLongDouble_type_identifier(
        TypeIdentifierPair& type_ids_MapWStringLongDouble)
{

    ReturnCode_t return_code_MapWStringLongDouble {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapWStringLongDouble =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapWStringLongDouble", type_ids_MapWStringLongDouble);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapWStringLongDouble)
    {
        StructTypeFlag struct_flags_MapWStringLongDouble = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapWStringLongDouble = "MapWStringLongDouble";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapWStringLongDouble;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapWStringLongDouble;
        CompleteTypeDetail detail_MapWStringLongDouble = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapWStringLongDouble, ann_custom_MapWStringLongDouble, type_name_MapWStringLongDouble.to_string());
        CompleteStructHeader header_MapWStringLongDouble;
        header_MapWStringLongDouble = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapWStringLongDouble);
        CompleteStructMemberSeq member_seq_MapWStringLongDouble;
        {
            TypeIdentifierPair type_ids_var_map_wstring_longdouble;
            ReturnCode_t return_code_var_map_wstring_longdouble {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_wstring_longdouble =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded", type_ids_var_map_wstring_longdouble);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_longdouble)
            {
                return_code_var_map_wstring_longdouble =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_longdouble", type_ids_var_map_wstring_longdouble);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_longdouble)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_longdouble, element_identifier_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_wstring_longdouble =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_wstring_longdouble);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_longdouble)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_wstring_longdouble, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_longdouble, key_identifier_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded, element_flags_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded), key_flags_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded", type_ids_var_map_wstring_longdouble))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_unbounded_longdouble_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_wstring_longdouble = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_wstring_longdouble = 0x00000000;
            bool common_var_map_wstring_longdouble_ec {false};
            CommonStructMember common_var_map_wstring_longdouble {TypeObjectUtils::build_common_struct_member(member_id_var_map_wstring_longdouble, member_flags_var_map_wstring_longdouble, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_longdouble, common_var_map_wstring_longdouble_ec))};
            if (!common_var_map_wstring_longdouble_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_wstring_longdouble member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_wstring_longdouble = "var_map_wstring_longdouble";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_wstring_longdouble;
            ann_custom_MapWStringLongDouble.reset();
            CompleteMemberDetail detail_var_map_wstring_longdouble = TypeObjectUtils::build_complete_member_detail(name_var_map_wstring_longdouble, member_ann_builtin_var_map_wstring_longdouble, ann_custom_MapWStringLongDouble);
            CompleteStructMember member_var_map_wstring_longdouble = TypeObjectUtils::build_complete_struct_member(common_var_map_wstring_longdouble, detail_var_map_wstring_longdouble);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapWStringLongDouble, member_var_map_wstring_longdouble);
        }
        CompleteStructType struct_type_MapWStringLongDouble = TypeObjectUtils::build_complete_struct_type(struct_flags_MapWStringLongDouble, header_MapWStringLongDouble, member_seq_MapWStringLongDouble);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapWStringLongDouble, type_name_MapWStringLongDouble.to_string(), type_ids_MapWStringLongDouble))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapWStringLongDouble already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapWStringBoolean_type_identifier(
        TypeIdentifierPair& type_ids_MapWStringBoolean)
{

    ReturnCode_t return_code_MapWStringBoolean {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapWStringBoolean =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapWStringBoolean", type_ids_MapWStringBoolean);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapWStringBoolean)
    {
        StructTypeFlag struct_flags_MapWStringBoolean = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapWStringBoolean = "MapWStringBoolean";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapWStringBoolean;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapWStringBoolean;
        CompleteTypeDetail detail_MapWStringBoolean = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapWStringBoolean, ann_custom_MapWStringBoolean, type_name_MapWStringBoolean.to_string());
        CompleteStructHeader header_MapWStringBoolean;
        header_MapWStringBoolean = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapWStringBoolean);
        CompleteStructMemberSeq member_seq_MapWStringBoolean;
        {
            TypeIdentifierPair type_ids_var_map_wstring_boolean;
            ReturnCode_t return_code_var_map_wstring_boolean {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_wstring_boolean =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_unbounded_bool_unbounded", type_ids_var_map_wstring_boolean);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_boolean)
            {
                return_code_var_map_wstring_boolean =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_bool", type_ids_var_map_wstring_boolean);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_boolean)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_wstring_unbounded_bool_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_unbounded_bool_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_boolean, element_identifier_anonymous_map_anonymous_wstring_unbounded_bool_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_unbounded_bool_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_bool_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_wstring_boolean =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_wstring_boolean);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_boolean)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_wstring_boolean, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_wstring_unbounded_bool_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_unbounded_bool_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_boolean, key_identifier_anonymous_map_anonymous_wstring_unbounded_bool_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_unbounded_bool_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_bool_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_unbounded_bool_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_unbounded_bool_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_bool_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_bool_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_bool_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_bool_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_bool_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_bool_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_bool_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_bool_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_bool_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_bool_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_bool_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_unbounded_bool_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_unbounded_bool_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_unbounded_bool_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_unbounded_bool_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_unbounded_bool_unbounded, element_flags_anonymous_map_anonymous_wstring_unbounded_bool_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_unbounded_bool_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_unbounded_bool_unbounded), key_flags_anonymous_map_anonymous_wstring_unbounded_bool_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_unbounded_bool_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_unbounded_bool_unbounded", type_ids_var_map_wstring_boolean))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_unbounded_bool_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_wstring_boolean = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_wstring_boolean = 0x00000000;
            bool common_var_map_wstring_boolean_ec {false};
            CommonStructMember common_var_map_wstring_boolean {TypeObjectUtils::build_common_struct_member(member_id_var_map_wstring_boolean, member_flags_var_map_wstring_boolean, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_boolean, common_var_map_wstring_boolean_ec))};
            if (!common_var_map_wstring_boolean_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_wstring_boolean member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_wstring_boolean = "var_map_wstring_boolean";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_wstring_boolean;
            ann_custom_MapWStringBoolean.reset();
            CompleteMemberDetail detail_var_map_wstring_boolean = TypeObjectUtils::build_complete_member_detail(name_var_map_wstring_boolean, member_ann_builtin_var_map_wstring_boolean, ann_custom_MapWStringBoolean);
            CompleteStructMember member_var_map_wstring_boolean = TypeObjectUtils::build_complete_struct_member(common_var_map_wstring_boolean, detail_var_map_wstring_boolean);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapWStringBoolean, member_var_map_wstring_boolean);
        }
        CompleteStructType struct_type_MapWStringBoolean = TypeObjectUtils::build_complete_struct_type(struct_flags_MapWStringBoolean, header_MapWStringBoolean, member_seq_MapWStringBoolean);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapWStringBoolean, type_name_MapWStringBoolean.to_string(), type_ids_MapWStringBoolean))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapWStringBoolean already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapWStringOctet_type_identifier(
        TypeIdentifierPair& type_ids_MapWStringOctet)
{

    ReturnCode_t return_code_MapWStringOctet {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapWStringOctet =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapWStringOctet", type_ids_MapWStringOctet);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapWStringOctet)
    {
        StructTypeFlag struct_flags_MapWStringOctet = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapWStringOctet = "MapWStringOctet";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapWStringOctet;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapWStringOctet;
        CompleteTypeDetail detail_MapWStringOctet = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapWStringOctet, ann_custom_MapWStringOctet, type_name_MapWStringOctet.to_string());
        CompleteStructHeader header_MapWStringOctet;
        header_MapWStringOctet = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapWStringOctet);
        CompleteStructMemberSeq member_seq_MapWStringOctet;
        {
            TypeIdentifierPair type_ids_var_map_wstring_octet;
            ReturnCode_t return_code_var_map_wstring_octet {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_wstring_octet =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_unbounded_byte_unbounded", type_ids_var_map_wstring_octet);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_octet)
            {
                return_code_var_map_wstring_octet =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_byte", type_ids_var_map_wstring_octet);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_octet)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_wstring_unbounded_byte_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_unbounded_byte_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_octet, element_identifier_anonymous_map_anonymous_wstring_unbounded_byte_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_unbounded_byte_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_byte_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_wstring_octet =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_wstring_octet);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_octet)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_wstring_octet, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_wstring_unbounded_byte_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_unbounded_byte_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_octet, key_identifier_anonymous_map_anonymous_wstring_unbounded_byte_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_unbounded_byte_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_byte_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_unbounded_byte_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_unbounded_byte_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_byte_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_byte_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_byte_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_byte_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_byte_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_byte_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_byte_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_byte_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_byte_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_byte_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_byte_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_unbounded_byte_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_unbounded_byte_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_unbounded_byte_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_unbounded_byte_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_unbounded_byte_unbounded, element_flags_anonymous_map_anonymous_wstring_unbounded_byte_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_unbounded_byte_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_unbounded_byte_unbounded), key_flags_anonymous_map_anonymous_wstring_unbounded_byte_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_unbounded_byte_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_unbounded_byte_unbounded", type_ids_var_map_wstring_octet))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_unbounded_byte_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_wstring_octet = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_wstring_octet = 0x00000000;
            bool common_var_map_wstring_octet_ec {false};
            CommonStructMember common_var_map_wstring_octet {TypeObjectUtils::build_common_struct_member(member_id_var_map_wstring_octet, member_flags_var_map_wstring_octet, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_octet, common_var_map_wstring_octet_ec))};
            if (!common_var_map_wstring_octet_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_wstring_octet member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_wstring_octet = "var_map_wstring_octet";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_wstring_octet;
            ann_custom_MapWStringOctet.reset();
            CompleteMemberDetail detail_var_map_wstring_octet = TypeObjectUtils::build_complete_member_detail(name_var_map_wstring_octet, member_ann_builtin_var_map_wstring_octet, ann_custom_MapWStringOctet);
            CompleteStructMember member_var_map_wstring_octet = TypeObjectUtils::build_complete_struct_member(common_var_map_wstring_octet, detail_var_map_wstring_octet);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapWStringOctet, member_var_map_wstring_octet);
        }
        CompleteStructType struct_type_MapWStringOctet = TypeObjectUtils::build_complete_struct_type(struct_flags_MapWStringOctet, header_MapWStringOctet, member_seq_MapWStringOctet);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapWStringOctet, type_name_MapWStringOctet.to_string(), type_ids_MapWStringOctet))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapWStringOctet already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapWStringChar_type_identifier(
        TypeIdentifierPair& type_ids_MapWStringChar)
{

    ReturnCode_t return_code_MapWStringChar {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapWStringChar =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapWStringChar", type_ids_MapWStringChar);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapWStringChar)
    {
        StructTypeFlag struct_flags_MapWStringChar = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapWStringChar = "MapWStringChar";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapWStringChar;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapWStringChar;
        CompleteTypeDetail detail_MapWStringChar = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapWStringChar, ann_custom_MapWStringChar, type_name_MapWStringChar.to_string());
        CompleteStructHeader header_MapWStringChar;
        header_MapWStringChar = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapWStringChar);
        CompleteStructMemberSeq member_seq_MapWStringChar;
        {
            TypeIdentifierPair type_ids_var_map_wstring_char;
            ReturnCode_t return_code_var_map_wstring_char {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_wstring_char =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_unbounded_char_unbounded", type_ids_var_map_wstring_char);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_char)
            {
                return_code_var_map_wstring_char =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_char", type_ids_var_map_wstring_char);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_char)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_wstring_unbounded_char_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_unbounded_char_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_char, element_identifier_anonymous_map_anonymous_wstring_unbounded_char_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_unbounded_char_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_char_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_wstring_char =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_wstring_char);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_char)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_wstring_char, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_wstring_unbounded_char_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_unbounded_char_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_char, key_identifier_anonymous_map_anonymous_wstring_unbounded_char_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_unbounded_char_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_char_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_unbounded_char_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_unbounded_char_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_char_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_char_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_char_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_char_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_char_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_char_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_char_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_char_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_char_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_char_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_char_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_unbounded_char_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_unbounded_char_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_unbounded_char_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_unbounded_char_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_unbounded_char_unbounded, element_flags_anonymous_map_anonymous_wstring_unbounded_char_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_unbounded_char_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_unbounded_char_unbounded), key_flags_anonymous_map_anonymous_wstring_unbounded_char_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_unbounded_char_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_unbounded_char_unbounded", type_ids_var_map_wstring_char))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_unbounded_char_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_wstring_char = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_wstring_char = 0x00000000;
            bool common_var_map_wstring_char_ec {false};
            CommonStructMember common_var_map_wstring_char {TypeObjectUtils::build_common_struct_member(member_id_var_map_wstring_char, member_flags_var_map_wstring_char, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_char, common_var_map_wstring_char_ec))};
            if (!common_var_map_wstring_char_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_wstring_char member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_wstring_char = "var_map_wstring_char";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_wstring_char;
            ann_custom_MapWStringChar.reset();
            CompleteMemberDetail detail_var_map_wstring_char = TypeObjectUtils::build_complete_member_detail(name_var_map_wstring_char, member_ann_builtin_var_map_wstring_char, ann_custom_MapWStringChar);
            CompleteStructMember member_var_map_wstring_char = TypeObjectUtils::build_complete_struct_member(common_var_map_wstring_char, detail_var_map_wstring_char);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapWStringChar, member_var_map_wstring_char);
        }
        CompleteStructType struct_type_MapWStringChar = TypeObjectUtils::build_complete_struct_type(struct_flags_MapWStringChar, header_MapWStringChar, member_seq_MapWStringChar);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapWStringChar, type_name_MapWStringChar.to_string(), type_ids_MapWStringChar))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapWStringChar already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapWStringWChar_type_identifier(
        TypeIdentifierPair& type_ids_MapWStringWChar)
{

    ReturnCode_t return_code_MapWStringWChar {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapWStringWChar =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapWStringWChar", type_ids_MapWStringWChar);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapWStringWChar)
    {
        StructTypeFlag struct_flags_MapWStringWChar = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapWStringWChar = "MapWStringWChar";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapWStringWChar;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapWStringWChar;
        CompleteTypeDetail detail_MapWStringWChar = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapWStringWChar, ann_custom_MapWStringWChar, type_name_MapWStringWChar.to_string());
        CompleteStructHeader header_MapWStringWChar;
        header_MapWStringWChar = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapWStringWChar);
        CompleteStructMemberSeq member_seq_MapWStringWChar;
        {
            TypeIdentifierPair type_ids_var_map_wstring_wchar;
            ReturnCode_t return_code_var_map_wstring_wchar {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_wstring_wchar =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded", type_ids_var_map_wstring_wchar);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_wchar)
            {
                return_code_var_map_wstring_wchar =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_wchar_t", type_ids_var_map_wstring_wchar);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_wchar)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_wchar, element_identifier_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_wstring_wchar =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_wstring_wchar);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_wchar)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_wstring_wchar, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_wchar, key_identifier_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded, element_flags_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded), key_flags_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded", type_ids_var_map_wstring_wchar))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_unbounded_wchar_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_wstring_wchar = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_wstring_wchar = 0x00000000;
            bool common_var_map_wstring_wchar_ec {false};
            CommonStructMember common_var_map_wstring_wchar {TypeObjectUtils::build_common_struct_member(member_id_var_map_wstring_wchar, member_flags_var_map_wstring_wchar, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_wchar, common_var_map_wstring_wchar_ec))};
            if (!common_var_map_wstring_wchar_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_wstring_wchar member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_wstring_wchar = "var_map_wstring_wchar";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_wstring_wchar;
            ann_custom_MapWStringWChar.reset();
            CompleteMemberDetail detail_var_map_wstring_wchar = TypeObjectUtils::build_complete_member_detail(name_var_map_wstring_wchar, member_ann_builtin_var_map_wstring_wchar, ann_custom_MapWStringWChar);
            CompleteStructMember member_var_map_wstring_wchar = TypeObjectUtils::build_complete_struct_member(common_var_map_wstring_wchar, detail_var_map_wstring_wchar);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapWStringWChar, member_var_map_wstring_wchar);
        }
        CompleteStructType struct_type_MapWStringWChar = TypeObjectUtils::build_complete_struct_type(struct_flags_MapWStringWChar, header_MapWStringWChar, member_seq_MapWStringWChar);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapWStringWChar, type_name_MapWStringWChar.to_string(), type_ids_MapWStringWChar))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapWStringWChar already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapWStringString_type_identifier(
        TypeIdentifierPair& type_ids_MapWStringString)
{

    ReturnCode_t return_code_MapWStringString {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapWStringString =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapWStringString", type_ids_MapWStringString);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapWStringString)
    {
        StructTypeFlag struct_flags_MapWStringString = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapWStringString = "MapWStringString";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapWStringString;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapWStringString;
        CompleteTypeDetail detail_MapWStringString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapWStringString, ann_custom_MapWStringString, type_name_MapWStringString.to_string());
        CompleteStructHeader header_MapWStringString;
        header_MapWStringString = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapWStringString);
        CompleteStructMemberSeq member_seq_MapWStringString;
        {
            TypeIdentifierPair type_ids_var_map_wstring_string;
            ReturnCode_t return_code_var_map_wstring_string {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_wstring_string =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded", type_ids_var_map_wstring_string);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_string)
            {
                return_code_var_map_wstring_string =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_wstring_string);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_string)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_wstring_string))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_string, element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_wstring_string =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_wstring_string);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_string)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_wstring_string, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_string, key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded, element_flags_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded), key_flags_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded", type_ids_var_map_wstring_string))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_unbounded_anonymous_string_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_wstring_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_wstring_string = 0x00000000;
            bool common_var_map_wstring_string_ec {false};
            CommonStructMember common_var_map_wstring_string {TypeObjectUtils::build_common_struct_member(member_id_var_map_wstring_string, member_flags_var_map_wstring_string, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_string, common_var_map_wstring_string_ec))};
            if (!common_var_map_wstring_string_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_wstring_string member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_wstring_string = "var_map_wstring_string";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_wstring_string;
            ann_custom_MapWStringString.reset();
            CompleteMemberDetail detail_var_map_wstring_string = TypeObjectUtils::build_complete_member_detail(name_var_map_wstring_string, member_ann_builtin_var_map_wstring_string, ann_custom_MapWStringString);
            CompleteStructMember member_var_map_wstring_string = TypeObjectUtils::build_complete_struct_member(common_var_map_wstring_string, detail_var_map_wstring_string);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapWStringString, member_var_map_wstring_string);
        }
        CompleteStructType struct_type_MapWStringString = TypeObjectUtils::build_complete_struct_type(struct_flags_MapWStringString, header_MapWStringString, member_seq_MapWStringString);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapWStringString, type_name_MapWStringString.to_string(), type_ids_MapWStringString))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapWStringString already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapWStringWString_type_identifier(
        TypeIdentifierPair& type_ids_MapWStringWString)
{

    ReturnCode_t return_code_MapWStringWString {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapWStringWString =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapWStringWString", type_ids_MapWStringWString);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapWStringWString)
    {
        StructTypeFlag struct_flags_MapWStringWString = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapWStringWString = "MapWStringWString";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapWStringWString;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapWStringWString;
        CompleteTypeDetail detail_MapWStringWString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapWStringWString, ann_custom_MapWStringWString, type_name_MapWStringWString.to_string());
        CompleteStructHeader header_MapWStringWString;
        header_MapWStringWString = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapWStringWString);
        CompleteStructMemberSeq member_seq_MapWStringWString;
        {
            TypeIdentifierPair type_ids_var_map_wstring_wstring;
            ReturnCode_t return_code_var_map_wstring_wstring {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_wstring_wstring =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded", type_ids_var_map_wstring_wstring);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_wstring)
            {
                return_code_var_map_wstring_wstring =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_wstring_wstring);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_wstring)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_wstring_wstring, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_wstring, element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_wstring_wstring =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_wstring_wstring);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_wstring)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_wstring_wstring, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_wstring, key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded, element_flags_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded), key_flags_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded", type_ids_var_map_wstring_wstring))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_wstring_wstring = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_wstring_wstring = 0x00000000;
            bool common_var_map_wstring_wstring_ec {false};
            CommonStructMember common_var_map_wstring_wstring {TypeObjectUtils::build_common_struct_member(member_id_var_map_wstring_wstring, member_flags_var_map_wstring_wstring, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_wstring, common_var_map_wstring_wstring_ec))};
            if (!common_var_map_wstring_wstring_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_wstring_wstring member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_wstring_wstring = "var_map_wstring_wstring";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_wstring_wstring;
            ann_custom_MapWStringWString.reset();
            CompleteMemberDetail detail_var_map_wstring_wstring = TypeObjectUtils::build_complete_member_detail(name_var_map_wstring_wstring, member_ann_builtin_var_map_wstring_wstring, ann_custom_MapWStringWString);
            CompleteStructMember member_var_map_wstring_wstring = TypeObjectUtils::build_complete_struct_member(common_var_map_wstring_wstring, detail_var_map_wstring_wstring);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapWStringWString, member_var_map_wstring_wstring);
        }
        CompleteStructType struct_type_MapWStringWString = TypeObjectUtils::build_complete_struct_type(struct_flags_MapWStringWString, header_MapWStringWString, member_seq_MapWStringWString);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapWStringWString, type_name_MapWStringWString.to_string(), type_ids_MapWStringWString))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapWStringWString already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapWStringInnerAliasBoundedStringHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapWStringInnerAliasBoundedStringHelper)
{

    ReturnCode_t return_code_MapWStringInnerAliasBoundedStringHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapWStringInnerAliasBoundedStringHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapWStringInnerAliasBoundedStringHelper", type_ids_MapWStringInnerAliasBoundedStringHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapWStringInnerAliasBoundedStringHelper)
    {
        StructTypeFlag struct_flags_MapWStringInnerAliasBoundedStringHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapWStringInnerAliasBoundedStringHelper = "MapWStringInnerAliasBoundedStringHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapWStringInnerAliasBoundedStringHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapWStringInnerAliasBoundedStringHelper;
        CompleteTypeDetail detail_MapWStringInnerAliasBoundedStringHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapWStringInnerAliasBoundedStringHelper, ann_custom_MapWStringInnerAliasBoundedStringHelper, type_name_MapWStringInnerAliasBoundedStringHelper.to_string());
        CompleteStructHeader header_MapWStringInnerAliasBoundedStringHelper;
        header_MapWStringInnerAliasBoundedStringHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapWStringInnerAliasBoundedStringHelper);
        CompleteStructMemberSeq member_seq_MapWStringInnerAliasBoundedStringHelper;
        {
            TypeIdentifierPair type_ids_var_map_wstring_inneraliasboundedstringhelper;
            ReturnCode_t return_code_var_map_wstring_inneraliasboundedstringhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_wstring_inneraliasboundedstringhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded", type_ids_var_map_wstring_inneraliasboundedstringhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_inneraliasboundedstringhelper)
            {
                return_code_var_map_wstring_inneraliasboundedstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_wstring_inneraliasboundedstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_inneraliasboundedstringhelper)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_wstring_inneraliasboundedstringhelper);
                }
                bool element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_inneraliasboundedstringhelper, element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_wstring_inneraliasboundedstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_wstring_inneraliasboundedstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_inneraliasboundedstringhelper)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_wstring_inneraliasboundedstringhelper, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_inneraliasboundedstringhelper, key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded, element_flags_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded), key_flags_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded", type_ids_var_map_wstring_inneraliasboundedstringhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_unbounded_anonymous_string_10_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_wstring_inneraliasboundedstringhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_wstring_inneraliasboundedstringhelper = 0x00000000;
            bool common_var_map_wstring_inneraliasboundedstringhelper_ec {false};
            CommonStructMember common_var_map_wstring_inneraliasboundedstringhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_wstring_inneraliasboundedstringhelper, member_flags_var_map_wstring_inneraliasboundedstringhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_inneraliasboundedstringhelper, common_var_map_wstring_inneraliasboundedstringhelper_ec))};
            if (!common_var_map_wstring_inneraliasboundedstringhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_wstring_inneraliasboundedstringhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_wstring_inneraliasboundedstringhelper = "var_map_wstring_inneraliasboundedstringhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_wstring_inneraliasboundedstringhelper;
            ann_custom_MapWStringInnerAliasBoundedStringHelper.reset();
            CompleteMemberDetail detail_var_map_wstring_inneraliasboundedstringhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_wstring_inneraliasboundedstringhelper, member_ann_builtin_var_map_wstring_inneraliasboundedstringhelper, ann_custom_MapWStringInnerAliasBoundedStringHelper);
            CompleteStructMember member_var_map_wstring_inneraliasboundedstringhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_wstring_inneraliasboundedstringhelper, detail_var_map_wstring_inneraliasboundedstringhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapWStringInnerAliasBoundedStringHelper, member_var_map_wstring_inneraliasboundedstringhelper);
        }
        CompleteStructType struct_type_MapWStringInnerAliasBoundedStringHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapWStringInnerAliasBoundedStringHelper, header_MapWStringInnerAliasBoundedStringHelper, member_seq_MapWStringInnerAliasBoundedStringHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapWStringInnerAliasBoundedStringHelper, type_name_MapWStringInnerAliasBoundedStringHelper.to_string(), type_ids_MapWStringInnerAliasBoundedStringHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapWStringInnerAliasBoundedStringHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapWStringInnerAliasBoundedWStringHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapWStringInnerAliasBoundedWStringHelper)
{

    ReturnCode_t return_code_MapWStringInnerAliasBoundedWStringHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapWStringInnerAliasBoundedWStringHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapWStringInnerAliasBoundedWStringHelper", type_ids_MapWStringInnerAliasBoundedWStringHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapWStringInnerAliasBoundedWStringHelper)
    {
        StructTypeFlag struct_flags_MapWStringInnerAliasBoundedWStringHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapWStringInnerAliasBoundedWStringHelper = "MapWStringInnerAliasBoundedWStringHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapWStringInnerAliasBoundedWStringHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapWStringInnerAliasBoundedWStringHelper;
        CompleteTypeDetail detail_MapWStringInnerAliasBoundedWStringHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapWStringInnerAliasBoundedWStringHelper, ann_custom_MapWStringInnerAliasBoundedWStringHelper, type_name_MapWStringInnerAliasBoundedWStringHelper.to_string());
        CompleteStructHeader header_MapWStringInnerAliasBoundedWStringHelper;
        header_MapWStringInnerAliasBoundedWStringHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapWStringInnerAliasBoundedWStringHelper);
        CompleteStructMemberSeq member_seq_MapWStringInnerAliasBoundedWStringHelper;
        {
            TypeIdentifierPair type_ids_var_map_wstring_inneraliasboundedwstringhelper;
            ReturnCode_t return_code_var_map_wstring_inneraliasboundedwstringhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_wstring_inneraliasboundedwstringhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded", type_ids_var_map_wstring_inneraliasboundedwstringhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_inneraliasboundedwstringhelper)
            {
                return_code_var_map_wstring_inneraliasboundedwstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_wstring_inneraliasboundedwstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_inneraliasboundedwstringhelper)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_wstring_inneraliasboundedwstringhelper);
                }
                bool element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_inneraliasboundedwstringhelper, element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_wstring_inneraliasboundedwstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_wstring_inneraliasboundedwstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_inneraliasboundedwstringhelper)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_wstring_inneraliasboundedwstringhelper, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_inneraliasboundedwstringhelper, key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded, element_flags_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded), key_flags_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded", type_ids_var_map_wstring_inneraliasboundedwstringhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_unbounded_anonymous_wstring_10_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_wstring_inneraliasboundedwstringhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_wstring_inneraliasboundedwstringhelper = 0x00000000;
            bool common_var_map_wstring_inneraliasboundedwstringhelper_ec {false};
            CommonStructMember common_var_map_wstring_inneraliasboundedwstringhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_wstring_inneraliasboundedwstringhelper, member_flags_var_map_wstring_inneraliasboundedwstringhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_inneraliasboundedwstringhelper, common_var_map_wstring_inneraliasboundedwstringhelper_ec))};
            if (!common_var_map_wstring_inneraliasboundedwstringhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_wstring_inneraliasboundedwstringhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_wstring_inneraliasboundedwstringhelper = "var_map_wstring_inneraliasboundedwstringhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_wstring_inneraliasboundedwstringhelper;
            ann_custom_MapWStringInnerAliasBoundedWStringHelper.reset();
            CompleteMemberDetail detail_var_map_wstring_inneraliasboundedwstringhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_wstring_inneraliasboundedwstringhelper, member_ann_builtin_var_map_wstring_inneraliasboundedwstringhelper, ann_custom_MapWStringInnerAliasBoundedWStringHelper);
            CompleteStructMember member_var_map_wstring_inneraliasboundedwstringhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_wstring_inneraliasboundedwstringhelper, detail_var_map_wstring_inneraliasboundedwstringhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapWStringInnerAliasBoundedWStringHelper, member_var_map_wstring_inneraliasboundedwstringhelper);
        }
        CompleteStructType struct_type_MapWStringInnerAliasBoundedWStringHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapWStringInnerAliasBoundedWStringHelper, header_MapWStringInnerAliasBoundedWStringHelper, member_seq_MapWStringInnerAliasBoundedWStringHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapWStringInnerAliasBoundedWStringHelper, type_name_MapWStringInnerAliasBoundedWStringHelper.to_string(), type_ids_MapWStringInnerAliasBoundedWStringHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapWStringInnerAliasBoundedWStringHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapWStringInnerEnumHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapWStringInnerEnumHelper)
{

    ReturnCode_t return_code_MapWStringInnerEnumHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapWStringInnerEnumHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapWStringInnerEnumHelper", type_ids_MapWStringInnerEnumHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapWStringInnerEnumHelper)
    {
        StructTypeFlag struct_flags_MapWStringInnerEnumHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapWStringInnerEnumHelper = "MapWStringInnerEnumHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapWStringInnerEnumHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapWStringInnerEnumHelper;
        CompleteTypeDetail detail_MapWStringInnerEnumHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapWStringInnerEnumHelper, ann_custom_MapWStringInnerEnumHelper, type_name_MapWStringInnerEnumHelper.to_string());
        CompleteStructHeader header_MapWStringInnerEnumHelper;
        header_MapWStringInnerEnumHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapWStringInnerEnumHelper);
        CompleteStructMemberSeq member_seq_MapWStringInnerEnumHelper;
        {
            TypeIdentifierPair type_ids_var_map_wstring_innerenumhelper;
            ReturnCode_t return_code_var_map_wstring_innerenumhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_wstring_innerenumhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded", type_ids_var_map_wstring_innerenumhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_innerenumhelper)
            {
                return_code_var_map_wstring_innerenumhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerEnumHelper", type_ids_var_map_wstring_innerenumhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_innerenumhelper)
                {
                ::register_InnerEnumHelper_type_identifier(type_ids_var_map_wstring_innerenumhelper);
                }
                bool element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_innerenumhelper, element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_wstring_innerenumhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_wstring_innerenumhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_innerenumhelper)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_wstring_innerenumhelper, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_innerenumhelper, key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded, element_flags_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded), key_flags_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded", type_ids_var_map_wstring_innerenumhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_unbounded_InnerEnumHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_wstring_innerenumhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_wstring_innerenumhelper = 0x00000000;
            bool common_var_map_wstring_innerenumhelper_ec {false};
            CommonStructMember common_var_map_wstring_innerenumhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_wstring_innerenumhelper, member_flags_var_map_wstring_innerenumhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_innerenumhelper, common_var_map_wstring_innerenumhelper_ec))};
            if (!common_var_map_wstring_innerenumhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_wstring_innerenumhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_wstring_innerenumhelper = "var_map_wstring_innerenumhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_wstring_innerenumhelper;
            ann_custom_MapWStringInnerEnumHelper.reset();
            CompleteMemberDetail detail_var_map_wstring_innerenumhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_wstring_innerenumhelper, member_ann_builtin_var_map_wstring_innerenumhelper, ann_custom_MapWStringInnerEnumHelper);
            CompleteStructMember member_var_map_wstring_innerenumhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_wstring_innerenumhelper, detail_var_map_wstring_innerenumhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapWStringInnerEnumHelper, member_var_map_wstring_innerenumhelper);
        }
        CompleteStructType struct_type_MapWStringInnerEnumHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapWStringInnerEnumHelper, header_MapWStringInnerEnumHelper, member_seq_MapWStringInnerEnumHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapWStringInnerEnumHelper, type_name_MapWStringInnerEnumHelper.to_string(), type_ids_MapWStringInnerEnumHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapWStringInnerEnumHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapWStringInnerBitMaskHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapWStringInnerBitMaskHelper)
{

    ReturnCode_t return_code_MapWStringInnerBitMaskHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapWStringInnerBitMaskHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapWStringInnerBitMaskHelper", type_ids_MapWStringInnerBitMaskHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapWStringInnerBitMaskHelper)
    {
        StructTypeFlag struct_flags_MapWStringInnerBitMaskHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapWStringInnerBitMaskHelper = "MapWStringInnerBitMaskHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapWStringInnerBitMaskHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapWStringInnerBitMaskHelper;
        CompleteTypeDetail detail_MapWStringInnerBitMaskHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapWStringInnerBitMaskHelper, ann_custom_MapWStringInnerBitMaskHelper, type_name_MapWStringInnerBitMaskHelper.to_string());
        CompleteStructHeader header_MapWStringInnerBitMaskHelper;
        header_MapWStringInnerBitMaskHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapWStringInnerBitMaskHelper);
        CompleteStructMemberSeq member_seq_MapWStringInnerBitMaskHelper;
        {
            TypeIdentifierPair type_ids_var_map_wstring_innerbitmaskhelper;
            ReturnCode_t return_code_var_map_wstring_innerbitmaskhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_wstring_innerbitmaskhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded", type_ids_var_map_wstring_innerbitmaskhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_innerbitmaskhelper)
            {
                return_code_var_map_wstring_innerbitmaskhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerBitMaskHelper", type_ids_var_map_wstring_innerbitmaskhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_innerbitmaskhelper)
                {
                ::register_InnerBitMaskHelper_type_identifier(type_ids_var_map_wstring_innerbitmaskhelper);
                }
                bool element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_innerbitmaskhelper, element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_wstring_innerbitmaskhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_wstring_innerbitmaskhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_innerbitmaskhelper)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_wstring_innerbitmaskhelper, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_innerbitmaskhelper, key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded, element_flags_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded), key_flags_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded", type_ids_var_map_wstring_innerbitmaskhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_unbounded_InnerBitMaskHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_wstring_innerbitmaskhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_wstring_innerbitmaskhelper = 0x00000000;
            bool common_var_map_wstring_innerbitmaskhelper_ec {false};
            CommonStructMember common_var_map_wstring_innerbitmaskhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_wstring_innerbitmaskhelper, member_flags_var_map_wstring_innerbitmaskhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_innerbitmaskhelper, common_var_map_wstring_innerbitmaskhelper_ec))};
            if (!common_var_map_wstring_innerbitmaskhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_wstring_innerbitmaskhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_wstring_innerbitmaskhelper = "var_map_wstring_innerbitmaskhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_wstring_innerbitmaskhelper;
            ann_custom_MapWStringInnerBitMaskHelper.reset();
            CompleteMemberDetail detail_var_map_wstring_innerbitmaskhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_wstring_innerbitmaskhelper, member_ann_builtin_var_map_wstring_innerbitmaskhelper, ann_custom_MapWStringInnerBitMaskHelper);
            CompleteStructMember member_var_map_wstring_innerbitmaskhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_wstring_innerbitmaskhelper, detail_var_map_wstring_innerbitmaskhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapWStringInnerBitMaskHelper, member_var_map_wstring_innerbitmaskhelper);
        }
        CompleteStructType struct_type_MapWStringInnerBitMaskHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapWStringInnerBitMaskHelper, header_MapWStringInnerBitMaskHelper, member_seq_MapWStringInnerBitMaskHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapWStringInnerBitMaskHelper, type_name_MapWStringInnerBitMaskHelper.to_string(), type_ids_MapWStringInnerBitMaskHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapWStringInnerBitMaskHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapWStringInnerAliasHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapWStringInnerAliasHelper)
{

    ReturnCode_t return_code_MapWStringInnerAliasHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapWStringInnerAliasHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapWStringInnerAliasHelper", type_ids_MapWStringInnerAliasHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapWStringInnerAliasHelper)
    {
        StructTypeFlag struct_flags_MapWStringInnerAliasHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapWStringInnerAliasHelper = "MapWStringInnerAliasHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapWStringInnerAliasHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapWStringInnerAliasHelper;
        CompleteTypeDetail detail_MapWStringInnerAliasHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapWStringInnerAliasHelper, ann_custom_MapWStringInnerAliasHelper, type_name_MapWStringInnerAliasHelper.to_string());
        CompleteStructHeader header_MapWStringInnerAliasHelper;
        header_MapWStringInnerAliasHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapWStringInnerAliasHelper);
        CompleteStructMemberSeq member_seq_MapWStringInnerAliasHelper;
        {
            TypeIdentifierPair type_ids_var_map_wstring_inneraliashelper;
            ReturnCode_t return_code_var_map_wstring_inneraliashelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_wstring_inneraliashelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded", type_ids_var_map_wstring_inneraliashelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_inneraliashelper)
            {
                return_code_var_map_wstring_inneraliashelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerAliasHelper", type_ids_var_map_wstring_inneraliashelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_inneraliashelper)
                {
                ::register_InnerAliasHelper_type_identifier(type_ids_var_map_wstring_inneraliashelper);
                }
                bool element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_inneraliashelper, element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_wstring_inneraliashelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_wstring_inneraliashelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_inneraliashelper)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_wstring_inneraliashelper, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_inneraliashelper, key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded, element_flags_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded), key_flags_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded", type_ids_var_map_wstring_inneraliashelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_unbounded_InnerAliasHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_wstring_inneraliashelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_wstring_inneraliashelper = 0x00000000;
            bool common_var_map_wstring_inneraliashelper_ec {false};
            CommonStructMember common_var_map_wstring_inneraliashelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_wstring_inneraliashelper, member_flags_var_map_wstring_inneraliashelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_inneraliashelper, common_var_map_wstring_inneraliashelper_ec))};
            if (!common_var_map_wstring_inneraliashelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_wstring_inneraliashelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_wstring_inneraliashelper = "var_map_wstring_inneraliashelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_wstring_inneraliashelper;
            ann_custom_MapWStringInnerAliasHelper.reset();
            CompleteMemberDetail detail_var_map_wstring_inneraliashelper = TypeObjectUtils::build_complete_member_detail(name_var_map_wstring_inneraliashelper, member_ann_builtin_var_map_wstring_inneraliashelper, ann_custom_MapWStringInnerAliasHelper);
            CompleteStructMember member_var_map_wstring_inneraliashelper = TypeObjectUtils::build_complete_struct_member(common_var_map_wstring_inneraliashelper, detail_var_map_wstring_inneraliashelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapWStringInnerAliasHelper, member_var_map_wstring_inneraliashelper);
        }
        CompleteStructType struct_type_MapWStringInnerAliasHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapWStringInnerAliasHelper, header_MapWStringInnerAliasHelper, member_seq_MapWStringInnerAliasHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapWStringInnerAliasHelper, type_name_MapWStringInnerAliasHelper.to_string(), type_ids_MapWStringInnerAliasHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapWStringInnerAliasHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapWStringInnerAliasArrayHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapWStringInnerAliasArrayHelper)
{

    ReturnCode_t return_code_MapWStringInnerAliasArrayHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapWStringInnerAliasArrayHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapWStringInnerAliasArrayHelper", type_ids_MapWStringInnerAliasArrayHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapWStringInnerAliasArrayHelper)
    {
        StructTypeFlag struct_flags_MapWStringInnerAliasArrayHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapWStringInnerAliasArrayHelper = "MapWStringInnerAliasArrayHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapWStringInnerAliasArrayHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapWStringInnerAliasArrayHelper;
        CompleteTypeDetail detail_MapWStringInnerAliasArrayHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapWStringInnerAliasArrayHelper, ann_custom_MapWStringInnerAliasArrayHelper, type_name_MapWStringInnerAliasArrayHelper.to_string());
        CompleteStructHeader header_MapWStringInnerAliasArrayHelper;
        header_MapWStringInnerAliasArrayHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapWStringInnerAliasArrayHelper);
        CompleteStructMemberSeq member_seq_MapWStringInnerAliasArrayHelper;
        {
            TypeIdentifierPair type_ids_var_map_wstring_inneraliasarrayhelper;
            ReturnCode_t return_code_var_map_wstring_inneraliasarrayhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_wstring_inneraliasarrayhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded", type_ids_var_map_wstring_inneraliasarrayhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_inneraliasarrayhelper)
            {
                return_code_var_map_wstring_inneraliasarrayhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_array_helper", type_ids_var_map_wstring_inneraliasarrayhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_inneraliasarrayhelper)
                {
                ::register_Inner_alias_array_helper_type_identifier(type_ids_var_map_wstring_inneraliasarrayhelper);
                }
                bool element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_inneraliasarrayhelper, element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_wstring_inneraliasarrayhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_wstring_inneraliasarrayhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_inneraliasarrayhelper)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_wstring_inneraliasarrayhelper, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_inneraliasarrayhelper, key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded, element_flags_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded), key_flags_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded", type_ids_var_map_wstring_inneraliasarrayhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_unbounded_anonymous_array_int16_t_2_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_wstring_inneraliasarrayhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_wstring_inneraliasarrayhelper = 0x00000000;
            bool common_var_map_wstring_inneraliasarrayhelper_ec {false};
            CommonStructMember common_var_map_wstring_inneraliasarrayhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_wstring_inneraliasarrayhelper, member_flags_var_map_wstring_inneraliasarrayhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_inneraliasarrayhelper, common_var_map_wstring_inneraliasarrayhelper_ec))};
            if (!common_var_map_wstring_inneraliasarrayhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_wstring_inneraliasarrayhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_wstring_inneraliasarrayhelper = "var_map_wstring_inneraliasarrayhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_wstring_inneraliasarrayhelper;
            ann_custom_MapWStringInnerAliasArrayHelper.reset();
            CompleteMemberDetail detail_var_map_wstring_inneraliasarrayhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_wstring_inneraliasarrayhelper, member_ann_builtin_var_map_wstring_inneraliasarrayhelper, ann_custom_MapWStringInnerAliasArrayHelper);
            CompleteStructMember member_var_map_wstring_inneraliasarrayhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_wstring_inneraliasarrayhelper, detail_var_map_wstring_inneraliasarrayhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapWStringInnerAliasArrayHelper, member_var_map_wstring_inneraliasarrayhelper);
        }
        CompleteStructType struct_type_MapWStringInnerAliasArrayHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapWStringInnerAliasArrayHelper, header_MapWStringInnerAliasArrayHelper, member_seq_MapWStringInnerAliasArrayHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapWStringInnerAliasArrayHelper, type_name_MapWStringInnerAliasArrayHelper.to_string(), type_ids_MapWStringInnerAliasArrayHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapWStringInnerAliasArrayHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapWStringInnerAliasSequenceHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapWStringInnerAliasSequenceHelper)
{

    ReturnCode_t return_code_MapWStringInnerAliasSequenceHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapWStringInnerAliasSequenceHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapWStringInnerAliasSequenceHelper", type_ids_MapWStringInnerAliasSequenceHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapWStringInnerAliasSequenceHelper)
    {
        StructTypeFlag struct_flags_MapWStringInnerAliasSequenceHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapWStringInnerAliasSequenceHelper = "MapWStringInnerAliasSequenceHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapWStringInnerAliasSequenceHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapWStringInnerAliasSequenceHelper;
        CompleteTypeDetail detail_MapWStringInnerAliasSequenceHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapWStringInnerAliasSequenceHelper, ann_custom_MapWStringInnerAliasSequenceHelper, type_name_MapWStringInnerAliasSequenceHelper.to_string());
        CompleteStructHeader header_MapWStringInnerAliasSequenceHelper;
        header_MapWStringInnerAliasSequenceHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapWStringInnerAliasSequenceHelper);
        CompleteStructMemberSeq member_seq_MapWStringInnerAliasSequenceHelper;
        {
            TypeIdentifierPair type_ids_var_map_wstring_inneraliassequencehelper;
            ReturnCode_t return_code_var_map_wstring_inneraliassequencehelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_wstring_inneraliassequencehelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded", type_ids_var_map_wstring_inneraliassequencehelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_inneraliassequencehelper)
            {
                return_code_var_map_wstring_inneraliassequencehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_sequence_helper", type_ids_var_map_wstring_inneraliassequencehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_inneraliassequencehelper)
                {
                ::register_Inner_alias_sequence_helper_type_identifier(type_ids_var_map_wstring_inneraliassequencehelper);
                }
                bool element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_inneraliassequencehelper, element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_wstring_inneraliassequencehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_wstring_inneraliassequencehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_inneraliassequencehelper)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_wstring_inneraliassequencehelper, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_inneraliassequencehelper, key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded, element_flags_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded), key_flags_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded", type_ids_var_map_wstring_inneraliassequencehelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_unbounded_anonymous_sequence_int16_t_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_wstring_inneraliassequencehelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_wstring_inneraliassequencehelper = 0x00000000;
            bool common_var_map_wstring_inneraliassequencehelper_ec {false};
            CommonStructMember common_var_map_wstring_inneraliassequencehelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_wstring_inneraliassequencehelper, member_flags_var_map_wstring_inneraliassequencehelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_inneraliassequencehelper, common_var_map_wstring_inneraliassequencehelper_ec))};
            if (!common_var_map_wstring_inneraliassequencehelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_wstring_inneraliassequencehelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_wstring_inneraliassequencehelper = "var_map_wstring_inneraliassequencehelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_wstring_inneraliassequencehelper;
            ann_custom_MapWStringInnerAliasSequenceHelper.reset();
            CompleteMemberDetail detail_var_map_wstring_inneraliassequencehelper = TypeObjectUtils::build_complete_member_detail(name_var_map_wstring_inneraliassequencehelper, member_ann_builtin_var_map_wstring_inneraliassequencehelper, ann_custom_MapWStringInnerAliasSequenceHelper);
            CompleteStructMember member_var_map_wstring_inneraliassequencehelper = TypeObjectUtils::build_complete_struct_member(common_var_map_wstring_inneraliassequencehelper, detail_var_map_wstring_inneraliassequencehelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapWStringInnerAliasSequenceHelper, member_var_map_wstring_inneraliassequencehelper);
        }
        CompleteStructType struct_type_MapWStringInnerAliasSequenceHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapWStringInnerAliasSequenceHelper, header_MapWStringInnerAliasSequenceHelper, member_seq_MapWStringInnerAliasSequenceHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapWStringInnerAliasSequenceHelper, type_name_MapWStringInnerAliasSequenceHelper.to_string(), type_ids_MapWStringInnerAliasSequenceHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapWStringInnerAliasSequenceHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapWStringInnerAliasMapHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapWStringInnerAliasMapHelper)
{

    ReturnCode_t return_code_MapWStringInnerAliasMapHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapWStringInnerAliasMapHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapWStringInnerAliasMapHelper", type_ids_MapWStringInnerAliasMapHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapWStringInnerAliasMapHelper)
    {
        StructTypeFlag struct_flags_MapWStringInnerAliasMapHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapWStringInnerAliasMapHelper = "MapWStringInnerAliasMapHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapWStringInnerAliasMapHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapWStringInnerAliasMapHelper;
        CompleteTypeDetail detail_MapWStringInnerAliasMapHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapWStringInnerAliasMapHelper, ann_custom_MapWStringInnerAliasMapHelper, type_name_MapWStringInnerAliasMapHelper.to_string());
        CompleteStructHeader header_MapWStringInnerAliasMapHelper;
        header_MapWStringInnerAliasMapHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapWStringInnerAliasMapHelper);
        CompleteStructMemberSeq member_seq_MapWStringInnerAliasMapHelper;
        {
            TypeIdentifierPair type_ids_var_map_wstring_inneraliasmaphelper;
            ReturnCode_t return_code_var_map_wstring_inneraliasmaphelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_wstring_inneraliasmaphelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded", type_ids_var_map_wstring_inneraliasmaphelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_inneraliasmaphelper)
            {
                return_code_var_map_wstring_inneraliasmaphelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_map_helper", type_ids_var_map_wstring_inneraliasmaphelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_inneraliasmaphelper)
                {
                ::register_Inner_alias_map_helper_type_identifier(type_ids_var_map_wstring_inneraliasmaphelper);
                }
                bool element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_inneraliasmaphelper, element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_wstring_inneraliasmaphelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_wstring_inneraliasmaphelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_inneraliasmaphelper)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_wstring_inneraliasmaphelper, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_inneraliasmaphelper, key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded, element_flags_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded), key_flags_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded", type_ids_var_map_wstring_inneraliasmaphelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_unbounded_anonymous_map_int32_t_int32_t_0_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_wstring_inneraliasmaphelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_wstring_inneraliasmaphelper = 0x00000000;
            bool common_var_map_wstring_inneraliasmaphelper_ec {false};
            CommonStructMember common_var_map_wstring_inneraliasmaphelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_wstring_inneraliasmaphelper, member_flags_var_map_wstring_inneraliasmaphelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_inneraliasmaphelper, common_var_map_wstring_inneraliasmaphelper_ec))};
            if (!common_var_map_wstring_inneraliasmaphelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_wstring_inneraliasmaphelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_wstring_inneraliasmaphelper = "var_map_wstring_inneraliasmaphelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_wstring_inneraliasmaphelper;
            ann_custom_MapWStringInnerAliasMapHelper.reset();
            CompleteMemberDetail detail_var_map_wstring_inneraliasmaphelper = TypeObjectUtils::build_complete_member_detail(name_var_map_wstring_inneraliasmaphelper, member_ann_builtin_var_map_wstring_inneraliasmaphelper, ann_custom_MapWStringInnerAliasMapHelper);
            CompleteStructMember member_var_map_wstring_inneraliasmaphelper = TypeObjectUtils::build_complete_struct_member(common_var_map_wstring_inneraliasmaphelper, detail_var_map_wstring_inneraliasmaphelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapWStringInnerAliasMapHelper, member_var_map_wstring_inneraliasmaphelper);
        }
        CompleteStructType struct_type_MapWStringInnerAliasMapHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapWStringInnerAliasMapHelper, header_MapWStringInnerAliasMapHelper, member_seq_MapWStringInnerAliasMapHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapWStringInnerAliasMapHelper, type_name_MapWStringInnerAliasMapHelper.to_string(), type_ids_MapWStringInnerAliasMapHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapWStringInnerAliasMapHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapWStringInnerUnionHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapWStringInnerUnionHelper)
{

    ReturnCode_t return_code_MapWStringInnerUnionHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapWStringInnerUnionHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapWStringInnerUnionHelper", type_ids_MapWStringInnerUnionHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapWStringInnerUnionHelper)
    {
        StructTypeFlag struct_flags_MapWStringInnerUnionHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapWStringInnerUnionHelper = "MapWStringInnerUnionHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapWStringInnerUnionHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapWStringInnerUnionHelper;
        CompleteTypeDetail detail_MapWStringInnerUnionHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapWStringInnerUnionHelper, ann_custom_MapWStringInnerUnionHelper, type_name_MapWStringInnerUnionHelper.to_string());
        CompleteStructHeader header_MapWStringInnerUnionHelper;
        header_MapWStringInnerUnionHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapWStringInnerUnionHelper);
        CompleteStructMemberSeq member_seq_MapWStringInnerUnionHelper;
        {
            TypeIdentifierPair type_ids_var_map_wstring_innerunionhelper;
            ReturnCode_t return_code_var_map_wstring_innerunionhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_wstring_innerunionhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded", type_ids_var_map_wstring_innerunionhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_innerunionhelper)
            {
                return_code_var_map_wstring_innerunionhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerUnionHelper", type_ids_var_map_wstring_innerunionhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_innerunionhelper)
                {
                ::register_InnerUnionHelper_type_identifier(type_ids_var_map_wstring_innerunionhelper);
                }
                bool element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_innerunionhelper, element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_wstring_innerunionhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_wstring_innerunionhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_innerunionhelper)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_wstring_innerunionhelper, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_innerunionhelper, key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded, element_flags_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded), key_flags_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded", type_ids_var_map_wstring_innerunionhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_unbounded_InnerUnionHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_wstring_innerunionhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_wstring_innerunionhelper = 0x00000000;
            bool common_var_map_wstring_innerunionhelper_ec {false};
            CommonStructMember common_var_map_wstring_innerunionhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_wstring_innerunionhelper, member_flags_var_map_wstring_innerunionhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_innerunionhelper, common_var_map_wstring_innerunionhelper_ec))};
            if (!common_var_map_wstring_innerunionhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_wstring_innerunionhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_wstring_innerunionhelper = "var_map_wstring_innerunionhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_wstring_innerunionhelper;
            ann_custom_MapWStringInnerUnionHelper.reset();
            CompleteMemberDetail detail_var_map_wstring_innerunionhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_wstring_innerunionhelper, member_ann_builtin_var_map_wstring_innerunionhelper, ann_custom_MapWStringInnerUnionHelper);
            CompleteStructMember member_var_map_wstring_innerunionhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_wstring_innerunionhelper, detail_var_map_wstring_innerunionhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapWStringInnerUnionHelper, member_var_map_wstring_innerunionhelper);
        }
        CompleteStructType struct_type_MapWStringInnerUnionHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapWStringInnerUnionHelper, header_MapWStringInnerUnionHelper, member_seq_MapWStringInnerUnionHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapWStringInnerUnionHelper, type_name_MapWStringInnerUnionHelper.to_string(), type_ids_MapWStringInnerUnionHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapWStringInnerUnionHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapWStringInnerStructureHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapWStringInnerStructureHelper)
{

    ReturnCode_t return_code_MapWStringInnerStructureHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapWStringInnerStructureHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapWStringInnerStructureHelper", type_ids_MapWStringInnerStructureHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapWStringInnerStructureHelper)
    {
        StructTypeFlag struct_flags_MapWStringInnerStructureHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapWStringInnerStructureHelper = "MapWStringInnerStructureHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapWStringInnerStructureHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapWStringInnerStructureHelper;
        CompleteTypeDetail detail_MapWStringInnerStructureHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapWStringInnerStructureHelper, ann_custom_MapWStringInnerStructureHelper, type_name_MapWStringInnerStructureHelper.to_string());
        CompleteStructHeader header_MapWStringInnerStructureHelper;
        header_MapWStringInnerStructureHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapWStringInnerStructureHelper);
        CompleteStructMemberSeq member_seq_MapWStringInnerStructureHelper;
        {
            TypeIdentifierPair type_ids_var_map_wstring_innerstructurehelper;
            ReturnCode_t return_code_var_map_wstring_innerstructurehelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_wstring_innerstructurehelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded", type_ids_var_map_wstring_innerstructurehelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_innerstructurehelper)
            {
                return_code_var_map_wstring_innerstructurehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerStructureHelper", type_ids_var_map_wstring_innerstructurehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_innerstructurehelper)
                {
                ::register_InnerStructureHelper_type_identifier(type_ids_var_map_wstring_innerstructurehelper);
                }
                bool element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_innerstructurehelper, element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_wstring_innerstructurehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_wstring_innerstructurehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_innerstructurehelper)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_wstring_innerstructurehelper, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_innerstructurehelper, key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded, element_flags_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded), key_flags_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded", type_ids_var_map_wstring_innerstructurehelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_unbounded_InnerStructureHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_wstring_innerstructurehelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_wstring_innerstructurehelper = 0x00000000;
            bool common_var_map_wstring_innerstructurehelper_ec {false};
            CommonStructMember common_var_map_wstring_innerstructurehelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_wstring_innerstructurehelper, member_flags_var_map_wstring_innerstructurehelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_innerstructurehelper, common_var_map_wstring_innerstructurehelper_ec))};
            if (!common_var_map_wstring_innerstructurehelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_wstring_innerstructurehelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_wstring_innerstructurehelper = "var_map_wstring_innerstructurehelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_wstring_innerstructurehelper;
            ann_custom_MapWStringInnerStructureHelper.reset();
            CompleteMemberDetail detail_var_map_wstring_innerstructurehelper = TypeObjectUtils::build_complete_member_detail(name_var_map_wstring_innerstructurehelper, member_ann_builtin_var_map_wstring_innerstructurehelper, ann_custom_MapWStringInnerStructureHelper);
            CompleteStructMember member_var_map_wstring_innerstructurehelper = TypeObjectUtils::build_complete_struct_member(common_var_map_wstring_innerstructurehelper, detail_var_map_wstring_innerstructurehelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapWStringInnerStructureHelper, member_var_map_wstring_innerstructurehelper);
        }
        CompleteStructType struct_type_MapWStringInnerStructureHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapWStringInnerStructureHelper, header_MapWStringInnerStructureHelper, member_seq_MapWStringInnerStructureHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapWStringInnerStructureHelper, type_name_MapWStringInnerStructureHelper.to_string(), type_ids_MapWStringInnerStructureHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapWStringInnerStructureHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapWStringInnerBitsetHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapWStringInnerBitsetHelper)
{

    ReturnCode_t return_code_MapWStringInnerBitsetHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapWStringInnerBitsetHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapWStringInnerBitsetHelper", type_ids_MapWStringInnerBitsetHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapWStringInnerBitsetHelper)
    {
        StructTypeFlag struct_flags_MapWStringInnerBitsetHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapWStringInnerBitsetHelper = "MapWStringInnerBitsetHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapWStringInnerBitsetHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapWStringInnerBitsetHelper;
        CompleteTypeDetail detail_MapWStringInnerBitsetHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapWStringInnerBitsetHelper, ann_custom_MapWStringInnerBitsetHelper, type_name_MapWStringInnerBitsetHelper.to_string());
        CompleteStructHeader header_MapWStringInnerBitsetHelper;
        header_MapWStringInnerBitsetHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapWStringInnerBitsetHelper);
        CompleteStructMemberSeq member_seq_MapWStringInnerBitsetHelper;
        {
            TypeIdentifierPair type_ids_var_map_wstring_innerbitsethelper;
            ReturnCode_t return_code_var_map_wstring_innerbitsethelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_wstring_innerbitsethelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded", type_ids_var_map_wstring_innerbitsethelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_innerbitsethelper)
            {
                return_code_var_map_wstring_innerbitsethelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerBitsetHelper", type_ids_var_map_wstring_innerbitsethelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_innerbitsethelper)
                {
                ::register_InnerBitsetHelper_type_identifier(type_ids_var_map_wstring_innerbitsethelper);
                }
                bool element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_innerbitsethelper, element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_wstring_innerbitsethelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_wstring_innerbitsethelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_wstring_innerbitsethelper)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_wstring_innerbitsethelper, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_innerbitsethelper, key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded, element_flags_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded), key_flags_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded", type_ids_var_map_wstring_innerbitsethelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_unbounded_InnerBitsetHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_wstring_innerbitsethelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_wstring_innerbitsethelper = 0x00000000;
            bool common_var_map_wstring_innerbitsethelper_ec {false};
            CommonStructMember common_var_map_wstring_innerbitsethelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_wstring_innerbitsethelper, member_flags_var_map_wstring_innerbitsethelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_wstring_innerbitsethelper, common_var_map_wstring_innerbitsethelper_ec))};
            if (!common_var_map_wstring_innerbitsethelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_wstring_innerbitsethelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_wstring_innerbitsethelper = "var_map_wstring_innerbitsethelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_wstring_innerbitsethelper;
            ann_custom_MapWStringInnerBitsetHelper.reset();
            CompleteMemberDetail detail_var_map_wstring_innerbitsethelper = TypeObjectUtils::build_complete_member_detail(name_var_map_wstring_innerbitsethelper, member_ann_builtin_var_map_wstring_innerbitsethelper, ann_custom_MapWStringInnerBitsetHelper);
            CompleteStructMember member_var_map_wstring_innerbitsethelper = TypeObjectUtils::build_complete_struct_member(common_var_map_wstring_innerbitsethelper, detail_var_map_wstring_innerbitsethelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapWStringInnerBitsetHelper, member_var_map_wstring_innerbitsethelper);
        }
        CompleteStructType struct_type_MapWStringInnerBitsetHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapWStringInnerBitsetHelper, header_MapWStringInnerBitsetHelper, member_seq_MapWStringInnerBitsetHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapWStringInnerBitsetHelper, type_name_MapWStringInnerBitsetHelper.to_string(), type_ids_MapWStringInnerBitsetHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapWStringInnerBitsetHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedStringHelperShort_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedStringHelperShort)
{

    ReturnCode_t return_code_MapInnerAliasBoundedStringHelperShort {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedStringHelperShort =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedStringHelperShort", type_ids_MapInnerAliasBoundedStringHelperShort);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedStringHelperShort)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedStringHelperShort = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedStringHelperShort = "MapInnerAliasBoundedStringHelperShort";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedStringHelperShort;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedStringHelperShort;
        CompleteTypeDetail detail_MapInnerAliasBoundedStringHelperShort = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedStringHelperShort, ann_custom_MapInnerAliasBoundedStringHelperShort, type_name_MapInnerAliasBoundedStringHelperShort.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedStringHelperShort;
        header_MapInnerAliasBoundedStringHelperShort = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedStringHelperShort);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedStringHelperShort;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedstringhelper_short;
            ReturnCode_t return_code_var_map_inneraliasboundedstringhelper_short {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedstringhelper_short =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_10_int16_t_unbounded", type_ids_var_map_inneraliasboundedstringhelper_short);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_short)
            {
                return_code_var_map_inneraliasboundedstringhelper_short =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_inneraliasboundedstringhelper_short);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_short)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_string_10_int16_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_10_int16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_short, element_identifier_anonymous_map_anonymous_string_10_int16_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_10_int16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_int16_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedstringhelper_short =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_inneraliasboundedstringhelper_short);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_short)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_short);
                }
                bool key_identifier_anonymous_map_anonymous_string_10_int16_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_10_int16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_short, key_identifier_anonymous_map_anonymous_string_10_int16_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_10_int16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_int16_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_10_int16_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_10_int16_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_int16_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_10_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_int16_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_10_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_int16_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_10_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_int16_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_10_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_int16_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_10_int16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_int16_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_int16_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_10_int16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_int16_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_int16_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_10_int16_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_10_int16_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_10_int16_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_10_int16_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_10_int16_t_unbounded, element_flags_anonymous_map_anonymous_string_10_int16_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_10_int16_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_10_int16_t_unbounded), key_flags_anonymous_map_anonymous_string_10_int16_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_10_int16_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_10_int16_t_unbounded", type_ids_var_map_inneraliasboundedstringhelper_short))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_10_int16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedstringhelper_short = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedstringhelper_short = 0x00000000;
            bool common_var_map_inneraliasboundedstringhelper_short_ec {false};
            CommonStructMember common_var_map_inneraliasboundedstringhelper_short {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedstringhelper_short, member_flags_var_map_inneraliasboundedstringhelper_short, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_short, common_var_map_inneraliasboundedstringhelper_short_ec))};
            if (!common_var_map_inneraliasboundedstringhelper_short_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedstringhelper_short member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedstringhelper_short = "var_map_inneraliasboundedstringhelper_short";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedstringhelper_short;
            ann_custom_MapInnerAliasBoundedStringHelperShort.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedstringhelper_short = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedstringhelper_short, member_ann_builtin_var_map_inneraliasboundedstringhelper_short, ann_custom_MapInnerAliasBoundedStringHelperShort);
            CompleteStructMember member_var_map_inneraliasboundedstringhelper_short = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedstringhelper_short, detail_var_map_inneraliasboundedstringhelper_short);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedStringHelperShort, member_var_map_inneraliasboundedstringhelper_short);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedStringHelperShort = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedStringHelperShort, header_MapInnerAliasBoundedStringHelperShort, member_seq_MapInnerAliasBoundedStringHelperShort);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedStringHelperShort, type_name_MapInnerAliasBoundedStringHelperShort.to_string(), type_ids_MapInnerAliasBoundedStringHelperShort))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedStringHelperShort already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedStringHelperUShort_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedStringHelperUShort)
{

    ReturnCode_t return_code_MapInnerAliasBoundedStringHelperUShort {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedStringHelperUShort =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedStringHelperUShort", type_ids_MapInnerAliasBoundedStringHelperUShort);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedStringHelperUShort)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedStringHelperUShort = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedStringHelperUShort = "MapInnerAliasBoundedStringHelperUShort";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedStringHelperUShort;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedStringHelperUShort;
        CompleteTypeDetail detail_MapInnerAliasBoundedStringHelperUShort = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedStringHelperUShort, ann_custom_MapInnerAliasBoundedStringHelperUShort, type_name_MapInnerAliasBoundedStringHelperUShort.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedStringHelperUShort;
        header_MapInnerAliasBoundedStringHelperUShort = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedStringHelperUShort);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedStringHelperUShort;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedstringhelper_ushort;
            ReturnCode_t return_code_var_map_inneraliasboundedstringhelper_ushort {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedstringhelper_ushort =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_10_uint16_t_unbounded", type_ids_var_map_inneraliasboundedstringhelper_ushort);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_ushort)
            {
                return_code_var_map_inneraliasboundedstringhelper_ushort =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_inneraliasboundedstringhelper_ushort);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_ushort)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_string_10_uint16_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_10_uint16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_ushort, element_identifier_anonymous_map_anonymous_string_10_uint16_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_10_uint16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_uint16_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedstringhelper_ushort =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_inneraliasboundedstringhelper_ushort);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_ushort)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_ushort);
                }
                bool key_identifier_anonymous_map_anonymous_string_10_uint16_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_10_uint16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_ushort, key_identifier_anonymous_map_anonymous_string_10_uint16_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_10_uint16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_uint16_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_10_uint16_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_10_uint16_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_uint16_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_10_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_uint16_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_10_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_uint16_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_10_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_uint16_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_10_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_uint16_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_10_uint16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_uint16_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_uint16_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_10_uint16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_uint16_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_uint16_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_10_uint16_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_10_uint16_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_10_uint16_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_10_uint16_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_10_uint16_t_unbounded, element_flags_anonymous_map_anonymous_string_10_uint16_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_10_uint16_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_10_uint16_t_unbounded), key_flags_anonymous_map_anonymous_string_10_uint16_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_10_uint16_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_10_uint16_t_unbounded", type_ids_var_map_inneraliasboundedstringhelper_ushort))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_10_uint16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedstringhelper_ushort = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedstringhelper_ushort = 0x00000000;
            bool common_var_map_inneraliasboundedstringhelper_ushort_ec {false};
            CommonStructMember common_var_map_inneraliasboundedstringhelper_ushort {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedstringhelper_ushort, member_flags_var_map_inneraliasboundedstringhelper_ushort, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_ushort, common_var_map_inneraliasboundedstringhelper_ushort_ec))};
            if (!common_var_map_inneraliasboundedstringhelper_ushort_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedstringhelper_ushort member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedstringhelper_ushort = "var_map_inneraliasboundedstringhelper_ushort";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedstringhelper_ushort;
            ann_custom_MapInnerAliasBoundedStringHelperUShort.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedstringhelper_ushort = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedstringhelper_ushort, member_ann_builtin_var_map_inneraliasboundedstringhelper_ushort, ann_custom_MapInnerAliasBoundedStringHelperUShort);
            CompleteStructMember member_var_map_inneraliasboundedstringhelper_ushort = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedstringhelper_ushort, detail_var_map_inneraliasboundedstringhelper_ushort);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedStringHelperUShort, member_var_map_inneraliasboundedstringhelper_ushort);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedStringHelperUShort = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedStringHelperUShort, header_MapInnerAliasBoundedStringHelperUShort, member_seq_MapInnerAliasBoundedStringHelperUShort);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedStringHelperUShort, type_name_MapInnerAliasBoundedStringHelperUShort.to_string(), type_ids_MapInnerAliasBoundedStringHelperUShort))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedStringHelperUShort already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedStringHelperLong_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedStringHelperLong)
{

    ReturnCode_t return_code_MapInnerAliasBoundedStringHelperLong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedStringHelperLong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedStringHelperLong", type_ids_MapInnerAliasBoundedStringHelperLong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedStringHelperLong)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedStringHelperLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedStringHelperLong = "MapInnerAliasBoundedStringHelperLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedStringHelperLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedStringHelperLong;
        CompleteTypeDetail detail_MapInnerAliasBoundedStringHelperLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedStringHelperLong, ann_custom_MapInnerAliasBoundedStringHelperLong, type_name_MapInnerAliasBoundedStringHelperLong.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedStringHelperLong;
        header_MapInnerAliasBoundedStringHelperLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedStringHelperLong);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedStringHelperLong;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedstringhelper_long;
            ReturnCode_t return_code_var_map_inneraliasboundedstringhelper_long {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedstringhelper_long =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_10_int32_t_unbounded", type_ids_var_map_inneraliasboundedstringhelper_long);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_long)
            {
                return_code_var_map_inneraliasboundedstringhelper_long =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_inneraliasboundedstringhelper_long);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_long)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_string_10_int32_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_10_int32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_long, element_identifier_anonymous_map_anonymous_string_10_int32_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_10_int32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_int32_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedstringhelper_long =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_inneraliasboundedstringhelper_long);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_long)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_long);
                }
                bool key_identifier_anonymous_map_anonymous_string_10_int32_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_10_int32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_long, key_identifier_anonymous_map_anonymous_string_10_int32_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_10_int32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_int32_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_10_int32_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_10_int32_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_int32_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_10_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_int32_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_10_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_int32_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_10_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_int32_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_10_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_int32_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_10_int32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_int32_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_int32_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_10_int32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_int32_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_int32_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_10_int32_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_10_int32_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_10_int32_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_10_int32_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_10_int32_t_unbounded, element_flags_anonymous_map_anonymous_string_10_int32_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_10_int32_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_10_int32_t_unbounded), key_flags_anonymous_map_anonymous_string_10_int32_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_10_int32_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_10_int32_t_unbounded", type_ids_var_map_inneraliasboundedstringhelper_long))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_10_int32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedstringhelper_long = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedstringhelper_long = 0x00000000;
            bool common_var_map_inneraliasboundedstringhelper_long_ec {false};
            CommonStructMember common_var_map_inneraliasboundedstringhelper_long {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedstringhelper_long, member_flags_var_map_inneraliasboundedstringhelper_long, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_long, common_var_map_inneraliasboundedstringhelper_long_ec))};
            if (!common_var_map_inneraliasboundedstringhelper_long_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedstringhelper_long member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedstringhelper_long = "var_map_inneraliasboundedstringhelper_long";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedstringhelper_long;
            ann_custom_MapInnerAliasBoundedStringHelperLong.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedstringhelper_long = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedstringhelper_long, member_ann_builtin_var_map_inneraliasboundedstringhelper_long, ann_custom_MapInnerAliasBoundedStringHelperLong);
            CompleteStructMember member_var_map_inneraliasboundedstringhelper_long = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedstringhelper_long, detail_var_map_inneraliasboundedstringhelper_long);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedStringHelperLong, member_var_map_inneraliasboundedstringhelper_long);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedStringHelperLong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedStringHelperLong, header_MapInnerAliasBoundedStringHelperLong, member_seq_MapInnerAliasBoundedStringHelperLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedStringHelperLong, type_name_MapInnerAliasBoundedStringHelperLong.to_string(), type_ids_MapInnerAliasBoundedStringHelperLong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedStringHelperLong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedStringHelperULong_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedStringHelperULong)
{

    ReturnCode_t return_code_MapInnerAliasBoundedStringHelperULong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedStringHelperULong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedStringHelperULong", type_ids_MapInnerAliasBoundedStringHelperULong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedStringHelperULong)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedStringHelperULong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedStringHelperULong = "MapInnerAliasBoundedStringHelperULong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedStringHelperULong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedStringHelperULong;
        CompleteTypeDetail detail_MapInnerAliasBoundedStringHelperULong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedStringHelperULong, ann_custom_MapInnerAliasBoundedStringHelperULong, type_name_MapInnerAliasBoundedStringHelperULong.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedStringHelperULong;
        header_MapInnerAliasBoundedStringHelperULong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedStringHelperULong);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedStringHelperULong;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedstringhelper_ulong;
            ReturnCode_t return_code_var_map_inneraliasboundedstringhelper_ulong {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedstringhelper_ulong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_10_uint32_t_unbounded", type_ids_var_map_inneraliasboundedstringhelper_ulong);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_ulong)
            {
                return_code_var_map_inneraliasboundedstringhelper_ulong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_inneraliasboundedstringhelper_ulong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_ulong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_string_10_uint32_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_10_uint32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_ulong, element_identifier_anonymous_map_anonymous_string_10_uint32_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_10_uint32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_uint32_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedstringhelper_ulong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_inneraliasboundedstringhelper_ulong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_ulong)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_ulong);
                }
                bool key_identifier_anonymous_map_anonymous_string_10_uint32_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_10_uint32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_ulong, key_identifier_anonymous_map_anonymous_string_10_uint32_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_10_uint32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_uint32_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_10_uint32_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_10_uint32_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_uint32_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_10_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_uint32_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_10_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_uint32_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_10_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_uint32_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_10_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_uint32_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_10_uint32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_uint32_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_uint32_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_10_uint32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_uint32_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_uint32_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_10_uint32_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_10_uint32_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_10_uint32_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_10_uint32_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_10_uint32_t_unbounded, element_flags_anonymous_map_anonymous_string_10_uint32_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_10_uint32_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_10_uint32_t_unbounded), key_flags_anonymous_map_anonymous_string_10_uint32_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_10_uint32_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_10_uint32_t_unbounded", type_ids_var_map_inneraliasboundedstringhelper_ulong))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_10_uint32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedstringhelper_ulong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedstringhelper_ulong = 0x00000000;
            bool common_var_map_inneraliasboundedstringhelper_ulong_ec {false};
            CommonStructMember common_var_map_inneraliasboundedstringhelper_ulong {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedstringhelper_ulong, member_flags_var_map_inneraliasboundedstringhelper_ulong, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_ulong, common_var_map_inneraliasboundedstringhelper_ulong_ec))};
            if (!common_var_map_inneraliasboundedstringhelper_ulong_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedstringhelper_ulong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedstringhelper_ulong = "var_map_inneraliasboundedstringhelper_ulong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedstringhelper_ulong;
            ann_custom_MapInnerAliasBoundedStringHelperULong.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedstringhelper_ulong = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedstringhelper_ulong, member_ann_builtin_var_map_inneraliasboundedstringhelper_ulong, ann_custom_MapInnerAliasBoundedStringHelperULong);
            CompleteStructMember member_var_map_inneraliasboundedstringhelper_ulong = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedstringhelper_ulong, detail_var_map_inneraliasboundedstringhelper_ulong);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedStringHelperULong, member_var_map_inneraliasboundedstringhelper_ulong);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedStringHelperULong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedStringHelperULong, header_MapInnerAliasBoundedStringHelperULong, member_seq_MapInnerAliasBoundedStringHelperULong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedStringHelperULong, type_name_MapInnerAliasBoundedStringHelperULong.to_string(), type_ids_MapInnerAliasBoundedStringHelperULong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedStringHelperULong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedStringHelperLongLong_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedStringHelperLongLong)
{

    ReturnCode_t return_code_MapInnerAliasBoundedStringHelperLongLong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedStringHelperLongLong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedStringHelperLongLong", type_ids_MapInnerAliasBoundedStringHelperLongLong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedStringHelperLongLong)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedStringHelperLongLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedStringHelperLongLong = "MapInnerAliasBoundedStringHelperLongLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedStringHelperLongLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedStringHelperLongLong;
        CompleteTypeDetail detail_MapInnerAliasBoundedStringHelperLongLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedStringHelperLongLong, ann_custom_MapInnerAliasBoundedStringHelperLongLong, type_name_MapInnerAliasBoundedStringHelperLongLong.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedStringHelperLongLong;
        header_MapInnerAliasBoundedStringHelperLongLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedStringHelperLongLong);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedStringHelperLongLong;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedstringhelper_longlong;
            ReturnCode_t return_code_var_map_inneraliasboundedstringhelper_longlong {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedstringhelper_longlong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_10_int64_t_unbounded", type_ids_var_map_inneraliasboundedstringhelper_longlong);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_longlong)
            {
                return_code_var_map_inneraliasboundedstringhelper_longlong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_inneraliasboundedstringhelper_longlong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_longlong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_string_10_int64_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_10_int64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_longlong, element_identifier_anonymous_map_anonymous_string_10_int64_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_10_int64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_int64_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedstringhelper_longlong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_inneraliasboundedstringhelper_longlong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_longlong)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_longlong);
                }
                bool key_identifier_anonymous_map_anonymous_string_10_int64_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_10_int64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_longlong, key_identifier_anonymous_map_anonymous_string_10_int64_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_10_int64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_int64_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_10_int64_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_10_int64_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_int64_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_10_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_int64_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_10_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_int64_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_10_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_int64_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_10_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_int64_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_10_int64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_int64_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_int64_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_10_int64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_int64_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_int64_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_10_int64_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_10_int64_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_10_int64_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_10_int64_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_10_int64_t_unbounded, element_flags_anonymous_map_anonymous_string_10_int64_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_10_int64_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_10_int64_t_unbounded), key_flags_anonymous_map_anonymous_string_10_int64_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_10_int64_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_10_int64_t_unbounded", type_ids_var_map_inneraliasboundedstringhelper_longlong))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_10_int64_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedstringhelper_longlong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedstringhelper_longlong = 0x00000000;
            bool common_var_map_inneraliasboundedstringhelper_longlong_ec {false};
            CommonStructMember common_var_map_inneraliasboundedstringhelper_longlong {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedstringhelper_longlong, member_flags_var_map_inneraliasboundedstringhelper_longlong, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_longlong, common_var_map_inneraliasboundedstringhelper_longlong_ec))};
            if (!common_var_map_inneraliasboundedstringhelper_longlong_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedstringhelper_longlong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedstringhelper_longlong = "var_map_inneraliasboundedstringhelper_longlong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedstringhelper_longlong;
            ann_custom_MapInnerAliasBoundedStringHelperLongLong.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedstringhelper_longlong = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedstringhelper_longlong, member_ann_builtin_var_map_inneraliasboundedstringhelper_longlong, ann_custom_MapInnerAliasBoundedStringHelperLongLong);
            CompleteStructMember member_var_map_inneraliasboundedstringhelper_longlong = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedstringhelper_longlong, detail_var_map_inneraliasboundedstringhelper_longlong);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedStringHelperLongLong, member_var_map_inneraliasboundedstringhelper_longlong);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedStringHelperLongLong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedStringHelperLongLong, header_MapInnerAliasBoundedStringHelperLongLong, member_seq_MapInnerAliasBoundedStringHelperLongLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedStringHelperLongLong, type_name_MapInnerAliasBoundedStringHelperLongLong.to_string(), type_ids_MapInnerAliasBoundedStringHelperLongLong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedStringHelperLongLong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedStringHelperULongLong_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedStringHelperULongLong)
{

    ReturnCode_t return_code_MapInnerAliasBoundedStringHelperULongLong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedStringHelperULongLong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedStringHelperULongLong", type_ids_MapInnerAliasBoundedStringHelperULongLong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedStringHelperULongLong)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedStringHelperULongLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedStringHelperULongLong = "MapInnerAliasBoundedStringHelperULongLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedStringHelperULongLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedStringHelperULongLong;
        CompleteTypeDetail detail_MapInnerAliasBoundedStringHelperULongLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedStringHelperULongLong, ann_custom_MapInnerAliasBoundedStringHelperULongLong, type_name_MapInnerAliasBoundedStringHelperULongLong.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedStringHelperULongLong;
        header_MapInnerAliasBoundedStringHelperULongLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedStringHelperULongLong);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedStringHelperULongLong;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedstringhelper_ulonglong;
            ReturnCode_t return_code_var_map_inneraliasboundedstringhelper_ulonglong {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedstringhelper_ulonglong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_10_uint64_t_unbounded", type_ids_var_map_inneraliasboundedstringhelper_ulonglong);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_ulonglong)
            {
                return_code_var_map_inneraliasboundedstringhelper_ulonglong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_inneraliasboundedstringhelper_ulonglong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_ulonglong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_string_10_uint64_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_10_uint64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_ulonglong, element_identifier_anonymous_map_anonymous_string_10_uint64_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_10_uint64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_uint64_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedstringhelper_ulonglong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_inneraliasboundedstringhelper_ulonglong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_ulonglong)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_ulonglong);
                }
                bool key_identifier_anonymous_map_anonymous_string_10_uint64_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_10_uint64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_ulonglong, key_identifier_anonymous_map_anonymous_string_10_uint64_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_10_uint64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_uint64_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_10_uint64_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_10_uint64_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_uint64_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_10_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_uint64_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_10_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_uint64_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_10_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_uint64_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_10_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_uint64_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_10_uint64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_uint64_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_uint64_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_10_uint64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_uint64_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_uint64_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_10_uint64_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_10_uint64_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_10_uint64_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_10_uint64_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_10_uint64_t_unbounded, element_flags_anonymous_map_anonymous_string_10_uint64_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_10_uint64_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_10_uint64_t_unbounded), key_flags_anonymous_map_anonymous_string_10_uint64_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_10_uint64_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_10_uint64_t_unbounded", type_ids_var_map_inneraliasboundedstringhelper_ulonglong))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_10_uint64_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedstringhelper_ulonglong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedstringhelper_ulonglong = 0x00000000;
            bool common_var_map_inneraliasboundedstringhelper_ulonglong_ec {false};
            CommonStructMember common_var_map_inneraliasboundedstringhelper_ulonglong {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedstringhelper_ulonglong, member_flags_var_map_inneraliasboundedstringhelper_ulonglong, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_ulonglong, common_var_map_inneraliasboundedstringhelper_ulonglong_ec))};
            if (!common_var_map_inneraliasboundedstringhelper_ulonglong_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedstringhelper_ulonglong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedstringhelper_ulonglong = "var_map_inneraliasboundedstringhelper_ulonglong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedstringhelper_ulonglong;
            ann_custom_MapInnerAliasBoundedStringHelperULongLong.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedstringhelper_ulonglong = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedstringhelper_ulonglong, member_ann_builtin_var_map_inneraliasboundedstringhelper_ulonglong, ann_custom_MapInnerAliasBoundedStringHelperULongLong);
            CompleteStructMember member_var_map_inneraliasboundedstringhelper_ulonglong = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedstringhelper_ulonglong, detail_var_map_inneraliasboundedstringhelper_ulonglong);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedStringHelperULongLong, member_var_map_inneraliasboundedstringhelper_ulonglong);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedStringHelperULongLong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedStringHelperULongLong, header_MapInnerAliasBoundedStringHelperULongLong, member_seq_MapInnerAliasBoundedStringHelperULongLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedStringHelperULongLong, type_name_MapInnerAliasBoundedStringHelperULongLong.to_string(), type_ids_MapInnerAliasBoundedStringHelperULongLong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedStringHelperULongLong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedStringHelperFloat_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedStringHelperFloat)
{

    ReturnCode_t return_code_MapInnerAliasBoundedStringHelperFloat {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedStringHelperFloat =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedStringHelperFloat", type_ids_MapInnerAliasBoundedStringHelperFloat);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedStringHelperFloat)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedStringHelperFloat = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedStringHelperFloat = "MapInnerAliasBoundedStringHelperFloat";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedStringHelperFloat;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedStringHelperFloat;
        CompleteTypeDetail detail_MapInnerAliasBoundedStringHelperFloat = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedStringHelperFloat, ann_custom_MapInnerAliasBoundedStringHelperFloat, type_name_MapInnerAliasBoundedStringHelperFloat.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedStringHelperFloat;
        header_MapInnerAliasBoundedStringHelperFloat = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedStringHelperFloat);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedStringHelperFloat;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedstringhelper_float;
            ReturnCode_t return_code_var_map_inneraliasboundedstringhelper_float {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedstringhelper_float =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_10_float_unbounded", type_ids_var_map_inneraliasboundedstringhelper_float);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_float)
            {
                return_code_var_map_inneraliasboundedstringhelper_float =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_float", type_ids_var_map_inneraliasboundedstringhelper_float);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_float)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_string_10_float_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_10_float_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_float, element_identifier_anonymous_map_anonymous_string_10_float_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_10_float_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_float_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedstringhelper_float =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_inneraliasboundedstringhelper_float);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_float)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_float);
                }
                bool key_identifier_anonymous_map_anonymous_string_10_float_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_10_float_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_float, key_identifier_anonymous_map_anonymous_string_10_float_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_10_float_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_float_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_10_float_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_10_float_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_float_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_10_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_float_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_10_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_float_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_10_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_float_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_10_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_float_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_10_float_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_float_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_float_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_10_float_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_float_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_float_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_10_float_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_10_float_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_10_float_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_10_float_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_10_float_unbounded, element_flags_anonymous_map_anonymous_string_10_float_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_10_float_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_10_float_unbounded), key_flags_anonymous_map_anonymous_string_10_float_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_10_float_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_10_float_unbounded", type_ids_var_map_inneraliasboundedstringhelper_float))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_10_float_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedstringhelper_float = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedstringhelper_float = 0x00000000;
            bool common_var_map_inneraliasboundedstringhelper_float_ec {false};
            CommonStructMember common_var_map_inneraliasboundedstringhelper_float {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedstringhelper_float, member_flags_var_map_inneraliasboundedstringhelper_float, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_float, common_var_map_inneraliasboundedstringhelper_float_ec))};
            if (!common_var_map_inneraliasboundedstringhelper_float_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedstringhelper_float member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedstringhelper_float = "var_map_inneraliasboundedstringhelper_float";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedstringhelper_float;
            ann_custom_MapInnerAliasBoundedStringHelperFloat.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedstringhelper_float = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedstringhelper_float, member_ann_builtin_var_map_inneraliasboundedstringhelper_float, ann_custom_MapInnerAliasBoundedStringHelperFloat);
            CompleteStructMember member_var_map_inneraliasboundedstringhelper_float = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedstringhelper_float, detail_var_map_inneraliasboundedstringhelper_float);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedStringHelperFloat, member_var_map_inneraliasboundedstringhelper_float);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedStringHelperFloat = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedStringHelperFloat, header_MapInnerAliasBoundedStringHelperFloat, member_seq_MapInnerAliasBoundedStringHelperFloat);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedStringHelperFloat, type_name_MapInnerAliasBoundedStringHelperFloat.to_string(), type_ids_MapInnerAliasBoundedStringHelperFloat))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedStringHelperFloat already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedStringHelperDouble_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedStringHelperDouble)
{

    ReturnCode_t return_code_MapInnerAliasBoundedStringHelperDouble {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedStringHelperDouble =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedStringHelperDouble", type_ids_MapInnerAliasBoundedStringHelperDouble);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedStringHelperDouble)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedStringHelperDouble = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedStringHelperDouble = "MapInnerAliasBoundedStringHelperDouble";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedStringHelperDouble;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedStringHelperDouble;
        CompleteTypeDetail detail_MapInnerAliasBoundedStringHelperDouble = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedStringHelperDouble, ann_custom_MapInnerAliasBoundedStringHelperDouble, type_name_MapInnerAliasBoundedStringHelperDouble.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedStringHelperDouble;
        header_MapInnerAliasBoundedStringHelperDouble = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedStringHelperDouble);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedStringHelperDouble;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedstringhelper_double;
            ReturnCode_t return_code_var_map_inneraliasboundedstringhelper_double {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedstringhelper_double =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_10_double_unbounded", type_ids_var_map_inneraliasboundedstringhelper_double);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_double)
            {
                return_code_var_map_inneraliasboundedstringhelper_double =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_double", type_ids_var_map_inneraliasboundedstringhelper_double);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_double)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_string_10_double_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_10_double_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_double, element_identifier_anonymous_map_anonymous_string_10_double_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_10_double_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_double_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedstringhelper_double =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_inneraliasboundedstringhelper_double);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_double)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_double);
                }
                bool key_identifier_anonymous_map_anonymous_string_10_double_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_10_double_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_double, key_identifier_anonymous_map_anonymous_string_10_double_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_10_double_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_double_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_10_double_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_10_double_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_double_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_10_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_double_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_10_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_double_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_10_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_double_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_10_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_double_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_10_double_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_double_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_double_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_10_double_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_double_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_double_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_10_double_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_10_double_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_10_double_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_10_double_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_10_double_unbounded, element_flags_anonymous_map_anonymous_string_10_double_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_10_double_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_10_double_unbounded), key_flags_anonymous_map_anonymous_string_10_double_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_10_double_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_10_double_unbounded", type_ids_var_map_inneraliasboundedstringhelper_double))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_10_double_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedstringhelper_double = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedstringhelper_double = 0x00000000;
            bool common_var_map_inneraliasboundedstringhelper_double_ec {false};
            CommonStructMember common_var_map_inneraliasboundedstringhelper_double {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedstringhelper_double, member_flags_var_map_inneraliasboundedstringhelper_double, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_double, common_var_map_inneraliasboundedstringhelper_double_ec))};
            if (!common_var_map_inneraliasboundedstringhelper_double_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedstringhelper_double member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedstringhelper_double = "var_map_inneraliasboundedstringhelper_double";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedstringhelper_double;
            ann_custom_MapInnerAliasBoundedStringHelperDouble.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedstringhelper_double = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedstringhelper_double, member_ann_builtin_var_map_inneraliasboundedstringhelper_double, ann_custom_MapInnerAliasBoundedStringHelperDouble);
            CompleteStructMember member_var_map_inneraliasboundedstringhelper_double = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedstringhelper_double, detail_var_map_inneraliasboundedstringhelper_double);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedStringHelperDouble, member_var_map_inneraliasboundedstringhelper_double);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedStringHelperDouble = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedStringHelperDouble, header_MapInnerAliasBoundedStringHelperDouble, member_seq_MapInnerAliasBoundedStringHelperDouble);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedStringHelperDouble, type_name_MapInnerAliasBoundedStringHelperDouble.to_string(), type_ids_MapInnerAliasBoundedStringHelperDouble))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedStringHelperDouble already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedStringHelperLongDouble_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedStringHelperLongDouble)
{

    ReturnCode_t return_code_MapInnerAliasBoundedStringHelperLongDouble {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedStringHelperLongDouble =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedStringHelperLongDouble", type_ids_MapInnerAliasBoundedStringHelperLongDouble);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedStringHelperLongDouble)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedStringHelperLongDouble = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedStringHelperLongDouble = "MapInnerAliasBoundedStringHelperLongDouble";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedStringHelperLongDouble;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedStringHelperLongDouble;
        CompleteTypeDetail detail_MapInnerAliasBoundedStringHelperLongDouble = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedStringHelperLongDouble, ann_custom_MapInnerAliasBoundedStringHelperLongDouble, type_name_MapInnerAliasBoundedStringHelperLongDouble.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedStringHelperLongDouble;
        header_MapInnerAliasBoundedStringHelperLongDouble = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedStringHelperLongDouble);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedStringHelperLongDouble;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedstringhelper_longdouble;
            ReturnCode_t return_code_var_map_inneraliasboundedstringhelper_longdouble {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedstringhelper_longdouble =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_10_longdouble_unbounded", type_ids_var_map_inneraliasboundedstringhelper_longdouble);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_longdouble)
            {
                return_code_var_map_inneraliasboundedstringhelper_longdouble =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_longdouble", type_ids_var_map_inneraliasboundedstringhelper_longdouble);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_longdouble)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_string_10_longdouble_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_10_longdouble_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_longdouble, element_identifier_anonymous_map_anonymous_string_10_longdouble_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_10_longdouble_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_longdouble_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedstringhelper_longdouble =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_inneraliasboundedstringhelper_longdouble);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_longdouble)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_longdouble);
                }
                bool key_identifier_anonymous_map_anonymous_string_10_longdouble_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_10_longdouble_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_longdouble, key_identifier_anonymous_map_anonymous_string_10_longdouble_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_10_longdouble_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_longdouble_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_10_longdouble_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_10_longdouble_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_longdouble_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_10_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_longdouble_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_10_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_longdouble_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_10_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_longdouble_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_10_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_longdouble_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_10_longdouble_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_longdouble_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_longdouble_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_10_longdouble_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_longdouble_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_longdouble_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_10_longdouble_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_10_longdouble_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_10_longdouble_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_10_longdouble_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_10_longdouble_unbounded, element_flags_anonymous_map_anonymous_string_10_longdouble_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_10_longdouble_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_10_longdouble_unbounded), key_flags_anonymous_map_anonymous_string_10_longdouble_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_10_longdouble_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_10_longdouble_unbounded", type_ids_var_map_inneraliasboundedstringhelper_longdouble))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_10_longdouble_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedstringhelper_longdouble = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedstringhelper_longdouble = 0x00000000;
            bool common_var_map_inneraliasboundedstringhelper_longdouble_ec {false};
            CommonStructMember common_var_map_inneraliasboundedstringhelper_longdouble {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedstringhelper_longdouble, member_flags_var_map_inneraliasboundedstringhelper_longdouble, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_longdouble, common_var_map_inneraliasboundedstringhelper_longdouble_ec))};
            if (!common_var_map_inneraliasboundedstringhelper_longdouble_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedstringhelper_longdouble member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedstringhelper_longdouble = "var_map_inneraliasboundedstringhelper_longdouble";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedstringhelper_longdouble;
            ann_custom_MapInnerAliasBoundedStringHelperLongDouble.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedstringhelper_longdouble = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedstringhelper_longdouble, member_ann_builtin_var_map_inneraliasboundedstringhelper_longdouble, ann_custom_MapInnerAliasBoundedStringHelperLongDouble);
            CompleteStructMember member_var_map_inneraliasboundedstringhelper_longdouble = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedstringhelper_longdouble, detail_var_map_inneraliasboundedstringhelper_longdouble);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedStringHelperLongDouble, member_var_map_inneraliasboundedstringhelper_longdouble);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedStringHelperLongDouble = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedStringHelperLongDouble, header_MapInnerAliasBoundedStringHelperLongDouble, member_seq_MapInnerAliasBoundedStringHelperLongDouble);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedStringHelperLongDouble, type_name_MapInnerAliasBoundedStringHelperLongDouble.to_string(), type_ids_MapInnerAliasBoundedStringHelperLongDouble))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedStringHelperLongDouble already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedStringHelperBoolean_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedStringHelperBoolean)
{

    ReturnCode_t return_code_MapInnerAliasBoundedStringHelperBoolean {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedStringHelperBoolean =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedStringHelperBoolean", type_ids_MapInnerAliasBoundedStringHelperBoolean);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedStringHelperBoolean)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedStringHelperBoolean = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedStringHelperBoolean = "MapInnerAliasBoundedStringHelperBoolean";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedStringHelperBoolean;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedStringHelperBoolean;
        CompleteTypeDetail detail_MapInnerAliasBoundedStringHelperBoolean = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedStringHelperBoolean, ann_custom_MapInnerAliasBoundedStringHelperBoolean, type_name_MapInnerAliasBoundedStringHelperBoolean.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedStringHelperBoolean;
        header_MapInnerAliasBoundedStringHelperBoolean = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedStringHelperBoolean);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedStringHelperBoolean;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedstringhelper_boolean;
            ReturnCode_t return_code_var_map_inneraliasboundedstringhelper_boolean {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedstringhelper_boolean =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_10_bool_unbounded", type_ids_var_map_inneraliasboundedstringhelper_boolean);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_boolean)
            {
                return_code_var_map_inneraliasboundedstringhelper_boolean =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_bool", type_ids_var_map_inneraliasboundedstringhelper_boolean);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_boolean)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_string_10_bool_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_10_bool_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_boolean, element_identifier_anonymous_map_anonymous_string_10_bool_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_10_bool_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_bool_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedstringhelper_boolean =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_inneraliasboundedstringhelper_boolean);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_boolean)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_boolean);
                }
                bool key_identifier_anonymous_map_anonymous_string_10_bool_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_10_bool_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_boolean, key_identifier_anonymous_map_anonymous_string_10_bool_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_10_bool_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_bool_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_10_bool_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_10_bool_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_bool_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_10_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_bool_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_10_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_bool_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_10_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_bool_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_10_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_bool_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_10_bool_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_bool_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_bool_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_10_bool_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_bool_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_bool_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_10_bool_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_10_bool_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_10_bool_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_10_bool_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_10_bool_unbounded, element_flags_anonymous_map_anonymous_string_10_bool_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_10_bool_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_10_bool_unbounded), key_flags_anonymous_map_anonymous_string_10_bool_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_10_bool_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_10_bool_unbounded", type_ids_var_map_inneraliasboundedstringhelper_boolean))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_10_bool_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedstringhelper_boolean = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedstringhelper_boolean = 0x00000000;
            bool common_var_map_inneraliasboundedstringhelper_boolean_ec {false};
            CommonStructMember common_var_map_inneraliasboundedstringhelper_boolean {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedstringhelper_boolean, member_flags_var_map_inneraliasboundedstringhelper_boolean, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_boolean, common_var_map_inneraliasboundedstringhelper_boolean_ec))};
            if (!common_var_map_inneraliasboundedstringhelper_boolean_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedstringhelper_boolean member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedstringhelper_boolean = "var_map_inneraliasboundedstringhelper_boolean";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedstringhelper_boolean;
            ann_custom_MapInnerAliasBoundedStringHelperBoolean.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedstringhelper_boolean = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedstringhelper_boolean, member_ann_builtin_var_map_inneraliasboundedstringhelper_boolean, ann_custom_MapInnerAliasBoundedStringHelperBoolean);
            CompleteStructMember member_var_map_inneraliasboundedstringhelper_boolean = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedstringhelper_boolean, detail_var_map_inneraliasboundedstringhelper_boolean);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedStringHelperBoolean, member_var_map_inneraliasboundedstringhelper_boolean);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedStringHelperBoolean = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedStringHelperBoolean, header_MapInnerAliasBoundedStringHelperBoolean, member_seq_MapInnerAliasBoundedStringHelperBoolean);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedStringHelperBoolean, type_name_MapInnerAliasBoundedStringHelperBoolean.to_string(), type_ids_MapInnerAliasBoundedStringHelperBoolean))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedStringHelperBoolean already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedStringHelperOctet_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedStringHelperOctet)
{

    ReturnCode_t return_code_MapInnerAliasBoundedStringHelperOctet {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedStringHelperOctet =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedStringHelperOctet", type_ids_MapInnerAliasBoundedStringHelperOctet);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedStringHelperOctet)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedStringHelperOctet = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedStringHelperOctet = "MapInnerAliasBoundedStringHelperOctet";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedStringHelperOctet;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedStringHelperOctet;
        CompleteTypeDetail detail_MapInnerAliasBoundedStringHelperOctet = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedStringHelperOctet, ann_custom_MapInnerAliasBoundedStringHelperOctet, type_name_MapInnerAliasBoundedStringHelperOctet.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedStringHelperOctet;
        header_MapInnerAliasBoundedStringHelperOctet = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedStringHelperOctet);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedStringHelperOctet;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedstringhelper_octet;
            ReturnCode_t return_code_var_map_inneraliasboundedstringhelper_octet {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedstringhelper_octet =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_10_byte_unbounded", type_ids_var_map_inneraliasboundedstringhelper_octet);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_octet)
            {
                return_code_var_map_inneraliasboundedstringhelper_octet =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_byte", type_ids_var_map_inneraliasboundedstringhelper_octet);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_octet)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_string_10_byte_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_10_byte_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_octet, element_identifier_anonymous_map_anonymous_string_10_byte_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_10_byte_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_byte_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedstringhelper_octet =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_inneraliasboundedstringhelper_octet);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_octet)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_octet);
                }
                bool key_identifier_anonymous_map_anonymous_string_10_byte_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_10_byte_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_octet, key_identifier_anonymous_map_anonymous_string_10_byte_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_10_byte_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_byte_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_10_byte_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_10_byte_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_byte_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_10_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_byte_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_10_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_byte_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_10_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_byte_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_10_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_byte_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_10_byte_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_byte_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_byte_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_10_byte_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_byte_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_byte_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_10_byte_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_10_byte_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_10_byte_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_10_byte_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_10_byte_unbounded, element_flags_anonymous_map_anonymous_string_10_byte_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_10_byte_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_10_byte_unbounded), key_flags_anonymous_map_anonymous_string_10_byte_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_10_byte_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_10_byte_unbounded", type_ids_var_map_inneraliasboundedstringhelper_octet))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_10_byte_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedstringhelper_octet = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedstringhelper_octet = 0x00000000;
            bool common_var_map_inneraliasboundedstringhelper_octet_ec {false};
            CommonStructMember common_var_map_inneraliasboundedstringhelper_octet {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedstringhelper_octet, member_flags_var_map_inneraliasboundedstringhelper_octet, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_octet, common_var_map_inneraliasboundedstringhelper_octet_ec))};
            if (!common_var_map_inneraliasboundedstringhelper_octet_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedstringhelper_octet member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedstringhelper_octet = "var_map_inneraliasboundedstringhelper_octet";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedstringhelper_octet;
            ann_custom_MapInnerAliasBoundedStringHelperOctet.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedstringhelper_octet = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedstringhelper_octet, member_ann_builtin_var_map_inneraliasboundedstringhelper_octet, ann_custom_MapInnerAliasBoundedStringHelperOctet);
            CompleteStructMember member_var_map_inneraliasboundedstringhelper_octet = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedstringhelper_octet, detail_var_map_inneraliasboundedstringhelper_octet);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedStringHelperOctet, member_var_map_inneraliasboundedstringhelper_octet);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedStringHelperOctet = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedStringHelperOctet, header_MapInnerAliasBoundedStringHelperOctet, member_seq_MapInnerAliasBoundedStringHelperOctet);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedStringHelperOctet, type_name_MapInnerAliasBoundedStringHelperOctet.to_string(), type_ids_MapInnerAliasBoundedStringHelperOctet))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedStringHelperOctet already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedStringHelperChar_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedStringHelperChar)
{

    ReturnCode_t return_code_MapInnerAliasBoundedStringHelperChar {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedStringHelperChar =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedStringHelperChar", type_ids_MapInnerAliasBoundedStringHelperChar);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedStringHelperChar)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedStringHelperChar = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedStringHelperChar = "MapInnerAliasBoundedStringHelperChar";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedStringHelperChar;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedStringHelperChar;
        CompleteTypeDetail detail_MapInnerAliasBoundedStringHelperChar = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedStringHelperChar, ann_custom_MapInnerAliasBoundedStringHelperChar, type_name_MapInnerAliasBoundedStringHelperChar.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedStringHelperChar;
        header_MapInnerAliasBoundedStringHelperChar = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedStringHelperChar);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedStringHelperChar;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedstringhelper_char;
            ReturnCode_t return_code_var_map_inneraliasboundedstringhelper_char {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedstringhelper_char =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_10_char_unbounded", type_ids_var_map_inneraliasboundedstringhelper_char);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_char)
            {
                return_code_var_map_inneraliasboundedstringhelper_char =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_char", type_ids_var_map_inneraliasboundedstringhelper_char);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_char)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_string_10_char_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_10_char_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_char, element_identifier_anonymous_map_anonymous_string_10_char_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_10_char_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_char_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedstringhelper_char =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_inneraliasboundedstringhelper_char);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_char)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_char);
                }
                bool key_identifier_anonymous_map_anonymous_string_10_char_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_10_char_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_char, key_identifier_anonymous_map_anonymous_string_10_char_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_10_char_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_char_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_10_char_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_10_char_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_char_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_10_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_char_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_10_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_char_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_10_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_char_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_10_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_char_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_10_char_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_char_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_char_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_10_char_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_char_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_char_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_10_char_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_10_char_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_10_char_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_10_char_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_10_char_unbounded, element_flags_anonymous_map_anonymous_string_10_char_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_10_char_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_10_char_unbounded), key_flags_anonymous_map_anonymous_string_10_char_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_10_char_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_10_char_unbounded", type_ids_var_map_inneraliasboundedstringhelper_char))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_10_char_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedstringhelper_char = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedstringhelper_char = 0x00000000;
            bool common_var_map_inneraliasboundedstringhelper_char_ec {false};
            CommonStructMember common_var_map_inneraliasboundedstringhelper_char {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedstringhelper_char, member_flags_var_map_inneraliasboundedstringhelper_char, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_char, common_var_map_inneraliasboundedstringhelper_char_ec))};
            if (!common_var_map_inneraliasboundedstringhelper_char_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedstringhelper_char member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedstringhelper_char = "var_map_inneraliasboundedstringhelper_char";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedstringhelper_char;
            ann_custom_MapInnerAliasBoundedStringHelperChar.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedstringhelper_char = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedstringhelper_char, member_ann_builtin_var_map_inneraliasboundedstringhelper_char, ann_custom_MapInnerAliasBoundedStringHelperChar);
            CompleteStructMember member_var_map_inneraliasboundedstringhelper_char = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedstringhelper_char, detail_var_map_inneraliasboundedstringhelper_char);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedStringHelperChar, member_var_map_inneraliasboundedstringhelper_char);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedStringHelperChar = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedStringHelperChar, header_MapInnerAliasBoundedStringHelperChar, member_seq_MapInnerAliasBoundedStringHelperChar);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedStringHelperChar, type_name_MapInnerAliasBoundedStringHelperChar.to_string(), type_ids_MapInnerAliasBoundedStringHelperChar))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedStringHelperChar already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedStringHelperWChar_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedStringHelperWChar)
{

    ReturnCode_t return_code_MapInnerAliasBoundedStringHelperWChar {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedStringHelperWChar =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedStringHelperWChar", type_ids_MapInnerAliasBoundedStringHelperWChar);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedStringHelperWChar)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedStringHelperWChar = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedStringHelperWChar = "MapInnerAliasBoundedStringHelperWChar";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedStringHelperWChar;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedStringHelperWChar;
        CompleteTypeDetail detail_MapInnerAliasBoundedStringHelperWChar = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedStringHelperWChar, ann_custom_MapInnerAliasBoundedStringHelperWChar, type_name_MapInnerAliasBoundedStringHelperWChar.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedStringHelperWChar;
        header_MapInnerAliasBoundedStringHelperWChar = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedStringHelperWChar);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedStringHelperWChar;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedstringhelper_wchar;
            ReturnCode_t return_code_var_map_inneraliasboundedstringhelper_wchar {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedstringhelper_wchar =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_10_wchar_t_unbounded", type_ids_var_map_inneraliasboundedstringhelper_wchar);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_wchar)
            {
                return_code_var_map_inneraliasboundedstringhelper_wchar =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_wchar_t", type_ids_var_map_inneraliasboundedstringhelper_wchar);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_wchar)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_string_10_wchar_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_10_wchar_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_wchar, element_identifier_anonymous_map_anonymous_string_10_wchar_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_10_wchar_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_wchar_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedstringhelper_wchar =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_inneraliasboundedstringhelper_wchar);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_wchar)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_wchar);
                }
                bool key_identifier_anonymous_map_anonymous_string_10_wchar_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_10_wchar_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_wchar, key_identifier_anonymous_map_anonymous_string_10_wchar_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_10_wchar_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_wchar_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_10_wchar_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_10_wchar_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_wchar_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_10_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_wchar_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_10_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_wchar_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_10_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_wchar_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_10_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_wchar_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_10_wchar_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_wchar_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_wchar_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_10_wchar_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_wchar_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_wchar_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_10_wchar_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_10_wchar_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_10_wchar_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_10_wchar_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_10_wchar_t_unbounded, element_flags_anonymous_map_anonymous_string_10_wchar_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_10_wchar_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_10_wchar_t_unbounded), key_flags_anonymous_map_anonymous_string_10_wchar_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_10_wchar_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_10_wchar_t_unbounded", type_ids_var_map_inneraliasboundedstringhelper_wchar))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_10_wchar_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedstringhelper_wchar = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedstringhelper_wchar = 0x00000000;
            bool common_var_map_inneraliasboundedstringhelper_wchar_ec {false};
            CommonStructMember common_var_map_inneraliasboundedstringhelper_wchar {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedstringhelper_wchar, member_flags_var_map_inneraliasboundedstringhelper_wchar, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_wchar, common_var_map_inneraliasboundedstringhelper_wchar_ec))};
            if (!common_var_map_inneraliasboundedstringhelper_wchar_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedstringhelper_wchar member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedstringhelper_wchar = "var_map_inneraliasboundedstringhelper_wchar";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedstringhelper_wchar;
            ann_custom_MapInnerAliasBoundedStringHelperWChar.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedstringhelper_wchar = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedstringhelper_wchar, member_ann_builtin_var_map_inneraliasboundedstringhelper_wchar, ann_custom_MapInnerAliasBoundedStringHelperWChar);
            CompleteStructMember member_var_map_inneraliasboundedstringhelper_wchar = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedstringhelper_wchar, detail_var_map_inneraliasboundedstringhelper_wchar);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedStringHelperWChar, member_var_map_inneraliasboundedstringhelper_wchar);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedStringHelperWChar = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedStringHelperWChar, header_MapInnerAliasBoundedStringHelperWChar, member_seq_MapInnerAliasBoundedStringHelperWChar);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedStringHelperWChar, type_name_MapInnerAliasBoundedStringHelperWChar.to_string(), type_ids_MapInnerAliasBoundedStringHelperWChar))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedStringHelperWChar already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedStringHelperString_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedStringHelperString)
{

    ReturnCode_t return_code_MapInnerAliasBoundedStringHelperString {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedStringHelperString =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedStringHelperString", type_ids_MapInnerAliasBoundedStringHelperString);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedStringHelperString)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedStringHelperString = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedStringHelperString = "MapInnerAliasBoundedStringHelperString";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedStringHelperString;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedStringHelperString;
        CompleteTypeDetail detail_MapInnerAliasBoundedStringHelperString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedStringHelperString, ann_custom_MapInnerAliasBoundedStringHelperString, type_name_MapInnerAliasBoundedStringHelperString.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedStringHelperString;
        header_MapInnerAliasBoundedStringHelperString = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedStringHelperString);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedStringHelperString;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedstringhelper_string;
            ReturnCode_t return_code_var_map_inneraliasboundedstringhelper_string {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedstringhelper_string =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded", type_ids_var_map_inneraliasboundedstringhelper_string);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_string)
            {
                return_code_var_map_inneraliasboundedstringhelper_string =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_inneraliasboundedstringhelper_string);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_string)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_inneraliasboundedstringhelper_string))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool element_identifier_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_string, element_identifier_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedstringhelper_string =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_inneraliasboundedstringhelper_string);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_string)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_string);
                }
                bool key_identifier_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_string, key_identifier_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded, element_flags_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded), key_flags_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded", type_ids_var_map_inneraliasboundedstringhelper_string))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_10_anonymous_string_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedstringhelper_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedstringhelper_string = 0x00000000;
            bool common_var_map_inneraliasboundedstringhelper_string_ec {false};
            CommonStructMember common_var_map_inneraliasboundedstringhelper_string {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedstringhelper_string, member_flags_var_map_inneraliasboundedstringhelper_string, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_string, common_var_map_inneraliasboundedstringhelper_string_ec))};
            if (!common_var_map_inneraliasboundedstringhelper_string_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedstringhelper_string member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedstringhelper_string = "var_map_inneraliasboundedstringhelper_string";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedstringhelper_string;
            ann_custom_MapInnerAliasBoundedStringHelperString.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedstringhelper_string = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedstringhelper_string, member_ann_builtin_var_map_inneraliasboundedstringhelper_string, ann_custom_MapInnerAliasBoundedStringHelperString);
            CompleteStructMember member_var_map_inneraliasboundedstringhelper_string = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedstringhelper_string, detail_var_map_inneraliasboundedstringhelper_string);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedStringHelperString, member_var_map_inneraliasboundedstringhelper_string);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedStringHelperString = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedStringHelperString, header_MapInnerAliasBoundedStringHelperString, member_seq_MapInnerAliasBoundedStringHelperString);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedStringHelperString, type_name_MapInnerAliasBoundedStringHelperString.to_string(), type_ids_MapInnerAliasBoundedStringHelperString))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedStringHelperString already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedStringHelperWString_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedStringHelperWString)
{

    ReturnCode_t return_code_MapInnerAliasBoundedStringHelperWString {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedStringHelperWString =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedStringHelperWString", type_ids_MapInnerAliasBoundedStringHelperWString);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedStringHelperWString)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedStringHelperWString = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedStringHelperWString = "MapInnerAliasBoundedStringHelperWString";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedStringHelperWString;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedStringHelperWString;
        CompleteTypeDetail detail_MapInnerAliasBoundedStringHelperWString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedStringHelperWString, ann_custom_MapInnerAliasBoundedStringHelperWString, type_name_MapInnerAliasBoundedStringHelperWString.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedStringHelperWString;
        header_MapInnerAliasBoundedStringHelperWString = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedStringHelperWString);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedStringHelperWString;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedstringhelper_wstring;
            ReturnCode_t return_code_var_map_inneraliasboundedstringhelper_wstring {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedstringhelper_wstring =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded", type_ids_var_map_inneraliasboundedstringhelper_wstring);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_wstring)
            {
                return_code_var_map_inneraliasboundedstringhelper_wstring =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_inneraliasboundedstringhelper_wstring);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_wstring)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_inneraliasboundedstringhelper_wstring, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_wstring, element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedstringhelper_wstring =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_inneraliasboundedstringhelper_wstring);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_wstring)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_wstring);
                }
                bool key_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_wstring, key_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded, element_flags_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded), key_flags_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded", type_ids_var_map_inneraliasboundedstringhelper_wstring))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_10_anonymous_wstring_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedstringhelper_wstring = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedstringhelper_wstring = 0x00000000;
            bool common_var_map_inneraliasboundedstringhelper_wstring_ec {false};
            CommonStructMember common_var_map_inneraliasboundedstringhelper_wstring {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedstringhelper_wstring, member_flags_var_map_inneraliasboundedstringhelper_wstring, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_wstring, common_var_map_inneraliasboundedstringhelper_wstring_ec))};
            if (!common_var_map_inneraliasboundedstringhelper_wstring_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedstringhelper_wstring member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedstringhelper_wstring = "var_map_inneraliasboundedstringhelper_wstring";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedstringhelper_wstring;
            ann_custom_MapInnerAliasBoundedStringHelperWString.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedstringhelper_wstring = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedstringhelper_wstring, member_ann_builtin_var_map_inneraliasboundedstringhelper_wstring, ann_custom_MapInnerAliasBoundedStringHelperWString);
            CompleteStructMember member_var_map_inneraliasboundedstringhelper_wstring = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedstringhelper_wstring, detail_var_map_inneraliasboundedstringhelper_wstring);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedStringHelperWString, member_var_map_inneraliasboundedstringhelper_wstring);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedStringHelperWString = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedStringHelperWString, header_MapInnerAliasBoundedStringHelperWString, member_seq_MapInnerAliasBoundedStringHelperWString);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedStringHelperWString, type_name_MapInnerAliasBoundedStringHelperWString.to_string(), type_ids_MapInnerAliasBoundedStringHelperWString))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedStringHelperWString already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper)
{

    ReturnCode_t return_code_MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper", type_ids_MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper = "MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper;
        CompleteTypeDetail detail_MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper, ann_custom_MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper, type_name_MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper;
        header_MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper;
            ReturnCode_t return_code_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_10_anonymous_string_10_unbounded", type_ids_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper)
            {
                return_code_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper);
                }
                bool element_identifier_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper, element_identifier_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_anonymous_string_10_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper);
                }
                bool key_identifier_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper, key_identifier_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_anonymous_string_10_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded, element_flags_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded), key_flags_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_10_anonymous_string_10_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_10_anonymous_string_10_unbounded", type_ids_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_10_anonymous_string_10_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper = 0x00000000;
            bool common_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper_ec {false};
            CommonStructMember common_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper, member_flags_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper, common_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper_ec))};
            if (!common_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper = "var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper;
            ann_custom_MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper, member_ann_builtin_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper, ann_custom_MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper);
            CompleteStructMember member_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper, detail_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper, member_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper, header_MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper, member_seq_MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper, type_name_MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper.to_string(), type_ids_MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper)
{

    ReturnCode_t return_code_MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper", type_ids_MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper = "MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper;
        CompleteTypeDetail detail_MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper, ann_custom_MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper, type_name_MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper;
        header_MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper;
            ReturnCode_t return_code_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded", type_ids_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper)
            {
                return_code_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper);
                }
                bool element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper, element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper);
                }
                bool key_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper, key_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded, element_flags_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded), key_flags_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded", type_ids_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_10_anonymous_wstring_10_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper = 0x00000000;
            bool common_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper_ec {false};
            CommonStructMember common_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper, member_flags_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper, common_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper_ec))};
            if (!common_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper = "var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper;
            ann_custom_MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper, member_ann_builtin_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper, ann_custom_MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper);
            CompleteStructMember member_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper, detail_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper, member_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper, header_MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper, member_seq_MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper, type_name_MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper.to_string(), type_ids_MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedStringHelperInnerEnumHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedStringHelperInnerEnumHelper)
{

    ReturnCode_t return_code_MapInnerAliasBoundedStringHelperInnerEnumHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedStringHelperInnerEnumHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedStringHelperInnerEnumHelper", type_ids_MapInnerAliasBoundedStringHelperInnerEnumHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedStringHelperInnerEnumHelper)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedStringHelperInnerEnumHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedStringHelperInnerEnumHelper = "MapInnerAliasBoundedStringHelperInnerEnumHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedStringHelperInnerEnumHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedStringHelperInnerEnumHelper;
        CompleteTypeDetail detail_MapInnerAliasBoundedStringHelperInnerEnumHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedStringHelperInnerEnumHelper, ann_custom_MapInnerAliasBoundedStringHelperInnerEnumHelper, type_name_MapInnerAliasBoundedStringHelperInnerEnumHelper.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedStringHelperInnerEnumHelper;
        header_MapInnerAliasBoundedStringHelperInnerEnumHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedStringHelperInnerEnumHelper);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedStringHelperInnerEnumHelper;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedstringhelper_innerenumhelper;
            ReturnCode_t return_code_var_map_inneraliasboundedstringhelper_innerenumhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedstringhelper_innerenumhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded", type_ids_var_map_inneraliasboundedstringhelper_innerenumhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_innerenumhelper)
            {
                return_code_var_map_inneraliasboundedstringhelper_innerenumhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerEnumHelper", type_ids_var_map_inneraliasboundedstringhelper_innerenumhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_innerenumhelper)
                {
                ::register_InnerEnumHelper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_innerenumhelper);
                }
                bool element_identifier_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_innerenumhelper, element_identifier_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedstringhelper_innerenumhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_inneraliasboundedstringhelper_innerenumhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_innerenumhelper)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_innerenumhelper);
                }
                bool key_identifier_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_innerenumhelper, key_identifier_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded, element_flags_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded), key_flags_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded", type_ids_var_map_inneraliasboundedstringhelper_innerenumhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_10_InnerEnumHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedstringhelper_innerenumhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedstringhelper_innerenumhelper = 0x00000000;
            bool common_var_map_inneraliasboundedstringhelper_innerenumhelper_ec {false};
            CommonStructMember common_var_map_inneraliasboundedstringhelper_innerenumhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedstringhelper_innerenumhelper, member_flags_var_map_inneraliasboundedstringhelper_innerenumhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_innerenumhelper, common_var_map_inneraliasboundedstringhelper_innerenumhelper_ec))};
            if (!common_var_map_inneraliasboundedstringhelper_innerenumhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedstringhelper_innerenumhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedstringhelper_innerenumhelper = "var_map_inneraliasboundedstringhelper_innerenumhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedstringhelper_innerenumhelper;
            ann_custom_MapInnerAliasBoundedStringHelperInnerEnumHelper.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedstringhelper_innerenumhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedstringhelper_innerenumhelper, member_ann_builtin_var_map_inneraliasboundedstringhelper_innerenumhelper, ann_custom_MapInnerAliasBoundedStringHelperInnerEnumHelper);
            CompleteStructMember member_var_map_inneraliasboundedstringhelper_innerenumhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedstringhelper_innerenumhelper, detail_var_map_inneraliasboundedstringhelper_innerenumhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedStringHelperInnerEnumHelper, member_var_map_inneraliasboundedstringhelper_innerenumhelper);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedStringHelperInnerEnumHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedStringHelperInnerEnumHelper, header_MapInnerAliasBoundedStringHelperInnerEnumHelper, member_seq_MapInnerAliasBoundedStringHelperInnerEnumHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedStringHelperInnerEnumHelper, type_name_MapInnerAliasBoundedStringHelperInnerEnumHelper.to_string(), type_ids_MapInnerAliasBoundedStringHelperInnerEnumHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedStringHelperInnerEnumHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedStringHelperInnerBitMaskHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedStringHelperInnerBitMaskHelper)
{

    ReturnCode_t return_code_MapInnerAliasBoundedStringHelperInnerBitMaskHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedStringHelperInnerBitMaskHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedStringHelperInnerBitMaskHelper", type_ids_MapInnerAliasBoundedStringHelperInnerBitMaskHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedStringHelperInnerBitMaskHelper)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedStringHelperInnerBitMaskHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedStringHelperInnerBitMaskHelper = "MapInnerAliasBoundedStringHelperInnerBitMaskHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedStringHelperInnerBitMaskHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedStringHelperInnerBitMaskHelper;
        CompleteTypeDetail detail_MapInnerAliasBoundedStringHelperInnerBitMaskHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedStringHelperInnerBitMaskHelper, ann_custom_MapInnerAliasBoundedStringHelperInnerBitMaskHelper, type_name_MapInnerAliasBoundedStringHelperInnerBitMaskHelper.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedStringHelperInnerBitMaskHelper;
        header_MapInnerAliasBoundedStringHelperInnerBitMaskHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedStringHelperInnerBitMaskHelper);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedStringHelperInnerBitMaskHelper;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedstringhelper_innerbitmaskhelper;
            ReturnCode_t return_code_var_map_inneraliasboundedstringhelper_innerbitmaskhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedstringhelper_innerbitmaskhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded", type_ids_var_map_inneraliasboundedstringhelper_innerbitmaskhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_innerbitmaskhelper)
            {
                return_code_var_map_inneraliasboundedstringhelper_innerbitmaskhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerBitMaskHelper", type_ids_var_map_inneraliasboundedstringhelper_innerbitmaskhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_innerbitmaskhelper)
                {
                ::register_InnerBitMaskHelper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_innerbitmaskhelper);
                }
                bool element_identifier_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_innerbitmaskhelper, element_identifier_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedstringhelper_innerbitmaskhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_inneraliasboundedstringhelper_innerbitmaskhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_innerbitmaskhelper)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_innerbitmaskhelper);
                }
                bool key_identifier_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_innerbitmaskhelper, key_identifier_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded, element_flags_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded), key_flags_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded", type_ids_var_map_inneraliasboundedstringhelper_innerbitmaskhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_10_InnerBitMaskHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedstringhelper_innerbitmaskhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedstringhelper_innerbitmaskhelper = 0x00000000;
            bool common_var_map_inneraliasboundedstringhelper_innerbitmaskhelper_ec {false};
            CommonStructMember common_var_map_inneraliasboundedstringhelper_innerbitmaskhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedstringhelper_innerbitmaskhelper, member_flags_var_map_inneraliasboundedstringhelper_innerbitmaskhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_innerbitmaskhelper, common_var_map_inneraliasboundedstringhelper_innerbitmaskhelper_ec))};
            if (!common_var_map_inneraliasboundedstringhelper_innerbitmaskhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedstringhelper_innerbitmaskhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedstringhelper_innerbitmaskhelper = "var_map_inneraliasboundedstringhelper_innerbitmaskhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedstringhelper_innerbitmaskhelper;
            ann_custom_MapInnerAliasBoundedStringHelperInnerBitMaskHelper.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedstringhelper_innerbitmaskhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedstringhelper_innerbitmaskhelper, member_ann_builtin_var_map_inneraliasboundedstringhelper_innerbitmaskhelper, ann_custom_MapInnerAliasBoundedStringHelperInnerBitMaskHelper);
            CompleteStructMember member_var_map_inneraliasboundedstringhelper_innerbitmaskhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedstringhelper_innerbitmaskhelper, detail_var_map_inneraliasboundedstringhelper_innerbitmaskhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedStringHelperInnerBitMaskHelper, member_var_map_inneraliasboundedstringhelper_innerbitmaskhelper);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedStringHelperInnerBitMaskHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedStringHelperInnerBitMaskHelper, header_MapInnerAliasBoundedStringHelperInnerBitMaskHelper, member_seq_MapInnerAliasBoundedStringHelperInnerBitMaskHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedStringHelperInnerBitMaskHelper, type_name_MapInnerAliasBoundedStringHelperInnerBitMaskHelper.to_string(), type_ids_MapInnerAliasBoundedStringHelperInnerBitMaskHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedStringHelperInnerBitMaskHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedStringHelperInnerAliasHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedStringHelperInnerAliasHelper)
{

    ReturnCode_t return_code_MapInnerAliasBoundedStringHelperInnerAliasHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedStringHelperInnerAliasHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedStringHelperInnerAliasHelper", type_ids_MapInnerAliasBoundedStringHelperInnerAliasHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedStringHelperInnerAliasHelper)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedStringHelperInnerAliasHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedStringHelperInnerAliasHelper = "MapInnerAliasBoundedStringHelperInnerAliasHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedStringHelperInnerAliasHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedStringHelperInnerAliasHelper;
        CompleteTypeDetail detail_MapInnerAliasBoundedStringHelperInnerAliasHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedStringHelperInnerAliasHelper, ann_custom_MapInnerAliasBoundedStringHelperInnerAliasHelper, type_name_MapInnerAliasBoundedStringHelperInnerAliasHelper.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedStringHelperInnerAliasHelper;
        header_MapInnerAliasBoundedStringHelperInnerAliasHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedStringHelperInnerAliasHelper);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedStringHelperInnerAliasHelper;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedstringhelper_inneraliashelper;
            ReturnCode_t return_code_var_map_inneraliasboundedstringhelper_inneraliashelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedstringhelper_inneraliashelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded", type_ids_var_map_inneraliasboundedstringhelper_inneraliashelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_inneraliashelper)
            {
                return_code_var_map_inneraliasboundedstringhelper_inneraliashelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerAliasHelper", type_ids_var_map_inneraliasboundedstringhelper_inneraliashelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_inneraliashelper)
                {
                ::register_InnerAliasHelper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_inneraliashelper);
                }
                bool element_identifier_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_inneraliashelper, element_identifier_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedstringhelper_inneraliashelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_inneraliasboundedstringhelper_inneraliashelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_inneraliashelper)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_inneraliashelper);
                }
                bool key_identifier_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_inneraliashelper, key_identifier_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded, element_flags_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded), key_flags_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded", type_ids_var_map_inneraliasboundedstringhelper_inneraliashelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_10_InnerAliasHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedstringhelper_inneraliashelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedstringhelper_inneraliashelper = 0x00000000;
            bool common_var_map_inneraliasboundedstringhelper_inneraliashelper_ec {false};
            CommonStructMember common_var_map_inneraliasboundedstringhelper_inneraliashelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedstringhelper_inneraliashelper, member_flags_var_map_inneraliasboundedstringhelper_inneraliashelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_inneraliashelper, common_var_map_inneraliasboundedstringhelper_inneraliashelper_ec))};
            if (!common_var_map_inneraliasboundedstringhelper_inneraliashelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedstringhelper_inneraliashelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedstringhelper_inneraliashelper = "var_map_inneraliasboundedstringhelper_inneraliashelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedstringhelper_inneraliashelper;
            ann_custom_MapInnerAliasBoundedStringHelperInnerAliasHelper.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedstringhelper_inneraliashelper = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedstringhelper_inneraliashelper, member_ann_builtin_var_map_inneraliasboundedstringhelper_inneraliashelper, ann_custom_MapInnerAliasBoundedStringHelperInnerAliasHelper);
            CompleteStructMember member_var_map_inneraliasboundedstringhelper_inneraliashelper = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedstringhelper_inneraliashelper, detail_var_map_inneraliasboundedstringhelper_inneraliashelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedStringHelperInnerAliasHelper, member_var_map_inneraliasboundedstringhelper_inneraliashelper);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedStringHelperInnerAliasHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedStringHelperInnerAliasHelper, header_MapInnerAliasBoundedStringHelperInnerAliasHelper, member_seq_MapInnerAliasBoundedStringHelperInnerAliasHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedStringHelperInnerAliasHelper, type_name_MapInnerAliasBoundedStringHelperInnerAliasHelper.to_string(), type_ids_MapInnerAliasBoundedStringHelperInnerAliasHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedStringHelperInnerAliasHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedStringHelperInnerAliasArrayHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedStringHelperInnerAliasArrayHelper)
{

    ReturnCode_t return_code_MapInnerAliasBoundedStringHelperInnerAliasArrayHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedStringHelperInnerAliasArrayHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedStringHelperInnerAliasArrayHelper", type_ids_MapInnerAliasBoundedStringHelperInnerAliasArrayHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedStringHelperInnerAliasArrayHelper)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedStringHelperInnerAliasArrayHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedStringHelperInnerAliasArrayHelper = "MapInnerAliasBoundedStringHelperInnerAliasArrayHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedStringHelperInnerAliasArrayHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedStringHelperInnerAliasArrayHelper;
        CompleteTypeDetail detail_MapInnerAliasBoundedStringHelperInnerAliasArrayHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedStringHelperInnerAliasArrayHelper, ann_custom_MapInnerAliasBoundedStringHelperInnerAliasArrayHelper, type_name_MapInnerAliasBoundedStringHelperInnerAliasArrayHelper.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedStringHelperInnerAliasArrayHelper;
        header_MapInnerAliasBoundedStringHelperInnerAliasArrayHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedStringHelperInnerAliasArrayHelper);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedStringHelperInnerAliasArrayHelper;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper;
            ReturnCode_t return_code_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded", type_ids_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper)
            {
                return_code_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_array_helper", type_ids_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper)
                {
                ::register_Inner_alias_array_helper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper);
                }
                bool element_identifier_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper, element_identifier_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper);
                }
                bool key_identifier_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper, key_identifier_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded, element_flags_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded), key_flags_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded", type_ids_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_10_anonymous_array_int16_t_2_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper = 0x00000000;
            bool common_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper_ec {false};
            CommonStructMember common_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper, member_flags_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper, common_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper_ec))};
            if (!common_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedstringhelper_inneraliasarrayhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper = "var_map_inneraliasboundedstringhelper_inneraliasarrayhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper;
            ann_custom_MapInnerAliasBoundedStringHelperInnerAliasArrayHelper.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper, member_ann_builtin_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper, ann_custom_MapInnerAliasBoundedStringHelperInnerAliasArrayHelper);
            CompleteStructMember member_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper, detail_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedStringHelperInnerAliasArrayHelper, member_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedStringHelperInnerAliasArrayHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedStringHelperInnerAliasArrayHelper, header_MapInnerAliasBoundedStringHelperInnerAliasArrayHelper, member_seq_MapInnerAliasBoundedStringHelperInnerAliasArrayHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedStringHelperInnerAliasArrayHelper, type_name_MapInnerAliasBoundedStringHelperInnerAliasArrayHelper.to_string(), type_ids_MapInnerAliasBoundedStringHelperInnerAliasArrayHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedStringHelperInnerAliasArrayHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper)
{

    ReturnCode_t return_code_MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper", type_ids_MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper = "MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper;
        CompleteTypeDetail detail_MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper, ann_custom_MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper, type_name_MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper;
        header_MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedstringhelper_inneraliassequencehelper;
            ReturnCode_t return_code_var_map_inneraliasboundedstringhelper_inneraliassequencehelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedstringhelper_inneraliassequencehelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded", type_ids_var_map_inneraliasboundedstringhelper_inneraliassequencehelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_inneraliassequencehelper)
            {
                return_code_var_map_inneraliasboundedstringhelper_inneraliassequencehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_sequence_helper", type_ids_var_map_inneraliasboundedstringhelper_inneraliassequencehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_inneraliassequencehelper)
                {
                ::register_Inner_alias_sequence_helper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_inneraliassequencehelper);
                }
                bool element_identifier_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_inneraliassequencehelper, element_identifier_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedstringhelper_inneraliassequencehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_inneraliasboundedstringhelper_inneraliassequencehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_inneraliassequencehelper)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_inneraliassequencehelper);
                }
                bool key_identifier_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_inneraliassequencehelper, key_identifier_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded, element_flags_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded), key_flags_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded", type_ids_var_map_inneraliasboundedstringhelper_inneraliassequencehelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_10_anonymous_sequence_int16_t_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedstringhelper_inneraliassequencehelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedstringhelper_inneraliassequencehelper = 0x00000000;
            bool common_var_map_inneraliasboundedstringhelper_inneraliassequencehelper_ec {false};
            CommonStructMember common_var_map_inneraliasboundedstringhelper_inneraliassequencehelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedstringhelper_inneraliassequencehelper, member_flags_var_map_inneraliasboundedstringhelper_inneraliassequencehelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_inneraliassequencehelper, common_var_map_inneraliasboundedstringhelper_inneraliassequencehelper_ec))};
            if (!common_var_map_inneraliasboundedstringhelper_inneraliassequencehelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedstringhelper_inneraliassequencehelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedstringhelper_inneraliassequencehelper = "var_map_inneraliasboundedstringhelper_inneraliassequencehelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedstringhelper_inneraliassequencehelper;
            ann_custom_MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedstringhelper_inneraliassequencehelper = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedstringhelper_inneraliassequencehelper, member_ann_builtin_var_map_inneraliasboundedstringhelper_inneraliassequencehelper, ann_custom_MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper);
            CompleteStructMember member_var_map_inneraliasboundedstringhelper_inneraliassequencehelper = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedstringhelper_inneraliassequencehelper, detail_var_map_inneraliasboundedstringhelper_inneraliassequencehelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper, member_var_map_inneraliasboundedstringhelper_inneraliassequencehelper);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper, header_MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper, member_seq_MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper, type_name_MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper.to_string(), type_ids_MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedStringHelperInnerAliasMapHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedStringHelperInnerAliasMapHelper)
{

    ReturnCode_t return_code_MapInnerAliasBoundedStringHelperInnerAliasMapHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedStringHelperInnerAliasMapHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedStringHelperInnerAliasMapHelper", type_ids_MapInnerAliasBoundedStringHelperInnerAliasMapHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedStringHelperInnerAliasMapHelper)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedStringHelperInnerAliasMapHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedStringHelperInnerAliasMapHelper = "MapInnerAliasBoundedStringHelperInnerAliasMapHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedStringHelperInnerAliasMapHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedStringHelperInnerAliasMapHelper;
        CompleteTypeDetail detail_MapInnerAliasBoundedStringHelperInnerAliasMapHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedStringHelperInnerAliasMapHelper, ann_custom_MapInnerAliasBoundedStringHelperInnerAliasMapHelper, type_name_MapInnerAliasBoundedStringHelperInnerAliasMapHelper.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedStringHelperInnerAliasMapHelper;
        header_MapInnerAliasBoundedStringHelperInnerAliasMapHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedStringHelperInnerAliasMapHelper);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedStringHelperInnerAliasMapHelper;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedstringhelper_inneraliasmaphelper;
            ReturnCode_t return_code_var_map_inneraliasboundedstringhelper_inneraliasmaphelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedstringhelper_inneraliasmaphelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded", type_ids_var_map_inneraliasboundedstringhelper_inneraliasmaphelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_inneraliasmaphelper)
            {
                return_code_var_map_inneraliasboundedstringhelper_inneraliasmaphelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_map_helper", type_ids_var_map_inneraliasboundedstringhelper_inneraliasmaphelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_inneraliasmaphelper)
                {
                ::register_Inner_alias_map_helper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_inneraliasmaphelper);
                }
                bool element_identifier_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_inneraliasmaphelper, element_identifier_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedstringhelper_inneraliasmaphelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_inneraliasboundedstringhelper_inneraliasmaphelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_inneraliasmaphelper)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_inneraliasmaphelper);
                }
                bool key_identifier_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_inneraliasmaphelper, key_identifier_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded, element_flags_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded), key_flags_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded", type_ids_var_map_inneraliasboundedstringhelper_inneraliasmaphelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_10_anonymous_map_int32_t_int32_t_0_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedstringhelper_inneraliasmaphelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedstringhelper_inneraliasmaphelper = 0x00000000;
            bool common_var_map_inneraliasboundedstringhelper_inneraliasmaphelper_ec {false};
            CommonStructMember common_var_map_inneraliasboundedstringhelper_inneraliasmaphelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedstringhelper_inneraliasmaphelper, member_flags_var_map_inneraliasboundedstringhelper_inneraliasmaphelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_inneraliasmaphelper, common_var_map_inneraliasboundedstringhelper_inneraliasmaphelper_ec))};
            if (!common_var_map_inneraliasboundedstringhelper_inneraliasmaphelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedstringhelper_inneraliasmaphelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedstringhelper_inneraliasmaphelper = "var_map_inneraliasboundedstringhelper_inneraliasmaphelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedstringhelper_inneraliasmaphelper;
            ann_custom_MapInnerAliasBoundedStringHelperInnerAliasMapHelper.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedstringhelper_inneraliasmaphelper = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedstringhelper_inneraliasmaphelper, member_ann_builtin_var_map_inneraliasboundedstringhelper_inneraliasmaphelper, ann_custom_MapInnerAliasBoundedStringHelperInnerAliasMapHelper);
            CompleteStructMember member_var_map_inneraliasboundedstringhelper_inneraliasmaphelper = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedstringhelper_inneraliasmaphelper, detail_var_map_inneraliasboundedstringhelper_inneraliasmaphelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedStringHelperInnerAliasMapHelper, member_var_map_inneraliasboundedstringhelper_inneraliasmaphelper);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedStringHelperInnerAliasMapHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedStringHelperInnerAliasMapHelper, header_MapInnerAliasBoundedStringHelperInnerAliasMapHelper, member_seq_MapInnerAliasBoundedStringHelperInnerAliasMapHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedStringHelperInnerAliasMapHelper, type_name_MapInnerAliasBoundedStringHelperInnerAliasMapHelper.to_string(), type_ids_MapInnerAliasBoundedStringHelperInnerAliasMapHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedStringHelperInnerAliasMapHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedStringHelperInnerUnionHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedStringHelperInnerUnionHelper)
{

    ReturnCode_t return_code_MapInnerAliasBoundedStringHelperInnerUnionHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedStringHelperInnerUnionHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedStringHelperInnerUnionHelper", type_ids_MapInnerAliasBoundedStringHelperInnerUnionHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedStringHelperInnerUnionHelper)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedStringHelperInnerUnionHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedStringHelperInnerUnionHelper = "MapInnerAliasBoundedStringHelperInnerUnionHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedStringHelperInnerUnionHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedStringHelperInnerUnionHelper;
        CompleteTypeDetail detail_MapInnerAliasBoundedStringHelperInnerUnionHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedStringHelperInnerUnionHelper, ann_custom_MapInnerAliasBoundedStringHelperInnerUnionHelper, type_name_MapInnerAliasBoundedStringHelperInnerUnionHelper.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedStringHelperInnerUnionHelper;
        header_MapInnerAliasBoundedStringHelperInnerUnionHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedStringHelperInnerUnionHelper);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedStringHelperInnerUnionHelper;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedstringhelper_innerunionhelper;
            ReturnCode_t return_code_var_map_inneraliasboundedstringhelper_innerunionhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedstringhelper_innerunionhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded", type_ids_var_map_inneraliasboundedstringhelper_innerunionhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_innerunionhelper)
            {
                return_code_var_map_inneraliasboundedstringhelper_innerunionhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerUnionHelper", type_ids_var_map_inneraliasboundedstringhelper_innerunionhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_innerunionhelper)
                {
                ::register_InnerUnionHelper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_innerunionhelper);
                }
                bool element_identifier_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_innerunionhelper, element_identifier_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedstringhelper_innerunionhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_inneraliasboundedstringhelper_innerunionhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_innerunionhelper)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_innerunionhelper);
                }
                bool key_identifier_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_innerunionhelper, key_identifier_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded, element_flags_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded), key_flags_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded", type_ids_var_map_inneraliasboundedstringhelper_innerunionhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_10_InnerUnionHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedstringhelper_innerunionhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedstringhelper_innerunionhelper = 0x00000000;
            bool common_var_map_inneraliasboundedstringhelper_innerunionhelper_ec {false};
            CommonStructMember common_var_map_inneraliasboundedstringhelper_innerunionhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedstringhelper_innerunionhelper, member_flags_var_map_inneraliasboundedstringhelper_innerunionhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_innerunionhelper, common_var_map_inneraliasboundedstringhelper_innerunionhelper_ec))};
            if (!common_var_map_inneraliasboundedstringhelper_innerunionhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedstringhelper_innerunionhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedstringhelper_innerunionhelper = "var_map_inneraliasboundedstringhelper_innerunionhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedstringhelper_innerunionhelper;
            ann_custom_MapInnerAliasBoundedStringHelperInnerUnionHelper.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedstringhelper_innerunionhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedstringhelper_innerunionhelper, member_ann_builtin_var_map_inneraliasboundedstringhelper_innerunionhelper, ann_custom_MapInnerAliasBoundedStringHelperInnerUnionHelper);
            CompleteStructMember member_var_map_inneraliasboundedstringhelper_innerunionhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedstringhelper_innerunionhelper, detail_var_map_inneraliasboundedstringhelper_innerunionhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedStringHelperInnerUnionHelper, member_var_map_inneraliasboundedstringhelper_innerunionhelper);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedStringHelperInnerUnionHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedStringHelperInnerUnionHelper, header_MapInnerAliasBoundedStringHelperInnerUnionHelper, member_seq_MapInnerAliasBoundedStringHelperInnerUnionHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedStringHelperInnerUnionHelper, type_name_MapInnerAliasBoundedStringHelperInnerUnionHelper.to_string(), type_ids_MapInnerAliasBoundedStringHelperInnerUnionHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedStringHelperInnerUnionHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedStringHelperInnerStructureHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedStringHelperInnerStructureHelper)
{

    ReturnCode_t return_code_MapInnerAliasBoundedStringHelperInnerStructureHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedStringHelperInnerStructureHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedStringHelperInnerStructureHelper", type_ids_MapInnerAliasBoundedStringHelperInnerStructureHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedStringHelperInnerStructureHelper)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedStringHelperInnerStructureHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedStringHelperInnerStructureHelper = "MapInnerAliasBoundedStringHelperInnerStructureHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedStringHelperInnerStructureHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedStringHelperInnerStructureHelper;
        CompleteTypeDetail detail_MapInnerAliasBoundedStringHelperInnerStructureHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedStringHelperInnerStructureHelper, ann_custom_MapInnerAliasBoundedStringHelperInnerStructureHelper, type_name_MapInnerAliasBoundedStringHelperInnerStructureHelper.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedStringHelperInnerStructureHelper;
        header_MapInnerAliasBoundedStringHelperInnerStructureHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedStringHelperInnerStructureHelper);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedStringHelperInnerStructureHelper;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedstringhelper_innerstructurehelper;
            ReturnCode_t return_code_var_map_inneraliasboundedstringhelper_innerstructurehelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedstringhelper_innerstructurehelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded", type_ids_var_map_inneraliasboundedstringhelper_innerstructurehelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_innerstructurehelper)
            {
                return_code_var_map_inneraliasboundedstringhelper_innerstructurehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerStructureHelper", type_ids_var_map_inneraliasboundedstringhelper_innerstructurehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_innerstructurehelper)
                {
                ::register_InnerStructureHelper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_innerstructurehelper);
                }
                bool element_identifier_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_innerstructurehelper, element_identifier_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedstringhelper_innerstructurehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_inneraliasboundedstringhelper_innerstructurehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_innerstructurehelper)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_innerstructurehelper);
                }
                bool key_identifier_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_innerstructurehelper, key_identifier_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded, element_flags_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded), key_flags_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded", type_ids_var_map_inneraliasboundedstringhelper_innerstructurehelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_10_InnerStructureHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedstringhelper_innerstructurehelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedstringhelper_innerstructurehelper = 0x00000000;
            bool common_var_map_inneraliasboundedstringhelper_innerstructurehelper_ec {false};
            CommonStructMember common_var_map_inneraliasboundedstringhelper_innerstructurehelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedstringhelper_innerstructurehelper, member_flags_var_map_inneraliasboundedstringhelper_innerstructurehelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_innerstructurehelper, common_var_map_inneraliasboundedstringhelper_innerstructurehelper_ec))};
            if (!common_var_map_inneraliasboundedstringhelper_innerstructurehelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedstringhelper_innerstructurehelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedstringhelper_innerstructurehelper = "var_map_inneraliasboundedstringhelper_innerstructurehelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedstringhelper_innerstructurehelper;
            ann_custom_MapInnerAliasBoundedStringHelperInnerStructureHelper.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedstringhelper_innerstructurehelper = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedstringhelper_innerstructurehelper, member_ann_builtin_var_map_inneraliasboundedstringhelper_innerstructurehelper, ann_custom_MapInnerAliasBoundedStringHelperInnerStructureHelper);
            CompleteStructMember member_var_map_inneraliasboundedstringhelper_innerstructurehelper = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedstringhelper_innerstructurehelper, detail_var_map_inneraliasboundedstringhelper_innerstructurehelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedStringHelperInnerStructureHelper, member_var_map_inneraliasboundedstringhelper_innerstructurehelper);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedStringHelperInnerStructureHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedStringHelperInnerStructureHelper, header_MapInnerAliasBoundedStringHelperInnerStructureHelper, member_seq_MapInnerAliasBoundedStringHelperInnerStructureHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedStringHelperInnerStructureHelper, type_name_MapInnerAliasBoundedStringHelperInnerStructureHelper.to_string(), type_ids_MapInnerAliasBoundedStringHelperInnerStructureHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedStringHelperInnerStructureHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedStringHelperInnerBitsetHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedStringHelperInnerBitsetHelper)
{

    ReturnCode_t return_code_MapInnerAliasBoundedStringHelperInnerBitsetHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedStringHelperInnerBitsetHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedStringHelperInnerBitsetHelper", type_ids_MapInnerAliasBoundedStringHelperInnerBitsetHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedStringHelperInnerBitsetHelper)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedStringHelperInnerBitsetHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedStringHelperInnerBitsetHelper = "MapInnerAliasBoundedStringHelperInnerBitsetHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedStringHelperInnerBitsetHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedStringHelperInnerBitsetHelper;
        CompleteTypeDetail detail_MapInnerAliasBoundedStringHelperInnerBitsetHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedStringHelperInnerBitsetHelper, ann_custom_MapInnerAliasBoundedStringHelperInnerBitsetHelper, type_name_MapInnerAliasBoundedStringHelperInnerBitsetHelper.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedStringHelperInnerBitsetHelper;
        header_MapInnerAliasBoundedStringHelperInnerBitsetHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedStringHelperInnerBitsetHelper);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedStringHelperInnerBitsetHelper;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedstringhelper_innerbitsethelper;
            ReturnCode_t return_code_var_map_inneraliasboundedstringhelper_innerbitsethelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedstringhelper_innerbitsethelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded", type_ids_var_map_inneraliasboundedstringhelper_innerbitsethelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_innerbitsethelper)
            {
                return_code_var_map_inneraliasboundedstringhelper_innerbitsethelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerBitsetHelper", type_ids_var_map_inneraliasboundedstringhelper_innerbitsethelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_innerbitsethelper)
                {
                ::register_InnerBitsetHelper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_innerbitsethelper);
                }
                bool element_identifier_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_innerbitsethelper, element_identifier_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedstringhelper_innerbitsethelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_inneraliasboundedstringhelper_innerbitsethelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedstringhelper_innerbitsethelper)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_innerbitsethelper);
                }
                bool key_identifier_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_innerbitsethelper, key_identifier_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded, element_flags_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded), key_flags_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded", type_ids_var_map_inneraliasboundedstringhelper_innerbitsethelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_10_InnerBitsetHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedstringhelper_innerbitsethelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedstringhelper_innerbitsethelper = 0x00000000;
            bool common_var_map_inneraliasboundedstringhelper_innerbitsethelper_ec {false};
            CommonStructMember common_var_map_inneraliasboundedstringhelper_innerbitsethelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedstringhelper_innerbitsethelper, member_flags_var_map_inneraliasboundedstringhelper_innerbitsethelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedstringhelper_innerbitsethelper, common_var_map_inneraliasboundedstringhelper_innerbitsethelper_ec))};
            if (!common_var_map_inneraliasboundedstringhelper_innerbitsethelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedstringhelper_innerbitsethelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedstringhelper_innerbitsethelper = "var_map_inneraliasboundedstringhelper_innerbitsethelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedstringhelper_innerbitsethelper;
            ann_custom_MapInnerAliasBoundedStringHelperInnerBitsetHelper.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedstringhelper_innerbitsethelper = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedstringhelper_innerbitsethelper, member_ann_builtin_var_map_inneraliasboundedstringhelper_innerbitsethelper, ann_custom_MapInnerAliasBoundedStringHelperInnerBitsetHelper);
            CompleteStructMember member_var_map_inneraliasboundedstringhelper_innerbitsethelper = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedstringhelper_innerbitsethelper, detail_var_map_inneraliasboundedstringhelper_innerbitsethelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedStringHelperInnerBitsetHelper, member_var_map_inneraliasboundedstringhelper_innerbitsethelper);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedStringHelperInnerBitsetHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedStringHelperInnerBitsetHelper, header_MapInnerAliasBoundedStringHelperInnerBitsetHelper, member_seq_MapInnerAliasBoundedStringHelperInnerBitsetHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedStringHelperInnerBitsetHelper, type_name_MapInnerAliasBoundedStringHelperInnerBitsetHelper.to_string(), type_ids_MapInnerAliasBoundedStringHelperInnerBitsetHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedStringHelperInnerBitsetHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedWStringHelperShort_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedWStringHelperShort)
{

    ReturnCode_t return_code_MapInnerAliasBoundedWStringHelperShort {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedWStringHelperShort =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedWStringHelperShort", type_ids_MapInnerAliasBoundedWStringHelperShort);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedWStringHelperShort)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedWStringHelperShort = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedWStringHelperShort = "MapInnerAliasBoundedWStringHelperShort";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedWStringHelperShort;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedWStringHelperShort;
        CompleteTypeDetail detail_MapInnerAliasBoundedWStringHelperShort = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedWStringHelperShort, ann_custom_MapInnerAliasBoundedWStringHelperShort, type_name_MapInnerAliasBoundedWStringHelperShort.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedWStringHelperShort;
        header_MapInnerAliasBoundedWStringHelperShort = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedWStringHelperShort);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedWStringHelperShort;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedwstringhelper_short;
            ReturnCode_t return_code_var_map_inneraliasboundedwstringhelper_short {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedwstringhelper_short =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_10_int16_t_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_short);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_short)
            {
                return_code_var_map_inneraliasboundedwstringhelper_short =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_var_map_inneraliasboundedwstringhelper_short);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_short)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_wstring_10_int16_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_10_int16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_short, element_identifier_anonymous_map_anonymous_wstring_10_int16_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_10_int16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_int16_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedwstringhelper_short =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_inneraliasboundedwstringhelper_short);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_short)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_short);
                }
                bool key_identifier_anonymous_map_anonymous_wstring_10_int16_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_10_int16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_short, key_identifier_anonymous_map_anonymous_wstring_10_int16_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_10_int16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_int16_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_10_int16_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_10_int16_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_int16_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_int16_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_int16_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_int16_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_int16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_int16_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_int16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_int16_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_int16_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_int16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_int16_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_int16_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_10_int16_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_10_int16_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_10_int16_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_10_int16_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_10_int16_t_unbounded, element_flags_anonymous_map_anonymous_wstring_10_int16_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_10_int16_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_10_int16_t_unbounded), key_flags_anonymous_map_anonymous_wstring_10_int16_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_10_int16_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_10_int16_t_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_short))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_10_int16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedwstringhelper_short = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedwstringhelper_short = 0x00000000;
            bool common_var_map_inneraliasboundedwstringhelper_short_ec {false};
            CommonStructMember common_var_map_inneraliasboundedwstringhelper_short {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedwstringhelper_short, member_flags_var_map_inneraliasboundedwstringhelper_short, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_short, common_var_map_inneraliasboundedwstringhelper_short_ec))};
            if (!common_var_map_inneraliasboundedwstringhelper_short_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedwstringhelper_short member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedwstringhelper_short = "var_map_inneraliasboundedwstringhelper_short";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedwstringhelper_short;
            ann_custom_MapInnerAliasBoundedWStringHelperShort.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedwstringhelper_short = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedwstringhelper_short, member_ann_builtin_var_map_inneraliasboundedwstringhelper_short, ann_custom_MapInnerAliasBoundedWStringHelperShort);
            CompleteStructMember member_var_map_inneraliasboundedwstringhelper_short = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedwstringhelper_short, detail_var_map_inneraliasboundedwstringhelper_short);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedWStringHelperShort, member_var_map_inneraliasboundedwstringhelper_short);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedWStringHelperShort = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedWStringHelperShort, header_MapInnerAliasBoundedWStringHelperShort, member_seq_MapInnerAliasBoundedWStringHelperShort);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedWStringHelperShort, type_name_MapInnerAliasBoundedWStringHelperShort.to_string(), type_ids_MapInnerAliasBoundedWStringHelperShort))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedWStringHelperShort already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedWStringHelperUShort_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedWStringHelperUShort)
{

    ReturnCode_t return_code_MapInnerAliasBoundedWStringHelperUShort {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedWStringHelperUShort =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedWStringHelperUShort", type_ids_MapInnerAliasBoundedWStringHelperUShort);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedWStringHelperUShort)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedWStringHelperUShort = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedWStringHelperUShort = "MapInnerAliasBoundedWStringHelperUShort";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedWStringHelperUShort;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedWStringHelperUShort;
        CompleteTypeDetail detail_MapInnerAliasBoundedWStringHelperUShort = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedWStringHelperUShort, ann_custom_MapInnerAliasBoundedWStringHelperUShort, type_name_MapInnerAliasBoundedWStringHelperUShort.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedWStringHelperUShort;
        header_MapInnerAliasBoundedWStringHelperUShort = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedWStringHelperUShort);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedWStringHelperUShort;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedwstringhelper_ushort;
            ReturnCode_t return_code_var_map_inneraliasboundedwstringhelper_ushort {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedwstringhelper_ushort =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_10_uint16_t_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_ushort);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_ushort)
            {
                return_code_var_map_inneraliasboundedwstringhelper_ushort =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_var_map_inneraliasboundedwstringhelper_ushort);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_ushort)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_wstring_10_uint16_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_10_uint16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_ushort, element_identifier_anonymous_map_anonymous_wstring_10_uint16_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_10_uint16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_uint16_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedwstringhelper_ushort =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_inneraliasboundedwstringhelper_ushort);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_ushort)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_ushort);
                }
                bool key_identifier_anonymous_map_anonymous_wstring_10_uint16_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_10_uint16_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_ushort, key_identifier_anonymous_map_anonymous_wstring_10_uint16_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_10_uint16_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_uint16_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_10_uint16_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_10_uint16_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_uint16_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_uint16_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_uint16_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_uint16_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_uint16_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_uint16_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_uint16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_uint16_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_uint16_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_uint16_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_uint16_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_uint16_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_10_uint16_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_10_uint16_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_10_uint16_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_10_uint16_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_10_uint16_t_unbounded, element_flags_anonymous_map_anonymous_wstring_10_uint16_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_10_uint16_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_10_uint16_t_unbounded), key_flags_anonymous_map_anonymous_wstring_10_uint16_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_10_uint16_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_10_uint16_t_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_ushort))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_10_uint16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedwstringhelper_ushort = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedwstringhelper_ushort = 0x00000000;
            bool common_var_map_inneraliasboundedwstringhelper_ushort_ec {false};
            CommonStructMember common_var_map_inneraliasboundedwstringhelper_ushort {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedwstringhelper_ushort, member_flags_var_map_inneraliasboundedwstringhelper_ushort, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_ushort, common_var_map_inneraliasboundedwstringhelper_ushort_ec))};
            if (!common_var_map_inneraliasboundedwstringhelper_ushort_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedwstringhelper_ushort member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedwstringhelper_ushort = "var_map_inneraliasboundedwstringhelper_ushort";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedwstringhelper_ushort;
            ann_custom_MapInnerAliasBoundedWStringHelperUShort.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedwstringhelper_ushort = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedwstringhelper_ushort, member_ann_builtin_var_map_inneraliasboundedwstringhelper_ushort, ann_custom_MapInnerAliasBoundedWStringHelperUShort);
            CompleteStructMember member_var_map_inneraliasboundedwstringhelper_ushort = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedwstringhelper_ushort, detail_var_map_inneraliasboundedwstringhelper_ushort);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedWStringHelperUShort, member_var_map_inneraliasboundedwstringhelper_ushort);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedWStringHelperUShort = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedWStringHelperUShort, header_MapInnerAliasBoundedWStringHelperUShort, member_seq_MapInnerAliasBoundedWStringHelperUShort);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedWStringHelperUShort, type_name_MapInnerAliasBoundedWStringHelperUShort.to_string(), type_ids_MapInnerAliasBoundedWStringHelperUShort))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedWStringHelperUShort already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedWStringHelperLong_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedWStringHelperLong)
{

    ReturnCode_t return_code_MapInnerAliasBoundedWStringHelperLong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedWStringHelperLong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedWStringHelperLong", type_ids_MapInnerAliasBoundedWStringHelperLong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedWStringHelperLong)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedWStringHelperLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedWStringHelperLong = "MapInnerAliasBoundedWStringHelperLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedWStringHelperLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedWStringHelperLong;
        CompleteTypeDetail detail_MapInnerAliasBoundedWStringHelperLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedWStringHelperLong, ann_custom_MapInnerAliasBoundedWStringHelperLong, type_name_MapInnerAliasBoundedWStringHelperLong.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedWStringHelperLong;
        header_MapInnerAliasBoundedWStringHelperLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedWStringHelperLong);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedWStringHelperLong;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedwstringhelper_long;
            ReturnCode_t return_code_var_map_inneraliasboundedwstringhelper_long {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedwstringhelper_long =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_10_int32_t_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_long);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_long)
            {
                return_code_var_map_inneraliasboundedwstringhelper_long =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_map_inneraliasboundedwstringhelper_long);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_long)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_wstring_10_int32_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_10_int32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_long, element_identifier_anonymous_map_anonymous_wstring_10_int32_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_10_int32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_int32_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedwstringhelper_long =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_inneraliasboundedwstringhelper_long);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_long)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_long);
                }
                bool key_identifier_anonymous_map_anonymous_wstring_10_int32_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_10_int32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_long, key_identifier_anonymous_map_anonymous_wstring_10_int32_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_10_int32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_int32_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_10_int32_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_10_int32_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_int32_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_int32_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_int32_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_int32_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_int32_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_int32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_int32_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_int32_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_int32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_int32_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_int32_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_10_int32_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_10_int32_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_10_int32_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_10_int32_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_10_int32_t_unbounded, element_flags_anonymous_map_anonymous_wstring_10_int32_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_10_int32_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_10_int32_t_unbounded), key_flags_anonymous_map_anonymous_wstring_10_int32_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_10_int32_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_10_int32_t_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_long))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_10_int32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedwstringhelper_long = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedwstringhelper_long = 0x00000000;
            bool common_var_map_inneraliasboundedwstringhelper_long_ec {false};
            CommonStructMember common_var_map_inneraliasboundedwstringhelper_long {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedwstringhelper_long, member_flags_var_map_inneraliasboundedwstringhelper_long, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_long, common_var_map_inneraliasboundedwstringhelper_long_ec))};
            if (!common_var_map_inneraliasboundedwstringhelper_long_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedwstringhelper_long member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedwstringhelper_long = "var_map_inneraliasboundedwstringhelper_long";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedwstringhelper_long;
            ann_custom_MapInnerAliasBoundedWStringHelperLong.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedwstringhelper_long = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedwstringhelper_long, member_ann_builtin_var_map_inneraliasboundedwstringhelper_long, ann_custom_MapInnerAliasBoundedWStringHelperLong);
            CompleteStructMember member_var_map_inneraliasboundedwstringhelper_long = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedwstringhelper_long, detail_var_map_inneraliasboundedwstringhelper_long);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedWStringHelperLong, member_var_map_inneraliasboundedwstringhelper_long);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedWStringHelperLong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedWStringHelperLong, header_MapInnerAliasBoundedWStringHelperLong, member_seq_MapInnerAliasBoundedWStringHelperLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedWStringHelperLong, type_name_MapInnerAliasBoundedWStringHelperLong.to_string(), type_ids_MapInnerAliasBoundedWStringHelperLong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedWStringHelperLong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedWStringHelperULong_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedWStringHelperULong)
{

    ReturnCode_t return_code_MapInnerAliasBoundedWStringHelperULong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedWStringHelperULong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedWStringHelperULong", type_ids_MapInnerAliasBoundedWStringHelperULong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedWStringHelperULong)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedWStringHelperULong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedWStringHelperULong = "MapInnerAliasBoundedWStringHelperULong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedWStringHelperULong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedWStringHelperULong;
        CompleteTypeDetail detail_MapInnerAliasBoundedWStringHelperULong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedWStringHelperULong, ann_custom_MapInnerAliasBoundedWStringHelperULong, type_name_MapInnerAliasBoundedWStringHelperULong.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedWStringHelperULong;
        header_MapInnerAliasBoundedWStringHelperULong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedWStringHelperULong);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedWStringHelperULong;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedwstringhelper_ulong;
            ReturnCode_t return_code_var_map_inneraliasboundedwstringhelper_ulong {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedwstringhelper_ulong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_10_uint32_t_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_ulong);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_ulong)
            {
                return_code_var_map_inneraliasboundedwstringhelper_ulong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_var_map_inneraliasboundedwstringhelper_ulong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_ulong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_wstring_10_uint32_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_10_uint32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_ulong, element_identifier_anonymous_map_anonymous_wstring_10_uint32_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_10_uint32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_uint32_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedwstringhelper_ulong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_inneraliasboundedwstringhelper_ulong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_ulong)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_ulong);
                }
                bool key_identifier_anonymous_map_anonymous_wstring_10_uint32_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_10_uint32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_ulong, key_identifier_anonymous_map_anonymous_wstring_10_uint32_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_10_uint32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_uint32_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_10_uint32_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_10_uint32_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_uint32_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_uint32_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_uint32_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_uint32_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_uint32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_uint32_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_uint32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_uint32_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_uint32_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_uint32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_uint32_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_uint32_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_10_uint32_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_10_uint32_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_10_uint32_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_10_uint32_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_10_uint32_t_unbounded, element_flags_anonymous_map_anonymous_wstring_10_uint32_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_10_uint32_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_10_uint32_t_unbounded), key_flags_anonymous_map_anonymous_wstring_10_uint32_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_10_uint32_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_10_uint32_t_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_ulong))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_10_uint32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedwstringhelper_ulong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedwstringhelper_ulong = 0x00000000;
            bool common_var_map_inneraliasboundedwstringhelper_ulong_ec {false};
            CommonStructMember common_var_map_inneraliasboundedwstringhelper_ulong {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedwstringhelper_ulong, member_flags_var_map_inneraliasboundedwstringhelper_ulong, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_ulong, common_var_map_inneraliasboundedwstringhelper_ulong_ec))};
            if (!common_var_map_inneraliasboundedwstringhelper_ulong_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedwstringhelper_ulong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedwstringhelper_ulong = "var_map_inneraliasboundedwstringhelper_ulong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedwstringhelper_ulong;
            ann_custom_MapInnerAliasBoundedWStringHelperULong.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedwstringhelper_ulong = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedwstringhelper_ulong, member_ann_builtin_var_map_inneraliasboundedwstringhelper_ulong, ann_custom_MapInnerAliasBoundedWStringHelperULong);
            CompleteStructMember member_var_map_inneraliasboundedwstringhelper_ulong = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedwstringhelper_ulong, detail_var_map_inneraliasboundedwstringhelper_ulong);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedWStringHelperULong, member_var_map_inneraliasboundedwstringhelper_ulong);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedWStringHelperULong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedWStringHelperULong, header_MapInnerAliasBoundedWStringHelperULong, member_seq_MapInnerAliasBoundedWStringHelperULong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedWStringHelperULong, type_name_MapInnerAliasBoundedWStringHelperULong.to_string(), type_ids_MapInnerAliasBoundedWStringHelperULong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedWStringHelperULong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedWStringHelperLongLong_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedWStringHelperLongLong)
{

    ReturnCode_t return_code_MapInnerAliasBoundedWStringHelperLongLong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedWStringHelperLongLong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedWStringHelperLongLong", type_ids_MapInnerAliasBoundedWStringHelperLongLong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedWStringHelperLongLong)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedWStringHelperLongLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedWStringHelperLongLong = "MapInnerAliasBoundedWStringHelperLongLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedWStringHelperLongLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedWStringHelperLongLong;
        CompleteTypeDetail detail_MapInnerAliasBoundedWStringHelperLongLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedWStringHelperLongLong, ann_custom_MapInnerAliasBoundedWStringHelperLongLong, type_name_MapInnerAliasBoundedWStringHelperLongLong.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedWStringHelperLongLong;
        header_MapInnerAliasBoundedWStringHelperLongLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedWStringHelperLongLong);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedWStringHelperLongLong;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedwstringhelper_longlong;
            ReturnCode_t return_code_var_map_inneraliasboundedwstringhelper_longlong {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedwstringhelper_longlong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_10_int64_t_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_longlong);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_longlong)
            {
                return_code_var_map_inneraliasboundedwstringhelper_longlong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_var_map_inneraliasboundedwstringhelper_longlong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_longlong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_wstring_10_int64_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_10_int64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_longlong, element_identifier_anonymous_map_anonymous_wstring_10_int64_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_10_int64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_int64_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedwstringhelper_longlong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_inneraliasboundedwstringhelper_longlong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_longlong)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_longlong);
                }
                bool key_identifier_anonymous_map_anonymous_wstring_10_int64_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_10_int64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_longlong, key_identifier_anonymous_map_anonymous_wstring_10_int64_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_10_int64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_int64_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_10_int64_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_10_int64_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_int64_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_int64_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_int64_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_int64_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_int64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_int64_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_int64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_int64_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_int64_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_int64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_int64_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_int64_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_10_int64_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_10_int64_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_10_int64_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_10_int64_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_10_int64_t_unbounded, element_flags_anonymous_map_anonymous_wstring_10_int64_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_10_int64_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_10_int64_t_unbounded), key_flags_anonymous_map_anonymous_wstring_10_int64_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_10_int64_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_10_int64_t_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_longlong))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_10_int64_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedwstringhelper_longlong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedwstringhelper_longlong = 0x00000000;
            bool common_var_map_inneraliasboundedwstringhelper_longlong_ec {false};
            CommonStructMember common_var_map_inneraliasboundedwstringhelper_longlong {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedwstringhelper_longlong, member_flags_var_map_inneraliasboundedwstringhelper_longlong, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_longlong, common_var_map_inneraliasboundedwstringhelper_longlong_ec))};
            if (!common_var_map_inneraliasboundedwstringhelper_longlong_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedwstringhelper_longlong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedwstringhelper_longlong = "var_map_inneraliasboundedwstringhelper_longlong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedwstringhelper_longlong;
            ann_custom_MapInnerAliasBoundedWStringHelperLongLong.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedwstringhelper_longlong = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedwstringhelper_longlong, member_ann_builtin_var_map_inneraliasboundedwstringhelper_longlong, ann_custom_MapInnerAliasBoundedWStringHelperLongLong);
            CompleteStructMember member_var_map_inneraliasboundedwstringhelper_longlong = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedwstringhelper_longlong, detail_var_map_inneraliasboundedwstringhelper_longlong);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedWStringHelperLongLong, member_var_map_inneraliasboundedwstringhelper_longlong);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedWStringHelperLongLong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedWStringHelperLongLong, header_MapInnerAliasBoundedWStringHelperLongLong, member_seq_MapInnerAliasBoundedWStringHelperLongLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedWStringHelperLongLong, type_name_MapInnerAliasBoundedWStringHelperLongLong.to_string(), type_ids_MapInnerAliasBoundedWStringHelperLongLong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedWStringHelperLongLong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedWStringHelperULongLong_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedWStringHelperULongLong)
{

    ReturnCode_t return_code_MapInnerAliasBoundedWStringHelperULongLong {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedWStringHelperULongLong =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedWStringHelperULongLong", type_ids_MapInnerAliasBoundedWStringHelperULongLong);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedWStringHelperULongLong)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedWStringHelperULongLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedWStringHelperULongLong = "MapInnerAliasBoundedWStringHelperULongLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedWStringHelperULongLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedWStringHelperULongLong;
        CompleteTypeDetail detail_MapInnerAliasBoundedWStringHelperULongLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedWStringHelperULongLong, ann_custom_MapInnerAliasBoundedWStringHelperULongLong, type_name_MapInnerAliasBoundedWStringHelperULongLong.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedWStringHelperULongLong;
        header_MapInnerAliasBoundedWStringHelperULongLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedWStringHelperULongLong);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedWStringHelperULongLong;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedwstringhelper_ulonglong;
            ReturnCode_t return_code_var_map_inneraliasboundedwstringhelper_ulonglong {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedwstringhelper_ulonglong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_10_uint64_t_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_ulonglong);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_ulonglong)
            {
                return_code_var_map_inneraliasboundedwstringhelper_ulonglong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_var_map_inneraliasboundedwstringhelper_ulonglong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_ulonglong)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_wstring_10_uint64_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_10_uint64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_ulonglong, element_identifier_anonymous_map_anonymous_wstring_10_uint64_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_10_uint64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_uint64_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedwstringhelper_ulonglong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_inneraliasboundedwstringhelper_ulonglong);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_ulonglong)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_ulonglong);
                }
                bool key_identifier_anonymous_map_anonymous_wstring_10_uint64_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_10_uint64_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_ulonglong, key_identifier_anonymous_map_anonymous_wstring_10_uint64_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_10_uint64_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_uint64_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_10_uint64_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_10_uint64_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_uint64_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_uint64_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_uint64_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_uint64_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_uint64_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_uint64_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_uint64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_uint64_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_uint64_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_uint64_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_uint64_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_uint64_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_10_uint64_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_10_uint64_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_10_uint64_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_10_uint64_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_10_uint64_t_unbounded, element_flags_anonymous_map_anonymous_wstring_10_uint64_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_10_uint64_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_10_uint64_t_unbounded), key_flags_anonymous_map_anonymous_wstring_10_uint64_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_10_uint64_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_10_uint64_t_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_ulonglong))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_10_uint64_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedwstringhelper_ulonglong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedwstringhelper_ulonglong = 0x00000000;
            bool common_var_map_inneraliasboundedwstringhelper_ulonglong_ec {false};
            CommonStructMember common_var_map_inneraliasboundedwstringhelper_ulonglong {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedwstringhelper_ulonglong, member_flags_var_map_inneraliasboundedwstringhelper_ulonglong, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_ulonglong, common_var_map_inneraliasboundedwstringhelper_ulonglong_ec))};
            if (!common_var_map_inneraliasboundedwstringhelper_ulonglong_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedwstringhelper_ulonglong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedwstringhelper_ulonglong = "var_map_inneraliasboundedwstringhelper_ulonglong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedwstringhelper_ulonglong;
            ann_custom_MapInnerAliasBoundedWStringHelperULongLong.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedwstringhelper_ulonglong = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedwstringhelper_ulonglong, member_ann_builtin_var_map_inneraliasboundedwstringhelper_ulonglong, ann_custom_MapInnerAliasBoundedWStringHelperULongLong);
            CompleteStructMember member_var_map_inneraliasboundedwstringhelper_ulonglong = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedwstringhelper_ulonglong, detail_var_map_inneraliasboundedwstringhelper_ulonglong);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedWStringHelperULongLong, member_var_map_inneraliasboundedwstringhelper_ulonglong);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedWStringHelperULongLong = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedWStringHelperULongLong, header_MapInnerAliasBoundedWStringHelperULongLong, member_seq_MapInnerAliasBoundedWStringHelperULongLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedWStringHelperULongLong, type_name_MapInnerAliasBoundedWStringHelperULongLong.to_string(), type_ids_MapInnerAliasBoundedWStringHelperULongLong))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedWStringHelperULongLong already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedWStringHelperFloat_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedWStringHelperFloat)
{

    ReturnCode_t return_code_MapInnerAliasBoundedWStringHelperFloat {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedWStringHelperFloat =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedWStringHelperFloat", type_ids_MapInnerAliasBoundedWStringHelperFloat);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedWStringHelperFloat)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedWStringHelperFloat = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedWStringHelperFloat = "MapInnerAliasBoundedWStringHelperFloat";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedWStringHelperFloat;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedWStringHelperFloat;
        CompleteTypeDetail detail_MapInnerAliasBoundedWStringHelperFloat = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedWStringHelperFloat, ann_custom_MapInnerAliasBoundedWStringHelperFloat, type_name_MapInnerAliasBoundedWStringHelperFloat.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedWStringHelperFloat;
        header_MapInnerAliasBoundedWStringHelperFloat = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedWStringHelperFloat);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedWStringHelperFloat;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedwstringhelper_float;
            ReturnCode_t return_code_var_map_inneraliasboundedwstringhelper_float {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedwstringhelper_float =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_10_float_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_float);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_float)
            {
                return_code_var_map_inneraliasboundedwstringhelper_float =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_float", type_ids_var_map_inneraliasboundedwstringhelper_float);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_float)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_wstring_10_float_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_10_float_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_float, element_identifier_anonymous_map_anonymous_wstring_10_float_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_10_float_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_float_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedwstringhelper_float =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_inneraliasboundedwstringhelper_float);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_float)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_float);
                }
                bool key_identifier_anonymous_map_anonymous_wstring_10_float_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_10_float_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_float, key_identifier_anonymous_map_anonymous_wstring_10_float_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_10_float_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_float_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_10_float_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_10_float_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_float_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_float_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_float_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_float_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_float_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_float_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_float_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_float_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_float_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_float_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_float_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_float_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_10_float_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_10_float_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_10_float_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_10_float_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_10_float_unbounded, element_flags_anonymous_map_anonymous_wstring_10_float_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_10_float_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_10_float_unbounded), key_flags_anonymous_map_anonymous_wstring_10_float_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_10_float_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_10_float_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_float))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_10_float_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedwstringhelper_float = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedwstringhelper_float = 0x00000000;
            bool common_var_map_inneraliasboundedwstringhelper_float_ec {false};
            CommonStructMember common_var_map_inneraliasboundedwstringhelper_float {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedwstringhelper_float, member_flags_var_map_inneraliasboundedwstringhelper_float, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_float, common_var_map_inneraliasboundedwstringhelper_float_ec))};
            if (!common_var_map_inneraliasboundedwstringhelper_float_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedwstringhelper_float member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedwstringhelper_float = "var_map_inneraliasboundedwstringhelper_float";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedwstringhelper_float;
            ann_custom_MapInnerAliasBoundedWStringHelperFloat.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedwstringhelper_float = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedwstringhelper_float, member_ann_builtin_var_map_inneraliasboundedwstringhelper_float, ann_custom_MapInnerAliasBoundedWStringHelperFloat);
            CompleteStructMember member_var_map_inneraliasboundedwstringhelper_float = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedwstringhelper_float, detail_var_map_inneraliasboundedwstringhelper_float);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedWStringHelperFloat, member_var_map_inneraliasboundedwstringhelper_float);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedWStringHelperFloat = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedWStringHelperFloat, header_MapInnerAliasBoundedWStringHelperFloat, member_seq_MapInnerAliasBoundedWStringHelperFloat);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedWStringHelperFloat, type_name_MapInnerAliasBoundedWStringHelperFloat.to_string(), type_ids_MapInnerAliasBoundedWStringHelperFloat))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedWStringHelperFloat already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedWStringHelperDouble_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedWStringHelperDouble)
{

    ReturnCode_t return_code_MapInnerAliasBoundedWStringHelperDouble {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedWStringHelperDouble =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedWStringHelperDouble", type_ids_MapInnerAliasBoundedWStringHelperDouble);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedWStringHelperDouble)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedWStringHelperDouble = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedWStringHelperDouble = "MapInnerAliasBoundedWStringHelperDouble";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedWStringHelperDouble;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedWStringHelperDouble;
        CompleteTypeDetail detail_MapInnerAliasBoundedWStringHelperDouble = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedWStringHelperDouble, ann_custom_MapInnerAliasBoundedWStringHelperDouble, type_name_MapInnerAliasBoundedWStringHelperDouble.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedWStringHelperDouble;
        header_MapInnerAliasBoundedWStringHelperDouble = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedWStringHelperDouble);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedWStringHelperDouble;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedwstringhelper_double;
            ReturnCode_t return_code_var_map_inneraliasboundedwstringhelper_double {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedwstringhelper_double =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_10_double_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_double);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_double)
            {
                return_code_var_map_inneraliasboundedwstringhelper_double =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_double", type_ids_var_map_inneraliasboundedwstringhelper_double);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_double)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_wstring_10_double_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_10_double_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_double, element_identifier_anonymous_map_anonymous_wstring_10_double_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_10_double_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_double_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedwstringhelper_double =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_inneraliasboundedwstringhelper_double);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_double)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_double);
                }
                bool key_identifier_anonymous_map_anonymous_wstring_10_double_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_10_double_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_double, key_identifier_anonymous_map_anonymous_wstring_10_double_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_10_double_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_double_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_10_double_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_10_double_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_double_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_double_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_double_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_double_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_double_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_double_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_double_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_double_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_double_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_double_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_double_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_double_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_10_double_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_10_double_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_10_double_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_10_double_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_10_double_unbounded, element_flags_anonymous_map_anonymous_wstring_10_double_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_10_double_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_10_double_unbounded), key_flags_anonymous_map_anonymous_wstring_10_double_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_10_double_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_10_double_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_double))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_10_double_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedwstringhelper_double = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedwstringhelper_double = 0x00000000;
            bool common_var_map_inneraliasboundedwstringhelper_double_ec {false};
            CommonStructMember common_var_map_inneraliasboundedwstringhelper_double {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedwstringhelper_double, member_flags_var_map_inneraliasboundedwstringhelper_double, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_double, common_var_map_inneraliasboundedwstringhelper_double_ec))};
            if (!common_var_map_inneraliasboundedwstringhelper_double_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedwstringhelper_double member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedwstringhelper_double = "var_map_inneraliasboundedwstringhelper_double";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedwstringhelper_double;
            ann_custom_MapInnerAliasBoundedWStringHelperDouble.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedwstringhelper_double = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedwstringhelper_double, member_ann_builtin_var_map_inneraliasboundedwstringhelper_double, ann_custom_MapInnerAliasBoundedWStringHelperDouble);
            CompleteStructMember member_var_map_inneraliasboundedwstringhelper_double = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedwstringhelper_double, detail_var_map_inneraliasboundedwstringhelper_double);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedWStringHelperDouble, member_var_map_inneraliasboundedwstringhelper_double);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedWStringHelperDouble = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedWStringHelperDouble, header_MapInnerAliasBoundedWStringHelperDouble, member_seq_MapInnerAliasBoundedWStringHelperDouble);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedWStringHelperDouble, type_name_MapInnerAliasBoundedWStringHelperDouble.to_string(), type_ids_MapInnerAliasBoundedWStringHelperDouble))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedWStringHelperDouble already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedWStringHelperLongDouble_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedWStringHelperLongDouble)
{

    ReturnCode_t return_code_MapInnerAliasBoundedWStringHelperLongDouble {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedWStringHelperLongDouble =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedWStringHelperLongDouble", type_ids_MapInnerAliasBoundedWStringHelperLongDouble);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedWStringHelperLongDouble)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedWStringHelperLongDouble = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedWStringHelperLongDouble = "MapInnerAliasBoundedWStringHelperLongDouble";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedWStringHelperLongDouble;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedWStringHelperLongDouble;
        CompleteTypeDetail detail_MapInnerAliasBoundedWStringHelperLongDouble = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedWStringHelperLongDouble, ann_custom_MapInnerAliasBoundedWStringHelperLongDouble, type_name_MapInnerAliasBoundedWStringHelperLongDouble.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedWStringHelperLongDouble;
        header_MapInnerAliasBoundedWStringHelperLongDouble = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedWStringHelperLongDouble);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedWStringHelperLongDouble;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedwstringhelper_longdouble;
            ReturnCode_t return_code_var_map_inneraliasboundedwstringhelper_longdouble {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedwstringhelper_longdouble =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_10_longdouble_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_longdouble);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_longdouble)
            {
                return_code_var_map_inneraliasboundedwstringhelper_longdouble =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_longdouble", type_ids_var_map_inneraliasboundedwstringhelper_longdouble);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_longdouble)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_wstring_10_longdouble_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_10_longdouble_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_longdouble, element_identifier_anonymous_map_anonymous_wstring_10_longdouble_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_10_longdouble_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_longdouble_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedwstringhelper_longdouble =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_inneraliasboundedwstringhelper_longdouble);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_longdouble)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_longdouble);
                }
                bool key_identifier_anonymous_map_anonymous_wstring_10_longdouble_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_10_longdouble_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_longdouble, key_identifier_anonymous_map_anonymous_wstring_10_longdouble_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_10_longdouble_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_longdouble_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_10_longdouble_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_10_longdouble_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_longdouble_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_longdouble_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_longdouble_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_longdouble_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_longdouble_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_longdouble_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_longdouble_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_longdouble_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_longdouble_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_longdouble_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_longdouble_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_longdouble_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_10_longdouble_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_10_longdouble_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_10_longdouble_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_10_longdouble_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_10_longdouble_unbounded, element_flags_anonymous_map_anonymous_wstring_10_longdouble_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_10_longdouble_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_10_longdouble_unbounded), key_flags_anonymous_map_anonymous_wstring_10_longdouble_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_10_longdouble_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_10_longdouble_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_longdouble))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_10_longdouble_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedwstringhelper_longdouble = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedwstringhelper_longdouble = 0x00000000;
            bool common_var_map_inneraliasboundedwstringhelper_longdouble_ec {false};
            CommonStructMember common_var_map_inneraliasboundedwstringhelper_longdouble {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedwstringhelper_longdouble, member_flags_var_map_inneraliasboundedwstringhelper_longdouble, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_longdouble, common_var_map_inneraliasboundedwstringhelper_longdouble_ec))};
            if (!common_var_map_inneraliasboundedwstringhelper_longdouble_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedwstringhelper_longdouble member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedwstringhelper_longdouble = "var_map_inneraliasboundedwstringhelper_longdouble";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedwstringhelper_longdouble;
            ann_custom_MapInnerAliasBoundedWStringHelperLongDouble.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedwstringhelper_longdouble = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedwstringhelper_longdouble, member_ann_builtin_var_map_inneraliasboundedwstringhelper_longdouble, ann_custom_MapInnerAliasBoundedWStringHelperLongDouble);
            CompleteStructMember member_var_map_inneraliasboundedwstringhelper_longdouble = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedwstringhelper_longdouble, detail_var_map_inneraliasboundedwstringhelper_longdouble);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedWStringHelperLongDouble, member_var_map_inneraliasboundedwstringhelper_longdouble);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedWStringHelperLongDouble = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedWStringHelperLongDouble, header_MapInnerAliasBoundedWStringHelperLongDouble, member_seq_MapInnerAliasBoundedWStringHelperLongDouble);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedWStringHelperLongDouble, type_name_MapInnerAliasBoundedWStringHelperLongDouble.to_string(), type_ids_MapInnerAliasBoundedWStringHelperLongDouble))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedWStringHelperLongDouble already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedWStringHelperBoolean_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedWStringHelperBoolean)
{

    ReturnCode_t return_code_MapInnerAliasBoundedWStringHelperBoolean {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedWStringHelperBoolean =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedWStringHelperBoolean", type_ids_MapInnerAliasBoundedWStringHelperBoolean);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedWStringHelperBoolean)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedWStringHelperBoolean = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedWStringHelperBoolean = "MapInnerAliasBoundedWStringHelperBoolean";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedWStringHelperBoolean;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedWStringHelperBoolean;
        CompleteTypeDetail detail_MapInnerAliasBoundedWStringHelperBoolean = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedWStringHelperBoolean, ann_custom_MapInnerAliasBoundedWStringHelperBoolean, type_name_MapInnerAliasBoundedWStringHelperBoolean.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedWStringHelperBoolean;
        header_MapInnerAliasBoundedWStringHelperBoolean = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedWStringHelperBoolean);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedWStringHelperBoolean;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedwstringhelper_boolean;
            ReturnCode_t return_code_var_map_inneraliasboundedwstringhelper_boolean {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedwstringhelper_boolean =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_10_bool_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_boolean);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_boolean)
            {
                return_code_var_map_inneraliasboundedwstringhelper_boolean =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_bool", type_ids_var_map_inneraliasboundedwstringhelper_boolean);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_boolean)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_wstring_10_bool_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_10_bool_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_boolean, element_identifier_anonymous_map_anonymous_wstring_10_bool_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_10_bool_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_bool_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedwstringhelper_boolean =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_inneraliasboundedwstringhelper_boolean);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_boolean)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_boolean);
                }
                bool key_identifier_anonymous_map_anonymous_wstring_10_bool_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_10_bool_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_boolean, key_identifier_anonymous_map_anonymous_wstring_10_bool_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_10_bool_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_bool_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_10_bool_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_10_bool_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_bool_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_bool_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_bool_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_bool_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_bool_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_bool_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_bool_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_bool_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_bool_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_bool_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_bool_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_bool_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_10_bool_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_10_bool_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_10_bool_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_10_bool_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_10_bool_unbounded, element_flags_anonymous_map_anonymous_wstring_10_bool_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_10_bool_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_10_bool_unbounded), key_flags_anonymous_map_anonymous_wstring_10_bool_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_10_bool_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_10_bool_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_boolean))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_10_bool_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedwstringhelper_boolean = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedwstringhelper_boolean = 0x00000000;
            bool common_var_map_inneraliasboundedwstringhelper_boolean_ec {false};
            CommonStructMember common_var_map_inneraliasboundedwstringhelper_boolean {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedwstringhelper_boolean, member_flags_var_map_inneraliasboundedwstringhelper_boolean, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_boolean, common_var_map_inneraliasboundedwstringhelper_boolean_ec))};
            if (!common_var_map_inneraliasboundedwstringhelper_boolean_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedwstringhelper_boolean member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedwstringhelper_boolean = "var_map_inneraliasboundedwstringhelper_boolean";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedwstringhelper_boolean;
            ann_custom_MapInnerAliasBoundedWStringHelperBoolean.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedwstringhelper_boolean = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedwstringhelper_boolean, member_ann_builtin_var_map_inneraliasboundedwstringhelper_boolean, ann_custom_MapInnerAliasBoundedWStringHelperBoolean);
            CompleteStructMember member_var_map_inneraliasboundedwstringhelper_boolean = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedwstringhelper_boolean, detail_var_map_inneraliasboundedwstringhelper_boolean);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedWStringHelperBoolean, member_var_map_inneraliasboundedwstringhelper_boolean);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedWStringHelperBoolean = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedWStringHelperBoolean, header_MapInnerAliasBoundedWStringHelperBoolean, member_seq_MapInnerAliasBoundedWStringHelperBoolean);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedWStringHelperBoolean, type_name_MapInnerAliasBoundedWStringHelperBoolean.to_string(), type_ids_MapInnerAliasBoundedWStringHelperBoolean))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedWStringHelperBoolean already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedWStringHelperOctet_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedWStringHelperOctet)
{

    ReturnCode_t return_code_MapInnerAliasBoundedWStringHelperOctet {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedWStringHelperOctet =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedWStringHelperOctet", type_ids_MapInnerAliasBoundedWStringHelperOctet);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedWStringHelperOctet)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedWStringHelperOctet = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedWStringHelperOctet = "MapInnerAliasBoundedWStringHelperOctet";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedWStringHelperOctet;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedWStringHelperOctet;
        CompleteTypeDetail detail_MapInnerAliasBoundedWStringHelperOctet = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedWStringHelperOctet, ann_custom_MapInnerAliasBoundedWStringHelperOctet, type_name_MapInnerAliasBoundedWStringHelperOctet.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedWStringHelperOctet;
        header_MapInnerAliasBoundedWStringHelperOctet = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedWStringHelperOctet);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedWStringHelperOctet;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedwstringhelper_octet;
            ReturnCode_t return_code_var_map_inneraliasboundedwstringhelper_octet {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedwstringhelper_octet =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_10_byte_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_octet);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_octet)
            {
                return_code_var_map_inneraliasboundedwstringhelper_octet =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_byte", type_ids_var_map_inneraliasboundedwstringhelper_octet);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_octet)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_wstring_10_byte_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_10_byte_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_octet, element_identifier_anonymous_map_anonymous_wstring_10_byte_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_10_byte_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_byte_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedwstringhelper_octet =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_inneraliasboundedwstringhelper_octet);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_octet)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_octet);
                }
                bool key_identifier_anonymous_map_anonymous_wstring_10_byte_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_10_byte_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_octet, key_identifier_anonymous_map_anonymous_wstring_10_byte_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_10_byte_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_byte_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_10_byte_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_10_byte_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_byte_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_byte_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_byte_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_byte_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_byte_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_byte_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_byte_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_byte_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_byte_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_byte_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_byte_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_byte_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_10_byte_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_10_byte_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_10_byte_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_10_byte_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_10_byte_unbounded, element_flags_anonymous_map_anonymous_wstring_10_byte_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_10_byte_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_10_byte_unbounded), key_flags_anonymous_map_anonymous_wstring_10_byte_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_10_byte_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_10_byte_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_octet))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_10_byte_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedwstringhelper_octet = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedwstringhelper_octet = 0x00000000;
            bool common_var_map_inneraliasboundedwstringhelper_octet_ec {false};
            CommonStructMember common_var_map_inneraliasboundedwstringhelper_octet {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedwstringhelper_octet, member_flags_var_map_inneraliasboundedwstringhelper_octet, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_octet, common_var_map_inneraliasboundedwstringhelper_octet_ec))};
            if (!common_var_map_inneraliasboundedwstringhelper_octet_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedwstringhelper_octet member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedwstringhelper_octet = "var_map_inneraliasboundedwstringhelper_octet";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedwstringhelper_octet;
            ann_custom_MapInnerAliasBoundedWStringHelperOctet.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedwstringhelper_octet = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedwstringhelper_octet, member_ann_builtin_var_map_inneraliasboundedwstringhelper_octet, ann_custom_MapInnerAliasBoundedWStringHelperOctet);
            CompleteStructMember member_var_map_inneraliasboundedwstringhelper_octet = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedwstringhelper_octet, detail_var_map_inneraliasboundedwstringhelper_octet);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedWStringHelperOctet, member_var_map_inneraliasboundedwstringhelper_octet);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedWStringHelperOctet = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedWStringHelperOctet, header_MapInnerAliasBoundedWStringHelperOctet, member_seq_MapInnerAliasBoundedWStringHelperOctet);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedWStringHelperOctet, type_name_MapInnerAliasBoundedWStringHelperOctet.to_string(), type_ids_MapInnerAliasBoundedWStringHelperOctet))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedWStringHelperOctet already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedWStringHelperChar_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedWStringHelperChar)
{

    ReturnCode_t return_code_MapInnerAliasBoundedWStringHelperChar {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedWStringHelperChar =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedWStringHelperChar", type_ids_MapInnerAliasBoundedWStringHelperChar);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedWStringHelperChar)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedWStringHelperChar = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedWStringHelperChar = "MapInnerAliasBoundedWStringHelperChar";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedWStringHelperChar;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedWStringHelperChar;
        CompleteTypeDetail detail_MapInnerAliasBoundedWStringHelperChar = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedWStringHelperChar, ann_custom_MapInnerAliasBoundedWStringHelperChar, type_name_MapInnerAliasBoundedWStringHelperChar.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedWStringHelperChar;
        header_MapInnerAliasBoundedWStringHelperChar = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedWStringHelperChar);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedWStringHelperChar;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedwstringhelper_char;
            ReturnCode_t return_code_var_map_inneraliasboundedwstringhelper_char {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedwstringhelper_char =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_10_char_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_char);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_char)
            {
                return_code_var_map_inneraliasboundedwstringhelper_char =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_char", type_ids_var_map_inneraliasboundedwstringhelper_char);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_char)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_wstring_10_char_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_10_char_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_char, element_identifier_anonymous_map_anonymous_wstring_10_char_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_10_char_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_char_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedwstringhelper_char =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_inneraliasboundedwstringhelper_char);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_char)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_char);
                }
                bool key_identifier_anonymous_map_anonymous_wstring_10_char_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_10_char_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_char, key_identifier_anonymous_map_anonymous_wstring_10_char_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_10_char_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_char_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_10_char_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_10_char_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_char_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_char_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_char_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_char_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_char_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_char_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_char_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_char_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_char_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_char_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_char_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_char_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_10_char_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_10_char_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_10_char_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_10_char_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_10_char_unbounded, element_flags_anonymous_map_anonymous_wstring_10_char_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_10_char_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_10_char_unbounded), key_flags_anonymous_map_anonymous_wstring_10_char_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_10_char_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_10_char_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_char))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_10_char_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedwstringhelper_char = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedwstringhelper_char = 0x00000000;
            bool common_var_map_inneraliasboundedwstringhelper_char_ec {false};
            CommonStructMember common_var_map_inneraliasboundedwstringhelper_char {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedwstringhelper_char, member_flags_var_map_inneraliasboundedwstringhelper_char, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_char, common_var_map_inneraliasboundedwstringhelper_char_ec))};
            if (!common_var_map_inneraliasboundedwstringhelper_char_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedwstringhelper_char member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedwstringhelper_char = "var_map_inneraliasboundedwstringhelper_char";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedwstringhelper_char;
            ann_custom_MapInnerAliasBoundedWStringHelperChar.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedwstringhelper_char = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedwstringhelper_char, member_ann_builtin_var_map_inneraliasboundedwstringhelper_char, ann_custom_MapInnerAliasBoundedWStringHelperChar);
            CompleteStructMember member_var_map_inneraliasboundedwstringhelper_char = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedwstringhelper_char, detail_var_map_inneraliasboundedwstringhelper_char);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedWStringHelperChar, member_var_map_inneraliasboundedwstringhelper_char);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedWStringHelperChar = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedWStringHelperChar, header_MapInnerAliasBoundedWStringHelperChar, member_seq_MapInnerAliasBoundedWStringHelperChar);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedWStringHelperChar, type_name_MapInnerAliasBoundedWStringHelperChar.to_string(), type_ids_MapInnerAliasBoundedWStringHelperChar))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedWStringHelperChar already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedWStringHelperWChar_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedWStringHelperWChar)
{

    ReturnCode_t return_code_MapInnerAliasBoundedWStringHelperWChar {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedWStringHelperWChar =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedWStringHelperWChar", type_ids_MapInnerAliasBoundedWStringHelperWChar);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedWStringHelperWChar)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedWStringHelperWChar = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedWStringHelperWChar = "MapInnerAliasBoundedWStringHelperWChar";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedWStringHelperWChar;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedWStringHelperWChar;
        CompleteTypeDetail detail_MapInnerAliasBoundedWStringHelperWChar = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedWStringHelperWChar, ann_custom_MapInnerAliasBoundedWStringHelperWChar, type_name_MapInnerAliasBoundedWStringHelperWChar.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedWStringHelperWChar;
        header_MapInnerAliasBoundedWStringHelperWChar = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedWStringHelperWChar);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedWStringHelperWChar;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedwstringhelper_wchar;
            ReturnCode_t return_code_var_map_inneraliasboundedwstringhelper_wchar {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedwstringhelper_wchar =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_10_wchar_t_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_wchar);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_wchar)
            {
                return_code_var_map_inneraliasboundedwstringhelper_wchar =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_wchar_t", type_ids_var_map_inneraliasboundedwstringhelper_wchar);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_wchar)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_wstring_10_wchar_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_10_wchar_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_wchar, element_identifier_anonymous_map_anonymous_wstring_10_wchar_t_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_10_wchar_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_wchar_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedwstringhelper_wchar =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_inneraliasboundedwstringhelper_wchar);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_wchar)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_wchar);
                }
                bool key_identifier_anonymous_map_anonymous_wstring_10_wchar_t_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_10_wchar_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_wchar, key_identifier_anonymous_map_anonymous_wstring_10_wchar_t_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_10_wchar_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_wchar_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_10_wchar_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_10_wchar_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_wchar_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_wchar_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_wchar_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_wchar_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_wchar_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_wchar_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_wchar_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_wchar_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_wchar_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_wchar_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_wchar_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_wchar_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_10_wchar_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_10_wchar_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_10_wchar_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_10_wchar_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_10_wchar_t_unbounded, element_flags_anonymous_map_anonymous_wstring_10_wchar_t_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_10_wchar_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_10_wchar_t_unbounded), key_flags_anonymous_map_anonymous_wstring_10_wchar_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_10_wchar_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_10_wchar_t_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_wchar))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_10_wchar_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedwstringhelper_wchar = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedwstringhelper_wchar = 0x00000000;
            bool common_var_map_inneraliasboundedwstringhelper_wchar_ec {false};
            CommonStructMember common_var_map_inneraliasboundedwstringhelper_wchar {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedwstringhelper_wchar, member_flags_var_map_inneraliasboundedwstringhelper_wchar, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_wchar, common_var_map_inneraliasboundedwstringhelper_wchar_ec))};
            if (!common_var_map_inneraliasboundedwstringhelper_wchar_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedwstringhelper_wchar member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedwstringhelper_wchar = "var_map_inneraliasboundedwstringhelper_wchar";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedwstringhelper_wchar;
            ann_custom_MapInnerAliasBoundedWStringHelperWChar.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedwstringhelper_wchar = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedwstringhelper_wchar, member_ann_builtin_var_map_inneraliasboundedwstringhelper_wchar, ann_custom_MapInnerAliasBoundedWStringHelperWChar);
            CompleteStructMember member_var_map_inneraliasboundedwstringhelper_wchar = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedwstringhelper_wchar, detail_var_map_inneraliasboundedwstringhelper_wchar);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedWStringHelperWChar, member_var_map_inneraliasboundedwstringhelper_wchar);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedWStringHelperWChar = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedWStringHelperWChar, header_MapInnerAliasBoundedWStringHelperWChar, member_seq_MapInnerAliasBoundedWStringHelperWChar);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedWStringHelperWChar, type_name_MapInnerAliasBoundedWStringHelperWChar.to_string(), type_ids_MapInnerAliasBoundedWStringHelperWChar))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedWStringHelperWChar already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedWStringHelperString_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedWStringHelperString)
{

    ReturnCode_t return_code_MapInnerAliasBoundedWStringHelperString {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedWStringHelperString =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedWStringHelperString", type_ids_MapInnerAliasBoundedWStringHelperString);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedWStringHelperString)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedWStringHelperString = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedWStringHelperString = "MapInnerAliasBoundedWStringHelperString";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedWStringHelperString;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedWStringHelperString;
        CompleteTypeDetail detail_MapInnerAliasBoundedWStringHelperString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedWStringHelperString, ann_custom_MapInnerAliasBoundedWStringHelperString, type_name_MapInnerAliasBoundedWStringHelperString.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedWStringHelperString;
        header_MapInnerAliasBoundedWStringHelperString = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedWStringHelperString);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedWStringHelperString;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedwstringhelper_string;
            ReturnCode_t return_code_var_map_inneraliasboundedwstringhelper_string {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedwstringhelper_string =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_string);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_string)
            {
                return_code_var_map_inneraliasboundedwstringhelper_string =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_string);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_string)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_string))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_string, element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedwstringhelper_string =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_inneraliasboundedwstringhelper_string);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_string)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_string);
                }
                bool key_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_string, key_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded, element_flags_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded), key_flags_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_string))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_10_anonymous_string_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedwstringhelper_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedwstringhelper_string = 0x00000000;
            bool common_var_map_inneraliasboundedwstringhelper_string_ec {false};
            CommonStructMember common_var_map_inneraliasboundedwstringhelper_string {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedwstringhelper_string, member_flags_var_map_inneraliasboundedwstringhelper_string, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_string, common_var_map_inneraliasboundedwstringhelper_string_ec))};
            if (!common_var_map_inneraliasboundedwstringhelper_string_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedwstringhelper_string member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedwstringhelper_string = "var_map_inneraliasboundedwstringhelper_string";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedwstringhelper_string;
            ann_custom_MapInnerAliasBoundedWStringHelperString.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedwstringhelper_string = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedwstringhelper_string, member_ann_builtin_var_map_inneraliasboundedwstringhelper_string, ann_custom_MapInnerAliasBoundedWStringHelperString);
            CompleteStructMember member_var_map_inneraliasboundedwstringhelper_string = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedwstringhelper_string, detail_var_map_inneraliasboundedwstringhelper_string);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedWStringHelperString, member_var_map_inneraliasboundedwstringhelper_string);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedWStringHelperString = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedWStringHelperString, header_MapInnerAliasBoundedWStringHelperString, member_seq_MapInnerAliasBoundedWStringHelperString);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedWStringHelperString, type_name_MapInnerAliasBoundedWStringHelperString.to_string(), type_ids_MapInnerAliasBoundedWStringHelperString))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedWStringHelperString already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedWStringHelperWString_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedWStringHelperWString)
{

    ReturnCode_t return_code_MapInnerAliasBoundedWStringHelperWString {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedWStringHelperWString =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedWStringHelperWString", type_ids_MapInnerAliasBoundedWStringHelperWString);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedWStringHelperWString)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedWStringHelperWString = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedWStringHelperWString = "MapInnerAliasBoundedWStringHelperWString";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedWStringHelperWString;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedWStringHelperWString;
        CompleteTypeDetail detail_MapInnerAliasBoundedWStringHelperWString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedWStringHelperWString, ann_custom_MapInnerAliasBoundedWStringHelperWString, type_name_MapInnerAliasBoundedWStringHelperWString.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedWStringHelperWString;
        header_MapInnerAliasBoundedWStringHelperWString = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedWStringHelperWString);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedWStringHelperWString;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedwstringhelper_wstring;
            ReturnCode_t return_code_var_map_inneraliasboundedwstringhelper_wstring {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedwstringhelper_wstring =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_wstring);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_wstring)
            {
                return_code_var_map_inneraliasboundedwstringhelper_wstring =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_wstring);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_wstring)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_wstring, true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_wstring, element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedwstringhelper_wstring =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_inneraliasboundedwstringhelper_wstring);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_wstring)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_wstring);
                }
                bool key_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_wstring, key_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded, element_flags_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded), key_flags_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_wstring))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_10_anonymous_wstring_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedwstringhelper_wstring = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedwstringhelper_wstring = 0x00000000;
            bool common_var_map_inneraliasboundedwstringhelper_wstring_ec {false};
            CommonStructMember common_var_map_inneraliasboundedwstringhelper_wstring {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedwstringhelper_wstring, member_flags_var_map_inneraliasboundedwstringhelper_wstring, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_wstring, common_var_map_inneraliasboundedwstringhelper_wstring_ec))};
            if (!common_var_map_inneraliasboundedwstringhelper_wstring_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedwstringhelper_wstring member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedwstringhelper_wstring = "var_map_inneraliasboundedwstringhelper_wstring";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedwstringhelper_wstring;
            ann_custom_MapInnerAliasBoundedWStringHelperWString.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedwstringhelper_wstring = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedwstringhelper_wstring, member_ann_builtin_var_map_inneraliasboundedwstringhelper_wstring, ann_custom_MapInnerAliasBoundedWStringHelperWString);
            CompleteStructMember member_var_map_inneraliasboundedwstringhelper_wstring = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedwstringhelper_wstring, detail_var_map_inneraliasboundedwstringhelper_wstring);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedWStringHelperWString, member_var_map_inneraliasboundedwstringhelper_wstring);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedWStringHelperWString = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedWStringHelperWString, header_MapInnerAliasBoundedWStringHelperWString, member_seq_MapInnerAliasBoundedWStringHelperWString);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedWStringHelperWString, type_name_MapInnerAliasBoundedWStringHelperWString.to_string(), type_ids_MapInnerAliasBoundedWStringHelperWString))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedWStringHelperWString already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper)
{

    ReturnCode_t return_code_MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper", type_ids_MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper = "MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper;
        CompleteTypeDetail detail_MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper, ann_custom_MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper, type_name_MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper;
        header_MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper;
            ReturnCode_t return_code_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper)
            {
                return_code_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper)
                {
                ::register_Inner_alias_bounded_string_helper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper);
                }
                bool element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper, element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper);
                }
                bool key_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper, key_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded, element_flags_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded), key_flags_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_10_anonymous_string_10_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper = 0x00000000;
            bool common_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper_ec {false};
            CommonStructMember common_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper, member_flags_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper, common_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper_ec))};
            if (!common_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper = "var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper;
            ann_custom_MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper, member_ann_builtin_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper, ann_custom_MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper);
            CompleteStructMember member_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper, detail_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper, member_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper, header_MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper, member_seq_MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper, type_name_MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper.to_string(), type_ids_MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper)
{

    ReturnCode_t return_code_MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper", type_ids_MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper = "MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper;
        CompleteTypeDetail detail_MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper, ann_custom_MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper, type_name_MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper;
        header_MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper;
            ReturnCode_t return_code_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper)
            {
                return_code_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper);
                }
                bool element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper, element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper);
                }
                bool key_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper, key_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded, element_flags_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded), key_flags_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_10_anonymous_wstring_10_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper = 0x00000000;
            bool common_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper_ec {false};
            CommonStructMember common_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper, member_flags_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper, common_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper_ec))};
            if (!common_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper = "var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper;
            ann_custom_MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper, member_ann_builtin_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper, ann_custom_MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper);
            CompleteStructMember member_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper, detail_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper, member_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper, header_MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper, member_seq_MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper, type_name_MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper.to_string(), type_ids_MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedWStringHelperInnerEnumHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedWStringHelperInnerEnumHelper)
{

    ReturnCode_t return_code_MapInnerAliasBoundedWStringHelperInnerEnumHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedWStringHelperInnerEnumHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedWStringHelperInnerEnumHelper", type_ids_MapInnerAliasBoundedWStringHelperInnerEnumHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedWStringHelperInnerEnumHelper)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedWStringHelperInnerEnumHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedWStringHelperInnerEnumHelper = "MapInnerAliasBoundedWStringHelperInnerEnumHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedWStringHelperInnerEnumHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedWStringHelperInnerEnumHelper;
        CompleteTypeDetail detail_MapInnerAliasBoundedWStringHelperInnerEnumHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedWStringHelperInnerEnumHelper, ann_custom_MapInnerAliasBoundedWStringHelperInnerEnumHelper, type_name_MapInnerAliasBoundedWStringHelperInnerEnumHelper.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedWStringHelperInnerEnumHelper;
        header_MapInnerAliasBoundedWStringHelperInnerEnumHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedWStringHelperInnerEnumHelper);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedWStringHelperInnerEnumHelper;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedwstringhelper_innerenumhelper;
            ReturnCode_t return_code_var_map_inneraliasboundedwstringhelper_innerenumhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedwstringhelper_innerenumhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_innerenumhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_innerenumhelper)
            {
                return_code_var_map_inneraliasboundedwstringhelper_innerenumhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerEnumHelper", type_ids_var_map_inneraliasboundedwstringhelper_innerenumhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_innerenumhelper)
                {
                ::register_InnerEnumHelper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_innerenumhelper);
                }
                bool element_identifier_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_innerenumhelper, element_identifier_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedwstringhelper_innerenumhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_inneraliasboundedwstringhelper_innerenumhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_innerenumhelper)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_innerenumhelper);
                }
                bool key_identifier_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_innerenumhelper, key_identifier_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded, element_flags_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded), key_flags_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_innerenumhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_10_InnerEnumHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedwstringhelper_innerenumhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedwstringhelper_innerenumhelper = 0x00000000;
            bool common_var_map_inneraliasboundedwstringhelper_innerenumhelper_ec {false};
            CommonStructMember common_var_map_inneraliasboundedwstringhelper_innerenumhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedwstringhelper_innerenumhelper, member_flags_var_map_inneraliasboundedwstringhelper_innerenumhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_innerenumhelper, common_var_map_inneraliasboundedwstringhelper_innerenumhelper_ec))};
            if (!common_var_map_inneraliasboundedwstringhelper_innerenumhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedwstringhelper_innerenumhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedwstringhelper_innerenumhelper = "var_map_inneraliasboundedwstringhelper_innerenumhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedwstringhelper_innerenumhelper;
            ann_custom_MapInnerAliasBoundedWStringHelperInnerEnumHelper.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedwstringhelper_innerenumhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedwstringhelper_innerenumhelper, member_ann_builtin_var_map_inneraliasboundedwstringhelper_innerenumhelper, ann_custom_MapInnerAliasBoundedWStringHelperInnerEnumHelper);
            CompleteStructMember member_var_map_inneraliasboundedwstringhelper_innerenumhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedwstringhelper_innerenumhelper, detail_var_map_inneraliasboundedwstringhelper_innerenumhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedWStringHelperInnerEnumHelper, member_var_map_inneraliasboundedwstringhelper_innerenumhelper);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedWStringHelperInnerEnumHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedWStringHelperInnerEnumHelper, header_MapInnerAliasBoundedWStringHelperInnerEnumHelper, member_seq_MapInnerAliasBoundedWStringHelperInnerEnumHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedWStringHelperInnerEnumHelper, type_name_MapInnerAliasBoundedWStringHelperInnerEnumHelper.to_string(), type_ids_MapInnerAliasBoundedWStringHelperInnerEnumHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedWStringHelperInnerEnumHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedWStringHelperInnerBitMaskHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedWStringHelperInnerBitMaskHelper)
{

    ReturnCode_t return_code_MapInnerAliasBoundedWStringHelperInnerBitMaskHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedWStringHelperInnerBitMaskHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedWStringHelperInnerBitMaskHelper", type_ids_MapInnerAliasBoundedWStringHelperInnerBitMaskHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedWStringHelperInnerBitMaskHelper)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedWStringHelperInnerBitMaskHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedWStringHelperInnerBitMaskHelper = "MapInnerAliasBoundedWStringHelperInnerBitMaskHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedWStringHelperInnerBitMaskHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedWStringHelperInnerBitMaskHelper;
        CompleteTypeDetail detail_MapInnerAliasBoundedWStringHelperInnerBitMaskHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedWStringHelperInnerBitMaskHelper, ann_custom_MapInnerAliasBoundedWStringHelperInnerBitMaskHelper, type_name_MapInnerAliasBoundedWStringHelperInnerBitMaskHelper.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedWStringHelperInnerBitMaskHelper;
        header_MapInnerAliasBoundedWStringHelperInnerBitMaskHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedWStringHelperInnerBitMaskHelper);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedWStringHelperInnerBitMaskHelper;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper;
            ReturnCode_t return_code_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper)
            {
                return_code_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerBitMaskHelper", type_ids_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper)
                {
                ::register_InnerBitMaskHelper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper);
                }
                bool element_identifier_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper, element_identifier_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper);
                }
                bool key_identifier_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper, key_identifier_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded, element_flags_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded), key_flags_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_10_InnerBitMaskHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper = 0x00000000;
            bool common_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper_ec {false};
            CommonStructMember common_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper, member_flags_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper, common_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper_ec))};
            if (!common_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedwstringhelper_innerbitmaskhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper = "var_map_inneraliasboundedwstringhelper_innerbitmaskhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper;
            ann_custom_MapInnerAliasBoundedWStringHelperInnerBitMaskHelper.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper, member_ann_builtin_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper, ann_custom_MapInnerAliasBoundedWStringHelperInnerBitMaskHelper);
            CompleteStructMember member_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper, detail_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedWStringHelperInnerBitMaskHelper, member_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedWStringHelperInnerBitMaskHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedWStringHelperInnerBitMaskHelper, header_MapInnerAliasBoundedWStringHelperInnerBitMaskHelper, member_seq_MapInnerAliasBoundedWStringHelperInnerBitMaskHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedWStringHelperInnerBitMaskHelper, type_name_MapInnerAliasBoundedWStringHelperInnerBitMaskHelper.to_string(), type_ids_MapInnerAliasBoundedWStringHelperInnerBitMaskHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedWStringHelperInnerBitMaskHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedWStringHelperInnerAliasHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedWStringHelperInnerAliasHelper)
{

    ReturnCode_t return_code_MapInnerAliasBoundedWStringHelperInnerAliasHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedWStringHelperInnerAliasHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedWStringHelperInnerAliasHelper", type_ids_MapInnerAliasBoundedWStringHelperInnerAliasHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedWStringHelperInnerAliasHelper)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedWStringHelperInnerAliasHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedWStringHelperInnerAliasHelper = "MapInnerAliasBoundedWStringHelperInnerAliasHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedWStringHelperInnerAliasHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedWStringHelperInnerAliasHelper;
        CompleteTypeDetail detail_MapInnerAliasBoundedWStringHelperInnerAliasHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedWStringHelperInnerAliasHelper, ann_custom_MapInnerAliasBoundedWStringHelperInnerAliasHelper, type_name_MapInnerAliasBoundedWStringHelperInnerAliasHelper.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedWStringHelperInnerAliasHelper;
        header_MapInnerAliasBoundedWStringHelperInnerAliasHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedWStringHelperInnerAliasHelper);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedWStringHelperInnerAliasHelper;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedwstringhelper_inneraliashelper;
            ReturnCode_t return_code_var_map_inneraliasboundedwstringhelper_inneraliashelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedwstringhelper_inneraliashelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_inneraliashelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_inneraliashelper)
            {
                return_code_var_map_inneraliasboundedwstringhelper_inneraliashelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerAliasHelper", type_ids_var_map_inneraliasboundedwstringhelper_inneraliashelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_inneraliashelper)
                {
                ::register_InnerAliasHelper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_inneraliashelper);
                }
                bool element_identifier_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_inneraliashelper, element_identifier_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedwstringhelper_inneraliashelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_inneraliasboundedwstringhelper_inneraliashelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_inneraliashelper)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_inneraliashelper);
                }
                bool key_identifier_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_inneraliashelper, key_identifier_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded, element_flags_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded), key_flags_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_inneraliashelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_10_InnerAliasHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedwstringhelper_inneraliashelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedwstringhelper_inneraliashelper = 0x00000000;
            bool common_var_map_inneraliasboundedwstringhelper_inneraliashelper_ec {false};
            CommonStructMember common_var_map_inneraliasboundedwstringhelper_inneraliashelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedwstringhelper_inneraliashelper, member_flags_var_map_inneraliasboundedwstringhelper_inneraliashelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_inneraliashelper, common_var_map_inneraliasboundedwstringhelper_inneraliashelper_ec))};
            if (!common_var_map_inneraliasboundedwstringhelper_inneraliashelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedwstringhelper_inneraliashelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedwstringhelper_inneraliashelper = "var_map_inneraliasboundedwstringhelper_inneraliashelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedwstringhelper_inneraliashelper;
            ann_custom_MapInnerAliasBoundedWStringHelperInnerAliasHelper.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedwstringhelper_inneraliashelper = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedwstringhelper_inneraliashelper, member_ann_builtin_var_map_inneraliasboundedwstringhelper_inneraliashelper, ann_custom_MapInnerAliasBoundedWStringHelperInnerAliasHelper);
            CompleteStructMember member_var_map_inneraliasboundedwstringhelper_inneraliashelper = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedwstringhelper_inneraliashelper, detail_var_map_inneraliasboundedwstringhelper_inneraliashelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedWStringHelperInnerAliasHelper, member_var_map_inneraliasboundedwstringhelper_inneraliashelper);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedWStringHelperInnerAliasHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedWStringHelperInnerAliasHelper, header_MapInnerAliasBoundedWStringHelperInnerAliasHelper, member_seq_MapInnerAliasBoundedWStringHelperInnerAliasHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedWStringHelperInnerAliasHelper, type_name_MapInnerAliasBoundedWStringHelperInnerAliasHelper.to_string(), type_ids_MapInnerAliasBoundedWStringHelperInnerAliasHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedWStringHelperInnerAliasHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper)
{

    ReturnCode_t return_code_MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper", type_ids_MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper = "MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper;
        CompleteTypeDetail detail_MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper, ann_custom_MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper, type_name_MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper;
        header_MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper;
            ReturnCode_t return_code_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper)
            {
                return_code_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_array_helper", type_ids_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper)
                {
                ::register_Inner_alias_array_helper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper);
                }
                bool element_identifier_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper, element_identifier_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper);
                }
                bool key_identifier_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper, key_identifier_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded, element_flags_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded), key_flags_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_10_anonymous_array_int16_t_2_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper = 0x00000000;
            bool common_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper_ec {false};
            CommonStructMember common_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper, member_flags_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper, common_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper_ec))};
            if (!common_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper = "var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper;
            ann_custom_MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper, member_ann_builtin_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper, ann_custom_MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper);
            CompleteStructMember member_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper, detail_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper, member_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper, header_MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper, member_seq_MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper, type_name_MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper.to_string(), type_ids_MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper)
{

    ReturnCode_t return_code_MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper", type_ids_MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper = "MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper;
        CompleteTypeDetail detail_MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper, ann_custom_MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper, type_name_MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper;
        header_MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper;
            ReturnCode_t return_code_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper)
            {
                return_code_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_sequence_helper", type_ids_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper)
                {
                ::register_Inner_alias_sequence_helper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper);
                }
                bool element_identifier_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper, element_identifier_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper);
                }
                bool key_identifier_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper, key_identifier_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded, element_flags_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded), key_flags_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_10_anonymous_sequence_int16_t_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper = 0x00000000;
            bool common_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper_ec {false};
            CommonStructMember common_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper, member_flags_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper, common_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper_ec))};
            if (!common_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedwstringhelper_inneraliassequencehelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper = "var_map_inneraliasboundedwstringhelper_inneraliassequencehelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper;
            ann_custom_MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper, member_ann_builtin_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper, ann_custom_MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper);
            CompleteStructMember member_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper, detail_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper, member_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper, header_MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper, member_seq_MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper, type_name_MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper.to_string(), type_ids_MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedWStringHelperInnerAliasMapHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedWStringHelperInnerAliasMapHelper)
{

    ReturnCode_t return_code_MapInnerAliasBoundedWStringHelperInnerAliasMapHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedWStringHelperInnerAliasMapHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedWStringHelperInnerAliasMapHelper", type_ids_MapInnerAliasBoundedWStringHelperInnerAliasMapHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedWStringHelperInnerAliasMapHelper)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedWStringHelperInnerAliasMapHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedWStringHelperInnerAliasMapHelper = "MapInnerAliasBoundedWStringHelperInnerAliasMapHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedWStringHelperInnerAliasMapHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedWStringHelperInnerAliasMapHelper;
        CompleteTypeDetail detail_MapInnerAliasBoundedWStringHelperInnerAliasMapHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedWStringHelperInnerAliasMapHelper, ann_custom_MapInnerAliasBoundedWStringHelperInnerAliasMapHelper, type_name_MapInnerAliasBoundedWStringHelperInnerAliasMapHelper.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedWStringHelperInnerAliasMapHelper;
        header_MapInnerAliasBoundedWStringHelperInnerAliasMapHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedWStringHelperInnerAliasMapHelper);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedWStringHelperInnerAliasMapHelper;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper;
            ReturnCode_t return_code_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper)
            {
                return_code_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_map_helper", type_ids_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper)
                {
                ::register_Inner_alias_map_helper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper);
                }
                bool element_identifier_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper, element_identifier_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper);
                }
                bool key_identifier_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper, key_identifier_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded, element_flags_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded), key_flags_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_10_anonymous_map_int32_t_int32_t_0_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper = 0x00000000;
            bool common_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper_ec {false};
            CommonStructMember common_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper, member_flags_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper, common_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper_ec))};
            if (!common_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedwstringhelper_inneraliasmaphelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper = "var_map_inneraliasboundedwstringhelper_inneraliasmaphelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper;
            ann_custom_MapInnerAliasBoundedWStringHelperInnerAliasMapHelper.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper, member_ann_builtin_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper, ann_custom_MapInnerAliasBoundedWStringHelperInnerAliasMapHelper);
            CompleteStructMember member_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper, detail_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedWStringHelperInnerAliasMapHelper, member_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedWStringHelperInnerAliasMapHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedWStringHelperInnerAliasMapHelper, header_MapInnerAliasBoundedWStringHelperInnerAliasMapHelper, member_seq_MapInnerAliasBoundedWStringHelperInnerAliasMapHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedWStringHelperInnerAliasMapHelper, type_name_MapInnerAliasBoundedWStringHelperInnerAliasMapHelper.to_string(), type_ids_MapInnerAliasBoundedWStringHelperInnerAliasMapHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedWStringHelperInnerAliasMapHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedWStringHelperInnerUnionHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedWStringHelperInnerUnionHelper)
{

    ReturnCode_t return_code_MapInnerAliasBoundedWStringHelperInnerUnionHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedWStringHelperInnerUnionHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedWStringHelperInnerUnionHelper", type_ids_MapInnerAliasBoundedWStringHelperInnerUnionHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedWStringHelperInnerUnionHelper)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedWStringHelperInnerUnionHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedWStringHelperInnerUnionHelper = "MapInnerAliasBoundedWStringHelperInnerUnionHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedWStringHelperInnerUnionHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedWStringHelperInnerUnionHelper;
        CompleteTypeDetail detail_MapInnerAliasBoundedWStringHelperInnerUnionHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedWStringHelperInnerUnionHelper, ann_custom_MapInnerAliasBoundedWStringHelperInnerUnionHelper, type_name_MapInnerAliasBoundedWStringHelperInnerUnionHelper.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedWStringHelperInnerUnionHelper;
        header_MapInnerAliasBoundedWStringHelperInnerUnionHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedWStringHelperInnerUnionHelper);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedWStringHelperInnerUnionHelper;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedwstringhelper_innerunionhelper;
            ReturnCode_t return_code_var_map_inneraliasboundedwstringhelper_innerunionhelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedwstringhelper_innerunionhelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_innerunionhelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_innerunionhelper)
            {
                return_code_var_map_inneraliasboundedwstringhelper_innerunionhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerUnionHelper", type_ids_var_map_inneraliasboundedwstringhelper_innerunionhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_innerunionhelper)
                {
                ::register_InnerUnionHelper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_innerunionhelper);
                }
                bool element_identifier_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_innerunionhelper, element_identifier_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedwstringhelper_innerunionhelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_inneraliasboundedwstringhelper_innerunionhelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_innerunionhelper)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_innerunionhelper);
                }
                bool key_identifier_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_innerunionhelper, key_identifier_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded, element_flags_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded), key_flags_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_innerunionhelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_10_InnerUnionHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedwstringhelper_innerunionhelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedwstringhelper_innerunionhelper = 0x00000000;
            bool common_var_map_inneraliasboundedwstringhelper_innerunionhelper_ec {false};
            CommonStructMember common_var_map_inneraliasboundedwstringhelper_innerunionhelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedwstringhelper_innerunionhelper, member_flags_var_map_inneraliasboundedwstringhelper_innerunionhelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_innerunionhelper, common_var_map_inneraliasboundedwstringhelper_innerunionhelper_ec))};
            if (!common_var_map_inneraliasboundedwstringhelper_innerunionhelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedwstringhelper_innerunionhelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedwstringhelper_innerunionhelper = "var_map_inneraliasboundedwstringhelper_innerunionhelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedwstringhelper_innerunionhelper;
            ann_custom_MapInnerAliasBoundedWStringHelperInnerUnionHelper.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedwstringhelper_innerunionhelper = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedwstringhelper_innerunionhelper, member_ann_builtin_var_map_inneraliasboundedwstringhelper_innerunionhelper, ann_custom_MapInnerAliasBoundedWStringHelperInnerUnionHelper);
            CompleteStructMember member_var_map_inneraliasboundedwstringhelper_innerunionhelper = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedwstringhelper_innerunionhelper, detail_var_map_inneraliasboundedwstringhelper_innerunionhelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedWStringHelperInnerUnionHelper, member_var_map_inneraliasboundedwstringhelper_innerunionhelper);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedWStringHelperInnerUnionHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedWStringHelperInnerUnionHelper, header_MapInnerAliasBoundedWStringHelperInnerUnionHelper, member_seq_MapInnerAliasBoundedWStringHelperInnerUnionHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedWStringHelperInnerUnionHelper, type_name_MapInnerAliasBoundedWStringHelperInnerUnionHelper.to_string(), type_ids_MapInnerAliasBoundedWStringHelperInnerUnionHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedWStringHelperInnerUnionHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedWStringHelperInnerStructureHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedWStringHelperInnerStructureHelper)
{

    ReturnCode_t return_code_MapInnerAliasBoundedWStringHelperInnerStructureHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedWStringHelperInnerStructureHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedWStringHelperInnerStructureHelper", type_ids_MapInnerAliasBoundedWStringHelperInnerStructureHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedWStringHelperInnerStructureHelper)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedWStringHelperInnerStructureHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedWStringHelperInnerStructureHelper = "MapInnerAliasBoundedWStringHelperInnerStructureHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedWStringHelperInnerStructureHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedWStringHelperInnerStructureHelper;
        CompleteTypeDetail detail_MapInnerAliasBoundedWStringHelperInnerStructureHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedWStringHelperInnerStructureHelper, ann_custom_MapInnerAliasBoundedWStringHelperInnerStructureHelper, type_name_MapInnerAliasBoundedWStringHelperInnerStructureHelper.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedWStringHelperInnerStructureHelper;
        header_MapInnerAliasBoundedWStringHelperInnerStructureHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedWStringHelperInnerStructureHelper);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedWStringHelperInnerStructureHelper;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedwstringhelper_innerstructurehelper;
            ReturnCode_t return_code_var_map_inneraliasboundedwstringhelper_innerstructurehelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedwstringhelper_innerstructurehelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_innerstructurehelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_innerstructurehelper)
            {
                return_code_var_map_inneraliasboundedwstringhelper_innerstructurehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerStructureHelper", type_ids_var_map_inneraliasboundedwstringhelper_innerstructurehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_innerstructurehelper)
                {
                ::register_InnerStructureHelper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_innerstructurehelper);
                }
                bool element_identifier_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_innerstructurehelper, element_identifier_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedwstringhelper_innerstructurehelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_inneraliasboundedwstringhelper_innerstructurehelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_innerstructurehelper)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_innerstructurehelper);
                }
                bool key_identifier_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_innerstructurehelper, key_identifier_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded, element_flags_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded), key_flags_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_innerstructurehelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_10_InnerStructureHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedwstringhelper_innerstructurehelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedwstringhelper_innerstructurehelper = 0x00000000;
            bool common_var_map_inneraliasboundedwstringhelper_innerstructurehelper_ec {false};
            CommonStructMember common_var_map_inneraliasboundedwstringhelper_innerstructurehelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedwstringhelper_innerstructurehelper, member_flags_var_map_inneraliasboundedwstringhelper_innerstructurehelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_innerstructurehelper, common_var_map_inneraliasboundedwstringhelper_innerstructurehelper_ec))};
            if (!common_var_map_inneraliasboundedwstringhelper_innerstructurehelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedwstringhelper_innerstructurehelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedwstringhelper_innerstructurehelper = "var_map_inneraliasboundedwstringhelper_innerstructurehelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedwstringhelper_innerstructurehelper;
            ann_custom_MapInnerAliasBoundedWStringHelperInnerStructureHelper.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedwstringhelper_innerstructurehelper = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedwstringhelper_innerstructurehelper, member_ann_builtin_var_map_inneraliasboundedwstringhelper_innerstructurehelper, ann_custom_MapInnerAliasBoundedWStringHelperInnerStructureHelper);
            CompleteStructMember member_var_map_inneraliasboundedwstringhelper_innerstructurehelper = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedwstringhelper_innerstructurehelper, detail_var_map_inneraliasboundedwstringhelper_innerstructurehelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedWStringHelperInnerStructureHelper, member_var_map_inneraliasboundedwstringhelper_innerstructurehelper);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedWStringHelperInnerStructureHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedWStringHelperInnerStructureHelper, header_MapInnerAliasBoundedWStringHelperInnerStructureHelper, member_seq_MapInnerAliasBoundedWStringHelperInnerStructureHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedWStringHelperInnerStructureHelper, type_name_MapInnerAliasBoundedWStringHelperInnerStructureHelper.to_string(), type_ids_MapInnerAliasBoundedWStringHelperInnerStructureHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedWStringHelperInnerStructureHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MapInnerAliasBoundedWStringHelperInnerBitsetHelper_type_identifier(
        TypeIdentifierPair& type_ids_MapInnerAliasBoundedWStringHelperInnerBitsetHelper)
{

    ReturnCode_t return_code_MapInnerAliasBoundedWStringHelperInnerBitsetHelper {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MapInnerAliasBoundedWStringHelperInnerBitsetHelper =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MapInnerAliasBoundedWStringHelperInnerBitsetHelper", type_ids_MapInnerAliasBoundedWStringHelperInnerBitsetHelper);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MapInnerAliasBoundedWStringHelperInnerBitsetHelper)
    {
        StructTypeFlag struct_flags_MapInnerAliasBoundedWStringHelperInnerBitsetHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MapInnerAliasBoundedWStringHelperInnerBitsetHelper = "MapInnerAliasBoundedWStringHelperInnerBitsetHelper";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapInnerAliasBoundedWStringHelperInnerBitsetHelper;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapInnerAliasBoundedWStringHelperInnerBitsetHelper;
        CompleteTypeDetail detail_MapInnerAliasBoundedWStringHelperInnerBitsetHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapInnerAliasBoundedWStringHelperInnerBitsetHelper, ann_custom_MapInnerAliasBoundedWStringHelperInnerBitsetHelper, type_name_MapInnerAliasBoundedWStringHelperInnerBitsetHelper.to_string());
        CompleteStructHeader header_MapInnerAliasBoundedWStringHelperInnerBitsetHelper;
        header_MapInnerAliasBoundedWStringHelperInnerBitsetHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapInnerAliasBoundedWStringHelperInnerBitsetHelper);
        CompleteStructMemberSeq member_seq_MapInnerAliasBoundedWStringHelperInnerBitsetHelper;
        {
            TypeIdentifierPair type_ids_var_map_inneraliasboundedwstringhelper_innerbitsethelper;
            ReturnCode_t return_code_var_map_inneraliasboundedwstringhelper_innerbitsethelper {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_map_inneraliasboundedwstringhelper_innerbitsethelper =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_innerbitsethelper);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_innerbitsethelper)
            {
                return_code_var_map_inneraliasboundedwstringhelper_innerbitsethelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerBitsetHelper", type_ids_var_map_inneraliasboundedwstringhelper_innerbitsethelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_innerbitsethelper)
                {
                ::register_InnerBitsetHelper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_innerbitsethelper);
                }
                bool element_identifier_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_innerbitsethelper, element_identifier_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded_ec))};
                if (!element_identifier_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_map_inneraliasboundedwstringhelper_innerbitsethelper =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_var_map_inneraliasboundedwstringhelper_innerbitsethelper);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_map_inneraliasboundedwstringhelper_innerbitsethelper)
                {
                ::register_Inner_alias_bounded_wstring_helper_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_innerbitsethelper);
                }
                bool key_identifier_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_innerbitsethelper, key_identifier_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded_ec))};
                if (!key_identifier_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded, element_flags_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded);
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded), key_flags_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded", type_ids_var_map_inneraliasboundedwstringhelper_innerbitsethelper))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_wstring_10_InnerBitsetHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_map_inneraliasboundedwstringhelper_innerbitsethelper = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_map_inneraliasboundedwstringhelper_innerbitsethelper = 0x00000000;
            bool common_var_map_inneraliasboundedwstringhelper_innerbitsethelper_ec {false};
            CommonStructMember common_var_map_inneraliasboundedwstringhelper_innerbitsethelper {TypeObjectUtils::build_common_struct_member(member_id_var_map_inneraliasboundedwstringhelper_innerbitsethelper, member_flags_var_map_inneraliasboundedwstringhelper_innerbitsethelper, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_map_inneraliasboundedwstringhelper_innerbitsethelper, common_var_map_inneraliasboundedwstringhelper_innerbitsethelper_ec))};
            if (!common_var_map_inneraliasboundedwstringhelper_innerbitsethelper_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_map_inneraliasboundedwstringhelper_innerbitsethelper member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map_inneraliasboundedwstringhelper_innerbitsethelper = "var_map_inneraliasboundedwstringhelper_innerbitsethelper";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map_inneraliasboundedwstringhelper_innerbitsethelper;
            ann_custom_MapInnerAliasBoundedWStringHelperInnerBitsetHelper.reset();
            CompleteMemberDetail detail_var_map_inneraliasboundedwstringhelper_innerbitsethelper = TypeObjectUtils::build_complete_member_detail(name_var_map_inneraliasboundedwstringhelper_innerbitsethelper, member_ann_builtin_var_map_inneraliasboundedwstringhelper_innerbitsethelper, ann_custom_MapInnerAliasBoundedWStringHelperInnerBitsetHelper);
            CompleteStructMember member_var_map_inneraliasboundedwstringhelper_innerbitsethelper = TypeObjectUtils::build_complete_struct_member(common_var_map_inneraliasboundedwstringhelper_innerbitsethelper, detail_var_map_inneraliasboundedwstringhelper_innerbitsethelper);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapInnerAliasBoundedWStringHelperInnerBitsetHelper, member_var_map_inneraliasboundedwstringhelper_innerbitsethelper);
        }
        CompleteStructType struct_type_MapInnerAliasBoundedWStringHelperInnerBitsetHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_MapInnerAliasBoundedWStringHelperInnerBitsetHelper, header_MapInnerAliasBoundedWStringHelperInnerBitsetHelper, member_seq_MapInnerAliasBoundedWStringHelperInnerBitsetHelper);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapInnerAliasBoundedWStringHelperInnerBitsetHelper, type_name_MapInnerAliasBoundedWStringHelperInnerBitsetHelper.to_string(), type_ids_MapInnerAliasBoundedWStringHelperInnerBitsetHelper))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapInnerAliasBoundedWStringHelperInnerBitsetHelper already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_BoundedSmallMap_type_identifier(
        TypeIdentifierPair& type_ids_BoundedSmallMap)
{

    ReturnCode_t return_code_BoundedSmallMap {eprosima::fastdds::dds::RETCODE_OK};
    return_code_BoundedSmallMap =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "BoundedSmallMap", type_ids_BoundedSmallMap);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_BoundedSmallMap)
    {
        StructTypeFlag struct_flags_BoundedSmallMap = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_BoundedSmallMap = "BoundedSmallMap";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_BoundedSmallMap;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_BoundedSmallMap;
        CompleteTypeDetail detail_BoundedSmallMap = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_BoundedSmallMap, ann_custom_BoundedSmallMap, type_name_BoundedSmallMap.to_string());
        CompleteStructHeader header_BoundedSmallMap;
        header_BoundedSmallMap = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_BoundedSmallMap);
        CompleteStructMemberSeq member_seq_BoundedSmallMap;
        {
            TypeIdentifierPair type_ids_var_small_map;
            ReturnCode_t return_code_var_small_map {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_small_map =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_int32_t_1", type_ids_var_small_map);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_small_map)
            {
                return_code_var_small_map =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_small_map);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_small_map)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int32_t_int32_t_1_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int32_t_int32_t_1 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_small_map, element_identifier_anonymous_map_int32_t_int32_t_1_ec))};
                if (!element_identifier_anonymous_map_int32_t_int32_t_1_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_int32_t_1 inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_small_map =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_small_map);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_small_map)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int32_t_int32_t_1_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int32_t_int32_t_1 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_small_map, key_identifier_anonymous_map_int32_t_int32_t_1_ec))};
                if (!key_identifier_anonymous_map_int32_t_int32_t_1_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_int32_t_1 inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_int32_t_1 = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_int32_t_1->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_1->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_int32_t_1->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_1->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_int32_t_1->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_1->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_int32_t_1->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_1->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_int32_t_1->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_1->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_int32_t_1->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_1->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_1->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_int32_t_1->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_1->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_1->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int32_t_int32_t_1 = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_int32_t_1 = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_int32_t_1 = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_int32_t_1 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_int32_t_1, element_flags_anonymous_map_int32_t_int32_t_1);
                {
                    SBound bound = static_cast<SBound>(1);
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_int32_t_1, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_int32_t_1), key_flags_anonymous_map_int32_t_int32_t_1,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_int32_t_1));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_int32_t_1", type_ids_var_small_map))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_int32_t_1 already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_small_map = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_small_map = 0x00000000;
            bool common_var_small_map_ec {false};
            CommonStructMember common_var_small_map {TypeObjectUtils::build_common_struct_member(member_id_var_small_map, member_flags_var_small_map, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_small_map, common_var_small_map_ec))};
            if (!common_var_small_map_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_small_map member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_small_map = "var_small_map";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_small_map;
            ann_custom_BoundedSmallMap.reset();
            CompleteMemberDetail detail_var_small_map = TypeObjectUtils::build_complete_member_detail(name_var_small_map, member_ann_builtin_var_small_map, ann_custom_BoundedSmallMap);
            CompleteStructMember member_var_small_map = TypeObjectUtils::build_complete_struct_member(common_var_small_map, detail_var_small_map);
            TypeObjectUtils::add_complete_struct_member(member_seq_BoundedSmallMap, member_var_small_map);
        }
        {
            TypeIdentifierPair type_ids_var_unbounded_string_long_bounded_small_map;
            ReturnCode_t return_code_var_unbounded_string_long_bounded_small_map {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_unbounded_string_long_bounded_small_map =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_unbounded_int32_t_5", type_ids_var_unbounded_string_long_bounded_small_map);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_unbounded_string_long_bounded_small_map)
            {
                return_code_var_unbounded_string_long_bounded_small_map =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_unbounded_string_long_bounded_small_map);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_unbounded_string_long_bounded_small_map)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_5_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_5 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_unbounded_string_long_bounded_small_map, element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_5_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_5_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_int32_t_5 inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_unbounded_string_long_bounded_small_map =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_unbounded_string_long_bounded_small_map);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_unbounded_string_long_bounded_small_map)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_unbounded_string_long_bounded_small_map))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_string_unbounded_int32_t_5_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_int32_t_5 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_unbounded_string_long_bounded_small_map, key_identifier_anonymous_map_anonymous_string_unbounded_int32_t_5_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_unbounded_int32_t_5_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_int32_t_5 inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_int32_t_5 = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_int32_t_5->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_5->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_5->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_5->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_5->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_5->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_5->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_5->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_5->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_5->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_5->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_5->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_5->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_5->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_5->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_5->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_unbounded_int32_t_5 = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_int32_t_5 = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_int32_t_5 = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_int32_t_5 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_int32_t_5, element_flags_anonymous_map_anonymous_string_unbounded_int32_t_5);
                {
                    SBound bound = static_cast<SBound>(5);
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_int32_t_5, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_5), key_flags_anonymous_map_anonymous_string_unbounded_int32_t_5,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_int32_t_5));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_int32_t_5", type_ids_var_unbounded_string_long_bounded_small_map))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_unbounded_int32_t_5 already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_unbounded_string_long_bounded_small_map = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_unbounded_string_long_bounded_small_map = 0x00000001;
            bool common_var_unbounded_string_long_bounded_small_map_ec {false};
            CommonStructMember common_var_unbounded_string_long_bounded_small_map {TypeObjectUtils::build_common_struct_member(member_id_var_unbounded_string_long_bounded_small_map, member_flags_var_unbounded_string_long_bounded_small_map, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_unbounded_string_long_bounded_small_map, common_var_unbounded_string_long_bounded_small_map_ec))};
            if (!common_var_unbounded_string_long_bounded_small_map_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_unbounded_string_long_bounded_small_map member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_unbounded_string_long_bounded_small_map = "var_unbounded_string_long_bounded_small_map";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_unbounded_string_long_bounded_small_map;
            ann_custom_BoundedSmallMap.reset();
            CompleteMemberDetail detail_var_unbounded_string_long_bounded_small_map = TypeObjectUtils::build_complete_member_detail(name_var_unbounded_string_long_bounded_small_map, member_ann_builtin_var_unbounded_string_long_bounded_small_map, ann_custom_BoundedSmallMap);
            CompleteStructMember member_var_unbounded_string_long_bounded_small_map = TypeObjectUtils::build_complete_struct_member(common_var_unbounded_string_long_bounded_small_map, detail_var_unbounded_string_long_bounded_small_map);
            TypeObjectUtils::add_complete_struct_member(member_seq_BoundedSmallMap, member_var_unbounded_string_long_bounded_small_map);
        }
        {
            TypeIdentifierPair type_ids_var_long_unbounded_string_bounded_small_map;
            ReturnCode_t return_code_var_long_unbounded_string_bounded_small_map {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_long_unbounded_string_bounded_small_map =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_anonymous_string_unbounded_5", type_ids_var_long_unbounded_string_bounded_small_map);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_long_unbounded_string_bounded_small_map)
            {
                return_code_var_long_unbounded_string_bounded_small_map =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_long_unbounded_string_bounded_small_map);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_long_unbounded_string_bounded_small_map)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_long_unbounded_string_bounded_small_map))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_5_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_5 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_long_unbounded_string_bounded_small_map, element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_5_ec))};
                if (!element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_5_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_anonymous_string_unbounded_5 inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_long_unbounded_string_bounded_small_map =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_long_unbounded_string_bounded_small_map);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_long_unbounded_string_bounded_small_map)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int32_t_anonymous_string_unbounded_5_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int32_t_anonymous_string_unbounded_5 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_long_unbounded_string_bounded_small_map, key_identifier_anonymous_map_int32_t_anonymous_string_unbounded_5_ec))};
                if (!key_identifier_anonymous_map_int32_t_anonymous_string_unbounded_5_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_anonymous_string_unbounded_5 inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_anonymous_string_unbounded_5 = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_anonymous_string_unbounded_5->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_5->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_5->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_5->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_5->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_5->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_5->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_5->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_5->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_5->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_5->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_5->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_5->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_5->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_5->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_5->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int32_t_anonymous_string_unbounded_5 = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_anonymous_string_unbounded_5 = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_anonymous_string_unbounded_5 = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_anonymous_string_unbounded_5 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_anonymous_string_unbounded_5, element_flags_anonymous_map_int32_t_anonymous_string_unbounded_5);
                {
                    SBound bound = static_cast<SBound>(5);
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_anonymous_string_unbounded_5, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_5), key_flags_anonymous_map_int32_t_anonymous_string_unbounded_5,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_anonymous_string_unbounded_5));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_anonymous_string_unbounded_5", type_ids_var_long_unbounded_string_bounded_small_map))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_anonymous_string_unbounded_5 already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_long_unbounded_string_bounded_small_map = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_long_unbounded_string_bounded_small_map = 0x00000002;
            bool common_var_long_unbounded_string_bounded_small_map_ec {false};
            CommonStructMember common_var_long_unbounded_string_bounded_small_map {TypeObjectUtils::build_common_struct_member(member_id_var_long_unbounded_string_bounded_small_map, member_flags_var_long_unbounded_string_bounded_small_map, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_long_unbounded_string_bounded_small_map, common_var_long_unbounded_string_bounded_small_map_ec))};
            if (!common_var_long_unbounded_string_bounded_small_map_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_long_unbounded_string_bounded_small_map member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_long_unbounded_string_bounded_small_map = "var_long_unbounded_string_bounded_small_map";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_long_unbounded_string_bounded_small_map;
            ann_custom_BoundedSmallMap.reset();
            CompleteMemberDetail detail_var_long_unbounded_string_bounded_small_map = TypeObjectUtils::build_complete_member_detail(name_var_long_unbounded_string_bounded_small_map, member_ann_builtin_var_long_unbounded_string_bounded_small_map, ann_custom_BoundedSmallMap);
            CompleteStructMember member_var_long_unbounded_string_bounded_small_map = TypeObjectUtils::build_complete_struct_member(common_var_long_unbounded_string_bounded_small_map, detail_var_long_unbounded_string_bounded_small_map);
            TypeObjectUtils::add_complete_struct_member(member_seq_BoundedSmallMap, member_var_long_unbounded_string_bounded_small_map);
        }
        CompleteStructType struct_type_BoundedSmallMap = TypeObjectUtils::build_complete_struct_type(struct_flags_BoundedSmallMap, header_BoundedSmallMap, member_seq_BoundedSmallMap);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_BoundedSmallMap, type_name_BoundedSmallMap.to_string(), type_ids_BoundedSmallMap))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "BoundedSmallMap already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_BoundedLargeMap_type_identifier(
        TypeIdentifierPair& type_ids_BoundedLargeMap)
{

    ReturnCode_t return_code_BoundedLargeMap {eprosima::fastdds::dds::RETCODE_OK};
    return_code_BoundedLargeMap =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "BoundedLargeMap", type_ids_BoundedLargeMap);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_BoundedLargeMap)
    {
        StructTypeFlag struct_flags_BoundedLargeMap = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_BoundedLargeMap = "BoundedLargeMap";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_BoundedLargeMap;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_BoundedLargeMap;
        CompleteTypeDetail detail_BoundedLargeMap = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_BoundedLargeMap, ann_custom_BoundedLargeMap, type_name_BoundedLargeMap.to_string());
        CompleteStructHeader header_BoundedLargeMap;
        header_BoundedLargeMap = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_BoundedLargeMap);
        CompleteStructMemberSeq member_seq_BoundedLargeMap;
        {
            TypeIdentifierPair type_ids_var_large_map;
            ReturnCode_t return_code_var_large_map {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_large_map =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_int32_t_41925", type_ids_var_large_map);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_large_map)
            {
                return_code_var_large_map =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_large_map);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_large_map)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_int32_t_int32_t_41925_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int32_t_int32_t_41925 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_large_map, element_identifier_anonymous_map_int32_t_int32_t_41925_ec))};
                if (!element_identifier_anonymous_map_int32_t_int32_t_41925_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_int32_t_41925 inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_large_map =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_large_map);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_large_map)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int32_t_int32_t_41925_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int32_t_int32_t_41925 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_large_map, key_identifier_anonymous_map_int32_t_int32_t_41925_ec))};
                if (!key_identifier_anonymous_map_int32_t_int32_t_41925_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_int32_t_41925 inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_int32_t_41925 = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_int32_t_41925->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_41925->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_int32_t_41925->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_41925->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_int32_t_41925->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_41925->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_int32_t_41925->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_41925->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_int32_t_41925->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_41925->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_int32_t_41925->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_41925->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_41925->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_int32_t_41925->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_41925->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_41925->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int32_t_int32_t_41925 = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_int32_t_41925 = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_int32_t_41925 = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_int32_t_41925 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_int32_t_41925, element_flags_anonymous_map_int32_t_int32_t_41925);
                {
                    LBound bound = 41925;
                    PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header_anonymous_map_int32_t_int32_t_41925, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_int32_t_41925), key_flags_anonymous_map_int32_t_int32_t_41925,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_int32_t_41925));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_int32_t_int32_t_41925", type_ids_var_large_map))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_int32_t_41925 already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_large_map = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_large_map = 0x00000000;
            bool common_var_large_map_ec {false};
            CommonStructMember common_var_large_map {TypeObjectUtils::build_common_struct_member(member_id_var_large_map, member_flags_var_large_map, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_large_map, common_var_large_map_ec))};
            if (!common_var_large_map_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_large_map member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_large_map = "var_large_map";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_large_map;
            ann_custom_BoundedLargeMap.reset();
            CompleteMemberDetail detail_var_large_map = TypeObjectUtils::build_complete_member_detail(name_var_large_map, member_ann_builtin_var_large_map, ann_custom_BoundedLargeMap);
            CompleteStructMember member_var_large_map = TypeObjectUtils::build_complete_struct_member(common_var_large_map, detail_var_large_map);
            TypeObjectUtils::add_complete_struct_member(member_seq_BoundedLargeMap, member_var_large_map);
        }
        {
            TypeIdentifierPair type_ids_var_unbounded_string_long_bounded_large_map;
            ReturnCode_t return_code_var_unbounded_string_long_bounded_large_map {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_unbounded_string_long_bounded_large_map =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_unbounded_int32_t_255", type_ids_var_unbounded_string_long_bounded_large_map);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_unbounded_string_long_bounded_large_map)
            {
                return_code_var_unbounded_string_long_bounded_large_map =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_unbounded_string_long_bounded_large_map);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_unbounded_string_long_bounded_large_map)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_255_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_255 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_unbounded_string_long_bounded_large_map, element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_255_ec))};
                if (!element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_255_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_int32_t_255 inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_unbounded_string_long_bounded_large_map =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_unbounded_string_long_bounded_large_map);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_unbounded_string_long_bounded_large_map)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_unbounded_string_long_bounded_large_map))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool key_identifier_anonymous_map_anonymous_string_unbounded_int32_t_255_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_int32_t_255 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_unbounded_string_long_bounded_large_map, key_identifier_anonymous_map_anonymous_string_unbounded_int32_t_255_ec))};
                if (!key_identifier_anonymous_map_anonymous_string_unbounded_int32_t_255_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_int32_t_255 inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_int32_t_255 = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_int32_t_255->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_255->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_255->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_255->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_255->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_255->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_255->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_255->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_255->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_255->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_255->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_255->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_255->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_255->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_255->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_255->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_unbounded_int32_t_255 = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_int32_t_255 = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_int32_t_255 = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_int32_t_255 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_int32_t_255, element_flags_anonymous_map_anonymous_string_unbounded_int32_t_255);
                {
                    SBound bound = static_cast<SBound>(255);
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_int32_t_255, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_int32_t_255), key_flags_anonymous_map_anonymous_string_unbounded_int32_t_255,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_int32_t_255));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_int32_t_255", type_ids_var_unbounded_string_long_bounded_large_map))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_unbounded_int32_t_255 already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_unbounded_string_long_bounded_large_map = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_unbounded_string_long_bounded_large_map = 0x00000001;
            bool common_var_unbounded_string_long_bounded_large_map_ec {false};
            CommonStructMember common_var_unbounded_string_long_bounded_large_map {TypeObjectUtils::build_common_struct_member(member_id_var_unbounded_string_long_bounded_large_map, member_flags_var_unbounded_string_long_bounded_large_map, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_unbounded_string_long_bounded_large_map, common_var_unbounded_string_long_bounded_large_map_ec))};
            if (!common_var_unbounded_string_long_bounded_large_map_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_unbounded_string_long_bounded_large_map member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_unbounded_string_long_bounded_large_map = "var_unbounded_string_long_bounded_large_map";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_unbounded_string_long_bounded_large_map;
            ann_custom_BoundedLargeMap.reset();
            CompleteMemberDetail detail_var_unbounded_string_long_bounded_large_map = TypeObjectUtils::build_complete_member_detail(name_var_unbounded_string_long_bounded_large_map, member_ann_builtin_var_unbounded_string_long_bounded_large_map, ann_custom_BoundedLargeMap);
            CompleteStructMember member_var_unbounded_string_long_bounded_large_map = TypeObjectUtils::build_complete_struct_member(common_var_unbounded_string_long_bounded_large_map, detail_var_unbounded_string_long_bounded_large_map);
            TypeObjectUtils::add_complete_struct_member(member_seq_BoundedLargeMap, member_var_unbounded_string_long_bounded_large_map);
        }
        {
            TypeIdentifierPair type_ids_var_long_unbounded_string_bounded_large_map;
            ReturnCode_t return_code_var_long_unbounded_string_bounded_large_map {eprosima::fastdds::dds::RETCODE_OK};
            return_code_var_long_unbounded_string_bounded_large_map =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_anonymous_string_unbounded_255", type_ids_var_long_unbounded_string_bounded_large_map);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_long_unbounded_string_bounded_large_map)
            {
                return_code_var_long_unbounded_string_bounded_large_map =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_var_long_unbounded_string_bounded_large_map);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_long_unbounded_string_bounded_large_map)
                {
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded", type_ids_var_long_unbounded_string_bounded_large_map))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                }
                bool element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_255_ec {false};
                TypeIdentifier* element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_255 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_long_unbounded_string_bounded_large_map, element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_255_ec))};
                if (!element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_255_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_anonymous_string_unbounded_255 inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_var_long_unbounded_string_bounded_large_map =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_var_long_unbounded_string_bounded_large_map);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_var_long_unbounded_string_bounded_large_map)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool key_identifier_anonymous_map_int32_t_anonymous_string_unbounded_255_ec {false};
                TypeIdentifier* key_identifier_anonymous_map_int32_t_anonymous_string_unbounded_255 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_long_unbounded_string_bounded_large_map, key_identifier_anonymous_map_int32_t_anonymous_string_unbounded_255_ec))};
                if (!key_identifier_anonymous_map_int32_t_anonymous_string_unbounded_255_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_anonymous_string_unbounded_255 inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_anonymous_string_unbounded_255 = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_anonymous_string_unbounded_255->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_255->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_255->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_255->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_255->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_255->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_255->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_255->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_255->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_255->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_255->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_255->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_255->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_255->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_255->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_255->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int32_t_anonymous_string_unbounded_255 = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_anonymous_string_unbounded_255 = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_anonymous_string_unbounded_255 = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_anonymous_string_unbounded_255 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_anonymous_string_unbounded_255, element_flags_anonymous_map_int32_t_anonymous_string_unbounded_255);
                {
                    SBound bound = static_cast<SBound>(255);
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_anonymous_string_unbounded_255, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_anonymous_string_unbounded_255), key_flags_anonymous_map_int32_t_anonymous_string_unbounded_255,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_anonymous_string_unbounded_255));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_anonymous_string_unbounded_255", type_ids_var_long_unbounded_string_bounded_large_map))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_anonymous_string_unbounded_255 already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_var_long_unbounded_string_bounded_large_map = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_var_long_unbounded_string_bounded_large_map = 0x00000002;
            bool common_var_long_unbounded_string_bounded_large_map_ec {false};
            CommonStructMember common_var_long_unbounded_string_bounded_large_map {TypeObjectUtils::build_common_struct_member(member_id_var_long_unbounded_string_bounded_large_map, member_flags_var_long_unbounded_string_bounded_large_map, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_var_long_unbounded_string_bounded_large_map, common_var_long_unbounded_string_bounded_large_map_ec))};
            if (!common_var_long_unbounded_string_bounded_large_map_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure var_long_unbounded_string_bounded_large_map member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_long_unbounded_string_bounded_large_map = "var_long_unbounded_string_bounded_large_map";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_long_unbounded_string_bounded_large_map;
            ann_custom_BoundedLargeMap.reset();
            CompleteMemberDetail detail_var_long_unbounded_string_bounded_large_map = TypeObjectUtils::build_complete_member_detail(name_var_long_unbounded_string_bounded_large_map, member_ann_builtin_var_long_unbounded_string_bounded_large_map, ann_custom_BoundedLargeMap);
            CompleteStructMember member_var_long_unbounded_string_bounded_large_map = TypeObjectUtils::build_complete_struct_member(common_var_long_unbounded_string_bounded_large_map, detail_var_long_unbounded_string_bounded_large_map);
            TypeObjectUtils::add_complete_struct_member(member_seq_BoundedLargeMap, member_var_long_unbounded_string_bounded_large_map);
        }
        CompleteStructType struct_type_BoundedLargeMap = TypeObjectUtils::build_complete_struct_type(struct_flags_BoundedLargeMap, header_BoundedLargeMap, member_seq_BoundedLargeMap);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_BoundedLargeMap, type_name_BoundedLargeMap.to_string(), type_ids_BoundedLargeMap))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "BoundedLargeMap already registered in TypeObjectRegistry for a different type.");
        }
    }
}

