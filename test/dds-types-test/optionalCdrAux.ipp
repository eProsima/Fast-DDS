// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file optionalCdrAux.ipp
 * This source file contains some declarations of CDR related functions.
 *
 * This file was generated by the tool fastddsgen (version: 4.1.0).
 */

#ifndef FAST_DDS_GENERATED__OPTIONALCDRAUX_IPP
#define FAST_DDS_GENERATED__OPTIONALCDRAUX_IPP

#include "optionalCdrAux.hpp"

#include <fastcdr/Cdr.h>
#include <fastcdr/CdrSizeCalculator.hpp>

#include <fastdds/dds/core/policy/QosPolicies.hpp>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

namespace eprosima {
namespace fastcdr {


eProsima_user_DllExport bool is_short_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const short_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const short_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const short_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_short_optional_cdr_plain(data_representation) &&
                sizeof(short_optional) == short_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(short_optional));

            scdr.jump((array_size -1) * sizeof(short_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        short_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        short_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_short_optional_cdr_plain(data_representation) &&
            sizeof(short_optional) == short_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(short_optional));

            scdr.jump((array_size - 1) * sizeof(short_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const short_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_ushort_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const ushort_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const ushort_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const ushort_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_ushort_optional_cdr_plain(data_representation) &&
                sizeof(ushort_optional) == ushort_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(ushort_optional));

            scdr.jump((array_size -1) * sizeof(ushort_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        ushort_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        ushort_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_ushort_optional_cdr_plain(data_representation) &&
            sizeof(ushort_optional) == ushort_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(ushort_optional));

            scdr.jump((array_size - 1) * sizeof(ushort_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const ushort_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_long_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const long_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const long_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const long_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_long_optional_cdr_plain(data_representation) &&
                sizeof(long_optional) == long_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(long_optional));

            scdr.jump((array_size -1) * sizeof(long_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        long_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        long_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_long_optional_cdr_plain(data_representation) &&
            sizeof(long_optional) == long_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(long_optional));

            scdr.jump((array_size - 1) * sizeof(long_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const long_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_ulong_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const ulong_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const ulong_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const ulong_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_ulong_optional_cdr_plain(data_representation) &&
                sizeof(ulong_optional) == ulong_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(ulong_optional));

            scdr.jump((array_size -1) * sizeof(ulong_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        ulong_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        ulong_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_ulong_optional_cdr_plain(data_representation) &&
            sizeof(ulong_optional) == ulong_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(ulong_optional));

            scdr.jump((array_size - 1) * sizeof(ulong_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const ulong_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_longlong_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const longlong_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const longlong_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const longlong_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_longlong_optional_cdr_plain(data_representation) &&
                sizeof(longlong_optional) == longlong_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(longlong_optional));

            scdr.jump((array_size -1) * sizeof(longlong_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        longlong_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        longlong_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_longlong_optional_cdr_plain(data_representation) &&
            sizeof(longlong_optional) == longlong_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(longlong_optional));

            scdr.jump((array_size - 1) * sizeof(longlong_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const longlong_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_ulonglong_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const ulonglong_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const ulonglong_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const ulonglong_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_ulonglong_optional_cdr_plain(data_representation) &&
                sizeof(ulonglong_optional) == ulonglong_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(ulonglong_optional));

            scdr.jump((array_size -1) * sizeof(ulonglong_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        ulonglong_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        ulonglong_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_ulonglong_optional_cdr_plain(data_representation) &&
            sizeof(ulonglong_optional) == ulonglong_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(ulonglong_optional));

            scdr.jump((array_size - 1) * sizeof(ulonglong_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const ulonglong_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_float_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const float_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const float_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const float_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_float_optional_cdr_plain(data_representation) &&
                sizeof(float_optional) == float_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(float_optional));

            scdr.jump((array_size -1) * sizeof(float_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        float_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        float_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_float_optional_cdr_plain(data_representation) &&
            sizeof(float_optional) == float_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(float_optional));

            scdr.jump((array_size - 1) * sizeof(float_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const float_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_double_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const double_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const double_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const double_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_double_optional_cdr_plain(data_representation) &&
                sizeof(double_optional) == double_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(double_optional));

            scdr.jump((array_size -1) * sizeof(double_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        double_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        double_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_double_optional_cdr_plain(data_representation) &&
            sizeof(double_optional) == double_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(double_optional));

            scdr.jump((array_size - 1) * sizeof(double_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const double_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_longdouble_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const longdouble_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const longdouble_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const longdouble_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_longdouble_optional_cdr_plain(data_representation) &&
                sizeof(longdouble_optional) == longdouble_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(longdouble_optional));

            scdr.jump((array_size -1) * sizeof(longdouble_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        longdouble_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        longdouble_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_longdouble_optional_cdr_plain(data_representation) &&
            sizeof(longdouble_optional) == longdouble_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(longdouble_optional));

            scdr.jump((array_size - 1) * sizeof(longdouble_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const longdouble_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_boolean_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const boolean_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const boolean_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const boolean_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_boolean_optional_cdr_plain(data_representation) &&
                sizeof(boolean_optional) == boolean_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(boolean_optional));

            scdr.jump((array_size -1) * sizeof(boolean_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        boolean_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        boolean_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_boolean_optional_cdr_plain(data_representation) &&
            sizeof(boolean_optional) == boolean_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(boolean_optional));

            scdr.jump((array_size - 1) * sizeof(boolean_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const boolean_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_octet_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const octet_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const octet_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const octet_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_octet_optional_cdr_plain(data_representation) &&
                sizeof(octet_optional) == octet_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(octet_optional));

            scdr.jump((array_size -1) * sizeof(octet_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        octet_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        octet_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_octet_optional_cdr_plain(data_representation) &&
            sizeof(octet_optional) == octet_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(octet_optional));

            scdr.jump((array_size - 1) * sizeof(octet_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const octet_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_char_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const char_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const char_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const char_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_char_optional_cdr_plain(data_representation) &&
                sizeof(char_optional) == char_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(char_optional));

            scdr.jump((array_size -1) * sizeof(char_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        char_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        char_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_char_optional_cdr_plain(data_representation) &&
            sizeof(char_optional) == char_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(char_optional));

            scdr.jump((array_size - 1) * sizeof(char_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const char_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_wchar_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const wchar_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const wchar_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const wchar_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_wchar_optional_cdr_plain(data_representation) &&
                sizeof(wchar_optional) == wchar_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(wchar_optional));

            scdr.jump((array_size -1) * sizeof(wchar_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        wchar_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        wchar_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_wchar_optional_cdr_plain(data_representation) &&
            sizeof(wchar_optional) == wchar_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(wchar_optional));

            scdr.jump((array_size - 1) * sizeof(wchar_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const wchar_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_short_align_1_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const short_align_1_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const short_align_1_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const short_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_short_align_1_optional_cdr_plain(data_representation) &&
                sizeof(short_align_1_optional) == short_align_1_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(short_align_1_optional));

            scdr.jump((array_size -1) * sizeof(short_align_1_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        short_align_1_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        short_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_short_align_1_optional_cdr_plain(data_representation) &&
            sizeof(short_align_1_optional) == short_align_1_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(short_align_1_optional));

            scdr.jump((array_size - 1) * sizeof(short_align_1_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const short_align_1_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_short_align_2_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const short_align_2_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const short_align_2_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const short_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_short_align_2_optional_cdr_plain(data_representation) &&
                sizeof(short_align_2_optional) == short_align_2_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(short_align_2_optional));

            scdr.jump((array_size -1) * sizeof(short_align_2_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        short_align_2_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        short_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_short_align_2_optional_cdr_plain(data_representation) &&
            sizeof(short_align_2_optional) == short_align_2_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(short_align_2_optional));

            scdr.jump((array_size - 1) * sizeof(short_align_2_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const short_align_2_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_short_align_4_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const short_align_4_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const short_align_4_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const short_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_short_align_4_optional_cdr_plain(data_representation) &&
                sizeof(short_align_4_optional) == short_align_4_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(short_align_4_optional));

            scdr.jump((array_size -1) * sizeof(short_align_4_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        short_align_4_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        short_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_short_align_4_optional_cdr_plain(data_representation) &&
            sizeof(short_align_4_optional) == short_align_4_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(short_align_4_optional));

            scdr.jump((array_size - 1) * sizeof(short_align_4_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const short_align_4_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_ushort_align_1_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const ushort_align_1_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const ushort_align_1_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const ushort_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_ushort_align_1_optional_cdr_plain(data_representation) &&
                sizeof(ushort_align_1_optional) == ushort_align_1_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(ushort_align_1_optional));

            scdr.jump((array_size -1) * sizeof(ushort_align_1_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        ushort_align_1_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        ushort_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_ushort_align_1_optional_cdr_plain(data_representation) &&
            sizeof(ushort_align_1_optional) == ushort_align_1_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(ushort_align_1_optional));

            scdr.jump((array_size - 1) * sizeof(ushort_align_1_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const ushort_align_1_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_ushort_align_2_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const ushort_align_2_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const ushort_align_2_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const ushort_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_ushort_align_2_optional_cdr_plain(data_representation) &&
                sizeof(ushort_align_2_optional) == ushort_align_2_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(ushort_align_2_optional));

            scdr.jump((array_size -1) * sizeof(ushort_align_2_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        ushort_align_2_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        ushort_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_ushort_align_2_optional_cdr_plain(data_representation) &&
            sizeof(ushort_align_2_optional) == ushort_align_2_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(ushort_align_2_optional));

            scdr.jump((array_size - 1) * sizeof(ushort_align_2_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const ushort_align_2_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_ushort_align_4_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const ushort_align_4_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const ushort_align_4_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const ushort_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_ushort_align_4_optional_cdr_plain(data_representation) &&
                sizeof(ushort_align_4_optional) == ushort_align_4_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(ushort_align_4_optional));

            scdr.jump((array_size -1) * sizeof(ushort_align_4_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        ushort_align_4_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        ushort_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_ushort_align_4_optional_cdr_plain(data_representation) &&
            sizeof(ushort_align_4_optional) == ushort_align_4_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(ushort_align_4_optional));

            scdr.jump((array_size - 1) * sizeof(ushort_align_4_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const ushort_align_4_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_long_align_1_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const long_align_1_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const long_align_1_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const long_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_long_align_1_optional_cdr_plain(data_representation) &&
                sizeof(long_align_1_optional) == long_align_1_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(long_align_1_optional));

            scdr.jump((array_size -1) * sizeof(long_align_1_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        long_align_1_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        long_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_long_align_1_optional_cdr_plain(data_representation) &&
            sizeof(long_align_1_optional) == long_align_1_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(long_align_1_optional));

            scdr.jump((array_size - 1) * sizeof(long_align_1_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const long_align_1_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_long_align_2_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const long_align_2_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const long_align_2_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const long_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_long_align_2_optional_cdr_plain(data_representation) &&
                sizeof(long_align_2_optional) == long_align_2_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(long_align_2_optional));

            scdr.jump((array_size -1) * sizeof(long_align_2_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        long_align_2_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        long_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_long_align_2_optional_cdr_plain(data_representation) &&
            sizeof(long_align_2_optional) == long_align_2_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(long_align_2_optional));

            scdr.jump((array_size - 1) * sizeof(long_align_2_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const long_align_2_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_long_align_4_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const long_align_4_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const long_align_4_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const long_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_long_align_4_optional_cdr_plain(data_representation) &&
                sizeof(long_align_4_optional) == long_align_4_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(long_align_4_optional));

            scdr.jump((array_size -1) * sizeof(long_align_4_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        long_align_4_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        long_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_long_align_4_optional_cdr_plain(data_representation) &&
            sizeof(long_align_4_optional) == long_align_4_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(long_align_4_optional));

            scdr.jump((array_size - 1) * sizeof(long_align_4_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const long_align_4_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_ulong_align_1_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const ulong_align_1_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const ulong_align_1_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const ulong_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_ulong_align_1_optional_cdr_plain(data_representation) &&
                sizeof(ulong_align_1_optional) == ulong_align_1_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(ulong_align_1_optional));

            scdr.jump((array_size -1) * sizeof(ulong_align_1_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        ulong_align_1_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        ulong_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_ulong_align_1_optional_cdr_plain(data_representation) &&
            sizeof(ulong_align_1_optional) == ulong_align_1_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(ulong_align_1_optional));

            scdr.jump((array_size - 1) * sizeof(ulong_align_1_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const ulong_align_1_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_ulong_align_2_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const ulong_align_2_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const ulong_align_2_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const ulong_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_ulong_align_2_optional_cdr_plain(data_representation) &&
                sizeof(ulong_align_2_optional) == ulong_align_2_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(ulong_align_2_optional));

            scdr.jump((array_size -1) * sizeof(ulong_align_2_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        ulong_align_2_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        ulong_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_ulong_align_2_optional_cdr_plain(data_representation) &&
            sizeof(ulong_align_2_optional) == ulong_align_2_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(ulong_align_2_optional));

            scdr.jump((array_size - 1) * sizeof(ulong_align_2_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const ulong_align_2_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_ulong_align_4_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const ulong_align_4_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const ulong_align_4_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const ulong_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_ulong_align_4_optional_cdr_plain(data_representation) &&
                sizeof(ulong_align_4_optional) == ulong_align_4_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(ulong_align_4_optional));

            scdr.jump((array_size -1) * sizeof(ulong_align_4_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        ulong_align_4_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        ulong_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_ulong_align_4_optional_cdr_plain(data_representation) &&
            sizeof(ulong_align_4_optional) == ulong_align_4_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(ulong_align_4_optional));

            scdr.jump((array_size - 1) * sizeof(ulong_align_4_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const ulong_align_4_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_longlong_align_1_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const longlong_align_1_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const longlong_align_1_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const longlong_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_longlong_align_1_optional_cdr_plain(data_representation) &&
                sizeof(longlong_align_1_optional) == longlong_align_1_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(longlong_align_1_optional));

            scdr.jump((array_size -1) * sizeof(longlong_align_1_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        longlong_align_1_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        longlong_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_longlong_align_1_optional_cdr_plain(data_representation) &&
            sizeof(longlong_align_1_optional) == longlong_align_1_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(longlong_align_1_optional));

            scdr.jump((array_size - 1) * sizeof(longlong_align_1_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const longlong_align_1_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_longlong_align_2_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const longlong_align_2_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const longlong_align_2_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const longlong_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_longlong_align_2_optional_cdr_plain(data_representation) &&
                sizeof(longlong_align_2_optional) == longlong_align_2_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(longlong_align_2_optional));

            scdr.jump((array_size -1) * sizeof(longlong_align_2_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        longlong_align_2_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        longlong_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_longlong_align_2_optional_cdr_plain(data_representation) &&
            sizeof(longlong_align_2_optional) == longlong_align_2_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(longlong_align_2_optional));

            scdr.jump((array_size - 1) * sizeof(longlong_align_2_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const longlong_align_2_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_longlong_align_4_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const longlong_align_4_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const longlong_align_4_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const longlong_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_longlong_align_4_optional_cdr_plain(data_representation) &&
                sizeof(longlong_align_4_optional) == longlong_align_4_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(longlong_align_4_optional));

            scdr.jump((array_size -1) * sizeof(longlong_align_4_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        longlong_align_4_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        longlong_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_longlong_align_4_optional_cdr_plain(data_representation) &&
            sizeof(longlong_align_4_optional) == longlong_align_4_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(longlong_align_4_optional));

            scdr.jump((array_size - 1) * sizeof(longlong_align_4_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const longlong_align_4_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_ulonglong_align_1_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const ulonglong_align_1_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const ulonglong_align_1_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const ulonglong_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_ulonglong_align_1_optional_cdr_plain(data_representation) &&
                sizeof(ulonglong_align_1_optional) == ulonglong_align_1_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(ulonglong_align_1_optional));

            scdr.jump((array_size -1) * sizeof(ulonglong_align_1_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        ulonglong_align_1_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        ulonglong_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_ulonglong_align_1_optional_cdr_plain(data_representation) &&
            sizeof(ulonglong_align_1_optional) == ulonglong_align_1_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(ulonglong_align_1_optional));

            scdr.jump((array_size - 1) * sizeof(ulonglong_align_1_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const ulonglong_align_1_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_ulonglong_align_2_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const ulonglong_align_2_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const ulonglong_align_2_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const ulonglong_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_ulonglong_align_2_optional_cdr_plain(data_representation) &&
                sizeof(ulonglong_align_2_optional) == ulonglong_align_2_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(ulonglong_align_2_optional));

            scdr.jump((array_size -1) * sizeof(ulonglong_align_2_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        ulonglong_align_2_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        ulonglong_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_ulonglong_align_2_optional_cdr_plain(data_representation) &&
            sizeof(ulonglong_align_2_optional) == ulonglong_align_2_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(ulonglong_align_2_optional));

            scdr.jump((array_size - 1) * sizeof(ulonglong_align_2_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const ulonglong_align_2_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_ulonglong_align_4_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const ulonglong_align_4_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const ulonglong_align_4_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const ulonglong_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_ulonglong_align_4_optional_cdr_plain(data_representation) &&
                sizeof(ulonglong_align_4_optional) == ulonglong_align_4_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(ulonglong_align_4_optional));

            scdr.jump((array_size -1) * sizeof(ulonglong_align_4_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        ulonglong_align_4_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        ulonglong_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_ulonglong_align_4_optional_cdr_plain(data_representation) &&
            sizeof(ulonglong_align_4_optional) == ulonglong_align_4_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(ulonglong_align_4_optional));

            scdr.jump((array_size - 1) * sizeof(ulonglong_align_4_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const ulonglong_align_4_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_float_align_1_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const float_align_1_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const float_align_1_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const float_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_float_align_1_optional_cdr_plain(data_representation) &&
                sizeof(float_align_1_optional) == float_align_1_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(float_align_1_optional));

            scdr.jump((array_size -1) * sizeof(float_align_1_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        float_align_1_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        float_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_float_align_1_optional_cdr_plain(data_representation) &&
            sizeof(float_align_1_optional) == float_align_1_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(float_align_1_optional));

            scdr.jump((array_size - 1) * sizeof(float_align_1_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const float_align_1_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_float_align_2_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const float_align_2_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const float_align_2_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const float_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_float_align_2_optional_cdr_plain(data_representation) &&
                sizeof(float_align_2_optional) == float_align_2_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(float_align_2_optional));

            scdr.jump((array_size -1) * sizeof(float_align_2_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        float_align_2_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        float_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_float_align_2_optional_cdr_plain(data_representation) &&
            sizeof(float_align_2_optional) == float_align_2_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(float_align_2_optional));

            scdr.jump((array_size - 1) * sizeof(float_align_2_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const float_align_2_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_float_align_4_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const float_align_4_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const float_align_4_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const float_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_float_align_4_optional_cdr_plain(data_representation) &&
                sizeof(float_align_4_optional) == float_align_4_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(float_align_4_optional));

            scdr.jump((array_size -1) * sizeof(float_align_4_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        float_align_4_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        float_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_float_align_4_optional_cdr_plain(data_representation) &&
            sizeof(float_align_4_optional) == float_align_4_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(float_align_4_optional));

            scdr.jump((array_size - 1) * sizeof(float_align_4_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const float_align_4_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_double_align_1_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const double_align_1_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const double_align_1_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const double_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_double_align_1_optional_cdr_plain(data_representation) &&
                sizeof(double_align_1_optional) == double_align_1_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(double_align_1_optional));

            scdr.jump((array_size -1) * sizeof(double_align_1_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        double_align_1_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        double_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_double_align_1_optional_cdr_plain(data_representation) &&
            sizeof(double_align_1_optional) == double_align_1_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(double_align_1_optional));

            scdr.jump((array_size - 1) * sizeof(double_align_1_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const double_align_1_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_double_align_2_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const double_align_2_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const double_align_2_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const double_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_double_align_2_optional_cdr_plain(data_representation) &&
                sizeof(double_align_2_optional) == double_align_2_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(double_align_2_optional));

            scdr.jump((array_size -1) * sizeof(double_align_2_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        double_align_2_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        double_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_double_align_2_optional_cdr_plain(data_representation) &&
            sizeof(double_align_2_optional) == double_align_2_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(double_align_2_optional));

            scdr.jump((array_size - 1) * sizeof(double_align_2_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const double_align_2_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_double_align_4_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const double_align_4_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const double_align_4_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const double_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_double_align_4_optional_cdr_plain(data_representation) &&
                sizeof(double_align_4_optional) == double_align_4_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(double_align_4_optional));

            scdr.jump((array_size -1) * sizeof(double_align_4_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        double_align_4_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        double_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_double_align_4_optional_cdr_plain(data_representation) &&
            sizeof(double_align_4_optional) == double_align_4_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(double_align_4_optional));

            scdr.jump((array_size - 1) * sizeof(double_align_4_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const double_align_4_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_longdouble_align_1_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const longdouble_align_1_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const longdouble_align_1_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const longdouble_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_longdouble_align_1_optional_cdr_plain(data_representation) &&
                sizeof(longdouble_align_1_optional) == longdouble_align_1_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(longdouble_align_1_optional));

            scdr.jump((array_size -1) * sizeof(longdouble_align_1_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        longdouble_align_1_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        longdouble_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_longdouble_align_1_optional_cdr_plain(data_representation) &&
            sizeof(longdouble_align_1_optional) == longdouble_align_1_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(longdouble_align_1_optional));

            scdr.jump((array_size - 1) * sizeof(longdouble_align_1_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const longdouble_align_1_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_longdouble_align_2_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const longdouble_align_2_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const longdouble_align_2_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const longdouble_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_longdouble_align_2_optional_cdr_plain(data_representation) &&
                sizeof(longdouble_align_2_optional) == longdouble_align_2_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(longdouble_align_2_optional));

            scdr.jump((array_size -1) * sizeof(longdouble_align_2_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        longdouble_align_2_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        longdouble_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_longdouble_align_2_optional_cdr_plain(data_representation) &&
            sizeof(longdouble_align_2_optional) == longdouble_align_2_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(longdouble_align_2_optional));

            scdr.jump((array_size - 1) * sizeof(longdouble_align_2_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const longdouble_align_2_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_longdouble_align_4_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const longdouble_align_4_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const longdouble_align_4_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const longdouble_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_longdouble_align_4_optional_cdr_plain(data_representation) &&
                sizeof(longdouble_align_4_optional) == longdouble_align_4_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(longdouble_align_4_optional));

            scdr.jump((array_size -1) * sizeof(longdouble_align_4_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        longdouble_align_4_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        longdouble_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_longdouble_align_4_optional_cdr_plain(data_representation) &&
            sizeof(longdouble_align_4_optional) == longdouble_align_4_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(longdouble_align_4_optional));

            scdr.jump((array_size - 1) * sizeof(longdouble_align_4_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const longdouble_align_4_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_boolean_align_1_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const boolean_align_1_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const boolean_align_1_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const boolean_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_boolean_align_1_optional_cdr_plain(data_representation) &&
                sizeof(boolean_align_1_optional) == boolean_align_1_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(boolean_align_1_optional));

            scdr.jump((array_size -1) * sizeof(boolean_align_1_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        boolean_align_1_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        boolean_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_boolean_align_1_optional_cdr_plain(data_representation) &&
            sizeof(boolean_align_1_optional) == boolean_align_1_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(boolean_align_1_optional));

            scdr.jump((array_size - 1) * sizeof(boolean_align_1_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const boolean_align_1_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_boolean_align_2_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const boolean_align_2_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const boolean_align_2_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const boolean_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_boolean_align_2_optional_cdr_plain(data_representation) &&
                sizeof(boolean_align_2_optional) == boolean_align_2_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(boolean_align_2_optional));

            scdr.jump((array_size -1) * sizeof(boolean_align_2_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        boolean_align_2_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        boolean_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_boolean_align_2_optional_cdr_plain(data_representation) &&
            sizeof(boolean_align_2_optional) == boolean_align_2_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(boolean_align_2_optional));

            scdr.jump((array_size - 1) * sizeof(boolean_align_2_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const boolean_align_2_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_boolean_align_4_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const boolean_align_4_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const boolean_align_4_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const boolean_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_boolean_align_4_optional_cdr_plain(data_representation) &&
                sizeof(boolean_align_4_optional) == boolean_align_4_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(boolean_align_4_optional));

            scdr.jump((array_size -1) * sizeof(boolean_align_4_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        boolean_align_4_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        boolean_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_boolean_align_4_optional_cdr_plain(data_representation) &&
            sizeof(boolean_align_4_optional) == boolean_align_4_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(boolean_align_4_optional));

            scdr.jump((array_size - 1) * sizeof(boolean_align_4_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const boolean_align_4_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_octet_align_1_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const octet_align_1_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const octet_align_1_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const octet_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_octet_align_1_optional_cdr_plain(data_representation) &&
                sizeof(octet_align_1_optional) == octet_align_1_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(octet_align_1_optional));

            scdr.jump((array_size -1) * sizeof(octet_align_1_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        octet_align_1_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        octet_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_octet_align_1_optional_cdr_plain(data_representation) &&
            sizeof(octet_align_1_optional) == octet_align_1_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(octet_align_1_optional));

            scdr.jump((array_size - 1) * sizeof(octet_align_1_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const octet_align_1_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_octet_align_2_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const octet_align_2_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const octet_align_2_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const octet_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_octet_align_2_optional_cdr_plain(data_representation) &&
                sizeof(octet_align_2_optional) == octet_align_2_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(octet_align_2_optional));

            scdr.jump((array_size -1) * sizeof(octet_align_2_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        octet_align_2_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        octet_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_octet_align_2_optional_cdr_plain(data_representation) &&
            sizeof(octet_align_2_optional) == octet_align_2_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(octet_align_2_optional));

            scdr.jump((array_size - 1) * sizeof(octet_align_2_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const octet_align_2_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_octet_align_4_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const octet_align_4_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const octet_align_4_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const octet_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_octet_align_4_optional_cdr_plain(data_representation) &&
                sizeof(octet_align_4_optional) == octet_align_4_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(octet_align_4_optional));

            scdr.jump((array_size -1) * sizeof(octet_align_4_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        octet_align_4_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        octet_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_octet_align_4_optional_cdr_plain(data_representation) &&
            sizeof(octet_align_4_optional) == octet_align_4_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(octet_align_4_optional));

            scdr.jump((array_size - 1) * sizeof(octet_align_4_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const octet_align_4_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_char_align_1_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const char_align_1_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const char_align_1_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const char_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_char_align_1_optional_cdr_plain(data_representation) &&
                sizeof(char_align_1_optional) == char_align_1_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(char_align_1_optional));

            scdr.jump((array_size -1) * sizeof(char_align_1_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        char_align_1_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        char_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_char_align_1_optional_cdr_plain(data_representation) &&
            sizeof(char_align_1_optional) == char_align_1_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(char_align_1_optional));

            scdr.jump((array_size - 1) * sizeof(char_align_1_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const char_align_1_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_char_align_2_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const char_align_2_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const char_align_2_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const char_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_char_align_2_optional_cdr_plain(data_representation) &&
                sizeof(char_align_2_optional) == char_align_2_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(char_align_2_optional));

            scdr.jump((array_size -1) * sizeof(char_align_2_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        char_align_2_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        char_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_char_align_2_optional_cdr_plain(data_representation) &&
            sizeof(char_align_2_optional) == char_align_2_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(char_align_2_optional));

            scdr.jump((array_size - 1) * sizeof(char_align_2_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const char_align_2_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_char_align_4_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const char_align_4_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const char_align_4_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const char_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_char_align_4_optional_cdr_plain(data_representation) &&
                sizeof(char_align_4_optional) == char_align_4_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(char_align_4_optional));

            scdr.jump((array_size -1) * sizeof(char_align_4_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        char_align_4_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        char_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_char_align_4_optional_cdr_plain(data_representation) &&
            sizeof(char_align_4_optional) == char_align_4_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(char_align_4_optional));

            scdr.jump((array_size - 1) * sizeof(char_align_4_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const char_align_4_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_wchar_align_1_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const wchar_align_1_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const wchar_align_1_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const wchar_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_wchar_align_1_optional_cdr_plain(data_representation) &&
                sizeof(wchar_align_1_optional) == wchar_align_1_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(wchar_align_1_optional));

            scdr.jump((array_size -1) * sizeof(wchar_align_1_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        wchar_align_1_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        wchar_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_wchar_align_1_optional_cdr_plain(data_representation) &&
            sizeof(wchar_align_1_optional) == wchar_align_1_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(wchar_align_1_optional));

            scdr.jump((array_size - 1) * sizeof(wchar_align_1_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const wchar_align_1_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_wchar_align_2_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const wchar_align_2_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const wchar_align_2_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const wchar_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_wchar_align_2_optional_cdr_plain(data_representation) &&
                sizeof(wchar_align_2_optional) == wchar_align_2_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(wchar_align_2_optional));

            scdr.jump((array_size -1) * sizeof(wchar_align_2_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        wchar_align_2_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        wchar_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_wchar_align_2_optional_cdr_plain(data_representation) &&
            sizeof(wchar_align_2_optional) == wchar_align_2_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(wchar_align_2_optional));

            scdr.jump((array_size - 1) * sizeof(wchar_align_2_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const wchar_align_2_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_wchar_align_4_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const wchar_align_4_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const wchar_align_4_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const wchar_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_wchar_align_4_optional_cdr_plain(data_representation) &&
                sizeof(wchar_align_4_optional) == wchar_align_4_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(wchar_align_4_optional));

            scdr.jump((array_size -1) * sizeof(wchar_align_4_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        wchar_align_4_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        wchar_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_wchar_align_4_optional_cdr_plain(data_representation) &&
            sizeof(wchar_align_4_optional) == wchar_align_4_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(wchar_align_4_optional));

            scdr.jump((array_size - 1) * sizeof(wchar_align_4_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const wchar_align_4_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_sequence_short_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const sequence_short_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const sequence_short_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const sequence_short_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_sequence_short_optional_cdr_plain(data_representation) &&
                sizeof(sequence_short_optional) == sequence_short_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(sequence_short_optional));

            scdr.jump((array_size -1) * sizeof(sequence_short_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        sequence_short_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        sequence_short_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_sequence_short_optional_cdr_plain(data_representation) &&
            sizeof(sequence_short_optional) == sequence_short_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(sequence_short_optional));

            scdr.jump((array_size - 1) * sizeof(sequence_short_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const sequence_short_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_sequence_short_align_1_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const sequence_short_align_1_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const sequence_short_align_1_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const sequence_short_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_sequence_short_align_1_optional_cdr_plain(data_representation) &&
                sizeof(sequence_short_align_1_optional) == sequence_short_align_1_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(sequence_short_align_1_optional));

            scdr.jump((array_size -1) * sizeof(sequence_short_align_1_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        sequence_short_align_1_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        sequence_short_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_sequence_short_align_1_optional_cdr_plain(data_representation) &&
            sizeof(sequence_short_align_1_optional) == sequence_short_align_1_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(sequence_short_align_1_optional));

            scdr.jump((array_size - 1) * sizeof(sequence_short_align_1_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const sequence_short_align_1_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_sequence_short_align_2_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const sequence_short_align_2_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const sequence_short_align_2_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const sequence_short_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_sequence_short_align_2_optional_cdr_plain(data_representation) &&
                sizeof(sequence_short_align_2_optional) == sequence_short_align_2_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(sequence_short_align_2_optional));

            scdr.jump((array_size -1) * sizeof(sequence_short_align_2_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        sequence_short_align_2_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        sequence_short_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_sequence_short_align_2_optional_cdr_plain(data_representation) &&
            sizeof(sequence_short_align_2_optional) == sequence_short_align_2_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(sequence_short_align_2_optional));

            scdr.jump((array_size - 1) * sizeof(sequence_short_align_2_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const sequence_short_align_2_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_sequence_short_align_4_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const sequence_short_align_4_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const sequence_short_align_4_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const sequence_short_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_sequence_short_align_4_optional_cdr_plain(data_representation) &&
                sizeof(sequence_short_align_4_optional) == sequence_short_align_4_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(sequence_short_align_4_optional));

            scdr.jump((array_size -1) * sizeof(sequence_short_align_4_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        sequence_short_align_4_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        sequence_short_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_sequence_short_align_4_optional_cdr_plain(data_representation) &&
            sizeof(sequence_short_align_4_optional) == sequence_short_align_4_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(sequence_short_align_4_optional));

            scdr.jump((array_size - 1) * sizeof(sequence_short_align_4_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const sequence_short_align_4_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_string_unbounded_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const string_unbounded_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const string_unbounded_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const string_unbounded_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_string_unbounded_optional_cdr_plain(data_representation) &&
                sizeof(string_unbounded_optional) == string_unbounded_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(string_unbounded_optional));

            scdr.jump((array_size -1) * sizeof(string_unbounded_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        string_unbounded_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        string_unbounded_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_string_unbounded_optional_cdr_plain(data_representation) &&
            sizeof(string_unbounded_optional) == string_unbounded_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(string_unbounded_optional));

            scdr.jump((array_size - 1) * sizeof(string_unbounded_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const string_unbounded_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_string_unbounded_align_1_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const string_unbounded_align_1_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const string_unbounded_align_1_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const string_unbounded_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_string_unbounded_align_1_optional_cdr_plain(data_representation) &&
                sizeof(string_unbounded_align_1_optional) == string_unbounded_align_1_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(string_unbounded_align_1_optional));

            scdr.jump((array_size -1) * sizeof(string_unbounded_align_1_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        string_unbounded_align_1_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        string_unbounded_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_string_unbounded_align_1_optional_cdr_plain(data_representation) &&
            sizeof(string_unbounded_align_1_optional) == string_unbounded_align_1_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(string_unbounded_align_1_optional));

            scdr.jump((array_size - 1) * sizeof(string_unbounded_align_1_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const string_unbounded_align_1_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_string_unbounded_align_2_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const string_unbounded_align_2_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const string_unbounded_align_2_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const string_unbounded_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_string_unbounded_align_2_optional_cdr_plain(data_representation) &&
                sizeof(string_unbounded_align_2_optional) == string_unbounded_align_2_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(string_unbounded_align_2_optional));

            scdr.jump((array_size -1) * sizeof(string_unbounded_align_2_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        string_unbounded_align_2_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        string_unbounded_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_string_unbounded_align_2_optional_cdr_plain(data_representation) &&
            sizeof(string_unbounded_align_2_optional) == string_unbounded_align_2_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(string_unbounded_align_2_optional));

            scdr.jump((array_size - 1) * sizeof(string_unbounded_align_2_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const string_unbounded_align_2_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_string_unbounded_align_4_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const string_unbounded_align_4_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const string_unbounded_align_4_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const string_unbounded_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_string_unbounded_align_4_optional_cdr_plain(data_representation) &&
                sizeof(string_unbounded_align_4_optional) == string_unbounded_align_4_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(string_unbounded_align_4_optional));

            scdr.jump((array_size -1) * sizeof(string_unbounded_align_4_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        string_unbounded_align_4_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        string_unbounded_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_string_unbounded_align_4_optional_cdr_plain(data_representation) &&
            sizeof(string_unbounded_align_4_optional) == string_unbounded_align_4_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(string_unbounded_align_4_optional));

            scdr.jump((array_size - 1) * sizeof(string_unbounded_align_4_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const string_unbounded_align_4_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_string_bounded_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const string_bounded_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const string_bounded_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const string_bounded_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_string_bounded_optional_cdr_plain(data_representation) &&
                sizeof(string_bounded_optional) == string_bounded_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(string_bounded_optional));

            scdr.jump((array_size -1) * sizeof(string_bounded_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        string_bounded_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        string_bounded_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_string_bounded_optional_cdr_plain(data_representation) &&
            sizeof(string_bounded_optional) == string_bounded_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(string_bounded_optional));

            scdr.jump((array_size - 1) * sizeof(string_bounded_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const string_bounded_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_string_bounded_align_1_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const string_bounded_align_1_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const string_bounded_align_1_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const string_bounded_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_string_bounded_align_1_optional_cdr_plain(data_representation) &&
                sizeof(string_bounded_align_1_optional) == string_bounded_align_1_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(string_bounded_align_1_optional));

            scdr.jump((array_size -1) * sizeof(string_bounded_align_1_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        string_bounded_align_1_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        string_bounded_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_string_bounded_align_1_optional_cdr_plain(data_representation) &&
            sizeof(string_bounded_align_1_optional) == string_bounded_align_1_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(string_bounded_align_1_optional));

            scdr.jump((array_size - 1) * sizeof(string_bounded_align_1_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const string_bounded_align_1_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_string_bounded_align_2_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const string_bounded_align_2_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const string_bounded_align_2_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const string_bounded_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_string_bounded_align_2_optional_cdr_plain(data_representation) &&
                sizeof(string_bounded_align_2_optional) == string_bounded_align_2_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(string_bounded_align_2_optional));

            scdr.jump((array_size -1) * sizeof(string_bounded_align_2_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        string_bounded_align_2_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        string_bounded_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_string_bounded_align_2_optional_cdr_plain(data_representation) &&
            sizeof(string_bounded_align_2_optional) == string_bounded_align_2_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(string_bounded_align_2_optional));

            scdr.jump((array_size - 1) * sizeof(string_bounded_align_2_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const string_bounded_align_2_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_string_bounded_align_4_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const string_bounded_align_4_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const string_bounded_align_4_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const string_bounded_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_string_bounded_align_4_optional_cdr_plain(data_representation) &&
                sizeof(string_bounded_align_4_optional) == string_bounded_align_4_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(string_bounded_align_4_optional));

            scdr.jump((array_size -1) * sizeof(string_bounded_align_4_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        string_bounded_align_4_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        string_bounded_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_string_bounded_align_4_optional_cdr_plain(data_representation) &&
            sizeof(string_bounded_align_4_optional) == string_bounded_align_4_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(string_bounded_align_4_optional));

            scdr.jump((array_size - 1) * sizeof(string_bounded_align_4_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const string_bounded_align_4_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_map_short_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const map_short_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const map_short_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const map_short_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_map_short_optional_cdr_plain(data_representation) &&
                sizeof(map_short_optional) == map_short_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(map_short_optional));

            scdr.jump((array_size -1) * sizeof(map_short_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        map_short_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        map_short_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_map_short_optional_cdr_plain(data_representation) &&
            sizeof(map_short_optional) == map_short_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(map_short_optional));

            scdr.jump((array_size - 1) * sizeof(map_short_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const map_short_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_map_short_align_1_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const map_short_align_1_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const map_short_align_1_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const map_short_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_map_short_align_1_optional_cdr_plain(data_representation) &&
                sizeof(map_short_align_1_optional) == map_short_align_1_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(map_short_align_1_optional));

            scdr.jump((array_size -1) * sizeof(map_short_align_1_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        map_short_align_1_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        map_short_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_map_short_align_1_optional_cdr_plain(data_representation) &&
            sizeof(map_short_align_1_optional) == map_short_align_1_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(map_short_align_1_optional));

            scdr.jump((array_size - 1) * sizeof(map_short_align_1_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const map_short_align_1_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_map_short_align_2_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const map_short_align_2_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const map_short_align_2_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const map_short_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_map_short_align_2_optional_cdr_plain(data_representation) &&
                sizeof(map_short_align_2_optional) == map_short_align_2_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(map_short_align_2_optional));

            scdr.jump((array_size -1) * sizeof(map_short_align_2_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        map_short_align_2_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        map_short_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_map_short_align_2_optional_cdr_plain(data_representation) &&
            sizeof(map_short_align_2_optional) == map_short_align_2_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(map_short_align_2_optional));

            scdr.jump((array_size - 1) * sizeof(map_short_align_2_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const map_short_align_2_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_map_short_align_4_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const map_short_align_4_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const map_short_align_4_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const map_short_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_map_short_align_4_optional_cdr_plain(data_representation) &&
                sizeof(map_short_align_4_optional) == map_short_align_4_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(map_short_align_4_optional));

            scdr.jump((array_size -1) * sizeof(map_short_align_4_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        map_short_align_4_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        map_short_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_map_short_align_4_optional_cdr_plain(data_representation) &&
            sizeof(map_short_align_4_optional) == map_short_align_4_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(map_short_align_4_optional));

            scdr.jump((array_size - 1) * sizeof(map_short_align_4_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const map_short_align_4_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_array_short_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const array_short_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const array_short_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const array_short_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_array_short_optional_cdr_plain(data_representation) &&
                sizeof(array_short_optional) == array_short_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(array_short_optional));

            scdr.jump((array_size -1) * sizeof(array_short_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        array_short_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        array_short_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_array_short_optional_cdr_plain(data_representation) &&
            sizeof(array_short_optional) == array_short_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(array_short_optional));

            scdr.jump((array_size - 1) * sizeof(array_short_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const array_short_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_array_short_align_1_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const array_short_align_1_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const array_short_align_1_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const array_short_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_array_short_align_1_optional_cdr_plain(data_representation) &&
                sizeof(array_short_align_1_optional) == array_short_align_1_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(array_short_align_1_optional));

            scdr.jump((array_size -1) * sizeof(array_short_align_1_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        array_short_align_1_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        array_short_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_array_short_align_1_optional_cdr_plain(data_representation) &&
            sizeof(array_short_align_1_optional) == array_short_align_1_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(array_short_align_1_optional));

            scdr.jump((array_size - 1) * sizeof(array_short_align_1_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const array_short_align_1_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_array_short_align_2_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const array_short_align_2_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const array_short_align_2_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const array_short_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_array_short_align_2_optional_cdr_plain(data_representation) &&
                sizeof(array_short_align_2_optional) == array_short_align_2_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(array_short_align_2_optional));

            scdr.jump((array_size -1) * sizeof(array_short_align_2_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        array_short_align_2_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        array_short_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_array_short_align_2_optional_cdr_plain(data_representation) &&
            sizeof(array_short_align_2_optional) == array_short_align_2_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(array_short_align_2_optional));

            scdr.jump((array_size - 1) * sizeof(array_short_align_2_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const array_short_align_2_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_array_short_align_4_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const array_short_align_4_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const array_short_align_4_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const array_short_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_array_short_align_4_optional_cdr_plain(data_representation) &&
                sizeof(array_short_align_4_optional) == array_short_align_4_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(array_short_align_4_optional));

            scdr.jump((array_size -1) * sizeof(array_short_align_4_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        array_short_align_4_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        array_short_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_array_short_align_4_optional_cdr_plain(data_representation) &&
            sizeof(array_short_align_4_optional) == array_short_align_4_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(array_short_align_4_optional));

            scdr.jump((array_size - 1) * sizeof(array_short_align_4_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const array_short_align_4_optional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            scdr << data.value().value();
                        }

}



eProsima_user_DllExport bool is_struct_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const struct_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const struct_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const struct_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_struct_optional_cdr_plain(data_representation) &&
                sizeof(struct_optional) == struct_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(struct_optional));

            scdr.jump((array_size -1) * sizeof(struct_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        struct_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        struct_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_struct_optional_cdr_plain(data_representation) &&
            sizeof(struct_optional) == struct_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(struct_optional));

            scdr.jump((array_size - 1) * sizeof(struct_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const struct_optional& data)
{
            extern void serialize_key(
                    Cdr& scdr,
                    const InnerStructureHelper& data);


    static_cast<void>(scdr);
    static_cast<void>(data);
                        if (data.value().has_value())
                        {
                            serialize_key(scdr, data.value().value());
                        }

}



eProsima_user_DllExport bool is_struct_align_1_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const struct_align_1_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const struct_align_1_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const struct_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_struct_align_1_optional_cdr_plain(data_representation) &&
                sizeof(struct_align_1_optional) == struct_align_1_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(struct_align_1_optional));

            scdr.jump((array_size -1) * sizeof(struct_align_1_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        struct_align_1_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        struct_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_struct_align_1_optional_cdr_plain(data_representation) &&
            sizeof(struct_align_1_optional) == struct_align_1_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(struct_align_1_optional));

            scdr.jump((array_size - 1) * sizeof(struct_align_1_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const struct_align_1_optional& data)
{
            extern void serialize_key(
                    Cdr& scdr,
                    const InnerStructureHelper& data);


    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            serialize_key(scdr, data.value().value());
                        }

}



eProsima_user_DllExport bool is_struct_align_2_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const struct_align_2_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const struct_align_2_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const struct_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_struct_align_2_optional_cdr_plain(data_representation) &&
                sizeof(struct_align_2_optional) == struct_align_2_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(struct_align_2_optional));

            scdr.jump((array_size -1) * sizeof(struct_align_2_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        struct_align_2_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        struct_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_struct_align_2_optional_cdr_plain(data_representation) &&
            sizeof(struct_align_2_optional) == struct_align_2_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(struct_align_2_optional));

            scdr.jump((array_size - 1) * sizeof(struct_align_2_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const struct_align_2_optional& data)
{
            extern void serialize_key(
                    Cdr& scdr,
                    const InnerStructureHelper& data);


    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            serialize_key(scdr, data.value().value());
                        }

}



eProsima_user_DllExport bool is_struct_align_4_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const struct_align_4_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const struct_align_4_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const struct_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_struct_align_4_optional_cdr_plain(data_representation) &&
                sizeof(struct_align_4_optional) == struct_align_4_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(struct_align_4_optional));

            scdr.jump((array_size -1) * sizeof(struct_align_4_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        struct_align_4_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        struct_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_struct_align_4_optional_cdr_plain(data_representation) &&
            sizeof(struct_align_4_optional) == struct_align_4_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(struct_align_4_optional));

            scdr.jump((array_size - 1) * sizeof(struct_align_4_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const struct_align_4_optional& data)
{
            extern void serialize_key(
                    Cdr& scdr,
                    const InnerStructureHelper& data);


    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            serialize_key(scdr, data.value().value());
                        }

}



eProsima_user_DllExport bool is_InnerStructOptional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const InnerStructOptional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.s(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.l(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const InnerStructOptional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.s()
        << eprosima::fastcdr::MemberId(1) << data.l()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const InnerStructOptional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_InnerStructOptional_cdr_plain(data_representation) &&
                sizeof(InnerStructOptional) == InnerStructOptional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(InnerStructOptional));

            scdr.jump((array_size -1) * sizeof(InnerStructOptional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        InnerStructOptional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.s();
                                            break;

                                        case 1:
                                                dcdr >> data.l();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        InnerStructOptional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_InnerStructOptional_cdr_plain(data_representation) &&
            sizeof(InnerStructOptional) == InnerStructOptional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(InnerStructOptional));

            scdr.jump((array_size - 1) * sizeof(InnerStructOptional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const InnerStructOptional& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.s();

                        if (data.l().has_value())
                        {
                            scdr << data.l().value();
                        }

}



eProsima_user_DllExport bool is_opt_struct_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const opt_struct_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const opt_struct_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const opt_struct_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_opt_struct_optional_cdr_plain(data_representation) &&
                sizeof(opt_struct_optional) == opt_struct_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(opt_struct_optional));

            scdr.jump((array_size -1) * sizeof(opt_struct_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        opt_struct_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        opt_struct_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_opt_struct_optional_cdr_plain(data_representation) &&
            sizeof(opt_struct_optional) == opt_struct_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(opt_struct_optional));

            scdr.jump((array_size - 1) * sizeof(opt_struct_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const opt_struct_optional& data)
{
            extern void serialize_key(
                    Cdr& scdr,
                    const InnerStructOptional& data);


    static_cast<void>(scdr);
    static_cast<void>(data);
                        if (data.value().has_value())
                        {
                            serialize_key(scdr, data.value().value());
                        }

}



eProsima_user_DllExport bool is_opt_struct_align_1_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const opt_struct_align_1_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const opt_struct_align_1_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const opt_struct_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_opt_struct_align_1_optional_cdr_plain(data_representation) &&
                sizeof(opt_struct_align_1_optional) == opt_struct_align_1_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(opt_struct_align_1_optional));

            scdr.jump((array_size -1) * sizeof(opt_struct_align_1_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        opt_struct_align_1_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        opt_struct_align_1_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_opt_struct_align_1_optional_cdr_plain(data_representation) &&
            sizeof(opt_struct_align_1_optional) == opt_struct_align_1_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(opt_struct_align_1_optional));

            scdr.jump((array_size - 1) * sizeof(opt_struct_align_1_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const opt_struct_align_1_optional& data)
{
            extern void serialize_key(
                    Cdr& scdr,
                    const InnerStructOptional& data);


    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            serialize_key(scdr, data.value().value());
                        }

}



eProsima_user_DllExport bool is_opt_struct_align_2_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const opt_struct_align_2_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const opt_struct_align_2_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const opt_struct_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_opt_struct_align_2_optional_cdr_plain(data_representation) &&
                sizeof(opt_struct_align_2_optional) == opt_struct_align_2_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(opt_struct_align_2_optional));

            scdr.jump((array_size -1) * sizeof(opt_struct_align_2_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        opt_struct_align_2_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        opt_struct_align_2_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_opt_struct_align_2_optional_cdr_plain(data_representation) &&
            sizeof(opt_struct_align_2_optional) == opt_struct_align_2_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(opt_struct_align_2_optional));

            scdr.jump((array_size - 1) * sizeof(opt_struct_align_2_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const opt_struct_align_2_optional& data)
{
            extern void serialize_key(
                    Cdr& scdr,
                    const InnerStructOptional& data);


    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            serialize_key(scdr, data.value().value());
                        }

}



eProsima_user_DllExport bool is_opt_struct_align_4_optional_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const opt_struct_align_4_optional& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.align(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const opt_struct_align_4_optional& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.align()
        << eprosima::fastcdr::MemberId(1) << data.value()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const opt_struct_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_opt_struct_align_4_optional_cdr_plain(data_representation) &&
                sizeof(opt_struct_align_4_optional) == opt_struct_align_4_optional_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(opt_struct_align_4_optional));

            scdr.jump((array_size -1) * sizeof(opt_struct_align_4_optional));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        opt_struct_align_4_optional& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.align();
                                            break;

                                        case 1:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        opt_struct_align_4_optional* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_opt_struct_align_4_optional_cdr_plain(data_representation) &&
            sizeof(opt_struct_align_4_optional) == opt_struct_align_4_optional_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(opt_struct_align_4_optional));

            scdr.jump((array_size - 1) * sizeof(opt_struct_align_4_optional));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const opt_struct_align_4_optional& data)
{
            extern void serialize_key(
                    Cdr& scdr,
                    const InnerStructOptional& data);


    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.align();

                        if (data.value().has_value())
                        {
                            serialize_key(scdr, data.value().value());
                        }

}



} // namespace fastcdr
} // namespace eprosima

#endif // FAST_DDS_GENERATED__OPTIONALCDRAUX_IPP

