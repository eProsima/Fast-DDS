// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file relative_path_includeCdrAux.ipp
 * This source file contains some declarations of CDR related functions.
 *
 * This file was generated by the tool fastddsgen (version: 4.1.0).
 */

#ifndef FAST_DDS_GENERATED__RELATIVE_PATH_INCLUDECDRAUX_IPP
#define FAST_DDS_GENERATED__RELATIVE_PATH_INCLUDECDRAUX_IPP

#include "relative_path_includeCdrAux.hpp"

#include <fastcdr/Cdr.h>
#include <fastcdr/CdrSizeCalculator.hpp>

#include <fastdds/dds/core/policy/QosPolicies.hpp>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

namespace eprosima {
namespace fastcdr {


eProsima_user_DllExport bool is_RelativePathIncludeStruct_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const RelativePathIncludeStruct& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.value(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const RelativePathIncludeStruct& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.value()
;
    scdr.end_serialize_type(current_state);
}

template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const RelativePathIncludeStruct* array_ptr,
        const std::size_t array_size)
{
    using namespace ::eprosima::fastdds::dds;
    DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

    if (is_RelativePathIncludeStruct_cdr_plain(data_representation) &&
            sizeof(RelativePathIncludeStruct) == RelativePathIncludeStruct_max_cdr_typesize)
    {
        // Serialize the first element
        // to ensure correct alignment
        scdr.serialize(
            array_ptr[0]);

        ++array_ptr;

        std::memcpy(
            scdr.get_current_position(),
            array_ptr,
            (array_size - 1) * sizeof(RelativePathIncludeStruct));

        scdr.jump((array_size -1) * sizeof(RelativePathIncludeStruct));
    }
    else
    {
        scdr.serialize_array(array_ptr, array_size);
    }
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        RelativePathIncludeStruct& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.value();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        RelativePathIncludeStruct* array_ptr,
        const std::size_t array_size)
{
    using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

    if (CdrVersion::XCDRv2 == scdr.get_cdr_version())
    {
        uint32_t dheader {0};
        scdr.deserialize(dheader);
        auto offset = scdr.get_current_position();

        if (is_RelativePathIncludeStruct_cdr_plain(data_representation) &&
            sizeof(RelativePathIncludeStruct) == RelativePathIncludeStruct_max_cdr_typesize)
        {
            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size) * sizeof(RelativePathIncludeStruct));

            scdr.jump((array_size) * sizeof(RelativePathIncludeStruct));
        }
        else
        {
            uint32_t count {0};
            while (scdr.get_current_position() - offset < dheader && count < array_size)
            {
                scdr.deserialize_array(&array_ptr[count], 1);
                ++count;
            }
        }

        if (scdr.get_current_position() - offset != dheader)
        {
            throw exception::BadParamException("Member size greater than size specified by DHEADER");
        }
    }
    else
    {
        if (is_RelativePathIncludeStruct_cdr_plain(data_representation) &&
            sizeof(RelativePathIncludeStruct) == RelativePathIncludeStruct_max_cdr_typesize)
        {
            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size) * sizeof(RelativePathIncludeStruct));

            scdr.jump((array_size) * sizeof(RelativePathIncludeStruct));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const RelativePathIncludeStruct& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.value();

}



} // namespace fastcdr
} // namespace eprosima

#endif // FAST_DDS_GENERATED__RELATIVE_PATH_INCLUDECDRAUX_IPP

