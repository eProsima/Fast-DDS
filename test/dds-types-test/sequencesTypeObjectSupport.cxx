// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file sequencesTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "sequencesTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "sequences.hpp"

#include "helpers/basic_inner_types.hpp"

using namespace eprosima::fastdds::dds::xtypes;

void register_sequences_type_objects()
{
    static std::once_flag once_flag;
    std::call_once(once_flag, []()
            {
                register_InnerStructureHelper_type_identifier();

                register_InnerEmptyStructureHelper_type_identifier();

                register_InnerUnionHelper_type_identifier();

                register_SequenceShort_type_identifier();

                register_SequenceUShort_type_identifier();

                register_SequenceLong_type_identifier();

                register_SequenceULong_type_identifier();

                register_SequenceLongLong_type_identifier();

                register_SequenceULongLong_type_identifier();

                register_SequenceFloat_type_identifier();

                register_SequenceDouble_type_identifier();

                register_SequenceLongDouble_type_identifier();

                register_SequenceBoolean_type_identifier();

                register_SequenceOctet_type_identifier();

                register_SequenceChar_type_identifier();

                register_SequenceWChar_type_identifier();

                register_SequenceString_type_identifier();

                register_SequenceWString_type_identifier();

                register_SequenceStringBounded_type_identifier();

                register_SequenceWStringBounded_type_identifier();

                register_SequenceEnum_type_identifier();

                register_SequenceBitMask_type_identifier();

                register_SequenceAlias_type_identifier();

                register_SequenceShortArray_type_identifier();

                register_SequenceSequence_type_identifier();

                register_SequenceMap_type_identifier();

                register_SequenceUnion_type_identifier();

                register_SequenceStructure_type_identifier();

                register_SequenceBitset_type_identifier();

                register_BoundedSmallSequences_type_identifier();

                register_BoundedBigSequences_type_identifier();

            });
}

void register_SequenceShort_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceShort = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceShort;
        TypeIdentifierPair type_ids_SequenceShort;
        QualifiedTypeName type_name_SequenceShort = "SequenceShort";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceShort;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceShort;
        CompleteTypeDetail detail_SequenceShort = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceShort, ann_custom_SequenceShort, type_name_SequenceShort.to_string());
        CompleteStructHeader header_SequenceShort;
        header_SequenceShort = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceShort);
        CompleteStructMemberSeq member_seq_SequenceShort;
        {
            return_code_SequenceShort =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_int16_t_unbounded", type_ids_SequenceShort);

            if (return_code_SequenceShort != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceShort =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_SequenceShort);

                if (return_code_SequenceShort != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_sequence_int16_t_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_SequenceShort.type_identifier1()._d() || TK_NONE == type_ids_SequenceShort.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceShort.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceShort.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceShort.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceShort.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceShort.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceShort.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceShort.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceShort.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceShort.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceShort.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceShort.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceShort.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceShort.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceShort.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_int16_t_unbounded = new TypeIdentifier(type_ids_SequenceShort.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceShort.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceShort.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceShort.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceShort.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceShort.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceShort.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceShort.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceShort.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceShort.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceShort.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceShort.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceShort.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceShort.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceShort.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceShort.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_int16_t_unbounded = new TypeIdentifier(type_ids_SequenceShort.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_int16_t_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceShort.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_int16_t_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_int16_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_int16_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_int16_t_unbounded, element_flags_anonymous_sequence_int16_t_unbounded);
                std::string type_id_kind_anonymous_sequence_int16_t_unbounded("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_int16_t_unbounded == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_int16_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int16_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_int16_t_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_int16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_int16_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int16_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_int16_t_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_int16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceShort =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_int16_t_unbounded", type_ids_SequenceShort);
                if (return_code_SequenceShort != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_int16_t_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_sequence_short = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_sequence_short;
            MemberId member_id_var_sequence_short = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceShort.type_identifier1()._d() || TK_NONE == type_ids_SequenceShort.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceShort.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceShort.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceShort.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceShort.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceShort.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceShort.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceShort.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceShort.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceShort.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceShort.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceShort.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceShort.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceShort.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceShort.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_short = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_short, member_flags_var_sequence_short, type_ids_SequenceShort.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceShort.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceShort.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceShort.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceShort.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceShort.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceShort.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceShort.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceShort.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceShort.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceShort.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceShort.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceShort.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceShort.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceShort.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceShort.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_short = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_short, member_flags_var_sequence_short, type_ids_SequenceShort.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_sequence_short member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_sequence_short = "var_sequence_short";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_sequence_short;
            ann_custom_SequenceShort.reset();
            CompleteMemberDetail detail_var_sequence_short = TypeObjectUtils::build_complete_member_detail(name_var_sequence_short, member_ann_builtin_var_sequence_short, ann_custom_SequenceShort);
            CompleteStructMember member_var_sequence_short = TypeObjectUtils::build_complete_struct_member(common_var_sequence_short, detail_var_sequence_short);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceShort, member_var_sequence_short);
        }
        CompleteStructType struct_type_SequenceShort = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceShort, header_SequenceShort, member_seq_SequenceShort);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceShort, type_name_SequenceShort.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceShort already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceShort =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceShort", type_ids_SequenceShort);
        if (return_code_SequenceShort != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceShort: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SequenceUShort_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceUShort = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceUShort;
        TypeIdentifierPair type_ids_SequenceUShort;
        QualifiedTypeName type_name_SequenceUShort = "SequenceUShort";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceUShort;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceUShort;
        CompleteTypeDetail detail_SequenceUShort = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceUShort, ann_custom_SequenceUShort, type_name_SequenceUShort.to_string());
        CompleteStructHeader header_SequenceUShort;
        header_SequenceUShort = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceUShort);
        CompleteStructMemberSeq member_seq_SequenceUShort;
        {
            return_code_SequenceUShort =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_uint16_t_unbounded", type_ids_SequenceUShort);

            if (return_code_SequenceUShort != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceUShort =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_SequenceUShort);

                if (return_code_SequenceUShort != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_sequence_uint16_t_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_SequenceUShort.type_identifier1()._d() || TK_NONE == type_ids_SequenceUShort.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceUShort.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceUShort.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceUShort.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceUShort.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceUShort.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceUShort.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceUShort.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceUShort.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceUShort.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceUShort.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceUShort.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceUShort.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceUShort.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceUShort.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_uint16_t_unbounded = new TypeIdentifier(type_ids_SequenceUShort.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceUShort.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceUShort.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceUShort.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceUShort.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceUShort.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceUShort.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceUShort.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceUShort.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceUShort.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceUShort.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceUShort.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceUShort.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceUShort.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceUShort.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceUShort.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_uint16_t_unbounded = new TypeIdentifier(type_ids_SequenceUShort.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_uint16_t_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceUShort.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_uint16_t_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_uint16_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_uint16_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_uint16_t_unbounded, element_flags_anonymous_sequence_uint16_t_unbounded);
                std::string type_id_kind_anonymous_sequence_uint16_t_unbounded("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_uint16_t_unbounded == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_uint16_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_uint16_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_uint16_t_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_uint16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_uint16_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_uint16_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_uint16_t_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_uint16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceUShort =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_uint16_t_unbounded", type_ids_SequenceUShort);
                if (return_code_SequenceUShort != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_uint16_t_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_sequence_ushort = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_sequence_ushort;
            MemberId member_id_var_sequence_ushort = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceUShort.type_identifier1()._d() || TK_NONE == type_ids_SequenceUShort.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceUShort.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceUShort.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceUShort.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceUShort.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceUShort.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceUShort.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceUShort.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceUShort.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceUShort.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceUShort.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceUShort.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceUShort.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceUShort.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceUShort.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_ushort = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_ushort, member_flags_var_sequence_ushort, type_ids_SequenceUShort.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceUShort.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceUShort.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceUShort.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceUShort.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceUShort.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceUShort.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceUShort.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceUShort.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceUShort.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceUShort.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceUShort.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceUShort.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceUShort.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceUShort.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceUShort.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_ushort = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_ushort, member_flags_var_sequence_ushort, type_ids_SequenceUShort.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_sequence_ushort member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_sequence_ushort = "var_sequence_ushort";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_sequence_ushort;
            ann_custom_SequenceUShort.reset();
            CompleteMemberDetail detail_var_sequence_ushort = TypeObjectUtils::build_complete_member_detail(name_var_sequence_ushort, member_ann_builtin_var_sequence_ushort, ann_custom_SequenceUShort);
            CompleteStructMember member_var_sequence_ushort = TypeObjectUtils::build_complete_struct_member(common_var_sequence_ushort, detail_var_sequence_ushort);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceUShort, member_var_sequence_ushort);
        }
        CompleteStructType struct_type_SequenceUShort = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceUShort, header_SequenceUShort, member_seq_SequenceUShort);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceUShort, type_name_SequenceUShort.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceUShort already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceUShort =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceUShort", type_ids_SequenceUShort);
        if (return_code_SequenceUShort != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceUShort: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SequenceLong_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceLong;
        TypeIdentifierPair type_ids_SequenceLong;
        QualifiedTypeName type_name_SequenceLong = "SequenceLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceLong;
        CompleteTypeDetail detail_SequenceLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceLong, ann_custom_SequenceLong, type_name_SequenceLong.to_string());
        CompleteStructHeader header_SequenceLong;
        header_SequenceLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceLong);
        CompleteStructMemberSeq member_seq_SequenceLong;
        {
            return_code_SequenceLong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_int32_t_unbounded", type_ids_SequenceLong);

            if (return_code_SequenceLong != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceLong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_SequenceLong);

                if (return_code_SequenceLong != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_sequence_int32_t_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_SequenceLong.type_identifier1()._d() || TK_NONE == type_ids_SequenceLong.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceLong.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceLong.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceLong.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceLong.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceLong.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceLong.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceLong.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceLong.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceLong.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceLong.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceLong.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceLong.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceLong.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceLong.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_int32_t_unbounded = new TypeIdentifier(type_ids_SequenceLong.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceLong.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceLong.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceLong.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceLong.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceLong.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceLong.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceLong.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceLong.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceLong.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceLong.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceLong.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceLong.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceLong.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceLong.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceLong.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_int32_t_unbounded = new TypeIdentifier(type_ids_SequenceLong.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_int32_t_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceLong.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_int32_t_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_int32_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_int32_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_int32_t_unbounded, element_flags_anonymous_sequence_int32_t_unbounded);
                std::string type_id_kind_anonymous_sequence_int32_t_unbounded("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_int32_t_unbounded == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_int32_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int32_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_int32_t_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_int32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_int32_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int32_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_int32_t_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_int32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceLong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_int32_t_unbounded", type_ids_SequenceLong);
                if (return_code_SequenceLong != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_int32_t_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_sequence_long = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_sequence_long;
            MemberId member_id_var_sequence_long = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceLong.type_identifier1()._d() || TK_NONE == type_ids_SequenceLong.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceLong.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceLong.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceLong.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceLong.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceLong.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceLong.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceLong.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceLong.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceLong.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceLong.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceLong.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceLong.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceLong.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceLong.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_long = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_long, member_flags_var_sequence_long, type_ids_SequenceLong.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceLong.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceLong.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceLong.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceLong.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceLong.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceLong.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceLong.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceLong.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceLong.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceLong.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceLong.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceLong.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceLong.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceLong.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceLong.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_long = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_long, member_flags_var_sequence_long, type_ids_SequenceLong.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_sequence_long member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_sequence_long = "var_sequence_long";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_sequence_long;
            ann_custom_SequenceLong.reset();
            CompleteMemberDetail detail_var_sequence_long = TypeObjectUtils::build_complete_member_detail(name_var_sequence_long, member_ann_builtin_var_sequence_long, ann_custom_SequenceLong);
            CompleteStructMember member_var_sequence_long = TypeObjectUtils::build_complete_struct_member(common_var_sequence_long, detail_var_sequence_long);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceLong, member_var_sequence_long);
        }
        CompleteStructType struct_type_SequenceLong = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceLong, header_SequenceLong, member_seq_SequenceLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceLong, type_name_SequenceLong.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceLong already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceLong =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceLong", type_ids_SequenceLong);
        if (return_code_SequenceLong != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceLong: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SequenceULong_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceULong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceULong;
        TypeIdentifierPair type_ids_SequenceULong;
        QualifiedTypeName type_name_SequenceULong = "SequenceULong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceULong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceULong;
        CompleteTypeDetail detail_SequenceULong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceULong, ann_custom_SequenceULong, type_name_SequenceULong.to_string());
        CompleteStructHeader header_SequenceULong;
        header_SequenceULong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceULong);
        CompleteStructMemberSeq member_seq_SequenceULong;
        {
            return_code_SequenceULong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_uint32_t_unbounded", type_ids_SequenceULong);

            if (return_code_SequenceULong != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceULong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint32_t", type_ids_SequenceULong);

                if (return_code_SequenceULong != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_sequence_uint32_t_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_SequenceULong.type_identifier1()._d() || TK_NONE == type_ids_SequenceULong.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceULong.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceULong.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceULong.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceULong.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceULong.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceULong.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceULong.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceULong.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceULong.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceULong.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceULong.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceULong.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceULong.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceULong.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_uint32_t_unbounded = new TypeIdentifier(type_ids_SequenceULong.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceULong.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceULong.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceULong.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceULong.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceULong.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceULong.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceULong.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceULong.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceULong.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceULong.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceULong.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceULong.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceULong.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceULong.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceULong.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_uint32_t_unbounded = new TypeIdentifier(type_ids_SequenceULong.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_uint32_t_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceULong.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_uint32_t_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_uint32_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_uint32_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_uint32_t_unbounded, element_flags_anonymous_sequence_uint32_t_unbounded);
                std::string type_id_kind_anonymous_sequence_uint32_t_unbounded("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_uint32_t_unbounded == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_uint32_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_uint32_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_uint32_t_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_uint32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_uint32_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_uint32_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_uint32_t_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_uint32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceULong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_uint32_t_unbounded", type_ids_SequenceULong);
                if (return_code_SequenceULong != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_uint32_t_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_sequence_ulong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_sequence_ulong;
            MemberId member_id_var_sequence_ulong = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceULong.type_identifier1()._d() || TK_NONE == type_ids_SequenceULong.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceULong.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceULong.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceULong.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceULong.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceULong.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceULong.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceULong.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceULong.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceULong.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceULong.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceULong.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceULong.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceULong.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceULong.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_ulong = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_ulong, member_flags_var_sequence_ulong, type_ids_SequenceULong.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceULong.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceULong.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceULong.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceULong.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceULong.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceULong.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceULong.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceULong.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceULong.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceULong.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceULong.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceULong.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceULong.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceULong.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceULong.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_ulong = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_ulong, member_flags_var_sequence_ulong, type_ids_SequenceULong.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_sequence_ulong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_sequence_ulong = "var_sequence_ulong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_sequence_ulong;
            ann_custom_SequenceULong.reset();
            CompleteMemberDetail detail_var_sequence_ulong = TypeObjectUtils::build_complete_member_detail(name_var_sequence_ulong, member_ann_builtin_var_sequence_ulong, ann_custom_SequenceULong);
            CompleteStructMember member_var_sequence_ulong = TypeObjectUtils::build_complete_struct_member(common_var_sequence_ulong, detail_var_sequence_ulong);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceULong, member_var_sequence_ulong);
        }
        CompleteStructType struct_type_SequenceULong = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceULong, header_SequenceULong, member_seq_SequenceULong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceULong, type_name_SequenceULong.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceULong already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceULong =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceULong", type_ids_SequenceULong);
        if (return_code_SequenceULong != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceULong: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SequenceLongLong_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceLongLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceLongLong;
        TypeIdentifierPair type_ids_SequenceLongLong;
        QualifiedTypeName type_name_SequenceLongLong = "SequenceLongLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceLongLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceLongLong;
        CompleteTypeDetail detail_SequenceLongLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceLongLong, ann_custom_SequenceLongLong, type_name_SequenceLongLong.to_string());
        CompleteStructHeader header_SequenceLongLong;
        header_SequenceLongLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceLongLong);
        CompleteStructMemberSeq member_seq_SequenceLongLong;
        {
            return_code_SequenceLongLong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_int64_t_unbounded", type_ids_SequenceLongLong);

            if (return_code_SequenceLongLong != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceLongLong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_SequenceLongLong);

                if (return_code_SequenceLongLong != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_sequence_int64_t_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_SequenceLongLong.type_identifier1()._d() || TK_NONE == type_ids_SequenceLongLong.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceLongLong.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceLongLong.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceLongLong.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceLongLong.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceLongLong.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceLongLong.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceLongLong.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceLongLong.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceLongLong.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceLongLong.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceLongLong.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceLongLong.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceLongLong.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceLongLong.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_int64_t_unbounded = new TypeIdentifier(type_ids_SequenceLongLong.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceLongLong.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceLongLong.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceLongLong.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceLongLong.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceLongLong.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceLongLong.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceLongLong.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceLongLong.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceLongLong.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceLongLong.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceLongLong.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceLongLong.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceLongLong.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceLongLong.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceLongLong.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_int64_t_unbounded = new TypeIdentifier(type_ids_SequenceLongLong.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_int64_t_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceLongLong.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_int64_t_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_int64_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_int64_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_int64_t_unbounded, element_flags_anonymous_sequence_int64_t_unbounded);
                std::string type_id_kind_anonymous_sequence_int64_t_unbounded("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_int64_t_unbounded == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_int64_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int64_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_int64_t_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_int64_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_int64_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int64_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_int64_t_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_int64_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceLongLong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_int64_t_unbounded", type_ids_SequenceLongLong);
                if (return_code_SequenceLongLong != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_int64_t_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_sequence_longlong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_sequence_longlong;
            MemberId member_id_var_sequence_longlong = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceLongLong.type_identifier1()._d() || TK_NONE == type_ids_SequenceLongLong.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceLongLong.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceLongLong.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceLongLong.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceLongLong.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceLongLong.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceLongLong.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceLongLong.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceLongLong.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceLongLong.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceLongLong.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceLongLong.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceLongLong.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceLongLong.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceLongLong.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_longlong = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_longlong, member_flags_var_sequence_longlong, type_ids_SequenceLongLong.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceLongLong.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceLongLong.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceLongLong.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceLongLong.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceLongLong.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceLongLong.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceLongLong.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceLongLong.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceLongLong.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceLongLong.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceLongLong.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceLongLong.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceLongLong.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceLongLong.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceLongLong.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_longlong = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_longlong, member_flags_var_sequence_longlong, type_ids_SequenceLongLong.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_sequence_longlong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_sequence_longlong = "var_sequence_longlong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_sequence_longlong;
            ann_custom_SequenceLongLong.reset();
            CompleteMemberDetail detail_var_sequence_longlong = TypeObjectUtils::build_complete_member_detail(name_var_sequence_longlong, member_ann_builtin_var_sequence_longlong, ann_custom_SequenceLongLong);
            CompleteStructMember member_var_sequence_longlong = TypeObjectUtils::build_complete_struct_member(common_var_sequence_longlong, detail_var_sequence_longlong);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceLongLong, member_var_sequence_longlong);
        }
        CompleteStructType struct_type_SequenceLongLong = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceLongLong, header_SequenceLongLong, member_seq_SequenceLongLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceLongLong, type_name_SequenceLongLong.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceLongLong already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceLongLong =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceLongLong", type_ids_SequenceLongLong);
        if (return_code_SequenceLongLong != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceLongLong: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SequenceULongLong_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceULongLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceULongLong;
        TypeIdentifierPair type_ids_SequenceULongLong;
        QualifiedTypeName type_name_SequenceULongLong = "SequenceULongLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceULongLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceULongLong;
        CompleteTypeDetail detail_SequenceULongLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceULongLong, ann_custom_SequenceULongLong, type_name_SequenceULongLong.to_string());
        CompleteStructHeader header_SequenceULongLong;
        header_SequenceULongLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceULongLong);
        CompleteStructMemberSeq member_seq_SequenceULongLong;
        {
            return_code_SequenceULongLong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_uint64_t_unbounded", type_ids_SequenceULongLong);

            if (return_code_SequenceULongLong != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceULongLong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_SequenceULongLong);

                if (return_code_SequenceULongLong != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_sequence_uint64_t_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_SequenceULongLong.type_identifier1()._d() || TK_NONE == type_ids_SequenceULongLong.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceULongLong.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceULongLong.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceULongLong.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceULongLong.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceULongLong.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceULongLong.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceULongLong.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceULongLong.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceULongLong.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceULongLong.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceULongLong.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceULongLong.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceULongLong.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceULongLong.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_uint64_t_unbounded = new TypeIdentifier(type_ids_SequenceULongLong.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceULongLong.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceULongLong.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceULongLong.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceULongLong.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceULongLong.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceULongLong.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceULongLong.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceULongLong.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceULongLong.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceULongLong.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceULongLong.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceULongLong.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceULongLong.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceULongLong.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceULongLong.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_uint64_t_unbounded = new TypeIdentifier(type_ids_SequenceULongLong.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_uint64_t_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceULongLong.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_uint64_t_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_uint64_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_uint64_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_uint64_t_unbounded, element_flags_anonymous_sequence_uint64_t_unbounded);
                std::string type_id_kind_anonymous_sequence_uint64_t_unbounded("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_uint64_t_unbounded == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_uint64_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_uint64_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_uint64_t_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_uint64_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_uint64_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_uint64_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_uint64_t_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_uint64_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceULongLong =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_uint64_t_unbounded", type_ids_SequenceULongLong);
                if (return_code_SequenceULongLong != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_uint64_t_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_sequence_ulonglong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_sequence_ulonglong;
            MemberId member_id_var_sequence_ulonglong = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceULongLong.type_identifier1()._d() || TK_NONE == type_ids_SequenceULongLong.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceULongLong.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceULongLong.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceULongLong.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceULongLong.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceULongLong.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceULongLong.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceULongLong.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceULongLong.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceULongLong.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceULongLong.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceULongLong.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceULongLong.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceULongLong.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceULongLong.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_ulonglong = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_ulonglong, member_flags_var_sequence_ulonglong, type_ids_SequenceULongLong.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceULongLong.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceULongLong.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceULongLong.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceULongLong.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceULongLong.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceULongLong.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceULongLong.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceULongLong.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceULongLong.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceULongLong.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceULongLong.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceULongLong.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceULongLong.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceULongLong.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceULongLong.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_ulonglong = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_ulonglong, member_flags_var_sequence_ulonglong, type_ids_SequenceULongLong.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_sequence_ulonglong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_sequence_ulonglong = "var_sequence_ulonglong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_sequence_ulonglong;
            ann_custom_SequenceULongLong.reset();
            CompleteMemberDetail detail_var_sequence_ulonglong = TypeObjectUtils::build_complete_member_detail(name_var_sequence_ulonglong, member_ann_builtin_var_sequence_ulonglong, ann_custom_SequenceULongLong);
            CompleteStructMember member_var_sequence_ulonglong = TypeObjectUtils::build_complete_struct_member(common_var_sequence_ulonglong, detail_var_sequence_ulonglong);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceULongLong, member_var_sequence_ulonglong);
        }
        CompleteStructType struct_type_SequenceULongLong = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceULongLong, header_SequenceULongLong, member_seq_SequenceULongLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceULongLong, type_name_SequenceULongLong.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceULongLong already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceULongLong =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceULongLong", type_ids_SequenceULongLong);
        if (return_code_SequenceULongLong != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceULongLong: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SequenceFloat_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceFloat = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceFloat;
        TypeIdentifierPair type_ids_SequenceFloat;
        QualifiedTypeName type_name_SequenceFloat = "SequenceFloat";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceFloat;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceFloat;
        CompleteTypeDetail detail_SequenceFloat = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceFloat, ann_custom_SequenceFloat, type_name_SequenceFloat.to_string());
        CompleteStructHeader header_SequenceFloat;
        header_SequenceFloat = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceFloat);
        CompleteStructMemberSeq member_seq_SequenceFloat;
        {
            return_code_SequenceFloat =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_float_unbounded", type_ids_SequenceFloat);

            if (return_code_SequenceFloat != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceFloat =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_float", type_ids_SequenceFloat);

                if (return_code_SequenceFloat != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_sequence_float_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_SequenceFloat.type_identifier1()._d() || TK_NONE == type_ids_SequenceFloat.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceFloat.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceFloat.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceFloat.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceFloat.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceFloat.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceFloat.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceFloat.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceFloat.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceFloat.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceFloat.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceFloat.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceFloat.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceFloat.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceFloat.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_float_unbounded = new TypeIdentifier(type_ids_SequenceFloat.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceFloat.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceFloat.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceFloat.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceFloat.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceFloat.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceFloat.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceFloat.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceFloat.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceFloat.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceFloat.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceFloat.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceFloat.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceFloat.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceFloat.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceFloat.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_float_unbounded = new TypeIdentifier(type_ids_SequenceFloat.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_float_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceFloat.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_float_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_float_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_float_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_float_unbounded, element_flags_anonymous_sequence_float_unbounded);
                std::string type_id_kind_anonymous_sequence_float_unbounded("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_float_unbounded == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_float_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_float_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_float_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_float_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_float_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_float_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_float_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_float_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceFloat =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_float_unbounded", type_ids_SequenceFloat);
                if (return_code_SequenceFloat != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_float_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_sequence_float = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_sequence_float;
            MemberId member_id_var_sequence_float = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceFloat.type_identifier1()._d() || TK_NONE == type_ids_SequenceFloat.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceFloat.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceFloat.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceFloat.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceFloat.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceFloat.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceFloat.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceFloat.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceFloat.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceFloat.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceFloat.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceFloat.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceFloat.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceFloat.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceFloat.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_float = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_float, member_flags_var_sequence_float, type_ids_SequenceFloat.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceFloat.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceFloat.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceFloat.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceFloat.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceFloat.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceFloat.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceFloat.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceFloat.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceFloat.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceFloat.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceFloat.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceFloat.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceFloat.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceFloat.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceFloat.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_float = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_float, member_flags_var_sequence_float, type_ids_SequenceFloat.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_sequence_float member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_sequence_float = "var_sequence_float";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_sequence_float;
            ann_custom_SequenceFloat.reset();
            CompleteMemberDetail detail_var_sequence_float = TypeObjectUtils::build_complete_member_detail(name_var_sequence_float, member_ann_builtin_var_sequence_float, ann_custom_SequenceFloat);
            CompleteStructMember member_var_sequence_float = TypeObjectUtils::build_complete_struct_member(common_var_sequence_float, detail_var_sequence_float);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceFloat, member_var_sequence_float);
        }
        CompleteStructType struct_type_SequenceFloat = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceFloat, header_SequenceFloat, member_seq_SequenceFloat);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceFloat, type_name_SequenceFloat.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceFloat already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceFloat =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceFloat", type_ids_SequenceFloat);
        if (return_code_SequenceFloat != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceFloat: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SequenceDouble_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceDouble = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceDouble;
        TypeIdentifierPair type_ids_SequenceDouble;
        QualifiedTypeName type_name_SequenceDouble = "SequenceDouble";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceDouble;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceDouble;
        CompleteTypeDetail detail_SequenceDouble = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceDouble, ann_custom_SequenceDouble, type_name_SequenceDouble.to_string());
        CompleteStructHeader header_SequenceDouble;
        header_SequenceDouble = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceDouble);
        CompleteStructMemberSeq member_seq_SequenceDouble;
        {
            return_code_SequenceDouble =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_double_unbounded", type_ids_SequenceDouble);

            if (return_code_SequenceDouble != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceDouble =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_double", type_ids_SequenceDouble);

                if (return_code_SequenceDouble != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_sequence_double_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_SequenceDouble.type_identifier1()._d() || TK_NONE == type_ids_SequenceDouble.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceDouble.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceDouble.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceDouble.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceDouble.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceDouble.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceDouble.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceDouble.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceDouble.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceDouble.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceDouble.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceDouble.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceDouble.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceDouble.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceDouble.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_double_unbounded = new TypeIdentifier(type_ids_SequenceDouble.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceDouble.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceDouble.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceDouble.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceDouble.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceDouble.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceDouble.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceDouble.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceDouble.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceDouble.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceDouble.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceDouble.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceDouble.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceDouble.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceDouble.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceDouble.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_double_unbounded = new TypeIdentifier(type_ids_SequenceDouble.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_double_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceDouble.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_double_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_double_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_double_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_double_unbounded, element_flags_anonymous_sequence_double_unbounded);
                std::string type_id_kind_anonymous_sequence_double_unbounded("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_double_unbounded == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_double_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_double_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_double_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_double_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_double_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_double_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_double_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_double_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceDouble =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_double_unbounded", type_ids_SequenceDouble);
                if (return_code_SequenceDouble != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_double_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_sequence_double = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_sequence_double;
            MemberId member_id_var_sequence_double = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceDouble.type_identifier1()._d() || TK_NONE == type_ids_SequenceDouble.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceDouble.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceDouble.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceDouble.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceDouble.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceDouble.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceDouble.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceDouble.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceDouble.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceDouble.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceDouble.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceDouble.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceDouble.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceDouble.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceDouble.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_double = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_double, member_flags_var_sequence_double, type_ids_SequenceDouble.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceDouble.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceDouble.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceDouble.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceDouble.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceDouble.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceDouble.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceDouble.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceDouble.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceDouble.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceDouble.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceDouble.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceDouble.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceDouble.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceDouble.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceDouble.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_double = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_double, member_flags_var_sequence_double, type_ids_SequenceDouble.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_sequence_double member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_sequence_double = "var_sequence_double";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_sequence_double;
            ann_custom_SequenceDouble.reset();
            CompleteMemberDetail detail_var_sequence_double = TypeObjectUtils::build_complete_member_detail(name_var_sequence_double, member_ann_builtin_var_sequence_double, ann_custom_SequenceDouble);
            CompleteStructMember member_var_sequence_double = TypeObjectUtils::build_complete_struct_member(common_var_sequence_double, detail_var_sequence_double);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceDouble, member_var_sequence_double);
        }
        CompleteStructType struct_type_SequenceDouble = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceDouble, header_SequenceDouble, member_seq_SequenceDouble);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceDouble, type_name_SequenceDouble.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceDouble already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceDouble =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceDouble", type_ids_SequenceDouble);
        if (return_code_SequenceDouble != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceDouble: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SequenceLongDouble_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceLongDouble = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceLongDouble;
        TypeIdentifierPair type_ids_SequenceLongDouble;
        QualifiedTypeName type_name_SequenceLongDouble = "SequenceLongDouble";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceLongDouble;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceLongDouble;
        CompleteTypeDetail detail_SequenceLongDouble = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceLongDouble, ann_custom_SequenceLongDouble, type_name_SequenceLongDouble.to_string());
        CompleteStructHeader header_SequenceLongDouble;
        header_SequenceLongDouble = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceLongDouble);
        CompleteStructMemberSeq member_seq_SequenceLongDouble;
        {
            return_code_SequenceLongDouble =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_longdouble_unbounded", type_ids_SequenceLongDouble);

            if (return_code_SequenceLongDouble != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceLongDouble =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_longdouble", type_ids_SequenceLongDouble);

                if (return_code_SequenceLongDouble != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_sequence_longdouble_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier1()._d() || TK_NONE == type_ids_SequenceLongDouble.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceLongDouble.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceLongDouble.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceLongDouble.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceLongDouble.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceLongDouble.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceLongDouble.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_longdouble_unbounded = new TypeIdentifier(type_ids_SequenceLongDouble.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceLongDouble.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceLongDouble.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceLongDouble.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceLongDouble.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceLongDouble.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceLongDouble.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_longdouble_unbounded = new TypeIdentifier(type_ids_SequenceLongDouble.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_longdouble_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceLongDouble.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_longdouble_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_longdouble_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_longdouble_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_longdouble_unbounded, element_flags_anonymous_sequence_longdouble_unbounded);
                std::string type_id_kind_anonymous_sequence_longdouble_unbounded("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_longdouble_unbounded == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_longdouble_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_longdouble_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_longdouble_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_longdouble_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_longdouble_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_longdouble_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_longdouble_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_longdouble_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceLongDouble =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_longdouble_unbounded", type_ids_SequenceLongDouble);
                if (return_code_SequenceLongDouble != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_longdouble_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_sequence_longdouble = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_sequence_longdouble;
            MemberId member_id_var_sequence_longdouble = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier1()._d() || TK_NONE == type_ids_SequenceLongDouble.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceLongDouble.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceLongDouble.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceLongDouble.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceLongDouble.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceLongDouble.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceLongDouble.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_longdouble = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_longdouble, member_flags_var_sequence_longdouble, type_ids_SequenceLongDouble.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceLongDouble.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceLongDouble.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceLongDouble.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceLongDouble.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceLongDouble.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceLongDouble.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceLongDouble.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_longdouble = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_longdouble, member_flags_var_sequence_longdouble, type_ids_SequenceLongDouble.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_sequence_longdouble member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_sequence_longdouble = "var_sequence_longdouble";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_sequence_longdouble;
            ann_custom_SequenceLongDouble.reset();
            CompleteMemberDetail detail_var_sequence_longdouble = TypeObjectUtils::build_complete_member_detail(name_var_sequence_longdouble, member_ann_builtin_var_sequence_longdouble, ann_custom_SequenceLongDouble);
            CompleteStructMember member_var_sequence_longdouble = TypeObjectUtils::build_complete_struct_member(common_var_sequence_longdouble, detail_var_sequence_longdouble);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceLongDouble, member_var_sequence_longdouble);
        }
        CompleteStructType struct_type_SequenceLongDouble = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceLongDouble, header_SequenceLongDouble, member_seq_SequenceLongDouble);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceLongDouble, type_name_SequenceLongDouble.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceLongDouble already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceLongDouble =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceLongDouble", type_ids_SequenceLongDouble);
        if (return_code_SequenceLongDouble != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceLongDouble: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SequenceBoolean_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceBoolean = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceBoolean;
        TypeIdentifierPair type_ids_SequenceBoolean;
        QualifiedTypeName type_name_SequenceBoolean = "SequenceBoolean";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceBoolean;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceBoolean;
        CompleteTypeDetail detail_SequenceBoolean = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceBoolean, ann_custom_SequenceBoolean, type_name_SequenceBoolean.to_string());
        CompleteStructHeader header_SequenceBoolean;
        header_SequenceBoolean = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceBoolean);
        CompleteStructMemberSeq member_seq_SequenceBoolean;
        {
            return_code_SequenceBoolean =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_bool_unbounded", type_ids_SequenceBoolean);

            if (return_code_SequenceBoolean != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceBoolean =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_bool", type_ids_SequenceBoolean);

                if (return_code_SequenceBoolean != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_sequence_bool_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_SequenceBoolean.type_identifier1()._d() || TK_NONE == type_ids_SequenceBoolean.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceBoolean.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceBoolean.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceBoolean.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceBoolean.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceBoolean.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceBoolean.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceBoolean.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceBoolean.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceBoolean.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceBoolean.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceBoolean.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceBoolean.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceBoolean.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceBoolean.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_bool_unbounded = new TypeIdentifier(type_ids_SequenceBoolean.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceBoolean.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceBoolean.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceBoolean.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceBoolean.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceBoolean.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceBoolean.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceBoolean.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceBoolean.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceBoolean.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceBoolean.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceBoolean.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceBoolean.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceBoolean.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceBoolean.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceBoolean.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_bool_unbounded = new TypeIdentifier(type_ids_SequenceBoolean.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_bool_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceBoolean.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_bool_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_bool_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_bool_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_bool_unbounded, element_flags_anonymous_sequence_bool_unbounded);
                std::string type_id_kind_anonymous_sequence_bool_unbounded("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_bool_unbounded == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_bool_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_bool_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_bool_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_bool_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_bool_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_bool_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_bool_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_bool_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceBoolean =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_bool_unbounded", type_ids_SequenceBoolean);
                if (return_code_SequenceBoolean != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_bool_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_sequence_boolean = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_sequence_boolean;
            MemberId member_id_var_sequence_boolean = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceBoolean.type_identifier1()._d() || TK_NONE == type_ids_SequenceBoolean.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceBoolean.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceBoolean.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceBoolean.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceBoolean.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceBoolean.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceBoolean.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceBoolean.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceBoolean.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceBoolean.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceBoolean.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceBoolean.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceBoolean.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceBoolean.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceBoolean.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_boolean = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_boolean, member_flags_var_sequence_boolean, type_ids_SequenceBoolean.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceBoolean.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceBoolean.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceBoolean.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceBoolean.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceBoolean.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceBoolean.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceBoolean.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceBoolean.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceBoolean.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceBoolean.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceBoolean.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceBoolean.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceBoolean.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceBoolean.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceBoolean.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_boolean = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_boolean, member_flags_var_sequence_boolean, type_ids_SequenceBoolean.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_sequence_boolean member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_sequence_boolean = "var_sequence_boolean";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_sequence_boolean;
            ann_custom_SequenceBoolean.reset();
            CompleteMemberDetail detail_var_sequence_boolean = TypeObjectUtils::build_complete_member_detail(name_var_sequence_boolean, member_ann_builtin_var_sequence_boolean, ann_custom_SequenceBoolean);
            CompleteStructMember member_var_sequence_boolean = TypeObjectUtils::build_complete_struct_member(common_var_sequence_boolean, detail_var_sequence_boolean);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceBoolean, member_var_sequence_boolean);
        }
        CompleteStructType struct_type_SequenceBoolean = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceBoolean, header_SequenceBoolean, member_seq_SequenceBoolean);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceBoolean, type_name_SequenceBoolean.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceBoolean already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceBoolean =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceBoolean", type_ids_SequenceBoolean);
        if (return_code_SequenceBoolean != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceBoolean: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SequenceOctet_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceOctet = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceOctet;
        TypeIdentifierPair type_ids_SequenceOctet;
        QualifiedTypeName type_name_SequenceOctet = "SequenceOctet";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceOctet;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceOctet;
        CompleteTypeDetail detail_SequenceOctet = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceOctet, ann_custom_SequenceOctet, type_name_SequenceOctet.to_string());
        CompleteStructHeader header_SequenceOctet;
        header_SequenceOctet = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceOctet);
        CompleteStructMemberSeq member_seq_SequenceOctet;
        {
            return_code_SequenceOctet =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_uint8_t_unbounded", type_ids_SequenceOctet);

            if (return_code_SequenceOctet != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceOctet =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_byte", type_ids_SequenceOctet);

                if (return_code_SequenceOctet != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_sequence_uint8_t_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_SequenceOctet.type_identifier1()._d() || TK_NONE == type_ids_SequenceOctet.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceOctet.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceOctet.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceOctet.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceOctet.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceOctet.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceOctet.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceOctet.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceOctet.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceOctet.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceOctet.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceOctet.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceOctet.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceOctet.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceOctet.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_uint8_t_unbounded = new TypeIdentifier(type_ids_SequenceOctet.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceOctet.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceOctet.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceOctet.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceOctet.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceOctet.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceOctet.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceOctet.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceOctet.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceOctet.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceOctet.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceOctet.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceOctet.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceOctet.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceOctet.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceOctet.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_uint8_t_unbounded = new TypeIdentifier(type_ids_SequenceOctet.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_uint8_t_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceOctet.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_uint8_t_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_uint8_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_uint8_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_uint8_t_unbounded, element_flags_anonymous_sequence_uint8_t_unbounded);
                std::string type_id_kind_anonymous_sequence_uint8_t_unbounded("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_uint8_t_unbounded == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_uint8_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_uint8_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_uint8_t_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_uint8_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_uint8_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_uint8_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_uint8_t_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_uint8_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceOctet =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_uint8_t_unbounded", type_ids_SequenceOctet);
                if (return_code_SequenceOctet != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_uint8_t_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_sequence_octet = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_sequence_octet;
            MemberId member_id_var_sequence_octet = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceOctet.type_identifier1()._d() || TK_NONE == type_ids_SequenceOctet.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceOctet.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceOctet.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceOctet.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceOctet.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceOctet.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceOctet.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceOctet.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceOctet.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceOctet.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceOctet.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceOctet.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceOctet.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceOctet.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceOctet.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_octet = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_octet, member_flags_var_sequence_octet, type_ids_SequenceOctet.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceOctet.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceOctet.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceOctet.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceOctet.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceOctet.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceOctet.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceOctet.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceOctet.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceOctet.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceOctet.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceOctet.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceOctet.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceOctet.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceOctet.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceOctet.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_octet = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_octet, member_flags_var_sequence_octet, type_ids_SequenceOctet.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_sequence_octet member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_sequence_octet = "var_sequence_octet";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_sequence_octet;
            ann_custom_SequenceOctet.reset();
            CompleteMemberDetail detail_var_sequence_octet = TypeObjectUtils::build_complete_member_detail(name_var_sequence_octet, member_ann_builtin_var_sequence_octet, ann_custom_SequenceOctet);
            CompleteStructMember member_var_sequence_octet = TypeObjectUtils::build_complete_struct_member(common_var_sequence_octet, detail_var_sequence_octet);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceOctet, member_var_sequence_octet);
        }
        CompleteStructType struct_type_SequenceOctet = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceOctet, header_SequenceOctet, member_seq_SequenceOctet);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceOctet, type_name_SequenceOctet.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceOctet already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceOctet =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceOctet", type_ids_SequenceOctet);
        if (return_code_SequenceOctet != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceOctet: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SequenceChar_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceChar = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceChar;
        TypeIdentifierPair type_ids_SequenceChar;
        QualifiedTypeName type_name_SequenceChar = "SequenceChar";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceChar;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceChar;
        CompleteTypeDetail detail_SequenceChar = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceChar, ann_custom_SequenceChar, type_name_SequenceChar.to_string());
        CompleteStructHeader header_SequenceChar;
        header_SequenceChar = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceChar);
        CompleteStructMemberSeq member_seq_SequenceChar;
        {
            return_code_SequenceChar =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_char_unbounded", type_ids_SequenceChar);

            if (return_code_SequenceChar != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceChar =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_char", type_ids_SequenceChar);

                if (return_code_SequenceChar != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_sequence_char_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_SequenceChar.type_identifier1()._d() || TK_NONE == type_ids_SequenceChar.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceChar.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceChar.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceChar.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceChar.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceChar.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceChar.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceChar.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceChar.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceChar.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceChar.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceChar.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceChar.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceChar.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceChar.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_char_unbounded = new TypeIdentifier(type_ids_SequenceChar.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceChar.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceChar.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceChar.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceChar.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceChar.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceChar.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceChar.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceChar.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceChar.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceChar.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceChar.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceChar.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceChar.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceChar.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceChar.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_char_unbounded = new TypeIdentifier(type_ids_SequenceChar.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_char_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceChar.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_char_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_char_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_char_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_char_unbounded, element_flags_anonymous_sequence_char_unbounded);
                std::string type_id_kind_anonymous_sequence_char_unbounded("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_char_unbounded == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_char_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_char_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_char_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_char_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_char_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_char_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_char_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_char_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceChar =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_char_unbounded", type_ids_SequenceChar);
                if (return_code_SequenceChar != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_char_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_sequence_char = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_sequence_char;
            MemberId member_id_var_sequence_char = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceChar.type_identifier1()._d() || TK_NONE == type_ids_SequenceChar.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceChar.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceChar.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceChar.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceChar.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceChar.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceChar.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceChar.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceChar.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceChar.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceChar.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceChar.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceChar.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceChar.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceChar.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_char = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_char, member_flags_var_sequence_char, type_ids_SequenceChar.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceChar.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceChar.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceChar.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceChar.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceChar.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceChar.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceChar.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceChar.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceChar.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceChar.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceChar.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceChar.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceChar.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceChar.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceChar.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_char = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_char, member_flags_var_sequence_char, type_ids_SequenceChar.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_sequence_char member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_sequence_char = "var_sequence_char";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_sequence_char;
            ann_custom_SequenceChar.reset();
            CompleteMemberDetail detail_var_sequence_char = TypeObjectUtils::build_complete_member_detail(name_var_sequence_char, member_ann_builtin_var_sequence_char, ann_custom_SequenceChar);
            CompleteStructMember member_var_sequence_char = TypeObjectUtils::build_complete_struct_member(common_var_sequence_char, detail_var_sequence_char);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceChar, member_var_sequence_char);
        }
        CompleteStructType struct_type_SequenceChar = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceChar, header_SequenceChar, member_seq_SequenceChar);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceChar, type_name_SequenceChar.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceChar already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceChar =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceChar", type_ids_SequenceChar);
        if (return_code_SequenceChar != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceChar: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SequenceWChar_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceWChar = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceWChar;
        TypeIdentifierPair type_ids_SequenceWChar;
        QualifiedTypeName type_name_SequenceWChar = "SequenceWChar";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceWChar;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceWChar;
        CompleteTypeDetail detail_SequenceWChar = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceWChar, ann_custom_SequenceWChar, type_name_SequenceWChar.to_string());
        CompleteStructHeader header_SequenceWChar;
        header_SequenceWChar = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceWChar);
        CompleteStructMemberSeq member_seq_SequenceWChar;
        {
            return_code_SequenceWChar =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_wchar_t_unbounded", type_ids_SequenceWChar);

            if (return_code_SequenceWChar != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceWChar =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_wchar_t", type_ids_SequenceWChar);

                if (return_code_SequenceWChar != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_sequence_wchar_t_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_SequenceWChar.type_identifier1()._d() || TK_NONE == type_ids_SequenceWChar.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceWChar.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceWChar.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceWChar.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceWChar.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceWChar.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceWChar.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceWChar.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceWChar.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceWChar.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceWChar.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceWChar.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceWChar.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceWChar.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceWChar.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_wchar_t_unbounded = new TypeIdentifier(type_ids_SequenceWChar.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceWChar.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceWChar.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceWChar.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceWChar.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceWChar.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceWChar.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceWChar.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceWChar.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceWChar.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceWChar.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceWChar.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceWChar.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceWChar.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceWChar.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceWChar.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_wchar_t_unbounded = new TypeIdentifier(type_ids_SequenceWChar.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_wchar_t_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceWChar.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_wchar_t_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_wchar_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_wchar_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_wchar_t_unbounded, element_flags_anonymous_sequence_wchar_t_unbounded);
                std::string type_id_kind_anonymous_sequence_wchar_t_unbounded("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_wchar_t_unbounded == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_wchar_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_wchar_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_wchar_t_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_wchar_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_wchar_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_wchar_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_wchar_t_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_wchar_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceWChar =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_wchar_t_unbounded", type_ids_SequenceWChar);
                if (return_code_SequenceWChar != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_wchar_t_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_sequence_wchar = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_sequence_wchar;
            MemberId member_id_var_sequence_wchar = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceWChar.type_identifier1()._d() || TK_NONE == type_ids_SequenceWChar.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceWChar.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceWChar.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceWChar.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceWChar.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceWChar.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceWChar.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceWChar.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceWChar.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceWChar.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceWChar.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceWChar.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceWChar.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceWChar.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceWChar.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_wchar = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_wchar, member_flags_var_sequence_wchar, type_ids_SequenceWChar.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceWChar.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceWChar.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceWChar.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceWChar.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceWChar.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceWChar.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceWChar.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceWChar.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceWChar.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceWChar.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceWChar.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceWChar.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceWChar.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceWChar.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceWChar.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_wchar = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_wchar, member_flags_var_sequence_wchar, type_ids_SequenceWChar.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_sequence_wchar member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_sequence_wchar = "var_sequence_wchar";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_sequence_wchar;
            ann_custom_SequenceWChar.reset();
            CompleteMemberDetail detail_var_sequence_wchar = TypeObjectUtils::build_complete_member_detail(name_var_sequence_wchar, member_ann_builtin_var_sequence_wchar, ann_custom_SequenceWChar);
            CompleteStructMember member_var_sequence_wchar = TypeObjectUtils::build_complete_struct_member(common_var_sequence_wchar, detail_var_sequence_wchar);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceWChar, member_var_sequence_wchar);
        }
        CompleteStructType struct_type_SequenceWChar = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceWChar, header_SequenceWChar, member_seq_SequenceWChar);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceWChar, type_name_SequenceWChar.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceWChar already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceWChar =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceWChar", type_ids_SequenceWChar);
        if (return_code_SequenceWChar != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceWChar: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SequenceString_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceString = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceString;
        TypeIdentifierPair type_ids_SequenceString;
        QualifiedTypeName type_name_SequenceString = "SequenceString";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceString;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceString;
        CompleteTypeDetail detail_SequenceString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceString, ann_custom_SequenceString, type_name_SequenceString.to_string());
        CompleteStructHeader header_SequenceString;
        header_SequenceString = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceString);
        CompleteStructMemberSeq member_seq_SequenceString;
        {
            return_code_SequenceString =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_anonymous_string_unbounded_unbounded", type_ids_SequenceString);

            if (return_code_SequenceString != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceString =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_SequenceString);

                if (return_code_SequenceString != eprosima::fastdds::dds::RETCODE_OK)
                {
                    std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                    if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                    {
                        LBound bound = 255;
                        StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                "anonymous_string_unbounded"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_string_unbounded: Unknown String kind.");
                        return;
                    }
                    return_code_SequenceString =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_string_unbounded", type_ids_SequenceString);
                    if (return_code_SequenceString != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                TypeIdentifier* element_identifier_anonymous_sequence_anonymous_string_unbounded_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_SequenceString.type_identifier1()._d() || TK_NONE == type_ids_SequenceString.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceString.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceString.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceString.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceString.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceString.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceString.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceString.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceString.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceString.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceString.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceString.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceString.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceString.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceString.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_anonymous_string_unbounded_unbounded = new TypeIdentifier(type_ids_SequenceString.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceString.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceString.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceString.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceString.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceString.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceString.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceString.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceString.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceString.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceString.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceString.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceString.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceString.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceString.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceString.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_anonymous_string_unbounded_unbounded = new TypeIdentifier(type_ids_SequenceString.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_anonymous_string_unbounded_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceString.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_anonymous_string_unbounded_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_anonymous_string_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_anonymous_string_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_anonymous_string_unbounded_unbounded, element_flags_anonymous_sequence_anonymous_string_unbounded_unbounded);
                std::string type_id_kind_anonymous_sequence_anonymous_string_unbounded_unbounded("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_anonymous_string_unbounded_unbounded == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_anonymous_string_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_anonymous_string_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_anonymous_string_unbounded_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_anonymous_string_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_anonymous_string_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_anonymous_string_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_anonymous_string_unbounded_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_anonymous_string_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceString =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_anonymous_string_unbounded_unbounded", type_ids_SequenceString);
                if (return_code_SequenceString != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_anonymous_string_unbounded_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_sequence_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_sequence_string;
            MemberId member_id_var_sequence_string = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceString.type_identifier1()._d() || TK_NONE == type_ids_SequenceString.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceString.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceString.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceString.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceString.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceString.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceString.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceString.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceString.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceString.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceString.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceString.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceString.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceString.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceString.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_string = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_string, member_flags_var_sequence_string, type_ids_SequenceString.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceString.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceString.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceString.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceString.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceString.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceString.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceString.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceString.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceString.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceString.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceString.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceString.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceString.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceString.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceString.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_string = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_string, member_flags_var_sequence_string, type_ids_SequenceString.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_sequence_string member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_sequence_string = "var_sequence_string";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_sequence_string;
            ann_custom_SequenceString.reset();
            CompleteMemberDetail detail_var_sequence_string = TypeObjectUtils::build_complete_member_detail(name_var_sequence_string, member_ann_builtin_var_sequence_string, ann_custom_SequenceString);
            CompleteStructMember member_var_sequence_string = TypeObjectUtils::build_complete_struct_member(common_var_sequence_string, detail_var_sequence_string);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceString, member_var_sequence_string);
        }
        CompleteStructType struct_type_SequenceString = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceString, header_SequenceString, member_seq_SequenceString);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceString, type_name_SequenceString.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceString already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceString =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceString", type_ids_SequenceString);
        if (return_code_SequenceString != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceString: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SequenceWString_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceWString = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceWString;
        TypeIdentifierPair type_ids_SequenceWString;
        QualifiedTypeName type_name_SequenceWString = "SequenceWString";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceWString;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceWString;
        CompleteTypeDetail detail_SequenceWString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceWString, ann_custom_SequenceWString, type_name_SequenceWString.to_string());
        CompleteStructHeader header_SequenceWString;
        header_SequenceWString = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceWString);
        CompleteStructMemberSeq member_seq_SequenceWString;
        {
            return_code_SequenceWString =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_anonymous_wstring_unbounded_unbounded", type_ids_SequenceWString);

            if (return_code_SequenceWString != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceWString =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_SequenceWString);

                if (return_code_SequenceWString != eprosima::fastdds::dds::RETCODE_OK)
                {
                    std::string type_id_kind_anonymous_wstring_unbounded("TI_STRING16_SMALL");
                    if (type_id_kind_anonymous_wstring_unbounded == "TI_STRING16_SMALL")
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_unbounded", true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else if (type_id_kind_anonymous_wstring_unbounded == "TI_STRING16_LARGE")
                    {
                        LBound bound = 255;
                        StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                "anonymous_wstring_unbounded", true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_wstring_unbounded: Unknown WString kind.");
                        return;
                    }
                    return_code_SequenceWString =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_wstring_unbounded", type_ids_SequenceWString);
                    if (return_code_SequenceWString != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_wstring_unbounded: Given WString TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                TypeIdentifier* element_identifier_anonymous_sequence_anonymous_wstring_unbounded_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_SequenceWString.type_identifier1()._d() || TK_NONE == type_ids_SequenceWString.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceWString.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceWString.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceWString.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceWString.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceWString.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceWString.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceWString.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceWString.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceWString.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceWString.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceWString.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceWString.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceWString.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceWString.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_anonymous_wstring_unbounded_unbounded = new TypeIdentifier(type_ids_SequenceWString.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceWString.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceWString.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceWString.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceWString.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceWString.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceWString.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceWString.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceWString.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceWString.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceWString.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceWString.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceWString.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceWString.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceWString.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceWString.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_anonymous_wstring_unbounded_unbounded = new TypeIdentifier(type_ids_SequenceWString.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_anonymous_wstring_unbounded_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceWString.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_anonymous_wstring_unbounded_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_anonymous_wstring_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_anonymous_wstring_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_anonymous_wstring_unbounded_unbounded, element_flags_anonymous_sequence_anonymous_wstring_unbounded_unbounded);
                std::string type_id_kind_anonymous_sequence_anonymous_wstring_unbounded_unbounded("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_anonymous_wstring_unbounded_unbounded == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_anonymous_wstring_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_anonymous_wstring_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_anonymous_wstring_unbounded_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_anonymous_wstring_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_anonymous_wstring_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_anonymous_wstring_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_anonymous_wstring_unbounded_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_anonymous_wstring_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceWString =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_anonymous_wstring_unbounded_unbounded", type_ids_SequenceWString);
                if (return_code_SequenceWString != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_anonymous_wstring_unbounded_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_sequence_wstring = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_sequence_wstring;
            MemberId member_id_var_sequence_wstring = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceWString.type_identifier1()._d() || TK_NONE == type_ids_SequenceWString.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceWString.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceWString.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceWString.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceWString.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceWString.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceWString.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceWString.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceWString.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceWString.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceWString.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceWString.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceWString.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceWString.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceWString.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_wstring = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_wstring, member_flags_var_sequence_wstring, type_ids_SequenceWString.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceWString.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceWString.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceWString.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceWString.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceWString.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceWString.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceWString.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceWString.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceWString.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceWString.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceWString.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceWString.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceWString.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceWString.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceWString.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_wstring = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_wstring, member_flags_var_sequence_wstring, type_ids_SequenceWString.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_sequence_wstring member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_sequence_wstring = "var_sequence_wstring";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_sequence_wstring;
            ann_custom_SequenceWString.reset();
            CompleteMemberDetail detail_var_sequence_wstring = TypeObjectUtils::build_complete_member_detail(name_var_sequence_wstring, member_ann_builtin_var_sequence_wstring, ann_custom_SequenceWString);
            CompleteStructMember member_var_sequence_wstring = TypeObjectUtils::build_complete_struct_member(common_var_sequence_wstring, detail_var_sequence_wstring);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceWString, member_var_sequence_wstring);
        }
        CompleteStructType struct_type_SequenceWString = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceWString, header_SequenceWString, member_seq_SequenceWString);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceWString, type_name_SequenceWString.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceWString already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceWString =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceWString", type_ids_SequenceWString);
        if (return_code_SequenceWString != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceWString: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SequenceStringBounded_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceStringBounded = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceStringBounded;
        TypeIdentifierPair type_ids_SequenceStringBounded;
        QualifiedTypeName type_name_SequenceStringBounded = "SequenceStringBounded";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceStringBounded;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceStringBounded;
        CompleteTypeDetail detail_SequenceStringBounded = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceStringBounded, ann_custom_SequenceStringBounded, type_name_SequenceStringBounded.to_string());
        CompleteStructHeader header_SequenceStringBounded;
        header_SequenceStringBounded = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceStringBounded);
        CompleteStructMemberSeq member_seq_SequenceStringBounded;
        {
            return_code_SequenceStringBounded =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_anonymous_string_10_unbounded", type_ids_SequenceStringBounded);

            if (return_code_SequenceStringBounded != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceStringBounded =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_SequenceStringBounded);

                if (return_code_SequenceStringBounded != eprosima::fastdds::dds::RETCODE_OK)
                {
                    AliasTypeFlag alias_flags_Inner_alias_bounded_string_helper = 0;
                    QualifiedTypeName type_name_Inner_alias_bounded_string_helper = "Inner_alias_bounded_string_helper";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Inner_alias_bounded_string_helper;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Inner_alias_bounded_string_helper;
                    CompleteTypeDetail detail_Inner_alias_bounded_string_helper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Inner_alias_bounded_string_helper, ann_custom_Inner_alias_bounded_string_helper, type_name_Inner_alias_bounded_string_helper.to_string());
                    CompleteAliasHeader header_Inner_alias_bounded_string_helper = TypeObjectUtils::build_complete_alias_header(detail_Inner_alias_bounded_string_helper);
                    AliasMemberFlag related_flags_Inner_alias_bounded_string_helper = 0;
                    return_code_SequenceStringBounded =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_string_10", type_ids_SequenceStringBounded);

                    if (return_code_SequenceStringBounded != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        std::string type_id_kind_anonymous_string_10("TI_STRING8_SMALL");
                        if (type_id_kind_anonymous_string_10 == "TI_STRING8_SMALL")
                        {
                            SBound bound = static_cast<SBound>(10);
                            StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                    "anonymous_string_10"))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_string_10 already registered in TypeObjectRegistry for a different type.");
                            }
                        }
                        else if (type_id_kind_anonymous_string_10 == "TI_STRING8_LARGE")
                        {
                            LBound bound = 10;
                            StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                    "anonymous_string_10"))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_string_10 already registered in TypeObjectRegistry for a different type.");
                            }
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_10: Unknown String kind.");
                            return;
                        }
                        return_code_SequenceStringBounded =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_string_10", type_ids_SequenceStringBounded);
                        if (return_code_SequenceStringBounded != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_10: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                    }
                    CommonAliasBody common_Inner_alias_bounded_string_helper;
                    if (EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier1()._d() || TK_NONE == type_ids_SequenceStringBounded.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceStringBounded.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceStringBounded.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceStringBounded.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceStringBounded.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_SequenceStringBounded.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_SequenceStringBounded.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_Inner_alias_bounded_string_helper = TypeObjectUtils::build_common_alias_body(related_flags_Inner_alias_bounded_string_helper, type_ids_SequenceStringBounded.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceStringBounded.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceStringBounded.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceStringBounded.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceStringBounded.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_SequenceStringBounded.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_SequenceStringBounded.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_Inner_alias_bounded_string_helper = TypeObjectUtils::build_common_alias_body(related_flags_Inner_alias_bounded_string_helper, type_ids_SequenceStringBounded.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Inner_alias_bounded_string_helper related TypeIdentifier inconsistent.");
                        return;
                    }
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Inner_alias_bounded_string_helper;
                    ann_custom_Inner_alias_bounded_string_helper.reset();
                    CompleteAliasBody body_Inner_alias_bounded_string_helper = TypeObjectUtils::build_complete_alias_body(common_Inner_alias_bounded_string_helper, member_ann_builtin_Inner_alias_bounded_string_helper, ann_custom_Inner_alias_bounded_string_helper);
                    CompleteAliasType alias_type_Inner_alias_bounded_string_helper = TypeObjectUtils::build_complete_alias_type(alias_flags_Inner_alias_bounded_string_helper, header_Inner_alias_bounded_string_helper, body_Inner_alias_bounded_string_helper);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_alias_type_object(alias_type_Inner_alias_bounded_string_helper, type_name_Inner_alias_bounded_string_helper.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Inner_alias_bounded_string_helper already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_SequenceStringBounded =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "Inner_alias_bounded_string_helper", type_ids_SequenceStringBounded);
                    if (return_code_SequenceStringBounded != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Inner_alias_bounded_string_helper: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                TypeIdentifier* element_identifier_anonymous_sequence_anonymous_string_10_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier1()._d() || TK_NONE == type_ids_SequenceStringBounded.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceStringBounded.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceStringBounded.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceStringBounded.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceStringBounded.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceStringBounded.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceStringBounded.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_anonymous_string_10_unbounded = new TypeIdentifier(type_ids_SequenceStringBounded.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceStringBounded.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceStringBounded.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceStringBounded.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceStringBounded.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceStringBounded.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceStringBounded.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_anonymous_string_10_unbounded = new TypeIdentifier(type_ids_SequenceStringBounded.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_anonymous_string_10_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceStringBounded.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_anonymous_string_10_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_anonymous_string_10_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_anonymous_string_10_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_anonymous_string_10_unbounded, element_flags_anonymous_sequence_anonymous_string_10_unbounded);
                std::string type_id_kind_anonymous_sequence_anonymous_string_10_unbounded("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_anonymous_string_10_unbounded == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_anonymous_string_10_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_anonymous_string_10_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_anonymous_string_10_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_anonymous_string_10_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_anonymous_string_10_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_anonymous_string_10_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_anonymous_string_10_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_anonymous_string_10_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceStringBounded =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_anonymous_string_10_unbounded", type_ids_SequenceStringBounded);
                if (return_code_SequenceStringBounded != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_anonymous_string_10_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_sequence_bounded_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_sequence_bounded_string;
            MemberId member_id_var_sequence_bounded_string = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier1()._d() || TK_NONE == type_ids_SequenceStringBounded.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceStringBounded.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceStringBounded.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceStringBounded.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceStringBounded.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceStringBounded.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceStringBounded.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_bounded_string = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_bounded_string, member_flags_var_sequence_bounded_string, type_ids_SequenceStringBounded.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceStringBounded.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceStringBounded.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceStringBounded.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceStringBounded.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceStringBounded.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceStringBounded.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceStringBounded.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_bounded_string = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_bounded_string, member_flags_var_sequence_bounded_string, type_ids_SequenceStringBounded.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_sequence_bounded_string member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_sequence_bounded_string = "var_sequence_bounded_string";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_sequence_bounded_string;
            ann_custom_SequenceStringBounded.reset();
            CompleteMemberDetail detail_var_sequence_bounded_string = TypeObjectUtils::build_complete_member_detail(name_var_sequence_bounded_string, member_ann_builtin_var_sequence_bounded_string, ann_custom_SequenceStringBounded);
            CompleteStructMember member_var_sequence_bounded_string = TypeObjectUtils::build_complete_struct_member(common_var_sequence_bounded_string, detail_var_sequence_bounded_string);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceStringBounded, member_var_sequence_bounded_string);
        }
        CompleteStructType struct_type_SequenceStringBounded = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceStringBounded, header_SequenceStringBounded, member_seq_SequenceStringBounded);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceStringBounded, type_name_SequenceStringBounded.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceStringBounded already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceStringBounded =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceStringBounded", type_ids_SequenceStringBounded);
        if (return_code_SequenceStringBounded != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceStringBounded: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SequenceWStringBounded_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceWStringBounded = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceWStringBounded;
        TypeIdentifierPair type_ids_SequenceWStringBounded;
        QualifiedTypeName type_name_SequenceWStringBounded = "SequenceWStringBounded";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceWStringBounded;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceWStringBounded;
        CompleteTypeDetail detail_SequenceWStringBounded = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceWStringBounded, ann_custom_SequenceWStringBounded, type_name_SequenceWStringBounded.to_string());
        CompleteStructHeader header_SequenceWStringBounded;
        header_SequenceWStringBounded = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceWStringBounded);
        CompleteStructMemberSeq member_seq_SequenceWStringBounded;
        {
            return_code_SequenceWStringBounded =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_anonymous_wstring_10_unbounded", type_ids_SequenceWStringBounded);

            if (return_code_SequenceWStringBounded != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceWStringBounded =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_SequenceWStringBounded);

                if (return_code_SequenceWStringBounded != eprosima::fastdds::dds::RETCODE_OK)
                {
                    AliasTypeFlag alias_flags_Inner_alias_bounded_wstring_helper = 0;
                    QualifiedTypeName type_name_Inner_alias_bounded_wstring_helper = "Inner_alias_bounded_wstring_helper";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Inner_alias_bounded_wstring_helper;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Inner_alias_bounded_wstring_helper;
                    CompleteTypeDetail detail_Inner_alias_bounded_wstring_helper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Inner_alias_bounded_wstring_helper, ann_custom_Inner_alias_bounded_wstring_helper, type_name_Inner_alias_bounded_wstring_helper.to_string());
                    CompleteAliasHeader header_Inner_alias_bounded_wstring_helper = TypeObjectUtils::build_complete_alias_header(detail_Inner_alias_bounded_wstring_helper);
                    AliasMemberFlag related_flags_Inner_alias_bounded_wstring_helper = 0;
                    return_code_SequenceWStringBounded =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_wstring_10", type_ids_SequenceWStringBounded);

                    if (return_code_SequenceWStringBounded != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        std::string type_id_kind_anonymous_wstring_10("TI_STRING16_SMALL");
                        if (type_id_kind_anonymous_wstring_10 == "TI_STRING16_SMALL")
                        {
                            SBound bound = static_cast<SBound>(10);
                            StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                    "anonymous_wstring_10", true))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_wstring_10 already registered in TypeObjectRegistry for a different type.");
                            }
                        }
                        else if (type_id_kind_anonymous_wstring_10 == "TI_STRING16_LARGE")
                        {
                            LBound bound = 10;
                            StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                    "anonymous_wstring_10", true))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_wstring_10 already registered in TypeObjectRegistry for a different type.");
                            }
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_wstring_10: Unknown WString kind.");
                            return;
                        }
                        return_code_SequenceWStringBounded =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_wstring_10", type_ids_SequenceWStringBounded);
                        if (return_code_SequenceWStringBounded != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_wstring_10: Given WString TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                    }
                    CommonAliasBody common_Inner_alias_bounded_wstring_helper;
                    if (EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier1()._d() || TK_NONE == type_ids_SequenceWStringBounded.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceWStringBounded.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceWStringBounded.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceWStringBounded.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceWStringBounded.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_SequenceWStringBounded.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_SequenceWStringBounded.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_Inner_alias_bounded_wstring_helper = TypeObjectUtils::build_common_alias_body(related_flags_Inner_alias_bounded_wstring_helper, type_ids_SequenceWStringBounded.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceWStringBounded.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceWStringBounded.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceWStringBounded.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceWStringBounded.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_SequenceWStringBounded.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_SequenceWStringBounded.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_Inner_alias_bounded_wstring_helper = TypeObjectUtils::build_common_alias_body(related_flags_Inner_alias_bounded_wstring_helper, type_ids_SequenceWStringBounded.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Inner_alias_bounded_wstring_helper related TypeIdentifier inconsistent.");
                        return;
                    }
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Inner_alias_bounded_wstring_helper;
                    ann_custom_Inner_alias_bounded_wstring_helper.reset();
                    CompleteAliasBody body_Inner_alias_bounded_wstring_helper = TypeObjectUtils::build_complete_alias_body(common_Inner_alias_bounded_wstring_helper, member_ann_builtin_Inner_alias_bounded_wstring_helper, ann_custom_Inner_alias_bounded_wstring_helper);
                    CompleteAliasType alias_type_Inner_alias_bounded_wstring_helper = TypeObjectUtils::build_complete_alias_type(alias_flags_Inner_alias_bounded_wstring_helper, header_Inner_alias_bounded_wstring_helper, body_Inner_alias_bounded_wstring_helper);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_alias_type_object(alias_type_Inner_alias_bounded_wstring_helper, type_name_Inner_alias_bounded_wstring_helper.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Inner_alias_bounded_wstring_helper already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_SequenceWStringBounded =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "Inner_alias_bounded_wstring_helper", type_ids_SequenceWStringBounded);
                    if (return_code_SequenceWStringBounded != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Inner_alias_bounded_wstring_helper: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                TypeIdentifier* element_identifier_anonymous_sequence_anonymous_wstring_10_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier1()._d() || TK_NONE == type_ids_SequenceWStringBounded.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceWStringBounded.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceWStringBounded.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceWStringBounded.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceWStringBounded.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceWStringBounded.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceWStringBounded.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_anonymous_wstring_10_unbounded = new TypeIdentifier(type_ids_SequenceWStringBounded.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceWStringBounded.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceWStringBounded.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceWStringBounded.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceWStringBounded.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceWStringBounded.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceWStringBounded.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_anonymous_wstring_10_unbounded = new TypeIdentifier(type_ids_SequenceWStringBounded.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_anonymous_wstring_10_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceWStringBounded.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_anonymous_wstring_10_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_anonymous_wstring_10_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_anonymous_wstring_10_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_anonymous_wstring_10_unbounded, element_flags_anonymous_sequence_anonymous_wstring_10_unbounded);
                std::string type_id_kind_anonymous_sequence_anonymous_wstring_10_unbounded("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_anonymous_wstring_10_unbounded == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_anonymous_wstring_10_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_anonymous_wstring_10_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_anonymous_wstring_10_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_anonymous_wstring_10_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_anonymous_wstring_10_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_anonymous_wstring_10_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_anonymous_wstring_10_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_anonymous_wstring_10_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceWStringBounded =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_anonymous_wstring_10_unbounded", type_ids_SequenceWStringBounded);
                if (return_code_SequenceWStringBounded != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_anonymous_wstring_10_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_sequence_bounded_wstring = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_sequence_bounded_wstring;
            MemberId member_id_var_sequence_bounded_wstring = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier1()._d() || TK_NONE == type_ids_SequenceWStringBounded.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceWStringBounded.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceWStringBounded.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceWStringBounded.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceWStringBounded.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceWStringBounded.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceWStringBounded.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_bounded_wstring = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_bounded_wstring, member_flags_var_sequence_bounded_wstring, type_ids_SequenceWStringBounded.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceWStringBounded.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceWStringBounded.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceWStringBounded.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceWStringBounded.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceWStringBounded.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceWStringBounded.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceWStringBounded.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_bounded_wstring = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_bounded_wstring, member_flags_var_sequence_bounded_wstring, type_ids_SequenceWStringBounded.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_sequence_bounded_wstring member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_sequence_bounded_wstring = "var_sequence_bounded_wstring";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_sequence_bounded_wstring;
            ann_custom_SequenceWStringBounded.reset();
            CompleteMemberDetail detail_var_sequence_bounded_wstring = TypeObjectUtils::build_complete_member_detail(name_var_sequence_bounded_wstring, member_ann_builtin_var_sequence_bounded_wstring, ann_custom_SequenceWStringBounded);
            CompleteStructMember member_var_sequence_bounded_wstring = TypeObjectUtils::build_complete_struct_member(common_var_sequence_bounded_wstring, detail_var_sequence_bounded_wstring);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceWStringBounded, member_var_sequence_bounded_wstring);
        }
        CompleteStructType struct_type_SequenceWStringBounded = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceWStringBounded, header_SequenceWStringBounded, member_seq_SequenceWStringBounded);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceWStringBounded, type_name_SequenceWStringBounded.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceWStringBounded already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceWStringBounded =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceWStringBounded", type_ids_SequenceWStringBounded);
        if (return_code_SequenceWStringBounded != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceWStringBounded: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SequenceEnum_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceEnum = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceEnum;
        TypeIdentifierPair type_ids_SequenceEnum;
        QualifiedTypeName type_name_SequenceEnum = "SequenceEnum";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceEnum;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceEnum;
        CompleteTypeDetail detail_SequenceEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceEnum, ann_custom_SequenceEnum, type_name_SequenceEnum.to_string());
        CompleteStructHeader header_SequenceEnum;
        header_SequenceEnum = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceEnum);
        CompleteStructMemberSeq member_seq_SequenceEnum;
        {
            return_code_SequenceEnum =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_InnerEnumHelper_unbounded", type_ids_SequenceEnum);

            if (return_code_SequenceEnum != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceEnum =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerEnumHelper", type_ids_SequenceEnum);

                if (return_code_SequenceEnum != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EnumTypeFlag enum_flags_InnerEnumHelper = 0;
                    BitBound bit_bound_InnerEnumHelper = 32;
                    CommonEnumeratedHeader common_InnerEnumHelper = TypeObjectUtils::build_common_enumerated_header(bit_bound_InnerEnumHelper);
                    QualifiedTypeName type_name_InnerEnumHelper = "InnerEnumHelper";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_InnerEnumHelper;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_InnerEnumHelper;
                    CompleteTypeDetail detail_InnerEnumHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_InnerEnumHelper, ann_custom_InnerEnumHelper, type_name_InnerEnumHelper.to_string());
                    CompleteEnumeratedHeader header_InnerEnumHelper = TypeObjectUtils::build_complete_enumerated_header(common_InnerEnumHelper, detail_InnerEnumHelper);
                    CompleteEnumeratedLiteralSeq literal_seq_InnerEnumHelper;
                    {
                        EnumeratedLiteralFlag flags_ENUM_VALUE_1 = TypeObjectUtils::build_enumerated_literal_flag(false);
                        CommonEnumeratedLiteral common_ENUM_VALUE_1 = TypeObjectUtils::build_common_enumerated_literal(0, flags_ENUM_VALUE_1);
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ENUM_VALUE_1;
                        ann_custom_InnerEnumHelper.reset();
                        MemberName name_ENUM_VALUE_1 = "ENUM_VALUE_1";
                        CompleteMemberDetail detail_ENUM_VALUE_1 = TypeObjectUtils::build_complete_member_detail(name_ENUM_VALUE_1, member_ann_builtin_ENUM_VALUE_1, ann_custom_InnerEnumHelper);
                        CompleteEnumeratedLiteral literal_ENUM_VALUE_1 = TypeObjectUtils::build_complete_enumerated_literal(common_ENUM_VALUE_1, detail_ENUM_VALUE_1);
                        TypeObjectUtils::add_complete_enumerated_literal(literal_seq_InnerEnumHelper, literal_ENUM_VALUE_1);
                    }
                    {
                        EnumeratedLiteralFlag flags_ENUM_VALUE_2 = TypeObjectUtils::build_enumerated_literal_flag(false);
                        CommonEnumeratedLiteral common_ENUM_VALUE_2 = TypeObjectUtils::build_common_enumerated_literal(1, flags_ENUM_VALUE_2);
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ENUM_VALUE_2;
                        ann_custom_InnerEnumHelper.reset();
                        MemberName name_ENUM_VALUE_2 = "ENUM_VALUE_2";
                        CompleteMemberDetail detail_ENUM_VALUE_2 = TypeObjectUtils::build_complete_member_detail(name_ENUM_VALUE_2, member_ann_builtin_ENUM_VALUE_2, ann_custom_InnerEnumHelper);
                        CompleteEnumeratedLiteral literal_ENUM_VALUE_2 = TypeObjectUtils::build_complete_enumerated_literal(common_ENUM_VALUE_2, detail_ENUM_VALUE_2);
                        TypeObjectUtils::add_complete_enumerated_literal(literal_seq_InnerEnumHelper, literal_ENUM_VALUE_2);
                    }
                    {
                        EnumeratedLiteralFlag flags_ENUM_VALUE_3 = TypeObjectUtils::build_enumerated_literal_flag(false);
                        CommonEnumeratedLiteral common_ENUM_VALUE_3 = TypeObjectUtils::build_common_enumerated_literal(2, flags_ENUM_VALUE_3);
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ENUM_VALUE_3;
                        ann_custom_InnerEnumHelper.reset();
                        MemberName name_ENUM_VALUE_3 = "ENUM_VALUE_3";
                        CompleteMemberDetail detail_ENUM_VALUE_3 = TypeObjectUtils::build_complete_member_detail(name_ENUM_VALUE_3, member_ann_builtin_ENUM_VALUE_3, ann_custom_InnerEnumHelper);
                        CompleteEnumeratedLiteral literal_ENUM_VALUE_3 = TypeObjectUtils::build_complete_enumerated_literal(common_ENUM_VALUE_3, detail_ENUM_VALUE_3);
                        TypeObjectUtils::add_complete_enumerated_literal(literal_seq_InnerEnumHelper, literal_ENUM_VALUE_3);
                    }
                    CompleteEnumeratedType enumerated_type_InnerEnumHelper = TypeObjectUtils::build_complete_enumerated_type(enum_flags_InnerEnumHelper, header_InnerEnumHelper,
                            literal_seq_InnerEnumHelper);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_InnerEnumHelper, type_name_InnerEnumHelper.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "InnerEnumHelper already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_SequenceEnum =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "InnerEnumHelper", type_ids_SequenceEnum);
                    if (return_code_SequenceEnum != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "InnerEnumHelper: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                TypeIdentifier* element_identifier_anonymous_sequence_InnerEnumHelper_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_SequenceEnum.type_identifier1()._d() || TK_NONE == type_ids_SequenceEnum.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceEnum.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceEnum.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceEnum.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceEnum.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceEnum.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceEnum.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceEnum.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceEnum.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceEnum.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceEnum.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceEnum.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceEnum.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceEnum.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceEnum.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_InnerEnumHelper_unbounded = new TypeIdentifier(type_ids_SequenceEnum.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceEnum.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceEnum.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceEnum.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceEnum.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceEnum.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceEnum.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceEnum.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceEnum.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceEnum.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceEnum.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceEnum.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceEnum.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceEnum.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceEnum.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceEnum.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_InnerEnumHelper_unbounded = new TypeIdentifier(type_ids_SequenceEnum.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_InnerEnumHelper_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceEnum.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_InnerEnumHelper_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_InnerEnumHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_InnerEnumHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_InnerEnumHelper_unbounded, element_flags_anonymous_sequence_InnerEnumHelper_unbounded);
                std::string type_id_kind_anonymous_sequence_InnerEnumHelper_unbounded("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_InnerEnumHelper_unbounded == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_InnerEnumHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_InnerEnumHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_InnerEnumHelper_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_InnerEnumHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_InnerEnumHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_InnerEnumHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_InnerEnumHelper_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_InnerEnumHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceEnum =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_InnerEnumHelper_unbounded", type_ids_SequenceEnum);
                if (return_code_SequenceEnum != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_InnerEnumHelper_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_sequence_enum = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_sequence_enum;
            MemberId member_id_var_sequence_enum = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceEnum.type_identifier1()._d() || TK_NONE == type_ids_SequenceEnum.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceEnum.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceEnum.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceEnum.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceEnum.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceEnum.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceEnum.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceEnum.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceEnum.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceEnum.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceEnum.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceEnum.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceEnum.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceEnum.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceEnum.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_enum = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_enum, member_flags_var_sequence_enum, type_ids_SequenceEnum.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceEnum.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceEnum.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceEnum.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceEnum.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceEnum.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceEnum.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceEnum.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceEnum.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceEnum.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceEnum.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceEnum.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceEnum.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceEnum.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceEnum.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceEnum.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_enum = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_enum, member_flags_var_sequence_enum, type_ids_SequenceEnum.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_sequence_enum member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_sequence_enum = "var_sequence_enum";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_sequence_enum;
            ann_custom_SequenceEnum.reset();
            CompleteMemberDetail detail_var_sequence_enum = TypeObjectUtils::build_complete_member_detail(name_var_sequence_enum, member_ann_builtin_var_sequence_enum, ann_custom_SequenceEnum);
            CompleteStructMember member_var_sequence_enum = TypeObjectUtils::build_complete_struct_member(common_var_sequence_enum, detail_var_sequence_enum);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceEnum, member_var_sequence_enum);
        }
        CompleteStructType struct_type_SequenceEnum = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceEnum, header_SequenceEnum, member_seq_SequenceEnum);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceEnum, type_name_SequenceEnum.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceEnum already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceEnum =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceEnum", type_ids_SequenceEnum);
        if (return_code_SequenceEnum != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceEnum: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SequenceBitMask_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceBitMask = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceBitMask;
        TypeIdentifierPair type_ids_SequenceBitMask;
        QualifiedTypeName type_name_SequenceBitMask = "SequenceBitMask";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceBitMask;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceBitMask;
        CompleteTypeDetail detail_SequenceBitMask = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceBitMask, ann_custom_SequenceBitMask, type_name_SequenceBitMask.to_string());
        CompleteStructHeader header_SequenceBitMask;
        header_SequenceBitMask = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceBitMask);
        CompleteStructMemberSeq member_seq_SequenceBitMask;
        {
            return_code_SequenceBitMask =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_InnerBitMaskHelper_unbounded", type_ids_SequenceBitMask);

            if (return_code_SequenceBitMask != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceBitMask =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerBitMaskHelper", type_ids_SequenceBitMask);

                if (return_code_SequenceBitMask != eprosima::fastdds::dds::RETCODE_OK)
                {
                    BitmaskTypeFlag bitmask_flags_InnerBitMaskHelper = 0;
                    BitBound bit_bound_InnerBitMaskHelper = 32;
                    CommonEnumeratedHeader common_InnerBitMaskHelper = TypeObjectUtils::build_common_enumerated_header(bit_bound_InnerBitMaskHelper, true);
                    QualifiedTypeName type_name_InnerBitMaskHelper = "InnerBitMaskHelper";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_InnerBitMaskHelper;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_InnerBitMaskHelper;
                    CompleteTypeDetail detail_InnerBitMaskHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_InnerBitMaskHelper, ann_custom_InnerBitMaskHelper, type_name_InnerBitMaskHelper.to_string());
                    CompleteEnumeratedHeader header_InnerBitMaskHelper = TypeObjectUtils::build_complete_enumerated_header(common_InnerBitMaskHelper, detail_InnerBitMaskHelper, true);
                    CompleteBitflagSeq flag_seq_InnerBitMaskHelper;
                    {
                        uint16_t position_flag0 = 0;
                        BitflagFlag flags_flag0 = 0;
                        CommonBitflag common_flag0 = TypeObjectUtils::build_common_bitflag(position_flag0, flags_flag0);
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag0;
                        ann_custom_InnerBitMaskHelper.reset();
                        AppliedAnnotationSeq tmp_ann_custom_flag0;
                        if (!tmp_ann_custom_flag0.empty())
                        {
                            ann_custom_InnerBitMaskHelper = tmp_ann_custom_flag0;
                        }
                        MemberName name_flag0 = "flag0";
                        CompleteMemberDetail detail_flag0 = TypeObjectUtils::build_complete_member_detail(name_flag0, member_ann_builtin_flag0, ann_custom_InnerBitMaskHelper);
                        CompleteBitflag bitflag_flag0 = TypeObjectUtils::build_complete_bitflag(common_flag0, detail_flag0);
                        TypeObjectUtils::add_complete_bitflag(flag_seq_InnerBitMaskHelper, bitflag_flag0);
                    }
                    {
                        uint16_t position_flag1 = 1;
                        BitflagFlag flags_flag1 = 0;
                        CommonBitflag common_flag1 = TypeObjectUtils::build_common_bitflag(position_flag1, flags_flag1);
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag1;
                        ann_custom_InnerBitMaskHelper.reset();
                        AppliedAnnotationSeq tmp_ann_custom_flag1;
                        if (!tmp_ann_custom_flag1.empty())
                        {
                            ann_custom_InnerBitMaskHelper = tmp_ann_custom_flag1;
                        }
                        MemberName name_flag1 = "flag1";
                        CompleteMemberDetail detail_flag1 = TypeObjectUtils::build_complete_member_detail(name_flag1, member_ann_builtin_flag1, ann_custom_InnerBitMaskHelper);
                        CompleteBitflag bitflag_flag1 = TypeObjectUtils::build_complete_bitflag(common_flag1, detail_flag1);
                        TypeObjectUtils::add_complete_bitflag(flag_seq_InnerBitMaskHelper, bitflag_flag1);
                    }
                    {
                        uint16_t position_flag4 = 4;
                        BitflagFlag flags_flag4 = 0;
                        CommonBitflag common_flag4 = TypeObjectUtils::build_common_bitflag(position_flag4, flags_flag4);
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag4;
                        ann_custom_InnerBitMaskHelper.reset();
                        AppliedAnnotationSeq tmp_ann_custom_flag4;
                        if (!tmp_ann_custom_flag4.empty())
                        {
                            ann_custom_InnerBitMaskHelper = tmp_ann_custom_flag4;
                        }
                        MemberName name_flag4 = "flag4";
                        CompleteMemberDetail detail_flag4 = TypeObjectUtils::build_complete_member_detail(name_flag4, member_ann_builtin_flag4, ann_custom_InnerBitMaskHelper);
                        CompleteBitflag bitflag_flag4 = TypeObjectUtils::build_complete_bitflag(common_flag4, detail_flag4);
                        TypeObjectUtils::add_complete_bitflag(flag_seq_InnerBitMaskHelper, bitflag_flag4);
                    }
                    {
                        uint16_t position_flag6 = 6;
                        BitflagFlag flags_flag6 = 0;
                        CommonBitflag common_flag6 = TypeObjectUtils::build_common_bitflag(position_flag6, flags_flag6);
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag6;
                        ann_custom_InnerBitMaskHelper.reset();
                        AppliedAnnotationSeq tmp_ann_custom_flag6;
                        if (!tmp_ann_custom_flag6.empty())
                        {
                            ann_custom_InnerBitMaskHelper = tmp_ann_custom_flag6;
                        }
                        MemberName name_flag6 = "flag6";
                        CompleteMemberDetail detail_flag6 = TypeObjectUtils::build_complete_member_detail(name_flag6, member_ann_builtin_flag6, ann_custom_InnerBitMaskHelper);
                        CompleteBitflag bitflag_flag6 = TypeObjectUtils::build_complete_bitflag(common_flag6, detail_flag6);
                        TypeObjectUtils::add_complete_bitflag(flag_seq_InnerBitMaskHelper, bitflag_flag6);
                    }
                    CompleteBitmaskType bitmask_type_InnerBitMaskHelper = TypeObjectUtils::build_complete_bitmask_type(bitmask_flags_InnerBitMaskHelper, header_InnerBitMaskHelper, flag_seq_InnerBitMaskHelper);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_bitmask_type_object(bitmask_type_InnerBitMaskHelper, type_name_InnerBitMaskHelper.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "InnerBitMaskHelper already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_SequenceBitMask =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "InnerBitMaskHelper", type_ids_SequenceBitMask);
                    if (return_code_SequenceBitMask != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "InnerBitMaskHelper: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                TypeIdentifier* element_identifier_anonymous_sequence_InnerBitMaskHelper_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_SequenceBitMask.type_identifier1()._d() || TK_NONE == type_ids_SequenceBitMask.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceBitMask.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceBitMask.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceBitMask.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceBitMask.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceBitMask.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceBitMask.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceBitMask.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceBitMask.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceBitMask.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceBitMask.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceBitMask.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceBitMask.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceBitMask.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceBitMask.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_InnerBitMaskHelper_unbounded = new TypeIdentifier(type_ids_SequenceBitMask.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceBitMask.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceBitMask.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceBitMask.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceBitMask.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceBitMask.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceBitMask.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceBitMask.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceBitMask.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceBitMask.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceBitMask.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceBitMask.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceBitMask.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceBitMask.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceBitMask.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceBitMask.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_InnerBitMaskHelper_unbounded = new TypeIdentifier(type_ids_SequenceBitMask.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_InnerBitMaskHelper_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceBitMask.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_InnerBitMaskHelper_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_InnerBitMaskHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_InnerBitMaskHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_InnerBitMaskHelper_unbounded, element_flags_anonymous_sequence_InnerBitMaskHelper_unbounded);
                std::string type_id_kind_anonymous_sequence_InnerBitMaskHelper_unbounded("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_InnerBitMaskHelper_unbounded == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_InnerBitMaskHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_InnerBitMaskHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_InnerBitMaskHelper_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_InnerBitMaskHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_InnerBitMaskHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_InnerBitMaskHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_InnerBitMaskHelper_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_InnerBitMaskHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceBitMask =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_InnerBitMaskHelper_unbounded", type_ids_SequenceBitMask);
                if (return_code_SequenceBitMask != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_InnerBitMaskHelper_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_sequence_bitmask = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_sequence_bitmask;
            MemberId member_id_var_sequence_bitmask = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceBitMask.type_identifier1()._d() || TK_NONE == type_ids_SequenceBitMask.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceBitMask.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceBitMask.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceBitMask.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceBitMask.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceBitMask.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceBitMask.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceBitMask.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceBitMask.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceBitMask.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceBitMask.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceBitMask.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceBitMask.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceBitMask.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceBitMask.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_bitmask = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_bitmask, member_flags_var_sequence_bitmask, type_ids_SequenceBitMask.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceBitMask.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceBitMask.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceBitMask.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceBitMask.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceBitMask.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceBitMask.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceBitMask.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceBitMask.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceBitMask.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceBitMask.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceBitMask.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceBitMask.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceBitMask.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceBitMask.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceBitMask.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_bitmask = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_bitmask, member_flags_var_sequence_bitmask, type_ids_SequenceBitMask.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_sequence_bitmask member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_sequence_bitmask = "var_sequence_bitmask";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_sequence_bitmask;
            ann_custom_SequenceBitMask.reset();
            CompleteMemberDetail detail_var_sequence_bitmask = TypeObjectUtils::build_complete_member_detail(name_var_sequence_bitmask, member_ann_builtin_var_sequence_bitmask, ann_custom_SequenceBitMask);
            CompleteStructMember member_var_sequence_bitmask = TypeObjectUtils::build_complete_struct_member(common_var_sequence_bitmask, detail_var_sequence_bitmask);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceBitMask, member_var_sequence_bitmask);
        }
        CompleteStructType struct_type_SequenceBitMask = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceBitMask, header_SequenceBitMask, member_seq_SequenceBitMask);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceBitMask, type_name_SequenceBitMask.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceBitMask already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceBitMask =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceBitMask", type_ids_SequenceBitMask);
        if (return_code_SequenceBitMask != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceBitMask: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SequenceAlias_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceAlias = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceAlias;
        TypeIdentifierPair type_ids_SequenceAlias;
        QualifiedTypeName type_name_SequenceAlias = "SequenceAlias";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceAlias;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceAlias;
        CompleteTypeDetail detail_SequenceAlias = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceAlias, ann_custom_SequenceAlias, type_name_SequenceAlias.to_string());
        CompleteStructHeader header_SequenceAlias;
        header_SequenceAlias = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceAlias);
        CompleteStructMemberSeq member_seq_SequenceAlias;
        {
            return_code_SequenceAlias =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_InnerAliasHelper_unbounded", type_ids_SequenceAlias);

            if (return_code_SequenceAlias != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceAlias =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerAliasHelper", type_ids_SequenceAlias);

                if (return_code_SequenceAlias != eprosima::fastdds::dds::RETCODE_OK)
                {
                    AliasTypeFlag alias_flags_InnerAliasHelper = 0;
                    QualifiedTypeName type_name_InnerAliasHelper = "InnerAliasHelper";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_InnerAliasHelper;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_InnerAliasHelper;
                    CompleteTypeDetail detail_InnerAliasHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_InnerAliasHelper, ann_custom_InnerAliasHelper, type_name_InnerAliasHelper.to_string());
                    CompleteAliasHeader header_InnerAliasHelper = TypeObjectUtils::build_complete_alias_header(detail_InnerAliasHelper);
                    AliasMemberFlag related_flags_InnerAliasHelper = 0;
                    return_code_SequenceAlias =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_int32_t", type_ids_SequenceAlias);

                    if (return_code_SequenceAlias != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "InnerAliasHelper related TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    CommonAliasBody common_InnerAliasHelper;
                    if (EK_COMPLETE == type_ids_SequenceAlias.type_identifier1()._d() || TK_NONE == type_ids_SequenceAlias.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceAlias.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceAlias.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceAlias.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceAlias.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceAlias.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceAlias.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceAlias.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceAlias.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_SequenceAlias.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_SequenceAlias.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceAlias.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_SequenceAlias.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_SequenceAlias.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceAlias.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_InnerAliasHelper = TypeObjectUtils::build_common_alias_body(related_flags_InnerAliasHelper, type_ids_SequenceAlias.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_SequenceAlias.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceAlias.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceAlias.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceAlias.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceAlias.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceAlias.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceAlias.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceAlias.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceAlias.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_SequenceAlias.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_SequenceAlias.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceAlias.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_SequenceAlias.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_SequenceAlias.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceAlias.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_InnerAliasHelper = TypeObjectUtils::build_common_alias_body(related_flags_InnerAliasHelper, type_ids_SequenceAlias.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "InnerAliasHelper related TypeIdentifier inconsistent.");
                        return;
                    }
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_InnerAliasHelper;
                    ann_custom_InnerAliasHelper.reset();
                    CompleteAliasBody body_InnerAliasHelper = TypeObjectUtils::build_complete_alias_body(common_InnerAliasHelper, member_ann_builtin_InnerAliasHelper, ann_custom_InnerAliasHelper);
                    CompleteAliasType alias_type_InnerAliasHelper = TypeObjectUtils::build_complete_alias_type(alias_flags_InnerAliasHelper, header_InnerAliasHelper, body_InnerAliasHelper);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_alias_type_object(alias_type_InnerAliasHelper, type_name_InnerAliasHelper.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "InnerAliasHelper already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_SequenceAlias =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "InnerAliasHelper", type_ids_SequenceAlias);
                    if (return_code_SequenceAlias != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "InnerAliasHelper: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                TypeIdentifier* element_identifier_anonymous_sequence_InnerAliasHelper_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_SequenceAlias.type_identifier1()._d() || TK_NONE == type_ids_SequenceAlias.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceAlias.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceAlias.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceAlias.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceAlias.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceAlias.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceAlias.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceAlias.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceAlias.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceAlias.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceAlias.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceAlias.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceAlias.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceAlias.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceAlias.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_InnerAliasHelper_unbounded = new TypeIdentifier(type_ids_SequenceAlias.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceAlias.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceAlias.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceAlias.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceAlias.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceAlias.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceAlias.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceAlias.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceAlias.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceAlias.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceAlias.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceAlias.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceAlias.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceAlias.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceAlias.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceAlias.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_InnerAliasHelper_unbounded = new TypeIdentifier(type_ids_SequenceAlias.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_InnerAliasHelper_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceAlias.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_InnerAliasHelper_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_InnerAliasHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_InnerAliasHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_InnerAliasHelper_unbounded, element_flags_anonymous_sequence_InnerAliasHelper_unbounded);
                std::string type_id_kind_anonymous_sequence_InnerAliasHelper_unbounded("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_InnerAliasHelper_unbounded == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_InnerAliasHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_InnerAliasHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_InnerAliasHelper_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_InnerAliasHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_InnerAliasHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_InnerAliasHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_InnerAliasHelper_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_InnerAliasHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceAlias =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_InnerAliasHelper_unbounded", type_ids_SequenceAlias);
                if (return_code_SequenceAlias != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_InnerAliasHelper_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_sequence_alias = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_sequence_alias;
            MemberId member_id_var_sequence_alias = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceAlias.type_identifier1()._d() || TK_NONE == type_ids_SequenceAlias.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceAlias.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceAlias.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceAlias.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceAlias.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceAlias.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceAlias.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceAlias.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceAlias.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceAlias.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceAlias.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceAlias.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceAlias.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceAlias.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceAlias.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_alias = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_alias, member_flags_var_sequence_alias, type_ids_SequenceAlias.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceAlias.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceAlias.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceAlias.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceAlias.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceAlias.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceAlias.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceAlias.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceAlias.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceAlias.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceAlias.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceAlias.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceAlias.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceAlias.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceAlias.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceAlias.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_alias = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_alias, member_flags_var_sequence_alias, type_ids_SequenceAlias.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_sequence_alias member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_sequence_alias = "var_sequence_alias";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_sequence_alias;
            ann_custom_SequenceAlias.reset();
            CompleteMemberDetail detail_var_sequence_alias = TypeObjectUtils::build_complete_member_detail(name_var_sequence_alias, member_ann_builtin_var_sequence_alias, ann_custom_SequenceAlias);
            CompleteStructMember member_var_sequence_alias = TypeObjectUtils::build_complete_struct_member(common_var_sequence_alias, detail_var_sequence_alias);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceAlias, member_var_sequence_alias);
        }
        CompleteStructType struct_type_SequenceAlias = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceAlias, header_SequenceAlias, member_seq_SequenceAlias);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceAlias, type_name_SequenceAlias.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceAlias already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceAlias =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceAlias", type_ids_SequenceAlias);
        if (return_code_SequenceAlias != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceAlias: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SequenceShortArray_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceShortArray = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceShortArray;
        TypeIdentifierPair type_ids_SequenceShortArray;
        QualifiedTypeName type_name_SequenceShortArray = "SequenceShortArray";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceShortArray;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceShortArray;
        CompleteTypeDetail detail_SequenceShortArray = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceShortArray, ann_custom_SequenceShortArray, type_name_SequenceShortArray.to_string());
        CompleteStructHeader header_SequenceShortArray;
        header_SequenceShortArray = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceShortArray);
        CompleteStructMemberSeq member_seq_SequenceShortArray;
        {
            return_code_SequenceShortArray =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_anonymous_array_int16_t_2_unbounded", type_ids_SequenceShortArray);

            if (return_code_SequenceShortArray != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceShortArray =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_array_helper", type_ids_SequenceShortArray);

                if (return_code_SequenceShortArray != eprosima::fastdds::dds::RETCODE_OK)
                {
                    AliasTypeFlag alias_flags_Inner_alias_array_helper = 0;
                    QualifiedTypeName type_name_Inner_alias_array_helper = "Inner_alias_array_helper";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Inner_alias_array_helper;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Inner_alias_array_helper;
                    CompleteTypeDetail detail_Inner_alias_array_helper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Inner_alias_array_helper, ann_custom_Inner_alias_array_helper, type_name_Inner_alias_array_helper.to_string());
                    CompleteAliasHeader header_Inner_alias_array_helper = TypeObjectUtils::build_complete_alias_header(detail_Inner_alias_array_helper);
                    AliasMemberFlag related_flags_Inner_alias_array_helper = 0;
                    return_code_SequenceShortArray =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_array_int16_t_2", type_ids_SequenceShortArray);

                    if (return_code_SequenceShortArray != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        return_code_SequenceShortArray =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int16_t", type_ids_SequenceShortArray);

                        if (return_code_SequenceShortArray != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        TypeIdentifier* element_identifier_anonymous_array_int16_t_2 {nullptr};
                        if (EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1()._d() || TK_NONE == type_ids_SequenceShortArray.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceShortArray.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceShortArray.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceShortArray.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceShortArray.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SequenceShortArray.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SequenceShortArray.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            element_identifier_anonymous_array_int16_t_2 = new TypeIdentifier(type_ids_SequenceShortArray.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceShortArray.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceShortArray.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceShortArray.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceShortArray.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SequenceShortArray.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SequenceShortArray.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            element_identifier_anonymous_array_int16_t_2 = new TypeIdentifier(type_ids_SequenceShortArray.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Array element TypeIdentifier inconsistent.");
                            return;
                        }
                        EquivalenceKind equiv_kind_anonymous_array_int16_t_2 = EK_COMPLETE;
                        if (TK_NONE == type_ids_SequenceShortArray.type_identifier2()._d())
                        {
                            equiv_kind_anonymous_array_int16_t_2 = EK_BOTH;
                        }
                        CollectionElementFlag element_flags_anonymous_array_int16_t_2 = 0;
                        PlainCollectionHeader header_anonymous_array_int16_t_2 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_int16_t_2, element_flags_anonymous_array_int16_t_2);
                        std::string type_id_kind_anonymous_array_int16_t_2("TI_PLAIN_ARRAY_SMALL");
                        if (type_id_kind_anonymous_array_int16_t_2 == "TI_PLAIN_ARRAY_SMALL")
                        {
                            SBoundSeq array_bound_seq;
                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(2));

                            PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_int16_t_2, array_bound_seq,
                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_int16_t_2));
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_int16_t_2"))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_array_int16_t_2 already registered in TypeObjectRegistry for a different type.");
                            }
                        }
                        else
                        {
                            LBoundSeq array_bound_seq;
                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(2));

                            PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header_anonymous_array_int16_t_2, array_bound_seq,
                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_int16_t_2));
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_int16_t_2"))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_array_int16_t_2 already registered in TypeObjectRegistry for a different type.");
                            }
                        }
                        return_code_SequenceShortArray =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_array_int16_t_2", type_ids_SequenceShortArray);
                        if (return_code_SequenceShortArray != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_array_int16_t_2: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                    }
                    CommonAliasBody common_Inner_alias_array_helper;
                    if (EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1()._d() || TK_NONE == type_ids_SequenceShortArray.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceShortArray.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceShortArray.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceShortArray.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceShortArray.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_SequenceShortArray.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_SequenceShortArray.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_Inner_alias_array_helper = TypeObjectUtils::build_common_alias_body(related_flags_Inner_alias_array_helper, type_ids_SequenceShortArray.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceShortArray.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceShortArray.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceShortArray.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceShortArray.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_SequenceShortArray.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_SequenceShortArray.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_Inner_alias_array_helper = TypeObjectUtils::build_common_alias_body(related_flags_Inner_alias_array_helper, type_ids_SequenceShortArray.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Inner_alias_array_helper related TypeIdentifier inconsistent.");
                        return;
                    }
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Inner_alias_array_helper;
                    ann_custom_Inner_alias_array_helper.reset();
                    CompleteAliasBody body_Inner_alias_array_helper = TypeObjectUtils::build_complete_alias_body(common_Inner_alias_array_helper, member_ann_builtin_Inner_alias_array_helper, ann_custom_Inner_alias_array_helper);
                    CompleteAliasType alias_type_Inner_alias_array_helper = TypeObjectUtils::build_complete_alias_type(alias_flags_Inner_alias_array_helper, header_Inner_alias_array_helper, body_Inner_alias_array_helper);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_alias_type_object(alias_type_Inner_alias_array_helper, type_name_Inner_alias_array_helper.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Inner_alias_array_helper already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_SequenceShortArray =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "Inner_alias_array_helper", type_ids_SequenceShortArray);
                    if (return_code_SequenceShortArray != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Inner_alias_array_helper: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                TypeIdentifier* element_identifier_anonymous_sequence_anonymous_array_int16_t_2_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1()._d() || TK_NONE == type_ids_SequenceShortArray.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceShortArray.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceShortArray.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceShortArray.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceShortArray.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceShortArray.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceShortArray.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_anonymous_array_int16_t_2_unbounded = new TypeIdentifier(type_ids_SequenceShortArray.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceShortArray.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceShortArray.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceShortArray.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceShortArray.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceShortArray.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceShortArray.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_anonymous_array_int16_t_2_unbounded = new TypeIdentifier(type_ids_SequenceShortArray.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_anonymous_array_int16_t_2_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceShortArray.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_anonymous_array_int16_t_2_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_anonymous_array_int16_t_2_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_anonymous_array_int16_t_2_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_anonymous_array_int16_t_2_unbounded, element_flags_anonymous_sequence_anonymous_array_int16_t_2_unbounded);
                std::string type_id_kind_anonymous_sequence_anonymous_array_int16_t_2_unbounded("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_anonymous_array_int16_t_2_unbounded == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_anonymous_array_int16_t_2_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_anonymous_array_int16_t_2_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_anonymous_array_int16_t_2_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_anonymous_array_int16_t_2_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_anonymous_array_int16_t_2_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_anonymous_array_int16_t_2_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_anonymous_array_int16_t_2_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_anonymous_array_int16_t_2_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceShortArray =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_anonymous_array_int16_t_2_unbounded", type_ids_SequenceShortArray);
                if (return_code_SequenceShortArray != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_anonymous_array_int16_t_2_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_sequence_short_array = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_sequence_short_array;
            MemberId member_id_var_sequence_short_array = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1()._d() || TK_NONE == type_ids_SequenceShortArray.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceShortArray.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceShortArray.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceShortArray.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceShortArray.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceShortArray.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceShortArray.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceShortArray.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_short_array = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_short_array, member_flags_var_sequence_short_array, type_ids_SequenceShortArray.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceShortArray.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceShortArray.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceShortArray.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceShortArray.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceShortArray.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceShortArray.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceShortArray.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_short_array = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_short_array, member_flags_var_sequence_short_array, type_ids_SequenceShortArray.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_sequence_short_array member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_sequence_short_array = "var_sequence_short_array";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_sequence_short_array;
            ann_custom_SequenceShortArray.reset();
            CompleteMemberDetail detail_var_sequence_short_array = TypeObjectUtils::build_complete_member_detail(name_var_sequence_short_array, member_ann_builtin_var_sequence_short_array, ann_custom_SequenceShortArray);
            CompleteStructMember member_var_sequence_short_array = TypeObjectUtils::build_complete_struct_member(common_var_sequence_short_array, detail_var_sequence_short_array);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceShortArray, member_var_sequence_short_array);
        }
        CompleteStructType struct_type_SequenceShortArray = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceShortArray, header_SequenceShortArray, member_seq_SequenceShortArray);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceShortArray, type_name_SequenceShortArray.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceShortArray already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceShortArray =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceShortArray", type_ids_SequenceShortArray);
        if (return_code_SequenceShortArray != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceShortArray: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SequenceSequence_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceSequence = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceSequence;
        TypeIdentifierPair type_ids_SequenceSequence;
        QualifiedTypeName type_name_SequenceSequence = "SequenceSequence";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceSequence;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceSequence;
        CompleteTypeDetail detail_SequenceSequence = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceSequence, ann_custom_SequenceSequence, type_name_SequenceSequence.to_string());
        CompleteStructHeader header_SequenceSequence;
        header_SequenceSequence = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceSequence);
        CompleteStructMemberSeq member_seq_SequenceSequence;
        {
            return_code_SequenceSequence =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_anonymous_sequence_int16_t_unbounded_unbounded", type_ids_SequenceSequence);

            if (return_code_SequenceSequence != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceSequence =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_sequence_helper", type_ids_SequenceSequence);

                if (return_code_SequenceSequence != eprosima::fastdds::dds::RETCODE_OK)
                {
                    AliasTypeFlag alias_flags_Inner_alias_sequence_helper = 0;
                    QualifiedTypeName type_name_Inner_alias_sequence_helper = "Inner_alias_sequence_helper";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Inner_alias_sequence_helper;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Inner_alias_sequence_helper;
                    CompleteTypeDetail detail_Inner_alias_sequence_helper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Inner_alias_sequence_helper, ann_custom_Inner_alias_sequence_helper, type_name_Inner_alias_sequence_helper.to_string());
                    CompleteAliasHeader header_Inner_alias_sequence_helper = TypeObjectUtils::build_complete_alias_header(detail_Inner_alias_sequence_helper);
                    AliasMemberFlag related_flags_Inner_alias_sequence_helper = 0;
                    return_code_SequenceSequence =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_sequence_int16_t_unbounded", type_ids_SequenceSequence);

                    if (return_code_SequenceSequence != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        return_code_SequenceSequence =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int16_t", type_ids_SequenceSequence);

                        if (return_code_SequenceSequence != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        TypeIdentifier* element_identifier_anonymous_sequence_int16_t_unbounded {nullptr};
                        if (EK_COMPLETE == type_ids_SequenceSequence.type_identifier1()._d() || TK_NONE == type_ids_SequenceSequence.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceSequence.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SequenceSequence.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceSequence.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SequenceSequence.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceSequence.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SequenceSequence.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceSequence.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SequenceSequence.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SequenceSequence.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SequenceSequence.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SequenceSequence.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SequenceSequence.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SequenceSequence.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SequenceSequence.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            element_identifier_anonymous_sequence_int16_t_unbounded = new TypeIdentifier(type_ids_SequenceSequence.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_SequenceSequence.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceSequence.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SequenceSequence.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceSequence.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SequenceSequence.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceSequence.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SequenceSequence.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceSequence.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SequenceSequence.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SequenceSequence.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SequenceSequence.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SequenceSequence.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SequenceSequence.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SequenceSequence.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SequenceSequence.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            element_identifier_anonymous_sequence_int16_t_unbounded = new TypeIdentifier(type_ids_SequenceSequence.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Sequence element TypeIdentifier inconsistent.");
                            return;
                        }
                        EquivalenceKind equiv_kind_anonymous_sequence_int16_t_unbounded = EK_COMPLETE;
                        if (TK_NONE == type_ids_SequenceSequence.type_identifier2()._d())
                        {
                            equiv_kind_anonymous_sequence_int16_t_unbounded = EK_BOTH;
                        }
                        CollectionElementFlag element_flags_anonymous_sequence_int16_t_unbounded = 0;
                        PlainCollectionHeader header_anonymous_sequence_int16_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_int16_t_unbounded, element_flags_anonymous_sequence_int16_t_unbounded);
                        std::string type_id_kind_anonymous_sequence_int16_t_unbounded("TI_PLAIN_SEQUENCE_SMALL");
                        if (type_id_kind_anonymous_sequence_int16_t_unbounded == "TI_PLAIN_SEQUENCE_SMALL")
                        {
                            SBound bound = 0;
                            PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_int16_t_unbounded, bound,
                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int16_t_unbounded));
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_int16_t_unbounded"))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_sequence_int16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                            }
                        }
                        else
                        {
                            LBound bound = 0;
                            PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_int16_t_unbounded, bound,
                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int16_t_unbounded));
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_int16_t_unbounded"))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_sequence_int16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                            }
                        }
                        return_code_SequenceSequence =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_sequence_int16_t_unbounded", type_ids_SequenceSequence);
                        if (return_code_SequenceSequence != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_sequence_int16_t_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                    }
                    CommonAliasBody common_Inner_alias_sequence_helper;
                    if (EK_COMPLETE == type_ids_SequenceSequence.type_identifier1()._d() || TK_NONE == type_ids_SequenceSequence.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceSequence.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceSequence.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceSequence.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceSequence.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceSequence.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceSequence.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceSequence.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceSequence.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_SequenceSequence.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_SequenceSequence.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceSequence.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_SequenceSequence.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_SequenceSequence.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceSequence.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_Inner_alias_sequence_helper = TypeObjectUtils::build_common_alias_body(related_flags_Inner_alias_sequence_helper, type_ids_SequenceSequence.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_SequenceSequence.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceSequence.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceSequence.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceSequence.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceSequence.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceSequence.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceSequence.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceSequence.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceSequence.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_SequenceSequence.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_SequenceSequence.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceSequence.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_SequenceSequence.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_SequenceSequence.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceSequence.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_Inner_alias_sequence_helper = TypeObjectUtils::build_common_alias_body(related_flags_Inner_alias_sequence_helper, type_ids_SequenceSequence.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Inner_alias_sequence_helper related TypeIdentifier inconsistent.");
                        return;
                    }
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Inner_alias_sequence_helper;
                    ann_custom_Inner_alias_sequence_helper.reset();
                    CompleteAliasBody body_Inner_alias_sequence_helper = TypeObjectUtils::build_complete_alias_body(common_Inner_alias_sequence_helper, member_ann_builtin_Inner_alias_sequence_helper, ann_custom_Inner_alias_sequence_helper);
                    CompleteAliasType alias_type_Inner_alias_sequence_helper = TypeObjectUtils::build_complete_alias_type(alias_flags_Inner_alias_sequence_helper, header_Inner_alias_sequence_helper, body_Inner_alias_sequence_helper);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_alias_type_object(alias_type_Inner_alias_sequence_helper, type_name_Inner_alias_sequence_helper.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Inner_alias_sequence_helper already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_SequenceSequence =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "Inner_alias_sequence_helper", type_ids_SequenceSequence);
                    if (return_code_SequenceSequence != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Inner_alias_sequence_helper: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                TypeIdentifier* element_identifier_anonymous_sequence_anonymous_sequence_int16_t_unbounded_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_SequenceSequence.type_identifier1()._d() || TK_NONE == type_ids_SequenceSequence.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceSequence.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceSequence.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceSequence.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceSequence.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceSequence.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceSequence.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceSequence.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceSequence.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceSequence.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceSequence.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceSequence.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceSequence.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceSequence.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceSequence.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_anonymous_sequence_int16_t_unbounded_unbounded = new TypeIdentifier(type_ids_SequenceSequence.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceSequence.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceSequence.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceSequence.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceSequence.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceSequence.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceSequence.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceSequence.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceSequence.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceSequence.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceSequence.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceSequence.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceSequence.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceSequence.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceSequence.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceSequence.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_anonymous_sequence_int16_t_unbounded_unbounded = new TypeIdentifier(type_ids_SequenceSequence.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_anonymous_sequence_int16_t_unbounded_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceSequence.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_anonymous_sequence_int16_t_unbounded_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_anonymous_sequence_int16_t_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_anonymous_sequence_int16_t_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_anonymous_sequence_int16_t_unbounded_unbounded, element_flags_anonymous_sequence_anonymous_sequence_int16_t_unbounded_unbounded);
                std::string type_id_kind_anonymous_sequence_anonymous_sequence_int16_t_unbounded_unbounded("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_anonymous_sequence_int16_t_unbounded_unbounded == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_anonymous_sequence_int16_t_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_anonymous_sequence_int16_t_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_anonymous_sequence_int16_t_unbounded_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_anonymous_sequence_int16_t_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_anonymous_sequence_int16_t_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_anonymous_sequence_int16_t_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_anonymous_sequence_int16_t_unbounded_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_anonymous_sequence_int16_t_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceSequence =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_anonymous_sequence_int16_t_unbounded_unbounded", type_ids_SequenceSequence);
                if (return_code_SequenceSequence != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_anonymous_sequence_int16_t_unbounded_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_sequence_sequence = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_sequence_sequence;
            MemberId member_id_var_sequence_sequence = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceSequence.type_identifier1()._d() || TK_NONE == type_ids_SequenceSequence.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceSequence.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceSequence.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceSequence.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceSequence.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceSequence.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceSequence.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceSequence.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceSequence.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceSequence.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceSequence.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceSequence.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceSequence.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceSequence.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceSequence.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_sequence = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_sequence, member_flags_var_sequence_sequence, type_ids_SequenceSequence.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceSequence.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceSequence.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceSequence.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceSequence.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceSequence.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceSequence.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceSequence.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceSequence.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceSequence.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceSequence.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceSequence.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceSequence.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceSequence.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceSequence.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceSequence.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_sequence = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_sequence, member_flags_var_sequence_sequence, type_ids_SequenceSequence.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_sequence_sequence member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_sequence_sequence = "var_sequence_sequence";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_sequence_sequence;
            ann_custom_SequenceSequence.reset();
            CompleteMemberDetail detail_var_sequence_sequence = TypeObjectUtils::build_complete_member_detail(name_var_sequence_sequence, member_ann_builtin_var_sequence_sequence, ann_custom_SequenceSequence);
            CompleteStructMember member_var_sequence_sequence = TypeObjectUtils::build_complete_struct_member(common_var_sequence_sequence, detail_var_sequence_sequence);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceSequence, member_var_sequence_sequence);
        }
        CompleteStructType struct_type_SequenceSequence = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceSequence, header_SequenceSequence, member_seq_SequenceSequence);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceSequence, type_name_SequenceSequence.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceSequence already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceSequence =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceSequence", type_ids_SequenceSequence);
        if (return_code_SequenceSequence != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceSequence: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SequenceMap_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceMap = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceMap;
        TypeIdentifierPair type_ids_SequenceMap;
        QualifiedTypeName type_name_SequenceMap = "SequenceMap";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceMap;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceMap;
        CompleteTypeDetail detail_SequenceMap = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceMap, ann_custom_SequenceMap, type_name_SequenceMap.to_string());
        CompleteStructHeader header_SequenceMap;
        header_SequenceMap = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceMap);
        CompleteStructMemberSeq member_seq_SequenceMap;
        {
            return_code_SequenceMap =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_anonymous_map_int32_t_int32_t_0_unbounded", type_ids_SequenceMap);

            if (return_code_SequenceMap != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceMap =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_map_helper", type_ids_SequenceMap);

                if (return_code_SequenceMap != eprosima::fastdds::dds::RETCODE_OK)
                {
                    AliasTypeFlag alias_flags_Inner_alias_map_helper = 0;
                    QualifiedTypeName type_name_Inner_alias_map_helper = "Inner_alias_map_helper";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Inner_alias_map_helper;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Inner_alias_map_helper;
                    CompleteTypeDetail detail_Inner_alias_map_helper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Inner_alias_map_helper, ann_custom_Inner_alias_map_helper, type_name_Inner_alias_map_helper.to_string());
                    CompleteAliasHeader header_Inner_alias_map_helper = TypeObjectUtils::build_complete_alias_header(detail_Inner_alias_map_helper);
                    AliasMemberFlag related_flags_Inner_alias_map_helper = 0;
                    return_code_SequenceMap =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_map_int32_t_int32_t_unbounded", type_ids_SequenceMap);

                    if (return_code_SequenceMap != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        return_code_SequenceMap =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids_SequenceMap);

                        if (return_code_SequenceMap != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        TypeIdentifier* element_identifier_anonymous_map_int32_t_int32_t_unbounded {nullptr};
                        if (EK_COMPLETE == type_ids_SequenceMap.type_identifier1()._d() || TK_NONE == type_ids_SequenceMap.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceMap.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SequenceMap.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceMap.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SequenceMap.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceMap.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SequenceMap.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceMap.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SequenceMap.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SequenceMap.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SequenceMap.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SequenceMap.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SequenceMap.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SequenceMap.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SequenceMap.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            element_identifier_anonymous_map_int32_t_int32_t_unbounded = new TypeIdentifier(type_ids_SequenceMap.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_SequenceMap.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceMap.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SequenceMap.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceMap.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SequenceMap.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceMap.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SequenceMap.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceMap.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SequenceMap.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SequenceMap.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SequenceMap.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SequenceMap.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SequenceMap.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SequenceMap.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SequenceMap.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            element_identifier_anonymous_map_int32_t_int32_t_unbounded = new TypeIdentifier(type_ids_SequenceMap.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_map_int32_t_int32_t_unbounded inconsistent element TypeIdentifier.");
                            return;
                        }
                        return_code_SequenceMap =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids_SequenceMap);

                        if (return_code_SequenceMap != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        TypeIdentifier* key_identifier_anonymous_map_int32_t_int32_t_unbounded {nullptr};
                        if (EK_COMPLETE == type_ids_SequenceMap.type_identifier1()._d() || TK_NONE == type_ids_SequenceMap.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceMap.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SequenceMap.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceMap.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SequenceMap.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceMap.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SequenceMap.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceMap.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SequenceMap.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SequenceMap.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SequenceMap.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SequenceMap.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SequenceMap.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SequenceMap.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SequenceMap.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            key_identifier_anonymous_map_int32_t_int32_t_unbounded = new TypeIdentifier(type_ids_SequenceMap.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_SequenceMap.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceMap.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SequenceMap.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceMap.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SequenceMap.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceMap.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SequenceMap.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceMap.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SequenceMap.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SequenceMap.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SequenceMap.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SequenceMap.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SequenceMap.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SequenceMap.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SequenceMap.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            key_identifier_anonymous_map_int32_t_int32_t_unbounded = new TypeIdentifier(type_ids_SequenceMap.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_map_int32_t_int32_t_unbounded inconsistent key TypeIdentifier.");
                            return;
                        }
                        EquivalenceKind equiv_kind_anonymous_map_int32_t_int32_t_unbounded = EK_BOTH;
                        if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_int32_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->_d()) ||
                                (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_int32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->map_sdefn().header().equiv_kind())) ||
                                (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->map_ldefn().header().equiv_kind())))
                        {
                            equiv_kind_anonymous_map_int32_t_int32_t_unbounded = EK_COMPLETE;
                        }
                        CollectionElementFlag element_flags_anonymous_map_int32_t_int32_t_unbounded = 0;
                        CollectionElementFlag key_flags_anonymous_map_int32_t_int32_t_unbounded = 0;
                        PlainCollectionHeader header_anonymous_map_int32_t_int32_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_int32_t_unbounded, element_flags_anonymous_map_int32_t_int32_t_unbounded);
                        std::string type_id_kind_anonymous_map_int32_t_int32_t_unbounded("TI_PLAIN_MAP_SMALL");
                        if (type_id_kind_anonymous_map_int32_t_int32_t_unbounded == "TI_PLAIN_MAP_SMALL")
                        {
                            SBound bound = 0;
                            PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_int32_t_unbounded, bound,
                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_int32_t_unbounded), key_flags_anonymous_map_int32_t_int32_t_unbounded,
                                        eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_int32_t_unbounded));
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_int32_t_unbounded"))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_map_int32_t_int32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                            }
                        }
                        else
                        {
                            LBound bound = 0;
                            PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header_anonymous_map_int32_t_int32_t_unbounded, bound,
                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_int32_t_unbounded), key_flags_anonymous_map_int32_t_int32_t_unbounded,
                                        eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_int32_t_unbounded));
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_int32_t_int32_t_unbounded"))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_map_int32_t_int32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                            }
                        }
                        return_code_SequenceMap =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_map_int32_t_int32_t_unbounded", type_ids_SequenceMap);
                        if (return_code_SequenceMap != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_int32_t_int32_t_unbounded: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                    }
                    CommonAliasBody common_Inner_alias_map_helper;
                    if (EK_COMPLETE == type_ids_SequenceMap.type_identifier1()._d() || TK_NONE == type_ids_SequenceMap.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceMap.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceMap.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceMap.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceMap.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceMap.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceMap.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceMap.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceMap.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_SequenceMap.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_SequenceMap.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceMap.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_SequenceMap.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_SequenceMap.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceMap.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_Inner_alias_map_helper = TypeObjectUtils::build_common_alias_body(related_flags_Inner_alias_map_helper, type_ids_SequenceMap.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_SequenceMap.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceMap.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceMap.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceMap.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceMap.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceMap.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceMap.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceMap.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceMap.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_SequenceMap.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_SequenceMap.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceMap.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_SequenceMap.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_SequenceMap.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceMap.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_Inner_alias_map_helper = TypeObjectUtils::build_common_alias_body(related_flags_Inner_alias_map_helper, type_ids_SequenceMap.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Inner_alias_map_helper related TypeIdentifier inconsistent.");
                        return;
                    }
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Inner_alias_map_helper;
                    ann_custom_Inner_alias_map_helper.reset();
                    CompleteAliasBody body_Inner_alias_map_helper = TypeObjectUtils::build_complete_alias_body(common_Inner_alias_map_helper, member_ann_builtin_Inner_alias_map_helper, ann_custom_Inner_alias_map_helper);
                    CompleteAliasType alias_type_Inner_alias_map_helper = TypeObjectUtils::build_complete_alias_type(alias_flags_Inner_alias_map_helper, header_Inner_alias_map_helper, body_Inner_alias_map_helper);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_alias_type_object(alias_type_Inner_alias_map_helper, type_name_Inner_alias_map_helper.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Inner_alias_map_helper already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_SequenceMap =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "Inner_alias_map_helper", type_ids_SequenceMap);
                    if (return_code_SequenceMap != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Inner_alias_map_helper: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                TypeIdentifier* element_identifier_anonymous_sequence_anonymous_map_int32_t_int32_t_0_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_SequenceMap.type_identifier1()._d() || TK_NONE == type_ids_SequenceMap.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceMap.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceMap.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceMap.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceMap.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceMap.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceMap.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceMap.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceMap.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceMap.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceMap.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceMap.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceMap.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceMap.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceMap.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_anonymous_map_int32_t_int32_t_0_unbounded = new TypeIdentifier(type_ids_SequenceMap.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceMap.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceMap.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceMap.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceMap.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceMap.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceMap.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceMap.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceMap.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceMap.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceMap.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceMap.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceMap.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceMap.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceMap.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceMap.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_anonymous_map_int32_t_int32_t_0_unbounded = new TypeIdentifier(type_ids_SequenceMap.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_anonymous_map_int32_t_int32_t_0_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceMap.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_anonymous_map_int32_t_int32_t_0_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_anonymous_map_int32_t_int32_t_0_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_anonymous_map_int32_t_int32_t_0_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_anonymous_map_int32_t_int32_t_0_unbounded, element_flags_anonymous_sequence_anonymous_map_int32_t_int32_t_0_unbounded);
                std::string type_id_kind_anonymous_sequence_anonymous_map_int32_t_int32_t_0_unbounded("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_anonymous_map_int32_t_int32_t_0_unbounded == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_anonymous_map_int32_t_int32_t_0_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_anonymous_map_int32_t_int32_t_0_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_anonymous_map_int32_t_int32_t_0_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_anonymous_map_int32_t_int32_t_0_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_anonymous_map_int32_t_int32_t_0_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_anonymous_map_int32_t_int32_t_0_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_anonymous_map_int32_t_int32_t_0_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_anonymous_map_int32_t_int32_t_0_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceMap =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_anonymous_map_int32_t_int32_t_0_unbounded", type_ids_SequenceMap);
                if (return_code_SequenceMap != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_anonymous_map_int32_t_int32_t_0_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_sequence_map = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_sequence_map;
            MemberId member_id_var_sequence_map = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceMap.type_identifier1()._d() || TK_NONE == type_ids_SequenceMap.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceMap.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceMap.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceMap.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceMap.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceMap.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceMap.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceMap.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceMap.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceMap.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceMap.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceMap.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceMap.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceMap.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceMap.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_map = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_map, member_flags_var_sequence_map, type_ids_SequenceMap.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceMap.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceMap.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceMap.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceMap.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceMap.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceMap.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceMap.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceMap.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceMap.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceMap.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceMap.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceMap.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceMap.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceMap.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceMap.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_map = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_map, member_flags_var_sequence_map, type_ids_SequenceMap.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_sequence_map member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_sequence_map = "var_sequence_map";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_sequence_map;
            ann_custom_SequenceMap.reset();
            CompleteMemberDetail detail_var_sequence_map = TypeObjectUtils::build_complete_member_detail(name_var_sequence_map, member_ann_builtin_var_sequence_map, ann_custom_SequenceMap);
            CompleteStructMember member_var_sequence_map = TypeObjectUtils::build_complete_struct_member(common_var_sequence_map, detail_var_sequence_map);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceMap, member_var_sequence_map);
        }
        CompleteStructType struct_type_SequenceMap = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceMap, header_SequenceMap, member_seq_SequenceMap);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceMap, type_name_SequenceMap.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceMap already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceMap =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceMap", type_ids_SequenceMap);
        if (return_code_SequenceMap != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceMap: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SequenceUnion_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceUnion = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceUnion;
        TypeIdentifierPair type_ids_SequenceUnion;
        QualifiedTypeName type_name_SequenceUnion = "SequenceUnion";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceUnion;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceUnion;
        CompleteTypeDetail detail_SequenceUnion = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceUnion, ann_custom_SequenceUnion, type_name_SequenceUnion.to_string());
        CompleteStructHeader header_SequenceUnion;
        header_SequenceUnion = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceUnion);
        CompleteStructMemberSeq member_seq_SequenceUnion;
        {
            return_code_SequenceUnion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_InnerUnionHelper_unbounded", type_ids_SequenceUnion);

            if (return_code_SequenceUnion != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceUnion =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerUnionHelper", type_ids_SequenceUnion);

                if (return_code_SequenceUnion != eprosima::fastdds::dds::RETCODE_OK)
                {
                    {
                        ReturnCode_t return_code_InnerUnionHelper;
                        TypeIdentifierPair type_ids_InnerUnionHelper;
                        UnionTypeFlag union_flags_InnerUnionHelper = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                true, false);
                        QualifiedTypeName type_name_InnerUnionHelper = "InnerUnionHelper";
                        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_InnerUnionHelper;
                        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_InnerUnionHelper;
                        AppliedAnnotationSeq tmp_ann_custom_InnerUnionHelper;
                        eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim_InnerUnionHelper;
                        if (!tmp_ann_custom_InnerUnionHelper.empty())
                        {
                            ann_custom_InnerUnionHelper = tmp_ann_custom_InnerUnionHelper;
                        }

                        CompleteTypeDetail detail_InnerUnionHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_InnerUnionHelper, ann_custom_InnerUnionHelper, type_name_InnerUnionHelper.to_string());
                        CompleteUnionHeader header_InnerUnionHelper = TypeObjectUtils::build_complete_union_header(detail_InnerUnionHelper);
                        UnionDiscriminatorFlag member_flags_InnerUnionHelper = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false);
                        return_code_InnerUnionHelper =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids_InnerUnionHelper);

                        if (return_code_InnerUnionHelper != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonDiscriminatorMember common_InnerUnionHelper;
                        if (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1()._d() || TK_NONE == type_ids_InnerUnionHelper.type_identifier2()._d())
                        {
                            common_InnerUnionHelper = TypeObjectUtils::build_common_discriminator_member(member_flags_InnerUnionHelper, type_ids_InnerUnionHelper.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2()._d())
                        {
                            common_InnerUnionHelper = TypeObjectUtils::build_common_discriminator_member(member_flags_InnerUnionHelper, type_ids_InnerUnionHelper.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "InnerUnionHelper discriminator TypeIdentifier inconsistent.");
                            return;
                        }
                        type_ann_builtin_InnerUnionHelper.reset();
                        ann_custom_InnerUnionHelper.reset();
                        CompleteDiscriminatorMember discriminator_InnerUnionHelper = TypeObjectUtils::build_complete_discriminator_member(common_InnerUnionHelper,
                                type_ann_builtin_InnerUnionHelper, ann_custom_InnerUnionHelper);
                        CompleteUnionMemberSeq member_seq_InnerUnionHelper;
                        {
                            return_code_InnerUnionHelper =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_int32_t", type_ids_InnerUnionHelper);

                            if (return_code_InnerUnionHelper != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "longValue Union member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            UnionMemberFlag member_flags_longValue = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false);
                            UnionCaseLabelSeq label_seq_longValue;
                            TypeObjectUtils::add_union_case_label(label_seq_longValue, static_cast<int32_t>(0));
                            CommonUnionMember common_longValue;
                            MemberId member_id_longValue = 0x00000001;
                            if (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1()._d() || TK_NONE == type_ids_InnerUnionHelper.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_longValue = TypeObjectUtils::build_common_union_member(member_id_longValue, member_flags_longValue, type_ids_InnerUnionHelper.type_identifier1(),
                                        label_seq_longValue);
                            }
                            else if (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_longValue = TypeObjectUtils::build_common_union_member(member_id_longValue, member_flags_longValue, type_ids_InnerUnionHelper.type_identifier2(),
                                        label_seq_longValue);
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Union longValue member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_longValue = "longValue";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_longValue;
                            ann_custom_InnerUnionHelper.reset();
                            CompleteMemberDetail detail_longValue = TypeObjectUtils::build_complete_member_detail(name_longValue, member_ann_builtin_longValue, ann_custom_InnerUnionHelper);
                            CompleteUnionMember member_longValue = TypeObjectUtils::build_complete_union_member(common_longValue, detail_longValue);
                            TypeObjectUtils::add_complete_union_member(member_seq_InnerUnionHelper, member_longValue);
                        }
                        {
                            return_code_InnerUnionHelper =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_float", type_ids_InnerUnionHelper);

                            if (return_code_InnerUnionHelper != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "floatValue Union member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            UnionMemberFlag member_flags_floatValue = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false);
                            UnionCaseLabelSeq label_seq_floatValue;
                            TypeObjectUtils::add_union_case_label(label_seq_floatValue, static_cast<int32_t>(1));
                            CommonUnionMember common_floatValue;
                            MemberId member_id_floatValue = 0x00000002;
                            if (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1()._d() || TK_NONE == type_ids_InnerUnionHelper.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_floatValue = TypeObjectUtils::build_common_union_member(member_id_floatValue, member_flags_floatValue, type_ids_InnerUnionHelper.type_identifier1(),
                                        label_seq_floatValue);
                            }
                            else if (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_floatValue = TypeObjectUtils::build_common_union_member(member_id_floatValue, member_flags_floatValue, type_ids_InnerUnionHelper.type_identifier2(),
                                        label_seq_floatValue);
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Union floatValue member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_floatValue = "floatValue";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_floatValue;
                            ann_custom_InnerUnionHelper.reset();
                            CompleteMemberDetail detail_floatValue = TypeObjectUtils::build_complete_member_detail(name_floatValue, member_ann_builtin_floatValue, ann_custom_InnerUnionHelper);
                            CompleteUnionMember member_floatValue = TypeObjectUtils::build_complete_union_member(common_floatValue, detail_floatValue);
                            TypeObjectUtils::add_complete_union_member(member_seq_InnerUnionHelper, member_floatValue);
                        }
                        {
                            return_code_InnerUnionHelper =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_int16_t", type_ids_InnerUnionHelper);

                            if (return_code_InnerUnionHelper != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "shortValue Union member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            UnionMemberFlag member_flags_shortValue = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    true, false);
                            UnionCaseLabelSeq label_seq_shortValue;
                            CommonUnionMember common_shortValue;
                            MemberId member_id_shortValue = 0x00000003;
                            if (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1()._d() || TK_NONE == type_ids_InnerUnionHelper.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_shortValue = TypeObjectUtils::build_common_union_member(member_id_shortValue, member_flags_shortValue, type_ids_InnerUnionHelper.type_identifier1(),
                                        label_seq_shortValue);
                            }
                            else if (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_shortValue = TypeObjectUtils::build_common_union_member(member_id_shortValue, member_flags_shortValue, type_ids_InnerUnionHelper.type_identifier2(),
                                        label_seq_shortValue);
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Union shortValue member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_shortValue = "shortValue";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_shortValue;
                            ann_custom_InnerUnionHelper.reset();
                            CompleteMemberDetail detail_shortValue = TypeObjectUtils::build_complete_member_detail(name_shortValue, member_ann_builtin_shortValue, ann_custom_InnerUnionHelper);
                            CompleteUnionMember member_shortValue = TypeObjectUtils::build_complete_union_member(common_shortValue, detail_shortValue);
                            TypeObjectUtils::add_complete_union_member(member_seq_InnerUnionHelper, member_shortValue);
                        }
                        CompleteUnionType union_type_InnerUnionHelper = TypeObjectUtils::build_complete_union_type(union_flags_InnerUnionHelper, header_InnerUnionHelper, discriminator_InnerUnionHelper,
                                member_seq_InnerUnionHelper);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_union_type_object(union_type_InnerUnionHelper, type_name_InnerUnionHelper.to_string()))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "InnerUnionHelper already registered in TypeObjectRegistry for a different type.");
                        }
                        return_code_InnerUnionHelper =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "InnerUnionHelper", type_ids_InnerUnionHelper);
                        if (return_code_InnerUnionHelper != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "InnerUnionHelper: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                    }
                }
                TypeIdentifier* element_identifier_anonymous_sequence_InnerUnionHelper_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_SequenceUnion.type_identifier1()._d() || TK_NONE == type_ids_SequenceUnion.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceUnion.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceUnion.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceUnion.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceUnion.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceUnion.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceUnion.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_InnerUnionHelper_unbounded = new TypeIdentifier(type_ids_SequenceUnion.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceUnion.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceUnion.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceUnion.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceUnion.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceUnion.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceUnion.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceUnion.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_InnerUnionHelper_unbounded = new TypeIdentifier(type_ids_SequenceUnion.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_InnerUnionHelper_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceUnion.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_InnerUnionHelper_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_InnerUnionHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_InnerUnionHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_InnerUnionHelper_unbounded, element_flags_anonymous_sequence_InnerUnionHelper_unbounded);
                std::string type_id_kind_anonymous_sequence_InnerUnionHelper_unbounded("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_InnerUnionHelper_unbounded == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_InnerUnionHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_InnerUnionHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_InnerUnionHelper_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_InnerUnionHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_InnerUnionHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_InnerUnionHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_InnerUnionHelper_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_InnerUnionHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceUnion =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_InnerUnionHelper_unbounded", type_ids_SequenceUnion);
                if (return_code_SequenceUnion != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_InnerUnionHelper_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_sequence_union = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_sequence_union;
            MemberId member_id_var_sequence_union = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceUnion.type_identifier1()._d() || TK_NONE == type_ids_SequenceUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_union = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_union, member_flags_var_sequence_union, type_ids_SequenceUnion.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_union = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_union, member_flags_var_sequence_union, type_ids_SequenceUnion.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_sequence_union member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_sequence_union = "var_sequence_union";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_sequence_union;
            ann_custom_SequenceUnion.reset();
            CompleteMemberDetail detail_var_sequence_union = TypeObjectUtils::build_complete_member_detail(name_var_sequence_union, member_ann_builtin_var_sequence_union, ann_custom_SequenceUnion);
            CompleteStructMember member_var_sequence_union = TypeObjectUtils::build_complete_struct_member(common_var_sequence_union, detail_var_sequence_union);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceUnion, member_var_sequence_union);
        }
        CompleteStructType struct_type_SequenceUnion = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceUnion, header_SequenceUnion, member_seq_SequenceUnion);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceUnion, type_name_SequenceUnion.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceUnion already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceUnion =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceUnion", type_ids_SequenceUnion);
        if (return_code_SequenceUnion != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceUnion: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SequenceStructure_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceStructure = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceStructure;
        TypeIdentifierPair type_ids_SequenceStructure;
        QualifiedTypeName type_name_SequenceStructure = "SequenceStructure";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceStructure;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceStructure;
        CompleteTypeDetail detail_SequenceStructure = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceStructure, ann_custom_SequenceStructure, type_name_SequenceStructure.to_string());
        CompleteStructHeader header_SequenceStructure;
        header_SequenceStructure = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceStructure);
        CompleteStructMemberSeq member_seq_SequenceStructure;
        {
            return_code_SequenceStructure =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_InnerStructureHelper_unbounded", type_ids_SequenceStructure);

            if (return_code_SequenceStructure != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceStructure =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerStructureHelper", type_ids_SequenceStructure);

                if (return_code_SequenceStructure != eprosima::fastdds::dds::RETCODE_OK)
                {
                    {
                        StructTypeFlag struct_flags_InnerStructureHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                true, false);
                        ReturnCode_t return_code_InnerStructureHelper;
                        TypeIdentifierPair type_ids_InnerStructureHelper;
                        QualifiedTypeName type_name_InnerStructureHelper = "InnerStructureHelper";
                        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_InnerStructureHelper;
                        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_InnerStructureHelper;
                        AppliedAnnotationSeq tmp_ann_custom_InnerStructureHelper;
                        eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim_InnerStructureHelper;
                        if (!tmp_ann_custom_InnerStructureHelper.empty())
                        {
                            ann_custom_InnerStructureHelper = tmp_ann_custom_InnerStructureHelper;
                        }

                        CompleteTypeDetail detail_InnerStructureHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_InnerStructureHelper, ann_custom_InnerStructureHelper, type_name_InnerStructureHelper.to_string());
                        CompleteStructHeader header_InnerStructureHelper;
                        header_InnerStructureHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_InnerStructureHelper);
                        CompleteStructMemberSeq member_seq_InnerStructureHelper;
                        {
                            return_code_InnerStructureHelper =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_int32_t", type_ids_InnerStructureHelper);

                            if (return_code_InnerStructureHelper != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "field1 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            StructMemberFlag member_flags_field1 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_field1;
                            MemberId member_id_field1 = 0x00000000;
                            if (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1()._d() || TK_NONE == type_ids_InnerStructureHelper.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_field1 = TypeObjectUtils::build_common_struct_member(member_id_field1, member_flags_field1, type_ids_InnerStructureHelper.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_field1 = TypeObjectUtils::build_common_struct_member(member_id_field1, member_flags_field1, type_ids_InnerStructureHelper.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure field1 member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_field1 = "field1";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_field1;
                            ann_custom_InnerStructureHelper.reset();
                            CompleteMemberDetail detail_field1 = TypeObjectUtils::build_complete_member_detail(name_field1, member_ann_builtin_field1, ann_custom_InnerStructureHelper);
                            CompleteStructMember member_field1 = TypeObjectUtils::build_complete_struct_member(common_field1, detail_field1);
                            TypeObjectUtils::add_complete_struct_member(member_seq_InnerStructureHelper, member_field1);
                        }
                        {
                            return_code_InnerStructureHelper =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_float", type_ids_InnerStructureHelper);

                            if (return_code_InnerStructureHelper != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "field2 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            StructMemberFlag member_flags_field2 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_field2;
                            MemberId member_id_field2 = 0x00000001;
                            if (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1()._d() || TK_NONE == type_ids_InnerStructureHelper.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_field2 = TypeObjectUtils::build_common_struct_member(member_id_field2, member_flags_field2, type_ids_InnerStructureHelper.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_field2 = TypeObjectUtils::build_common_struct_member(member_id_field2, member_flags_field2, type_ids_InnerStructureHelper.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure field2 member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_field2 = "field2";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_field2;
                            ann_custom_InnerStructureHelper.reset();
                            CompleteMemberDetail detail_field2 = TypeObjectUtils::build_complete_member_detail(name_field2, member_ann_builtin_field2, ann_custom_InnerStructureHelper);
                            CompleteStructMember member_field2 = TypeObjectUtils::build_complete_struct_member(common_field2, detail_field2);
                            TypeObjectUtils::add_complete_struct_member(member_seq_InnerStructureHelper, member_field2);
                        }
                        CompleteStructType struct_type_InnerStructureHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_InnerStructureHelper, header_InnerStructureHelper, member_seq_InnerStructureHelper);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_struct_type_object(struct_type_InnerStructureHelper, type_name_InnerStructureHelper.to_string()))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "InnerStructureHelper already registered in TypeObjectRegistry for a different type.");
                        }
                        return_code_InnerStructureHelper =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "InnerStructureHelper", type_ids_InnerStructureHelper);
                        if (return_code_InnerStructureHelper != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "InnerStructureHelper: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                    }
                }
                TypeIdentifier* element_identifier_anonymous_sequence_InnerStructureHelper_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_SequenceStructure.type_identifier1()._d() || TK_NONE == type_ids_SequenceStructure.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceStructure.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceStructure.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceStructure.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceStructure.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceStructure.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceStructure.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceStructure.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceStructure.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceStructure.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceStructure.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceStructure.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceStructure.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceStructure.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceStructure.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_InnerStructureHelper_unbounded = new TypeIdentifier(type_ids_SequenceStructure.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceStructure.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceStructure.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceStructure.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceStructure.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceStructure.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceStructure.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceStructure.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceStructure.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceStructure.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceStructure.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceStructure.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceStructure.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceStructure.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceStructure.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceStructure.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_InnerStructureHelper_unbounded = new TypeIdentifier(type_ids_SequenceStructure.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_InnerStructureHelper_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceStructure.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_InnerStructureHelper_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_InnerStructureHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_InnerStructureHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_InnerStructureHelper_unbounded, element_flags_anonymous_sequence_InnerStructureHelper_unbounded);
                std::string type_id_kind_anonymous_sequence_InnerStructureHelper_unbounded("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_InnerStructureHelper_unbounded == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_InnerStructureHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_InnerStructureHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_InnerStructureHelper_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_InnerStructureHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_InnerStructureHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_InnerStructureHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_InnerStructureHelper_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_InnerStructureHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceStructure =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_InnerStructureHelper_unbounded", type_ids_SequenceStructure);
                if (return_code_SequenceStructure != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_InnerStructureHelper_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_sequence_structure = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_sequence_structure;
            MemberId member_id_var_sequence_structure = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceStructure.type_identifier1()._d() || TK_NONE == type_ids_SequenceStructure.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceStructure.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceStructure.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceStructure.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceStructure.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceStructure.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceStructure.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceStructure.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceStructure.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceStructure.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceStructure.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceStructure.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceStructure.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceStructure.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceStructure.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_structure = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_structure, member_flags_var_sequence_structure, type_ids_SequenceStructure.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceStructure.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceStructure.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceStructure.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceStructure.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceStructure.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceStructure.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceStructure.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceStructure.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceStructure.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceStructure.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceStructure.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceStructure.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceStructure.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceStructure.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceStructure.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_structure = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_structure, member_flags_var_sequence_structure, type_ids_SequenceStructure.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_sequence_structure member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_sequence_structure = "var_sequence_structure";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_sequence_structure;
            ann_custom_SequenceStructure.reset();
            CompleteMemberDetail detail_var_sequence_structure = TypeObjectUtils::build_complete_member_detail(name_var_sequence_structure, member_ann_builtin_var_sequence_structure, ann_custom_SequenceStructure);
            CompleteStructMember member_var_sequence_structure = TypeObjectUtils::build_complete_struct_member(common_var_sequence_structure, detail_var_sequence_structure);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceStructure, member_var_sequence_structure);
        }
        CompleteStructType struct_type_SequenceStructure = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceStructure, header_SequenceStructure, member_seq_SequenceStructure);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceStructure, type_name_SequenceStructure.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceStructure already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceStructure =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceStructure", type_ids_SequenceStructure);
        if (return_code_SequenceStructure != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceStructure: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SequenceBitset_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceBitset = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceBitset;
        TypeIdentifierPair type_ids_SequenceBitset;
        QualifiedTypeName type_name_SequenceBitset = "SequenceBitset";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceBitset;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceBitset;
        CompleteTypeDetail detail_SequenceBitset = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceBitset, ann_custom_SequenceBitset, type_name_SequenceBitset.to_string());
        CompleteStructHeader header_SequenceBitset;
        header_SequenceBitset = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceBitset);
        CompleteStructMemberSeq member_seq_SequenceBitset;
        {
            return_code_SequenceBitset =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_InnerBitsetHelper_unbounded", type_ids_SequenceBitset);

            if (return_code_SequenceBitset != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceBitset =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerBitsetHelper", type_ids_SequenceBitset);

                if (return_code_SequenceBitset != eprosima::fastdds::dds::RETCODE_OK)
                {
                    BitsetTypeFlag bitset_flags_InnerBitsetHelper = 0;
                    QualifiedTypeName type_name_InnerBitsetHelper = "InnerBitsetHelper";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_InnerBitsetHelper;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_InnerBitsetHelper;
                    CompleteTypeDetail detail_InnerBitsetHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_InnerBitsetHelper, ann_custom_InnerBitsetHelper, type_name_InnerBitsetHelper.to_string());
                    CompleteBitsetHeader header_InnerBitsetHelper = TypeObjectUtils::build_complete_bitset_header(detail_InnerBitsetHelper);
                    CompleteBitfieldSeq field_seq_InnerBitsetHelper;
                    {
                        uint16_t position_a = 0;
                        BitsetMemberFlag flags_a = 0;
                        uint8_t bitcount_a = 3;
                        TypeKind holder_type_a = TK_BYTE;
                        CommonBitfield common_a = TypeObjectUtils::build_common_bitfield(position_a, flags_a, bitcount_a, holder_type_a);
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_a;
                        ann_custom_InnerBitsetHelper.reset();
                        MemberName name_a = "a";
                        CompleteMemberDetail detail_a = TypeObjectUtils::build_complete_member_detail(name_a, member_ann_builtin_a, ann_custom_InnerBitsetHelper);
                        CompleteBitfield bitfield_a = TypeObjectUtils::build_complete_bitfield(common_a, detail_a);
                        TypeObjectUtils::add_complete_bitfield(field_seq_InnerBitsetHelper, bitfield_a);
                    }
                    {
                        uint16_t position_b = 3;
                        BitsetMemberFlag flags_b = 0;
                        uint8_t bitcount_b = 1;
                        TypeKind holder_type_b = TK_BOOLEAN;
                        CommonBitfield common_b = TypeObjectUtils::build_common_bitfield(position_b, flags_b, bitcount_b, holder_type_b);
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_b;
                        ann_custom_InnerBitsetHelper.reset();
                        MemberName name_b = "b";
                        CompleteMemberDetail detail_b = TypeObjectUtils::build_complete_member_detail(name_b, member_ann_builtin_b, ann_custom_InnerBitsetHelper);
                        CompleteBitfield bitfield_b = TypeObjectUtils::build_complete_bitfield(common_b, detail_b);
                        TypeObjectUtils::add_complete_bitfield(field_seq_InnerBitsetHelper, bitfield_b);
                    }
                    {
                        uint16_t position_c = 8;
                        BitsetMemberFlag flags_c = 0;
                        uint8_t bitcount_c = 10;
                        TypeKind holder_type_c = TK_UINT16;
                        CommonBitfield common_c = TypeObjectUtils::build_common_bitfield(position_c, flags_c, bitcount_c, holder_type_c);
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_c;
                        ann_custom_InnerBitsetHelper.reset();
                        MemberName name_c = "c";
                        CompleteMemberDetail detail_c = TypeObjectUtils::build_complete_member_detail(name_c, member_ann_builtin_c, ann_custom_InnerBitsetHelper);
                        CompleteBitfield bitfield_c = TypeObjectUtils::build_complete_bitfield(common_c, detail_c);
                        TypeObjectUtils::add_complete_bitfield(field_seq_InnerBitsetHelper, bitfield_c);
                    }
                    {
                        uint16_t position_d = 21;
                        BitsetMemberFlag flags_d = 0;
                        uint8_t bitcount_d = 12;
                        TypeKind holder_type_d = TK_INT16;
                        CommonBitfield common_d = TypeObjectUtils::build_common_bitfield(position_d, flags_d, bitcount_d, holder_type_d);
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_d;
                        ann_custom_InnerBitsetHelper.reset();
                        MemberName name_d = "d";
                        CompleteMemberDetail detail_d = TypeObjectUtils::build_complete_member_detail(name_d, member_ann_builtin_d, ann_custom_InnerBitsetHelper);
                        CompleteBitfield bitfield_d = TypeObjectUtils::build_complete_bitfield(common_d, detail_d);
                        TypeObjectUtils::add_complete_bitfield(field_seq_InnerBitsetHelper, bitfield_d);
                    }
                    CompleteBitsetType bitset_type_InnerBitsetHelper = TypeObjectUtils::build_complete_bitset_type(bitset_flags_InnerBitsetHelper, header_InnerBitsetHelper, field_seq_InnerBitsetHelper);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_bitset_type_object(bitset_type_InnerBitsetHelper, type_name_InnerBitsetHelper.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "InnerBitsetHelper already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_SequenceBitset =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "InnerBitsetHelper", type_ids_SequenceBitset);
                    if (return_code_SequenceBitset != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "InnerBitsetHelper: Given Bitset TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                TypeIdentifier* element_identifier_anonymous_sequence_InnerBitsetHelper_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_SequenceBitset.type_identifier1()._d() || TK_NONE == type_ids_SequenceBitset.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceBitset.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceBitset.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceBitset.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceBitset.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceBitset.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceBitset.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceBitset.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceBitset.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceBitset.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceBitset.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceBitset.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceBitset.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceBitset.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceBitset.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_InnerBitsetHelper_unbounded = new TypeIdentifier(type_ids_SequenceBitset.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceBitset.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceBitset.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceBitset.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceBitset.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceBitset.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceBitset.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceBitset.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceBitset.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceBitset.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceBitset.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceBitset.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceBitset.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceBitset.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceBitset.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceBitset.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_InnerBitsetHelper_unbounded = new TypeIdentifier(type_ids_SequenceBitset.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_InnerBitsetHelper_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceBitset.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_InnerBitsetHelper_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_InnerBitsetHelper_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_InnerBitsetHelper_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_InnerBitsetHelper_unbounded, element_flags_anonymous_sequence_InnerBitsetHelper_unbounded);
                std::string type_id_kind_anonymous_sequence_InnerBitsetHelper_unbounded("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_InnerBitsetHelper_unbounded == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_InnerBitsetHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_InnerBitsetHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_InnerBitsetHelper_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_InnerBitsetHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_InnerBitsetHelper_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_InnerBitsetHelper_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_InnerBitsetHelper_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_InnerBitsetHelper_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceBitset =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_InnerBitsetHelper_unbounded", type_ids_SequenceBitset);
                if (return_code_SequenceBitset != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_InnerBitsetHelper_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_sequence_bitset = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_sequence_bitset;
            MemberId member_id_var_sequence_bitset = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceBitset.type_identifier1()._d() || TK_NONE == type_ids_SequenceBitset.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceBitset.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceBitset.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceBitset.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceBitset.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceBitset.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceBitset.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceBitset.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceBitset.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceBitset.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceBitset.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceBitset.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceBitset.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceBitset.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceBitset.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_bitset = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_bitset, member_flags_var_sequence_bitset, type_ids_SequenceBitset.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceBitset.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceBitset.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceBitset.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceBitset.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceBitset.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceBitset.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceBitset.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceBitset.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceBitset.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceBitset.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceBitset.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceBitset.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceBitset.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceBitset.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceBitset.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_bitset = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_bitset, member_flags_var_sequence_bitset, type_ids_SequenceBitset.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_sequence_bitset member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_sequence_bitset = "var_sequence_bitset";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_sequence_bitset;
            ann_custom_SequenceBitset.reset();
            CompleteMemberDetail detail_var_sequence_bitset = TypeObjectUtils::build_complete_member_detail(name_var_sequence_bitset, member_ann_builtin_var_sequence_bitset, ann_custom_SequenceBitset);
            CompleteStructMember member_var_sequence_bitset = TypeObjectUtils::build_complete_struct_member(common_var_sequence_bitset, detail_var_sequence_bitset);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceBitset, member_var_sequence_bitset);
        }
        CompleteStructType struct_type_SequenceBitset = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceBitset, header_SequenceBitset, member_seq_SequenceBitset);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceBitset, type_name_SequenceBitset.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceBitset already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceBitset =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceBitset", type_ids_SequenceBitset);
        if (return_code_SequenceBitset != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceBitset: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_BoundedSmallSequences_type_identifier()
{
    {
        StructTypeFlag struct_flags_BoundedSmallSequences = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_BoundedSmallSequences;
        TypeIdentifierPair type_ids_BoundedSmallSequences;
        QualifiedTypeName type_name_BoundedSmallSequences = "BoundedSmallSequences";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_BoundedSmallSequences;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_BoundedSmallSequences;
        CompleteTypeDetail detail_BoundedSmallSequences = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_BoundedSmallSequences, ann_custom_BoundedSmallSequences, type_name_BoundedSmallSequences.to_string());
        CompleteStructHeader header_BoundedSmallSequences;
        header_BoundedSmallSequences = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_BoundedSmallSequences);
        CompleteStructMemberSeq member_seq_BoundedSmallSequences;
        {
            return_code_BoundedSmallSequences =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_int16_t_1", type_ids_BoundedSmallSequences);

            if (return_code_BoundedSmallSequences != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_BoundedSmallSequences =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_BoundedSmallSequences);

                if (return_code_BoundedSmallSequences != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_sequence_int16_t_1 {nullptr};
                if (EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1()._d() || TK_NONE == type_ids_BoundedSmallSequences.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_BoundedSmallSequences.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_BoundedSmallSequences.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_BoundedSmallSequences.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_BoundedSmallSequences.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_BoundedSmallSequences.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_BoundedSmallSequences.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_int16_t_1 = new TypeIdentifier(type_ids_BoundedSmallSequences.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_BoundedSmallSequences.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_BoundedSmallSequences.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_BoundedSmallSequences.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_BoundedSmallSequences.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_BoundedSmallSequences.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_BoundedSmallSequences.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_int16_t_1 = new TypeIdentifier(type_ids_BoundedSmallSequences.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_int16_t_1 = EK_COMPLETE;
                if (TK_NONE == type_ids_BoundedSmallSequences.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_int16_t_1 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_int16_t_1 = 0;
                PlainCollectionHeader header_anonymous_sequence_int16_t_1 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_int16_t_1, element_flags_anonymous_sequence_int16_t_1);
                std::string type_id_kind_anonymous_sequence_int16_t_1("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_int16_t_1 == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = static_cast<SBound>(1);
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_int16_t_1, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int16_t_1));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_int16_t_1"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_int16_t_1 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 1;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_int16_t_1, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int16_t_1));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_int16_t_1"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_int16_t_1 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_BoundedSmallSequences =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_int16_t_1", type_ids_BoundedSmallSequences);
                if (return_code_BoundedSmallSequences != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_int16_t_1: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_sequence_small = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_sequence_small;
            MemberId member_id_var_sequence_small = 0x00000000;
            if (EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1()._d() || TK_NONE == type_ids_BoundedSmallSequences.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BoundedSmallSequences.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BoundedSmallSequences.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BoundedSmallSequences.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BoundedSmallSequences.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BoundedSmallSequences.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BoundedSmallSequences.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_small = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_small, member_flags_var_sequence_small, type_ids_BoundedSmallSequences.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BoundedSmallSequences.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BoundedSmallSequences.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BoundedSmallSequences.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BoundedSmallSequences.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BoundedSmallSequences.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BoundedSmallSequences.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_small = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_small, member_flags_var_sequence_small, type_ids_BoundedSmallSequences.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_sequence_small member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_sequence_small = "var_sequence_small";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_sequence_small;
            ann_custom_BoundedSmallSequences.reset();
            CompleteMemberDetail detail_var_sequence_small = TypeObjectUtils::build_complete_member_detail(name_var_sequence_small, member_ann_builtin_var_sequence_small, ann_custom_BoundedSmallSequences);
            CompleteStructMember member_var_sequence_small = TypeObjectUtils::build_complete_struct_member(common_var_sequence_small, detail_var_sequence_small);
            TypeObjectUtils::add_complete_struct_member(member_seq_BoundedSmallSequences, member_var_sequence_small);
        }
        {
            return_code_BoundedSmallSequences =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_anonymous_string_unbounded_5", type_ids_BoundedSmallSequences);

            if (return_code_BoundedSmallSequences != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_BoundedSmallSequences =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_BoundedSmallSequences);

                if (return_code_BoundedSmallSequences != eprosima::fastdds::dds::RETCODE_OK)
                {
                    std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                    if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                    {
                        LBound bound = 255;
                        StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                "anonymous_string_unbounded"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_string_unbounded: Unknown String kind.");
                        return;
                    }
                    return_code_BoundedSmallSequences =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_string_unbounded", type_ids_BoundedSmallSequences);
                    if (return_code_BoundedSmallSequences != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                TypeIdentifier* element_identifier_anonymous_sequence_anonymous_string_unbounded_5 {nullptr};
                if (EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1()._d() || TK_NONE == type_ids_BoundedSmallSequences.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_BoundedSmallSequences.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_BoundedSmallSequences.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_BoundedSmallSequences.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_BoundedSmallSequences.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_BoundedSmallSequences.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_BoundedSmallSequences.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_anonymous_string_unbounded_5 = new TypeIdentifier(type_ids_BoundedSmallSequences.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_BoundedSmallSequences.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_BoundedSmallSequences.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_BoundedSmallSequences.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_BoundedSmallSequences.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_BoundedSmallSequences.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_BoundedSmallSequences.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_anonymous_string_unbounded_5 = new TypeIdentifier(type_ids_BoundedSmallSequences.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_anonymous_string_unbounded_5 = EK_COMPLETE;
                if (TK_NONE == type_ids_BoundedSmallSequences.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_anonymous_string_unbounded_5 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_anonymous_string_unbounded_5 = 0;
                PlainCollectionHeader header_anonymous_sequence_anonymous_string_unbounded_5 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_anonymous_string_unbounded_5, element_flags_anonymous_sequence_anonymous_string_unbounded_5);
                std::string type_id_kind_anonymous_sequence_anonymous_string_unbounded_5("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_anonymous_string_unbounded_5 == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = static_cast<SBound>(5);
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_anonymous_string_unbounded_5, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_anonymous_string_unbounded_5));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_anonymous_string_unbounded_5"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_anonymous_string_unbounded_5 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 5;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_anonymous_string_unbounded_5, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_anonymous_string_unbounded_5));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_anonymous_string_unbounded_5"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_anonymous_string_unbounded_5 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_BoundedSmallSequences =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_anonymous_string_unbounded_5", type_ids_BoundedSmallSequences);
                if (return_code_BoundedSmallSequences != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_anonymous_string_unbounded_5: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_unbounded_string_small_bounded_sequence = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_unbounded_string_small_bounded_sequence;
            MemberId member_id_var_unbounded_string_small_bounded_sequence = 0x00000001;
            if (EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1()._d() || TK_NONE == type_ids_BoundedSmallSequences.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BoundedSmallSequences.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BoundedSmallSequences.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BoundedSmallSequences.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BoundedSmallSequences.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BoundedSmallSequences.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BoundedSmallSequences.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_unbounded_string_small_bounded_sequence = TypeObjectUtils::build_common_struct_member(member_id_var_unbounded_string_small_bounded_sequence, member_flags_var_unbounded_string_small_bounded_sequence, type_ids_BoundedSmallSequences.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BoundedSmallSequences.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BoundedSmallSequences.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BoundedSmallSequences.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BoundedSmallSequences.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BoundedSmallSequences.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BoundedSmallSequences.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BoundedSmallSequences.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_unbounded_string_small_bounded_sequence = TypeObjectUtils::build_common_struct_member(member_id_var_unbounded_string_small_bounded_sequence, member_flags_var_unbounded_string_small_bounded_sequence, type_ids_BoundedSmallSequences.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_unbounded_string_small_bounded_sequence member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_unbounded_string_small_bounded_sequence = "var_unbounded_string_small_bounded_sequence";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_unbounded_string_small_bounded_sequence;
            ann_custom_BoundedSmallSequences.reset();
            CompleteMemberDetail detail_var_unbounded_string_small_bounded_sequence = TypeObjectUtils::build_complete_member_detail(name_var_unbounded_string_small_bounded_sequence, member_ann_builtin_var_unbounded_string_small_bounded_sequence, ann_custom_BoundedSmallSequences);
            CompleteStructMember member_var_unbounded_string_small_bounded_sequence = TypeObjectUtils::build_complete_struct_member(common_var_unbounded_string_small_bounded_sequence, detail_var_unbounded_string_small_bounded_sequence);
            TypeObjectUtils::add_complete_struct_member(member_seq_BoundedSmallSequences, member_var_unbounded_string_small_bounded_sequence);
        }
        CompleteStructType struct_type_BoundedSmallSequences = TypeObjectUtils::build_complete_struct_type(struct_flags_BoundedSmallSequences, header_BoundedSmallSequences, member_seq_BoundedSmallSequences);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_BoundedSmallSequences, type_name_BoundedSmallSequences.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "BoundedSmallSequences already registered in TypeObjectRegistry for a different type.");
        }
        return_code_BoundedSmallSequences =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "BoundedSmallSequences", type_ids_BoundedSmallSequences);
        if (return_code_BoundedSmallSequences != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "BoundedSmallSequences: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_BoundedBigSequences_type_identifier()
{
    {
        StructTypeFlag struct_flags_BoundedBigSequences = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_BoundedBigSequences;
        TypeIdentifierPair type_ids_BoundedBigSequences;
        QualifiedTypeName type_name_BoundedBigSequences = "BoundedBigSequences";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_BoundedBigSequences;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_BoundedBigSequences;
        CompleteTypeDetail detail_BoundedBigSequences = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_BoundedBigSequences, ann_custom_BoundedBigSequences, type_name_BoundedBigSequences.to_string());
        CompleteStructHeader header_BoundedBigSequences;
        header_BoundedBigSequences = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_BoundedBigSequences);
        CompleteStructMemberSeq member_seq_BoundedBigSequences;
        {
            return_code_BoundedBigSequences =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_int16_t_41925", type_ids_BoundedBigSequences);

            if (return_code_BoundedBigSequences != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_BoundedBigSequences =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_BoundedBigSequences);

                if (return_code_BoundedBigSequences != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_sequence_int16_t_41925 {nullptr};
                if (EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1()._d() || TK_NONE == type_ids_BoundedBigSequences.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_BoundedBigSequences.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_BoundedBigSequences.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_BoundedBigSequences.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_BoundedBigSequences.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_BoundedBigSequences.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_BoundedBigSequences.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_int16_t_41925 = new TypeIdentifier(type_ids_BoundedBigSequences.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_BoundedBigSequences.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_BoundedBigSequences.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_BoundedBigSequences.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_BoundedBigSequences.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_BoundedBigSequences.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_BoundedBigSequences.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_int16_t_41925 = new TypeIdentifier(type_ids_BoundedBigSequences.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_int16_t_41925 = EK_COMPLETE;
                if (TK_NONE == type_ids_BoundedBigSequences.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_int16_t_41925 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_int16_t_41925 = 0;
                PlainCollectionHeader header_anonymous_sequence_int16_t_41925 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_int16_t_41925, element_flags_anonymous_sequence_int16_t_41925);
                std::string type_id_kind_anonymous_sequence_int16_t_41925("TI_PLAIN_SEQUENCE_LARGE");
                if (type_id_kind_anonymous_sequence_int16_t_41925 == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = static_cast<SBound>(41925);
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_int16_t_41925, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int16_t_41925));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_int16_t_41925"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_int16_t_41925 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 41925;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_int16_t_41925, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int16_t_41925));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_int16_t_41925"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_int16_t_41925 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_BoundedBigSequences =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_int16_t_41925", type_ids_BoundedBigSequences);
                if (return_code_BoundedBigSequences != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_int16_t_41925: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_sequence_big = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_sequence_big;
            MemberId member_id_var_sequence_big = 0x00000000;
            if (EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1()._d() || TK_NONE == type_ids_BoundedBigSequences.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BoundedBigSequences.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BoundedBigSequences.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BoundedBigSequences.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BoundedBigSequences.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BoundedBigSequences.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BoundedBigSequences.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_big = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_big, member_flags_var_sequence_big, type_ids_BoundedBigSequences.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BoundedBigSequences.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BoundedBigSequences.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BoundedBigSequences.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BoundedBigSequences.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BoundedBigSequences.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BoundedBigSequences.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence_big = TypeObjectUtils::build_common_struct_member(member_id_var_sequence_big, member_flags_var_sequence_big, type_ids_BoundedBigSequences.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_sequence_big member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_sequence_big = "var_sequence_big";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_sequence_big;
            ann_custom_BoundedBigSequences.reset();
            CompleteMemberDetail detail_var_sequence_big = TypeObjectUtils::build_complete_member_detail(name_var_sequence_big, member_ann_builtin_var_sequence_big, ann_custom_BoundedBigSequences);
            CompleteStructMember member_var_sequence_big = TypeObjectUtils::build_complete_struct_member(common_var_sequence_big, detail_var_sequence_big);
            TypeObjectUtils::add_complete_struct_member(member_seq_BoundedBigSequences, member_var_sequence_big);
        }
        {
            return_code_BoundedBigSequences =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_anonymous_string_unbounded_256", type_ids_BoundedBigSequences);

            if (return_code_BoundedBigSequences != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_BoundedBigSequences =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_BoundedBigSequences);

                if (return_code_BoundedBigSequences != eprosima::fastdds::dds::RETCODE_OK)
                {
                    std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                    if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                    {
                        LBound bound = 255;
                        StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                "anonymous_string_unbounded"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_string_unbounded: Unknown String kind.");
                        return;
                    }
                    return_code_BoundedBigSequences =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_string_unbounded", type_ids_BoundedBigSequences);
                    if (return_code_BoundedBigSequences != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                TypeIdentifier* element_identifier_anonymous_sequence_anonymous_string_unbounded_256 {nullptr};
                if (EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1()._d() || TK_NONE == type_ids_BoundedBigSequences.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_BoundedBigSequences.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_BoundedBigSequences.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_BoundedBigSequences.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_BoundedBigSequences.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_BoundedBigSequences.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_BoundedBigSequences.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_anonymous_string_unbounded_256 = new TypeIdentifier(type_ids_BoundedBigSequences.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_BoundedBigSequences.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_BoundedBigSequences.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_BoundedBigSequences.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_BoundedBigSequences.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_BoundedBigSequences.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_BoundedBigSequences.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_anonymous_string_unbounded_256 = new TypeIdentifier(type_ids_BoundedBigSequences.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_anonymous_string_unbounded_256 = EK_COMPLETE;
                if (TK_NONE == type_ids_BoundedBigSequences.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_anonymous_string_unbounded_256 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_anonymous_string_unbounded_256 = 0;
                PlainCollectionHeader header_anonymous_sequence_anonymous_string_unbounded_256 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_anonymous_string_unbounded_256, element_flags_anonymous_sequence_anonymous_string_unbounded_256);
                std::string type_id_kind_anonymous_sequence_anonymous_string_unbounded_256("TI_PLAIN_SEQUENCE_LARGE");
                if (type_id_kind_anonymous_sequence_anonymous_string_unbounded_256 == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = static_cast<SBound>(256);
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_anonymous_string_unbounded_256, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_anonymous_string_unbounded_256));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_anonymous_string_unbounded_256"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_anonymous_string_unbounded_256 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 256;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_anonymous_string_unbounded_256, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_anonymous_string_unbounded_256));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_anonymous_string_unbounded_256"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_anonymous_string_unbounded_256 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_BoundedBigSequences =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_anonymous_string_unbounded_256", type_ids_BoundedBigSequences);
                if (return_code_BoundedBigSequences != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_anonymous_string_unbounded_256: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_unbounded_string_large_bounded_sequence = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_unbounded_string_large_bounded_sequence;
            MemberId member_id_var_unbounded_string_large_bounded_sequence = 0x00000001;
            if (EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1()._d() || TK_NONE == type_ids_BoundedBigSequences.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BoundedBigSequences.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BoundedBigSequences.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BoundedBigSequences.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BoundedBigSequences.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BoundedBigSequences.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BoundedBigSequences.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_unbounded_string_large_bounded_sequence = TypeObjectUtils::build_common_struct_member(member_id_var_unbounded_string_large_bounded_sequence, member_flags_var_unbounded_string_large_bounded_sequence, type_ids_BoundedBigSequences.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BoundedBigSequences.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BoundedBigSequences.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BoundedBigSequences.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BoundedBigSequences.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BoundedBigSequences.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BoundedBigSequences.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BoundedBigSequences.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_unbounded_string_large_bounded_sequence = TypeObjectUtils::build_common_struct_member(member_id_var_unbounded_string_large_bounded_sequence, member_flags_var_unbounded_string_large_bounded_sequence, type_ids_BoundedBigSequences.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_unbounded_string_large_bounded_sequence member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_unbounded_string_large_bounded_sequence = "var_unbounded_string_large_bounded_sequence";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_unbounded_string_large_bounded_sequence;
            ann_custom_BoundedBigSequences.reset();
            CompleteMemberDetail detail_var_unbounded_string_large_bounded_sequence = TypeObjectUtils::build_complete_member_detail(name_var_unbounded_string_large_bounded_sequence, member_ann_builtin_var_unbounded_string_large_bounded_sequence, ann_custom_BoundedBigSequences);
            CompleteStructMember member_var_unbounded_string_large_bounded_sequence = TypeObjectUtils::build_complete_struct_member(common_var_unbounded_string_large_bounded_sequence, detail_var_unbounded_string_large_bounded_sequence);
            TypeObjectUtils::add_complete_struct_member(member_seq_BoundedBigSequences, member_var_unbounded_string_large_bounded_sequence);
        }
        CompleteStructType struct_type_BoundedBigSequences = TypeObjectUtils::build_complete_struct_type(struct_flags_BoundedBigSequences, header_BoundedBigSequences, member_seq_BoundedBigSequences);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_BoundedBigSequences, type_name_BoundedBigSequences.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "BoundedBigSequences already registered in TypeObjectRegistry for a different type.");
        }
        return_code_BoundedBigSequences =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "BoundedBigSequences", type_ids_BoundedBigSequences);
        if (return_code_BoundedBigSequences != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "BoundedBigSequences: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}

