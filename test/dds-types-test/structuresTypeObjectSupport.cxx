// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file structuresTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "structuresTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "structures.hpp"

#include "helpers/basic_inner_types.hpp"

using namespace eprosima::fastdds::dds::xtypes;

void register_structures_type_objects()
{
    static std::once_flag once_flag;
    std::call_once(once_flag, []()
            {
                register_InnerStructureHelper_type_identifier();

                register_InnerEmptyStructureHelper_type_identifier();

                register_InnerUnionHelper_type_identifier();

                register_StructShort_type_identifier();

                register_StructUnsignedShort_type_identifier();

                register_StructLong_type_identifier();

                register_StructUnsignedLong_type_identifier();

                register_StructLongLong_type_identifier();

                register_StructUnsignedLongLong_type_identifier();

                register_StructFloat_type_identifier();

                register_StructDouble_type_identifier();

                register_StructLongDouble_type_identifier();

                register_StructBoolean_type_identifier();

                register_StructOctet_type_identifier();

                register_StructChar8_type_identifier();

                register_StructChar16_type_identifier();

                register_StructString_type_identifier();

                register_StructWString_type_identifier();

                register_StructBoundedString_type_identifier();

                register_StructBoundedWString_type_identifier();

                register_StructEnum_type_identifier();

                register_StructBitMask_type_identifier();

                register_StructAlias_type_identifier();

                register_StructShortArray_type_identifier();

                register_StructSequence_type_identifier();

                register_StructMap_type_identifier();

                register_StructUnion_type_identifier();

                register_StructStructure_type_identifier();

                register_StructBitset_type_identifier();

                register_StructEmpty_type_identifier();

                register_Structures_type_identifier();

                testing_1::register_testing_1_foo_type_identifier();

                testing_2::register_testing_2_foo_type_identifier();

                register_bar_type_identifier();

                register_root1_type_identifier();

                register_root2_type_identifier();

                register_root_type_identifier();

            });
}

void register_StructShort_type_identifier()
{
    {
        StructTypeFlag struct_flags_StructShort = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_StructShort;
        TypeIdentifierPair type_ids_StructShort;
        QualifiedTypeName type_name_StructShort = "StructShort";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructShort;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructShort;
        CompleteTypeDetail detail_StructShort = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructShort, ann_custom_StructShort, type_name_StructShort.to_string());
        CompleteStructHeader header_StructShort;
        header_StructShort = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructShort);
        CompleteStructMemberSeq member_seq_StructShort;
        {
            return_code_StructShort =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int16_t", type_ids_StructShort);

            if (return_code_StructShort != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "var_short Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_var_short = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_short;
            MemberId member_id_var_short = 0x00000000;
            if (EK_COMPLETE == type_ids_StructShort.type_identifier1()._d() || TK_NONE == type_ids_StructShort.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructShort.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructShort.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructShort.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructShort.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructShort.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructShort.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructShort.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructShort.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructShort.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructShort.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructShort.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructShort.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructShort.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructShort.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_short = TypeObjectUtils::build_common_struct_member(member_id_var_short, member_flags_var_short, type_ids_StructShort.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StructShort.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructShort.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructShort.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructShort.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructShort.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructShort.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructShort.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructShort.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructShort.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructShort.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructShort.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructShort.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructShort.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructShort.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructShort.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_short = TypeObjectUtils::build_common_struct_member(member_id_var_short, member_flags_var_short, type_ids_StructShort.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_short member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_short = "var_short";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_short;
            ann_custom_StructShort.reset();
            CompleteMemberDetail detail_var_short = TypeObjectUtils::build_complete_member_detail(name_var_short, member_ann_builtin_var_short, ann_custom_StructShort);
            CompleteStructMember member_var_short = TypeObjectUtils::build_complete_struct_member(common_var_short, detail_var_short);
            TypeObjectUtils::add_complete_struct_member(member_seq_StructShort, member_var_short);
        }
        CompleteStructType struct_type_StructShort = TypeObjectUtils::build_complete_struct_type(struct_flags_StructShort, header_StructShort, member_seq_StructShort);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructShort, type_name_StructShort.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StructShort already registered in TypeObjectRegistry for a different type.");
        }
        return_code_StructShort =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "StructShort", type_ids_StructShort);
        if (return_code_StructShort != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StructShort: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_StructUnsignedShort_type_identifier()
{
    {
        StructTypeFlag struct_flags_StructUnsignedShort = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_StructUnsignedShort;
        TypeIdentifierPair type_ids_StructUnsignedShort;
        QualifiedTypeName type_name_StructUnsignedShort = "StructUnsignedShort";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructUnsignedShort;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructUnsignedShort;
        CompleteTypeDetail detail_StructUnsignedShort = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructUnsignedShort, ann_custom_StructUnsignedShort, type_name_StructUnsignedShort.to_string());
        CompleteStructHeader header_StructUnsignedShort;
        header_StructUnsignedShort = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructUnsignedShort);
        CompleteStructMemberSeq member_seq_StructUnsignedShort;
        {
            return_code_StructUnsignedShort =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint16_t", type_ids_StructUnsignedShort);

            if (return_code_StructUnsignedShort != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "var_ushort Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_var_ushort = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_ushort;
            MemberId member_id_var_ushort = 0x00000000;
            if (EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier1()._d() || TK_NONE == type_ids_StructUnsignedShort.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructUnsignedShort.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructUnsignedShort.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructUnsignedShort.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructUnsignedShort.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructUnsignedShort.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructUnsignedShort.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_ushort = TypeObjectUtils::build_common_struct_member(member_id_var_ushort, member_flags_var_ushort, type_ids_StructUnsignedShort.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructUnsignedShort.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructUnsignedShort.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructUnsignedShort.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructUnsignedShort.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructUnsignedShort.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructUnsignedShort.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_ushort = TypeObjectUtils::build_common_struct_member(member_id_var_ushort, member_flags_var_ushort, type_ids_StructUnsignedShort.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_ushort member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_ushort = "var_ushort";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_ushort;
            ann_custom_StructUnsignedShort.reset();
            CompleteMemberDetail detail_var_ushort = TypeObjectUtils::build_complete_member_detail(name_var_ushort, member_ann_builtin_var_ushort, ann_custom_StructUnsignedShort);
            CompleteStructMember member_var_ushort = TypeObjectUtils::build_complete_struct_member(common_var_ushort, detail_var_ushort);
            TypeObjectUtils::add_complete_struct_member(member_seq_StructUnsignedShort, member_var_ushort);
        }
        CompleteStructType struct_type_StructUnsignedShort = TypeObjectUtils::build_complete_struct_type(struct_flags_StructUnsignedShort, header_StructUnsignedShort, member_seq_StructUnsignedShort);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructUnsignedShort, type_name_StructUnsignedShort.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StructUnsignedShort already registered in TypeObjectRegistry for a different type.");
        }
        return_code_StructUnsignedShort =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "StructUnsignedShort", type_ids_StructUnsignedShort);
        if (return_code_StructUnsignedShort != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StructUnsignedShort: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_StructLong_type_identifier()
{
    {
        StructTypeFlag struct_flags_StructLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_StructLong;
        TypeIdentifierPair type_ids_StructLong;
        QualifiedTypeName type_name_StructLong = "StructLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructLong;
        CompleteTypeDetail detail_StructLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructLong, ann_custom_StructLong, type_name_StructLong.to_string());
        CompleteStructHeader header_StructLong;
        header_StructLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructLong);
        CompleteStructMemberSeq member_seq_StructLong;
        {
            return_code_StructLong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_StructLong);

            if (return_code_StructLong != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "var_long Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_var_long = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_long;
            MemberId member_id_var_long = 0x00000000;
            if (EK_COMPLETE == type_ids_StructLong.type_identifier1()._d() || TK_NONE == type_ids_StructLong.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructLong.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructLong.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructLong.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructLong.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructLong.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructLong.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructLong.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructLong.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructLong.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructLong.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructLong.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructLong.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructLong.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructLong.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_long = TypeObjectUtils::build_common_struct_member(member_id_var_long, member_flags_var_long, type_ids_StructLong.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StructLong.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructLong.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructLong.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructLong.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructLong.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructLong.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructLong.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructLong.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructLong.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructLong.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructLong.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructLong.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructLong.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructLong.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructLong.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_long = TypeObjectUtils::build_common_struct_member(member_id_var_long, member_flags_var_long, type_ids_StructLong.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_long member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_long = "var_long";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_long;
            ann_custom_StructLong.reset();
            CompleteMemberDetail detail_var_long = TypeObjectUtils::build_complete_member_detail(name_var_long, member_ann_builtin_var_long, ann_custom_StructLong);
            CompleteStructMember member_var_long = TypeObjectUtils::build_complete_struct_member(common_var_long, detail_var_long);
            TypeObjectUtils::add_complete_struct_member(member_seq_StructLong, member_var_long);
        }
        CompleteStructType struct_type_StructLong = TypeObjectUtils::build_complete_struct_type(struct_flags_StructLong, header_StructLong, member_seq_StructLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructLong, type_name_StructLong.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StructLong already registered in TypeObjectRegistry for a different type.");
        }
        return_code_StructLong =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "StructLong", type_ids_StructLong);
        if (return_code_StructLong != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StructLong: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_StructUnsignedLong_type_identifier()
{
    {
        StructTypeFlag struct_flags_StructUnsignedLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_StructUnsignedLong;
        TypeIdentifierPair type_ids_StructUnsignedLong;
        QualifiedTypeName type_name_StructUnsignedLong = "StructUnsignedLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructUnsignedLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructUnsignedLong;
        CompleteTypeDetail detail_StructUnsignedLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructUnsignedLong, ann_custom_StructUnsignedLong, type_name_StructUnsignedLong.to_string());
        CompleteStructHeader header_StructUnsignedLong;
        header_StructUnsignedLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructUnsignedLong);
        CompleteStructMemberSeq member_seq_StructUnsignedLong;
        {
            return_code_StructUnsignedLong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids_StructUnsignedLong);

            if (return_code_StructUnsignedLong != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "var_ulong Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_var_ulong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_ulong;
            MemberId member_id_var_ulong = 0x00000000;
            if (EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier1()._d() || TK_NONE == type_ids_StructUnsignedLong.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructUnsignedLong.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructUnsignedLong.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructUnsignedLong.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructUnsignedLong.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructUnsignedLong.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructUnsignedLong.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_ulong = TypeObjectUtils::build_common_struct_member(member_id_var_ulong, member_flags_var_ulong, type_ids_StructUnsignedLong.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructUnsignedLong.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructUnsignedLong.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructUnsignedLong.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructUnsignedLong.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructUnsignedLong.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructUnsignedLong.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_ulong = TypeObjectUtils::build_common_struct_member(member_id_var_ulong, member_flags_var_ulong, type_ids_StructUnsignedLong.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_ulong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_ulong = "var_ulong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_ulong;
            ann_custom_StructUnsignedLong.reset();
            CompleteMemberDetail detail_var_ulong = TypeObjectUtils::build_complete_member_detail(name_var_ulong, member_ann_builtin_var_ulong, ann_custom_StructUnsignedLong);
            CompleteStructMember member_var_ulong = TypeObjectUtils::build_complete_struct_member(common_var_ulong, detail_var_ulong);
            TypeObjectUtils::add_complete_struct_member(member_seq_StructUnsignedLong, member_var_ulong);
        }
        CompleteStructType struct_type_StructUnsignedLong = TypeObjectUtils::build_complete_struct_type(struct_flags_StructUnsignedLong, header_StructUnsignedLong, member_seq_StructUnsignedLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructUnsignedLong, type_name_StructUnsignedLong.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StructUnsignedLong already registered in TypeObjectRegistry for a different type.");
        }
        return_code_StructUnsignedLong =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "StructUnsignedLong", type_ids_StructUnsignedLong);
        if (return_code_StructUnsignedLong != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StructUnsignedLong: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_StructLongLong_type_identifier()
{
    {
        StructTypeFlag struct_flags_StructLongLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_StructLongLong;
        TypeIdentifierPair type_ids_StructLongLong;
        QualifiedTypeName type_name_StructLongLong = "StructLongLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructLongLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructLongLong;
        CompleteTypeDetail detail_StructLongLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructLongLong, ann_custom_StructLongLong, type_name_StructLongLong.to_string());
        CompleteStructHeader header_StructLongLong;
        header_StructLongLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructLongLong);
        CompleteStructMemberSeq member_seq_StructLongLong;
        {
            return_code_StructLongLong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int64_t", type_ids_StructLongLong);

            if (return_code_StructLongLong != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "var_longlong Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_var_longlong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_longlong;
            MemberId member_id_var_longlong = 0x00000000;
            if (EK_COMPLETE == type_ids_StructLongLong.type_identifier1()._d() || TK_NONE == type_ids_StructLongLong.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructLongLong.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructLongLong.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructLongLong.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructLongLong.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructLongLong.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructLongLong.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructLongLong.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructLongLong.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructLongLong.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructLongLong.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructLongLong.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructLongLong.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructLongLong.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructLongLong.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_longlong = TypeObjectUtils::build_common_struct_member(member_id_var_longlong, member_flags_var_longlong, type_ids_StructLongLong.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StructLongLong.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructLongLong.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructLongLong.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructLongLong.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructLongLong.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructLongLong.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructLongLong.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructLongLong.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructLongLong.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructLongLong.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructLongLong.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructLongLong.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructLongLong.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructLongLong.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructLongLong.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_longlong = TypeObjectUtils::build_common_struct_member(member_id_var_longlong, member_flags_var_longlong, type_ids_StructLongLong.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_longlong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_longlong = "var_longlong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_longlong;
            ann_custom_StructLongLong.reset();
            CompleteMemberDetail detail_var_longlong = TypeObjectUtils::build_complete_member_detail(name_var_longlong, member_ann_builtin_var_longlong, ann_custom_StructLongLong);
            CompleteStructMember member_var_longlong = TypeObjectUtils::build_complete_struct_member(common_var_longlong, detail_var_longlong);
            TypeObjectUtils::add_complete_struct_member(member_seq_StructLongLong, member_var_longlong);
        }
        CompleteStructType struct_type_StructLongLong = TypeObjectUtils::build_complete_struct_type(struct_flags_StructLongLong, header_StructLongLong, member_seq_StructLongLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructLongLong, type_name_StructLongLong.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StructLongLong already registered in TypeObjectRegistry for a different type.");
        }
        return_code_StructLongLong =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "StructLongLong", type_ids_StructLongLong);
        if (return_code_StructLongLong != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StructLongLong: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_StructUnsignedLongLong_type_identifier()
{
    {
        StructTypeFlag struct_flags_StructUnsignedLongLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_StructUnsignedLongLong;
        TypeIdentifierPair type_ids_StructUnsignedLongLong;
        QualifiedTypeName type_name_StructUnsignedLongLong = "StructUnsignedLongLong";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructUnsignedLongLong;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructUnsignedLongLong;
        CompleteTypeDetail detail_StructUnsignedLongLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructUnsignedLongLong, ann_custom_StructUnsignedLongLong, type_name_StructUnsignedLongLong.to_string());
        CompleteStructHeader header_StructUnsignedLongLong;
        header_StructUnsignedLongLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructUnsignedLongLong);
        CompleteStructMemberSeq member_seq_StructUnsignedLongLong;
        {
            return_code_StructUnsignedLongLong =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids_StructUnsignedLongLong);

            if (return_code_StructUnsignedLongLong != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "var_ulonglong Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_var_ulonglong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_ulonglong;
            MemberId member_id_var_ulonglong = 0x00000000;
            if (EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier1()._d() || TK_NONE == type_ids_StructUnsignedLongLong.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructUnsignedLongLong.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructUnsignedLongLong.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructUnsignedLongLong.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructUnsignedLongLong.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructUnsignedLongLong.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructUnsignedLongLong.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_ulonglong = TypeObjectUtils::build_common_struct_member(member_id_var_ulonglong, member_flags_var_ulonglong, type_ids_StructUnsignedLongLong.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructUnsignedLongLong.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructUnsignedLongLong.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructUnsignedLongLong.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructUnsignedLongLong.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructUnsignedLongLong.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructUnsignedLongLong.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_ulonglong = TypeObjectUtils::build_common_struct_member(member_id_var_ulonglong, member_flags_var_ulonglong, type_ids_StructUnsignedLongLong.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_ulonglong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_ulonglong = "var_ulonglong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_ulonglong;
            ann_custom_StructUnsignedLongLong.reset();
            CompleteMemberDetail detail_var_ulonglong = TypeObjectUtils::build_complete_member_detail(name_var_ulonglong, member_ann_builtin_var_ulonglong, ann_custom_StructUnsignedLongLong);
            CompleteStructMember member_var_ulonglong = TypeObjectUtils::build_complete_struct_member(common_var_ulonglong, detail_var_ulonglong);
            TypeObjectUtils::add_complete_struct_member(member_seq_StructUnsignedLongLong, member_var_ulonglong);
        }
        CompleteStructType struct_type_StructUnsignedLongLong = TypeObjectUtils::build_complete_struct_type(struct_flags_StructUnsignedLongLong, header_StructUnsignedLongLong, member_seq_StructUnsignedLongLong);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructUnsignedLongLong, type_name_StructUnsignedLongLong.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StructUnsignedLongLong already registered in TypeObjectRegistry for a different type.");
        }
        return_code_StructUnsignedLongLong =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "StructUnsignedLongLong", type_ids_StructUnsignedLongLong);
        if (return_code_StructUnsignedLongLong != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StructUnsignedLongLong: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_StructFloat_type_identifier()
{
    {
        StructTypeFlag struct_flags_StructFloat = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_StructFloat;
        TypeIdentifierPair type_ids_StructFloat;
        QualifiedTypeName type_name_StructFloat = "StructFloat";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructFloat;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructFloat;
        CompleteTypeDetail detail_StructFloat = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructFloat, ann_custom_StructFloat, type_name_StructFloat.to_string());
        CompleteStructHeader header_StructFloat;
        header_StructFloat = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructFloat);
        CompleteStructMemberSeq member_seq_StructFloat;
        {
            return_code_StructFloat =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_StructFloat);

            if (return_code_StructFloat != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "var_float Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_var_float = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_float;
            MemberId member_id_var_float = 0x00000000;
            if (EK_COMPLETE == type_ids_StructFloat.type_identifier1()._d() || TK_NONE == type_ids_StructFloat.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructFloat.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructFloat.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructFloat.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructFloat.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructFloat.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructFloat.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructFloat.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructFloat.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructFloat.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructFloat.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructFloat.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructFloat.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructFloat.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructFloat.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_float = TypeObjectUtils::build_common_struct_member(member_id_var_float, member_flags_var_float, type_ids_StructFloat.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StructFloat.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructFloat.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructFloat.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructFloat.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructFloat.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructFloat.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructFloat.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructFloat.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructFloat.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructFloat.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructFloat.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructFloat.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructFloat.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructFloat.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructFloat.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_float = TypeObjectUtils::build_common_struct_member(member_id_var_float, member_flags_var_float, type_ids_StructFloat.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_float member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_float = "var_float";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_float;
            ann_custom_StructFloat.reset();
            CompleteMemberDetail detail_var_float = TypeObjectUtils::build_complete_member_detail(name_var_float, member_ann_builtin_var_float, ann_custom_StructFloat);
            CompleteStructMember member_var_float = TypeObjectUtils::build_complete_struct_member(common_var_float, detail_var_float);
            TypeObjectUtils::add_complete_struct_member(member_seq_StructFloat, member_var_float);
        }
        CompleteStructType struct_type_StructFloat = TypeObjectUtils::build_complete_struct_type(struct_flags_StructFloat, header_StructFloat, member_seq_StructFloat);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructFloat, type_name_StructFloat.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StructFloat already registered in TypeObjectRegistry for a different type.");
        }
        return_code_StructFloat =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "StructFloat", type_ids_StructFloat);
        if (return_code_StructFloat != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StructFloat: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_StructDouble_type_identifier()
{
    {
        StructTypeFlag struct_flags_StructDouble = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_StructDouble;
        TypeIdentifierPair type_ids_StructDouble;
        QualifiedTypeName type_name_StructDouble = "StructDouble";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructDouble;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructDouble;
        CompleteTypeDetail detail_StructDouble = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructDouble, ann_custom_StructDouble, type_name_StructDouble.to_string());
        CompleteStructHeader header_StructDouble;
        header_StructDouble = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructDouble);
        CompleteStructMemberSeq member_seq_StructDouble;
        {
            return_code_StructDouble =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_StructDouble);

            if (return_code_StructDouble != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "var_double Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_var_double = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_double;
            MemberId member_id_var_double = 0x00000000;
            if (EK_COMPLETE == type_ids_StructDouble.type_identifier1()._d() || TK_NONE == type_ids_StructDouble.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructDouble.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructDouble.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructDouble.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructDouble.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructDouble.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructDouble.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructDouble.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructDouble.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructDouble.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructDouble.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructDouble.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructDouble.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructDouble.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructDouble.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_double = TypeObjectUtils::build_common_struct_member(member_id_var_double, member_flags_var_double, type_ids_StructDouble.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StructDouble.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructDouble.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructDouble.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructDouble.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructDouble.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructDouble.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructDouble.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructDouble.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructDouble.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructDouble.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructDouble.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructDouble.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructDouble.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructDouble.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructDouble.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_double = TypeObjectUtils::build_common_struct_member(member_id_var_double, member_flags_var_double, type_ids_StructDouble.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_double member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_double = "var_double";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_double;
            ann_custom_StructDouble.reset();
            CompleteMemberDetail detail_var_double = TypeObjectUtils::build_complete_member_detail(name_var_double, member_ann_builtin_var_double, ann_custom_StructDouble);
            CompleteStructMember member_var_double = TypeObjectUtils::build_complete_struct_member(common_var_double, detail_var_double);
            TypeObjectUtils::add_complete_struct_member(member_seq_StructDouble, member_var_double);
        }
        CompleteStructType struct_type_StructDouble = TypeObjectUtils::build_complete_struct_type(struct_flags_StructDouble, header_StructDouble, member_seq_StructDouble);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructDouble, type_name_StructDouble.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StructDouble already registered in TypeObjectRegistry for a different type.");
        }
        return_code_StructDouble =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "StructDouble", type_ids_StructDouble);
        if (return_code_StructDouble != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StructDouble: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_StructLongDouble_type_identifier()
{
    {
        StructTypeFlag struct_flags_StructLongDouble = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_StructLongDouble;
        TypeIdentifierPair type_ids_StructLongDouble;
        QualifiedTypeName type_name_StructLongDouble = "StructLongDouble";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructLongDouble;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructLongDouble;
        CompleteTypeDetail detail_StructLongDouble = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructLongDouble, ann_custom_StructLongDouble, type_name_StructLongDouble.to_string());
        CompleteStructHeader header_StructLongDouble;
        header_StructLongDouble = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructLongDouble);
        CompleteStructMemberSeq member_seq_StructLongDouble;
        {
            return_code_StructLongDouble =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_longdouble", type_ids_StructLongDouble);

            if (return_code_StructLongDouble != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "var_longdouble Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_var_longdouble = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_longdouble;
            MemberId member_id_var_longdouble = 0x00000000;
            if (EK_COMPLETE == type_ids_StructLongDouble.type_identifier1()._d() || TK_NONE == type_ids_StructLongDouble.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructLongDouble.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructLongDouble.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructLongDouble.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructLongDouble.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructLongDouble.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructLongDouble.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructLongDouble.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructLongDouble.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructLongDouble.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructLongDouble.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructLongDouble.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructLongDouble.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructLongDouble.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructLongDouble.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_longdouble = TypeObjectUtils::build_common_struct_member(member_id_var_longdouble, member_flags_var_longdouble, type_ids_StructLongDouble.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StructLongDouble.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructLongDouble.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructLongDouble.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructLongDouble.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructLongDouble.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructLongDouble.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructLongDouble.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructLongDouble.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructLongDouble.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructLongDouble.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructLongDouble.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructLongDouble.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructLongDouble.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructLongDouble.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructLongDouble.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_longdouble = TypeObjectUtils::build_common_struct_member(member_id_var_longdouble, member_flags_var_longdouble, type_ids_StructLongDouble.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_longdouble member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_longdouble = "var_longdouble";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_longdouble;
            ann_custom_StructLongDouble.reset();
            CompleteMemberDetail detail_var_longdouble = TypeObjectUtils::build_complete_member_detail(name_var_longdouble, member_ann_builtin_var_longdouble, ann_custom_StructLongDouble);
            CompleteStructMember member_var_longdouble = TypeObjectUtils::build_complete_struct_member(common_var_longdouble, detail_var_longdouble);
            TypeObjectUtils::add_complete_struct_member(member_seq_StructLongDouble, member_var_longdouble);
        }
        CompleteStructType struct_type_StructLongDouble = TypeObjectUtils::build_complete_struct_type(struct_flags_StructLongDouble, header_StructLongDouble, member_seq_StructLongDouble);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructLongDouble, type_name_StructLongDouble.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StructLongDouble already registered in TypeObjectRegistry for a different type.");
        }
        return_code_StructLongDouble =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "StructLongDouble", type_ids_StructLongDouble);
        if (return_code_StructLongDouble != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StructLongDouble: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_StructBoolean_type_identifier()
{
    {
        StructTypeFlag struct_flags_StructBoolean = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_StructBoolean;
        TypeIdentifierPair type_ids_StructBoolean;
        QualifiedTypeName type_name_StructBoolean = "StructBoolean";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructBoolean;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructBoolean;
        CompleteTypeDetail detail_StructBoolean = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructBoolean, ann_custom_StructBoolean, type_name_StructBoolean.to_string());
        CompleteStructHeader header_StructBoolean;
        header_StructBoolean = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructBoolean);
        CompleteStructMemberSeq member_seq_StructBoolean;
        {
            return_code_StructBoolean =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_StructBoolean);

            if (return_code_StructBoolean != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "var_boolean Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_var_boolean = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_boolean;
            MemberId member_id_var_boolean = 0x00000000;
            if (EK_COMPLETE == type_ids_StructBoolean.type_identifier1()._d() || TK_NONE == type_ids_StructBoolean.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructBoolean.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructBoolean.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructBoolean.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructBoolean.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructBoolean.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructBoolean.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructBoolean.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructBoolean.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructBoolean.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructBoolean.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructBoolean.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructBoolean.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructBoolean.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructBoolean.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_boolean = TypeObjectUtils::build_common_struct_member(member_id_var_boolean, member_flags_var_boolean, type_ids_StructBoolean.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StructBoolean.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructBoolean.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructBoolean.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructBoolean.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructBoolean.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructBoolean.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructBoolean.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructBoolean.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructBoolean.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructBoolean.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructBoolean.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructBoolean.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructBoolean.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructBoolean.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructBoolean.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_boolean = TypeObjectUtils::build_common_struct_member(member_id_var_boolean, member_flags_var_boolean, type_ids_StructBoolean.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_boolean member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_boolean = "var_boolean";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_boolean;
            ann_custom_StructBoolean.reset();
            CompleteMemberDetail detail_var_boolean = TypeObjectUtils::build_complete_member_detail(name_var_boolean, member_ann_builtin_var_boolean, ann_custom_StructBoolean);
            CompleteStructMember member_var_boolean = TypeObjectUtils::build_complete_struct_member(common_var_boolean, detail_var_boolean);
            TypeObjectUtils::add_complete_struct_member(member_seq_StructBoolean, member_var_boolean);
        }
        CompleteStructType struct_type_StructBoolean = TypeObjectUtils::build_complete_struct_type(struct_flags_StructBoolean, header_StructBoolean, member_seq_StructBoolean);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructBoolean, type_name_StructBoolean.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StructBoolean already registered in TypeObjectRegistry for a different type.");
        }
        return_code_StructBoolean =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "StructBoolean", type_ids_StructBoolean);
        if (return_code_StructBoolean != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StructBoolean: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_StructOctet_type_identifier()
{
    {
        StructTypeFlag struct_flags_StructOctet = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_StructOctet;
        TypeIdentifierPair type_ids_StructOctet;
        QualifiedTypeName type_name_StructOctet = "StructOctet";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructOctet;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructOctet;
        CompleteTypeDetail detail_StructOctet = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructOctet, ann_custom_StructOctet, type_name_StructOctet.to_string());
        CompleteStructHeader header_StructOctet;
        header_StructOctet = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructOctet);
        CompleteStructMemberSeq member_seq_StructOctet;
        {
            return_code_StructOctet =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_byte", type_ids_StructOctet);

            if (return_code_StructOctet != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "var_octet Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_var_octet = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_octet;
            MemberId member_id_var_octet = 0x00000000;
            if (EK_COMPLETE == type_ids_StructOctet.type_identifier1()._d() || TK_NONE == type_ids_StructOctet.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructOctet.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructOctet.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructOctet.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructOctet.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructOctet.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructOctet.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructOctet.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructOctet.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructOctet.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructOctet.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructOctet.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructOctet.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructOctet.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructOctet.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_octet = TypeObjectUtils::build_common_struct_member(member_id_var_octet, member_flags_var_octet, type_ids_StructOctet.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StructOctet.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructOctet.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructOctet.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructOctet.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructOctet.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructOctet.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructOctet.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructOctet.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructOctet.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructOctet.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructOctet.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructOctet.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructOctet.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructOctet.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructOctet.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_octet = TypeObjectUtils::build_common_struct_member(member_id_var_octet, member_flags_var_octet, type_ids_StructOctet.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_octet member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_octet = "var_octet";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_octet;
            ann_custom_StructOctet.reset();
            CompleteMemberDetail detail_var_octet = TypeObjectUtils::build_complete_member_detail(name_var_octet, member_ann_builtin_var_octet, ann_custom_StructOctet);
            CompleteStructMember member_var_octet = TypeObjectUtils::build_complete_struct_member(common_var_octet, detail_var_octet);
            TypeObjectUtils::add_complete_struct_member(member_seq_StructOctet, member_var_octet);
        }
        CompleteStructType struct_type_StructOctet = TypeObjectUtils::build_complete_struct_type(struct_flags_StructOctet, header_StructOctet, member_seq_StructOctet);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructOctet, type_name_StructOctet.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StructOctet already registered in TypeObjectRegistry for a different type.");
        }
        return_code_StructOctet =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "StructOctet", type_ids_StructOctet);
        if (return_code_StructOctet != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StructOctet: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_StructChar8_type_identifier()
{
    {
        StructTypeFlag struct_flags_StructChar8 = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_StructChar8;
        TypeIdentifierPair type_ids_StructChar8;
        QualifiedTypeName type_name_StructChar8 = "StructChar8";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructChar8;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructChar8;
        CompleteTypeDetail detail_StructChar8 = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructChar8, ann_custom_StructChar8, type_name_StructChar8.to_string());
        CompleteStructHeader header_StructChar8;
        header_StructChar8 = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructChar8);
        CompleteStructMemberSeq member_seq_StructChar8;
        {
            return_code_StructChar8 =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_char", type_ids_StructChar8);

            if (return_code_StructChar8 != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "var_char8 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_var_char8 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_char8;
            MemberId member_id_var_char8 = 0x00000000;
            if (EK_COMPLETE == type_ids_StructChar8.type_identifier1()._d() || TK_NONE == type_ids_StructChar8.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructChar8.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructChar8.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructChar8.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructChar8.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructChar8.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructChar8.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructChar8.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructChar8.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructChar8.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructChar8.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructChar8.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructChar8.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructChar8.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructChar8.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_char8 = TypeObjectUtils::build_common_struct_member(member_id_var_char8, member_flags_var_char8, type_ids_StructChar8.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StructChar8.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructChar8.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructChar8.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructChar8.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructChar8.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructChar8.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructChar8.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructChar8.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructChar8.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructChar8.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructChar8.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructChar8.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructChar8.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructChar8.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructChar8.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_char8 = TypeObjectUtils::build_common_struct_member(member_id_var_char8, member_flags_var_char8, type_ids_StructChar8.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_char8 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_char8 = "var_char8";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_char8;
            ann_custom_StructChar8.reset();
            CompleteMemberDetail detail_var_char8 = TypeObjectUtils::build_complete_member_detail(name_var_char8, member_ann_builtin_var_char8, ann_custom_StructChar8);
            CompleteStructMember member_var_char8 = TypeObjectUtils::build_complete_struct_member(common_var_char8, detail_var_char8);
            TypeObjectUtils::add_complete_struct_member(member_seq_StructChar8, member_var_char8);
        }
        CompleteStructType struct_type_StructChar8 = TypeObjectUtils::build_complete_struct_type(struct_flags_StructChar8, header_StructChar8, member_seq_StructChar8);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructChar8, type_name_StructChar8.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StructChar8 already registered in TypeObjectRegistry for a different type.");
        }
        return_code_StructChar8 =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "StructChar8", type_ids_StructChar8);
        if (return_code_StructChar8 != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StructChar8: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_StructChar16_type_identifier()
{
    {
        StructTypeFlag struct_flags_StructChar16 = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_StructChar16;
        TypeIdentifierPair type_ids_StructChar16;
        QualifiedTypeName type_name_StructChar16 = "StructChar16";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructChar16;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructChar16;
        CompleteTypeDetail detail_StructChar16 = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructChar16, ann_custom_StructChar16, type_name_StructChar16.to_string());
        CompleteStructHeader header_StructChar16;
        header_StructChar16 = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructChar16);
        CompleteStructMemberSeq member_seq_StructChar16;
        {
            return_code_StructChar16 =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_wchar_t", type_ids_StructChar16);

            if (return_code_StructChar16 != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "var_char16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_var_char16 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_char16;
            MemberId member_id_var_char16 = 0x00000000;
            if (EK_COMPLETE == type_ids_StructChar16.type_identifier1()._d() || TK_NONE == type_ids_StructChar16.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructChar16.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructChar16.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructChar16.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructChar16.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructChar16.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructChar16.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructChar16.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructChar16.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructChar16.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructChar16.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructChar16.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructChar16.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructChar16.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructChar16.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_char16 = TypeObjectUtils::build_common_struct_member(member_id_var_char16, member_flags_var_char16, type_ids_StructChar16.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StructChar16.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructChar16.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructChar16.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructChar16.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructChar16.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructChar16.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructChar16.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructChar16.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructChar16.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructChar16.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructChar16.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructChar16.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructChar16.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructChar16.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructChar16.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_char16 = TypeObjectUtils::build_common_struct_member(member_id_var_char16, member_flags_var_char16, type_ids_StructChar16.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_char16 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_char16 = "var_char16";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_char16;
            ann_custom_StructChar16.reset();
            CompleteMemberDetail detail_var_char16 = TypeObjectUtils::build_complete_member_detail(name_var_char16, member_ann_builtin_var_char16, ann_custom_StructChar16);
            CompleteStructMember member_var_char16 = TypeObjectUtils::build_complete_struct_member(common_var_char16, detail_var_char16);
            TypeObjectUtils::add_complete_struct_member(member_seq_StructChar16, member_var_char16);
        }
        CompleteStructType struct_type_StructChar16 = TypeObjectUtils::build_complete_struct_type(struct_flags_StructChar16, header_StructChar16, member_seq_StructChar16);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructChar16, type_name_StructChar16.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StructChar16 already registered in TypeObjectRegistry for a different type.");
        }
        return_code_StructChar16 =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "StructChar16", type_ids_StructChar16);
        if (return_code_StructChar16 != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StructChar16: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_StructString_type_identifier()
{
    {
        StructTypeFlag struct_flags_StructString = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_StructString;
        TypeIdentifierPair type_ids_StructString;
        QualifiedTypeName type_name_StructString = "StructString";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructString;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructString;
        CompleteTypeDetail detail_StructString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructString, ann_custom_StructString, type_name_StructString.to_string());
        CompleteStructHeader header_StructString;
        header_StructString = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructString);
        CompleteStructMemberSeq member_seq_StructString;
        {
            return_code_StructString =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_StructString);

            if (return_code_StructString != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                {
                    LBound bound = 255;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Unknown String kind.");
                    return;
                }
                return_code_StructString =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_StructString);
                if (return_code_StructString != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_string;
            MemberId member_id_var_string = 0x00000000;
            if (EK_COMPLETE == type_ids_StructString.type_identifier1()._d() || TK_NONE == type_ids_StructString.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructString.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructString.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructString.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructString.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructString.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructString.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructString.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructString.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructString.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructString.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructString.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructString.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructString.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructString.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_string = TypeObjectUtils::build_common_struct_member(member_id_var_string, member_flags_var_string, type_ids_StructString.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StructString.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructString.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructString.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructString.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructString.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructString.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructString.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructString.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructString.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructString.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructString.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructString.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructString.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructString.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructString.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_string = TypeObjectUtils::build_common_struct_member(member_id_var_string, member_flags_var_string, type_ids_StructString.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_string member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_string = "var_string";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_string;
            ann_custom_StructString.reset();
            CompleteMemberDetail detail_var_string = TypeObjectUtils::build_complete_member_detail(name_var_string, member_ann_builtin_var_string, ann_custom_StructString);
            CompleteStructMember member_var_string = TypeObjectUtils::build_complete_struct_member(common_var_string, detail_var_string);
            TypeObjectUtils::add_complete_struct_member(member_seq_StructString, member_var_string);
        }
        CompleteStructType struct_type_StructString = TypeObjectUtils::build_complete_struct_type(struct_flags_StructString, header_StructString, member_seq_StructString);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructString, type_name_StructString.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StructString already registered in TypeObjectRegistry for a different type.");
        }
        return_code_StructString =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "StructString", type_ids_StructString);
        if (return_code_StructString != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StructString: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_StructWString_type_identifier()
{
    {
        StructTypeFlag struct_flags_StructWString = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_StructWString;
        TypeIdentifierPair type_ids_StructWString;
        QualifiedTypeName type_name_StructWString = "StructWString";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructWString;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructWString;
        CompleteTypeDetail detail_StructWString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructWString, ann_custom_StructWString, type_name_StructWString.to_string());
        CompleteStructHeader header_StructWString;
        header_StructWString = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructWString);
        CompleteStructMemberSeq member_seq_StructWString;
        {
            return_code_StructWString =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_wstring_unbounded", type_ids_StructWString);

            if (return_code_StructWString != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind_anonymous_wstring_unbounded("TI_STRING16_SMALL");
                if (type_id_kind_anonymous_wstring_unbounded == "TI_STRING16_SMALL")
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_wstring_unbounded", true))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind_anonymous_wstring_unbounded == "TI_STRING16_LARGE")
                {
                    LBound bound = 255;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_wstring_unbounded", true))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded: Unknown WString kind.");
                    return;
                }
                return_code_StructWString =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_StructWString);
                if (return_code_StructWString != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded: Given WString TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_wstring = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_wstring;
            MemberId member_id_var_wstring = 0x00000000;
            if (EK_COMPLETE == type_ids_StructWString.type_identifier1()._d() || TK_NONE == type_ids_StructWString.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructWString.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructWString.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructWString.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructWString.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructWString.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructWString.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructWString.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructWString.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructWString.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructWString.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructWString.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructWString.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructWString.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructWString.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_wstring = TypeObjectUtils::build_common_struct_member(member_id_var_wstring, member_flags_var_wstring, type_ids_StructWString.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StructWString.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructWString.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructWString.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructWString.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructWString.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructWString.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructWString.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructWString.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructWString.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructWString.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructWString.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructWString.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructWString.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructWString.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructWString.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_wstring = TypeObjectUtils::build_common_struct_member(member_id_var_wstring, member_flags_var_wstring, type_ids_StructWString.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_wstring member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_wstring = "var_wstring";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_wstring;
            ann_custom_StructWString.reset();
            CompleteMemberDetail detail_var_wstring = TypeObjectUtils::build_complete_member_detail(name_var_wstring, member_ann_builtin_var_wstring, ann_custom_StructWString);
            CompleteStructMember member_var_wstring = TypeObjectUtils::build_complete_struct_member(common_var_wstring, detail_var_wstring);
            TypeObjectUtils::add_complete_struct_member(member_seq_StructWString, member_var_wstring);
        }
        CompleteStructType struct_type_StructWString = TypeObjectUtils::build_complete_struct_type(struct_flags_StructWString, header_StructWString, member_seq_StructWString);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructWString, type_name_StructWString.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StructWString already registered in TypeObjectRegistry for a different type.");
        }
        return_code_StructWString =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "StructWString", type_ids_StructWString);
        if (return_code_StructWString != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StructWString: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_StructBoundedString_type_identifier()
{
    {
        StructTypeFlag struct_flags_StructBoundedString = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_StructBoundedString;
        TypeIdentifierPair type_ids_StructBoundedString;
        QualifiedTypeName type_name_StructBoundedString = "StructBoundedString";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructBoundedString;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructBoundedString;
        CompleteTypeDetail detail_StructBoundedString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructBoundedString, ann_custom_StructBoundedString, type_name_StructBoundedString.to_string());
        CompleteStructHeader header_StructBoundedString;
        header_StructBoundedString = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructBoundedString);
        CompleteStructMemberSeq member_seq_StructBoundedString;
        {
            return_code_StructBoundedString =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "Inner_alias_bounded_string_helper", type_ids_StructBoundedString);

            if (return_code_StructBoundedString != eprosima::fastdds::dds::RETCODE_OK)
            {
                AliasTypeFlag alias_flags_Inner_alias_bounded_string_helper = 0;
                QualifiedTypeName type_name_Inner_alias_bounded_string_helper = "Inner_alias_bounded_string_helper";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Inner_alias_bounded_string_helper;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Inner_alias_bounded_string_helper;
                CompleteTypeDetail detail_Inner_alias_bounded_string_helper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Inner_alias_bounded_string_helper, ann_custom_Inner_alias_bounded_string_helper, type_name_Inner_alias_bounded_string_helper.to_string());
                CompleteAliasHeader header_Inner_alias_bounded_string_helper = TypeObjectUtils::build_complete_alias_header(detail_Inner_alias_bounded_string_helper);
                AliasMemberFlag related_flags_Inner_alias_bounded_string_helper = 0;
                return_code_StructBoundedString =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_10", type_ids_StructBoundedString);

                if (return_code_StructBoundedString != eprosima::fastdds::dds::RETCODE_OK)
                {
                    std::string type_id_kind_anonymous_string_10("TI_STRING8_SMALL");
                    if (type_id_kind_anonymous_string_10 == "TI_STRING8_SMALL")
                    {
                        SBound bound = static_cast<SBound>(10);
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_10"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_10 already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else if (type_id_kind_anonymous_string_10 == "TI_STRING8_LARGE")
                    {
                        LBound bound = 10;
                        StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                "anonymous_string_10"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_10 already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_string_10: Unknown String kind.");
                        return;
                    }
                    return_code_StructBoundedString =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_string_10", type_ids_StructBoundedString);
                    if (return_code_StructBoundedString != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_string_10: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                CommonAliasBody common_Inner_alias_bounded_string_helper;
                if (EK_COMPLETE == type_ids_StructBoundedString.type_identifier1()._d() || TK_NONE == type_ids_StructBoundedString.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructBoundedString.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_StructBoundedString.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructBoundedString.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_StructBoundedString.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_StructBoundedString.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_StructBoundedString.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_StructBoundedString.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_StructBoundedString.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_StructBoundedString.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_StructBoundedString.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_StructBoundedString.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_StructBoundedString.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_StructBoundedString.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_StructBoundedString.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    common_Inner_alias_bounded_string_helper = TypeObjectUtils::build_common_alias_body(related_flags_Inner_alias_bounded_string_helper, type_ids_StructBoundedString.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_StructBoundedString.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructBoundedString.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_StructBoundedString.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructBoundedString.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_StructBoundedString.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_StructBoundedString.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_StructBoundedString.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_StructBoundedString.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_StructBoundedString.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_StructBoundedString.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_StructBoundedString.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_StructBoundedString.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_StructBoundedString.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_StructBoundedString.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_StructBoundedString.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    common_Inner_alias_bounded_string_helper = TypeObjectUtils::build_common_alias_body(related_flags_Inner_alias_bounded_string_helper, type_ids_StructBoundedString.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Inner_alias_bounded_string_helper related TypeIdentifier inconsistent.");
                    return;
                }
                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Inner_alias_bounded_string_helper;
                ann_custom_Inner_alias_bounded_string_helper.reset();
                CompleteAliasBody body_Inner_alias_bounded_string_helper = TypeObjectUtils::build_complete_alias_body(common_Inner_alias_bounded_string_helper, member_ann_builtin_Inner_alias_bounded_string_helper, ann_custom_Inner_alias_bounded_string_helper);
                CompleteAliasType alias_type_Inner_alias_bounded_string_helper = TypeObjectUtils::build_complete_alias_type(alias_flags_Inner_alias_bounded_string_helper, header_Inner_alias_bounded_string_helper, body_Inner_alias_bounded_string_helper);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_alias_type_object(alias_type_Inner_alias_bounded_string_helper, type_name_Inner_alias_bounded_string_helper.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Inner_alias_bounded_string_helper already registered in TypeObjectRegistry for a different type.");
                }
                return_code_StructBoundedString =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_string_helper", type_ids_StructBoundedString);
                if (return_code_StructBoundedString != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Inner_alias_bounded_string_helper: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_bounded_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_bounded_string;
            MemberId member_id_var_bounded_string = 0x00000000;
            if (EK_COMPLETE == type_ids_StructBoundedString.type_identifier1()._d() || TK_NONE == type_ids_StructBoundedString.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructBoundedString.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructBoundedString.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructBoundedString.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructBoundedString.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructBoundedString.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructBoundedString.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructBoundedString.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructBoundedString.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructBoundedString.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructBoundedString.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructBoundedString.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructBoundedString.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructBoundedString.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructBoundedString.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_bounded_string = TypeObjectUtils::build_common_struct_member(member_id_var_bounded_string, member_flags_var_bounded_string, type_ids_StructBoundedString.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StructBoundedString.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructBoundedString.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructBoundedString.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructBoundedString.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructBoundedString.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructBoundedString.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructBoundedString.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructBoundedString.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructBoundedString.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructBoundedString.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructBoundedString.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructBoundedString.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructBoundedString.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructBoundedString.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructBoundedString.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_bounded_string = TypeObjectUtils::build_common_struct_member(member_id_var_bounded_string, member_flags_var_bounded_string, type_ids_StructBoundedString.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_bounded_string member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_bounded_string = "var_bounded_string";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_bounded_string;
            ann_custom_StructBoundedString.reset();
            CompleteMemberDetail detail_var_bounded_string = TypeObjectUtils::build_complete_member_detail(name_var_bounded_string, member_ann_builtin_var_bounded_string, ann_custom_StructBoundedString);
            CompleteStructMember member_var_bounded_string = TypeObjectUtils::build_complete_struct_member(common_var_bounded_string, detail_var_bounded_string);
            TypeObjectUtils::add_complete_struct_member(member_seq_StructBoundedString, member_var_bounded_string);
        }
        CompleteStructType struct_type_StructBoundedString = TypeObjectUtils::build_complete_struct_type(struct_flags_StructBoundedString, header_StructBoundedString, member_seq_StructBoundedString);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructBoundedString, type_name_StructBoundedString.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StructBoundedString already registered in TypeObjectRegistry for a different type.");
        }
        return_code_StructBoundedString =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "StructBoundedString", type_ids_StructBoundedString);
        if (return_code_StructBoundedString != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StructBoundedString: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_StructBoundedWString_type_identifier()
{
    {
        StructTypeFlag struct_flags_StructBoundedWString = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_StructBoundedWString;
        TypeIdentifierPair type_ids_StructBoundedWString;
        QualifiedTypeName type_name_StructBoundedWString = "StructBoundedWString";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructBoundedWString;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructBoundedWString;
        CompleteTypeDetail detail_StructBoundedWString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructBoundedWString, ann_custom_StructBoundedWString, type_name_StructBoundedWString.to_string());
        CompleteStructHeader header_StructBoundedWString;
        header_StructBoundedWString = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructBoundedWString);
        CompleteStructMemberSeq member_seq_StructBoundedWString;
        {
            return_code_StructBoundedWString =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "Inner_alias_bounded_wstring_helper", type_ids_StructBoundedWString);

            if (return_code_StructBoundedWString != eprosima::fastdds::dds::RETCODE_OK)
            {
                AliasTypeFlag alias_flags_Inner_alias_bounded_wstring_helper = 0;
                QualifiedTypeName type_name_Inner_alias_bounded_wstring_helper = "Inner_alias_bounded_wstring_helper";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Inner_alias_bounded_wstring_helper;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Inner_alias_bounded_wstring_helper;
                CompleteTypeDetail detail_Inner_alias_bounded_wstring_helper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Inner_alias_bounded_wstring_helper, ann_custom_Inner_alias_bounded_wstring_helper, type_name_Inner_alias_bounded_wstring_helper.to_string());
                CompleteAliasHeader header_Inner_alias_bounded_wstring_helper = TypeObjectUtils::build_complete_alias_header(detail_Inner_alias_bounded_wstring_helper);
                AliasMemberFlag related_flags_Inner_alias_bounded_wstring_helper = 0;
                return_code_StructBoundedWString =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_10", type_ids_StructBoundedWString);

                if (return_code_StructBoundedWString != eprosima::fastdds::dds::RETCODE_OK)
                {
                    std::string type_id_kind_anonymous_wstring_10("TI_STRING16_SMALL");
                    if (type_id_kind_anonymous_wstring_10 == "TI_STRING16_SMALL")
                    {
                        SBound bound = static_cast<SBound>(10);
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_wstring_10", true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_10 already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else if (type_id_kind_anonymous_wstring_10 == "TI_STRING16_LARGE")
                    {
                        LBound bound = 10;
                        StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                "anonymous_wstring_10", true))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_10 already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_wstring_10: Unknown WString kind.");
                        return;
                    }
                    return_code_StructBoundedWString =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_wstring_10", type_ids_StructBoundedWString);
                    if (return_code_StructBoundedWString != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_wstring_10: Given WString TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                CommonAliasBody common_Inner_alias_bounded_wstring_helper;
                if (EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1()._d() || TK_NONE == type_ids_StructBoundedWString.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructBoundedWString.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructBoundedWString.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_StructBoundedWString.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_StructBoundedWString.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_StructBoundedWString.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_StructBoundedWString.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    common_Inner_alias_bounded_wstring_helper = TypeObjectUtils::build_common_alias_body(related_flags_Inner_alias_bounded_wstring_helper, type_ids_StructBoundedWString.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructBoundedWString.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructBoundedWString.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_StructBoundedWString.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_StructBoundedWString.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_StructBoundedWString.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_StructBoundedWString.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    common_Inner_alias_bounded_wstring_helper = TypeObjectUtils::build_common_alias_body(related_flags_Inner_alias_bounded_wstring_helper, type_ids_StructBoundedWString.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Inner_alias_bounded_wstring_helper related TypeIdentifier inconsistent.");
                    return;
                }
                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Inner_alias_bounded_wstring_helper;
                ann_custom_Inner_alias_bounded_wstring_helper.reset();
                CompleteAliasBody body_Inner_alias_bounded_wstring_helper = TypeObjectUtils::build_complete_alias_body(common_Inner_alias_bounded_wstring_helper, member_ann_builtin_Inner_alias_bounded_wstring_helper, ann_custom_Inner_alias_bounded_wstring_helper);
                CompleteAliasType alias_type_Inner_alias_bounded_wstring_helper = TypeObjectUtils::build_complete_alias_type(alias_flags_Inner_alias_bounded_wstring_helper, header_Inner_alias_bounded_wstring_helper, body_Inner_alias_bounded_wstring_helper);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_alias_type_object(alias_type_Inner_alias_bounded_wstring_helper, type_name_Inner_alias_bounded_wstring_helper.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Inner_alias_bounded_wstring_helper already registered in TypeObjectRegistry for a different type.");
                }
                return_code_StructBoundedWString =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "Inner_alias_bounded_wstring_helper", type_ids_StructBoundedWString);
                if (return_code_StructBoundedWString != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Inner_alias_bounded_wstring_helper: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_bounded_wstring = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_bounded_wstring;
            MemberId member_id_var_bounded_wstring = 0x00000000;
            if (EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1()._d() || TK_NONE == type_ids_StructBoundedWString.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructBoundedWString.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructBoundedWString.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructBoundedWString.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructBoundedWString.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructBoundedWString.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructBoundedWString.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_bounded_wstring = TypeObjectUtils::build_common_struct_member(member_id_var_bounded_wstring, member_flags_var_bounded_wstring, type_ids_StructBoundedWString.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructBoundedWString.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructBoundedWString.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructBoundedWString.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructBoundedWString.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructBoundedWString.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructBoundedWString.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_bounded_wstring = TypeObjectUtils::build_common_struct_member(member_id_var_bounded_wstring, member_flags_var_bounded_wstring, type_ids_StructBoundedWString.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_bounded_wstring member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_bounded_wstring = "var_bounded_wstring";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_bounded_wstring;
            ann_custom_StructBoundedWString.reset();
            CompleteMemberDetail detail_var_bounded_wstring = TypeObjectUtils::build_complete_member_detail(name_var_bounded_wstring, member_ann_builtin_var_bounded_wstring, ann_custom_StructBoundedWString);
            CompleteStructMember member_var_bounded_wstring = TypeObjectUtils::build_complete_struct_member(common_var_bounded_wstring, detail_var_bounded_wstring);
            TypeObjectUtils::add_complete_struct_member(member_seq_StructBoundedWString, member_var_bounded_wstring);
        }
        CompleteStructType struct_type_StructBoundedWString = TypeObjectUtils::build_complete_struct_type(struct_flags_StructBoundedWString, header_StructBoundedWString, member_seq_StructBoundedWString);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructBoundedWString, type_name_StructBoundedWString.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StructBoundedWString already registered in TypeObjectRegistry for a different type.");
        }
        return_code_StructBoundedWString =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "StructBoundedWString", type_ids_StructBoundedWString);
        if (return_code_StructBoundedWString != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StructBoundedWString: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_StructEnum_type_identifier()
{
    {
        StructTypeFlag struct_flags_StructEnum = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_StructEnum;
        TypeIdentifierPair type_ids_StructEnum;
        QualifiedTypeName type_name_StructEnum = "StructEnum";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructEnum;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructEnum;
        CompleteTypeDetail detail_StructEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructEnum, ann_custom_StructEnum, type_name_StructEnum.to_string());
        CompleteStructHeader header_StructEnum;
        header_StructEnum = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructEnum);
        CompleteStructMemberSeq member_seq_StructEnum;
        {
            return_code_StructEnum =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "InnerEnumHelper", type_ids_StructEnum);

            if (return_code_StructEnum != eprosima::fastdds::dds::RETCODE_OK)
            {
                EnumTypeFlag enum_flags_InnerEnumHelper = 0;
                BitBound bit_bound_InnerEnumHelper = 32;
                CommonEnumeratedHeader common_InnerEnumHelper = TypeObjectUtils::build_common_enumerated_header(bit_bound_InnerEnumHelper);
                QualifiedTypeName type_name_InnerEnumHelper = "InnerEnumHelper";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_InnerEnumHelper;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_InnerEnumHelper;
                CompleteTypeDetail detail_InnerEnumHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_InnerEnumHelper, ann_custom_InnerEnumHelper, type_name_InnerEnumHelper.to_string());
                CompleteEnumeratedHeader header_InnerEnumHelper = TypeObjectUtils::build_complete_enumerated_header(common_InnerEnumHelper, detail_InnerEnumHelper);
                CompleteEnumeratedLiteralSeq literal_seq_InnerEnumHelper;
                {
                    EnumeratedLiteralFlag flags_ENUM_VALUE_1 = TypeObjectUtils::build_enumerated_literal_flag(false);
                    CommonEnumeratedLiteral common_ENUM_VALUE_1 = TypeObjectUtils::build_common_enumerated_literal(0, flags_ENUM_VALUE_1);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ENUM_VALUE_1;
                    ann_custom_InnerEnumHelper.reset();
                    MemberName name_ENUM_VALUE_1 = "ENUM_VALUE_1";
                    CompleteMemberDetail detail_ENUM_VALUE_1 = TypeObjectUtils::build_complete_member_detail(name_ENUM_VALUE_1, member_ann_builtin_ENUM_VALUE_1, ann_custom_InnerEnumHelper);
                    CompleteEnumeratedLiteral literal_ENUM_VALUE_1 = TypeObjectUtils::build_complete_enumerated_literal(common_ENUM_VALUE_1, detail_ENUM_VALUE_1);
                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq_InnerEnumHelper, literal_ENUM_VALUE_1);
                }
                {
                    EnumeratedLiteralFlag flags_ENUM_VALUE_2 = TypeObjectUtils::build_enumerated_literal_flag(false);
                    CommonEnumeratedLiteral common_ENUM_VALUE_2 = TypeObjectUtils::build_common_enumerated_literal(1, flags_ENUM_VALUE_2);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ENUM_VALUE_2;
                    ann_custom_InnerEnumHelper.reset();
                    MemberName name_ENUM_VALUE_2 = "ENUM_VALUE_2";
                    CompleteMemberDetail detail_ENUM_VALUE_2 = TypeObjectUtils::build_complete_member_detail(name_ENUM_VALUE_2, member_ann_builtin_ENUM_VALUE_2, ann_custom_InnerEnumHelper);
                    CompleteEnumeratedLiteral literal_ENUM_VALUE_2 = TypeObjectUtils::build_complete_enumerated_literal(common_ENUM_VALUE_2, detail_ENUM_VALUE_2);
                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq_InnerEnumHelper, literal_ENUM_VALUE_2);
                }
                {
                    EnumeratedLiteralFlag flags_ENUM_VALUE_3 = TypeObjectUtils::build_enumerated_literal_flag(false);
                    CommonEnumeratedLiteral common_ENUM_VALUE_3 = TypeObjectUtils::build_common_enumerated_literal(2, flags_ENUM_VALUE_3);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ENUM_VALUE_3;
                    ann_custom_InnerEnumHelper.reset();
                    MemberName name_ENUM_VALUE_3 = "ENUM_VALUE_3";
                    CompleteMemberDetail detail_ENUM_VALUE_3 = TypeObjectUtils::build_complete_member_detail(name_ENUM_VALUE_3, member_ann_builtin_ENUM_VALUE_3, ann_custom_InnerEnumHelper);
                    CompleteEnumeratedLiteral literal_ENUM_VALUE_3 = TypeObjectUtils::build_complete_enumerated_literal(common_ENUM_VALUE_3, detail_ENUM_VALUE_3);
                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq_InnerEnumHelper, literal_ENUM_VALUE_3);
                }
                CompleteEnumeratedType enumerated_type_InnerEnumHelper = TypeObjectUtils::build_complete_enumerated_type(enum_flags_InnerEnumHelper, header_InnerEnumHelper,
                        literal_seq_InnerEnumHelper);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_InnerEnumHelper, type_name_InnerEnumHelper.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "InnerEnumHelper already registered in TypeObjectRegistry for a different type.");
                }
                return_code_StructEnum =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerEnumHelper", type_ids_StructEnum);
                if (return_code_StructEnum != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "InnerEnumHelper: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_enum = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_enum;
            MemberId member_id_var_enum = 0x00000000;
            if (EK_COMPLETE == type_ids_StructEnum.type_identifier1()._d() || TK_NONE == type_ids_StructEnum.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructEnum.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructEnum.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructEnum.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructEnum.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructEnum.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructEnum.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructEnum.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructEnum.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructEnum.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructEnum.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructEnum.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructEnum.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructEnum.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructEnum.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_enum = TypeObjectUtils::build_common_struct_member(member_id_var_enum, member_flags_var_enum, type_ids_StructEnum.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StructEnum.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructEnum.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructEnum.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructEnum.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructEnum.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructEnum.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructEnum.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructEnum.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructEnum.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructEnum.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructEnum.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructEnum.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructEnum.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructEnum.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructEnum.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_enum = TypeObjectUtils::build_common_struct_member(member_id_var_enum, member_flags_var_enum, type_ids_StructEnum.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_enum member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_enum = "var_enum";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_enum;
            ann_custom_StructEnum.reset();
            CompleteMemberDetail detail_var_enum = TypeObjectUtils::build_complete_member_detail(name_var_enum, member_ann_builtin_var_enum, ann_custom_StructEnum);
            CompleteStructMember member_var_enum = TypeObjectUtils::build_complete_struct_member(common_var_enum, detail_var_enum);
            TypeObjectUtils::add_complete_struct_member(member_seq_StructEnum, member_var_enum);
        }
        CompleteStructType struct_type_StructEnum = TypeObjectUtils::build_complete_struct_type(struct_flags_StructEnum, header_StructEnum, member_seq_StructEnum);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructEnum, type_name_StructEnum.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StructEnum already registered in TypeObjectRegistry for a different type.");
        }
        return_code_StructEnum =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "StructEnum", type_ids_StructEnum);
        if (return_code_StructEnum != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StructEnum: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_StructBitMask_type_identifier()
{
    {
        StructTypeFlag struct_flags_StructBitMask = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_StructBitMask;
        TypeIdentifierPair type_ids_StructBitMask;
        QualifiedTypeName type_name_StructBitMask = "StructBitMask";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructBitMask;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructBitMask;
        CompleteTypeDetail detail_StructBitMask = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructBitMask, ann_custom_StructBitMask, type_name_StructBitMask.to_string());
        CompleteStructHeader header_StructBitMask;
        header_StructBitMask = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructBitMask);
        CompleteStructMemberSeq member_seq_StructBitMask;
        {
            return_code_StructBitMask =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "InnerBitMaskHelper", type_ids_StructBitMask);

            if (return_code_StructBitMask != eprosima::fastdds::dds::RETCODE_OK)
            {
                BitmaskTypeFlag bitmask_flags_InnerBitMaskHelper = 0;
                BitBound bit_bound_InnerBitMaskHelper = 32;
                CommonEnumeratedHeader common_InnerBitMaskHelper = TypeObjectUtils::build_common_enumerated_header(bit_bound_InnerBitMaskHelper, true);
                QualifiedTypeName type_name_InnerBitMaskHelper = "InnerBitMaskHelper";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_InnerBitMaskHelper;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_InnerBitMaskHelper;
                CompleteTypeDetail detail_InnerBitMaskHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_InnerBitMaskHelper, ann_custom_InnerBitMaskHelper, type_name_InnerBitMaskHelper.to_string());
                CompleteEnumeratedHeader header_InnerBitMaskHelper = TypeObjectUtils::build_complete_enumerated_header(common_InnerBitMaskHelper, detail_InnerBitMaskHelper, true);
                CompleteBitflagSeq flag_seq_InnerBitMaskHelper;
                {
                    uint16_t position_flag0 = 0;
                    BitflagFlag flags_flag0 = 0;
                    CommonBitflag common_flag0 = TypeObjectUtils::build_common_bitflag(position_flag0, flags_flag0);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag0;
                    ann_custom_InnerBitMaskHelper.reset();
                    AppliedAnnotationSeq tmp_ann_custom_flag0;
                    if (!tmp_ann_custom_flag0.empty())
                    {
                        ann_custom_InnerBitMaskHelper = tmp_ann_custom_flag0;
                    }
                    MemberName name_flag0 = "flag0";
                    CompleteMemberDetail detail_flag0 = TypeObjectUtils::build_complete_member_detail(name_flag0, member_ann_builtin_flag0, ann_custom_InnerBitMaskHelper);
                    CompleteBitflag bitflag_flag0 = TypeObjectUtils::build_complete_bitflag(common_flag0, detail_flag0);
                    TypeObjectUtils::add_complete_bitflag(flag_seq_InnerBitMaskHelper, bitflag_flag0);
                }
                {
                    uint16_t position_flag1 = 1;
                    BitflagFlag flags_flag1 = 0;
                    CommonBitflag common_flag1 = TypeObjectUtils::build_common_bitflag(position_flag1, flags_flag1);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag1;
                    ann_custom_InnerBitMaskHelper.reset();
                    AppliedAnnotationSeq tmp_ann_custom_flag1;
                    if (!tmp_ann_custom_flag1.empty())
                    {
                        ann_custom_InnerBitMaskHelper = tmp_ann_custom_flag1;
                    }
                    MemberName name_flag1 = "flag1";
                    CompleteMemberDetail detail_flag1 = TypeObjectUtils::build_complete_member_detail(name_flag1, member_ann_builtin_flag1, ann_custom_InnerBitMaskHelper);
                    CompleteBitflag bitflag_flag1 = TypeObjectUtils::build_complete_bitflag(common_flag1, detail_flag1);
                    TypeObjectUtils::add_complete_bitflag(flag_seq_InnerBitMaskHelper, bitflag_flag1);
                }
                {
                    uint16_t position_flag4 = 4;
                    BitflagFlag flags_flag4 = 0;
                    CommonBitflag common_flag4 = TypeObjectUtils::build_common_bitflag(position_flag4, flags_flag4);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag4;
                    ann_custom_InnerBitMaskHelper.reset();
                    AppliedAnnotationSeq tmp_ann_custom_flag4;
                    if (!tmp_ann_custom_flag4.empty())
                    {
                        ann_custom_InnerBitMaskHelper = tmp_ann_custom_flag4;
                    }
                    MemberName name_flag4 = "flag4";
                    CompleteMemberDetail detail_flag4 = TypeObjectUtils::build_complete_member_detail(name_flag4, member_ann_builtin_flag4, ann_custom_InnerBitMaskHelper);
                    CompleteBitflag bitflag_flag4 = TypeObjectUtils::build_complete_bitflag(common_flag4, detail_flag4);
                    TypeObjectUtils::add_complete_bitflag(flag_seq_InnerBitMaskHelper, bitflag_flag4);
                }
                {
                    uint16_t position_flag6 = 6;
                    BitflagFlag flags_flag6 = 0;
                    CommonBitflag common_flag6 = TypeObjectUtils::build_common_bitflag(position_flag6, flags_flag6);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag6;
                    ann_custom_InnerBitMaskHelper.reset();
                    AppliedAnnotationSeq tmp_ann_custom_flag6;
                    if (!tmp_ann_custom_flag6.empty())
                    {
                        ann_custom_InnerBitMaskHelper = tmp_ann_custom_flag6;
                    }
                    MemberName name_flag6 = "flag6";
                    CompleteMemberDetail detail_flag6 = TypeObjectUtils::build_complete_member_detail(name_flag6, member_ann_builtin_flag6, ann_custom_InnerBitMaskHelper);
                    CompleteBitflag bitflag_flag6 = TypeObjectUtils::build_complete_bitflag(common_flag6, detail_flag6);
                    TypeObjectUtils::add_complete_bitflag(flag_seq_InnerBitMaskHelper, bitflag_flag6);
                }
                CompleteBitmaskType bitmask_type_InnerBitMaskHelper = TypeObjectUtils::build_complete_bitmask_type(bitmask_flags_InnerBitMaskHelper, header_InnerBitMaskHelper, flag_seq_InnerBitMaskHelper);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_bitmask_type_object(bitmask_type_InnerBitMaskHelper, type_name_InnerBitMaskHelper.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "InnerBitMaskHelper already registered in TypeObjectRegistry for a different type.");
                }
                return_code_StructBitMask =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerBitMaskHelper", type_ids_StructBitMask);
                if (return_code_StructBitMask != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "InnerBitMaskHelper: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_bitmask = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_bitmask;
            MemberId member_id_var_bitmask = 0x00000000;
            if (EK_COMPLETE == type_ids_StructBitMask.type_identifier1()._d() || TK_NONE == type_ids_StructBitMask.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructBitMask.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructBitMask.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructBitMask.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructBitMask.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructBitMask.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructBitMask.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructBitMask.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructBitMask.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructBitMask.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructBitMask.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructBitMask.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructBitMask.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructBitMask.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructBitMask.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_bitmask = TypeObjectUtils::build_common_struct_member(member_id_var_bitmask, member_flags_var_bitmask, type_ids_StructBitMask.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StructBitMask.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructBitMask.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructBitMask.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructBitMask.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructBitMask.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructBitMask.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructBitMask.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructBitMask.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructBitMask.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructBitMask.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructBitMask.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructBitMask.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructBitMask.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructBitMask.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructBitMask.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_bitmask = TypeObjectUtils::build_common_struct_member(member_id_var_bitmask, member_flags_var_bitmask, type_ids_StructBitMask.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_bitmask member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_bitmask = "var_bitmask";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_bitmask;
            ann_custom_StructBitMask.reset();
            CompleteMemberDetail detail_var_bitmask = TypeObjectUtils::build_complete_member_detail(name_var_bitmask, member_ann_builtin_var_bitmask, ann_custom_StructBitMask);
            CompleteStructMember member_var_bitmask = TypeObjectUtils::build_complete_struct_member(common_var_bitmask, detail_var_bitmask);
            TypeObjectUtils::add_complete_struct_member(member_seq_StructBitMask, member_var_bitmask);
        }
        CompleteStructType struct_type_StructBitMask = TypeObjectUtils::build_complete_struct_type(struct_flags_StructBitMask, header_StructBitMask, member_seq_StructBitMask);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructBitMask, type_name_StructBitMask.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StructBitMask already registered in TypeObjectRegistry for a different type.");
        }
        return_code_StructBitMask =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "StructBitMask", type_ids_StructBitMask);
        if (return_code_StructBitMask != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StructBitMask: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_StructAlias_type_identifier()
{
    {
        StructTypeFlag struct_flags_StructAlias = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_StructAlias;
        TypeIdentifierPair type_ids_StructAlias;
        QualifiedTypeName type_name_StructAlias = "StructAlias";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructAlias;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructAlias;
        CompleteTypeDetail detail_StructAlias = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructAlias, ann_custom_StructAlias, type_name_StructAlias.to_string());
        CompleteStructHeader header_StructAlias;
        header_StructAlias = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructAlias);
        CompleteStructMemberSeq member_seq_StructAlias;
        {
            return_code_StructAlias =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "InnerAliasHelper", type_ids_StructAlias);

            if (return_code_StructAlias != eprosima::fastdds::dds::RETCODE_OK)
            {
                AliasTypeFlag alias_flags_InnerAliasHelper = 0;
                QualifiedTypeName type_name_InnerAliasHelper = "InnerAliasHelper";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_InnerAliasHelper;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_InnerAliasHelper;
                CompleteTypeDetail detail_InnerAliasHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_InnerAliasHelper, ann_custom_InnerAliasHelper, type_name_InnerAliasHelper.to_string());
                CompleteAliasHeader header_InnerAliasHelper = TypeObjectUtils::build_complete_alias_header(detail_InnerAliasHelper);
                AliasMemberFlag related_flags_InnerAliasHelper = 0;
                return_code_StructAlias =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_StructAlias);

                if (return_code_StructAlias != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "InnerAliasHelper related TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                CommonAliasBody common_InnerAliasHelper;
                if (EK_COMPLETE == type_ids_StructAlias.type_identifier1()._d() || TK_NONE == type_ids_StructAlias.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructAlias.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_StructAlias.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructAlias.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_StructAlias.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_StructAlias.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_StructAlias.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_StructAlias.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_StructAlias.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_StructAlias.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_StructAlias.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_StructAlias.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_StructAlias.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_StructAlias.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_StructAlias.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    common_InnerAliasHelper = TypeObjectUtils::build_common_alias_body(related_flags_InnerAliasHelper, type_ids_StructAlias.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_StructAlias.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructAlias.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_StructAlias.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructAlias.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_StructAlias.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_StructAlias.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_StructAlias.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_StructAlias.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_StructAlias.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_StructAlias.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_StructAlias.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_StructAlias.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_StructAlias.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_StructAlias.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_StructAlias.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    common_InnerAliasHelper = TypeObjectUtils::build_common_alias_body(related_flags_InnerAliasHelper, type_ids_StructAlias.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "InnerAliasHelper related TypeIdentifier inconsistent.");
                    return;
                }
                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_InnerAliasHelper;
                ann_custom_InnerAliasHelper.reset();
                CompleteAliasBody body_InnerAliasHelper = TypeObjectUtils::build_complete_alias_body(common_InnerAliasHelper, member_ann_builtin_InnerAliasHelper, ann_custom_InnerAliasHelper);
                CompleteAliasType alias_type_InnerAliasHelper = TypeObjectUtils::build_complete_alias_type(alias_flags_InnerAliasHelper, header_InnerAliasHelper, body_InnerAliasHelper);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_alias_type_object(alias_type_InnerAliasHelper, type_name_InnerAliasHelper.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "InnerAliasHelper already registered in TypeObjectRegistry for a different type.");
                }
                return_code_StructAlias =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerAliasHelper", type_ids_StructAlias);
                if (return_code_StructAlias != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "InnerAliasHelper: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_alias = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_alias;
            MemberId member_id_var_alias = 0x00000000;
            if (EK_COMPLETE == type_ids_StructAlias.type_identifier1()._d() || TK_NONE == type_ids_StructAlias.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructAlias.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructAlias.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructAlias.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructAlias.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructAlias.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructAlias.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructAlias.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructAlias.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructAlias.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructAlias.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructAlias.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructAlias.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructAlias.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructAlias.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_alias = TypeObjectUtils::build_common_struct_member(member_id_var_alias, member_flags_var_alias, type_ids_StructAlias.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StructAlias.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructAlias.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructAlias.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructAlias.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructAlias.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructAlias.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructAlias.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructAlias.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructAlias.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructAlias.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructAlias.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructAlias.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructAlias.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructAlias.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructAlias.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_alias = TypeObjectUtils::build_common_struct_member(member_id_var_alias, member_flags_var_alias, type_ids_StructAlias.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_alias member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_alias = "var_alias";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_alias;
            ann_custom_StructAlias.reset();
            CompleteMemberDetail detail_var_alias = TypeObjectUtils::build_complete_member_detail(name_var_alias, member_ann_builtin_var_alias, ann_custom_StructAlias);
            CompleteStructMember member_var_alias = TypeObjectUtils::build_complete_struct_member(common_var_alias, detail_var_alias);
            TypeObjectUtils::add_complete_struct_member(member_seq_StructAlias, member_var_alias);
        }
        CompleteStructType struct_type_StructAlias = TypeObjectUtils::build_complete_struct_type(struct_flags_StructAlias, header_StructAlias, member_seq_StructAlias);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructAlias, type_name_StructAlias.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StructAlias already registered in TypeObjectRegistry for a different type.");
        }
        return_code_StructAlias =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "StructAlias", type_ids_StructAlias);
        if (return_code_StructAlias != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StructAlias: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_StructShortArray_type_identifier()
{
    {
        StructTypeFlag struct_flags_StructShortArray = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_StructShortArray;
        TypeIdentifierPair type_ids_StructShortArray;
        QualifiedTypeName type_name_StructShortArray = "StructShortArray";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructShortArray;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructShortArray;
        CompleteTypeDetail detail_StructShortArray = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructShortArray, ann_custom_StructShortArray, type_name_StructShortArray.to_string());
        CompleteStructHeader header_StructShortArray;
        header_StructShortArray = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructShortArray);
        CompleteStructMemberSeq member_seq_StructShortArray;
        {
            return_code_StructShortArray =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_int16_t_10", type_ids_StructShortArray);

            if (return_code_StructShortArray != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_StructShortArray =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_StructShortArray);

                if (return_code_StructShortArray != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_array_int16_t_10 {nullptr};
                if (EK_COMPLETE == type_ids_StructShortArray.type_identifier1()._d() || TK_NONE == type_ids_StructShortArray.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructShortArray.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_StructShortArray.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructShortArray.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_StructShortArray.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_StructShortArray.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_StructShortArray.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_StructShortArray.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_StructShortArray.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_StructShortArray.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_StructShortArray.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_StructShortArray.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_StructShortArray.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_StructShortArray.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_StructShortArray.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_array_int16_t_10 = new TypeIdentifier(type_ids_StructShortArray.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_StructShortArray.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructShortArray.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_StructShortArray.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructShortArray.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_StructShortArray.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_StructShortArray.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_StructShortArray.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_StructShortArray.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_StructShortArray.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_StructShortArray.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_StructShortArray.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_StructShortArray.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_StructShortArray.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_StructShortArray.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_StructShortArray.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_array_int16_t_10 = new TypeIdentifier(type_ids_StructShortArray.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_int16_t_10 = EK_COMPLETE;
                if (TK_NONE == type_ids_StructShortArray.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_int16_t_10 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_int16_t_10 = 0;
                PlainCollectionHeader header_anonymous_array_int16_t_10 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_int16_t_10, element_flags_anonymous_array_int16_t_10);
                std::string type_id_kind_anonymous_array_int16_t_10("TI_PLAIN_ARRAY_SMALL");
                if (type_id_kind_anonymous_array_int16_t_10 == "TI_PLAIN_ARRAY_SMALL")
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(10));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_int16_t_10, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_int16_t_10));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_int16_t_10"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_int16_t_10 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(10));

                    PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header_anonymous_array_int16_t_10, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_int16_t_10));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_int16_t_10"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_int16_t_10 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_StructShortArray =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_array_int16_t_10", type_ids_StructShortArray);
                if (return_code_StructShortArray != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_array_int16_t_10: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_array_short = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_array_short;
            MemberId member_id_var_array_short = 0x00000000;
            if (EK_COMPLETE == type_ids_StructShortArray.type_identifier1()._d() || TK_NONE == type_ids_StructShortArray.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructShortArray.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructShortArray.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructShortArray.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructShortArray.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructShortArray.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructShortArray.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructShortArray.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructShortArray.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructShortArray.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructShortArray.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructShortArray.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructShortArray.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructShortArray.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructShortArray.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_array_short = TypeObjectUtils::build_common_struct_member(member_id_var_array_short, member_flags_var_array_short, type_ids_StructShortArray.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StructShortArray.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructShortArray.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructShortArray.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructShortArray.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructShortArray.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructShortArray.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructShortArray.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructShortArray.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructShortArray.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructShortArray.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructShortArray.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructShortArray.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructShortArray.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructShortArray.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructShortArray.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_array_short = TypeObjectUtils::build_common_struct_member(member_id_var_array_short, member_flags_var_array_short, type_ids_StructShortArray.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_array_short member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_array_short = "var_array_short";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_array_short;
            ann_custom_StructShortArray.reset();
            CompleteMemberDetail detail_var_array_short = TypeObjectUtils::build_complete_member_detail(name_var_array_short, member_ann_builtin_var_array_short, ann_custom_StructShortArray);
            CompleteStructMember member_var_array_short = TypeObjectUtils::build_complete_struct_member(common_var_array_short, detail_var_array_short);
            TypeObjectUtils::add_complete_struct_member(member_seq_StructShortArray, member_var_array_short);
        }
        CompleteStructType struct_type_StructShortArray = TypeObjectUtils::build_complete_struct_type(struct_flags_StructShortArray, header_StructShortArray, member_seq_StructShortArray);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructShortArray, type_name_StructShortArray.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StructShortArray already registered in TypeObjectRegistry for a different type.");
        }
        return_code_StructShortArray =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "StructShortArray", type_ids_StructShortArray);
        if (return_code_StructShortArray != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StructShortArray: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_StructSequence_type_identifier()
{
    {
        StructTypeFlag struct_flags_StructSequence = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_StructSequence;
        TypeIdentifierPair type_ids_StructSequence;
        QualifiedTypeName type_name_StructSequence = "StructSequence";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructSequence;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructSequence;
        CompleteTypeDetail detail_StructSequence = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructSequence, ann_custom_StructSequence, type_name_StructSequence.to_string());
        CompleteStructHeader header_StructSequence;
        header_StructSequence = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructSequence);
        CompleteStructMemberSeq member_seq_StructSequence;
        {
            return_code_StructSequence =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_int32_t_unbounded", type_ids_StructSequence);

            if (return_code_StructSequence != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_StructSequence =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_StructSequence);

                if (return_code_StructSequence != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_sequence_int32_t_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_StructSequence.type_identifier1()._d() || TK_NONE == type_ids_StructSequence.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructSequence.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_StructSequence.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructSequence.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_StructSequence.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_StructSequence.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_StructSequence.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_StructSequence.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_StructSequence.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_StructSequence.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_StructSequence.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_StructSequence.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_StructSequence.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_StructSequence.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_StructSequence.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_int32_t_unbounded = new TypeIdentifier(type_ids_StructSequence.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_StructSequence.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructSequence.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_StructSequence.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructSequence.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_StructSequence.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_StructSequence.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_StructSequence.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_StructSequence.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_StructSequence.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_StructSequence.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_StructSequence.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_StructSequence.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_StructSequence.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_StructSequence.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_StructSequence.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_int32_t_unbounded = new TypeIdentifier(type_ids_StructSequence.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_int32_t_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_StructSequence.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_int32_t_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_int32_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_int32_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_int32_t_unbounded, element_flags_anonymous_sequence_int32_t_unbounded);
                std::string type_id_kind_anonymous_sequence_int32_t_unbounded("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_int32_t_unbounded == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_int32_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int32_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_int32_t_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_int32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_int32_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int32_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_int32_t_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_int32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_StructSequence =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_int32_t_unbounded", type_ids_StructSequence);
                if (return_code_StructSequence != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_int32_t_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_sequence = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_sequence;
            MemberId member_id_var_sequence = 0x00000000;
            if (EK_COMPLETE == type_ids_StructSequence.type_identifier1()._d() || TK_NONE == type_ids_StructSequence.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructSequence.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructSequence.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructSequence.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructSequence.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructSequence.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructSequence.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructSequence.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructSequence.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructSequence.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructSequence.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructSequence.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructSequence.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructSequence.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructSequence.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence = TypeObjectUtils::build_common_struct_member(member_id_var_sequence, member_flags_var_sequence, type_ids_StructSequence.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StructSequence.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructSequence.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructSequence.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructSequence.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructSequence.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructSequence.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructSequence.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructSequence.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructSequence.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructSequence.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructSequence.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructSequence.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructSequence.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructSequence.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructSequence.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_sequence = TypeObjectUtils::build_common_struct_member(member_id_var_sequence, member_flags_var_sequence, type_ids_StructSequence.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_sequence member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_sequence = "var_sequence";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_sequence;
            ann_custom_StructSequence.reset();
            CompleteMemberDetail detail_var_sequence = TypeObjectUtils::build_complete_member_detail(name_var_sequence, member_ann_builtin_var_sequence, ann_custom_StructSequence);
            CompleteStructMember member_var_sequence = TypeObjectUtils::build_complete_struct_member(common_var_sequence, detail_var_sequence);
            TypeObjectUtils::add_complete_struct_member(member_seq_StructSequence, member_var_sequence);
        }
        CompleteStructType struct_type_StructSequence = TypeObjectUtils::build_complete_struct_type(struct_flags_StructSequence, header_StructSequence, member_seq_StructSequence);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructSequence, type_name_StructSequence.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StructSequence already registered in TypeObjectRegistry for a different type.");
        }
        return_code_StructSequence =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "StructSequence", type_ids_StructSequence);
        if (return_code_StructSequence != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StructSequence: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_StructMap_type_identifier()
{
    {
        StructTypeFlag struct_flags_StructMap = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_StructMap;
        TypeIdentifierPair type_ids_StructMap;
        QualifiedTypeName type_name_StructMap = "StructMap";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructMap;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructMap;
        CompleteTypeDetail detail_StructMap = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructMap, ann_custom_StructMap, type_name_StructMap.to_string());
        CompleteStructHeader header_StructMap;
        header_StructMap = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructMap);
        CompleteStructMemberSeq member_seq_StructMap;
        {
            return_code_StructMap =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_int32_t_unbounded", type_ids_StructMap);

            if (return_code_StructMap != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_StructMap =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_StructMap);

                if (return_code_StructMap != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_map_int32_t_int32_t_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_StructMap.type_identifier1()._d() || TK_NONE == type_ids_StructMap.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructMap.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_StructMap.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructMap.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_StructMap.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_StructMap.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_StructMap.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_StructMap.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_StructMap.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_StructMap.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_StructMap.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_StructMap.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_StructMap.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_StructMap.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_StructMap.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_map_int32_t_int32_t_unbounded = new TypeIdentifier(type_ids_StructMap.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_StructMap.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructMap.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_StructMap.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructMap.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_StructMap.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_StructMap.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_StructMap.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_StructMap.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_StructMap.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_StructMap.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_StructMap.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_StructMap.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_StructMap.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_StructMap.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_StructMap.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_map_int32_t_int32_t_unbounded = new TypeIdentifier(type_ids_StructMap.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_int32_t_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_StructMap =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_StructMap);

                if (return_code_StructMap != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* key_identifier_anonymous_map_int32_t_int32_t_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_StructMap.type_identifier1()._d() || TK_NONE == type_ids_StructMap.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructMap.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_StructMap.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructMap.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_StructMap.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_StructMap.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_StructMap.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_StructMap.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_StructMap.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_StructMap.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_StructMap.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_StructMap.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_StructMap.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_StructMap.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_StructMap.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    key_identifier_anonymous_map_int32_t_int32_t_unbounded = new TypeIdentifier(type_ids_StructMap.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_StructMap.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructMap.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_StructMap.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructMap.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_StructMap.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_StructMap.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_StructMap.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_StructMap.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_StructMap.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_StructMap.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_StructMap.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_StructMap.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_StructMap.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_StructMap.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_StructMap.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    key_identifier_anonymous_map_int32_t_int32_t_unbounded = new TypeIdentifier(type_ids_StructMap.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_int32_t_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_int32_t_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_int32_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_int32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int32_t_int32_t_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_int32_t_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_int32_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_int32_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_int32_t_unbounded, element_flags_anonymous_map_int32_t_int32_t_unbounded);
                std::string type_id_kind_anonymous_map_int32_t_int32_t_unbounded("TI_PLAIN_MAP_SMALL");
                if (type_id_kind_anonymous_map_int32_t_int32_t_unbounded == "TI_PLAIN_MAP_SMALL")
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_int32_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_int32_t_unbounded), key_flags_anonymous_map_int32_t_int32_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_int32_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_int32_t_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_int32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header_anonymous_map_int32_t_int32_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_int32_t_unbounded), key_flags_anonymous_map_int32_t_int32_t_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_int32_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_int32_t_int32_t_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_int32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_StructMap =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_map_int32_t_int32_t_unbounded", type_ids_StructMap);
                if (return_code_StructMap != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_map_int32_t_int32_t_unbounded: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_map = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_map;
            MemberId member_id_var_map = 0x00000000;
            if (EK_COMPLETE == type_ids_StructMap.type_identifier1()._d() || TK_NONE == type_ids_StructMap.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructMap.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructMap.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructMap.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructMap.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructMap.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructMap.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructMap.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructMap.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructMap.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructMap.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructMap.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructMap.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructMap.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructMap.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_map = TypeObjectUtils::build_common_struct_member(member_id_var_map, member_flags_var_map, type_ids_StructMap.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StructMap.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructMap.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructMap.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructMap.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructMap.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructMap.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructMap.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructMap.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructMap.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructMap.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructMap.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructMap.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructMap.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructMap.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructMap.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_map = TypeObjectUtils::build_common_struct_member(member_id_var_map, member_flags_var_map, type_ids_StructMap.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_map member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_map = "var_map";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map;
            ann_custom_StructMap.reset();
            CompleteMemberDetail detail_var_map = TypeObjectUtils::build_complete_member_detail(name_var_map, member_ann_builtin_var_map, ann_custom_StructMap);
            CompleteStructMember member_var_map = TypeObjectUtils::build_complete_struct_member(common_var_map, detail_var_map);
            TypeObjectUtils::add_complete_struct_member(member_seq_StructMap, member_var_map);
        }
        CompleteStructType struct_type_StructMap = TypeObjectUtils::build_complete_struct_type(struct_flags_StructMap, header_StructMap, member_seq_StructMap);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructMap, type_name_StructMap.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StructMap already registered in TypeObjectRegistry for a different type.");
        }
        return_code_StructMap =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "StructMap", type_ids_StructMap);
        if (return_code_StructMap != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StructMap: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_StructUnion_type_identifier()
{
    {
        StructTypeFlag struct_flags_StructUnion = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_StructUnion;
        TypeIdentifierPair type_ids_StructUnion;
        QualifiedTypeName type_name_StructUnion = "StructUnion";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructUnion;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructUnion;
        CompleteTypeDetail detail_StructUnion = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructUnion, ann_custom_StructUnion, type_name_StructUnion.to_string());
        CompleteStructHeader header_StructUnion;
        header_StructUnion = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructUnion);
        CompleteStructMemberSeq member_seq_StructUnion;
        {
            return_code_StructUnion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "InnerUnionHelper", type_ids_StructUnion);

            if (return_code_StructUnion != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    ReturnCode_t return_code_InnerUnionHelper;
                    TypeIdentifierPair type_ids_InnerUnionHelper;
                    UnionTypeFlag union_flags_InnerUnionHelper = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            true, false);
                    QualifiedTypeName type_name_InnerUnionHelper = "InnerUnionHelper";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_InnerUnionHelper;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_InnerUnionHelper;
                    AppliedAnnotationSeq tmp_ann_custom_InnerUnionHelper;
                    eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim_InnerUnionHelper;
                    if (!tmp_ann_custom_InnerUnionHelper.empty())
                    {
                        ann_custom_InnerUnionHelper = tmp_ann_custom_InnerUnionHelper;
                    }

                    CompleteTypeDetail detail_InnerUnionHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_InnerUnionHelper, ann_custom_InnerUnionHelper, type_name_InnerUnionHelper.to_string());
                    CompleteUnionHeader header_InnerUnionHelper = TypeObjectUtils::build_complete_union_header(detail_InnerUnionHelper);
                    UnionDiscriminatorFlag member_flags_InnerUnionHelper = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false);
                    return_code_InnerUnionHelper =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_int32_t", type_ids_InnerUnionHelper);

                    if (return_code_InnerUnionHelper != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    CommonDiscriminatorMember common_InnerUnionHelper;
                    if (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1()._d() || TK_NONE == type_ids_InnerUnionHelper.type_identifier2()._d())
                    {
                        common_InnerUnionHelper = TypeObjectUtils::build_common_discriminator_member(member_flags_InnerUnionHelper, type_ids_InnerUnionHelper.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2()._d())
                    {
                        common_InnerUnionHelper = TypeObjectUtils::build_common_discriminator_member(member_flags_InnerUnionHelper, type_ids_InnerUnionHelper.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "InnerUnionHelper discriminator TypeIdentifier inconsistent.");
                        return;
                    }
                    type_ann_builtin_InnerUnionHelper.reset();
                    ann_custom_InnerUnionHelper.reset();
                    CompleteDiscriminatorMember discriminator_InnerUnionHelper = TypeObjectUtils::build_complete_discriminator_member(common_InnerUnionHelper,
                            type_ann_builtin_InnerUnionHelper, ann_custom_InnerUnionHelper);
                    CompleteUnionMemberSeq member_seq_InnerUnionHelper;
                    {
                        return_code_InnerUnionHelper =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids_InnerUnionHelper);

                        if (return_code_InnerUnionHelper != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "longValue Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionMemberFlag member_flags_longValue = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false);
                        UnionCaseLabelSeq label_seq_longValue;
                        TypeObjectUtils::add_union_case_label(label_seq_longValue, static_cast<int32_t>(0));
                        CommonUnionMember common_longValue;
                        MemberId member_id_longValue = 0x00000001;
                        if (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1()._d() || TK_NONE == type_ids_InnerUnionHelper.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_longValue = TypeObjectUtils::build_common_union_member(member_id_longValue, member_flags_longValue, type_ids_InnerUnionHelper.type_identifier1(),
                                    label_seq_longValue);
                        }
                        else if (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_longValue = TypeObjectUtils::build_common_union_member(member_id_longValue, member_flags_longValue, type_ids_InnerUnionHelper.type_identifier2(),
                                    label_seq_longValue);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union longValue member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_longValue = "longValue";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_longValue;
                        ann_custom_InnerUnionHelper.reset();
                        CompleteMemberDetail detail_longValue = TypeObjectUtils::build_complete_member_detail(name_longValue, member_ann_builtin_longValue, ann_custom_InnerUnionHelper);
                        CompleteUnionMember member_longValue = TypeObjectUtils::build_complete_union_member(common_longValue, detail_longValue);
                        TypeObjectUtils::add_complete_union_member(member_seq_InnerUnionHelper, member_longValue);
                    }
                    {
                        return_code_InnerUnionHelper =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_float", type_ids_InnerUnionHelper);

                        if (return_code_InnerUnionHelper != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "floatValue Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionMemberFlag member_flags_floatValue = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false);
                        UnionCaseLabelSeq label_seq_floatValue;
                        TypeObjectUtils::add_union_case_label(label_seq_floatValue, static_cast<int32_t>(1));
                        CommonUnionMember common_floatValue;
                        MemberId member_id_floatValue = 0x00000002;
                        if (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1()._d() || TK_NONE == type_ids_InnerUnionHelper.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_floatValue = TypeObjectUtils::build_common_union_member(member_id_floatValue, member_flags_floatValue, type_ids_InnerUnionHelper.type_identifier1(),
                                    label_seq_floatValue);
                        }
                        else if (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_floatValue = TypeObjectUtils::build_common_union_member(member_id_floatValue, member_flags_floatValue, type_ids_InnerUnionHelper.type_identifier2(),
                                    label_seq_floatValue);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union floatValue member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_floatValue = "floatValue";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_floatValue;
                        ann_custom_InnerUnionHelper.reset();
                        CompleteMemberDetail detail_floatValue = TypeObjectUtils::build_complete_member_detail(name_floatValue, member_ann_builtin_floatValue, ann_custom_InnerUnionHelper);
                        CompleteUnionMember member_floatValue = TypeObjectUtils::build_complete_union_member(common_floatValue, detail_floatValue);
                        TypeObjectUtils::add_complete_union_member(member_seq_InnerUnionHelper, member_floatValue);
                    }
                    {
                        return_code_InnerUnionHelper =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int16_t", type_ids_InnerUnionHelper);

                        if (return_code_InnerUnionHelper != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "shortValue Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionMemberFlag member_flags_shortValue = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                true, false);
                        UnionCaseLabelSeq label_seq_shortValue;
                        CommonUnionMember common_shortValue;
                        MemberId member_id_shortValue = 0x00000003;
                        if (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1()._d() || TK_NONE == type_ids_InnerUnionHelper.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_shortValue = TypeObjectUtils::build_common_union_member(member_id_shortValue, member_flags_shortValue, type_ids_InnerUnionHelper.type_identifier1(),
                                    label_seq_shortValue);
                        }
                        else if (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_shortValue = TypeObjectUtils::build_common_union_member(member_id_shortValue, member_flags_shortValue, type_ids_InnerUnionHelper.type_identifier2(),
                                    label_seq_shortValue);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union shortValue member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_shortValue = "shortValue";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_shortValue;
                        ann_custom_InnerUnionHelper.reset();
                        CompleteMemberDetail detail_shortValue = TypeObjectUtils::build_complete_member_detail(name_shortValue, member_ann_builtin_shortValue, ann_custom_InnerUnionHelper);
                        CompleteUnionMember member_shortValue = TypeObjectUtils::build_complete_union_member(common_shortValue, detail_shortValue);
                        TypeObjectUtils::add_complete_union_member(member_seq_InnerUnionHelper, member_shortValue);
                    }
                    CompleteUnionType union_type_InnerUnionHelper = TypeObjectUtils::build_complete_union_type(union_flags_InnerUnionHelper, header_InnerUnionHelper, discriminator_InnerUnionHelper,
                            member_seq_InnerUnionHelper);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_union_type_object(union_type_InnerUnionHelper, type_name_InnerUnionHelper.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "InnerUnionHelper already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_InnerUnionHelper =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "InnerUnionHelper", type_ids_InnerUnionHelper);
                    if (return_code_InnerUnionHelper != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "InnerUnionHelper: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_union = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_union;
            MemberId member_id_var_union = 0x00000000;
            if (EK_COMPLETE == type_ids_StructUnion.type_identifier1()._d() || TK_NONE == type_ids_StructUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_union = TypeObjectUtils::build_common_struct_member(member_id_var_union, member_flags_var_union, type_ids_StructUnion.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StructUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_union = TypeObjectUtils::build_common_struct_member(member_id_var_union, member_flags_var_union, type_ids_StructUnion.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_union member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_union = "var_union";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_union;
            ann_custom_StructUnion.reset();
            CompleteMemberDetail detail_var_union = TypeObjectUtils::build_complete_member_detail(name_var_union, member_ann_builtin_var_union, ann_custom_StructUnion);
            CompleteStructMember member_var_union = TypeObjectUtils::build_complete_struct_member(common_var_union, detail_var_union);
            TypeObjectUtils::add_complete_struct_member(member_seq_StructUnion, member_var_union);
        }
        CompleteStructType struct_type_StructUnion = TypeObjectUtils::build_complete_struct_type(struct_flags_StructUnion, header_StructUnion, member_seq_StructUnion);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructUnion, type_name_StructUnion.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StructUnion already registered in TypeObjectRegistry for a different type.");
        }
        return_code_StructUnion =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "StructUnion", type_ids_StructUnion);
        if (return_code_StructUnion != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StructUnion: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_StructStructure_type_identifier()
{
    {
        StructTypeFlag struct_flags_StructStructure = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_StructStructure;
        TypeIdentifierPair type_ids_StructStructure;
        QualifiedTypeName type_name_StructStructure = "StructStructure";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructStructure;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructStructure;
        CompleteTypeDetail detail_StructStructure = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructStructure, ann_custom_StructStructure, type_name_StructStructure.to_string());
        CompleteStructHeader header_StructStructure;
        header_StructStructure = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructStructure);
        CompleteStructMemberSeq member_seq_StructStructure;
        {
            return_code_StructStructure =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "InnerStructureHelper", type_ids_StructStructure);

            if (return_code_StructStructure != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_InnerStructureHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            true, false);
                    ReturnCode_t return_code_InnerStructureHelper;
                    TypeIdentifierPair type_ids_InnerStructureHelper;
                    QualifiedTypeName type_name_InnerStructureHelper = "InnerStructureHelper";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_InnerStructureHelper;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_InnerStructureHelper;
                    AppliedAnnotationSeq tmp_ann_custom_InnerStructureHelper;
                    eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim_InnerStructureHelper;
                    if (!tmp_ann_custom_InnerStructureHelper.empty())
                    {
                        ann_custom_InnerStructureHelper = tmp_ann_custom_InnerStructureHelper;
                    }

                    CompleteTypeDetail detail_InnerStructureHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_InnerStructureHelper, ann_custom_InnerStructureHelper, type_name_InnerStructureHelper.to_string());
                    CompleteStructHeader header_InnerStructureHelper;
                    header_InnerStructureHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_InnerStructureHelper);
                    CompleteStructMemberSeq member_seq_InnerStructureHelper;
                    {
                        return_code_InnerStructureHelper =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids_InnerStructureHelper);

                        if (return_code_InnerStructureHelper != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "field1 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        StructMemberFlag member_flags_field1 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_field1;
                        MemberId member_id_field1 = 0x00000000;
                        if (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1()._d() || TK_NONE == type_ids_InnerStructureHelper.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_field1 = TypeObjectUtils::build_common_struct_member(member_id_field1, member_flags_field1, type_ids_InnerStructureHelper.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_field1 = TypeObjectUtils::build_common_struct_member(member_id_field1, member_flags_field1, type_ids_InnerStructureHelper.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure field1 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_field1 = "field1";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_field1;
                        ann_custom_InnerStructureHelper.reset();
                        CompleteMemberDetail detail_field1 = TypeObjectUtils::build_complete_member_detail(name_field1, member_ann_builtin_field1, ann_custom_InnerStructureHelper);
                        CompleteStructMember member_field1 = TypeObjectUtils::build_complete_struct_member(common_field1, detail_field1);
                        TypeObjectUtils::add_complete_struct_member(member_seq_InnerStructureHelper, member_field1);
                    }
                    {
                        return_code_InnerStructureHelper =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_float", type_ids_InnerStructureHelper);

                        if (return_code_InnerStructureHelper != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "field2 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        StructMemberFlag member_flags_field2 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_field2;
                        MemberId member_id_field2 = 0x00000001;
                        if (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1()._d() || TK_NONE == type_ids_InnerStructureHelper.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_field2 = TypeObjectUtils::build_common_struct_member(member_id_field2, member_flags_field2, type_ids_InnerStructureHelper.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_field2 = TypeObjectUtils::build_common_struct_member(member_id_field2, member_flags_field2, type_ids_InnerStructureHelper.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure field2 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_field2 = "field2";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_field2;
                        ann_custom_InnerStructureHelper.reset();
                        CompleteMemberDetail detail_field2 = TypeObjectUtils::build_complete_member_detail(name_field2, member_ann_builtin_field2, ann_custom_InnerStructureHelper);
                        CompleteStructMember member_field2 = TypeObjectUtils::build_complete_struct_member(common_field2, detail_field2);
                        TypeObjectUtils::add_complete_struct_member(member_seq_InnerStructureHelper, member_field2);
                    }
                    CompleteStructType struct_type_InnerStructureHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_InnerStructureHelper, header_InnerStructureHelper, member_seq_InnerStructureHelper);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_InnerStructureHelper, type_name_InnerStructureHelper.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "InnerStructureHelper already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_InnerStructureHelper =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "InnerStructureHelper", type_ids_InnerStructureHelper);
                    if (return_code_InnerStructureHelper != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "InnerStructureHelper: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_structure = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_structure;
            MemberId member_id_var_structure = 0x00000000;
            if (EK_COMPLETE == type_ids_StructStructure.type_identifier1()._d() || TK_NONE == type_ids_StructStructure.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructStructure.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructStructure.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructStructure.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructStructure.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructStructure.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructStructure.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructStructure.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructStructure.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructStructure.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructStructure.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructStructure.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructStructure.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructStructure.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructStructure.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_structure = TypeObjectUtils::build_common_struct_member(member_id_var_structure, member_flags_var_structure, type_ids_StructStructure.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StructStructure.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructStructure.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructStructure.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructStructure.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructStructure.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructStructure.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructStructure.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructStructure.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructStructure.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructStructure.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructStructure.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructStructure.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructStructure.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructStructure.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructStructure.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_structure = TypeObjectUtils::build_common_struct_member(member_id_var_structure, member_flags_var_structure, type_ids_StructStructure.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_structure member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_structure = "var_structure";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_structure;
            ann_custom_StructStructure.reset();
            CompleteMemberDetail detail_var_structure = TypeObjectUtils::build_complete_member_detail(name_var_structure, member_ann_builtin_var_structure, ann_custom_StructStructure);
            CompleteStructMember member_var_structure = TypeObjectUtils::build_complete_struct_member(common_var_structure, detail_var_structure);
            TypeObjectUtils::add_complete_struct_member(member_seq_StructStructure, member_var_structure);
        }
        CompleteStructType struct_type_StructStructure = TypeObjectUtils::build_complete_struct_type(struct_flags_StructStructure, header_StructStructure, member_seq_StructStructure);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructStructure, type_name_StructStructure.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StructStructure already registered in TypeObjectRegistry for a different type.");
        }
        return_code_StructStructure =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "StructStructure", type_ids_StructStructure);
        if (return_code_StructStructure != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StructStructure: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_StructBitset_type_identifier()
{
    {
        StructTypeFlag struct_flags_StructBitset = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_StructBitset;
        TypeIdentifierPair type_ids_StructBitset;
        QualifiedTypeName type_name_StructBitset = "StructBitset";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructBitset;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructBitset;
        CompleteTypeDetail detail_StructBitset = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructBitset, ann_custom_StructBitset, type_name_StructBitset.to_string());
        CompleteStructHeader header_StructBitset;
        header_StructBitset = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructBitset);
        CompleteStructMemberSeq member_seq_StructBitset;
        {
            return_code_StructBitset =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "InnerBitsetHelper", type_ids_StructBitset);

            if (return_code_StructBitset != eprosima::fastdds::dds::RETCODE_OK)
            {
                BitsetTypeFlag bitset_flags_InnerBitsetHelper = 0;
                QualifiedTypeName type_name_InnerBitsetHelper = "InnerBitsetHelper";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_InnerBitsetHelper;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_InnerBitsetHelper;
                CompleteTypeDetail detail_InnerBitsetHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_InnerBitsetHelper, ann_custom_InnerBitsetHelper, type_name_InnerBitsetHelper.to_string());
                CompleteBitsetHeader header_InnerBitsetHelper = TypeObjectUtils::build_complete_bitset_header(detail_InnerBitsetHelper);
                CompleteBitfieldSeq field_seq_InnerBitsetHelper;
                {
                    uint16_t position_a = 0;
                    BitsetMemberFlag flags_a = 0;
                    uint8_t bitcount_a = 3;
                    TypeKind holder_type_a = TK_BYTE;
                    CommonBitfield common_a = TypeObjectUtils::build_common_bitfield(position_a, flags_a, bitcount_a, holder_type_a);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_a;
                    ann_custom_InnerBitsetHelper.reset();
                    MemberName name_a = "a";
                    CompleteMemberDetail detail_a = TypeObjectUtils::build_complete_member_detail(name_a, member_ann_builtin_a, ann_custom_InnerBitsetHelper);
                    CompleteBitfield bitfield_a = TypeObjectUtils::build_complete_bitfield(common_a, detail_a);
                    TypeObjectUtils::add_complete_bitfield(field_seq_InnerBitsetHelper, bitfield_a);
                }
                {
                    uint16_t position_b = 3;
                    BitsetMemberFlag flags_b = 0;
                    uint8_t bitcount_b = 1;
                    TypeKind holder_type_b = TK_BOOLEAN;
                    CommonBitfield common_b = TypeObjectUtils::build_common_bitfield(position_b, flags_b, bitcount_b, holder_type_b);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_b;
                    ann_custom_InnerBitsetHelper.reset();
                    MemberName name_b = "b";
                    CompleteMemberDetail detail_b = TypeObjectUtils::build_complete_member_detail(name_b, member_ann_builtin_b, ann_custom_InnerBitsetHelper);
                    CompleteBitfield bitfield_b = TypeObjectUtils::build_complete_bitfield(common_b, detail_b);
                    TypeObjectUtils::add_complete_bitfield(field_seq_InnerBitsetHelper, bitfield_b);
                }
                {
                    uint16_t position_c = 8;
                    BitsetMemberFlag flags_c = 0;
                    uint8_t bitcount_c = 10;
                    TypeKind holder_type_c = TK_UINT16;
                    CommonBitfield common_c = TypeObjectUtils::build_common_bitfield(position_c, flags_c, bitcount_c, holder_type_c);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_c;
                    ann_custom_InnerBitsetHelper.reset();
                    MemberName name_c = "c";
                    CompleteMemberDetail detail_c = TypeObjectUtils::build_complete_member_detail(name_c, member_ann_builtin_c, ann_custom_InnerBitsetHelper);
                    CompleteBitfield bitfield_c = TypeObjectUtils::build_complete_bitfield(common_c, detail_c);
                    TypeObjectUtils::add_complete_bitfield(field_seq_InnerBitsetHelper, bitfield_c);
                }
                {
                    uint16_t position_d = 21;
                    BitsetMemberFlag flags_d = 0;
                    uint8_t bitcount_d = 12;
                    TypeKind holder_type_d = TK_INT16;
                    CommonBitfield common_d = TypeObjectUtils::build_common_bitfield(position_d, flags_d, bitcount_d, holder_type_d);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_d;
                    ann_custom_InnerBitsetHelper.reset();
                    MemberName name_d = "d";
                    CompleteMemberDetail detail_d = TypeObjectUtils::build_complete_member_detail(name_d, member_ann_builtin_d, ann_custom_InnerBitsetHelper);
                    CompleteBitfield bitfield_d = TypeObjectUtils::build_complete_bitfield(common_d, detail_d);
                    TypeObjectUtils::add_complete_bitfield(field_seq_InnerBitsetHelper, bitfield_d);
                }
                CompleteBitsetType bitset_type_InnerBitsetHelper = TypeObjectUtils::build_complete_bitset_type(bitset_flags_InnerBitsetHelper, header_InnerBitsetHelper, field_seq_InnerBitsetHelper);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_bitset_type_object(bitset_type_InnerBitsetHelper, type_name_InnerBitsetHelper.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "InnerBitsetHelper already registered in TypeObjectRegistry for a different type.");
                }
                return_code_StructBitset =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "InnerBitsetHelper", type_ids_StructBitset);
                if (return_code_StructBitset != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "InnerBitsetHelper: Given Bitset TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_var_bitset = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_bitset;
            MemberId member_id_var_bitset = 0x00000000;
            if (EK_COMPLETE == type_ids_StructBitset.type_identifier1()._d() || TK_NONE == type_ids_StructBitset.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructBitset.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructBitset.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructBitset.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructBitset.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructBitset.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructBitset.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructBitset.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructBitset.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructBitset.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructBitset.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructBitset.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructBitset.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructBitset.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructBitset.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_bitset = TypeObjectUtils::build_common_struct_member(member_id_var_bitset, member_flags_var_bitset, type_ids_StructBitset.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StructBitset.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructBitset.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructBitset.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructBitset.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructBitset.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructBitset.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructBitset.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructBitset.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructBitset.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructBitset.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructBitset.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructBitset.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructBitset.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructBitset.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructBitset.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_bitset = TypeObjectUtils::build_common_struct_member(member_id_var_bitset, member_flags_var_bitset, type_ids_StructBitset.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_bitset member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_bitset = "var_bitset";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_bitset;
            ann_custom_StructBitset.reset();
            CompleteMemberDetail detail_var_bitset = TypeObjectUtils::build_complete_member_detail(name_var_bitset, member_ann_builtin_var_bitset, ann_custom_StructBitset);
            CompleteStructMember member_var_bitset = TypeObjectUtils::build_complete_struct_member(common_var_bitset, detail_var_bitset);
            TypeObjectUtils::add_complete_struct_member(member_seq_StructBitset, member_var_bitset);
        }
        CompleteStructType struct_type_StructBitset = TypeObjectUtils::build_complete_struct_type(struct_flags_StructBitset, header_StructBitset, member_seq_StructBitset);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructBitset, type_name_StructBitset.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StructBitset already registered in TypeObjectRegistry for a different type.");
        }
        return_code_StructBitset =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "StructBitset", type_ids_StructBitset);
        if (return_code_StructBitset != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StructBitset: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_StructEmpty_type_identifier()
{
    {
        StructTypeFlag struct_flags_StructEmpty = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_StructEmpty;
        TypeIdentifierPair type_ids_StructEmpty;
        QualifiedTypeName type_name_StructEmpty = "StructEmpty";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructEmpty;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructEmpty;
        CompleteTypeDetail detail_StructEmpty = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructEmpty, ann_custom_StructEmpty, type_name_StructEmpty.to_string());
        CompleteStructHeader header_StructEmpty;
        header_StructEmpty = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructEmpty);
        CompleteStructMemberSeq member_seq_StructEmpty;
        CompleteStructType struct_type_StructEmpty = TypeObjectUtils::build_complete_struct_type(struct_flags_StructEmpty, header_StructEmpty, member_seq_StructEmpty);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructEmpty, type_name_StructEmpty.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StructEmpty already registered in TypeObjectRegistry for a different type.");
        }
        return_code_StructEmpty =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "StructEmpty", type_ids_StructEmpty);
        if (return_code_StructEmpty != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StructEmpty: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_Structures_type_identifier()
{
    {
        StructTypeFlag struct_flags_Structures = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_Structures;
        TypeIdentifierPair type_ids_Structures;
        QualifiedTypeName type_name_Structures = "Structures";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Structures;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Structures;
        CompleteTypeDetail detail_Structures = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Structures, ann_custom_Structures, type_name_Structures.to_string());
        CompleteStructHeader header_Structures;
        header_Structures = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_Structures);
        CompleteStructMemberSeq member_seq_Structures;
        {
            return_code_Structures =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "StructShort", type_ids_Structures);

            if (return_code_Structures != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_StructShort = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_StructShort;
                    TypeIdentifierPair type_ids_StructShort;
                    QualifiedTypeName type_name_StructShort = "StructShort";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructShort;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructShort;
                    CompleteTypeDetail detail_StructShort = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructShort, ann_custom_StructShort, type_name_StructShort.to_string());
                    CompleteStructHeader header_StructShort;
                    header_StructShort = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructShort);
                    CompleteStructMemberSeq member_seq_StructShort;
                    {
                        return_code_StructShort =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int16_t", type_ids_StructShort);

                        if (return_code_StructShort != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "var_short Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        StructMemberFlag member_flags_var_short = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_var_short;
                        MemberId member_id_var_short = 0x00000000;
                        if (EK_COMPLETE == type_ids_StructShort.type_identifier1()._d() || TK_NONE == type_ids_StructShort.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructShort.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructShort.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructShort.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructShort.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructShort.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructShort.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructShort.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructShort.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructShort.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructShort.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructShort.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructShort.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructShort.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructShort.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_short = TypeObjectUtils::build_common_struct_member(member_id_var_short, member_flags_var_short, type_ids_StructShort.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_StructShort.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructShort.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructShort.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructShort.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructShort.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructShort.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructShort.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructShort.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructShort.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructShort.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructShort.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructShort.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructShort.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructShort.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructShort.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_short = TypeObjectUtils::build_common_struct_member(member_id_var_short, member_flags_var_short, type_ids_StructShort.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure var_short member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_var_short = "var_short";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_short;
                        ann_custom_StructShort.reset();
                        CompleteMemberDetail detail_var_short = TypeObjectUtils::build_complete_member_detail(name_var_short, member_ann_builtin_var_short, ann_custom_StructShort);
                        CompleteStructMember member_var_short = TypeObjectUtils::build_complete_struct_member(common_var_short, detail_var_short);
                        TypeObjectUtils::add_complete_struct_member(member_seq_StructShort, member_var_short);
                    }
                    CompleteStructType struct_type_StructShort = TypeObjectUtils::build_complete_struct_type(struct_flags_StructShort, header_StructShort, member_seq_StructShort);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructShort, type_name_StructShort.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "StructShort already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_StructShort =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "StructShort", type_ids_StructShort);
                    if (return_code_StructShort != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "StructShort: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_StructShort = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_StructShort;
            MemberId member_id_var_StructShort = 0x00000000;
            if (EK_COMPLETE == type_ids_Structures.type_identifier1()._d() || TK_NONE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructShort = TypeObjectUtils::build_common_struct_member(member_id_var_StructShort, member_flags_var_StructShort, type_ids_Structures.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructShort = TypeObjectUtils::build_common_struct_member(member_id_var_StructShort, member_flags_var_StructShort, type_ids_Structures.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_StructShort member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_StructShort = "var_StructShort";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_StructShort;
            ann_custom_Structures.reset();
            CompleteMemberDetail detail_var_StructShort = TypeObjectUtils::build_complete_member_detail(name_var_StructShort, member_ann_builtin_var_StructShort, ann_custom_Structures);
            CompleteStructMember member_var_StructShort = TypeObjectUtils::build_complete_struct_member(common_var_StructShort, detail_var_StructShort);
            TypeObjectUtils::add_complete_struct_member(member_seq_Structures, member_var_StructShort);
        }
        {
            return_code_Structures =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "StructUnsignedShort", type_ids_Structures);

            if (return_code_Structures != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_StructUnsignedShort = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_StructUnsignedShort;
                    TypeIdentifierPair type_ids_StructUnsignedShort;
                    QualifiedTypeName type_name_StructUnsignedShort = "StructUnsignedShort";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructUnsignedShort;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructUnsignedShort;
                    CompleteTypeDetail detail_StructUnsignedShort = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructUnsignedShort, ann_custom_StructUnsignedShort, type_name_StructUnsignedShort.to_string());
                    CompleteStructHeader header_StructUnsignedShort;
                    header_StructUnsignedShort = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructUnsignedShort);
                    CompleteStructMemberSeq member_seq_StructUnsignedShort;
                    {
                        return_code_StructUnsignedShort =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_uint16_t", type_ids_StructUnsignedShort);

                        if (return_code_StructUnsignedShort != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "var_ushort Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        StructMemberFlag member_flags_var_ushort = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_var_ushort;
                        MemberId member_id_var_ushort = 0x00000000;
                        if (EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier1()._d() || TK_NONE == type_ids_StructUnsignedShort.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructUnsignedShort.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructUnsignedShort.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructUnsignedShort.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructUnsignedShort.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructUnsignedShort.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructUnsignedShort.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_ushort = TypeObjectUtils::build_common_struct_member(member_id_var_ushort, member_flags_var_ushort, type_ids_StructUnsignedShort.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructUnsignedShort.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructUnsignedShort.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructUnsignedShort.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructUnsignedShort.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructUnsignedShort.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructUnsignedShort.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructUnsignedShort.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_ushort = TypeObjectUtils::build_common_struct_member(member_id_var_ushort, member_flags_var_ushort, type_ids_StructUnsignedShort.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure var_ushort member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_var_ushort = "var_ushort";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_ushort;
                        ann_custom_StructUnsignedShort.reset();
                        CompleteMemberDetail detail_var_ushort = TypeObjectUtils::build_complete_member_detail(name_var_ushort, member_ann_builtin_var_ushort, ann_custom_StructUnsignedShort);
                        CompleteStructMember member_var_ushort = TypeObjectUtils::build_complete_struct_member(common_var_ushort, detail_var_ushort);
                        TypeObjectUtils::add_complete_struct_member(member_seq_StructUnsignedShort, member_var_ushort);
                    }
                    CompleteStructType struct_type_StructUnsignedShort = TypeObjectUtils::build_complete_struct_type(struct_flags_StructUnsignedShort, header_StructUnsignedShort, member_seq_StructUnsignedShort);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructUnsignedShort, type_name_StructUnsignedShort.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "StructUnsignedShort already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_StructUnsignedShort =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "StructUnsignedShort", type_ids_StructUnsignedShort);
                    if (return_code_StructUnsignedShort != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "StructUnsignedShort: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_StructUnsignedShort = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_StructUnsignedShort;
            MemberId member_id_var_StructUnsignedShort = 0x00000001;
            if (EK_COMPLETE == type_ids_Structures.type_identifier1()._d() || TK_NONE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructUnsignedShort = TypeObjectUtils::build_common_struct_member(member_id_var_StructUnsignedShort, member_flags_var_StructUnsignedShort, type_ids_Structures.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructUnsignedShort = TypeObjectUtils::build_common_struct_member(member_id_var_StructUnsignedShort, member_flags_var_StructUnsignedShort, type_ids_Structures.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_StructUnsignedShort member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_StructUnsignedShort = "var_StructUnsignedShort";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_StructUnsignedShort;
            ann_custom_Structures.reset();
            CompleteMemberDetail detail_var_StructUnsignedShort = TypeObjectUtils::build_complete_member_detail(name_var_StructUnsignedShort, member_ann_builtin_var_StructUnsignedShort, ann_custom_Structures);
            CompleteStructMember member_var_StructUnsignedShort = TypeObjectUtils::build_complete_struct_member(common_var_StructUnsignedShort, detail_var_StructUnsignedShort);
            TypeObjectUtils::add_complete_struct_member(member_seq_Structures, member_var_StructUnsignedShort);
        }
        {
            return_code_Structures =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "StructLong", type_ids_Structures);

            if (return_code_Structures != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_StructLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_StructLong;
                    TypeIdentifierPair type_ids_StructLong;
                    QualifiedTypeName type_name_StructLong = "StructLong";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructLong;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructLong;
                    CompleteTypeDetail detail_StructLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructLong, ann_custom_StructLong, type_name_StructLong.to_string());
                    CompleteStructHeader header_StructLong;
                    header_StructLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructLong);
                    CompleteStructMemberSeq member_seq_StructLong;
                    {
                        return_code_StructLong =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids_StructLong);

                        if (return_code_StructLong != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "var_long Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        StructMemberFlag member_flags_var_long = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_var_long;
                        MemberId member_id_var_long = 0x00000000;
                        if (EK_COMPLETE == type_ids_StructLong.type_identifier1()._d() || TK_NONE == type_ids_StructLong.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructLong.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructLong.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructLong.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructLong.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructLong.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructLong.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructLong.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructLong.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructLong.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructLong.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructLong.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructLong.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructLong.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructLong.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_long = TypeObjectUtils::build_common_struct_member(member_id_var_long, member_flags_var_long, type_ids_StructLong.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_StructLong.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructLong.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructLong.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructLong.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructLong.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructLong.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructLong.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructLong.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructLong.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructLong.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructLong.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructLong.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructLong.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructLong.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructLong.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_long = TypeObjectUtils::build_common_struct_member(member_id_var_long, member_flags_var_long, type_ids_StructLong.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure var_long member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_var_long = "var_long";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_long;
                        ann_custom_StructLong.reset();
                        CompleteMemberDetail detail_var_long = TypeObjectUtils::build_complete_member_detail(name_var_long, member_ann_builtin_var_long, ann_custom_StructLong);
                        CompleteStructMember member_var_long = TypeObjectUtils::build_complete_struct_member(common_var_long, detail_var_long);
                        TypeObjectUtils::add_complete_struct_member(member_seq_StructLong, member_var_long);
                    }
                    CompleteStructType struct_type_StructLong = TypeObjectUtils::build_complete_struct_type(struct_flags_StructLong, header_StructLong, member_seq_StructLong);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructLong, type_name_StructLong.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "StructLong already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_StructLong =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "StructLong", type_ids_StructLong);
                    if (return_code_StructLong != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "StructLong: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_StructLong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_StructLong;
            MemberId member_id_var_StructLong = 0x00000002;
            if (EK_COMPLETE == type_ids_Structures.type_identifier1()._d() || TK_NONE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructLong = TypeObjectUtils::build_common_struct_member(member_id_var_StructLong, member_flags_var_StructLong, type_ids_Structures.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructLong = TypeObjectUtils::build_common_struct_member(member_id_var_StructLong, member_flags_var_StructLong, type_ids_Structures.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_StructLong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_StructLong = "var_StructLong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_StructLong;
            ann_custom_Structures.reset();
            CompleteMemberDetail detail_var_StructLong = TypeObjectUtils::build_complete_member_detail(name_var_StructLong, member_ann_builtin_var_StructLong, ann_custom_Structures);
            CompleteStructMember member_var_StructLong = TypeObjectUtils::build_complete_struct_member(common_var_StructLong, detail_var_StructLong);
            TypeObjectUtils::add_complete_struct_member(member_seq_Structures, member_var_StructLong);
        }
        {
            return_code_Structures =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "StructUnsignedLong", type_ids_Structures);

            if (return_code_Structures != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_StructUnsignedLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_StructUnsignedLong;
                    TypeIdentifierPair type_ids_StructUnsignedLong;
                    QualifiedTypeName type_name_StructUnsignedLong = "StructUnsignedLong";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructUnsignedLong;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructUnsignedLong;
                    CompleteTypeDetail detail_StructUnsignedLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructUnsignedLong, ann_custom_StructUnsignedLong, type_name_StructUnsignedLong.to_string());
                    CompleteStructHeader header_StructUnsignedLong;
                    header_StructUnsignedLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructUnsignedLong);
                    CompleteStructMemberSeq member_seq_StructUnsignedLong;
                    {
                        return_code_StructUnsignedLong =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_uint32_t", type_ids_StructUnsignedLong);

                        if (return_code_StructUnsignedLong != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "var_ulong Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        StructMemberFlag member_flags_var_ulong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_var_ulong;
                        MemberId member_id_var_ulong = 0x00000000;
                        if (EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier1()._d() || TK_NONE == type_ids_StructUnsignedLong.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructUnsignedLong.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructUnsignedLong.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructUnsignedLong.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructUnsignedLong.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructUnsignedLong.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructUnsignedLong.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_ulong = TypeObjectUtils::build_common_struct_member(member_id_var_ulong, member_flags_var_ulong, type_ids_StructUnsignedLong.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructUnsignedLong.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructUnsignedLong.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructUnsignedLong.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructUnsignedLong.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructUnsignedLong.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructUnsignedLong.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructUnsignedLong.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_ulong = TypeObjectUtils::build_common_struct_member(member_id_var_ulong, member_flags_var_ulong, type_ids_StructUnsignedLong.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure var_ulong member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_var_ulong = "var_ulong";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_ulong;
                        ann_custom_StructUnsignedLong.reset();
                        CompleteMemberDetail detail_var_ulong = TypeObjectUtils::build_complete_member_detail(name_var_ulong, member_ann_builtin_var_ulong, ann_custom_StructUnsignedLong);
                        CompleteStructMember member_var_ulong = TypeObjectUtils::build_complete_struct_member(common_var_ulong, detail_var_ulong);
                        TypeObjectUtils::add_complete_struct_member(member_seq_StructUnsignedLong, member_var_ulong);
                    }
                    CompleteStructType struct_type_StructUnsignedLong = TypeObjectUtils::build_complete_struct_type(struct_flags_StructUnsignedLong, header_StructUnsignedLong, member_seq_StructUnsignedLong);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructUnsignedLong, type_name_StructUnsignedLong.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "StructUnsignedLong already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_StructUnsignedLong =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "StructUnsignedLong", type_ids_StructUnsignedLong);
                    if (return_code_StructUnsignedLong != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "StructUnsignedLong: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_StructUnsignedLong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_StructUnsignedLong;
            MemberId member_id_var_StructUnsignedLong = 0x00000003;
            if (EK_COMPLETE == type_ids_Structures.type_identifier1()._d() || TK_NONE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructUnsignedLong = TypeObjectUtils::build_common_struct_member(member_id_var_StructUnsignedLong, member_flags_var_StructUnsignedLong, type_ids_Structures.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructUnsignedLong = TypeObjectUtils::build_common_struct_member(member_id_var_StructUnsignedLong, member_flags_var_StructUnsignedLong, type_ids_Structures.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_StructUnsignedLong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_StructUnsignedLong = "var_StructUnsignedLong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_StructUnsignedLong;
            ann_custom_Structures.reset();
            CompleteMemberDetail detail_var_StructUnsignedLong = TypeObjectUtils::build_complete_member_detail(name_var_StructUnsignedLong, member_ann_builtin_var_StructUnsignedLong, ann_custom_Structures);
            CompleteStructMember member_var_StructUnsignedLong = TypeObjectUtils::build_complete_struct_member(common_var_StructUnsignedLong, detail_var_StructUnsignedLong);
            TypeObjectUtils::add_complete_struct_member(member_seq_Structures, member_var_StructUnsignedLong);
        }
        {
            return_code_Structures =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "StructLongLong", type_ids_Structures);

            if (return_code_Structures != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_StructLongLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_StructLongLong;
                    TypeIdentifierPair type_ids_StructLongLong;
                    QualifiedTypeName type_name_StructLongLong = "StructLongLong";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructLongLong;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructLongLong;
                    CompleteTypeDetail detail_StructLongLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructLongLong, ann_custom_StructLongLong, type_name_StructLongLong.to_string());
                    CompleteStructHeader header_StructLongLong;
                    header_StructLongLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructLongLong);
                    CompleteStructMemberSeq member_seq_StructLongLong;
                    {
                        return_code_StructLongLong =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int64_t", type_ids_StructLongLong);

                        if (return_code_StructLongLong != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "var_longlong Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        StructMemberFlag member_flags_var_longlong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_var_longlong;
                        MemberId member_id_var_longlong = 0x00000000;
                        if (EK_COMPLETE == type_ids_StructLongLong.type_identifier1()._d() || TK_NONE == type_ids_StructLongLong.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructLongLong.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructLongLong.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructLongLong.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructLongLong.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructLongLong.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructLongLong.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructLongLong.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructLongLong.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructLongLong.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructLongLong.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructLongLong.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructLongLong.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructLongLong.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructLongLong.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_longlong = TypeObjectUtils::build_common_struct_member(member_id_var_longlong, member_flags_var_longlong, type_ids_StructLongLong.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_StructLongLong.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructLongLong.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructLongLong.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructLongLong.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructLongLong.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructLongLong.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructLongLong.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructLongLong.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructLongLong.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructLongLong.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructLongLong.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructLongLong.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructLongLong.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructLongLong.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructLongLong.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_longlong = TypeObjectUtils::build_common_struct_member(member_id_var_longlong, member_flags_var_longlong, type_ids_StructLongLong.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure var_longlong member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_var_longlong = "var_longlong";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_longlong;
                        ann_custom_StructLongLong.reset();
                        CompleteMemberDetail detail_var_longlong = TypeObjectUtils::build_complete_member_detail(name_var_longlong, member_ann_builtin_var_longlong, ann_custom_StructLongLong);
                        CompleteStructMember member_var_longlong = TypeObjectUtils::build_complete_struct_member(common_var_longlong, detail_var_longlong);
                        TypeObjectUtils::add_complete_struct_member(member_seq_StructLongLong, member_var_longlong);
                    }
                    CompleteStructType struct_type_StructLongLong = TypeObjectUtils::build_complete_struct_type(struct_flags_StructLongLong, header_StructLongLong, member_seq_StructLongLong);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructLongLong, type_name_StructLongLong.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "StructLongLong already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_StructLongLong =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "StructLongLong", type_ids_StructLongLong);
                    if (return_code_StructLongLong != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "StructLongLong: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_StructLongLong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_StructLongLong;
            MemberId member_id_var_StructLongLong = 0x00000004;
            if (EK_COMPLETE == type_ids_Structures.type_identifier1()._d() || TK_NONE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructLongLong = TypeObjectUtils::build_common_struct_member(member_id_var_StructLongLong, member_flags_var_StructLongLong, type_ids_Structures.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructLongLong = TypeObjectUtils::build_common_struct_member(member_id_var_StructLongLong, member_flags_var_StructLongLong, type_ids_Structures.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_StructLongLong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_StructLongLong = "var_StructLongLong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_StructLongLong;
            ann_custom_Structures.reset();
            CompleteMemberDetail detail_var_StructLongLong = TypeObjectUtils::build_complete_member_detail(name_var_StructLongLong, member_ann_builtin_var_StructLongLong, ann_custom_Structures);
            CompleteStructMember member_var_StructLongLong = TypeObjectUtils::build_complete_struct_member(common_var_StructLongLong, detail_var_StructLongLong);
            TypeObjectUtils::add_complete_struct_member(member_seq_Structures, member_var_StructLongLong);
        }
        {
            return_code_Structures =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "StructUnsignedLongLong", type_ids_Structures);

            if (return_code_Structures != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_StructUnsignedLongLong = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_StructUnsignedLongLong;
                    TypeIdentifierPair type_ids_StructUnsignedLongLong;
                    QualifiedTypeName type_name_StructUnsignedLongLong = "StructUnsignedLongLong";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructUnsignedLongLong;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructUnsignedLongLong;
                    CompleteTypeDetail detail_StructUnsignedLongLong = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructUnsignedLongLong, ann_custom_StructUnsignedLongLong, type_name_StructUnsignedLongLong.to_string());
                    CompleteStructHeader header_StructUnsignedLongLong;
                    header_StructUnsignedLongLong = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructUnsignedLongLong);
                    CompleteStructMemberSeq member_seq_StructUnsignedLongLong;
                    {
                        return_code_StructUnsignedLongLong =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_uint64_t", type_ids_StructUnsignedLongLong);

                        if (return_code_StructUnsignedLongLong != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "var_ulonglong Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        StructMemberFlag member_flags_var_ulonglong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_var_ulonglong;
                        MemberId member_id_var_ulonglong = 0x00000000;
                        if (EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier1()._d() || TK_NONE == type_ids_StructUnsignedLongLong.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructUnsignedLongLong.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructUnsignedLongLong.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructUnsignedLongLong.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructUnsignedLongLong.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructUnsignedLongLong.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructUnsignedLongLong.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_ulonglong = TypeObjectUtils::build_common_struct_member(member_id_var_ulonglong, member_flags_var_ulonglong, type_ids_StructUnsignedLongLong.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructUnsignedLongLong.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructUnsignedLongLong.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructUnsignedLongLong.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructUnsignedLongLong.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructUnsignedLongLong.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructUnsignedLongLong.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructUnsignedLongLong.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_ulonglong = TypeObjectUtils::build_common_struct_member(member_id_var_ulonglong, member_flags_var_ulonglong, type_ids_StructUnsignedLongLong.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure var_ulonglong member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_var_ulonglong = "var_ulonglong";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_ulonglong;
                        ann_custom_StructUnsignedLongLong.reset();
                        CompleteMemberDetail detail_var_ulonglong = TypeObjectUtils::build_complete_member_detail(name_var_ulonglong, member_ann_builtin_var_ulonglong, ann_custom_StructUnsignedLongLong);
                        CompleteStructMember member_var_ulonglong = TypeObjectUtils::build_complete_struct_member(common_var_ulonglong, detail_var_ulonglong);
                        TypeObjectUtils::add_complete_struct_member(member_seq_StructUnsignedLongLong, member_var_ulonglong);
                    }
                    CompleteStructType struct_type_StructUnsignedLongLong = TypeObjectUtils::build_complete_struct_type(struct_flags_StructUnsignedLongLong, header_StructUnsignedLongLong, member_seq_StructUnsignedLongLong);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructUnsignedLongLong, type_name_StructUnsignedLongLong.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "StructUnsignedLongLong already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_StructUnsignedLongLong =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "StructUnsignedLongLong", type_ids_StructUnsignedLongLong);
                    if (return_code_StructUnsignedLongLong != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "StructUnsignedLongLong: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_StructUnsignedLongLong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_StructUnsignedLongLong;
            MemberId member_id_var_StructUnsignedLongLong = 0x00000005;
            if (EK_COMPLETE == type_ids_Structures.type_identifier1()._d() || TK_NONE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructUnsignedLongLong = TypeObjectUtils::build_common_struct_member(member_id_var_StructUnsignedLongLong, member_flags_var_StructUnsignedLongLong, type_ids_Structures.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructUnsignedLongLong = TypeObjectUtils::build_common_struct_member(member_id_var_StructUnsignedLongLong, member_flags_var_StructUnsignedLongLong, type_ids_Structures.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_StructUnsignedLongLong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_StructUnsignedLongLong = "var_StructUnsignedLongLong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_StructUnsignedLongLong;
            ann_custom_Structures.reset();
            CompleteMemberDetail detail_var_StructUnsignedLongLong = TypeObjectUtils::build_complete_member_detail(name_var_StructUnsignedLongLong, member_ann_builtin_var_StructUnsignedLongLong, ann_custom_Structures);
            CompleteStructMember member_var_StructUnsignedLongLong = TypeObjectUtils::build_complete_struct_member(common_var_StructUnsignedLongLong, detail_var_StructUnsignedLongLong);
            TypeObjectUtils::add_complete_struct_member(member_seq_Structures, member_var_StructUnsignedLongLong);
        }
        {
            return_code_Structures =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "StructFloat", type_ids_Structures);

            if (return_code_Structures != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_StructFloat = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_StructFloat;
                    TypeIdentifierPair type_ids_StructFloat;
                    QualifiedTypeName type_name_StructFloat = "StructFloat";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructFloat;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructFloat;
                    CompleteTypeDetail detail_StructFloat = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructFloat, ann_custom_StructFloat, type_name_StructFloat.to_string());
                    CompleteStructHeader header_StructFloat;
                    header_StructFloat = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructFloat);
                    CompleteStructMemberSeq member_seq_StructFloat;
                    {
                        return_code_StructFloat =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_float", type_ids_StructFloat);

                        if (return_code_StructFloat != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "var_float Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        StructMemberFlag member_flags_var_float = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_var_float;
                        MemberId member_id_var_float = 0x00000000;
                        if (EK_COMPLETE == type_ids_StructFloat.type_identifier1()._d() || TK_NONE == type_ids_StructFloat.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructFloat.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructFloat.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructFloat.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructFloat.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructFloat.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructFloat.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructFloat.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructFloat.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructFloat.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructFloat.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructFloat.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructFloat.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructFloat.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructFloat.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_float = TypeObjectUtils::build_common_struct_member(member_id_var_float, member_flags_var_float, type_ids_StructFloat.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_StructFloat.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructFloat.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructFloat.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructFloat.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructFloat.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructFloat.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructFloat.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructFloat.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructFloat.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructFloat.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructFloat.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructFloat.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructFloat.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructFloat.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructFloat.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_float = TypeObjectUtils::build_common_struct_member(member_id_var_float, member_flags_var_float, type_ids_StructFloat.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure var_float member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_var_float = "var_float";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_float;
                        ann_custom_StructFloat.reset();
                        CompleteMemberDetail detail_var_float = TypeObjectUtils::build_complete_member_detail(name_var_float, member_ann_builtin_var_float, ann_custom_StructFloat);
                        CompleteStructMember member_var_float = TypeObjectUtils::build_complete_struct_member(common_var_float, detail_var_float);
                        TypeObjectUtils::add_complete_struct_member(member_seq_StructFloat, member_var_float);
                    }
                    CompleteStructType struct_type_StructFloat = TypeObjectUtils::build_complete_struct_type(struct_flags_StructFloat, header_StructFloat, member_seq_StructFloat);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructFloat, type_name_StructFloat.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "StructFloat already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_StructFloat =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "StructFloat", type_ids_StructFloat);
                    if (return_code_StructFloat != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "StructFloat: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_StructFloat = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_StructFloat;
            MemberId member_id_var_StructFloat = 0x00000006;
            if (EK_COMPLETE == type_ids_Structures.type_identifier1()._d() || TK_NONE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructFloat = TypeObjectUtils::build_common_struct_member(member_id_var_StructFloat, member_flags_var_StructFloat, type_ids_Structures.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructFloat = TypeObjectUtils::build_common_struct_member(member_id_var_StructFloat, member_flags_var_StructFloat, type_ids_Structures.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_StructFloat member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_StructFloat = "var_StructFloat";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_StructFloat;
            ann_custom_Structures.reset();
            CompleteMemberDetail detail_var_StructFloat = TypeObjectUtils::build_complete_member_detail(name_var_StructFloat, member_ann_builtin_var_StructFloat, ann_custom_Structures);
            CompleteStructMember member_var_StructFloat = TypeObjectUtils::build_complete_struct_member(common_var_StructFloat, detail_var_StructFloat);
            TypeObjectUtils::add_complete_struct_member(member_seq_Structures, member_var_StructFloat);
        }
        {
            return_code_Structures =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "StructDouble", type_ids_Structures);

            if (return_code_Structures != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_StructDouble = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_StructDouble;
                    TypeIdentifierPair type_ids_StructDouble;
                    QualifiedTypeName type_name_StructDouble = "StructDouble";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructDouble;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructDouble;
                    CompleteTypeDetail detail_StructDouble = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructDouble, ann_custom_StructDouble, type_name_StructDouble.to_string());
                    CompleteStructHeader header_StructDouble;
                    header_StructDouble = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructDouble);
                    CompleteStructMemberSeq member_seq_StructDouble;
                    {
                        return_code_StructDouble =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_double", type_ids_StructDouble);

                        if (return_code_StructDouble != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "var_double Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        StructMemberFlag member_flags_var_double = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_var_double;
                        MemberId member_id_var_double = 0x00000000;
                        if (EK_COMPLETE == type_ids_StructDouble.type_identifier1()._d() || TK_NONE == type_ids_StructDouble.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructDouble.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructDouble.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructDouble.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructDouble.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructDouble.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructDouble.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructDouble.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructDouble.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructDouble.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructDouble.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructDouble.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructDouble.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructDouble.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructDouble.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_double = TypeObjectUtils::build_common_struct_member(member_id_var_double, member_flags_var_double, type_ids_StructDouble.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_StructDouble.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructDouble.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructDouble.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructDouble.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructDouble.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructDouble.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructDouble.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructDouble.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructDouble.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructDouble.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructDouble.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructDouble.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructDouble.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructDouble.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructDouble.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_double = TypeObjectUtils::build_common_struct_member(member_id_var_double, member_flags_var_double, type_ids_StructDouble.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure var_double member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_var_double = "var_double";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_double;
                        ann_custom_StructDouble.reset();
                        CompleteMemberDetail detail_var_double = TypeObjectUtils::build_complete_member_detail(name_var_double, member_ann_builtin_var_double, ann_custom_StructDouble);
                        CompleteStructMember member_var_double = TypeObjectUtils::build_complete_struct_member(common_var_double, detail_var_double);
                        TypeObjectUtils::add_complete_struct_member(member_seq_StructDouble, member_var_double);
                    }
                    CompleteStructType struct_type_StructDouble = TypeObjectUtils::build_complete_struct_type(struct_flags_StructDouble, header_StructDouble, member_seq_StructDouble);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructDouble, type_name_StructDouble.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "StructDouble already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_StructDouble =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "StructDouble", type_ids_StructDouble);
                    if (return_code_StructDouble != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "StructDouble: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_StructDouble = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_StructDouble;
            MemberId member_id_var_StructDouble = 0x00000007;
            if (EK_COMPLETE == type_ids_Structures.type_identifier1()._d() || TK_NONE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructDouble = TypeObjectUtils::build_common_struct_member(member_id_var_StructDouble, member_flags_var_StructDouble, type_ids_Structures.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructDouble = TypeObjectUtils::build_common_struct_member(member_id_var_StructDouble, member_flags_var_StructDouble, type_ids_Structures.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_StructDouble member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_StructDouble = "var_StructDouble";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_StructDouble;
            ann_custom_Structures.reset();
            CompleteMemberDetail detail_var_StructDouble = TypeObjectUtils::build_complete_member_detail(name_var_StructDouble, member_ann_builtin_var_StructDouble, ann_custom_Structures);
            CompleteStructMember member_var_StructDouble = TypeObjectUtils::build_complete_struct_member(common_var_StructDouble, detail_var_StructDouble);
            TypeObjectUtils::add_complete_struct_member(member_seq_Structures, member_var_StructDouble);
        }
        {
            return_code_Structures =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "StructLongDouble", type_ids_Structures);

            if (return_code_Structures != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_StructLongDouble = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_StructLongDouble;
                    TypeIdentifierPair type_ids_StructLongDouble;
                    QualifiedTypeName type_name_StructLongDouble = "StructLongDouble";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructLongDouble;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructLongDouble;
                    CompleteTypeDetail detail_StructLongDouble = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructLongDouble, ann_custom_StructLongDouble, type_name_StructLongDouble.to_string());
                    CompleteStructHeader header_StructLongDouble;
                    header_StructLongDouble = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructLongDouble);
                    CompleteStructMemberSeq member_seq_StructLongDouble;
                    {
                        return_code_StructLongDouble =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_longdouble", type_ids_StructLongDouble);

                        if (return_code_StructLongDouble != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "var_longdouble Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        StructMemberFlag member_flags_var_longdouble = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_var_longdouble;
                        MemberId member_id_var_longdouble = 0x00000000;
                        if (EK_COMPLETE == type_ids_StructLongDouble.type_identifier1()._d() || TK_NONE == type_ids_StructLongDouble.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructLongDouble.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructLongDouble.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructLongDouble.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructLongDouble.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructLongDouble.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructLongDouble.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructLongDouble.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructLongDouble.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructLongDouble.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructLongDouble.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructLongDouble.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructLongDouble.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructLongDouble.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructLongDouble.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_longdouble = TypeObjectUtils::build_common_struct_member(member_id_var_longdouble, member_flags_var_longdouble, type_ids_StructLongDouble.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_StructLongDouble.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructLongDouble.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructLongDouble.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructLongDouble.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructLongDouble.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructLongDouble.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructLongDouble.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructLongDouble.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructLongDouble.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructLongDouble.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructLongDouble.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructLongDouble.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructLongDouble.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructLongDouble.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructLongDouble.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_longdouble = TypeObjectUtils::build_common_struct_member(member_id_var_longdouble, member_flags_var_longdouble, type_ids_StructLongDouble.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure var_longdouble member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_var_longdouble = "var_longdouble";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_longdouble;
                        ann_custom_StructLongDouble.reset();
                        CompleteMemberDetail detail_var_longdouble = TypeObjectUtils::build_complete_member_detail(name_var_longdouble, member_ann_builtin_var_longdouble, ann_custom_StructLongDouble);
                        CompleteStructMember member_var_longdouble = TypeObjectUtils::build_complete_struct_member(common_var_longdouble, detail_var_longdouble);
                        TypeObjectUtils::add_complete_struct_member(member_seq_StructLongDouble, member_var_longdouble);
                    }
                    CompleteStructType struct_type_StructLongDouble = TypeObjectUtils::build_complete_struct_type(struct_flags_StructLongDouble, header_StructLongDouble, member_seq_StructLongDouble);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructLongDouble, type_name_StructLongDouble.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "StructLongDouble already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_StructLongDouble =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "StructLongDouble", type_ids_StructLongDouble);
                    if (return_code_StructLongDouble != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "StructLongDouble: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_StructLongDouble = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_StructLongDouble;
            MemberId member_id_var_StructLongDouble = 0x00000008;
            if (EK_COMPLETE == type_ids_Structures.type_identifier1()._d() || TK_NONE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructLongDouble = TypeObjectUtils::build_common_struct_member(member_id_var_StructLongDouble, member_flags_var_StructLongDouble, type_ids_Structures.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructLongDouble = TypeObjectUtils::build_common_struct_member(member_id_var_StructLongDouble, member_flags_var_StructLongDouble, type_ids_Structures.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_StructLongDouble member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_StructLongDouble = "var_StructLongDouble";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_StructLongDouble;
            ann_custom_Structures.reset();
            CompleteMemberDetail detail_var_StructLongDouble = TypeObjectUtils::build_complete_member_detail(name_var_StructLongDouble, member_ann_builtin_var_StructLongDouble, ann_custom_Structures);
            CompleteStructMember member_var_StructLongDouble = TypeObjectUtils::build_complete_struct_member(common_var_StructLongDouble, detail_var_StructLongDouble);
            TypeObjectUtils::add_complete_struct_member(member_seq_Structures, member_var_StructLongDouble);
        }
        {
            return_code_Structures =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "StructBoolean", type_ids_Structures);

            if (return_code_Structures != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_StructBoolean = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_StructBoolean;
                    TypeIdentifierPair type_ids_StructBoolean;
                    QualifiedTypeName type_name_StructBoolean = "StructBoolean";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructBoolean;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructBoolean;
                    CompleteTypeDetail detail_StructBoolean = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructBoolean, ann_custom_StructBoolean, type_name_StructBoolean.to_string());
                    CompleteStructHeader header_StructBoolean;
                    header_StructBoolean = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructBoolean);
                    CompleteStructMemberSeq member_seq_StructBoolean;
                    {
                        return_code_StructBoolean =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_bool", type_ids_StructBoolean);

                        if (return_code_StructBoolean != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "var_boolean Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        StructMemberFlag member_flags_var_boolean = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_var_boolean;
                        MemberId member_id_var_boolean = 0x00000000;
                        if (EK_COMPLETE == type_ids_StructBoolean.type_identifier1()._d() || TK_NONE == type_ids_StructBoolean.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructBoolean.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructBoolean.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructBoolean.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructBoolean.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructBoolean.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructBoolean.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructBoolean.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructBoolean.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructBoolean.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructBoolean.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructBoolean.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructBoolean.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructBoolean.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructBoolean.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_boolean = TypeObjectUtils::build_common_struct_member(member_id_var_boolean, member_flags_var_boolean, type_ids_StructBoolean.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_StructBoolean.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructBoolean.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructBoolean.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructBoolean.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructBoolean.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructBoolean.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructBoolean.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructBoolean.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructBoolean.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructBoolean.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructBoolean.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructBoolean.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructBoolean.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructBoolean.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructBoolean.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_boolean = TypeObjectUtils::build_common_struct_member(member_id_var_boolean, member_flags_var_boolean, type_ids_StructBoolean.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure var_boolean member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_var_boolean = "var_boolean";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_boolean;
                        ann_custom_StructBoolean.reset();
                        CompleteMemberDetail detail_var_boolean = TypeObjectUtils::build_complete_member_detail(name_var_boolean, member_ann_builtin_var_boolean, ann_custom_StructBoolean);
                        CompleteStructMember member_var_boolean = TypeObjectUtils::build_complete_struct_member(common_var_boolean, detail_var_boolean);
                        TypeObjectUtils::add_complete_struct_member(member_seq_StructBoolean, member_var_boolean);
                    }
                    CompleteStructType struct_type_StructBoolean = TypeObjectUtils::build_complete_struct_type(struct_flags_StructBoolean, header_StructBoolean, member_seq_StructBoolean);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructBoolean, type_name_StructBoolean.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "StructBoolean already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_StructBoolean =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "StructBoolean", type_ids_StructBoolean);
                    if (return_code_StructBoolean != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "StructBoolean: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_StructBoolean = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_StructBoolean;
            MemberId member_id_var_StructBoolean = 0x00000009;
            if (EK_COMPLETE == type_ids_Structures.type_identifier1()._d() || TK_NONE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructBoolean = TypeObjectUtils::build_common_struct_member(member_id_var_StructBoolean, member_flags_var_StructBoolean, type_ids_Structures.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructBoolean = TypeObjectUtils::build_common_struct_member(member_id_var_StructBoolean, member_flags_var_StructBoolean, type_ids_Structures.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_StructBoolean member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_StructBoolean = "var_StructBoolean";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_StructBoolean;
            ann_custom_Structures.reset();
            CompleteMemberDetail detail_var_StructBoolean = TypeObjectUtils::build_complete_member_detail(name_var_StructBoolean, member_ann_builtin_var_StructBoolean, ann_custom_Structures);
            CompleteStructMember member_var_StructBoolean = TypeObjectUtils::build_complete_struct_member(common_var_StructBoolean, detail_var_StructBoolean);
            TypeObjectUtils::add_complete_struct_member(member_seq_Structures, member_var_StructBoolean);
        }
        {
            return_code_Structures =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "StructOctet", type_ids_Structures);

            if (return_code_Structures != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_StructOctet = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_StructOctet;
                    TypeIdentifierPair type_ids_StructOctet;
                    QualifiedTypeName type_name_StructOctet = "StructOctet";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructOctet;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructOctet;
                    CompleteTypeDetail detail_StructOctet = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructOctet, ann_custom_StructOctet, type_name_StructOctet.to_string());
                    CompleteStructHeader header_StructOctet;
                    header_StructOctet = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructOctet);
                    CompleteStructMemberSeq member_seq_StructOctet;
                    {
                        return_code_StructOctet =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_byte", type_ids_StructOctet);

                        if (return_code_StructOctet != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "var_octet Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        StructMemberFlag member_flags_var_octet = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_var_octet;
                        MemberId member_id_var_octet = 0x00000000;
                        if (EK_COMPLETE == type_ids_StructOctet.type_identifier1()._d() || TK_NONE == type_ids_StructOctet.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructOctet.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructOctet.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructOctet.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructOctet.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructOctet.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructOctet.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructOctet.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructOctet.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructOctet.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructOctet.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructOctet.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructOctet.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructOctet.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructOctet.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_octet = TypeObjectUtils::build_common_struct_member(member_id_var_octet, member_flags_var_octet, type_ids_StructOctet.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_StructOctet.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructOctet.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructOctet.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructOctet.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructOctet.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructOctet.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructOctet.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructOctet.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructOctet.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructOctet.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructOctet.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructOctet.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructOctet.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructOctet.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructOctet.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_octet = TypeObjectUtils::build_common_struct_member(member_id_var_octet, member_flags_var_octet, type_ids_StructOctet.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure var_octet member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_var_octet = "var_octet";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_octet;
                        ann_custom_StructOctet.reset();
                        CompleteMemberDetail detail_var_octet = TypeObjectUtils::build_complete_member_detail(name_var_octet, member_ann_builtin_var_octet, ann_custom_StructOctet);
                        CompleteStructMember member_var_octet = TypeObjectUtils::build_complete_struct_member(common_var_octet, detail_var_octet);
                        TypeObjectUtils::add_complete_struct_member(member_seq_StructOctet, member_var_octet);
                    }
                    CompleteStructType struct_type_StructOctet = TypeObjectUtils::build_complete_struct_type(struct_flags_StructOctet, header_StructOctet, member_seq_StructOctet);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructOctet, type_name_StructOctet.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "StructOctet already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_StructOctet =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "StructOctet", type_ids_StructOctet);
                    if (return_code_StructOctet != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "StructOctet: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_StructOctet = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_StructOctet;
            MemberId member_id_var_StructOctet = 0x0000000a;
            if (EK_COMPLETE == type_ids_Structures.type_identifier1()._d() || TK_NONE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructOctet = TypeObjectUtils::build_common_struct_member(member_id_var_StructOctet, member_flags_var_StructOctet, type_ids_Structures.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructOctet = TypeObjectUtils::build_common_struct_member(member_id_var_StructOctet, member_flags_var_StructOctet, type_ids_Structures.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_StructOctet member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_StructOctet = "var_StructOctet";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_StructOctet;
            ann_custom_Structures.reset();
            CompleteMemberDetail detail_var_StructOctet = TypeObjectUtils::build_complete_member_detail(name_var_StructOctet, member_ann_builtin_var_StructOctet, ann_custom_Structures);
            CompleteStructMember member_var_StructOctet = TypeObjectUtils::build_complete_struct_member(common_var_StructOctet, detail_var_StructOctet);
            TypeObjectUtils::add_complete_struct_member(member_seq_Structures, member_var_StructOctet);
        }
        {
            return_code_Structures =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "StructChar8", type_ids_Structures);

            if (return_code_Structures != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_StructChar8 = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_StructChar8;
                    TypeIdentifierPair type_ids_StructChar8;
                    QualifiedTypeName type_name_StructChar8 = "StructChar8";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructChar8;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructChar8;
                    CompleteTypeDetail detail_StructChar8 = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructChar8, ann_custom_StructChar8, type_name_StructChar8.to_string());
                    CompleteStructHeader header_StructChar8;
                    header_StructChar8 = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructChar8);
                    CompleteStructMemberSeq member_seq_StructChar8;
                    {
                        return_code_StructChar8 =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_char", type_ids_StructChar8);

                        if (return_code_StructChar8 != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "var_char8 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        StructMemberFlag member_flags_var_char8 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_var_char8;
                        MemberId member_id_var_char8 = 0x00000000;
                        if (EK_COMPLETE == type_ids_StructChar8.type_identifier1()._d() || TK_NONE == type_ids_StructChar8.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructChar8.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructChar8.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructChar8.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructChar8.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructChar8.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructChar8.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructChar8.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructChar8.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructChar8.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructChar8.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructChar8.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructChar8.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructChar8.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructChar8.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_char8 = TypeObjectUtils::build_common_struct_member(member_id_var_char8, member_flags_var_char8, type_ids_StructChar8.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_StructChar8.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructChar8.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructChar8.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructChar8.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructChar8.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructChar8.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructChar8.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructChar8.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructChar8.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructChar8.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructChar8.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructChar8.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructChar8.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructChar8.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructChar8.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_char8 = TypeObjectUtils::build_common_struct_member(member_id_var_char8, member_flags_var_char8, type_ids_StructChar8.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure var_char8 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_var_char8 = "var_char8";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_char8;
                        ann_custom_StructChar8.reset();
                        CompleteMemberDetail detail_var_char8 = TypeObjectUtils::build_complete_member_detail(name_var_char8, member_ann_builtin_var_char8, ann_custom_StructChar8);
                        CompleteStructMember member_var_char8 = TypeObjectUtils::build_complete_struct_member(common_var_char8, detail_var_char8);
                        TypeObjectUtils::add_complete_struct_member(member_seq_StructChar8, member_var_char8);
                    }
                    CompleteStructType struct_type_StructChar8 = TypeObjectUtils::build_complete_struct_type(struct_flags_StructChar8, header_StructChar8, member_seq_StructChar8);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructChar8, type_name_StructChar8.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "StructChar8 already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_StructChar8 =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "StructChar8", type_ids_StructChar8);
                    if (return_code_StructChar8 != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "StructChar8: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_StructChar8 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_StructChar8;
            MemberId member_id_var_StructChar8 = 0x0000000b;
            if (EK_COMPLETE == type_ids_Structures.type_identifier1()._d() || TK_NONE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructChar8 = TypeObjectUtils::build_common_struct_member(member_id_var_StructChar8, member_flags_var_StructChar8, type_ids_Structures.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructChar8 = TypeObjectUtils::build_common_struct_member(member_id_var_StructChar8, member_flags_var_StructChar8, type_ids_Structures.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_StructChar8 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_StructChar8 = "var_StructChar8";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_StructChar8;
            ann_custom_Structures.reset();
            CompleteMemberDetail detail_var_StructChar8 = TypeObjectUtils::build_complete_member_detail(name_var_StructChar8, member_ann_builtin_var_StructChar8, ann_custom_Structures);
            CompleteStructMember member_var_StructChar8 = TypeObjectUtils::build_complete_struct_member(common_var_StructChar8, detail_var_StructChar8);
            TypeObjectUtils::add_complete_struct_member(member_seq_Structures, member_var_StructChar8);
        }
        {
            return_code_Structures =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "StructChar16", type_ids_Structures);

            if (return_code_Structures != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_StructChar16 = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_StructChar16;
                    TypeIdentifierPair type_ids_StructChar16;
                    QualifiedTypeName type_name_StructChar16 = "StructChar16";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructChar16;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructChar16;
                    CompleteTypeDetail detail_StructChar16 = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructChar16, ann_custom_StructChar16, type_name_StructChar16.to_string());
                    CompleteStructHeader header_StructChar16;
                    header_StructChar16 = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructChar16);
                    CompleteStructMemberSeq member_seq_StructChar16;
                    {
                        return_code_StructChar16 =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_wchar_t", type_ids_StructChar16);

                        if (return_code_StructChar16 != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "var_char16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        StructMemberFlag member_flags_var_char16 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_var_char16;
                        MemberId member_id_var_char16 = 0x00000000;
                        if (EK_COMPLETE == type_ids_StructChar16.type_identifier1()._d() || TK_NONE == type_ids_StructChar16.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructChar16.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructChar16.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructChar16.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructChar16.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructChar16.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructChar16.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructChar16.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructChar16.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructChar16.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructChar16.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructChar16.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructChar16.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructChar16.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructChar16.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_char16 = TypeObjectUtils::build_common_struct_member(member_id_var_char16, member_flags_var_char16, type_ids_StructChar16.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_StructChar16.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructChar16.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructChar16.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructChar16.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructChar16.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructChar16.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructChar16.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructChar16.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructChar16.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructChar16.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructChar16.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructChar16.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructChar16.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructChar16.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructChar16.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_char16 = TypeObjectUtils::build_common_struct_member(member_id_var_char16, member_flags_var_char16, type_ids_StructChar16.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure var_char16 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_var_char16 = "var_char16";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_char16;
                        ann_custom_StructChar16.reset();
                        CompleteMemberDetail detail_var_char16 = TypeObjectUtils::build_complete_member_detail(name_var_char16, member_ann_builtin_var_char16, ann_custom_StructChar16);
                        CompleteStructMember member_var_char16 = TypeObjectUtils::build_complete_struct_member(common_var_char16, detail_var_char16);
                        TypeObjectUtils::add_complete_struct_member(member_seq_StructChar16, member_var_char16);
                    }
                    CompleteStructType struct_type_StructChar16 = TypeObjectUtils::build_complete_struct_type(struct_flags_StructChar16, header_StructChar16, member_seq_StructChar16);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructChar16, type_name_StructChar16.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "StructChar16 already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_StructChar16 =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "StructChar16", type_ids_StructChar16);
                    if (return_code_StructChar16 != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "StructChar16: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_StructChar16 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_StructChar16;
            MemberId member_id_var_StructChar16 = 0x0000000c;
            if (EK_COMPLETE == type_ids_Structures.type_identifier1()._d() || TK_NONE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructChar16 = TypeObjectUtils::build_common_struct_member(member_id_var_StructChar16, member_flags_var_StructChar16, type_ids_Structures.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructChar16 = TypeObjectUtils::build_common_struct_member(member_id_var_StructChar16, member_flags_var_StructChar16, type_ids_Structures.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_StructChar16 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_StructChar16 = "var_StructChar16";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_StructChar16;
            ann_custom_Structures.reset();
            CompleteMemberDetail detail_var_StructChar16 = TypeObjectUtils::build_complete_member_detail(name_var_StructChar16, member_ann_builtin_var_StructChar16, ann_custom_Structures);
            CompleteStructMember member_var_StructChar16 = TypeObjectUtils::build_complete_struct_member(common_var_StructChar16, detail_var_StructChar16);
            TypeObjectUtils::add_complete_struct_member(member_seq_Structures, member_var_StructChar16);
        }
        {
            return_code_Structures =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "StructString", type_ids_Structures);

            if (return_code_Structures != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_StructString = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_StructString;
                    TypeIdentifierPair type_ids_StructString;
                    QualifiedTypeName type_name_StructString = "StructString";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructString;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructString;
                    CompleteTypeDetail detail_StructString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructString, ann_custom_StructString, type_name_StructString.to_string());
                    CompleteStructHeader header_StructString;
                    header_StructString = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructString);
                    CompleteStructMemberSeq member_seq_StructString;
                    {
                        return_code_StructString =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_string_unbounded", type_ids_StructString);

                        if (return_code_StructString != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                            if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                            {
                                SBound bound = 0;
                                StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                        "anonymous_string_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                            {
                                LBound bound = 255;
                                StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                        "anonymous_string_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded: Unknown String kind.");
                                return;
                            }
                            return_code_StructString =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_string_unbounded", type_ids_StructString);
                            if (return_code_StructString != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        StructMemberFlag member_flags_var_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_var_string;
                        MemberId member_id_var_string = 0x00000000;
                        if (EK_COMPLETE == type_ids_StructString.type_identifier1()._d() || TK_NONE == type_ids_StructString.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructString.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructString.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructString.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructString.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructString.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructString.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructString.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructString.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructString.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructString.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructString.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructString.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructString.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructString.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_string = TypeObjectUtils::build_common_struct_member(member_id_var_string, member_flags_var_string, type_ids_StructString.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_StructString.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructString.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructString.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructString.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructString.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructString.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructString.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructString.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructString.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructString.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructString.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructString.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructString.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructString.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructString.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_string = TypeObjectUtils::build_common_struct_member(member_id_var_string, member_flags_var_string, type_ids_StructString.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure var_string member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_var_string = "var_string";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_string;
                        ann_custom_StructString.reset();
                        CompleteMemberDetail detail_var_string = TypeObjectUtils::build_complete_member_detail(name_var_string, member_ann_builtin_var_string, ann_custom_StructString);
                        CompleteStructMember member_var_string = TypeObjectUtils::build_complete_struct_member(common_var_string, detail_var_string);
                        TypeObjectUtils::add_complete_struct_member(member_seq_StructString, member_var_string);
                    }
                    CompleteStructType struct_type_StructString = TypeObjectUtils::build_complete_struct_type(struct_flags_StructString, header_StructString, member_seq_StructString);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructString, type_name_StructString.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "StructString already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_StructString =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "StructString", type_ids_StructString);
                    if (return_code_StructString != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "StructString: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_StructString = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_StructString;
            MemberId member_id_var_StructString = 0x0000000d;
            if (EK_COMPLETE == type_ids_Structures.type_identifier1()._d() || TK_NONE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructString = TypeObjectUtils::build_common_struct_member(member_id_var_StructString, member_flags_var_StructString, type_ids_Structures.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructString = TypeObjectUtils::build_common_struct_member(member_id_var_StructString, member_flags_var_StructString, type_ids_Structures.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_StructString member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_StructString = "var_StructString";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_StructString;
            ann_custom_Structures.reset();
            CompleteMemberDetail detail_var_StructString = TypeObjectUtils::build_complete_member_detail(name_var_StructString, member_ann_builtin_var_StructString, ann_custom_Structures);
            CompleteStructMember member_var_StructString = TypeObjectUtils::build_complete_struct_member(common_var_StructString, detail_var_StructString);
            TypeObjectUtils::add_complete_struct_member(member_seq_Structures, member_var_StructString);
        }
        {
            return_code_Structures =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "StructWString", type_ids_Structures);

            if (return_code_Structures != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_StructWString = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_StructWString;
                    TypeIdentifierPair type_ids_StructWString;
                    QualifiedTypeName type_name_StructWString = "StructWString";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructWString;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructWString;
                    CompleteTypeDetail detail_StructWString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructWString, ann_custom_StructWString, type_name_StructWString.to_string());
                    CompleteStructHeader header_StructWString;
                    header_StructWString = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructWString);
                    CompleteStructMemberSeq member_seq_StructWString;
                    {
                        return_code_StructWString =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_wstring_unbounded", type_ids_StructWString);

                        if (return_code_StructWString != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            std::string type_id_kind_anonymous_wstring_unbounded("TI_STRING16_SMALL");
                            if (type_id_kind_anonymous_wstring_unbounded == "TI_STRING16_SMALL")
                            {
                                SBound bound = 0;
                                StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                        "anonymous_wstring_unbounded", true))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else if (type_id_kind_anonymous_wstring_unbounded == "TI_STRING16_LARGE")
                            {
                                LBound bound = 255;
                                StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                        "anonymous_wstring_unbounded", true))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_wstring_unbounded: Unknown WString kind.");
                                return;
                            }
                            return_code_StructWString =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_wstring_unbounded", type_ids_StructWString);
                            if (return_code_StructWString != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_wstring_unbounded: Given WString TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        StructMemberFlag member_flags_var_wstring = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_var_wstring;
                        MemberId member_id_var_wstring = 0x00000000;
                        if (EK_COMPLETE == type_ids_StructWString.type_identifier1()._d() || TK_NONE == type_ids_StructWString.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructWString.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructWString.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructWString.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructWString.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructWString.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructWString.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructWString.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructWString.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructWString.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructWString.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructWString.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructWString.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructWString.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructWString.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_wstring = TypeObjectUtils::build_common_struct_member(member_id_var_wstring, member_flags_var_wstring, type_ids_StructWString.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_StructWString.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructWString.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructWString.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructWString.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructWString.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructWString.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructWString.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructWString.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructWString.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructWString.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructWString.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructWString.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructWString.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructWString.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructWString.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_wstring = TypeObjectUtils::build_common_struct_member(member_id_var_wstring, member_flags_var_wstring, type_ids_StructWString.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure var_wstring member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_var_wstring = "var_wstring";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_wstring;
                        ann_custom_StructWString.reset();
                        CompleteMemberDetail detail_var_wstring = TypeObjectUtils::build_complete_member_detail(name_var_wstring, member_ann_builtin_var_wstring, ann_custom_StructWString);
                        CompleteStructMember member_var_wstring = TypeObjectUtils::build_complete_struct_member(common_var_wstring, detail_var_wstring);
                        TypeObjectUtils::add_complete_struct_member(member_seq_StructWString, member_var_wstring);
                    }
                    CompleteStructType struct_type_StructWString = TypeObjectUtils::build_complete_struct_type(struct_flags_StructWString, header_StructWString, member_seq_StructWString);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructWString, type_name_StructWString.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "StructWString already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_StructWString =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "StructWString", type_ids_StructWString);
                    if (return_code_StructWString != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "StructWString: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_StructWString = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_StructWString;
            MemberId member_id_var_StructWString = 0x0000000e;
            if (EK_COMPLETE == type_ids_Structures.type_identifier1()._d() || TK_NONE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructWString = TypeObjectUtils::build_common_struct_member(member_id_var_StructWString, member_flags_var_StructWString, type_ids_Structures.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructWString = TypeObjectUtils::build_common_struct_member(member_id_var_StructWString, member_flags_var_StructWString, type_ids_Structures.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_StructWString member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_StructWString = "var_StructWString";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_StructWString;
            ann_custom_Structures.reset();
            CompleteMemberDetail detail_var_StructWString = TypeObjectUtils::build_complete_member_detail(name_var_StructWString, member_ann_builtin_var_StructWString, ann_custom_Structures);
            CompleteStructMember member_var_StructWString = TypeObjectUtils::build_complete_struct_member(common_var_StructWString, detail_var_StructWString);
            TypeObjectUtils::add_complete_struct_member(member_seq_Structures, member_var_StructWString);
        }
        {
            return_code_Structures =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "StructBoundedString", type_ids_Structures);

            if (return_code_Structures != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_StructBoundedString = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_StructBoundedString;
                    TypeIdentifierPair type_ids_StructBoundedString;
                    QualifiedTypeName type_name_StructBoundedString = "StructBoundedString";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructBoundedString;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructBoundedString;
                    CompleteTypeDetail detail_StructBoundedString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructBoundedString, ann_custom_StructBoundedString, type_name_StructBoundedString.to_string());
                    CompleteStructHeader header_StructBoundedString;
                    header_StructBoundedString = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructBoundedString);
                    CompleteStructMemberSeq member_seq_StructBoundedString;
                    {
                        return_code_StructBoundedString =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "Inner_alias_bounded_string_helper", type_ids_StructBoundedString);

                        if (return_code_StructBoundedString != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            AliasTypeFlag alias_flags_Inner_alias_bounded_string_helper = 0;
                            QualifiedTypeName type_name_Inner_alias_bounded_string_helper = "Inner_alias_bounded_string_helper";
                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Inner_alias_bounded_string_helper;
                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Inner_alias_bounded_string_helper;
                            CompleteTypeDetail detail_Inner_alias_bounded_string_helper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Inner_alias_bounded_string_helper, ann_custom_Inner_alias_bounded_string_helper, type_name_Inner_alias_bounded_string_helper.to_string());
                            CompleteAliasHeader header_Inner_alias_bounded_string_helper = TypeObjectUtils::build_complete_alias_header(detail_Inner_alias_bounded_string_helper);
                            AliasMemberFlag related_flags_Inner_alias_bounded_string_helper = 0;
                            return_code_StructBoundedString =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_string_10", type_ids_StructBoundedString);

                            if (return_code_StructBoundedString != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                std::string type_id_kind_anonymous_string_10("TI_STRING8_SMALL");
                                if (type_id_kind_anonymous_string_10 == "TI_STRING8_SMALL")
                                {
                                    SBound bound = static_cast<SBound>(10);
                                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                            "anonymous_string_10"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_10 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else if (type_id_kind_anonymous_string_10 == "TI_STRING8_LARGE")
                                {
                                    LBound bound = 10;
                                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                            "anonymous_string_10"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_10 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_10: Unknown String kind.");
                                    return;
                                }
                                return_code_StructBoundedString =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_string_10", type_ids_StructBoundedString);
                                if (return_code_StructBoundedString != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_10: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            CommonAliasBody common_Inner_alias_bounded_string_helper;
                            if (EK_COMPLETE == type_ids_StructBoundedString.type_identifier1()._d() || TK_NONE == type_ids_StructBoundedString.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructBoundedString.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_StructBoundedString.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructBoundedString.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_StructBoundedString.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructBoundedString.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_StructBoundedString.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructBoundedString.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_StructBoundedString.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_StructBoundedString.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_StructBoundedString.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_StructBoundedString.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_StructBoundedString.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_StructBoundedString.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_StructBoundedString.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_Inner_alias_bounded_string_helper = TypeObjectUtils::build_common_alias_body(related_flags_Inner_alias_bounded_string_helper, type_ids_StructBoundedString.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_StructBoundedString.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructBoundedString.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_StructBoundedString.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructBoundedString.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_StructBoundedString.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructBoundedString.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_StructBoundedString.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructBoundedString.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_StructBoundedString.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_StructBoundedString.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_StructBoundedString.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_StructBoundedString.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_StructBoundedString.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_StructBoundedString.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_StructBoundedString.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_Inner_alias_bounded_string_helper = TypeObjectUtils::build_common_alias_body(related_flags_Inner_alias_bounded_string_helper, type_ids_StructBoundedString.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Inner_alias_bounded_string_helper related TypeIdentifier inconsistent.");
                                return;
                            }
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Inner_alias_bounded_string_helper;
                            ann_custom_Inner_alias_bounded_string_helper.reset();
                            CompleteAliasBody body_Inner_alias_bounded_string_helper = TypeObjectUtils::build_complete_alias_body(common_Inner_alias_bounded_string_helper, member_ann_builtin_Inner_alias_bounded_string_helper, ann_custom_Inner_alias_bounded_string_helper);
                            CompleteAliasType alias_type_Inner_alias_bounded_string_helper = TypeObjectUtils::build_complete_alias_type(alias_flags_Inner_alias_bounded_string_helper, header_Inner_alias_bounded_string_helper, body_Inner_alias_bounded_string_helper);
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_alias_type_object(alias_type_Inner_alias_bounded_string_helper, type_name_Inner_alias_bounded_string_helper.to_string()))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Inner_alias_bounded_string_helper already registered in TypeObjectRegistry for a different type.");
                            }
                            return_code_StructBoundedString =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "Inner_alias_bounded_string_helper", type_ids_StructBoundedString);
                            if (return_code_StructBoundedString != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Inner_alias_bounded_string_helper: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        StructMemberFlag member_flags_var_bounded_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_var_bounded_string;
                        MemberId member_id_var_bounded_string = 0x00000000;
                        if (EK_COMPLETE == type_ids_StructBoundedString.type_identifier1()._d() || TK_NONE == type_ids_StructBoundedString.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructBoundedString.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructBoundedString.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructBoundedString.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructBoundedString.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructBoundedString.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructBoundedString.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructBoundedString.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructBoundedString.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructBoundedString.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructBoundedString.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructBoundedString.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructBoundedString.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructBoundedString.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructBoundedString.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_bounded_string = TypeObjectUtils::build_common_struct_member(member_id_var_bounded_string, member_flags_var_bounded_string, type_ids_StructBoundedString.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_StructBoundedString.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructBoundedString.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructBoundedString.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructBoundedString.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructBoundedString.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructBoundedString.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructBoundedString.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructBoundedString.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructBoundedString.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructBoundedString.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructBoundedString.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructBoundedString.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructBoundedString.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructBoundedString.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructBoundedString.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_bounded_string = TypeObjectUtils::build_common_struct_member(member_id_var_bounded_string, member_flags_var_bounded_string, type_ids_StructBoundedString.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure var_bounded_string member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_var_bounded_string = "var_bounded_string";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_bounded_string;
                        ann_custom_StructBoundedString.reset();
                        CompleteMemberDetail detail_var_bounded_string = TypeObjectUtils::build_complete_member_detail(name_var_bounded_string, member_ann_builtin_var_bounded_string, ann_custom_StructBoundedString);
                        CompleteStructMember member_var_bounded_string = TypeObjectUtils::build_complete_struct_member(common_var_bounded_string, detail_var_bounded_string);
                        TypeObjectUtils::add_complete_struct_member(member_seq_StructBoundedString, member_var_bounded_string);
                    }
                    CompleteStructType struct_type_StructBoundedString = TypeObjectUtils::build_complete_struct_type(struct_flags_StructBoundedString, header_StructBoundedString, member_seq_StructBoundedString);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructBoundedString, type_name_StructBoundedString.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "StructBoundedString already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_StructBoundedString =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "StructBoundedString", type_ids_StructBoundedString);
                    if (return_code_StructBoundedString != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "StructBoundedString: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_StructBoundedString = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_StructBoundedString;
            MemberId member_id_var_StructBoundedString = 0x0000000f;
            if (EK_COMPLETE == type_ids_Structures.type_identifier1()._d() || TK_NONE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructBoundedString = TypeObjectUtils::build_common_struct_member(member_id_var_StructBoundedString, member_flags_var_StructBoundedString, type_ids_Structures.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructBoundedString = TypeObjectUtils::build_common_struct_member(member_id_var_StructBoundedString, member_flags_var_StructBoundedString, type_ids_Structures.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_StructBoundedString member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_StructBoundedString = "var_StructBoundedString";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_StructBoundedString;
            ann_custom_Structures.reset();
            CompleteMemberDetail detail_var_StructBoundedString = TypeObjectUtils::build_complete_member_detail(name_var_StructBoundedString, member_ann_builtin_var_StructBoundedString, ann_custom_Structures);
            CompleteStructMember member_var_StructBoundedString = TypeObjectUtils::build_complete_struct_member(common_var_StructBoundedString, detail_var_StructBoundedString);
            TypeObjectUtils::add_complete_struct_member(member_seq_Structures, member_var_StructBoundedString);
        }
        {
            return_code_Structures =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "StructBoundedWString", type_ids_Structures);

            if (return_code_Structures != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_StructBoundedWString = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_StructBoundedWString;
                    TypeIdentifierPair type_ids_StructBoundedWString;
                    QualifiedTypeName type_name_StructBoundedWString = "StructBoundedWString";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructBoundedWString;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructBoundedWString;
                    CompleteTypeDetail detail_StructBoundedWString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructBoundedWString, ann_custom_StructBoundedWString, type_name_StructBoundedWString.to_string());
                    CompleteStructHeader header_StructBoundedWString;
                    header_StructBoundedWString = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructBoundedWString);
                    CompleteStructMemberSeq member_seq_StructBoundedWString;
                    {
                        return_code_StructBoundedWString =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "Inner_alias_bounded_wstring_helper", type_ids_StructBoundedWString);

                        if (return_code_StructBoundedWString != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            AliasTypeFlag alias_flags_Inner_alias_bounded_wstring_helper = 0;
                            QualifiedTypeName type_name_Inner_alias_bounded_wstring_helper = "Inner_alias_bounded_wstring_helper";
                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Inner_alias_bounded_wstring_helper;
                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Inner_alias_bounded_wstring_helper;
                            CompleteTypeDetail detail_Inner_alias_bounded_wstring_helper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Inner_alias_bounded_wstring_helper, ann_custom_Inner_alias_bounded_wstring_helper, type_name_Inner_alias_bounded_wstring_helper.to_string());
                            CompleteAliasHeader header_Inner_alias_bounded_wstring_helper = TypeObjectUtils::build_complete_alias_header(detail_Inner_alias_bounded_wstring_helper);
                            AliasMemberFlag related_flags_Inner_alias_bounded_wstring_helper = 0;
                            return_code_StructBoundedWString =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_wstring_10", type_ids_StructBoundedWString);

                            if (return_code_StructBoundedWString != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                std::string type_id_kind_anonymous_wstring_10("TI_STRING16_SMALL");
                                if (type_id_kind_anonymous_wstring_10 == "TI_STRING16_SMALL")
                                {
                                    SBound bound = static_cast<SBound>(10);
                                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                            "anonymous_wstring_10", true))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_wstring_10 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else if (type_id_kind_anonymous_wstring_10 == "TI_STRING16_LARGE")
                                {
                                    LBound bound = 10;
                                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                            "anonymous_wstring_10", true))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_wstring_10 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_wstring_10: Unknown WString kind.");
                                    return;
                                }
                                return_code_StructBoundedWString =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_wstring_10", type_ids_StructBoundedWString);
                                if (return_code_StructBoundedWString != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_wstring_10: Given WString TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            CommonAliasBody common_Inner_alias_bounded_wstring_helper;
                            if (EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1()._d() || TK_NONE == type_ids_StructBoundedWString.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructBoundedWString.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructBoundedWString.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructBoundedWString.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructBoundedWString.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_StructBoundedWString.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_StructBoundedWString.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_Inner_alias_bounded_wstring_helper = TypeObjectUtils::build_common_alias_body(related_flags_Inner_alias_bounded_wstring_helper, type_ids_StructBoundedWString.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructBoundedWString.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructBoundedWString.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructBoundedWString.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructBoundedWString.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_StructBoundedWString.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_StructBoundedWString.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_Inner_alias_bounded_wstring_helper = TypeObjectUtils::build_common_alias_body(related_flags_Inner_alias_bounded_wstring_helper, type_ids_StructBoundedWString.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Inner_alias_bounded_wstring_helper related TypeIdentifier inconsistent.");
                                return;
                            }
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Inner_alias_bounded_wstring_helper;
                            ann_custom_Inner_alias_bounded_wstring_helper.reset();
                            CompleteAliasBody body_Inner_alias_bounded_wstring_helper = TypeObjectUtils::build_complete_alias_body(common_Inner_alias_bounded_wstring_helper, member_ann_builtin_Inner_alias_bounded_wstring_helper, ann_custom_Inner_alias_bounded_wstring_helper);
                            CompleteAliasType alias_type_Inner_alias_bounded_wstring_helper = TypeObjectUtils::build_complete_alias_type(alias_flags_Inner_alias_bounded_wstring_helper, header_Inner_alias_bounded_wstring_helper, body_Inner_alias_bounded_wstring_helper);
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_alias_type_object(alias_type_Inner_alias_bounded_wstring_helper, type_name_Inner_alias_bounded_wstring_helper.to_string()))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Inner_alias_bounded_wstring_helper already registered in TypeObjectRegistry for a different type.");
                            }
                            return_code_StructBoundedWString =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "Inner_alias_bounded_wstring_helper", type_ids_StructBoundedWString);
                            if (return_code_StructBoundedWString != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Inner_alias_bounded_wstring_helper: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        StructMemberFlag member_flags_var_bounded_wstring = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_var_bounded_wstring;
                        MemberId member_id_var_bounded_wstring = 0x00000000;
                        if (EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1()._d() || TK_NONE == type_ids_StructBoundedWString.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructBoundedWString.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructBoundedWString.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructBoundedWString.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructBoundedWString.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructBoundedWString.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructBoundedWString.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructBoundedWString.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_bounded_wstring = TypeObjectUtils::build_common_struct_member(member_id_var_bounded_wstring, member_flags_var_bounded_wstring, type_ids_StructBoundedWString.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructBoundedWString.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructBoundedWString.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructBoundedWString.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructBoundedWString.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructBoundedWString.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructBoundedWString.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructBoundedWString.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_bounded_wstring = TypeObjectUtils::build_common_struct_member(member_id_var_bounded_wstring, member_flags_var_bounded_wstring, type_ids_StructBoundedWString.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure var_bounded_wstring member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_var_bounded_wstring = "var_bounded_wstring";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_bounded_wstring;
                        ann_custom_StructBoundedWString.reset();
                        CompleteMemberDetail detail_var_bounded_wstring = TypeObjectUtils::build_complete_member_detail(name_var_bounded_wstring, member_ann_builtin_var_bounded_wstring, ann_custom_StructBoundedWString);
                        CompleteStructMember member_var_bounded_wstring = TypeObjectUtils::build_complete_struct_member(common_var_bounded_wstring, detail_var_bounded_wstring);
                        TypeObjectUtils::add_complete_struct_member(member_seq_StructBoundedWString, member_var_bounded_wstring);
                    }
                    CompleteStructType struct_type_StructBoundedWString = TypeObjectUtils::build_complete_struct_type(struct_flags_StructBoundedWString, header_StructBoundedWString, member_seq_StructBoundedWString);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructBoundedWString, type_name_StructBoundedWString.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "StructBoundedWString already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_StructBoundedWString =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "StructBoundedWString", type_ids_StructBoundedWString);
                    if (return_code_StructBoundedWString != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "StructBoundedWString: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_StructBoundedWString = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_StructBoundedWString;
            MemberId member_id_var_StructBoundedWString = 0x00000010;
            if (EK_COMPLETE == type_ids_Structures.type_identifier1()._d() || TK_NONE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructBoundedWString = TypeObjectUtils::build_common_struct_member(member_id_var_StructBoundedWString, member_flags_var_StructBoundedWString, type_ids_Structures.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructBoundedWString = TypeObjectUtils::build_common_struct_member(member_id_var_StructBoundedWString, member_flags_var_StructBoundedWString, type_ids_Structures.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_StructBoundedWString member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_StructBoundedWString = "var_StructBoundedWString";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_StructBoundedWString;
            ann_custom_Structures.reset();
            CompleteMemberDetail detail_var_StructBoundedWString = TypeObjectUtils::build_complete_member_detail(name_var_StructBoundedWString, member_ann_builtin_var_StructBoundedWString, ann_custom_Structures);
            CompleteStructMember member_var_StructBoundedWString = TypeObjectUtils::build_complete_struct_member(common_var_StructBoundedWString, detail_var_StructBoundedWString);
            TypeObjectUtils::add_complete_struct_member(member_seq_Structures, member_var_StructBoundedWString);
        }
        {
            return_code_Structures =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "StructEnum", type_ids_Structures);

            if (return_code_Structures != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_StructEnum = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_StructEnum;
                    TypeIdentifierPair type_ids_StructEnum;
                    QualifiedTypeName type_name_StructEnum = "StructEnum";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructEnum;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructEnum;
                    CompleteTypeDetail detail_StructEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructEnum, ann_custom_StructEnum, type_name_StructEnum.to_string());
                    CompleteStructHeader header_StructEnum;
                    header_StructEnum = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructEnum);
                    CompleteStructMemberSeq member_seq_StructEnum;
                    {
                        return_code_StructEnum =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "InnerEnumHelper", type_ids_StructEnum);

                        if (return_code_StructEnum != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EnumTypeFlag enum_flags_InnerEnumHelper = 0;
                            BitBound bit_bound_InnerEnumHelper = 32;
                            CommonEnumeratedHeader common_InnerEnumHelper = TypeObjectUtils::build_common_enumerated_header(bit_bound_InnerEnumHelper);
                            QualifiedTypeName type_name_InnerEnumHelper = "InnerEnumHelper";
                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_InnerEnumHelper;
                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_InnerEnumHelper;
                            CompleteTypeDetail detail_InnerEnumHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_InnerEnumHelper, ann_custom_InnerEnumHelper, type_name_InnerEnumHelper.to_string());
                            CompleteEnumeratedHeader header_InnerEnumHelper = TypeObjectUtils::build_complete_enumerated_header(common_InnerEnumHelper, detail_InnerEnumHelper);
                            CompleteEnumeratedLiteralSeq literal_seq_InnerEnumHelper;
                            {
                                EnumeratedLiteralFlag flags_ENUM_VALUE_1 = TypeObjectUtils::build_enumerated_literal_flag(false);
                                CommonEnumeratedLiteral common_ENUM_VALUE_1 = TypeObjectUtils::build_common_enumerated_literal(0, flags_ENUM_VALUE_1);
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ENUM_VALUE_1;
                                ann_custom_InnerEnumHelper.reset();
                                MemberName name_ENUM_VALUE_1 = "ENUM_VALUE_1";
                                CompleteMemberDetail detail_ENUM_VALUE_1 = TypeObjectUtils::build_complete_member_detail(name_ENUM_VALUE_1, member_ann_builtin_ENUM_VALUE_1, ann_custom_InnerEnumHelper);
                                CompleteEnumeratedLiteral literal_ENUM_VALUE_1 = TypeObjectUtils::build_complete_enumerated_literal(common_ENUM_VALUE_1, detail_ENUM_VALUE_1);
                                TypeObjectUtils::add_complete_enumerated_literal(literal_seq_InnerEnumHelper, literal_ENUM_VALUE_1);
                            }
                            {
                                EnumeratedLiteralFlag flags_ENUM_VALUE_2 = TypeObjectUtils::build_enumerated_literal_flag(false);
                                CommonEnumeratedLiteral common_ENUM_VALUE_2 = TypeObjectUtils::build_common_enumerated_literal(1, flags_ENUM_VALUE_2);
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ENUM_VALUE_2;
                                ann_custom_InnerEnumHelper.reset();
                                MemberName name_ENUM_VALUE_2 = "ENUM_VALUE_2";
                                CompleteMemberDetail detail_ENUM_VALUE_2 = TypeObjectUtils::build_complete_member_detail(name_ENUM_VALUE_2, member_ann_builtin_ENUM_VALUE_2, ann_custom_InnerEnumHelper);
                                CompleteEnumeratedLiteral literal_ENUM_VALUE_2 = TypeObjectUtils::build_complete_enumerated_literal(common_ENUM_VALUE_2, detail_ENUM_VALUE_2);
                                TypeObjectUtils::add_complete_enumerated_literal(literal_seq_InnerEnumHelper, literal_ENUM_VALUE_2);
                            }
                            {
                                EnumeratedLiteralFlag flags_ENUM_VALUE_3 = TypeObjectUtils::build_enumerated_literal_flag(false);
                                CommonEnumeratedLiteral common_ENUM_VALUE_3 = TypeObjectUtils::build_common_enumerated_literal(2, flags_ENUM_VALUE_3);
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ENUM_VALUE_3;
                                ann_custom_InnerEnumHelper.reset();
                                MemberName name_ENUM_VALUE_3 = "ENUM_VALUE_3";
                                CompleteMemberDetail detail_ENUM_VALUE_3 = TypeObjectUtils::build_complete_member_detail(name_ENUM_VALUE_3, member_ann_builtin_ENUM_VALUE_3, ann_custom_InnerEnumHelper);
                                CompleteEnumeratedLiteral literal_ENUM_VALUE_3 = TypeObjectUtils::build_complete_enumerated_literal(common_ENUM_VALUE_3, detail_ENUM_VALUE_3);
                                TypeObjectUtils::add_complete_enumerated_literal(literal_seq_InnerEnumHelper, literal_ENUM_VALUE_3);
                            }
                            CompleteEnumeratedType enumerated_type_InnerEnumHelper = TypeObjectUtils::build_complete_enumerated_type(enum_flags_InnerEnumHelper, header_InnerEnumHelper,
                                    literal_seq_InnerEnumHelper);
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_InnerEnumHelper, type_name_InnerEnumHelper.to_string()))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "InnerEnumHelper already registered in TypeObjectRegistry for a different type.");
                            }
                            return_code_StructEnum =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "InnerEnumHelper", type_ids_StructEnum);
                            if (return_code_StructEnum != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "InnerEnumHelper: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        StructMemberFlag member_flags_var_enum = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_var_enum;
                        MemberId member_id_var_enum = 0x00000000;
                        if (EK_COMPLETE == type_ids_StructEnum.type_identifier1()._d() || TK_NONE == type_ids_StructEnum.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructEnum.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructEnum.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructEnum.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructEnum.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructEnum.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructEnum.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructEnum.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructEnum.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructEnum.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructEnum.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructEnum.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructEnum.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructEnum.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructEnum.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_enum = TypeObjectUtils::build_common_struct_member(member_id_var_enum, member_flags_var_enum, type_ids_StructEnum.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_StructEnum.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructEnum.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructEnum.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructEnum.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructEnum.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructEnum.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructEnum.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructEnum.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructEnum.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructEnum.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructEnum.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructEnum.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructEnum.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructEnum.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructEnum.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_enum = TypeObjectUtils::build_common_struct_member(member_id_var_enum, member_flags_var_enum, type_ids_StructEnum.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure var_enum member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_var_enum = "var_enum";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_enum;
                        ann_custom_StructEnum.reset();
                        CompleteMemberDetail detail_var_enum = TypeObjectUtils::build_complete_member_detail(name_var_enum, member_ann_builtin_var_enum, ann_custom_StructEnum);
                        CompleteStructMember member_var_enum = TypeObjectUtils::build_complete_struct_member(common_var_enum, detail_var_enum);
                        TypeObjectUtils::add_complete_struct_member(member_seq_StructEnum, member_var_enum);
                    }
                    CompleteStructType struct_type_StructEnum = TypeObjectUtils::build_complete_struct_type(struct_flags_StructEnum, header_StructEnum, member_seq_StructEnum);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructEnum, type_name_StructEnum.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "StructEnum already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_StructEnum =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "StructEnum", type_ids_StructEnum);
                    if (return_code_StructEnum != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "StructEnum: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_StructEnum = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_StructEnum;
            MemberId member_id_var_StructEnum = 0x00000011;
            if (EK_COMPLETE == type_ids_Structures.type_identifier1()._d() || TK_NONE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructEnum = TypeObjectUtils::build_common_struct_member(member_id_var_StructEnum, member_flags_var_StructEnum, type_ids_Structures.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructEnum = TypeObjectUtils::build_common_struct_member(member_id_var_StructEnum, member_flags_var_StructEnum, type_ids_Structures.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_StructEnum member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_StructEnum = "var_StructEnum";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_StructEnum;
            ann_custom_Structures.reset();
            CompleteMemberDetail detail_var_StructEnum = TypeObjectUtils::build_complete_member_detail(name_var_StructEnum, member_ann_builtin_var_StructEnum, ann_custom_Structures);
            CompleteStructMember member_var_StructEnum = TypeObjectUtils::build_complete_struct_member(common_var_StructEnum, detail_var_StructEnum);
            TypeObjectUtils::add_complete_struct_member(member_seq_Structures, member_var_StructEnum);
        }
        {
            return_code_Structures =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "StructBitMask", type_ids_Structures);

            if (return_code_Structures != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_StructBitMask = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_StructBitMask;
                    TypeIdentifierPair type_ids_StructBitMask;
                    QualifiedTypeName type_name_StructBitMask = "StructBitMask";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructBitMask;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructBitMask;
                    CompleteTypeDetail detail_StructBitMask = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructBitMask, ann_custom_StructBitMask, type_name_StructBitMask.to_string());
                    CompleteStructHeader header_StructBitMask;
                    header_StructBitMask = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructBitMask);
                    CompleteStructMemberSeq member_seq_StructBitMask;
                    {
                        return_code_StructBitMask =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "InnerBitMaskHelper", type_ids_StructBitMask);

                        if (return_code_StructBitMask != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            BitmaskTypeFlag bitmask_flags_InnerBitMaskHelper = 0;
                            BitBound bit_bound_InnerBitMaskHelper = 32;
                            CommonEnumeratedHeader common_InnerBitMaskHelper = TypeObjectUtils::build_common_enumerated_header(bit_bound_InnerBitMaskHelper, true);
                            QualifiedTypeName type_name_InnerBitMaskHelper = "InnerBitMaskHelper";
                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_InnerBitMaskHelper;
                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_InnerBitMaskHelper;
                            CompleteTypeDetail detail_InnerBitMaskHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_InnerBitMaskHelper, ann_custom_InnerBitMaskHelper, type_name_InnerBitMaskHelper.to_string());
                            CompleteEnumeratedHeader header_InnerBitMaskHelper = TypeObjectUtils::build_complete_enumerated_header(common_InnerBitMaskHelper, detail_InnerBitMaskHelper, true);
                            CompleteBitflagSeq flag_seq_InnerBitMaskHelper;
                            {
                                uint16_t position_flag0 = 0;
                                BitflagFlag flags_flag0 = 0;
                                CommonBitflag common_flag0 = TypeObjectUtils::build_common_bitflag(position_flag0, flags_flag0);
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag0;
                                ann_custom_InnerBitMaskHelper.reset();
                                AppliedAnnotationSeq tmp_ann_custom_flag0;
                                if (!tmp_ann_custom_flag0.empty())
                                {
                                    ann_custom_InnerBitMaskHelper = tmp_ann_custom_flag0;
                                }
                                MemberName name_flag0 = "flag0";
                                CompleteMemberDetail detail_flag0 = TypeObjectUtils::build_complete_member_detail(name_flag0, member_ann_builtin_flag0, ann_custom_InnerBitMaskHelper);
                                CompleteBitflag bitflag_flag0 = TypeObjectUtils::build_complete_bitflag(common_flag0, detail_flag0);
                                TypeObjectUtils::add_complete_bitflag(flag_seq_InnerBitMaskHelper, bitflag_flag0);
                            }
                            {
                                uint16_t position_flag1 = 1;
                                BitflagFlag flags_flag1 = 0;
                                CommonBitflag common_flag1 = TypeObjectUtils::build_common_bitflag(position_flag1, flags_flag1);
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag1;
                                ann_custom_InnerBitMaskHelper.reset();
                                AppliedAnnotationSeq tmp_ann_custom_flag1;
                                if (!tmp_ann_custom_flag1.empty())
                                {
                                    ann_custom_InnerBitMaskHelper = tmp_ann_custom_flag1;
                                }
                                MemberName name_flag1 = "flag1";
                                CompleteMemberDetail detail_flag1 = TypeObjectUtils::build_complete_member_detail(name_flag1, member_ann_builtin_flag1, ann_custom_InnerBitMaskHelper);
                                CompleteBitflag bitflag_flag1 = TypeObjectUtils::build_complete_bitflag(common_flag1, detail_flag1);
                                TypeObjectUtils::add_complete_bitflag(flag_seq_InnerBitMaskHelper, bitflag_flag1);
                            }
                            {
                                uint16_t position_flag4 = 4;
                                BitflagFlag flags_flag4 = 0;
                                CommonBitflag common_flag4 = TypeObjectUtils::build_common_bitflag(position_flag4, flags_flag4);
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag4;
                                ann_custom_InnerBitMaskHelper.reset();
                                AppliedAnnotationSeq tmp_ann_custom_flag4;
                                if (!tmp_ann_custom_flag4.empty())
                                {
                                    ann_custom_InnerBitMaskHelper = tmp_ann_custom_flag4;
                                }
                                MemberName name_flag4 = "flag4";
                                CompleteMemberDetail detail_flag4 = TypeObjectUtils::build_complete_member_detail(name_flag4, member_ann_builtin_flag4, ann_custom_InnerBitMaskHelper);
                                CompleteBitflag bitflag_flag4 = TypeObjectUtils::build_complete_bitflag(common_flag4, detail_flag4);
                                TypeObjectUtils::add_complete_bitflag(flag_seq_InnerBitMaskHelper, bitflag_flag4);
                            }
                            {
                                uint16_t position_flag6 = 6;
                                BitflagFlag flags_flag6 = 0;
                                CommonBitflag common_flag6 = TypeObjectUtils::build_common_bitflag(position_flag6, flags_flag6);
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag6;
                                ann_custom_InnerBitMaskHelper.reset();
                                AppliedAnnotationSeq tmp_ann_custom_flag6;
                                if (!tmp_ann_custom_flag6.empty())
                                {
                                    ann_custom_InnerBitMaskHelper = tmp_ann_custom_flag6;
                                }
                                MemberName name_flag6 = "flag6";
                                CompleteMemberDetail detail_flag6 = TypeObjectUtils::build_complete_member_detail(name_flag6, member_ann_builtin_flag6, ann_custom_InnerBitMaskHelper);
                                CompleteBitflag bitflag_flag6 = TypeObjectUtils::build_complete_bitflag(common_flag6, detail_flag6);
                                TypeObjectUtils::add_complete_bitflag(flag_seq_InnerBitMaskHelper, bitflag_flag6);
                            }
                            CompleteBitmaskType bitmask_type_InnerBitMaskHelper = TypeObjectUtils::build_complete_bitmask_type(bitmask_flags_InnerBitMaskHelper, header_InnerBitMaskHelper, flag_seq_InnerBitMaskHelper);
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_bitmask_type_object(bitmask_type_InnerBitMaskHelper, type_name_InnerBitMaskHelper.to_string()))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "InnerBitMaskHelper already registered in TypeObjectRegistry for a different type.");
                            }
                            return_code_StructBitMask =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "InnerBitMaskHelper", type_ids_StructBitMask);
                            if (return_code_StructBitMask != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "InnerBitMaskHelper: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        StructMemberFlag member_flags_var_bitmask = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_var_bitmask;
                        MemberId member_id_var_bitmask = 0x00000000;
                        if (EK_COMPLETE == type_ids_StructBitMask.type_identifier1()._d() || TK_NONE == type_ids_StructBitMask.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructBitMask.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructBitMask.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructBitMask.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructBitMask.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructBitMask.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructBitMask.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructBitMask.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructBitMask.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructBitMask.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructBitMask.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructBitMask.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructBitMask.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructBitMask.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructBitMask.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_bitmask = TypeObjectUtils::build_common_struct_member(member_id_var_bitmask, member_flags_var_bitmask, type_ids_StructBitMask.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_StructBitMask.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructBitMask.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructBitMask.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructBitMask.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructBitMask.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructBitMask.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructBitMask.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructBitMask.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructBitMask.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructBitMask.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructBitMask.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructBitMask.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructBitMask.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructBitMask.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructBitMask.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_bitmask = TypeObjectUtils::build_common_struct_member(member_id_var_bitmask, member_flags_var_bitmask, type_ids_StructBitMask.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure var_bitmask member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_var_bitmask = "var_bitmask";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_bitmask;
                        ann_custom_StructBitMask.reset();
                        CompleteMemberDetail detail_var_bitmask = TypeObjectUtils::build_complete_member_detail(name_var_bitmask, member_ann_builtin_var_bitmask, ann_custom_StructBitMask);
                        CompleteStructMember member_var_bitmask = TypeObjectUtils::build_complete_struct_member(common_var_bitmask, detail_var_bitmask);
                        TypeObjectUtils::add_complete_struct_member(member_seq_StructBitMask, member_var_bitmask);
                    }
                    CompleteStructType struct_type_StructBitMask = TypeObjectUtils::build_complete_struct_type(struct_flags_StructBitMask, header_StructBitMask, member_seq_StructBitMask);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructBitMask, type_name_StructBitMask.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "StructBitMask already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_StructBitMask =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "StructBitMask", type_ids_StructBitMask);
                    if (return_code_StructBitMask != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "StructBitMask: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_StructBitMask = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_StructBitMask;
            MemberId member_id_var_StructBitMask = 0x00000012;
            if (EK_COMPLETE == type_ids_Structures.type_identifier1()._d() || TK_NONE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructBitMask = TypeObjectUtils::build_common_struct_member(member_id_var_StructBitMask, member_flags_var_StructBitMask, type_ids_Structures.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructBitMask = TypeObjectUtils::build_common_struct_member(member_id_var_StructBitMask, member_flags_var_StructBitMask, type_ids_Structures.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_StructBitMask member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_StructBitMask = "var_StructBitMask";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_StructBitMask;
            ann_custom_Structures.reset();
            CompleteMemberDetail detail_var_StructBitMask = TypeObjectUtils::build_complete_member_detail(name_var_StructBitMask, member_ann_builtin_var_StructBitMask, ann_custom_Structures);
            CompleteStructMember member_var_StructBitMask = TypeObjectUtils::build_complete_struct_member(common_var_StructBitMask, detail_var_StructBitMask);
            TypeObjectUtils::add_complete_struct_member(member_seq_Structures, member_var_StructBitMask);
        }
        {
            return_code_Structures =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "StructAlias", type_ids_Structures);

            if (return_code_Structures != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_StructAlias = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_StructAlias;
                    TypeIdentifierPair type_ids_StructAlias;
                    QualifiedTypeName type_name_StructAlias = "StructAlias";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructAlias;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructAlias;
                    CompleteTypeDetail detail_StructAlias = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructAlias, ann_custom_StructAlias, type_name_StructAlias.to_string());
                    CompleteStructHeader header_StructAlias;
                    header_StructAlias = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructAlias);
                    CompleteStructMemberSeq member_seq_StructAlias;
                    {
                        return_code_StructAlias =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "InnerAliasHelper", type_ids_StructAlias);

                        if (return_code_StructAlias != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            AliasTypeFlag alias_flags_InnerAliasHelper = 0;
                            QualifiedTypeName type_name_InnerAliasHelper = "InnerAliasHelper";
                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_InnerAliasHelper;
                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_InnerAliasHelper;
                            CompleteTypeDetail detail_InnerAliasHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_InnerAliasHelper, ann_custom_InnerAliasHelper, type_name_InnerAliasHelper.to_string());
                            CompleteAliasHeader header_InnerAliasHelper = TypeObjectUtils::build_complete_alias_header(detail_InnerAliasHelper);
                            AliasMemberFlag related_flags_InnerAliasHelper = 0;
                            return_code_StructAlias =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_int32_t", type_ids_StructAlias);

                            if (return_code_StructAlias != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "InnerAliasHelper related TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonAliasBody common_InnerAliasHelper;
                            if (EK_COMPLETE == type_ids_StructAlias.type_identifier1()._d() || TK_NONE == type_ids_StructAlias.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructAlias.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_StructAlias.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructAlias.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_StructAlias.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructAlias.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_StructAlias.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructAlias.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_StructAlias.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_StructAlias.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_StructAlias.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_StructAlias.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_StructAlias.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_StructAlias.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_StructAlias.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_InnerAliasHelper = TypeObjectUtils::build_common_alias_body(related_flags_InnerAliasHelper, type_ids_StructAlias.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_StructAlias.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructAlias.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_StructAlias.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructAlias.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_StructAlias.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructAlias.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_StructAlias.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructAlias.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_StructAlias.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_StructAlias.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_StructAlias.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_StructAlias.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_StructAlias.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_StructAlias.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_StructAlias.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_InnerAliasHelper = TypeObjectUtils::build_common_alias_body(related_flags_InnerAliasHelper, type_ids_StructAlias.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "InnerAliasHelper related TypeIdentifier inconsistent.");
                                return;
                            }
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_InnerAliasHelper;
                            ann_custom_InnerAliasHelper.reset();
                            CompleteAliasBody body_InnerAliasHelper = TypeObjectUtils::build_complete_alias_body(common_InnerAliasHelper, member_ann_builtin_InnerAliasHelper, ann_custom_InnerAliasHelper);
                            CompleteAliasType alias_type_InnerAliasHelper = TypeObjectUtils::build_complete_alias_type(alias_flags_InnerAliasHelper, header_InnerAliasHelper, body_InnerAliasHelper);
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_alias_type_object(alias_type_InnerAliasHelper, type_name_InnerAliasHelper.to_string()))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "InnerAliasHelper already registered in TypeObjectRegistry for a different type.");
                            }
                            return_code_StructAlias =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "InnerAliasHelper", type_ids_StructAlias);
                            if (return_code_StructAlias != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "InnerAliasHelper: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        StructMemberFlag member_flags_var_alias = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_var_alias;
                        MemberId member_id_var_alias = 0x00000000;
                        if (EK_COMPLETE == type_ids_StructAlias.type_identifier1()._d() || TK_NONE == type_ids_StructAlias.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructAlias.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructAlias.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructAlias.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructAlias.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructAlias.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructAlias.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructAlias.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructAlias.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructAlias.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructAlias.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructAlias.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructAlias.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructAlias.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructAlias.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_alias = TypeObjectUtils::build_common_struct_member(member_id_var_alias, member_flags_var_alias, type_ids_StructAlias.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_StructAlias.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructAlias.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructAlias.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructAlias.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructAlias.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructAlias.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructAlias.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructAlias.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructAlias.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructAlias.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructAlias.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructAlias.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructAlias.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructAlias.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructAlias.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_alias = TypeObjectUtils::build_common_struct_member(member_id_var_alias, member_flags_var_alias, type_ids_StructAlias.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure var_alias member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_var_alias = "var_alias";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_alias;
                        ann_custom_StructAlias.reset();
                        CompleteMemberDetail detail_var_alias = TypeObjectUtils::build_complete_member_detail(name_var_alias, member_ann_builtin_var_alias, ann_custom_StructAlias);
                        CompleteStructMember member_var_alias = TypeObjectUtils::build_complete_struct_member(common_var_alias, detail_var_alias);
                        TypeObjectUtils::add_complete_struct_member(member_seq_StructAlias, member_var_alias);
                    }
                    CompleteStructType struct_type_StructAlias = TypeObjectUtils::build_complete_struct_type(struct_flags_StructAlias, header_StructAlias, member_seq_StructAlias);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructAlias, type_name_StructAlias.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "StructAlias already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_StructAlias =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "StructAlias", type_ids_StructAlias);
                    if (return_code_StructAlias != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "StructAlias: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_StructAlias = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_StructAlias;
            MemberId member_id_var_StructAlias = 0x00000013;
            if (EK_COMPLETE == type_ids_Structures.type_identifier1()._d() || TK_NONE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructAlias = TypeObjectUtils::build_common_struct_member(member_id_var_StructAlias, member_flags_var_StructAlias, type_ids_Structures.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructAlias = TypeObjectUtils::build_common_struct_member(member_id_var_StructAlias, member_flags_var_StructAlias, type_ids_Structures.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_StructAlias member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_StructAlias = "var_StructAlias";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_StructAlias;
            ann_custom_Structures.reset();
            CompleteMemberDetail detail_var_StructAlias = TypeObjectUtils::build_complete_member_detail(name_var_StructAlias, member_ann_builtin_var_StructAlias, ann_custom_Structures);
            CompleteStructMember member_var_StructAlias = TypeObjectUtils::build_complete_struct_member(common_var_StructAlias, detail_var_StructAlias);
            TypeObjectUtils::add_complete_struct_member(member_seq_Structures, member_var_StructAlias);
        }
        {
            return_code_Structures =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "StructShortArray", type_ids_Structures);

            if (return_code_Structures != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_StructShortArray = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_StructShortArray;
                    TypeIdentifierPair type_ids_StructShortArray;
                    QualifiedTypeName type_name_StructShortArray = "StructShortArray";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructShortArray;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructShortArray;
                    CompleteTypeDetail detail_StructShortArray = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructShortArray, ann_custom_StructShortArray, type_name_StructShortArray.to_string());
                    CompleteStructHeader header_StructShortArray;
                    header_StructShortArray = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructShortArray);
                    CompleteStructMemberSeq member_seq_StructShortArray;
                    {
                        return_code_StructShortArray =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_array_int16_t_10", type_ids_StructShortArray);

                        if (return_code_StructShortArray != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            return_code_StructShortArray =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_int16_t", type_ids_StructShortArray);

                            if (return_code_StructShortArray != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            TypeIdentifier* element_identifier_anonymous_array_int16_t_10 {nullptr};
                            if (EK_COMPLETE == type_ids_StructShortArray.type_identifier1()._d() || TK_NONE == type_ids_StructShortArray.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructShortArray.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_StructShortArray.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructShortArray.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_StructShortArray.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructShortArray.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_StructShortArray.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructShortArray.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_StructShortArray.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_StructShortArray.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_StructShortArray.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_StructShortArray.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_StructShortArray.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_StructShortArray.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_StructShortArray.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                element_identifier_anonymous_array_int16_t_10 = new TypeIdentifier(type_ids_StructShortArray.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_StructShortArray.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructShortArray.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_StructShortArray.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructShortArray.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_StructShortArray.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructShortArray.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_StructShortArray.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructShortArray.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_StructShortArray.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_StructShortArray.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_StructShortArray.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_StructShortArray.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_StructShortArray.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_StructShortArray.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_StructShortArray.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                element_identifier_anonymous_array_int16_t_10 = new TypeIdentifier(type_ids_StructShortArray.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Array element TypeIdentifier inconsistent.");
                                return;
                            }
                            EquivalenceKind equiv_kind_anonymous_array_int16_t_10 = EK_COMPLETE;
                            if (TK_NONE == type_ids_StructShortArray.type_identifier2()._d())
                            {
                                equiv_kind_anonymous_array_int16_t_10 = EK_BOTH;
                            }
                            CollectionElementFlag element_flags_anonymous_array_int16_t_10 = 0;
                            PlainCollectionHeader header_anonymous_array_int16_t_10 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_int16_t_10, element_flags_anonymous_array_int16_t_10);
                            std::string type_id_kind_anonymous_array_int16_t_10("TI_PLAIN_ARRAY_SMALL");
                            if (type_id_kind_anonymous_array_int16_t_10 == "TI_PLAIN_ARRAY_SMALL")
                            {
                                SBoundSeq array_bound_seq;
                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(10));

                                PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_int16_t_10, array_bound_seq,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_int16_t_10));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_int16_t_10"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_array_int16_t_10 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                LBoundSeq array_bound_seq;
                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(10));

                                PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header_anonymous_array_int16_t_10, array_bound_seq,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_int16_t_10));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_int16_t_10"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_array_int16_t_10 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            return_code_StructShortArray =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_array_int16_t_10", type_ids_StructShortArray);
                            if (return_code_StructShortArray != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_array_int16_t_10: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        StructMemberFlag member_flags_var_array_short = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_var_array_short;
                        MemberId member_id_var_array_short = 0x00000000;
                        if (EK_COMPLETE == type_ids_StructShortArray.type_identifier1()._d() || TK_NONE == type_ids_StructShortArray.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructShortArray.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructShortArray.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructShortArray.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructShortArray.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructShortArray.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructShortArray.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructShortArray.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructShortArray.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructShortArray.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructShortArray.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructShortArray.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructShortArray.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructShortArray.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructShortArray.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_array_short = TypeObjectUtils::build_common_struct_member(member_id_var_array_short, member_flags_var_array_short, type_ids_StructShortArray.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_StructShortArray.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructShortArray.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructShortArray.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructShortArray.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructShortArray.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructShortArray.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructShortArray.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructShortArray.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructShortArray.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructShortArray.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructShortArray.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructShortArray.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructShortArray.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructShortArray.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructShortArray.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_array_short = TypeObjectUtils::build_common_struct_member(member_id_var_array_short, member_flags_var_array_short, type_ids_StructShortArray.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure var_array_short member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_var_array_short = "var_array_short";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_array_short;
                        ann_custom_StructShortArray.reset();
                        CompleteMemberDetail detail_var_array_short = TypeObjectUtils::build_complete_member_detail(name_var_array_short, member_ann_builtin_var_array_short, ann_custom_StructShortArray);
                        CompleteStructMember member_var_array_short = TypeObjectUtils::build_complete_struct_member(common_var_array_short, detail_var_array_short);
                        TypeObjectUtils::add_complete_struct_member(member_seq_StructShortArray, member_var_array_short);
                    }
                    CompleteStructType struct_type_StructShortArray = TypeObjectUtils::build_complete_struct_type(struct_flags_StructShortArray, header_StructShortArray, member_seq_StructShortArray);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructShortArray, type_name_StructShortArray.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "StructShortArray already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_StructShortArray =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "StructShortArray", type_ids_StructShortArray);
                    if (return_code_StructShortArray != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "StructShortArray: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_StructShortArray = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_StructShortArray;
            MemberId member_id_var_StructShortArray = 0x00000014;
            if (EK_COMPLETE == type_ids_Structures.type_identifier1()._d() || TK_NONE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructShortArray = TypeObjectUtils::build_common_struct_member(member_id_var_StructShortArray, member_flags_var_StructShortArray, type_ids_Structures.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructShortArray = TypeObjectUtils::build_common_struct_member(member_id_var_StructShortArray, member_flags_var_StructShortArray, type_ids_Structures.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_StructShortArray member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_StructShortArray = "var_StructShortArray";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_StructShortArray;
            ann_custom_Structures.reset();
            CompleteMemberDetail detail_var_StructShortArray = TypeObjectUtils::build_complete_member_detail(name_var_StructShortArray, member_ann_builtin_var_StructShortArray, ann_custom_Structures);
            CompleteStructMember member_var_StructShortArray = TypeObjectUtils::build_complete_struct_member(common_var_StructShortArray, detail_var_StructShortArray);
            TypeObjectUtils::add_complete_struct_member(member_seq_Structures, member_var_StructShortArray);
        }
        {
            return_code_Structures =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "StructSequence", type_ids_Structures);

            if (return_code_Structures != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_StructSequence = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_StructSequence;
                    TypeIdentifierPair type_ids_StructSequence;
                    QualifiedTypeName type_name_StructSequence = "StructSequence";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructSequence;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructSequence;
                    CompleteTypeDetail detail_StructSequence = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructSequence, ann_custom_StructSequence, type_name_StructSequence.to_string());
                    CompleteStructHeader header_StructSequence;
                    header_StructSequence = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructSequence);
                    CompleteStructMemberSeq member_seq_StructSequence;
                    {
                        return_code_StructSequence =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_sequence_int32_t_unbounded", type_ids_StructSequence);

                        if (return_code_StructSequence != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            return_code_StructSequence =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_int32_t", type_ids_StructSequence);

                            if (return_code_StructSequence != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            TypeIdentifier* element_identifier_anonymous_sequence_int32_t_unbounded {nullptr};
                            if (EK_COMPLETE == type_ids_StructSequence.type_identifier1()._d() || TK_NONE == type_ids_StructSequence.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructSequence.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_StructSequence.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructSequence.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_StructSequence.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructSequence.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_StructSequence.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructSequence.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_StructSequence.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_StructSequence.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_StructSequence.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_StructSequence.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_StructSequence.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_StructSequence.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_StructSequence.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                element_identifier_anonymous_sequence_int32_t_unbounded = new TypeIdentifier(type_ids_StructSequence.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_StructSequence.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructSequence.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_StructSequence.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructSequence.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_StructSequence.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructSequence.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_StructSequence.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructSequence.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_StructSequence.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_StructSequence.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_StructSequence.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_StructSequence.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_StructSequence.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_StructSequence.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_StructSequence.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                element_identifier_anonymous_sequence_int32_t_unbounded = new TypeIdentifier(type_ids_StructSequence.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Sequence element TypeIdentifier inconsistent.");
                                return;
                            }
                            EquivalenceKind equiv_kind_anonymous_sequence_int32_t_unbounded = EK_COMPLETE;
                            if (TK_NONE == type_ids_StructSequence.type_identifier2()._d())
                            {
                                equiv_kind_anonymous_sequence_int32_t_unbounded = EK_BOTH;
                            }
                            CollectionElementFlag element_flags_anonymous_sequence_int32_t_unbounded = 0;
                            PlainCollectionHeader header_anonymous_sequence_int32_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_int32_t_unbounded, element_flags_anonymous_sequence_int32_t_unbounded);
                            std::string type_id_kind_anonymous_sequence_int32_t_unbounded("TI_PLAIN_SEQUENCE_SMALL");
                            if (type_id_kind_anonymous_sequence_int32_t_unbounded == "TI_PLAIN_SEQUENCE_SMALL")
                            {
                                SBound bound = 0;
                                PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_int32_t_unbounded, bound,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int32_t_unbounded));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_int32_t_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_sequence_int32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                LBound bound = 0;
                                PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_int32_t_unbounded, bound,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int32_t_unbounded));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_int32_t_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_sequence_int32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            return_code_StructSequence =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_sequence_int32_t_unbounded", type_ids_StructSequence);
                            if (return_code_StructSequence != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_sequence_int32_t_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        StructMemberFlag member_flags_var_sequence = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_var_sequence;
                        MemberId member_id_var_sequence = 0x00000000;
                        if (EK_COMPLETE == type_ids_StructSequence.type_identifier1()._d() || TK_NONE == type_ids_StructSequence.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructSequence.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructSequence.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructSequence.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructSequence.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructSequence.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructSequence.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructSequence.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructSequence.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructSequence.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructSequence.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructSequence.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructSequence.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructSequence.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructSequence.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_sequence = TypeObjectUtils::build_common_struct_member(member_id_var_sequence, member_flags_var_sequence, type_ids_StructSequence.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_StructSequence.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructSequence.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructSequence.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructSequence.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructSequence.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructSequence.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructSequence.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructSequence.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructSequence.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructSequence.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructSequence.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructSequence.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructSequence.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructSequence.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructSequence.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_sequence = TypeObjectUtils::build_common_struct_member(member_id_var_sequence, member_flags_var_sequence, type_ids_StructSequence.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure var_sequence member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_var_sequence = "var_sequence";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_sequence;
                        ann_custom_StructSequence.reset();
                        CompleteMemberDetail detail_var_sequence = TypeObjectUtils::build_complete_member_detail(name_var_sequence, member_ann_builtin_var_sequence, ann_custom_StructSequence);
                        CompleteStructMember member_var_sequence = TypeObjectUtils::build_complete_struct_member(common_var_sequence, detail_var_sequence);
                        TypeObjectUtils::add_complete_struct_member(member_seq_StructSequence, member_var_sequence);
                    }
                    CompleteStructType struct_type_StructSequence = TypeObjectUtils::build_complete_struct_type(struct_flags_StructSequence, header_StructSequence, member_seq_StructSequence);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructSequence, type_name_StructSequence.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "StructSequence already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_StructSequence =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "StructSequence", type_ids_StructSequence);
                    if (return_code_StructSequence != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "StructSequence: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_StructSequence = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_StructSequence;
            MemberId member_id_var_StructSequence = 0x00000015;
            if (EK_COMPLETE == type_ids_Structures.type_identifier1()._d() || TK_NONE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructSequence = TypeObjectUtils::build_common_struct_member(member_id_var_StructSequence, member_flags_var_StructSequence, type_ids_Structures.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructSequence = TypeObjectUtils::build_common_struct_member(member_id_var_StructSequence, member_flags_var_StructSequence, type_ids_Structures.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_StructSequence member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_StructSequence = "var_StructSequence";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_StructSequence;
            ann_custom_Structures.reset();
            CompleteMemberDetail detail_var_StructSequence = TypeObjectUtils::build_complete_member_detail(name_var_StructSequence, member_ann_builtin_var_StructSequence, ann_custom_Structures);
            CompleteStructMember member_var_StructSequence = TypeObjectUtils::build_complete_struct_member(common_var_StructSequence, detail_var_StructSequence);
            TypeObjectUtils::add_complete_struct_member(member_seq_Structures, member_var_StructSequence);
        }
        {
            return_code_Structures =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "StructMap", type_ids_Structures);

            if (return_code_Structures != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_StructMap = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_StructMap;
                    TypeIdentifierPair type_ids_StructMap;
                    QualifiedTypeName type_name_StructMap = "StructMap";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructMap;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructMap;
                    CompleteTypeDetail detail_StructMap = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructMap, ann_custom_StructMap, type_name_StructMap.to_string());
                    CompleteStructHeader header_StructMap;
                    header_StructMap = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructMap);
                    CompleteStructMemberSeq member_seq_StructMap;
                    {
                        return_code_StructMap =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_map_int32_t_int32_t_unbounded", type_ids_StructMap);

                        if (return_code_StructMap != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            return_code_StructMap =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_int32_t", type_ids_StructMap);

                            if (return_code_StructMap != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            TypeIdentifier* element_identifier_anonymous_map_int32_t_int32_t_unbounded {nullptr};
                            if (EK_COMPLETE == type_ids_StructMap.type_identifier1()._d() || TK_NONE == type_ids_StructMap.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructMap.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_StructMap.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructMap.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_StructMap.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructMap.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_StructMap.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructMap.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_StructMap.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_StructMap.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_StructMap.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_StructMap.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_StructMap.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_StructMap.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_StructMap.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                element_identifier_anonymous_map_int32_t_int32_t_unbounded = new TypeIdentifier(type_ids_StructMap.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_StructMap.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructMap.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_StructMap.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructMap.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_StructMap.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructMap.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_StructMap.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructMap.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_StructMap.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_StructMap.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_StructMap.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_StructMap.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_StructMap.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_StructMap.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_StructMap.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                element_identifier_anonymous_map_int32_t_int32_t_unbounded = new TypeIdentifier(type_ids_StructMap.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_map_int32_t_int32_t_unbounded inconsistent element TypeIdentifier.");
                                return;
                            }
                            return_code_StructMap =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_int32_t", type_ids_StructMap);

                            if (return_code_StructMap != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            TypeIdentifier* key_identifier_anonymous_map_int32_t_int32_t_unbounded {nullptr};
                            if (EK_COMPLETE == type_ids_StructMap.type_identifier1()._d() || TK_NONE == type_ids_StructMap.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructMap.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_StructMap.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructMap.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_StructMap.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructMap.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_StructMap.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructMap.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_StructMap.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_StructMap.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_StructMap.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_StructMap.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_StructMap.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_StructMap.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_StructMap.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                key_identifier_anonymous_map_int32_t_int32_t_unbounded = new TypeIdentifier(type_ids_StructMap.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_StructMap.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructMap.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_StructMap.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructMap.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_StructMap.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructMap.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_StructMap.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructMap.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_StructMap.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_StructMap.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_StructMap.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_StructMap.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_StructMap.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_StructMap.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_StructMap.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                key_identifier_anonymous_map_int32_t_int32_t_unbounded = new TypeIdentifier(type_ids_StructMap.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_map_int32_t_int32_t_unbounded inconsistent key TypeIdentifier.");
                                return;
                            }
                            EquivalenceKind equiv_kind_anonymous_map_int32_t_int32_t_unbounded = EK_BOTH;
                            if ((EK_COMPLETE == key_identifier_anonymous_map_int32_t_int32_t_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->_d()) ||
                                    (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_int32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->map_sdefn().header().equiv_kind())) ||
                                    (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_unbounded->map_ldefn().header().equiv_kind())))
                            {
                                equiv_kind_anonymous_map_int32_t_int32_t_unbounded = EK_COMPLETE;
                            }
                            CollectionElementFlag element_flags_anonymous_map_int32_t_int32_t_unbounded = 0;
                            CollectionElementFlag key_flags_anonymous_map_int32_t_int32_t_unbounded = 0;
                            PlainCollectionHeader header_anonymous_map_int32_t_int32_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_int32_t_unbounded, element_flags_anonymous_map_int32_t_int32_t_unbounded);
                            std::string type_id_kind_anonymous_map_int32_t_int32_t_unbounded("TI_PLAIN_MAP_SMALL");
                            if (type_id_kind_anonymous_map_int32_t_int32_t_unbounded == "TI_PLAIN_MAP_SMALL")
                            {
                                SBound bound = 0;
                                PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_int32_t_unbounded, bound,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_int32_t_unbounded), key_flags_anonymous_map_int32_t_int32_t_unbounded,
                                            eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_int32_t_unbounded));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_int32_t_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_int32_t_int32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                LBound bound = 0;
                                PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header_anonymous_map_int32_t_int32_t_unbounded, bound,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_int32_t_unbounded), key_flags_anonymous_map_int32_t_int32_t_unbounded,
                                            eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_int32_t_unbounded));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_int32_t_int32_t_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_int32_t_int32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            return_code_StructMap =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_map_int32_t_int32_t_unbounded", type_ids_StructMap);
                            if (return_code_StructMap != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_map_int32_t_int32_t_unbounded: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        StructMemberFlag member_flags_var_map = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_var_map;
                        MemberId member_id_var_map = 0x00000000;
                        if (EK_COMPLETE == type_ids_StructMap.type_identifier1()._d() || TK_NONE == type_ids_StructMap.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructMap.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructMap.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructMap.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructMap.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructMap.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructMap.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructMap.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructMap.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructMap.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructMap.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructMap.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructMap.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructMap.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructMap.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_map = TypeObjectUtils::build_common_struct_member(member_id_var_map, member_flags_var_map, type_ids_StructMap.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_StructMap.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructMap.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructMap.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructMap.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructMap.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructMap.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructMap.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructMap.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructMap.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructMap.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructMap.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructMap.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructMap.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructMap.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructMap.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_map = TypeObjectUtils::build_common_struct_member(member_id_var_map, member_flags_var_map, type_ids_StructMap.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure var_map member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_var_map = "var_map";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_map;
                        ann_custom_StructMap.reset();
                        CompleteMemberDetail detail_var_map = TypeObjectUtils::build_complete_member_detail(name_var_map, member_ann_builtin_var_map, ann_custom_StructMap);
                        CompleteStructMember member_var_map = TypeObjectUtils::build_complete_struct_member(common_var_map, detail_var_map);
                        TypeObjectUtils::add_complete_struct_member(member_seq_StructMap, member_var_map);
                    }
                    CompleteStructType struct_type_StructMap = TypeObjectUtils::build_complete_struct_type(struct_flags_StructMap, header_StructMap, member_seq_StructMap);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructMap, type_name_StructMap.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "StructMap already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_StructMap =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "StructMap", type_ids_StructMap);
                    if (return_code_StructMap != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "StructMap: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_StructMap = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_StructMap;
            MemberId member_id_var_StructMap = 0x00000016;
            if (EK_COMPLETE == type_ids_Structures.type_identifier1()._d() || TK_NONE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructMap = TypeObjectUtils::build_common_struct_member(member_id_var_StructMap, member_flags_var_StructMap, type_ids_Structures.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructMap = TypeObjectUtils::build_common_struct_member(member_id_var_StructMap, member_flags_var_StructMap, type_ids_Structures.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_StructMap member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_StructMap = "var_StructMap";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_StructMap;
            ann_custom_Structures.reset();
            CompleteMemberDetail detail_var_StructMap = TypeObjectUtils::build_complete_member_detail(name_var_StructMap, member_ann_builtin_var_StructMap, ann_custom_Structures);
            CompleteStructMember member_var_StructMap = TypeObjectUtils::build_complete_struct_member(common_var_StructMap, detail_var_StructMap);
            TypeObjectUtils::add_complete_struct_member(member_seq_Structures, member_var_StructMap);
        }
        {
            return_code_Structures =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "StructUnion", type_ids_Structures);

            if (return_code_Structures != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_StructUnion = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_StructUnion;
                    TypeIdentifierPair type_ids_StructUnion;
                    QualifiedTypeName type_name_StructUnion = "StructUnion";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructUnion;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructUnion;
                    CompleteTypeDetail detail_StructUnion = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructUnion, ann_custom_StructUnion, type_name_StructUnion.to_string());
                    CompleteStructHeader header_StructUnion;
                    header_StructUnion = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructUnion);
                    CompleteStructMemberSeq member_seq_StructUnion;
                    {
                        return_code_StructUnion =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "InnerUnionHelper", type_ids_StructUnion);

                        if (return_code_StructUnion != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                ReturnCode_t return_code_InnerUnionHelper;
                                TypeIdentifierPair type_ids_InnerUnionHelper;
                                UnionTypeFlag union_flags_InnerUnionHelper = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        true, false);
                                QualifiedTypeName type_name_InnerUnionHelper = "InnerUnionHelper";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_InnerUnionHelper;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_InnerUnionHelper;
                                AppliedAnnotationSeq tmp_ann_custom_InnerUnionHelper;
                                eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim_InnerUnionHelper;
                                if (!tmp_ann_custom_InnerUnionHelper.empty())
                                {
                                    ann_custom_InnerUnionHelper = tmp_ann_custom_InnerUnionHelper;
                                }

                                CompleteTypeDetail detail_InnerUnionHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_InnerUnionHelper, ann_custom_InnerUnionHelper, type_name_InnerUnionHelper.to_string());
                                CompleteUnionHeader header_InnerUnionHelper = TypeObjectUtils::build_complete_union_header(detail_InnerUnionHelper);
                                UnionDiscriminatorFlag member_flags_InnerUnionHelper = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                        false);
                                return_code_InnerUnionHelper =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_int32_t", type_ids_InnerUnionHelper);

                                if (return_code_InnerUnionHelper != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                CommonDiscriminatorMember common_InnerUnionHelper;
                                if (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1()._d() || TK_NONE == type_ids_InnerUnionHelper.type_identifier2()._d())
                                {
                                    common_InnerUnionHelper = TypeObjectUtils::build_common_discriminator_member(member_flags_InnerUnionHelper, type_ids_InnerUnionHelper.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2()._d())
                                {
                                    common_InnerUnionHelper = TypeObjectUtils::build_common_discriminator_member(member_flags_InnerUnionHelper, type_ids_InnerUnionHelper.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "InnerUnionHelper discriminator TypeIdentifier inconsistent.");
                                    return;
                                }
                                type_ann_builtin_InnerUnionHelper.reset();
                                ann_custom_InnerUnionHelper.reset();
                                CompleteDiscriminatorMember discriminator_InnerUnionHelper = TypeObjectUtils::build_complete_discriminator_member(common_InnerUnionHelper,
                                        type_ann_builtin_InnerUnionHelper, ann_custom_InnerUnionHelper);
                                CompleteUnionMemberSeq member_seq_InnerUnionHelper;
                                {
                                    return_code_InnerUnionHelper =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_int32_t", type_ids_InnerUnionHelper);

                                    if (return_code_InnerUnionHelper != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "longValue Union member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    UnionMemberFlag member_flags_longValue = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false);
                                    UnionCaseLabelSeq label_seq_longValue;
                                    TypeObjectUtils::add_union_case_label(label_seq_longValue, static_cast<int32_t>(0));
                                    CommonUnionMember common_longValue;
                                    MemberId member_id_longValue = 0x00000001;
                                    if (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1()._d() || TK_NONE == type_ids_InnerUnionHelper.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_longValue = TypeObjectUtils::build_common_union_member(member_id_longValue, member_flags_longValue, type_ids_InnerUnionHelper.type_identifier1(),
                                                label_seq_longValue);
                                    }
                                    else if (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_longValue = TypeObjectUtils::build_common_union_member(member_id_longValue, member_flags_longValue, type_ids_InnerUnionHelper.type_identifier2(),
                                                label_seq_longValue);
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Union longValue member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_longValue = "longValue";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_longValue;
                                    ann_custom_InnerUnionHelper.reset();
                                    CompleteMemberDetail detail_longValue = TypeObjectUtils::build_complete_member_detail(name_longValue, member_ann_builtin_longValue, ann_custom_InnerUnionHelper);
                                    CompleteUnionMember member_longValue = TypeObjectUtils::build_complete_union_member(common_longValue, detail_longValue);
                                    TypeObjectUtils::add_complete_union_member(member_seq_InnerUnionHelper, member_longValue);
                                }
                                {
                                    return_code_InnerUnionHelper =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_float", type_ids_InnerUnionHelper);

                                    if (return_code_InnerUnionHelper != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "floatValue Union member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    UnionMemberFlag member_flags_floatValue = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false);
                                    UnionCaseLabelSeq label_seq_floatValue;
                                    TypeObjectUtils::add_union_case_label(label_seq_floatValue, static_cast<int32_t>(1));
                                    CommonUnionMember common_floatValue;
                                    MemberId member_id_floatValue = 0x00000002;
                                    if (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1()._d() || TK_NONE == type_ids_InnerUnionHelper.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_floatValue = TypeObjectUtils::build_common_union_member(member_id_floatValue, member_flags_floatValue, type_ids_InnerUnionHelper.type_identifier1(),
                                                label_seq_floatValue);
                                    }
                                    else if (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_floatValue = TypeObjectUtils::build_common_union_member(member_id_floatValue, member_flags_floatValue, type_ids_InnerUnionHelper.type_identifier2(),
                                                label_seq_floatValue);
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Union floatValue member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_floatValue = "floatValue";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_floatValue;
                                    ann_custom_InnerUnionHelper.reset();
                                    CompleteMemberDetail detail_floatValue = TypeObjectUtils::build_complete_member_detail(name_floatValue, member_ann_builtin_floatValue, ann_custom_InnerUnionHelper);
                                    CompleteUnionMember member_floatValue = TypeObjectUtils::build_complete_union_member(common_floatValue, detail_floatValue);
                                    TypeObjectUtils::add_complete_union_member(member_seq_InnerUnionHelper, member_floatValue);
                                }
                                {
                                    return_code_InnerUnionHelper =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_int16_t", type_ids_InnerUnionHelper);

                                    if (return_code_InnerUnionHelper != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "shortValue Union member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    UnionMemberFlag member_flags_shortValue = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            true, false);
                                    UnionCaseLabelSeq label_seq_shortValue;
                                    CommonUnionMember common_shortValue;
                                    MemberId member_id_shortValue = 0x00000003;
                                    if (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1()._d() || TK_NONE == type_ids_InnerUnionHelper.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_InnerUnionHelper.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_shortValue = TypeObjectUtils::build_common_union_member(member_id_shortValue, member_flags_shortValue, type_ids_InnerUnionHelper.type_identifier1(),
                                                label_seq_shortValue);
                                    }
                                    else if (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_InnerUnionHelper.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_InnerUnionHelper.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_shortValue = TypeObjectUtils::build_common_union_member(member_id_shortValue, member_flags_shortValue, type_ids_InnerUnionHelper.type_identifier2(),
                                                label_seq_shortValue);
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Union shortValue member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_shortValue = "shortValue";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_shortValue;
                                    ann_custom_InnerUnionHelper.reset();
                                    CompleteMemberDetail detail_shortValue = TypeObjectUtils::build_complete_member_detail(name_shortValue, member_ann_builtin_shortValue, ann_custom_InnerUnionHelper);
                                    CompleteUnionMember member_shortValue = TypeObjectUtils::build_complete_union_member(common_shortValue, detail_shortValue);
                                    TypeObjectUtils::add_complete_union_member(member_seq_InnerUnionHelper, member_shortValue);
                                }
                                CompleteUnionType union_type_InnerUnionHelper = TypeObjectUtils::build_complete_union_type(union_flags_InnerUnionHelper, header_InnerUnionHelper, discriminator_InnerUnionHelper,
                                        member_seq_InnerUnionHelper);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_union_type_object(union_type_InnerUnionHelper, type_name_InnerUnionHelper.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "InnerUnionHelper already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code_InnerUnionHelper =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "InnerUnionHelper", type_ids_InnerUnionHelper);
                                if (return_code_InnerUnionHelper != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "InnerUnionHelper: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        StructMemberFlag member_flags_var_union = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_var_union;
                        MemberId member_id_var_union = 0x00000000;
                        if (EK_COMPLETE == type_ids_StructUnion.type_identifier1()._d() || TK_NONE == type_ids_StructUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_union = TypeObjectUtils::build_common_struct_member(member_id_var_union, member_flags_var_union, type_ids_StructUnion.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_StructUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_union = TypeObjectUtils::build_common_struct_member(member_id_var_union, member_flags_var_union, type_ids_StructUnion.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure var_union member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_var_union = "var_union";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_union;
                        ann_custom_StructUnion.reset();
                        CompleteMemberDetail detail_var_union = TypeObjectUtils::build_complete_member_detail(name_var_union, member_ann_builtin_var_union, ann_custom_StructUnion);
                        CompleteStructMember member_var_union = TypeObjectUtils::build_complete_struct_member(common_var_union, detail_var_union);
                        TypeObjectUtils::add_complete_struct_member(member_seq_StructUnion, member_var_union);
                    }
                    CompleteStructType struct_type_StructUnion = TypeObjectUtils::build_complete_struct_type(struct_flags_StructUnion, header_StructUnion, member_seq_StructUnion);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructUnion, type_name_StructUnion.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "StructUnion already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_StructUnion =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "StructUnion", type_ids_StructUnion);
                    if (return_code_StructUnion != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "StructUnion: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_StructUnion = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_StructUnion;
            MemberId member_id_var_StructUnion = 0x00000017;
            if (EK_COMPLETE == type_ids_Structures.type_identifier1()._d() || TK_NONE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructUnion = TypeObjectUtils::build_common_struct_member(member_id_var_StructUnion, member_flags_var_StructUnion, type_ids_Structures.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructUnion = TypeObjectUtils::build_common_struct_member(member_id_var_StructUnion, member_flags_var_StructUnion, type_ids_Structures.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_StructUnion member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_StructUnion = "var_StructUnion";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_StructUnion;
            ann_custom_Structures.reset();
            CompleteMemberDetail detail_var_StructUnion = TypeObjectUtils::build_complete_member_detail(name_var_StructUnion, member_ann_builtin_var_StructUnion, ann_custom_Structures);
            CompleteStructMember member_var_StructUnion = TypeObjectUtils::build_complete_struct_member(common_var_StructUnion, detail_var_StructUnion);
            TypeObjectUtils::add_complete_struct_member(member_seq_Structures, member_var_StructUnion);
        }
        {
            return_code_Structures =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "StructStructure", type_ids_Structures);

            if (return_code_Structures != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_StructStructure = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_StructStructure;
                    TypeIdentifierPair type_ids_StructStructure;
                    QualifiedTypeName type_name_StructStructure = "StructStructure";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructStructure;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructStructure;
                    CompleteTypeDetail detail_StructStructure = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructStructure, ann_custom_StructStructure, type_name_StructStructure.to_string());
                    CompleteStructHeader header_StructStructure;
                    header_StructStructure = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructStructure);
                    CompleteStructMemberSeq member_seq_StructStructure;
                    {
                        return_code_StructStructure =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "InnerStructureHelper", type_ids_StructStructure);

                        if (return_code_StructStructure != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags_InnerStructureHelper = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        true, false);
                                ReturnCode_t return_code_InnerStructureHelper;
                                TypeIdentifierPair type_ids_InnerStructureHelper;
                                QualifiedTypeName type_name_InnerStructureHelper = "InnerStructureHelper";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_InnerStructureHelper;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_InnerStructureHelper;
                                AppliedAnnotationSeq tmp_ann_custom_InnerStructureHelper;
                                eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim_InnerStructureHelper;
                                if (!tmp_ann_custom_InnerStructureHelper.empty())
                                {
                                    ann_custom_InnerStructureHelper = tmp_ann_custom_InnerStructureHelper;
                                }

                                CompleteTypeDetail detail_InnerStructureHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_InnerStructureHelper, ann_custom_InnerStructureHelper, type_name_InnerStructureHelper.to_string());
                                CompleteStructHeader header_InnerStructureHelper;
                                header_InnerStructureHelper = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_InnerStructureHelper);
                                CompleteStructMemberSeq member_seq_InnerStructureHelper;
                                {
                                    return_code_InnerStructureHelper =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_int32_t", type_ids_InnerStructureHelper);

                                    if (return_code_InnerStructureHelper != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "field1 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_field1 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_field1;
                                    MemberId member_id_field1 = 0x00000000;
                                    if (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1()._d() || TK_NONE == type_ids_InnerStructureHelper.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_field1 = TypeObjectUtils::build_common_struct_member(member_id_field1, member_flags_field1, type_ids_InnerStructureHelper.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_field1 = TypeObjectUtils::build_common_struct_member(member_id_field1, member_flags_field1, type_ids_InnerStructureHelper.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure field1 member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_field1 = "field1";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_field1;
                                    ann_custom_InnerStructureHelper.reset();
                                    CompleteMemberDetail detail_field1 = TypeObjectUtils::build_complete_member_detail(name_field1, member_ann_builtin_field1, ann_custom_InnerStructureHelper);
                                    CompleteStructMember member_field1 = TypeObjectUtils::build_complete_struct_member(common_field1, detail_field1);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_InnerStructureHelper, member_field1);
                                }
                                {
                                    return_code_InnerStructureHelper =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_float", type_ids_InnerStructureHelper);

                                    if (return_code_InnerStructureHelper != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "field2 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_field2 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_field2;
                                    MemberId member_id_field2 = 0x00000001;
                                    if (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1()._d() || TK_NONE == type_ids_InnerStructureHelper.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_InnerStructureHelper.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_field2 = TypeObjectUtils::build_common_struct_member(member_id_field2, member_flags_field2, type_ids_InnerStructureHelper.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_InnerStructureHelper.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_InnerStructureHelper.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_field2 = TypeObjectUtils::build_common_struct_member(member_id_field2, member_flags_field2, type_ids_InnerStructureHelper.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure field2 member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_field2 = "field2";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_field2;
                                    ann_custom_InnerStructureHelper.reset();
                                    CompleteMemberDetail detail_field2 = TypeObjectUtils::build_complete_member_detail(name_field2, member_ann_builtin_field2, ann_custom_InnerStructureHelper);
                                    CompleteStructMember member_field2 = TypeObjectUtils::build_complete_struct_member(common_field2, detail_field2);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_InnerStructureHelper, member_field2);
                                }
                                CompleteStructType struct_type_InnerStructureHelper = TypeObjectUtils::build_complete_struct_type(struct_flags_InnerStructureHelper, header_InnerStructureHelper, member_seq_InnerStructureHelper);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type_InnerStructureHelper, type_name_InnerStructureHelper.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "InnerStructureHelper already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code_InnerStructureHelper =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "InnerStructureHelper", type_ids_InnerStructureHelper);
                                if (return_code_InnerStructureHelper != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "InnerStructureHelper: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        StructMemberFlag member_flags_var_structure = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_var_structure;
                        MemberId member_id_var_structure = 0x00000000;
                        if (EK_COMPLETE == type_ids_StructStructure.type_identifier1()._d() || TK_NONE == type_ids_StructStructure.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructStructure.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructStructure.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructStructure.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructStructure.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructStructure.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructStructure.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructStructure.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructStructure.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructStructure.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructStructure.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructStructure.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructStructure.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructStructure.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructStructure.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_structure = TypeObjectUtils::build_common_struct_member(member_id_var_structure, member_flags_var_structure, type_ids_StructStructure.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_StructStructure.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructStructure.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructStructure.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructStructure.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructStructure.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructStructure.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructStructure.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructStructure.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructStructure.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructStructure.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructStructure.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructStructure.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructStructure.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructStructure.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructStructure.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_structure = TypeObjectUtils::build_common_struct_member(member_id_var_structure, member_flags_var_structure, type_ids_StructStructure.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure var_structure member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_var_structure = "var_structure";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_structure;
                        ann_custom_StructStructure.reset();
                        CompleteMemberDetail detail_var_structure = TypeObjectUtils::build_complete_member_detail(name_var_structure, member_ann_builtin_var_structure, ann_custom_StructStructure);
                        CompleteStructMember member_var_structure = TypeObjectUtils::build_complete_struct_member(common_var_structure, detail_var_structure);
                        TypeObjectUtils::add_complete_struct_member(member_seq_StructStructure, member_var_structure);
                    }
                    CompleteStructType struct_type_StructStructure = TypeObjectUtils::build_complete_struct_type(struct_flags_StructStructure, header_StructStructure, member_seq_StructStructure);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructStructure, type_name_StructStructure.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "StructStructure already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_StructStructure =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "StructStructure", type_ids_StructStructure);
                    if (return_code_StructStructure != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "StructStructure: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_StructStructure = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_StructStructure;
            MemberId member_id_var_StructStructure = 0x00000018;
            if (EK_COMPLETE == type_ids_Structures.type_identifier1()._d() || TK_NONE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructStructure = TypeObjectUtils::build_common_struct_member(member_id_var_StructStructure, member_flags_var_StructStructure, type_ids_Structures.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructStructure = TypeObjectUtils::build_common_struct_member(member_id_var_StructStructure, member_flags_var_StructStructure, type_ids_Structures.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_StructStructure member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_StructStructure = "var_StructStructure";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_StructStructure;
            ann_custom_Structures.reset();
            CompleteMemberDetail detail_var_StructStructure = TypeObjectUtils::build_complete_member_detail(name_var_StructStructure, member_ann_builtin_var_StructStructure, ann_custom_Structures);
            CompleteStructMember member_var_StructStructure = TypeObjectUtils::build_complete_struct_member(common_var_StructStructure, detail_var_StructStructure);
            TypeObjectUtils::add_complete_struct_member(member_seq_Structures, member_var_StructStructure);
        }
        {
            return_code_Structures =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "StructBitset", type_ids_Structures);

            if (return_code_Structures != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_StructBitset = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_StructBitset;
                    TypeIdentifierPair type_ids_StructBitset;
                    QualifiedTypeName type_name_StructBitset = "StructBitset";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructBitset;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructBitset;
                    CompleteTypeDetail detail_StructBitset = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructBitset, ann_custom_StructBitset, type_name_StructBitset.to_string());
                    CompleteStructHeader header_StructBitset;
                    header_StructBitset = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructBitset);
                    CompleteStructMemberSeq member_seq_StructBitset;
                    {
                        return_code_StructBitset =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "InnerBitsetHelper", type_ids_StructBitset);

                        if (return_code_StructBitset != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            BitsetTypeFlag bitset_flags_InnerBitsetHelper = 0;
                            QualifiedTypeName type_name_InnerBitsetHelper = "InnerBitsetHelper";
                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_InnerBitsetHelper;
                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_InnerBitsetHelper;
                            CompleteTypeDetail detail_InnerBitsetHelper = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_InnerBitsetHelper, ann_custom_InnerBitsetHelper, type_name_InnerBitsetHelper.to_string());
                            CompleteBitsetHeader header_InnerBitsetHelper = TypeObjectUtils::build_complete_bitset_header(detail_InnerBitsetHelper);
                            CompleteBitfieldSeq field_seq_InnerBitsetHelper;
                            {
                                uint16_t position_a = 0;
                                BitsetMemberFlag flags_a = 0;
                                uint8_t bitcount_a = 3;
                                TypeKind holder_type_a = TK_BYTE;
                                CommonBitfield common_a = TypeObjectUtils::build_common_bitfield(position_a, flags_a, bitcount_a, holder_type_a);
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_a;
                                ann_custom_InnerBitsetHelper.reset();
                                MemberName name_a = "a";
                                CompleteMemberDetail detail_a = TypeObjectUtils::build_complete_member_detail(name_a, member_ann_builtin_a, ann_custom_InnerBitsetHelper);
                                CompleteBitfield bitfield_a = TypeObjectUtils::build_complete_bitfield(common_a, detail_a);
                                TypeObjectUtils::add_complete_bitfield(field_seq_InnerBitsetHelper, bitfield_a);
                            }
                            {
                                uint16_t position_b = 3;
                                BitsetMemberFlag flags_b = 0;
                                uint8_t bitcount_b = 1;
                                TypeKind holder_type_b = TK_BOOLEAN;
                                CommonBitfield common_b = TypeObjectUtils::build_common_bitfield(position_b, flags_b, bitcount_b, holder_type_b);
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_b;
                                ann_custom_InnerBitsetHelper.reset();
                                MemberName name_b = "b";
                                CompleteMemberDetail detail_b = TypeObjectUtils::build_complete_member_detail(name_b, member_ann_builtin_b, ann_custom_InnerBitsetHelper);
                                CompleteBitfield bitfield_b = TypeObjectUtils::build_complete_bitfield(common_b, detail_b);
                                TypeObjectUtils::add_complete_bitfield(field_seq_InnerBitsetHelper, bitfield_b);
                            }
                            {
                                uint16_t position_c = 8;
                                BitsetMemberFlag flags_c = 0;
                                uint8_t bitcount_c = 10;
                                TypeKind holder_type_c = TK_UINT16;
                                CommonBitfield common_c = TypeObjectUtils::build_common_bitfield(position_c, flags_c, bitcount_c, holder_type_c);
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_c;
                                ann_custom_InnerBitsetHelper.reset();
                                MemberName name_c = "c";
                                CompleteMemberDetail detail_c = TypeObjectUtils::build_complete_member_detail(name_c, member_ann_builtin_c, ann_custom_InnerBitsetHelper);
                                CompleteBitfield bitfield_c = TypeObjectUtils::build_complete_bitfield(common_c, detail_c);
                                TypeObjectUtils::add_complete_bitfield(field_seq_InnerBitsetHelper, bitfield_c);
                            }
                            {
                                uint16_t position_d = 21;
                                BitsetMemberFlag flags_d = 0;
                                uint8_t bitcount_d = 12;
                                TypeKind holder_type_d = TK_INT16;
                                CommonBitfield common_d = TypeObjectUtils::build_common_bitfield(position_d, flags_d, bitcount_d, holder_type_d);
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_d;
                                ann_custom_InnerBitsetHelper.reset();
                                MemberName name_d = "d";
                                CompleteMemberDetail detail_d = TypeObjectUtils::build_complete_member_detail(name_d, member_ann_builtin_d, ann_custom_InnerBitsetHelper);
                                CompleteBitfield bitfield_d = TypeObjectUtils::build_complete_bitfield(common_d, detail_d);
                                TypeObjectUtils::add_complete_bitfield(field_seq_InnerBitsetHelper, bitfield_d);
                            }
                            CompleteBitsetType bitset_type_InnerBitsetHelper = TypeObjectUtils::build_complete_bitset_type(bitset_flags_InnerBitsetHelper, header_InnerBitsetHelper, field_seq_InnerBitsetHelper);
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_bitset_type_object(bitset_type_InnerBitsetHelper, type_name_InnerBitsetHelper.to_string()))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "InnerBitsetHelper already registered in TypeObjectRegistry for a different type.");
                            }
                            return_code_StructBitset =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "InnerBitsetHelper", type_ids_StructBitset);
                            if (return_code_StructBitset != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "InnerBitsetHelper: Given Bitset TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        StructMemberFlag member_flags_var_bitset = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_var_bitset;
                        MemberId member_id_var_bitset = 0x00000000;
                        if (EK_COMPLETE == type_ids_StructBitset.type_identifier1()._d() || TK_NONE == type_ids_StructBitset.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructBitset.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructBitset.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructBitset.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructBitset.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructBitset.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructBitset.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructBitset.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructBitset.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructBitset.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructBitset.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructBitset.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructBitset.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructBitset.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructBitset.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_bitset = TypeObjectUtils::build_common_struct_member(member_id_var_bitset, member_flags_var_bitset, type_ids_StructBitset.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_StructBitset.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructBitset.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructBitset.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructBitset.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructBitset.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructBitset.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructBitset.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructBitset.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructBitset.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructBitset.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructBitset.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructBitset.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructBitset.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructBitset.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructBitset.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_var_bitset = TypeObjectUtils::build_common_struct_member(member_id_var_bitset, member_flags_var_bitset, type_ids_StructBitset.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure var_bitset member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_var_bitset = "var_bitset";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_bitset;
                        ann_custom_StructBitset.reset();
                        CompleteMemberDetail detail_var_bitset = TypeObjectUtils::build_complete_member_detail(name_var_bitset, member_ann_builtin_var_bitset, ann_custom_StructBitset);
                        CompleteStructMember member_var_bitset = TypeObjectUtils::build_complete_struct_member(common_var_bitset, detail_var_bitset);
                        TypeObjectUtils::add_complete_struct_member(member_seq_StructBitset, member_var_bitset);
                    }
                    CompleteStructType struct_type_StructBitset = TypeObjectUtils::build_complete_struct_type(struct_flags_StructBitset, header_StructBitset, member_seq_StructBitset);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructBitset, type_name_StructBitset.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "StructBitset already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_StructBitset =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "StructBitset", type_ids_StructBitset);
                    if (return_code_StructBitset != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "StructBitset: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_StructBitset = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_StructBitset;
            MemberId member_id_var_StructBitset = 0x00000019;
            if (EK_COMPLETE == type_ids_Structures.type_identifier1()._d() || TK_NONE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructBitset = TypeObjectUtils::build_common_struct_member(member_id_var_StructBitset, member_flags_var_StructBitset, type_ids_Structures.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructBitset = TypeObjectUtils::build_common_struct_member(member_id_var_StructBitset, member_flags_var_StructBitset, type_ids_Structures.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_StructBitset member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_StructBitset = "var_StructBitset";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_StructBitset;
            ann_custom_Structures.reset();
            CompleteMemberDetail detail_var_StructBitset = TypeObjectUtils::build_complete_member_detail(name_var_StructBitset, member_ann_builtin_var_StructBitset, ann_custom_Structures);
            CompleteStructMember member_var_StructBitset = TypeObjectUtils::build_complete_struct_member(common_var_StructBitset, detail_var_StructBitset);
            TypeObjectUtils::add_complete_struct_member(member_seq_Structures, member_var_StructBitset);
        }
        {
            return_code_Structures =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "StructEmpty", type_ids_Structures);

            if (return_code_Structures != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_StructEmpty = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_StructEmpty;
                    TypeIdentifierPair type_ids_StructEmpty;
                    QualifiedTypeName type_name_StructEmpty = "StructEmpty";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructEmpty;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructEmpty;
                    CompleteTypeDetail detail_StructEmpty = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructEmpty, ann_custom_StructEmpty, type_name_StructEmpty.to_string());
                    CompleteStructHeader header_StructEmpty;
                    header_StructEmpty = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructEmpty);
                    CompleteStructMemberSeq member_seq_StructEmpty;
                    CompleteStructType struct_type_StructEmpty = TypeObjectUtils::build_complete_struct_type(struct_flags_StructEmpty, header_StructEmpty, member_seq_StructEmpty);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructEmpty, type_name_StructEmpty.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "StructEmpty already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_StructEmpty =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "StructEmpty", type_ids_StructEmpty);
                    if (return_code_StructEmpty != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "StructEmpty: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_StructEmpty = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_StructEmpty;
            MemberId member_id_var_StructEmpty = 0x0000001a;
            if (EK_COMPLETE == type_ids_Structures.type_identifier1()._d() || TK_NONE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructEmpty = TypeObjectUtils::build_common_struct_member(member_id_var_StructEmpty, member_flags_var_StructEmpty, type_ids_Structures.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_Structures.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Structures.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Structures.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Structures.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_StructEmpty = TypeObjectUtils::build_common_struct_member(member_id_var_StructEmpty, member_flags_var_StructEmpty, type_ids_Structures.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_StructEmpty member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_StructEmpty = "var_StructEmpty";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_StructEmpty;
            ann_custom_Structures.reset();
            CompleteMemberDetail detail_var_StructEmpty = TypeObjectUtils::build_complete_member_detail(name_var_StructEmpty, member_ann_builtin_var_StructEmpty, ann_custom_Structures);
            CompleteStructMember member_var_StructEmpty = TypeObjectUtils::build_complete_struct_member(common_var_StructEmpty, detail_var_StructEmpty);
            TypeObjectUtils::add_complete_struct_member(member_seq_Structures, member_var_StructEmpty);
        }
        CompleteStructType struct_type_Structures = TypeObjectUtils::build_complete_struct_type(struct_flags_Structures, header_Structures, member_seq_Structures);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_Structures, type_name_Structures.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Structures already registered in TypeObjectRegistry for a different type.");
        }
        return_code_Structures =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "Structures", type_ids_Structures);
        if (return_code_Structures != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structures: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
namespace testing_1 {
void register_testing_1_foo_type_identifier()
{
    {
        StructTypeFlag struct_flags_foo = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_foo;
        TypeIdentifierPair type_ids_foo;
        QualifiedTypeName type_name_foo = "testing_1::foo";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_foo;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_foo;
        CompleteTypeDetail detail_foo = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_foo, ann_custom_foo, type_name_foo.to_string());
        CompleteStructHeader header_foo;
        header_foo = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_foo);
        CompleteStructMemberSeq member_seq_foo;
        {
            return_code_foo =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_foo);

            if (return_code_foo != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "a Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_a = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_a;
            MemberId member_id_a = 0x00000000;
            if (EK_COMPLETE == type_ids_foo.type_identifier1()._d() || TK_NONE == type_ids_foo.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_foo.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_foo.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_foo.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_foo.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_foo.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_foo.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_foo.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_foo.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_foo.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_foo.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_foo.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_foo.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_foo.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_foo.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_a = TypeObjectUtils::build_common_struct_member(member_id_a, member_flags_a, type_ids_foo.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_foo.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_foo.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_foo.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_foo.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_foo.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_foo.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_foo.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_foo.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_foo.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_foo.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_foo.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_foo.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_foo.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_foo.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_foo.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_a = TypeObjectUtils::build_common_struct_member(member_id_a, member_flags_a, type_ids_foo.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure a member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_a = "a";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_a;
            ann_custom_foo.reset();
            CompleteMemberDetail detail_a = TypeObjectUtils::build_complete_member_detail(name_a, member_ann_builtin_a, ann_custom_foo);
            CompleteStructMember member_a = TypeObjectUtils::build_complete_struct_member(common_a, detail_a);
            TypeObjectUtils::add_complete_struct_member(member_seq_foo, member_a);
        }
        {
            return_code_foo =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_foo);

            if (return_code_foo != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "b Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_b = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_b;
            MemberId member_id_b = 0x00000001;
            if (EK_COMPLETE == type_ids_foo.type_identifier1()._d() || TK_NONE == type_ids_foo.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_foo.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_foo.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_foo.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_foo.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_foo.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_foo.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_foo.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_foo.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_foo.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_foo.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_foo.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_foo.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_foo.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_foo.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_b = TypeObjectUtils::build_common_struct_member(member_id_b, member_flags_b, type_ids_foo.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_foo.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_foo.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_foo.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_foo.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_foo.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_foo.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_foo.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_foo.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_foo.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_foo.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_foo.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_foo.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_foo.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_foo.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_foo.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_b = TypeObjectUtils::build_common_struct_member(member_id_b, member_flags_b, type_ids_foo.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure b member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_b = "b";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_b;
            ann_custom_foo.reset();
            CompleteMemberDetail detail_b = TypeObjectUtils::build_complete_member_detail(name_b, member_ann_builtin_b, ann_custom_foo);
            CompleteStructMember member_b = TypeObjectUtils::build_complete_struct_member(common_b, detail_b);
            TypeObjectUtils::add_complete_struct_member(member_seq_foo, member_b);
        }
        CompleteStructType struct_type_foo = TypeObjectUtils::build_complete_struct_type(struct_flags_foo, header_foo, member_seq_foo);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_foo, type_name_foo.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "testing_1::foo already registered in TypeObjectRegistry for a different type.");
        }
        return_code_foo =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "testing_1::foo", type_ids_foo);
        if (return_code_foo != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "testing_1::foo: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}

} // namespace testing_1
namespace testing_2 {
void register_testing_2_foo_type_identifier()
{
    {
        StructTypeFlag struct_flags_foo = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_foo;
        TypeIdentifierPair type_ids_foo;
        QualifiedTypeName type_name_foo = "testing_2::foo";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_foo;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_foo;
        CompleteTypeDetail detail_foo = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_foo, ann_custom_foo, type_name_foo.to_string());
        CompleteStructHeader header_foo;
        header_foo = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_foo);
        CompleteStructMemberSeq member_seq_foo;
        {
            return_code_foo =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_foo);

            if (return_code_foo != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "d Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_d = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_d;
            MemberId member_id_d = 0x00000000;
            if (EK_COMPLETE == type_ids_foo.type_identifier1()._d() || TK_NONE == type_ids_foo.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_foo.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_foo.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_foo.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_foo.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_foo.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_foo.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_foo.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_foo.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_foo.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_foo.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_foo.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_foo.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_foo.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_foo.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_d = TypeObjectUtils::build_common_struct_member(member_id_d, member_flags_d, type_ids_foo.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_foo.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_foo.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_foo.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_foo.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_foo.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_foo.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_foo.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_foo.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_foo.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_foo.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_foo.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_foo.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_foo.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_foo.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_foo.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_d = TypeObjectUtils::build_common_struct_member(member_id_d, member_flags_d, type_ids_foo.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure d member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_d = "d";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_d;
            ann_custom_foo.reset();
            CompleteMemberDetail detail_d = TypeObjectUtils::build_complete_member_detail(name_d, member_ann_builtin_d, ann_custom_foo);
            CompleteStructMember member_d = TypeObjectUtils::build_complete_struct_member(common_d, detail_d);
            TypeObjectUtils::add_complete_struct_member(member_seq_foo, member_d);
        }
        CompleteStructType struct_type_foo = TypeObjectUtils::build_complete_struct_type(struct_flags_foo, header_foo, member_seq_foo);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_foo, type_name_foo.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "testing_2::foo already registered in TypeObjectRegistry for a different type.");
        }
        return_code_foo =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "testing_2::foo", type_ids_foo);
        if (return_code_foo != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "testing_2::foo: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}

} // namespace testing_2
void register_bar_type_identifier()
{
    {
        StructTypeFlag struct_flags_bar = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_bar;
        TypeIdentifierPair type_ids_bar;
        QualifiedTypeName type_name_bar = "bar";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_bar;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_bar;
        CompleteTypeDetail detail_bar = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_bar, ann_custom_bar, type_name_bar.to_string());
        CompleteStructHeader header_bar;
        header_bar = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_bar);
        CompleteStructMemberSeq member_seq_bar;
        {
            return_code_bar =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_bar);

            if (return_code_bar != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "e Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_e = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_e;
            MemberId member_id_e = 0x00000000;
            if (EK_COMPLETE == type_ids_bar.type_identifier1()._d() || TK_NONE == type_ids_bar.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_bar.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_bar.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_bar.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_bar.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_bar.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_bar.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_bar.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_bar.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_bar.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_bar.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_bar.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_bar.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_bar.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_bar.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_e = TypeObjectUtils::build_common_struct_member(member_id_e, member_flags_e, type_ids_bar.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_bar.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_bar.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_bar.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_bar.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_bar.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_bar.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_bar.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_bar.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_bar.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_bar.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_bar.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_bar.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_bar.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_bar.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_bar.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_e = TypeObjectUtils::build_common_struct_member(member_id_e, member_flags_e, type_ids_bar.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure e member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_e = "e";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_e;
            ann_custom_bar.reset();
            CompleteMemberDetail detail_e = TypeObjectUtils::build_complete_member_detail(name_e, member_ann_builtin_e, ann_custom_bar);
            CompleteStructMember member_e = TypeObjectUtils::build_complete_struct_member(common_e, detail_e);
            TypeObjectUtils::add_complete_struct_member(member_seq_bar, member_e);
        }
        CompleteStructType struct_type_bar = TypeObjectUtils::build_complete_struct_type(struct_flags_bar, header_bar, member_seq_bar);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_bar, type_name_bar.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "bar already registered in TypeObjectRegistry for a different type.");
        }
        return_code_bar =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "bar", type_ids_bar);
        if (return_code_bar != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "bar: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_root1_type_identifier()
{
    {
        StructTypeFlag struct_flags_root1 = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_root1;
        TypeIdentifierPair type_ids_root1;
        QualifiedTypeName type_name_root1 = "root1";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_root1;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_root1;
        CompleteTypeDetail detail_root1 = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_root1, ann_custom_root1, type_name_root1.to_string());
        CompleteStructHeader header_root1;
        header_root1 = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_root1);
        CompleteStructMemberSeq member_seq_root1;
        {
            return_code_root1 =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "testing_1::foo", type_ids_root1);

            if (return_code_root1 != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_foo = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_foo;
                    TypeIdentifierPair type_ids_foo;
                    QualifiedTypeName type_name_foo = "testing_1::foo";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_foo;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_foo;
                    CompleteTypeDetail detail_foo = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_foo, ann_custom_foo, type_name_foo.to_string());
                    CompleteStructHeader header_foo;
                    header_foo = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_foo);
                    CompleteStructMemberSeq member_seq_foo;
                    {
                        return_code_foo =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids_foo);

                        if (return_code_foo != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "a Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        StructMemberFlag member_flags_a = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_a;
                        MemberId member_id_a = 0x00000000;
                        if (EK_COMPLETE == type_ids_foo.type_identifier1()._d() || TK_NONE == type_ids_foo.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_foo.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_foo.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_foo.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_foo.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_foo.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_foo.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_foo.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_foo.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_foo.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_foo.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_foo.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_foo.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_foo.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_foo.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_a = TypeObjectUtils::build_common_struct_member(member_id_a, member_flags_a, type_ids_foo.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_foo.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_foo.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_foo.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_foo.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_foo.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_foo.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_foo.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_foo.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_foo.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_foo.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_foo.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_foo.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_foo.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_foo.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_foo.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_a = TypeObjectUtils::build_common_struct_member(member_id_a, member_flags_a, type_ids_foo.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure a member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_a = "a";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_a;
                        ann_custom_foo.reset();
                        CompleteMemberDetail detail_a = TypeObjectUtils::build_complete_member_detail(name_a, member_ann_builtin_a, ann_custom_foo);
                        CompleteStructMember member_a = TypeObjectUtils::build_complete_struct_member(common_a, detail_a);
                        TypeObjectUtils::add_complete_struct_member(member_seq_foo, member_a);
                    }
                    {
                        return_code_foo =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids_foo);

                        if (return_code_foo != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "b Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        StructMemberFlag member_flags_b = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_b;
                        MemberId member_id_b = 0x00000001;
                        if (EK_COMPLETE == type_ids_foo.type_identifier1()._d() || TK_NONE == type_ids_foo.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_foo.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_foo.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_foo.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_foo.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_foo.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_foo.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_foo.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_foo.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_foo.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_foo.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_foo.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_foo.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_foo.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_foo.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_b = TypeObjectUtils::build_common_struct_member(member_id_b, member_flags_b, type_ids_foo.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_foo.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_foo.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_foo.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_foo.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_foo.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_foo.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_foo.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_foo.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_foo.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_foo.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_foo.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_foo.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_foo.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_foo.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_foo.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_b = TypeObjectUtils::build_common_struct_member(member_id_b, member_flags_b, type_ids_foo.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure b member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_b = "b";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_b;
                        ann_custom_foo.reset();
                        CompleteMemberDetail detail_b = TypeObjectUtils::build_complete_member_detail(name_b, member_ann_builtin_b, ann_custom_foo);
                        CompleteStructMember member_b = TypeObjectUtils::build_complete_struct_member(common_b, detail_b);
                        TypeObjectUtils::add_complete_struct_member(member_seq_foo, member_b);
                    }
                    CompleteStructType struct_type_foo = TypeObjectUtils::build_complete_struct_type(struct_flags_foo, header_foo, member_seq_foo);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_foo, type_name_foo.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "testing_1::foo already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_foo =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "testing_1::foo", type_ids_foo);
                    if (return_code_foo != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "testing_1::foo: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_foo_struct = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_foo_struct;
            MemberId member_id_foo_struct = 0x00000000;
            if (EK_COMPLETE == type_ids_root1.type_identifier1()._d() || TK_NONE == type_ids_root1.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_root1.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_root1.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_root1.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_root1.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_root1.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_root1.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_root1.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_root1.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_root1.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_root1.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_root1.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_root1.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_root1.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_root1.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_foo_struct = TypeObjectUtils::build_common_struct_member(member_id_foo_struct, member_flags_foo_struct, type_ids_root1.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_root1.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_root1.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_root1.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_root1.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_root1.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_root1.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_root1.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_root1.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_root1.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_root1.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_root1.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_root1.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_root1.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_root1.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_root1.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_foo_struct = TypeObjectUtils::build_common_struct_member(member_id_foo_struct, member_flags_foo_struct, type_ids_root1.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure foo_struct member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_foo_struct = "foo_struct";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_foo_struct;
            ann_custom_root1.reset();
            CompleteMemberDetail detail_foo_struct = TypeObjectUtils::build_complete_member_detail(name_foo_struct, member_ann_builtin_foo_struct, ann_custom_root1);
            CompleteStructMember member_foo_struct = TypeObjectUtils::build_complete_struct_member(common_foo_struct, detail_foo_struct);
            TypeObjectUtils::add_complete_struct_member(member_seq_root1, member_foo_struct);
        }
        {
            return_code_root1 =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_root1);

            if (return_code_root1 != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "c Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_c = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_c;
            MemberId member_id_c = 0x00000001;
            if (EK_COMPLETE == type_ids_root1.type_identifier1()._d() || TK_NONE == type_ids_root1.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_root1.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_root1.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_root1.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_root1.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_root1.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_root1.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_root1.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_root1.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_root1.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_root1.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_root1.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_root1.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_root1.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_root1.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_c = TypeObjectUtils::build_common_struct_member(member_id_c, member_flags_c, type_ids_root1.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_root1.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_root1.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_root1.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_root1.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_root1.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_root1.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_root1.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_root1.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_root1.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_root1.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_root1.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_root1.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_root1.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_root1.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_root1.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_c = TypeObjectUtils::build_common_struct_member(member_id_c, member_flags_c, type_ids_root1.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure c member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_c = "c";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_c;
            ann_custom_root1.reset();
            CompleteMemberDetail detail_c = TypeObjectUtils::build_complete_member_detail(name_c, member_ann_builtin_c, ann_custom_root1);
            CompleteStructMember member_c = TypeObjectUtils::build_complete_struct_member(common_c, detail_c);
            TypeObjectUtils::add_complete_struct_member(member_seq_root1, member_c);
        }
        CompleteStructType struct_type_root1 = TypeObjectUtils::build_complete_struct_type(struct_flags_root1, header_root1, member_seq_root1);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_root1, type_name_root1.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "root1 already registered in TypeObjectRegistry for a different type.");
        }
        return_code_root1 =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "root1", type_ids_root1);
        if (return_code_root1 != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "root1: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_root2_type_identifier()
{
    {
        StructTypeFlag struct_flags_root2 = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_root2;
        TypeIdentifierPair type_ids_root2;
        QualifiedTypeName type_name_root2 = "root2";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_root2;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_root2;
        CompleteTypeDetail detail_root2 = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_root2, ann_custom_root2, type_name_root2.to_string());
        CompleteStructHeader header_root2;
        header_root2 = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_root2);
        CompleteStructMemberSeq member_seq_root2;
        {
            return_code_root2 =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "testing_2::foo", type_ids_root2);

            if (return_code_root2 != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_foo = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_foo;
                    TypeIdentifierPair type_ids_foo;
                    QualifiedTypeName type_name_foo = "testing_2::foo";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_foo;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_foo;
                    CompleteTypeDetail detail_foo = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_foo, ann_custom_foo, type_name_foo.to_string());
                    CompleteStructHeader header_foo;
                    header_foo = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_foo);
                    CompleteStructMemberSeq member_seq_foo;
                    {
                        return_code_foo =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_bool", type_ids_foo);

                        if (return_code_foo != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "d Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        StructMemberFlag member_flags_d = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_d;
                        MemberId member_id_d = 0x00000000;
                        if (EK_COMPLETE == type_ids_foo.type_identifier1()._d() || TK_NONE == type_ids_foo.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_foo.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_foo.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_foo.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_foo.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_foo.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_foo.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_foo.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_foo.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_foo.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_foo.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_foo.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_foo.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_foo.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_foo.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_d = TypeObjectUtils::build_common_struct_member(member_id_d, member_flags_d, type_ids_foo.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_foo.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_foo.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_foo.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_foo.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_foo.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_foo.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_foo.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_foo.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_foo.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_foo.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_foo.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_foo.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_foo.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_foo.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_foo.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_d = TypeObjectUtils::build_common_struct_member(member_id_d, member_flags_d, type_ids_foo.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure d member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_d = "d";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_d;
                        ann_custom_foo.reset();
                        CompleteMemberDetail detail_d = TypeObjectUtils::build_complete_member_detail(name_d, member_ann_builtin_d, ann_custom_foo);
                        CompleteStructMember member_d = TypeObjectUtils::build_complete_struct_member(common_d, detail_d);
                        TypeObjectUtils::add_complete_struct_member(member_seq_foo, member_d);
                    }
                    CompleteStructType struct_type_foo = TypeObjectUtils::build_complete_struct_type(struct_flags_foo, header_foo, member_seq_foo);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_foo, type_name_foo.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "testing_2::foo already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_foo =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "testing_2::foo", type_ids_foo);
                    if (return_code_foo != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "testing_2::foo: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_foo_struct = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_foo_struct;
            MemberId member_id_foo_struct = 0x00000000;
            if (EK_COMPLETE == type_ids_root2.type_identifier1()._d() || TK_NONE == type_ids_root2.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_root2.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_root2.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_root2.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_root2.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_root2.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_root2.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_root2.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_root2.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_root2.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_root2.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_root2.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_root2.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_root2.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_root2.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_foo_struct = TypeObjectUtils::build_common_struct_member(member_id_foo_struct, member_flags_foo_struct, type_ids_root2.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_root2.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_root2.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_root2.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_root2.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_root2.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_root2.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_root2.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_root2.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_root2.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_root2.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_root2.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_root2.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_root2.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_root2.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_root2.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_foo_struct = TypeObjectUtils::build_common_struct_member(member_id_foo_struct, member_flags_foo_struct, type_ids_root2.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure foo_struct member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_foo_struct = "foo_struct";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_foo_struct;
            ann_custom_root2.reset();
            CompleteMemberDetail detail_foo_struct = TypeObjectUtils::build_complete_member_detail(name_foo_struct, member_ann_builtin_foo_struct, ann_custom_root2);
            CompleteStructMember member_foo_struct = TypeObjectUtils::build_complete_struct_member(common_foo_struct, detail_foo_struct);
            TypeObjectUtils::add_complete_struct_member(member_seq_root2, member_foo_struct);
        }
        {
            return_code_root2 =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "bar", type_ids_root2);

            if (return_code_root2 != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_bar = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_bar;
                    TypeIdentifierPair type_ids_bar;
                    QualifiedTypeName type_name_bar = "bar";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_bar;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_bar;
                    CompleteTypeDetail detail_bar = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_bar, ann_custom_bar, type_name_bar.to_string());
                    CompleteStructHeader header_bar;
                    header_bar = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_bar);
                    CompleteStructMemberSeq member_seq_bar;
                    {
                        return_code_bar =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_double", type_ids_bar);

                        if (return_code_bar != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "e Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        StructMemberFlag member_flags_e = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_e;
                        MemberId member_id_e = 0x00000000;
                        if (EK_COMPLETE == type_ids_bar.type_identifier1()._d() || TK_NONE == type_ids_bar.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_bar.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_bar.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_bar.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_bar.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_bar.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_bar.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_bar.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_bar.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_bar.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_bar.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_bar.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_bar.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_bar.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_bar.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_e = TypeObjectUtils::build_common_struct_member(member_id_e, member_flags_e, type_ids_bar.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_bar.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_bar.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_bar.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_bar.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_bar.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_bar.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_bar.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_bar.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_bar.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_bar.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_bar.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_bar.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_bar.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_bar.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_bar.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_e = TypeObjectUtils::build_common_struct_member(member_id_e, member_flags_e, type_ids_bar.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure e member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_e = "e";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_e;
                        ann_custom_bar.reset();
                        CompleteMemberDetail detail_e = TypeObjectUtils::build_complete_member_detail(name_e, member_ann_builtin_e, ann_custom_bar);
                        CompleteStructMember member_e = TypeObjectUtils::build_complete_struct_member(common_e, detail_e);
                        TypeObjectUtils::add_complete_struct_member(member_seq_bar, member_e);
                    }
                    CompleteStructType struct_type_bar = TypeObjectUtils::build_complete_struct_type(struct_flags_bar, header_bar, member_seq_bar);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_bar, type_name_bar.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "bar already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_bar =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "bar", type_ids_bar);
                    if (return_code_bar != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "bar: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_bar_struct = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_bar_struct;
            MemberId member_id_bar_struct = 0x00000001;
            if (EK_COMPLETE == type_ids_root2.type_identifier1()._d() || TK_NONE == type_ids_root2.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_root2.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_root2.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_root2.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_root2.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_root2.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_root2.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_root2.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_root2.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_root2.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_root2.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_root2.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_root2.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_root2.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_root2.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_bar_struct = TypeObjectUtils::build_common_struct_member(member_id_bar_struct, member_flags_bar_struct, type_ids_root2.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_root2.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_root2.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_root2.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_root2.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_root2.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_root2.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_root2.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_root2.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_root2.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_root2.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_root2.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_root2.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_root2.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_root2.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_root2.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_bar_struct = TypeObjectUtils::build_common_struct_member(member_id_bar_struct, member_flags_bar_struct, type_ids_root2.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure bar_struct member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_bar_struct = "bar_struct";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_bar_struct;
            ann_custom_root2.reset();
            CompleteMemberDetail detail_bar_struct = TypeObjectUtils::build_complete_member_detail(name_bar_struct, member_ann_builtin_bar_struct, ann_custom_root2);
            CompleteStructMember member_bar_struct = TypeObjectUtils::build_complete_struct_member(common_bar_struct, detail_bar_struct);
            TypeObjectUtils::add_complete_struct_member(member_seq_root2, member_bar_struct);
        }
        CompleteStructType struct_type_root2 = TypeObjectUtils::build_complete_struct_type(struct_flags_root2, header_root2, member_seq_root2);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_root2, type_name_root2.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "root2 already registered in TypeObjectRegistry for a different type.");
        }
        return_code_root2 =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "root2", type_ids_root2);
        if (return_code_root2 != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "root2: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_root_type_identifier()
{
    {
        StructTypeFlag struct_flags_root = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_root;
        TypeIdentifierPair type_ids_root;
        QualifiedTypeName type_name_root = "root";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_root;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_root;
        CompleteTypeDetail detail_root = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_root, ann_custom_root, type_name_root.to_string());
        CompleteStructHeader header_root;
        header_root = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_root);
        CompleteStructMemberSeq member_seq_root;
        {
            return_code_root =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "root1", type_ids_root);

            if (return_code_root != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_root1 = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_root1;
                    TypeIdentifierPair type_ids_root1;
                    QualifiedTypeName type_name_root1 = "root1";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_root1;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_root1;
                    CompleteTypeDetail detail_root1 = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_root1, ann_custom_root1, type_name_root1.to_string());
                    CompleteStructHeader header_root1;
                    header_root1 = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_root1);
                    CompleteStructMemberSeq member_seq_root1;
                    {
                        return_code_root1 =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "testing_1::foo", type_ids_root1);

                        if (return_code_root1 != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags_foo = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code_foo;
                                TypeIdentifierPair type_ids_foo;
                                QualifiedTypeName type_name_foo = "testing_1::foo";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_foo;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_foo;
                                CompleteTypeDetail detail_foo = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_foo, ann_custom_foo, type_name_foo.to_string());
                                CompleteStructHeader header_foo;
                                header_foo = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_foo);
                                CompleteStructMemberSeq member_seq_foo;
                                {
                                    return_code_foo =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_int32_t", type_ids_foo);

                                    if (return_code_foo != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "a Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_a = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_a;
                                    MemberId member_id_a = 0x00000000;
                                    if (EK_COMPLETE == type_ids_foo.type_identifier1()._d() || TK_NONE == type_ids_foo.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_foo.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_foo.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_foo.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_foo.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_foo.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_foo.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_foo.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_foo.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_foo.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_foo.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_foo.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_foo.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_foo.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_foo.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_a = TypeObjectUtils::build_common_struct_member(member_id_a, member_flags_a, type_ids_foo.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_foo.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_foo.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_foo.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_foo.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_foo.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_foo.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_foo.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_foo.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_foo.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_foo.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_foo.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_foo.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_foo.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_foo.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_foo.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_a = TypeObjectUtils::build_common_struct_member(member_id_a, member_flags_a, type_ids_foo.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure a member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_a = "a";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_a;
                                    ann_custom_foo.reset();
                                    CompleteMemberDetail detail_a = TypeObjectUtils::build_complete_member_detail(name_a, member_ann_builtin_a, ann_custom_foo);
                                    CompleteStructMember member_a = TypeObjectUtils::build_complete_struct_member(common_a, detail_a);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_foo, member_a);
                                }
                                {
                                    return_code_foo =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_int32_t", type_ids_foo);

                                    if (return_code_foo != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "b Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_b = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_b;
                                    MemberId member_id_b = 0x00000001;
                                    if (EK_COMPLETE == type_ids_foo.type_identifier1()._d() || TK_NONE == type_ids_foo.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_foo.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_foo.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_foo.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_foo.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_foo.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_foo.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_foo.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_foo.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_foo.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_foo.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_foo.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_foo.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_foo.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_foo.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_b = TypeObjectUtils::build_common_struct_member(member_id_b, member_flags_b, type_ids_foo.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_foo.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_foo.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_foo.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_foo.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_foo.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_foo.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_foo.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_foo.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_foo.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_foo.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_foo.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_foo.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_foo.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_foo.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_foo.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_b = TypeObjectUtils::build_common_struct_member(member_id_b, member_flags_b, type_ids_foo.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure b member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_b = "b";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_b;
                                    ann_custom_foo.reset();
                                    CompleteMemberDetail detail_b = TypeObjectUtils::build_complete_member_detail(name_b, member_ann_builtin_b, ann_custom_foo);
                                    CompleteStructMember member_b = TypeObjectUtils::build_complete_struct_member(common_b, detail_b);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_foo, member_b);
                                }
                                CompleteStructType struct_type_foo = TypeObjectUtils::build_complete_struct_type(struct_flags_foo, header_foo, member_seq_foo);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type_foo, type_name_foo.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "testing_1::foo already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code_foo =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "testing_1::foo", type_ids_foo);
                                if (return_code_foo != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "testing_1::foo: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        StructMemberFlag member_flags_foo_struct = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_foo_struct;
                        MemberId member_id_foo_struct = 0x00000000;
                        if (EK_COMPLETE == type_ids_root1.type_identifier1()._d() || TK_NONE == type_ids_root1.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_root1.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_root1.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_root1.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_root1.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_root1.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_root1.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_root1.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_root1.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_root1.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_root1.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_root1.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_root1.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_root1.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_root1.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_foo_struct = TypeObjectUtils::build_common_struct_member(member_id_foo_struct, member_flags_foo_struct, type_ids_root1.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_root1.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_root1.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_root1.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_root1.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_root1.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_root1.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_root1.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_root1.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_root1.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_root1.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_root1.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_root1.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_root1.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_root1.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_root1.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_foo_struct = TypeObjectUtils::build_common_struct_member(member_id_foo_struct, member_flags_foo_struct, type_ids_root1.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure foo_struct member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_foo_struct = "foo_struct";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_foo_struct;
                        ann_custom_root1.reset();
                        CompleteMemberDetail detail_foo_struct = TypeObjectUtils::build_complete_member_detail(name_foo_struct, member_ann_builtin_foo_struct, ann_custom_root1);
                        CompleteStructMember member_foo_struct = TypeObjectUtils::build_complete_struct_member(common_foo_struct, detail_foo_struct);
                        TypeObjectUtils::add_complete_struct_member(member_seq_root1, member_foo_struct);
                    }
                    {
                        return_code_root1 =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_float", type_ids_root1);

                        if (return_code_root1 != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "c Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        StructMemberFlag member_flags_c = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_c;
                        MemberId member_id_c = 0x00000001;
                        if (EK_COMPLETE == type_ids_root1.type_identifier1()._d() || TK_NONE == type_ids_root1.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_root1.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_root1.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_root1.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_root1.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_root1.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_root1.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_root1.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_root1.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_root1.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_root1.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_root1.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_root1.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_root1.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_root1.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_c = TypeObjectUtils::build_common_struct_member(member_id_c, member_flags_c, type_ids_root1.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_root1.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_root1.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_root1.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_root1.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_root1.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_root1.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_root1.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_root1.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_root1.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_root1.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_root1.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_root1.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_root1.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_root1.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_root1.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_c = TypeObjectUtils::build_common_struct_member(member_id_c, member_flags_c, type_ids_root1.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure c member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_c = "c";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_c;
                        ann_custom_root1.reset();
                        CompleteMemberDetail detail_c = TypeObjectUtils::build_complete_member_detail(name_c, member_ann_builtin_c, ann_custom_root1);
                        CompleteStructMember member_c = TypeObjectUtils::build_complete_struct_member(common_c, detail_c);
                        TypeObjectUtils::add_complete_struct_member(member_seq_root1, member_c);
                    }
                    CompleteStructType struct_type_root1 = TypeObjectUtils::build_complete_struct_type(struct_flags_root1, header_root1, member_seq_root1);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_root1, type_name_root1.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "root1 already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_root1 =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "root1", type_ids_root1);
                    if (return_code_root1 != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "root1: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_root1 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_root1;
            MemberId member_id_var_root1 = 0x00000000;
            if (EK_COMPLETE == type_ids_root.type_identifier1()._d() || TK_NONE == type_ids_root.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_root.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_root.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_root.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_root.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_root.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_root.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_root.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_root.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_root.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_root.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_root.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_root.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_root.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_root.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_root1 = TypeObjectUtils::build_common_struct_member(member_id_var_root1, member_flags_var_root1, type_ids_root.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_root.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_root.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_root.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_root.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_root.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_root.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_root.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_root.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_root.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_root.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_root.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_root.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_root.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_root.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_root.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_root1 = TypeObjectUtils::build_common_struct_member(member_id_var_root1, member_flags_var_root1, type_ids_root.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_root1 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_root1 = "var_root1";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_root1;
            ann_custom_root.reset();
            CompleteMemberDetail detail_var_root1 = TypeObjectUtils::build_complete_member_detail(name_var_root1, member_ann_builtin_var_root1, ann_custom_root);
            CompleteStructMember member_var_root1 = TypeObjectUtils::build_complete_struct_member(common_var_root1, detail_var_root1);
            TypeObjectUtils::add_complete_struct_member(member_seq_root, member_var_root1);
        }
        {
            return_code_root =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "root2", type_ids_root);

            if (return_code_root != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_root2 = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_root2;
                    TypeIdentifierPair type_ids_root2;
                    QualifiedTypeName type_name_root2 = "root2";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_root2;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_root2;
                    CompleteTypeDetail detail_root2 = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_root2, ann_custom_root2, type_name_root2.to_string());
                    CompleteStructHeader header_root2;
                    header_root2 = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_root2);
                    CompleteStructMemberSeq member_seq_root2;
                    {
                        return_code_root2 =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "testing_2::foo", type_ids_root2);

                        if (return_code_root2 != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags_foo = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code_foo;
                                TypeIdentifierPair type_ids_foo;
                                QualifiedTypeName type_name_foo = "testing_2::foo";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_foo;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_foo;
                                CompleteTypeDetail detail_foo = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_foo, ann_custom_foo, type_name_foo.to_string());
                                CompleteStructHeader header_foo;
                                header_foo = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_foo);
                                CompleteStructMemberSeq member_seq_foo;
                                {
                                    return_code_foo =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_bool", type_ids_foo);

                                    if (return_code_foo != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "d Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_d = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_d;
                                    MemberId member_id_d = 0x00000000;
                                    if (EK_COMPLETE == type_ids_foo.type_identifier1()._d() || TK_NONE == type_ids_foo.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_foo.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_foo.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_foo.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_foo.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_foo.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_foo.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_foo.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_foo.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_foo.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_foo.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_foo.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_foo.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_foo.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_foo.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_d = TypeObjectUtils::build_common_struct_member(member_id_d, member_flags_d, type_ids_foo.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_foo.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_foo.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_foo.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_foo.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_foo.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_foo.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_foo.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_foo.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_foo.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_foo.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_foo.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_foo.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_foo.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_foo.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_foo.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_d = TypeObjectUtils::build_common_struct_member(member_id_d, member_flags_d, type_ids_foo.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure d member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_d = "d";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_d;
                                    ann_custom_foo.reset();
                                    CompleteMemberDetail detail_d = TypeObjectUtils::build_complete_member_detail(name_d, member_ann_builtin_d, ann_custom_foo);
                                    CompleteStructMember member_d = TypeObjectUtils::build_complete_struct_member(common_d, detail_d);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_foo, member_d);
                                }
                                CompleteStructType struct_type_foo = TypeObjectUtils::build_complete_struct_type(struct_flags_foo, header_foo, member_seq_foo);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type_foo, type_name_foo.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "testing_2::foo already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code_foo =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "testing_2::foo", type_ids_foo);
                                if (return_code_foo != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "testing_2::foo: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        StructMemberFlag member_flags_foo_struct = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_foo_struct;
                        MemberId member_id_foo_struct = 0x00000000;
                        if (EK_COMPLETE == type_ids_root2.type_identifier1()._d() || TK_NONE == type_ids_root2.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_root2.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_root2.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_root2.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_root2.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_root2.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_root2.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_root2.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_root2.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_root2.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_root2.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_root2.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_root2.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_root2.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_root2.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_foo_struct = TypeObjectUtils::build_common_struct_member(member_id_foo_struct, member_flags_foo_struct, type_ids_root2.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_root2.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_root2.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_root2.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_root2.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_root2.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_root2.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_root2.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_root2.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_root2.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_root2.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_root2.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_root2.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_root2.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_root2.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_root2.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_foo_struct = TypeObjectUtils::build_common_struct_member(member_id_foo_struct, member_flags_foo_struct, type_ids_root2.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure foo_struct member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_foo_struct = "foo_struct";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_foo_struct;
                        ann_custom_root2.reset();
                        CompleteMemberDetail detail_foo_struct = TypeObjectUtils::build_complete_member_detail(name_foo_struct, member_ann_builtin_foo_struct, ann_custom_root2);
                        CompleteStructMember member_foo_struct = TypeObjectUtils::build_complete_struct_member(common_foo_struct, detail_foo_struct);
                        TypeObjectUtils::add_complete_struct_member(member_seq_root2, member_foo_struct);
                    }
                    {
                        return_code_root2 =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "bar", type_ids_root2);

                        if (return_code_root2 != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags_bar = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code_bar;
                                TypeIdentifierPair type_ids_bar;
                                QualifiedTypeName type_name_bar = "bar";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_bar;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_bar;
                                CompleteTypeDetail detail_bar = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_bar, ann_custom_bar, type_name_bar.to_string());
                                CompleteStructHeader header_bar;
                                header_bar = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_bar);
                                CompleteStructMemberSeq member_seq_bar;
                                {
                                    return_code_bar =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_double", type_ids_bar);

                                    if (return_code_bar != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "e Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_e = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_e;
                                    MemberId member_id_e = 0x00000000;
                                    if (EK_COMPLETE == type_ids_bar.type_identifier1()._d() || TK_NONE == type_ids_bar.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_bar.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_bar.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_bar.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_bar.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_bar.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_bar.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_bar.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_bar.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_bar.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_bar.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_bar.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_bar.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_bar.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_bar.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_e = TypeObjectUtils::build_common_struct_member(member_id_e, member_flags_e, type_ids_bar.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_bar.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_bar.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_bar.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_bar.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_bar.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_bar.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_bar.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_bar.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_bar.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_bar.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_bar.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_bar.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_bar.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_bar.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_bar.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_e = TypeObjectUtils::build_common_struct_member(member_id_e, member_flags_e, type_ids_bar.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure e member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_e = "e";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_e;
                                    ann_custom_bar.reset();
                                    CompleteMemberDetail detail_e = TypeObjectUtils::build_complete_member_detail(name_e, member_ann_builtin_e, ann_custom_bar);
                                    CompleteStructMember member_e = TypeObjectUtils::build_complete_struct_member(common_e, detail_e);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_bar, member_e);
                                }
                                CompleteStructType struct_type_bar = TypeObjectUtils::build_complete_struct_type(struct_flags_bar, header_bar, member_seq_bar);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type_bar, type_name_bar.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "bar already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code_bar =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "bar", type_ids_bar);
                                if (return_code_bar != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "bar: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        StructMemberFlag member_flags_bar_struct = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_bar_struct;
                        MemberId member_id_bar_struct = 0x00000001;
                        if (EK_COMPLETE == type_ids_root2.type_identifier1()._d() || TK_NONE == type_ids_root2.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_root2.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_root2.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_root2.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_root2.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_root2.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_root2.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_root2.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_root2.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_root2.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_root2.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_root2.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_root2.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_root2.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_root2.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_bar_struct = TypeObjectUtils::build_common_struct_member(member_id_bar_struct, member_flags_bar_struct, type_ids_root2.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_root2.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_root2.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_root2.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_root2.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_root2.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_root2.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_root2.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_root2.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_root2.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_root2.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_root2.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_root2.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_root2.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_root2.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_root2.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_bar_struct = TypeObjectUtils::build_common_struct_member(member_id_bar_struct, member_flags_bar_struct, type_ids_root2.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure bar_struct member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_bar_struct = "bar_struct";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_bar_struct;
                        ann_custom_root2.reset();
                        CompleteMemberDetail detail_bar_struct = TypeObjectUtils::build_complete_member_detail(name_bar_struct, member_ann_builtin_bar_struct, ann_custom_root2);
                        CompleteStructMember member_bar_struct = TypeObjectUtils::build_complete_struct_member(common_bar_struct, detail_bar_struct);
                        TypeObjectUtils::add_complete_struct_member(member_seq_root2, member_bar_struct);
                    }
                    CompleteStructType struct_type_root2 = TypeObjectUtils::build_complete_struct_type(struct_flags_root2, header_root2, member_seq_root2);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_root2, type_name_root2.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "root2 already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_root2 =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "root2", type_ids_root2);
                    if (return_code_root2 != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "root2: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_root2 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_var_root2;
            MemberId member_id_var_root2 = 0x00000001;
            if (EK_COMPLETE == type_ids_root.type_identifier1()._d() || TK_NONE == type_ids_root.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_root.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_root.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_root.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_root.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_root.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_root.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_root.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_root.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_root.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_root.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_root.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_root.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_root.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_root.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_root2 = TypeObjectUtils::build_common_struct_member(member_id_var_root2, member_flags_var_root2, type_ids_root.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_root.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_root.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_root.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_root.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_root.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_root.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_root.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_root.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_root.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_root.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_root.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_root.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_root.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_root.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_root.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_root2 = TypeObjectUtils::build_common_struct_member(member_id_var_root2, member_flags_var_root2, type_ids_root.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_root2 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_root2 = "var_root2";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_root2;
            ann_custom_root.reset();
            CompleteMemberDetail detail_var_root2 = TypeObjectUtils::build_complete_member_detail(name_var_root2, member_ann_builtin_var_root2, ann_custom_root);
            CompleteStructMember member_var_root2 = TypeObjectUtils::build_complete_struct_member(common_var_root2, detail_var_root2);
            TypeObjectUtils::add_complete_struct_member(member_seq_root, member_var_root2);
        }
        CompleteStructType struct_type_root = TypeObjectUtils::build_complete_struct_type(struct_flags_root, header_root, member_seq_root);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_root, type_name_root.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "root already registered in TypeObjectRegistry for a different type.");
        }
        return_code_root =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "root", type_ids_root);
        if (return_code_root != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "root: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}

