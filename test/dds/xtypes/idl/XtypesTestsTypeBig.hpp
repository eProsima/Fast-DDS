// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file XtypesTestsTypeBig.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_XTYPESTESTSTYPEBIG_HPP_
#define _FAST_DDS_GENERATED_XTYPESTESTSTYPEBIG_HPP_

#include <cstdint>
#include <utility>
#include "XtypesTestsType1.hpp"
#include "XtypesTestsType2.hpp"
#include "XtypesTestsType3.hpp"

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(XTYPESTESTSTYPEBIG_SOURCE)
#define XTYPESTESTSTYPEBIG_DllAPI __declspec( dllexport )
#else
#define XTYPESTESTSTYPEBIG_DllAPI __declspec( dllimport )
#endif // XTYPESTESTSTYPEBIG_SOURCE
#else
#define XTYPESTESTSTYPEBIG_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define XTYPESTESTSTYPEBIG_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the structure TypeBig defined by the user in the IDL file.
 * @ingroup XtypesTestsTypeBig
 */
class TypeBig
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport TypeBig()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~TypeBig()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object TypeBig that will be copied.
     */
    eProsima_user_DllExport TypeBig(
            const TypeBig& x)
    {
                    m_dep1 = x.m_dep1;

                    m_dep2 = x.m_dep2;

                    m_dep3 = x.m_dep3;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object TypeBig that will be copied.
     */
    eProsima_user_DllExport TypeBig(
            TypeBig&& x) noexcept
    {
        m_dep1 = std::move(x.m_dep1);
        m_dep2 = std::move(x.m_dep2);
        m_dep3 = std::move(x.m_dep3);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object TypeBig that will be copied.
     */
    eProsima_user_DllExport TypeBig& operator =(
            const TypeBig& x)
    {

                    m_dep1 = x.m_dep1;

                    m_dep2 = x.m_dep2;

                    m_dep3 = x.m_dep3;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object TypeBig that will be copied.
     */
    eProsima_user_DllExport TypeBig& operator =(
            TypeBig&& x) noexcept
    {

        m_dep1 = std::move(x.m_dep1);
        m_dep2 = std::move(x.m_dep2);
        m_dep3 = std::move(x.m_dep3);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x TypeBig object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const TypeBig& x) const
    {
        return (m_dep1 == x.m_dep1 &&
           m_dep2 == x.m_dep2 &&
           m_dep3 == x.m_dep3);
    }

    /*!
     * @brief Comparison operator.
     * @param x TypeBig object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const TypeBig& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member dep1
     * @param _dep1 New value to be copied in member dep1
     */
    eProsima_user_DllExport void dep1(
            const Type1& _dep1)
    {
        m_dep1 = _dep1;
    }

    /*!
     * @brief This function moves the value in member dep1
     * @param _dep1 New value to be moved in member dep1
     */
    eProsima_user_DllExport void dep1(
            Type1&& _dep1)
    {
        m_dep1 = std::move(_dep1);
    }

    /*!
     * @brief This function returns a constant reference to member dep1
     * @return Constant reference to member dep1
     */
    eProsima_user_DllExport const Type1& dep1() const
    {
        return m_dep1;
    }

    /*!
     * @brief This function returns a reference to member dep1
     * @return Reference to member dep1
     */
    eProsima_user_DllExport Type1& dep1()
    {
        return m_dep1;
    }


    /*!
     * @brief This function copies the value in member dep2
     * @param _dep2 New value to be copied in member dep2
     */
    eProsima_user_DllExport void dep2(
            const Type2& _dep2)
    {
        m_dep2 = _dep2;
    }

    /*!
     * @brief This function moves the value in member dep2
     * @param _dep2 New value to be moved in member dep2
     */
    eProsima_user_DllExport void dep2(
            Type2&& _dep2)
    {
        m_dep2 = std::move(_dep2);
    }

    /*!
     * @brief This function returns a constant reference to member dep2
     * @return Constant reference to member dep2
     */
    eProsima_user_DllExport const Type2& dep2() const
    {
        return m_dep2;
    }

    /*!
     * @brief This function returns a reference to member dep2
     * @return Reference to member dep2
     */
    eProsima_user_DllExport Type2& dep2()
    {
        return m_dep2;
    }


    /*!
     * @brief This function copies the value in member dep3
     * @param _dep3 New value to be copied in member dep3
     */
    eProsima_user_DllExport void dep3(
            const Type3& _dep3)
    {
        m_dep3 = _dep3;
    }

    /*!
     * @brief This function moves the value in member dep3
     * @param _dep3 New value to be moved in member dep3
     */
    eProsima_user_DllExport void dep3(
            Type3&& _dep3)
    {
        m_dep3 = std::move(_dep3);
    }

    /*!
     * @brief This function returns a constant reference to member dep3
     * @return Constant reference to member dep3
     */
    eProsima_user_DllExport const Type3& dep3() const
    {
        return m_dep3;
    }

    /*!
     * @brief This function returns a reference to member dep3
     * @return Reference to member dep3
     */
    eProsima_user_DllExport Type3& dep3()
    {
        return m_dep3;
    }



private:

    Type1 m_dep1;
    Type2 m_dep2;
    Type3 m_dep3;

};

#endif // _FAST_DDS_GENERATED_XTYPESTESTSTYPEBIG_HPP_


