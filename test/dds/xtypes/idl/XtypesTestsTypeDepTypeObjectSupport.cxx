// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file XtypesTestsTypeDepTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "XtypesTestsTypeDepTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "XtypesTestsTypeDep.hpp"

#include "XtypesTestsType1.hpp"
#include "XtypesTestsType2.hpp"
#include "XtypesTestsType3.hpp"

using namespace eprosima::fastdds::dds::xtypes;

void register_XtypesTestsTypeDep_type_objects()
{
    static std::once_flag once_flag;
    std::call_once(once_flag, []()
            {
                register_Type1_type_identifier();

                register_Type2_type_identifier();

                register_Type3_type_identifier();

                register_TypeDep_type_identifier();

            });
}

void register_TypeDep_type_identifier()
{
    {
        StructTypeFlag struct_flags_TypeDep = TypeObjectUtils::build_struct_type_flag(
            eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
            false, false);
        ReturnCode_t return_code_TypeDep;
        TypeIdentifierPair type_ids_TypeDep;
        QualifiedTypeName type_name_TypeDep = "TypeDep";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_TypeDep;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_TypeDep;
        CompleteTypeDetail detail_TypeDep = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_TypeDep,
                        ann_custom_TypeDep,
                        type_name_TypeDep.to_string());
        CompleteStructHeader header_TypeDep;
        header_TypeDep = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_TypeDep);
        CompleteStructMemberSeq member_seq_TypeDep;
        {
            return_code_TypeDep =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().
                            get_type_identifiers(
                "_uint16_t", type_ids_TypeDep);

            if (return_code_TypeDep != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "index Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_index = TypeObjectUtils::build_struct_member_flag(
                eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                false, false, false, false);
            CommonStructMember common_index;
            MemberId member_id_index = 0x00000000;
            if (EK_COMPLETE == type_ids_TypeDep.type_identifier1()._d() ||
                    TK_NONE == type_ids_TypeDep.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_TypeDep.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_TypeDep.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_TypeDep.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_TypeDep.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_TypeDep.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_TypeDep.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_TypeDep.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_TypeDep.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_TypeDep.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_TypeDep.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_TypeDep.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_TypeDep.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_TypeDep.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_TypeDep.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_index = TypeObjectUtils::build_common_struct_member(member_id_index, member_flags_index,
                                type_ids_TypeDep.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_TypeDep.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_TypeDep.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_TypeDep.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_TypeDep.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_TypeDep.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_TypeDep.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_TypeDep.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_TypeDep.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_TypeDep.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_TypeDep.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_TypeDep.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_TypeDep.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_TypeDep.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_TypeDep.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_TypeDep.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_index = TypeObjectUtils::build_common_struct_member(member_id_index, member_flags_index,
                                type_ids_TypeDep.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure index member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_index = "index";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_index;
            ann_custom_TypeDep.reset();
            CompleteMemberDetail detail_index = TypeObjectUtils::build_complete_member_detail(name_index,
                            member_ann_builtin_index,
                            ann_custom_TypeDep);
            CompleteStructMember member_index =
                    TypeObjectUtils::build_complete_struct_member(common_index, detail_index);
            TypeObjectUtils::add_complete_struct_member(member_seq_TypeDep, member_index);
        }
        {
            return_code_TypeDep =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().
                            get_type_identifiers(
                "Type1", type_ids_TypeDep);

            if (return_code_TypeDep != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_Type1 = TypeObjectUtils::build_struct_type_flag(
                        eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                        false, false);
                    ReturnCode_t return_code_Type1;
                    TypeIdentifierPair type_ids_Type1;
                    QualifiedTypeName type_name_Type1 = "Type1";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Type1;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Type1;
                    CompleteTypeDetail detail_Type1 = TypeObjectUtils::build_complete_type_detail(
                        type_ann_builtin_Type1, ann_custom_Type1, type_name_Type1.to_string());
                    CompleteStructHeader header_Type1;
                    header_Type1 = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_Type1);
                    CompleteStructMemberSeq member_seq_Type1;
                    {
                        return_code_Type1 =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry()
                                        .get_type_identifiers(
                            "_uint16_t", type_ids_Type1);

                        if (return_code_Type1 != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "index Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        StructMemberFlag member_flags_index = TypeObjectUtils::build_struct_member_flag(
                            eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                        CommonStructMember common_index;
                        MemberId member_id_index = 0x00000000;
                        if (EK_COMPLETE == type_ids_Type1.type_identifier1()._d() ||
                                TK_NONE == type_ids_Type1.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_Type1.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_Type1.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_Type1.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_Type1.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_Type1.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_Type1.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_Type1.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_Type1.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_Type1.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_Type1.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_Type1.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_Type1.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_Type1.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_Type1.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_index = TypeObjectUtils::build_common_struct_member(member_id_index,
                                            member_flags_index,
                                            type_ids_Type1.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_Type1.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_Type1.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_Type1.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_Type1.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_Type1.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_Type1.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_Type1.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_Type1.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_Type1.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_Type1.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_Type1.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_Type1.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_Type1.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_Type1.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_Type1.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_index = TypeObjectUtils::build_common_struct_member(member_id_index,
                                            member_flags_index,
                                            type_ids_Type1.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure index member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_index = "index";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_index;
                        ann_custom_Type1.reset();
                        CompleteMemberDetail detail_index = TypeObjectUtils::build_complete_member_detail(name_index,
                                        member_ann_builtin_index,
                                        ann_custom_Type1);
                        CompleteStructMember member_index = TypeObjectUtils::build_complete_struct_member(common_index,
                                        detail_index);
                        TypeObjectUtils::add_complete_struct_member(member_seq_Type1, member_index);
                    }
                    CompleteStructType struct_type_Type1 = TypeObjectUtils::build_complete_struct_type(
                        struct_flags_Type1, header_Type1, member_seq_Type1);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_Type1,
                            type_name_Type1.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Type1 already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_Type1 =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().
                                    get_type_identifiers(
                        "Type1", type_ids_Type1);
                    if (return_code_Type1 != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Type1: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_type1 = TypeObjectUtils::build_struct_member_flag(
                eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                false, false, false, false);
            CommonStructMember common_var_type1;
            MemberId member_id_var_type1 = 0x00000001;
            if (EK_COMPLETE == type_ids_TypeDep.type_identifier1()._d() ||
                    TK_NONE == type_ids_TypeDep.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_TypeDep.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_TypeDep.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_TypeDep.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_TypeDep.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_TypeDep.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_TypeDep.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_TypeDep.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_TypeDep.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_TypeDep.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_TypeDep.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_TypeDep.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_TypeDep.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_TypeDep.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_TypeDep.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_type1 = TypeObjectUtils::build_common_struct_member(member_id_var_type1,
                                member_flags_var_type1,
                                type_ids_TypeDep.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_TypeDep.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_TypeDep.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_TypeDep.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_TypeDep.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_TypeDep.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_TypeDep.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_TypeDep.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_TypeDep.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_TypeDep.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_TypeDep.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_TypeDep.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_TypeDep.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_TypeDep.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_TypeDep.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_TypeDep.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_type1 = TypeObjectUtils::build_common_struct_member(member_id_var_type1,
                                member_flags_var_type1,
                                type_ids_TypeDep.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_type1 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_type1 = "var_type1";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_type1;
            ann_custom_TypeDep.reset();
            CompleteMemberDetail detail_var_type1 = TypeObjectUtils::build_complete_member_detail(name_var_type1,
                            member_ann_builtin_var_type1,
                            ann_custom_TypeDep);
            CompleteStructMember member_var_type1 = TypeObjectUtils::build_complete_struct_member(common_var_type1,
                            detail_var_type1);
            TypeObjectUtils::add_complete_struct_member(member_seq_TypeDep, member_var_type1);
        }
        {
            return_code_TypeDep =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().
                            get_type_identifiers(
                "Type2", type_ids_TypeDep);

            if (return_code_TypeDep != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_Type2 = TypeObjectUtils::build_struct_type_flag(
                        eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                        false, false);
                    ReturnCode_t return_code_Type2;
                    TypeIdentifierPair type_ids_Type2;
                    QualifiedTypeName type_name_Type2 = "Type2";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Type2;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Type2;
                    CompleteTypeDetail detail_Type2 = TypeObjectUtils::build_complete_type_detail(
                        type_ann_builtin_Type2, ann_custom_Type2, type_name_Type2.to_string());
                    CompleteStructHeader header_Type2;
                    header_Type2 = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_Type2);
                    CompleteStructMemberSeq member_seq_Type2;
                    {
                        return_code_Type2 =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry()
                                        .get_type_identifiers(
                            "_int16_t", type_ids_Type2);

                        if (return_code_Type2 != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "index Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        StructMemberFlag member_flags_index = TypeObjectUtils::build_struct_member_flag(
                            eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                        CommonStructMember common_index;
                        MemberId member_id_index = 0x00000000;
                        if (EK_COMPLETE == type_ids_Type2.type_identifier1()._d() ||
                                TK_NONE == type_ids_Type2.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_Type2.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_Type2.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_Type2.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_Type2.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_Type2.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_Type2.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_Type2.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_Type2.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_Type2.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_Type2.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_Type2.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_Type2.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_Type2.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_Type2.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_index = TypeObjectUtils::build_common_struct_member(member_id_index,
                                            member_flags_index,
                                            type_ids_Type2.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_Type2.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_Type2.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_Type2.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_Type2.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_Type2.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_Type2.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_Type2.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_Type2.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_Type2.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_Type2.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_Type2.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_Type2.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_Type2.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_Type2.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_Type2.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_index = TypeObjectUtils::build_common_struct_member(member_id_index,
                                            member_flags_index,
                                            type_ids_Type2.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure index member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_index = "index";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_index;
                        ann_custom_Type2.reset();
                        CompleteMemberDetail detail_index = TypeObjectUtils::build_complete_member_detail(name_index,
                                        member_ann_builtin_index,
                                        ann_custom_Type2);
                        CompleteStructMember member_index = TypeObjectUtils::build_complete_struct_member(common_index,
                                        detail_index);
                        TypeObjectUtils::add_complete_struct_member(member_seq_Type2, member_index);
                    }
                    CompleteStructType struct_type_Type2 = TypeObjectUtils::build_complete_struct_type(
                        struct_flags_Type2, header_Type2, member_seq_Type2);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_Type2,
                            type_name_Type2.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Type2 already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_Type2 =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().
                                    get_type_identifiers(
                        "Type2", type_ids_Type2);
                    if (return_code_Type2 != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Type2: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_type2 = TypeObjectUtils::build_struct_member_flag(
                eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                false, false, false, false);
            CommonStructMember common_var_type2;
            MemberId member_id_var_type2 = 0x00000002;
            if (EK_COMPLETE == type_ids_TypeDep.type_identifier1()._d() ||
                    TK_NONE == type_ids_TypeDep.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_TypeDep.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_TypeDep.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_TypeDep.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_TypeDep.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_TypeDep.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_TypeDep.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_TypeDep.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_TypeDep.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_TypeDep.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_TypeDep.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_TypeDep.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_TypeDep.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_TypeDep.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_TypeDep.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_type2 = TypeObjectUtils::build_common_struct_member(member_id_var_type2,
                                member_flags_var_type2,
                                type_ids_TypeDep.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_TypeDep.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_TypeDep.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_TypeDep.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_TypeDep.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_TypeDep.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_TypeDep.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_TypeDep.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_TypeDep.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_TypeDep.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_TypeDep.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_TypeDep.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_TypeDep.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_TypeDep.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_TypeDep.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_TypeDep.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_type2 = TypeObjectUtils::build_common_struct_member(member_id_var_type2,
                                member_flags_var_type2,
                                type_ids_TypeDep.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_type2 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_type2 = "var_type2";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_type2;
            ann_custom_TypeDep.reset();
            CompleteMemberDetail detail_var_type2 = TypeObjectUtils::build_complete_member_detail(name_var_type2,
                            member_ann_builtin_var_type2,
                            ann_custom_TypeDep);
            CompleteStructMember member_var_type2 = TypeObjectUtils::build_complete_struct_member(common_var_type2,
                            detail_var_type2);
            TypeObjectUtils::add_complete_struct_member(member_seq_TypeDep, member_var_type2);
        }
        {
            return_code_TypeDep =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().
                            get_type_identifiers(
                "Type3", type_ids_TypeDep);

            if (return_code_TypeDep != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_Type3 = TypeObjectUtils::build_struct_type_flag(
                        eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                        false, false);
                    ReturnCode_t return_code_Type3;
                    TypeIdentifierPair type_ids_Type3;
                    QualifiedTypeName type_name_Type3 = "Type3";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Type3;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Type3;
                    CompleteTypeDetail detail_Type3 = TypeObjectUtils::build_complete_type_detail(
                        type_ann_builtin_Type3, ann_custom_Type3, type_name_Type3.to_string());
                    CompleteStructHeader header_Type3;
                    header_Type3 = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_Type3);
                    CompleteStructMemberSeq member_seq_Type3;
                    {
                        return_code_Type3 =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry()
                                        .get_type_identifiers(
                            "_int32_t", type_ids_Type3);

                        if (return_code_Type3 != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "index Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        StructMemberFlag member_flags_index = TypeObjectUtils::build_struct_member_flag(
                            eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                        CommonStructMember common_index;
                        MemberId member_id_index = 0x00000000;
                        if (EK_COMPLETE == type_ids_Type3.type_identifier1()._d() ||
                                TK_NONE == type_ids_Type3.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_Type3.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_Type3.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_Type3.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_Type3.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_Type3.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_Type3.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_Type3.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_Type3.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_Type3.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_Type3.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_Type3.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_Type3.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_Type3.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_Type3.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_index = TypeObjectUtils::build_common_struct_member(member_id_index,
                                            member_flags_index,
                                            type_ids_Type3.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_Type3.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_Type3.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_Type3.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_Type3.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_Type3.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_Type3.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_Type3.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_Type3.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_Type3.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_Type3.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_Type3.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_Type3.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_Type3.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_Type3.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_Type3.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_index = TypeObjectUtils::build_common_struct_member(member_id_index,
                                            member_flags_index,
                                            type_ids_Type3.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure index member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_index = "index";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_index;
                        ann_custom_Type3.reset();
                        CompleteMemberDetail detail_index = TypeObjectUtils::build_complete_member_detail(name_index,
                                        member_ann_builtin_index,
                                        ann_custom_Type3);
                        CompleteStructMember member_index = TypeObjectUtils::build_complete_struct_member(common_index,
                                        detail_index);
                        TypeObjectUtils::add_complete_struct_member(member_seq_Type3, member_index);
                    }
                    CompleteStructType struct_type_Type3 = TypeObjectUtils::build_complete_struct_type(
                        struct_flags_Type3, header_Type3, member_seq_Type3);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_Type3,
                            type_name_Type3.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Type3 already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_Type3 =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().
                                    get_type_identifiers(
                        "Type3", type_ids_Type3);
                    if (return_code_Type3 != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Type3: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_var_type3 = TypeObjectUtils::build_struct_member_flag(
                eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                false, false, false, false);
            CommonStructMember common_var_type3;
            MemberId member_id_var_type3 = 0x00000003;
            if (EK_COMPLETE == type_ids_TypeDep.type_identifier1()._d() ||
                    TK_NONE == type_ids_TypeDep.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_TypeDep.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_TypeDep.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_TypeDep.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_TypeDep.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_TypeDep.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_TypeDep.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_TypeDep.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_TypeDep.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_TypeDep.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_TypeDep.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_TypeDep.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_TypeDep.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_TypeDep.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_TypeDep.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_var_type3 = TypeObjectUtils::build_common_struct_member(member_id_var_type3,
                                member_flags_var_type3,
                                type_ids_TypeDep.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_TypeDep.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_TypeDep.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_TypeDep.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_TypeDep.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_TypeDep.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_TypeDep.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_TypeDep.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_TypeDep.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_TypeDep.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_TypeDep.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_TypeDep.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_TypeDep.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_TypeDep.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_TypeDep.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_TypeDep.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_var_type3 = TypeObjectUtils::build_common_struct_member(member_id_var_type3,
                                member_flags_var_type3,
                                type_ids_TypeDep.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure var_type3 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_var_type3 = "var_type3";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_var_type3;
            ann_custom_TypeDep.reset();
            CompleteMemberDetail detail_var_type3 = TypeObjectUtils::build_complete_member_detail(name_var_type3,
                            member_ann_builtin_var_type3,
                            ann_custom_TypeDep);
            CompleteStructMember member_var_type3 = TypeObjectUtils::build_complete_struct_member(common_var_type3,
                            detail_var_type3);
            TypeObjectUtils::add_complete_struct_member(member_seq_TypeDep, member_var_type3);
        }
        CompleteStructType struct_type_TypeDep = TypeObjectUtils::build_complete_struct_type(struct_flags_TypeDep,
                        header_TypeDep,
                        member_seq_TypeDep);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_TypeDep,
                type_name_TypeDep.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "TypeDep already registered in TypeObjectRegistry for a different type.");
        }
        return_code_TypeDep =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().
                        get_type_identifiers(
            "TypeDep", type_ids_TypeDep);
        if (return_code_TypeDep != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "TypeDep: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
