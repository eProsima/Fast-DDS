// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ContentFilterTestTypePubSubTypes.h
 * This header file contains the declaration of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#ifndef _FAST_DDS_GENERATED_CONTENTFILTERTESTTYPE_PUBSUBTYPES_H_
#define _FAST_DDS_GENERATED_CONTENTFILTERTESTTYPE_PUBSUBTYPES_H_

#include <fastdds/dds/topic/TopicDataType.hpp>
#include <fastrtps/utils/md5.h>
#include <fastrtps/utils/data_sizeof.hpp>

#include "ContentFilterTestType.h"

#if !defined(GEN_API_VER) || (GEN_API_VER != 1)
#error \
    Generated ContentFilterTestType is not compatible with current installed Fast DDS. Please, regenerate it with fastddsgen.
#endif  // GEN_API_VER




namespace detail {

    template<typename Tag, typename Tag::type M>
    struct StructType_rob
    {
        friend typename Tag::type get(
                Tag)
        {
            return M;
        }
    };

    struct StructType_f
    {
        typedef Material StructType::* type;
        friend type get(
                StructType_f);
    };

    template struct StructType_rob<StructType_f, &StructType::m_enum2_field>;
}

/*!
 * @brief This class represents the TopicDataType of the type StructType defined by the user in the IDL file.
 * @ingroup CONTENTFILTERTESTTYPE
 */
class StructTypePubSubType : public eprosima::fastdds::dds::TopicDataType
{
public:

    typedef StructType type;

    eProsima_user_DllExport StructTypePubSubType();

    eProsima_user_DllExport virtual ~StructTypePubSubType() override;

    eProsima_user_DllExport virtual bool serialize(
            void* data,
            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override;

    eProsima_user_DllExport virtual bool deserialize(
            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
            void* data) override;

    eProsima_user_DllExport virtual std::function<uint32_t()> getSerializedSizeProvider(
            void* data) override;

    eProsima_user_DllExport virtual bool getKey(
            void* data,
            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
            bool force_md5 = false) override;

    eProsima_user_DllExport virtual void* createData() override;

    eProsima_user_DllExport virtual void deleteData(
            void* data) override;

#ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
    eProsima_user_DllExport inline bool is_bounded() const override
    {
        return false;
    }

#endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

#ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
    eProsima_user_DllExport inline bool is_plain() const override
    {
        return 336ULL == eprosima::fastrtps::size_of_<StructType, detail::StructType_f, Material>();
    }

#endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

#ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
    eProsima_user_DllExport inline bool construct_sample(
            void* memory) const override
    {
        (void)memory;
        return false;
    }

#endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

    MD5 m_md5;
    unsigned char* m_keyBuffer;
};



namespace detail {

    template<typename Tag, typename Tag::type M>
    struct ContentFilterTestType_rob
    {
        friend typename Tag::type get(
                Tag)
        {
            return M;
        }
    };

    struct ContentFilterTestType_f
    {
        typedef std::vector<StructType> ContentFilterTestType::* type;
        friend type get(
                ContentFilterTestType_f);
    };

    template struct ContentFilterTestType_rob<ContentFilterTestType_f, &ContentFilterTestType::m_unbounded_sequence_struct_field>;
}

/*!
 * @brief This class represents the TopicDataType of the type ContentFilterTestType defined by the user in the IDL file.
 * @ingroup CONTENTFILTERTESTTYPE
 */
class ContentFilterTestTypePubSubType : public eprosima::fastdds::dds::TopicDataType
{
public:

    typedef ContentFilterTestType type;

    eProsima_user_DllExport ContentFilterTestTypePubSubType();

    eProsima_user_DllExport virtual ~ContentFilterTestTypePubSubType() override;

    eProsima_user_DllExport virtual bool serialize(
            void* data,
            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override;

    eProsima_user_DllExport virtual bool deserialize(
            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
            void* data) override;

    eProsima_user_DllExport virtual std::function<uint32_t()> getSerializedSizeProvider(
            void* data) override;

    eProsima_user_DllExport virtual bool getKey(
            void* data,
            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
            bool force_md5 = false) override;

    eProsima_user_DllExport virtual void* createData() override;

    eProsima_user_DllExport virtual void deleteData(
            void* data) override;

#ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
    eProsima_user_DllExport inline bool is_bounded() const override
    {
        return false;
    }

#endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

#ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
    eProsima_user_DllExport inline bool is_plain() const override
    {
        return 72456ULL == eprosima::fastrtps::size_of_<ContentFilterTestType, detail::ContentFilterTestType_f, std::vector<StructType>>();
    }

#endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

#ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
    eProsima_user_DllExport inline bool construct_sample(
            void* memory) const override
    {
        (void)memory;
        return false;
    }

#endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

    MD5 m_md5;
    unsigned char* m_keyBuffer;
};

#endif // _FAST_DDS_GENERATED_CONTENTFILTERTESTTYPE_PUBSUBTYPES_H_