// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file inheritance_structTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "inheritance_structTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "inheritance_struct.hpp"


using namespace eprosima::fastdds::dds::xtypes;

// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_GreatgrandfatherStruct_type_identifier(
        TypeIdentifierPair& type_ids_GreatgrandfatherStruct)
{

    ReturnCode_t return_code_GreatgrandfatherStruct {eprosima::fastdds::dds::RETCODE_OK};
    return_code_GreatgrandfatherStruct =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "GreatgrandfatherStruct", type_ids_GreatgrandfatherStruct);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_GreatgrandfatherStruct)
    {
        StructTypeFlag struct_flags_GreatgrandfatherStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_GreatgrandfatherStruct = "GreatgrandfatherStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_GreatgrandfatherStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_GreatgrandfatherStruct;
        CompleteTypeDetail detail_GreatgrandfatherStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_GreatgrandfatherStruct, ann_custom_GreatgrandfatherStruct, type_name_GreatgrandfatherStruct.to_string());
        CompleteStructHeader header_GreatgrandfatherStruct;
        header_GreatgrandfatherStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_GreatgrandfatherStruct);
        CompleteStructMemberSeq member_seq_GreatgrandfatherStruct;
        {
            TypeIdentifierPair type_ids_greatgrandfather;
            ReturnCode_t return_code_greatgrandfather {eprosima::fastdds::dds::RETCODE_OK};
            return_code_greatgrandfather =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_greatgrandfather);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_greatgrandfather)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "greatgrandfather Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_greatgrandfather = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_greatgrandfather = 0x00000000;
            bool common_greatgrandfather_ec {false};
            CommonStructMember common_greatgrandfather {TypeObjectUtils::build_common_struct_member(member_id_greatgrandfather, member_flags_greatgrandfather, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_greatgrandfather, common_greatgrandfather_ec))};
            if (!common_greatgrandfather_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure greatgrandfather member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_greatgrandfather = "greatgrandfather";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_greatgrandfather;
            ann_custom_GreatgrandfatherStruct.reset();
            CompleteMemberDetail detail_greatgrandfather = TypeObjectUtils::build_complete_member_detail(name_greatgrandfather, member_ann_builtin_greatgrandfather, ann_custom_GreatgrandfatherStruct);
            CompleteStructMember member_greatgrandfather = TypeObjectUtils::build_complete_struct_member(common_greatgrandfather, detail_greatgrandfather);
            TypeObjectUtils::add_complete_struct_member(member_seq_GreatgrandfatherStruct, member_greatgrandfather);
        }
        CompleteStructType struct_type_GreatgrandfatherStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_GreatgrandfatherStruct, header_GreatgrandfatherStruct, member_seq_GreatgrandfatherStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_GreatgrandfatherStruct, type_name_GreatgrandfatherStruct.to_string(), type_ids_GreatgrandfatherStruct))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "GreatgrandfatherStruct already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_GrandfatherStruct_type_identifier(
        TypeIdentifierPair& type_ids_GrandfatherStruct)
{

    ReturnCode_t return_code_GrandfatherStruct {eprosima::fastdds::dds::RETCODE_OK};
    return_code_GrandfatherStruct =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "GrandfatherStruct", type_ids_GrandfatherStruct);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_GrandfatherStruct)
    {
        StructTypeFlag struct_flags_GrandfatherStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        return_code_GrandfatherStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "GreatgrandfatherStruct", type_ids_GrandfatherStruct);

        if (return_code_GrandfatherStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
::register_GreatgrandfatherStruct_type_identifier(type_ids_GrandfatherStruct);
        }
        QualifiedTypeName type_name_GrandfatherStruct = "GrandfatherStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_GrandfatherStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_GrandfatherStruct;
        CompleteTypeDetail detail_GrandfatherStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_GrandfatherStruct, ann_custom_GrandfatherStruct, type_name_GrandfatherStruct.to_string());
        CompleteStructHeader header_GrandfatherStruct;
        if (EK_COMPLETE == type_ids_GrandfatherStruct.type_identifier1()._d())
        {
            header_GrandfatherStruct = TypeObjectUtils::build_complete_struct_header(type_ids_GrandfatherStruct.type_identifier1(), detail_GrandfatherStruct);
        }
        else if (EK_COMPLETE == type_ids_GrandfatherStruct.type_identifier2()._d())
        {
            header_GrandfatherStruct = TypeObjectUtils::build_complete_struct_header(type_ids_GrandfatherStruct.type_identifier2(), detail_GrandfatherStruct);
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "GrandfatherStruct Structure: base_type TypeIdentifier registered in TypeObjectRegistry is inconsistent.");
            return;
        }
        CompleteStructMemberSeq member_seq_GrandfatherStruct;
        {
            TypeIdentifierPair type_ids_grandfather;
            ReturnCode_t return_code_grandfather {eprosima::fastdds::dds::RETCODE_OK};
            return_code_grandfather =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_grandfather);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_grandfather)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "grandfather Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_grandfather = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_grandfather = 0x00000001;
            bool common_grandfather_ec {false};
            CommonStructMember common_grandfather {TypeObjectUtils::build_common_struct_member(member_id_grandfather, member_flags_grandfather, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_grandfather, common_grandfather_ec))};
            if (!common_grandfather_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure grandfather member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_grandfather = "grandfather";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_grandfather;
            ann_custom_GrandfatherStruct.reset();
            CompleteMemberDetail detail_grandfather = TypeObjectUtils::build_complete_member_detail(name_grandfather, member_ann_builtin_grandfather, ann_custom_GrandfatherStruct);
            CompleteStructMember member_grandfather = TypeObjectUtils::build_complete_struct_member(common_grandfather, detail_grandfather);
            TypeObjectUtils::add_complete_struct_member(member_seq_GrandfatherStruct, member_grandfather);
        }
        CompleteStructType struct_type_GrandfatherStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_GrandfatherStruct, header_GrandfatherStruct, member_seq_GrandfatherStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_GrandfatherStruct, type_name_GrandfatherStruct.to_string(), type_ids_GrandfatherStruct))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "GrandfatherStruct already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_FatherStruct_type_identifier(
        TypeIdentifierPair& type_ids_FatherStruct)
{

    ReturnCode_t return_code_FatherStruct {eprosima::fastdds::dds::RETCODE_OK};
    return_code_FatherStruct =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "FatherStruct", type_ids_FatherStruct);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_FatherStruct)
    {
        StructTypeFlag struct_flags_FatherStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        return_code_FatherStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "GrandfatherStruct", type_ids_FatherStruct);

        if (return_code_FatherStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
::register_GrandfatherStruct_type_identifier(type_ids_FatherStruct);
        }
        QualifiedTypeName type_name_FatherStruct = "FatherStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_FatherStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_FatherStruct;
        CompleteTypeDetail detail_FatherStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_FatherStruct, ann_custom_FatherStruct, type_name_FatherStruct.to_string());
        CompleteStructHeader header_FatherStruct;
        if (EK_COMPLETE == type_ids_FatherStruct.type_identifier1()._d())
        {
            header_FatherStruct = TypeObjectUtils::build_complete_struct_header(type_ids_FatherStruct.type_identifier1(), detail_FatherStruct);
        }
        else if (EK_COMPLETE == type_ids_FatherStruct.type_identifier2()._d())
        {
            header_FatherStruct = TypeObjectUtils::build_complete_struct_header(type_ids_FatherStruct.type_identifier2(), detail_FatherStruct);
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "FatherStruct Structure: base_type TypeIdentifier registered in TypeObjectRegistry is inconsistent.");
            return;
        }
        CompleteStructMemberSeq member_seq_FatherStruct;
        {
            TypeIdentifierPair type_ids_father;
            ReturnCode_t return_code_father {eprosima::fastdds::dds::RETCODE_OK};
            return_code_father =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_father);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_father)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "father Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_father = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_father = 0x00000002;
            bool common_father_ec {false};
            CommonStructMember common_father {TypeObjectUtils::build_common_struct_member(member_id_father, member_flags_father, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_father, common_father_ec))};
            if (!common_father_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure father member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_father = "father";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_father;
            ann_custom_FatherStruct.reset();
            CompleteMemberDetail detail_father = TypeObjectUtils::build_complete_member_detail(name_father, member_ann_builtin_father, ann_custom_FatherStruct);
            CompleteStructMember member_father = TypeObjectUtils::build_complete_struct_member(common_father, detail_father);
            TypeObjectUtils::add_complete_struct_member(member_seq_FatherStruct, member_father);
        }
        CompleteStructType struct_type_FatherStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_FatherStruct, header_FatherStruct, member_seq_FatherStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_FatherStruct, type_name_FatherStruct.to_string(), type_ids_FatherStruct))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "FatherStruct already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_SonStruct_type_identifier(
        TypeIdentifierPair& type_ids_SonStruct)
{

    ReturnCode_t return_code_SonStruct {eprosima::fastdds::dds::RETCODE_OK};
    return_code_SonStruct =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "SonStruct", type_ids_SonStruct);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_SonStruct)
    {
        StructTypeFlag struct_flags_SonStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        return_code_SonStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "FatherStruct", type_ids_SonStruct);

        if (return_code_SonStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
::register_FatherStruct_type_identifier(type_ids_SonStruct);
        }
        QualifiedTypeName type_name_SonStruct = "SonStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SonStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SonStruct;
        CompleteTypeDetail detail_SonStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SonStruct, ann_custom_SonStruct, type_name_SonStruct.to_string());
        CompleteStructHeader header_SonStruct;
        if (EK_COMPLETE == type_ids_SonStruct.type_identifier1()._d())
        {
            header_SonStruct = TypeObjectUtils::build_complete_struct_header(type_ids_SonStruct.type_identifier1(), detail_SonStruct);
        }
        else if (EK_COMPLETE == type_ids_SonStruct.type_identifier2()._d())
        {
            header_SonStruct = TypeObjectUtils::build_complete_struct_header(type_ids_SonStruct.type_identifier2(), detail_SonStruct);
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SonStruct Structure: base_type TypeIdentifier registered in TypeObjectRegistry is inconsistent.");
            return;
        }
        CompleteStructMemberSeq member_seq_SonStruct;
        {
            TypeIdentifierPair type_ids_son;
            ReturnCode_t return_code_son {eprosima::fastdds::dds::RETCODE_OK};
            return_code_son =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_son);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_son)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "son Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_son = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_son = 0x00000003;
            bool common_son_ec {false};
            CommonStructMember common_son {TypeObjectUtils::build_common_struct_member(member_id_son, member_flags_son, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_son, common_son_ec))};
            if (!common_son_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure son member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_son = "son";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_son;
            ann_custom_SonStruct.reset();
            CompleteMemberDetail detail_son = TypeObjectUtils::build_complete_member_detail(name_son, member_ann_builtin_son, ann_custom_SonStruct);
            CompleteStructMember member_son = TypeObjectUtils::build_complete_struct_member(common_son, detail_son);
            TypeObjectUtils::add_complete_struct_member(member_seq_SonStruct, member_son);
        }
        CompleteStructType struct_type_SonStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_SonStruct, header_SonStruct, member_seq_SonStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SonStruct, type_name_SonStruct.to_string(), type_ids_SonStruct))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SonStruct already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_GrandsonStruct_type_identifier(
        TypeIdentifierPair& type_ids_GrandsonStruct)
{

    ReturnCode_t return_code_GrandsonStruct {eprosima::fastdds::dds::RETCODE_OK};
    return_code_GrandsonStruct =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "GrandsonStruct", type_ids_GrandsonStruct);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_GrandsonStruct)
    {
        StructTypeFlag struct_flags_GrandsonStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        return_code_GrandsonStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SonStruct", type_ids_GrandsonStruct);

        if (return_code_GrandsonStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
::register_SonStruct_type_identifier(type_ids_GrandsonStruct);
        }
        QualifiedTypeName type_name_GrandsonStruct = "GrandsonStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_GrandsonStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_GrandsonStruct;
        CompleteTypeDetail detail_GrandsonStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_GrandsonStruct, ann_custom_GrandsonStruct, type_name_GrandsonStruct.to_string());
        CompleteStructHeader header_GrandsonStruct;
        if (EK_COMPLETE == type_ids_GrandsonStruct.type_identifier1()._d())
        {
            header_GrandsonStruct = TypeObjectUtils::build_complete_struct_header(type_ids_GrandsonStruct.type_identifier1(), detail_GrandsonStruct);
        }
        else if (EK_COMPLETE == type_ids_GrandsonStruct.type_identifier2()._d())
        {
            header_GrandsonStruct = TypeObjectUtils::build_complete_struct_header(type_ids_GrandsonStruct.type_identifier2(), detail_GrandsonStruct);
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "GrandsonStruct Structure: base_type TypeIdentifier registered in TypeObjectRegistry is inconsistent.");
            return;
        }
        CompleteStructMemberSeq member_seq_GrandsonStruct;
        {
            TypeIdentifierPair type_ids_grandson;
            ReturnCode_t return_code_grandson {eprosima::fastdds::dds::RETCODE_OK};
            return_code_grandson =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_grandson);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_grandson)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "grandson Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_grandson = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_grandson = 0x00000004;
            bool common_grandson_ec {false};
            CommonStructMember common_grandson {TypeObjectUtils::build_common_struct_member(member_id_grandson, member_flags_grandson, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_grandson, common_grandson_ec))};
            if (!common_grandson_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure grandson member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_grandson = "grandson";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_grandson;
            ann_custom_GrandsonStruct.reset();
            CompleteMemberDetail detail_grandson = TypeObjectUtils::build_complete_member_detail(name_grandson, member_ann_builtin_grandson, ann_custom_GrandsonStruct);
            CompleteStructMember member_grandson = TypeObjectUtils::build_complete_struct_member(common_grandson, detail_grandson);
            TypeObjectUtils::add_complete_struct_member(member_seq_GrandsonStruct, member_grandson);
        }
        CompleteStructType struct_type_GrandsonStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_GrandsonStruct, header_GrandsonStruct, member_seq_GrandsonStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_GrandsonStruct, type_name_GrandsonStruct.to_string(), type_ids_GrandsonStruct))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "GrandsonStruct already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_inheritance_struct_type_identifier(
        TypeIdentifierPair& type_ids_inheritance_struct)
{

    ReturnCode_t return_code_inheritance_struct {eprosima::fastdds::dds::RETCODE_OK};
    return_code_inheritance_struct =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "inheritance_struct", type_ids_inheritance_struct);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_inheritance_struct)
    {
        StructTypeFlag struct_flags_inheritance_struct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        return_code_inheritance_struct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "GrandsonStruct", type_ids_inheritance_struct);

        if (return_code_inheritance_struct != eprosima::fastdds::dds::RETCODE_OK)
        {
::register_GrandsonStruct_type_identifier(type_ids_inheritance_struct);
        }
        QualifiedTypeName type_name_inheritance_struct = "inheritance_struct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_inheritance_struct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_inheritance_struct;
        CompleteTypeDetail detail_inheritance_struct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_inheritance_struct, ann_custom_inheritance_struct, type_name_inheritance_struct.to_string());
        CompleteStructHeader header_inheritance_struct;
        if (EK_COMPLETE == type_ids_inheritance_struct.type_identifier1()._d())
        {
            header_inheritance_struct = TypeObjectUtils::build_complete_struct_header(type_ids_inheritance_struct.type_identifier1(), detail_inheritance_struct);
        }
        else if (EK_COMPLETE == type_ids_inheritance_struct.type_identifier2()._d())
        {
            header_inheritance_struct = TypeObjectUtils::build_complete_struct_header(type_ids_inheritance_struct.type_identifier2(), detail_inheritance_struct);
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "inheritance_struct Structure: base_type TypeIdentifier registered in TypeObjectRegistry is inconsistent.");
            return;
        }
        CompleteStructMemberSeq member_seq_inheritance_struct;
        {
            TypeIdentifierPair type_ids_value;
            ReturnCode_t return_code_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "value Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_value = 0x00000005;
            bool common_value_ec {false};
            CommonStructMember common_value {TypeObjectUtils::build_common_struct_member(member_id_value, member_flags_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, common_value_ec))};
            if (!common_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_value = "value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_value;
            ann_custom_inheritance_struct.reset();
            CompleteMemberDetail detail_value = TypeObjectUtils::build_complete_member_detail(name_value, member_ann_builtin_value, ann_custom_inheritance_struct);
            CompleteStructMember member_value = TypeObjectUtils::build_complete_struct_member(common_value, detail_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_inheritance_struct, member_value);
        }
        CompleteStructType struct_type_inheritance_struct = TypeObjectUtils::build_complete_struct_type(struct_flags_inheritance_struct, header_inheritance_struct, member_seq_inheritance_struct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_inheritance_struct, type_name_inheritance_struct.to_string(), type_ids_inheritance_struct))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "inheritance_struct already registered in TypeObjectRegistry for a different type.");
        }
    }
}

