// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file key_structTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "key_structTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "key_struct.hpp"


using namespace eprosima::fastdds::dds::xtypes;

// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_key_struct_type_identifier(
        TypeIdentifierPair& type_ids_key_struct)
{

    ReturnCode_t return_code_key_struct {eprosima::fastdds::dds::RETCODE_OK};
    return_code_key_struct =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "key_struct", type_ids_key_struct);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_key_struct)
    {
        StructTypeFlag struct_flags_key_struct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_key_struct = "key_struct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_key_struct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_key_struct;
        CompleteTypeDetail detail_key_struct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_key_struct, ann_custom_key_struct, type_name_key_struct.to_string());
        CompleteStructHeader header_key_struct;
        header_key_struct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_key_struct);
        CompleteStructMemberSeq member_seq_key_struct;
        {
            TypeIdentifierPair type_ids_small_num;
            ReturnCode_t return_code_small_num {eprosima::fastdds::dds::RETCODE_OK};
            return_code_small_num =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int16_t", type_ids_small_num);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_small_num)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "small_num Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_small_num = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_small_num = 0x00000000;
            bool common_small_num_ec {false};
            CommonStructMember common_small_num {TypeObjectUtils::build_common_struct_member(member_id_small_num, member_flags_small_num, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_small_num, common_small_num_ec))};
            if (!common_small_num_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure small_num member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_small_num = "small_num";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_small_num;
            ann_custom_key_struct.reset();
            CompleteMemberDetail detail_small_num = TypeObjectUtils::build_complete_member_detail(name_small_num, member_ann_builtin_small_num, ann_custom_key_struct);
            CompleteStructMember member_small_num = TypeObjectUtils::build_complete_struct_member(common_small_num, detail_small_num);
            TypeObjectUtils::add_complete_struct_member(member_seq_key_struct, member_small_num);
        }
        {
            TypeIdentifierPair type_ids_big_num;
            ReturnCode_t return_code_big_num {eprosima::fastdds::dds::RETCODE_OK};
            return_code_big_num =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_big_num);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_big_num)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "big_num Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_big_num = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, true, false);
            MemberId member_id_big_num = 0x00000001;
            bool common_big_num_ec {false};
            CommonStructMember common_big_num {TypeObjectUtils::build_common_struct_member(member_id_big_num, member_flags_big_num, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_big_num, common_big_num_ec))};
            if (!common_big_num_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure big_num member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_big_num = "big_num";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_big_num;
            ann_custom_key_struct.reset();
            AppliedAnnotationSeq tmp_ann_custom_big_num;
            eprosima::fastcdr::optional<std::string> unit_big_num;
            eprosima::fastcdr::optional<AnnotationParameterValue> min_big_num;
            eprosima::fastcdr::optional<AnnotationParameterValue> max_big_num;
            eprosima::fastcdr::optional<std::string> hash_id_big_num;
            if (unit_big_num.has_value() || min_big_num.has_value() || max_big_num.has_value() || hash_id_big_num.has_value())
            {
                member_ann_builtin_big_num = TypeObjectUtils::build_applied_builtin_member_annotations(unit_big_num, min_big_num, max_big_num, hash_id_big_num);
            }
            if (!tmp_ann_custom_big_num.empty())
            {
                ann_custom_key_struct = tmp_ann_custom_big_num;
            }
            CompleteMemberDetail detail_big_num = TypeObjectUtils::build_complete_member_detail(name_big_num, member_ann_builtin_big_num, ann_custom_key_struct);
            CompleteStructMember member_big_num = TypeObjectUtils::build_complete_struct_member(common_big_num, detail_big_num);
            TypeObjectUtils::add_complete_struct_member(member_seq_key_struct, member_big_num);
        }
        {
            TypeIdentifierPair type_ids_huge_num;
            ReturnCode_t return_code_huge_num {eprosima::fastdds::dds::RETCODE_OK};
            return_code_huge_num =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids_huge_num);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_huge_num)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "huge_num Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_huge_num = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, true, false);
            MemberId member_id_huge_num = 0x00000002;
            bool common_huge_num_ec {false};
            CommonStructMember common_huge_num {TypeObjectUtils::build_common_struct_member(member_id_huge_num, member_flags_huge_num, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_huge_num, common_huge_num_ec))};
            if (!common_huge_num_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure huge_num member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_huge_num = "huge_num";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_huge_num;
            ann_custom_key_struct.reset();
            AppliedAnnotationSeq tmp_ann_custom_huge_num;
            eprosima::fastcdr::optional<std::string> unit_huge_num;
            eprosima::fastcdr::optional<AnnotationParameterValue> min_huge_num;
            eprosima::fastcdr::optional<AnnotationParameterValue> max_huge_num;
            eprosima::fastcdr::optional<std::string> hash_id_huge_num;
            if (unit_huge_num.has_value() || min_huge_num.has_value() || max_huge_num.has_value() || hash_id_huge_num.has_value())
            {
                member_ann_builtin_huge_num = TypeObjectUtils::build_applied_builtin_member_annotations(unit_huge_num, min_huge_num, max_huge_num, hash_id_huge_num);
            }
            if (!tmp_ann_custom_huge_num.empty())
            {
                ann_custom_key_struct = tmp_ann_custom_huge_num;
            }
            CompleteMemberDetail detail_huge_num = TypeObjectUtils::build_complete_member_detail(name_huge_num, member_ann_builtin_huge_num, ann_custom_key_struct);
            CompleteStructMember member_huge_num = TypeObjectUtils::build_complete_struct_member(common_huge_num, detail_huge_num);
            TypeObjectUtils::add_complete_struct_member(member_seq_key_struct, member_huge_num);
        }
        CompleteStructType struct_type_key_struct = TypeObjectUtils::build_complete_struct_type(struct_flags_key_struct, header_key_struct, member_seq_key_struct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_key_struct, type_name_key_struct.to_string(), type_ids_key_struct))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "key_struct already registered in TypeObjectRegistry for a different type.");
        }
    }
}

