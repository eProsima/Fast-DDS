// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file multi_array_struct.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__MULTI_ARRAY_STRUCT_HPP
#define FAST_DDS_GENERATED__MULTI_ARRAY_STRUCT_HPP

#include <array>
#include <cstdint>
#include <utility>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(MULTI_ARRAY_STRUCT_SOURCE)
#define MULTI_ARRAY_STRUCT_DllAPI __declspec( dllexport )
#else
#define MULTI_ARRAY_STRUCT_DllAPI __declspec( dllimport )
#endif // MULTI_ARRAY_STRUCT_SOURCE
#else
#define MULTI_ARRAY_STRUCT_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define MULTI_ARRAY_STRUCT_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the structure ColorAmount defined by the user in the IDL file.
 * @ingroup multi_array_struct
 */
class ColorAmount
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ColorAmount()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ColorAmount()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ColorAmount that will be copied.
     */
    eProsima_user_DllExport ColorAmount(
            const ColorAmount& x)
    {
                    m_red = x.m_red;

                    m_green = x.m_green;

                    m_blue = x.m_blue;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ColorAmount that will be copied.
     */
    eProsima_user_DllExport ColorAmount(
            ColorAmount&& x) noexcept
    {
        m_red = x.m_red;
        m_green = x.m_green;
        m_blue = x.m_blue;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ColorAmount that will be copied.
     */
    eProsima_user_DllExport ColorAmount& operator =(
            const ColorAmount& x)
    {

                    m_red = x.m_red;

                    m_green = x.m_green;

                    m_blue = x.m_blue;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ColorAmount that will be copied.
     */
    eProsima_user_DllExport ColorAmount& operator =(
            ColorAmount&& x) noexcept
    {

        m_red = x.m_red;
        m_green = x.m_green;
        m_blue = x.m_blue;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x ColorAmount object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ColorAmount& x) const
    {
        return (m_red == x.m_red &&
           m_green == x.m_green &&
           m_blue == x.m_blue);
    }

    /*!
     * @brief Comparison operator.
     * @param x ColorAmount object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ColorAmount& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member red
     * @param _red New value for member red
     */
    eProsima_user_DllExport void red(
            int32_t _red)
    {
        m_red = _red;
    }

    /*!
     * @brief This function returns the value of member red
     * @return Value of member red
     */
    eProsima_user_DllExport int32_t red() const
    {
        return m_red;
    }

    /*!
     * @brief This function returns a reference to member red
     * @return Reference to member red
     */
    eProsima_user_DllExport int32_t& red()
    {
        return m_red;
    }


    /*!
     * @brief This function sets a value in member green
     * @param _green New value for member green
     */
    eProsima_user_DllExport void green(
            int32_t _green)
    {
        m_green = _green;
    }

    /*!
     * @brief This function returns the value of member green
     * @return Value of member green
     */
    eProsima_user_DllExport int32_t green() const
    {
        return m_green;
    }

    /*!
     * @brief This function returns a reference to member green
     * @return Reference to member green
     */
    eProsima_user_DllExport int32_t& green()
    {
        return m_green;
    }


    /*!
     * @brief This function sets a value in member blue
     * @param _blue New value for member blue
     */
    eProsima_user_DllExport void blue(
            int32_t _blue)
    {
        m_blue = _blue;
    }

    /*!
     * @brief This function returns the value of member blue
     * @return Value of member blue
     */
    eProsima_user_DllExport int32_t blue() const
    {
        return m_blue;
    }

    /*!
     * @brief This function returns a reference to member blue
     * @return Reference to member blue
     */
    eProsima_user_DllExport int32_t& blue()
    {
        return m_blue;
    }



private:

    int32_t m_red{0};
    int32_t m_green{0};
    int32_t m_blue{0};

};
/*!
 * @brief This class represents the structure multi_array_struct defined by the user in the IDL file.
 * @ingroup multi_array_struct
 */
class multi_array_struct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport multi_array_struct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~multi_array_struct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object multi_array_struct that will be copied.
     */
    eProsima_user_DllExport multi_array_struct(
            const multi_array_struct& x)
    {
                    m_colors = x.m_colors;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object multi_array_struct that will be copied.
     */
    eProsima_user_DllExport multi_array_struct(
            multi_array_struct&& x) noexcept
    {
        m_colors = std::move(x.m_colors);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object multi_array_struct that will be copied.
     */
    eProsima_user_DllExport multi_array_struct& operator =(
            const multi_array_struct& x)
    {

                    m_colors = x.m_colors;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object multi_array_struct that will be copied.
     */
    eProsima_user_DllExport multi_array_struct& operator =(
            multi_array_struct&& x) noexcept
    {

        m_colors = std::move(x.m_colors);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x multi_array_struct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const multi_array_struct& x) const
    {
        return (m_colors == x.m_colors);
    }

    /*!
     * @brief Comparison operator.
     * @param x multi_array_struct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const multi_array_struct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member colors
     * @param _colors New value to be copied in member colors
     */
    eProsima_user_DllExport void colors(
            const std::array<std::array<std::array<ColorAmount, 5>, 5>, 5>& _colors)
    {
        m_colors = _colors;
    }

    /*!
     * @brief This function moves the value in member colors
     * @param _colors New value to be moved in member colors
     */
    eProsima_user_DllExport void colors(
            std::array<std::array<std::array<ColorAmount, 5>, 5>, 5>&& _colors)
    {
        m_colors = std::move(_colors);
    }

    /*!
     * @brief This function returns a constant reference to member colors
     * @return Constant reference to member colors
     */
    eProsima_user_DllExport const std::array<std::array<std::array<ColorAmount, 5>, 5>, 5>& colors() const
    {
        return m_colors;
    }

    /*!
     * @brief This function returns a reference to member colors
     * @return Reference to member colors
     */
    eProsima_user_DllExport std::array<std::array<std::array<ColorAmount, 5>, 5>, 5>& colors()
    {
        return m_colors;
    }



private:

    std::array<std::array<std::array<ColorAmount, 5>, 5>, 5> m_colors;

};

#endif // _FAST_DDS_GENERATED_MULTI_ARRAY_STRUCT_HPP_


