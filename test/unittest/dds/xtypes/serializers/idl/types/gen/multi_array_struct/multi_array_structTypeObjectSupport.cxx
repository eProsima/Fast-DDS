// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file multi_array_structTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "multi_array_structTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "multi_array_struct.hpp"


using namespace eprosima::fastdds::dds::xtypes;

// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_ColorAmount_type_identifier(
        TypeIdentifierPair& type_ids_ColorAmount)
{

    ReturnCode_t return_code_ColorAmount {eprosima::fastdds::dds::RETCODE_OK};
    return_code_ColorAmount =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "ColorAmount", type_ids_ColorAmount);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_ColorAmount)
    {
        StructTypeFlag struct_flags_ColorAmount = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_ColorAmount = "ColorAmount";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ColorAmount;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ColorAmount;
        CompleteTypeDetail detail_ColorAmount = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ColorAmount, ann_custom_ColorAmount, type_name_ColorAmount.to_string());
        CompleteStructHeader header_ColorAmount;
        header_ColorAmount = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_ColorAmount);
        CompleteStructMemberSeq member_seq_ColorAmount;
        {
            TypeIdentifierPair type_ids_red;
            ReturnCode_t return_code_red {eprosima::fastdds::dds::RETCODE_OK};
            return_code_red =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_red);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_red)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "red Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_red = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_red = 0x00000000;
            bool common_red_ec {false};
            CommonStructMember common_red {TypeObjectUtils::build_common_struct_member(member_id_red, member_flags_red, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_red, common_red_ec))};
            if (!common_red_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure red member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_red = "red";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_red;
            ann_custom_ColorAmount.reset();
            CompleteMemberDetail detail_red = TypeObjectUtils::build_complete_member_detail(name_red, member_ann_builtin_red, ann_custom_ColorAmount);
            CompleteStructMember member_red = TypeObjectUtils::build_complete_struct_member(common_red, detail_red);
            TypeObjectUtils::add_complete_struct_member(member_seq_ColorAmount, member_red);
        }
        {
            TypeIdentifierPair type_ids_green;
            ReturnCode_t return_code_green {eprosima::fastdds::dds::RETCODE_OK};
            return_code_green =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_green);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_green)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "green Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_green = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_green = 0x00000001;
            bool common_green_ec {false};
            CommonStructMember common_green {TypeObjectUtils::build_common_struct_member(member_id_green, member_flags_green, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_green, common_green_ec))};
            if (!common_green_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure green member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_green = "green";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_green;
            ann_custom_ColorAmount.reset();
            CompleteMemberDetail detail_green = TypeObjectUtils::build_complete_member_detail(name_green, member_ann_builtin_green, ann_custom_ColorAmount);
            CompleteStructMember member_green = TypeObjectUtils::build_complete_struct_member(common_green, detail_green);
            TypeObjectUtils::add_complete_struct_member(member_seq_ColorAmount, member_green);
        }
        {
            TypeIdentifierPair type_ids_blue;
            ReturnCode_t return_code_blue {eprosima::fastdds::dds::RETCODE_OK};
            return_code_blue =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_blue);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_blue)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "blue Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_blue = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_blue = 0x00000002;
            bool common_blue_ec {false};
            CommonStructMember common_blue {TypeObjectUtils::build_common_struct_member(member_id_blue, member_flags_blue, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_blue, common_blue_ec))};
            if (!common_blue_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure blue member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_blue = "blue";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_blue;
            ann_custom_ColorAmount.reset();
            CompleteMemberDetail detail_blue = TypeObjectUtils::build_complete_member_detail(name_blue, member_ann_builtin_blue, ann_custom_ColorAmount);
            CompleteStructMember member_blue = TypeObjectUtils::build_complete_struct_member(common_blue, detail_blue);
            TypeObjectUtils::add_complete_struct_member(member_seq_ColorAmount, member_blue);
        }
        CompleteStructType struct_type_ColorAmount = TypeObjectUtils::build_complete_struct_type(struct_flags_ColorAmount, header_ColorAmount, member_seq_ColorAmount);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_ColorAmount, type_name_ColorAmount.to_string(), type_ids_ColorAmount))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "ColorAmount already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_multi_array_struct_type_identifier(
        TypeIdentifierPair& type_ids_multi_array_struct)
{

    ReturnCode_t return_code_multi_array_struct {eprosima::fastdds::dds::RETCODE_OK};
    return_code_multi_array_struct =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "multi_array_struct", type_ids_multi_array_struct);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_multi_array_struct)
    {
        StructTypeFlag struct_flags_multi_array_struct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_multi_array_struct = "multi_array_struct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_multi_array_struct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_multi_array_struct;
        CompleteTypeDetail detail_multi_array_struct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_multi_array_struct, ann_custom_multi_array_struct, type_name_multi_array_struct.to_string());
        CompleteStructHeader header_multi_array_struct;
        header_multi_array_struct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_multi_array_struct);
        CompleteStructMemberSeq member_seq_multi_array_struct;
        {
            TypeIdentifierPair type_ids_colors;
            ReturnCode_t return_code_colors {eprosima::fastdds::dds::RETCODE_OK};
            return_code_colors =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_ColorAmount_5_5_5", type_ids_colors);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_colors)
            {
                return_code_colors =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "ColorAmount", type_ids_colors);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_colors)
                {
                ::register_ColorAmount_type_identifier(type_ids_colors);
                }
                bool element_identifier_anonymous_array_ColorAmount_5_5_5_ec {false};
                TypeIdentifier* element_identifier_anonymous_array_ColorAmount_5_5_5 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_colors, element_identifier_anonymous_array_ColorAmount_5_5_5_ec))};
                if (!element_identifier_anonymous_array_ColorAmount_5_5_5_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_ColorAmount_5_5_5 = EK_COMPLETE;
                if (TK_NONE == type_ids_colors.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_ColorAmount_5_5_5 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_ColorAmount_5_5_5 = 0;
                PlainCollectionHeader header_anonymous_array_ColorAmount_5_5_5 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_ColorAmount_5_5_5, element_flags_anonymous_array_ColorAmount_5_5_5);
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(5));

                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(5));

                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(5));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_ColorAmount_5_5_5, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_ColorAmount_5_5_5));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_ColorAmount_5_5_5", type_ids_colors))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_ColorAmount_5_5_5 already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_colors = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_colors = 0x00000000;
            bool common_colors_ec {false};
            CommonStructMember common_colors {TypeObjectUtils::build_common_struct_member(member_id_colors, member_flags_colors, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_colors, common_colors_ec))};
            if (!common_colors_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure colors member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_colors = "colors";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_colors;
            ann_custom_multi_array_struct.reset();
            CompleteMemberDetail detail_colors = TypeObjectUtils::build_complete_member_detail(name_colors, member_ann_builtin_colors, ann_custom_multi_array_struct);
            CompleteStructMember member_colors = TypeObjectUtils::build_complete_struct_member(common_colors, detail_colors);
            TypeObjectUtils::add_complete_struct_member(member_seq_multi_array_struct, member_colors);
        }
        CompleteStructType struct_type_multi_array_struct = TypeObjectUtils::build_complete_struct_type(struct_flags_multi_array_struct, header_multi_array_struct, member_seq_multi_array_struct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_multi_array_struct, type_name_multi_array_struct.to_string(), type_ids_multi_array_struct))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "multi_array_struct already registered in TypeObjectRegistry for a different type.");
        }
    }
}

