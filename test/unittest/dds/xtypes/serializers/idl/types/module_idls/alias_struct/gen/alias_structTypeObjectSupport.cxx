// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file alias_structTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "alias_structTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "alias_struct.hpp"


using namespace eprosima::fastdds::dds::xtypes;

namespace TrialModule {
namespace AliasModule {
void register_AliasType_type_identifier(
        TypeIdentifierPair& type_ids_AliasType)
{
    ReturnCode_t return_code_AliasType {eprosima::fastdds::dds::RETCODE_OK};
    return_code_AliasType =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "TrialModule::AliasModule::AliasType", type_ids_AliasType);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_AliasType)
    {
        AliasTypeFlag alias_flags_AliasType = 0;
        QualifiedTypeName type_name_AliasType = "TrialModule::AliasModule::AliasType";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_AliasType;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_AliasType;
        CompleteTypeDetail detail_AliasType = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_AliasType, ann_custom_AliasType, type_name_AliasType.to_string());
        CompleteAliasHeader header_AliasType = TypeObjectUtils::build_complete_alias_header(detail_AliasType);
        AliasMemberFlag related_flags_AliasType = 0;
        return_code_AliasType =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "_int32_t", type_ids_AliasType);

        if (eprosima::fastdds::dds::RETCODE_OK != return_code_AliasType)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "TrialModule::AliasModule::AliasType related TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
        bool common_AliasType_ec {false};
        CommonAliasBody common_AliasType {TypeObjectUtils::build_common_alias_body(related_flags_AliasType,
                TypeObjectUtils::retrieve_complete_type_identifier(type_ids_AliasType, common_AliasType_ec))};
        if (!common_AliasType_ec)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "TrialModule::AliasModule::AliasType related TypeIdentifier inconsistent.");
            return;
        }
        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_AliasType;
        ann_custom_AliasType.reset();
        CompleteAliasBody body_AliasType = TypeObjectUtils::build_complete_alias_body(common_AliasType,
                member_ann_builtin_AliasType, ann_custom_AliasType);
        CompleteAliasType alias_type_AliasType = TypeObjectUtils::build_complete_alias_type(alias_flags_AliasType,
                header_AliasType, body_AliasType);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_alias_type_object(alias_type_AliasType,
                    type_name_AliasType.to_string(), type_ids_AliasType))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "TrialModule::AliasModule::AliasType already registered in TypeObjectRegistry for a different type.");
        }
    }
}


} // namespace AliasModule

} // namespace TrialModule
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_TrialStruct_type_identifier(
        TypeIdentifierPair& type_ids_TrialStruct)
{

    ReturnCode_t return_code_TrialStruct {eprosima::fastdds::dds::RETCODE_OK};
    return_code_TrialStruct =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "TrialStruct", type_ids_TrialStruct);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_TrialStruct)
    {
        StructTypeFlag struct_flags_TrialStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_TrialStruct = "TrialStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_TrialStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_TrialStruct;
        CompleteTypeDetail detail_TrialStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_TrialStruct, ann_custom_TrialStruct, type_name_TrialStruct.to_string());
        CompleteStructHeader header_TrialStruct;
        header_TrialStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_TrialStruct);
        CompleteStructMemberSeq member_seq_TrialStruct;
        {
            TypeIdentifierPair type_ids_alias_member;
            ReturnCode_t return_code_alias_member {eprosima::fastdds::dds::RETCODE_OK};
            return_code_alias_member =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "TrialModule::AliasModule::AliasType", type_ids_alias_member);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_alias_member)
            {
                TrialModule::AliasModule::register_AliasType_type_identifier(type_ids_alias_member);
            }
            StructMemberFlag member_flags_alias_member = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_alias_member = 0x00000000;
            bool common_alias_member_ec {false};
            CommonStructMember common_alias_member {TypeObjectUtils::build_common_struct_member(member_id_alias_member, member_flags_alias_member, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_alias_member, common_alias_member_ec))};
            if (!common_alias_member_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure alias_member member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_alias_member = "alias_member";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_alias_member;
            ann_custom_TrialStruct.reset();
            CompleteMemberDetail detail_alias_member = TypeObjectUtils::build_complete_member_detail(name_alias_member, member_ann_builtin_alias_member, ann_custom_TrialStruct);
            CompleteStructMember member_alias_member = TypeObjectUtils::build_complete_struct_member(common_alias_member, detail_alias_member);
            TypeObjectUtils::add_complete_struct_member(member_seq_TrialStruct, member_alias_member);
        }
        CompleteStructType struct_type_TrialStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_TrialStruct, header_TrialStruct, member_seq_TrialStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_TrialStruct, type_name_TrialStruct.to_string(), type_ids_TrialStruct))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "TrialStruct already registered in TypeObjectRegistry for a different type.");
        }
    }
}

