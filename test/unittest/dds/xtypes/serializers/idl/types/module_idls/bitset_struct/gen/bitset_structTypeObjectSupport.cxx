// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file bitset_structTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "bitset_structTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "bitset_struct.hpp"


using namespace eprosima::fastdds::dds::xtypes;

namespace TrialModule {
namespace BitsetModule {
void register_BitsetType_type_identifier(
        TypeIdentifierPair& type_ids_BitsetType)
{
    ReturnCode_t return_code_BitsetType {eprosima::fastdds::dds::RETCODE_OK};
    return_code_BitsetType =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "TrialModule::BitsetModule::BitsetType", type_ids_BitsetType);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_BitsetType)
    {
        BitsetTypeFlag bitset_flags_BitsetType = 0;
        QualifiedTypeName type_name_BitsetType = "TrialModule::BitsetModule::BitsetType";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_BitsetType;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_BitsetType;
        CompleteTypeDetail detail_BitsetType = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_BitsetType, ann_custom_BitsetType, type_name_BitsetType.to_string());
        CompleteBitsetHeader header_BitsetType = TypeObjectUtils::build_complete_bitset_header(detail_BitsetType);
        CompleteBitfieldSeq field_seq_BitsetType;
        {
            uint16_t position_flag1 = 0;
            BitsetMemberFlag flags_flag1 = 0;
            uint8_t bitcount_flag1 = 3;
            TypeKind holder_type_flag1 = TK_UINT8;
            CommonBitfield common_flag1 = TypeObjectUtils::build_common_bitfield(position_flag1, flags_flag1, bitcount_flag1, holder_type_flag1);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag1;
            ann_custom_BitsetType.reset();
            MemberName name_flag1 = "flag1";
            CompleteMemberDetail detail_flag1 = TypeObjectUtils::build_complete_member_detail(name_flag1, member_ann_builtin_flag1, ann_custom_BitsetType);
            CompleteBitfield bitfield_flag1 = TypeObjectUtils::build_complete_bitfield(common_flag1, detail_flag1);
            TypeObjectUtils::add_complete_bitfield(field_seq_BitsetType, bitfield_flag1);
        }
        {
            uint16_t position_flag2 = 3;
            BitsetMemberFlag flags_flag2 = 0;
            uint8_t bitcount_flag2 = 10;
            TypeKind holder_type_flag2 = TK_UINT16;
            CommonBitfield common_flag2 = TypeObjectUtils::build_common_bitfield(position_flag2, flags_flag2, bitcount_flag2, holder_type_flag2);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag2;
            ann_custom_BitsetType.reset();
            MemberName name_flag2 = "flag2";
            CompleteMemberDetail detail_flag2 = TypeObjectUtils::build_complete_member_detail(name_flag2, member_ann_builtin_flag2, ann_custom_BitsetType);
            CompleteBitfield bitfield_flag2 = TypeObjectUtils::build_complete_bitfield(common_flag2, detail_flag2);
            TypeObjectUtils::add_complete_bitfield(field_seq_BitsetType, bitfield_flag2);
        }
        {
            uint16_t position_flag3 = 13;
            BitsetMemberFlag flags_flag3 = 0;
            uint8_t bitcount_flag3 = 12;
            TypeKind holder_type_flag3 = TK_INT32;
            CommonBitfield common_flag3 = TypeObjectUtils::build_common_bitfield(position_flag3, flags_flag3, bitcount_flag3, holder_type_flag3);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag3;
            ann_custom_BitsetType.reset();
            MemberName name_flag3 = "flag3";
            CompleteMemberDetail detail_flag3 = TypeObjectUtils::build_complete_member_detail(name_flag3, member_ann_builtin_flag3, ann_custom_BitsetType);
            CompleteBitfield bitfield_flag3 = TypeObjectUtils::build_complete_bitfield(common_flag3, detail_flag3);
            TypeObjectUtils::add_complete_bitfield(field_seq_BitsetType, bitfield_flag3);
        }
        CompleteBitsetType bitset_type_BitsetType = TypeObjectUtils::build_complete_bitset_type(bitset_flags_BitsetType, header_BitsetType, field_seq_BitsetType);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_bitset_type_object(bitset_type_BitsetType,
                    type_name_BitsetType.to_string(), type_ids_BitsetType))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "TrialModule::BitsetModule::BitsetType already registered in TypeObjectRegistry for a different type.");
        }
    }
}
} // namespace BitsetModule

} // namespace TrialModule
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_TrialStruct_type_identifier(
        TypeIdentifierPair& type_ids_TrialStruct)
{

    ReturnCode_t return_code_TrialStruct {eprosima::fastdds::dds::RETCODE_OK};
    return_code_TrialStruct =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "TrialStruct", type_ids_TrialStruct);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_TrialStruct)
    {
        StructTypeFlag struct_flags_TrialStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_TrialStruct = "TrialStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_TrialStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_TrialStruct;
        CompleteTypeDetail detail_TrialStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_TrialStruct, ann_custom_TrialStruct, type_name_TrialStruct.to_string());
        CompleteStructHeader header_TrialStruct;
        header_TrialStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_TrialStruct);
        CompleteStructMemberSeq member_seq_TrialStruct;
        {
            TypeIdentifierPair type_ids_bitset_member;
            ReturnCode_t return_code_bitset_member {eprosima::fastdds::dds::RETCODE_OK};
            return_code_bitset_member =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "TrialModule::BitsetModule::BitsetType", type_ids_bitset_member);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_bitset_member)
            {
                TrialModule::BitsetModule::register_BitsetType_type_identifier(type_ids_bitset_member);
            }
            StructMemberFlag member_flags_bitset_member = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_bitset_member = 0x00000000;
            bool common_bitset_member_ec {false};
            CommonStructMember common_bitset_member {TypeObjectUtils::build_common_struct_member(member_id_bitset_member, member_flags_bitset_member, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_bitset_member, common_bitset_member_ec))};
            if (!common_bitset_member_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure bitset_member member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_bitset_member = "bitset_member";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_bitset_member;
            ann_custom_TrialStruct.reset();
            CompleteMemberDetail detail_bitset_member = TypeObjectUtils::build_complete_member_detail(name_bitset_member, member_ann_builtin_bitset_member, ann_custom_TrialStruct);
            CompleteStructMember member_bitset_member = TypeObjectUtils::build_complete_struct_member(common_bitset_member, detail_bitset_member);
            TypeObjectUtils::add_complete_struct_member(member_seq_TrialStruct, member_bitset_member);
        }
        CompleteStructType struct_type_TrialStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_TrialStruct, header_TrialStruct, member_seq_TrialStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_TrialStruct, type_name_TrialStruct.to_string(), type_ids_TrialStruct))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "TrialStruct already registered in TypeObjectRegistry for a different type.");
        }
    }
}

