// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file enum_struct.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__ENUM_STRUCT_HPP
#define FAST_DDS_GENERATED__ENUM_STRUCT_HPP

#include <cstdint>
#include <utility>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(ENUM_STRUCT_SOURCE)
#define ENUM_STRUCT_DllAPI __declspec( dllexport )
#else
#define ENUM_STRUCT_DllAPI __declspec( dllimport )
#endif // ENUM_STRUCT_SOURCE
#else
#define ENUM_STRUCT_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define ENUM_STRUCT_DllAPI
#endif // _WIN32

namespace TrialModule {

namespace EnumModule {

/*!
 * @brief This class represents the enumeration EnumType defined by the user in the IDL file.
 * @ingroup enum_struct
 */
enum class EnumType : int32_t
{
    VALUE_ONE,
    VALUE_TWO,
    VALUE_THREE
};

} // namespace EnumModule

} // namespace TrialModule
/*!
 * @brief This class represents the structure TrialStruct defined by the user in the IDL file.
 * @ingroup enum_struct
 */
class TrialStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport TrialStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~TrialStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object TrialStruct that will be copied.
     */
    eProsima_user_DllExport TrialStruct(
            const TrialStruct& x)
    {
                    m_enum_member = x.m_enum_member;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object TrialStruct that will be copied.
     */
    eProsima_user_DllExport TrialStruct(
            TrialStruct&& x) noexcept
    {
        m_enum_member = x.m_enum_member;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object TrialStruct that will be copied.
     */
    eProsima_user_DllExport TrialStruct& operator =(
            const TrialStruct& x)
    {

                    m_enum_member = x.m_enum_member;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object TrialStruct that will be copied.
     */
    eProsima_user_DllExport TrialStruct& operator =(
            TrialStruct&& x) noexcept
    {

        m_enum_member = x.m_enum_member;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x TrialStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const TrialStruct& x) const
    {
        return (m_enum_member == x.m_enum_member);
    }

    /*!
     * @brief Comparison operator.
     * @param x TrialStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const TrialStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member enum_member
     * @param _enum_member New value for member enum_member
     */
    eProsima_user_DllExport void enum_member(
            TrialModule::EnumModule::EnumType _enum_member)
    {
        m_enum_member = _enum_member;
    }

    /*!
     * @brief This function returns the value of member enum_member
     * @return Value of member enum_member
     */
    eProsima_user_DllExport TrialModule::EnumModule::EnumType enum_member() const
    {
        return m_enum_member;
    }

    /*!
     * @brief This function returns a reference to member enum_member
     * @return Reference to member enum_member
     */
    eProsima_user_DllExport TrialModule::EnumModule::EnumType& enum_member()
    {
        return m_enum_member;
    }



private:

    TrialModule::EnumModule::EnumType m_enum_member{TrialModule::EnumModule::EnumType::VALUE_ONE};

};

#endif // _FAST_DDS_GENERATED_ENUM_STRUCT_HPP_


