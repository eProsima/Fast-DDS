// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file enum_structTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "enum_structTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "enum_struct.hpp"


using namespace eprosima::fastdds::dds::xtypes;

namespace TrialModule {
namespace EnumModule {
void register_EnumType_type_identifier(
        TypeIdentifierPair& type_ids_EnumType)
{
    ReturnCode_t return_code_EnumType {eprosima::fastdds::dds::RETCODE_OK};
    return_code_EnumType =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "TrialModule::EnumModule::EnumType", type_ids_EnumType);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_EnumType)
    {
        EnumTypeFlag enum_flags_EnumType = 0;
        BitBound bit_bound_EnumType = 32;
        CommonEnumeratedHeader common_EnumType = TypeObjectUtils::build_common_enumerated_header(bit_bound_EnumType);
        QualifiedTypeName type_name_EnumType = "TrialModule::EnumModule::EnumType";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_EnumType;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_EnumType;
        CompleteTypeDetail detail_EnumType = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_EnumType, ann_custom_EnumType, type_name_EnumType.to_string());
        CompleteEnumeratedHeader header_EnumType = TypeObjectUtils::build_complete_enumerated_header(common_EnumType, detail_EnumType);
        CompleteEnumeratedLiteralSeq literal_seq_EnumType;
        {
            EnumeratedLiteralFlag flags_VALUE_ONE = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_VALUE_ONE = TypeObjectUtils::build_common_enumerated_literal(0, flags_VALUE_ONE);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_VALUE_ONE;
            ann_custom_EnumType.reset();
            MemberName name_VALUE_ONE = "VALUE_ONE";
            CompleteMemberDetail detail_VALUE_ONE = TypeObjectUtils::build_complete_member_detail(name_VALUE_ONE, member_ann_builtin_VALUE_ONE, ann_custom_EnumType);
            CompleteEnumeratedLiteral literal_VALUE_ONE = TypeObjectUtils::build_complete_enumerated_literal(common_VALUE_ONE, detail_VALUE_ONE);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_EnumType, literal_VALUE_ONE);
        }
        {
            EnumeratedLiteralFlag flags_VALUE_TWO = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_VALUE_TWO = TypeObjectUtils::build_common_enumerated_literal(1, flags_VALUE_TWO);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_VALUE_TWO;
            ann_custom_EnumType.reset();
            MemberName name_VALUE_TWO = "VALUE_TWO";
            CompleteMemberDetail detail_VALUE_TWO = TypeObjectUtils::build_complete_member_detail(name_VALUE_TWO, member_ann_builtin_VALUE_TWO, ann_custom_EnumType);
            CompleteEnumeratedLiteral literal_VALUE_TWO = TypeObjectUtils::build_complete_enumerated_literal(common_VALUE_TWO, detail_VALUE_TWO);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_EnumType, literal_VALUE_TWO);
        }
        {
            EnumeratedLiteralFlag flags_VALUE_THREE = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_VALUE_THREE = TypeObjectUtils::build_common_enumerated_literal(2, flags_VALUE_THREE);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_VALUE_THREE;
            ann_custom_EnumType.reset();
            MemberName name_VALUE_THREE = "VALUE_THREE";
            CompleteMemberDetail detail_VALUE_THREE = TypeObjectUtils::build_complete_member_detail(name_VALUE_THREE, member_ann_builtin_VALUE_THREE, ann_custom_EnumType);
            CompleteEnumeratedLiteral literal_VALUE_THREE = TypeObjectUtils::build_complete_enumerated_literal(common_VALUE_THREE, detail_VALUE_THREE);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_EnumType, literal_VALUE_THREE);
        }
        CompleteEnumeratedType enumerated_type_EnumType = TypeObjectUtils::build_complete_enumerated_type(enum_flags_EnumType, header_EnumType,
                literal_seq_EnumType);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_EnumType, type_name_EnumType.to_string(), type_ids_EnumType))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "TrialModule::EnumModule::EnumType already registered in TypeObjectRegistry for a different type.");
        }
    }
}
} // namespace EnumModule

} // namespace TrialModule
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_TrialStruct_type_identifier(
        TypeIdentifierPair& type_ids_TrialStruct)
{

    ReturnCode_t return_code_TrialStruct {eprosima::fastdds::dds::RETCODE_OK};
    return_code_TrialStruct =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "TrialStruct", type_ids_TrialStruct);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_TrialStruct)
    {
        StructTypeFlag struct_flags_TrialStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_TrialStruct = "TrialStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_TrialStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_TrialStruct;
        CompleteTypeDetail detail_TrialStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_TrialStruct, ann_custom_TrialStruct, type_name_TrialStruct.to_string());
        CompleteStructHeader header_TrialStruct;
        header_TrialStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_TrialStruct);
        CompleteStructMemberSeq member_seq_TrialStruct;
        {
            TypeIdentifierPair type_ids_enum_member;
            ReturnCode_t return_code_enum_member {eprosima::fastdds::dds::RETCODE_OK};
            return_code_enum_member =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "TrialModule::EnumModule::EnumType", type_ids_enum_member);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_enum_member)
            {
                TrialModule::EnumModule::register_EnumType_type_identifier(type_ids_enum_member);
            }
            StructMemberFlag member_flags_enum_member = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_enum_member = 0x00000000;
            bool common_enum_member_ec {false};
            CommonStructMember common_enum_member {TypeObjectUtils::build_common_struct_member(member_id_enum_member, member_flags_enum_member, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_enum_member, common_enum_member_ec))};
            if (!common_enum_member_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure enum_member member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_enum_member = "enum_member";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_enum_member;
            ann_custom_TrialStruct.reset();
            CompleteMemberDetail detail_enum_member = TypeObjectUtils::build_complete_member_detail(name_enum_member, member_ann_builtin_enum_member, ann_custom_TrialStruct);
            CompleteStructMember member_enum_member = TypeObjectUtils::build_complete_struct_member(common_enum_member, detail_enum_member);
            TypeObjectUtils::add_complete_struct_member(member_seq_TrialStruct, member_enum_member);
        }
        CompleteStructType struct_type_TrialStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_TrialStruct, header_TrialStruct, member_seq_TrialStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_TrialStruct, type_name_TrialStruct.to_string(), type_ids_TrialStruct))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "TrialStruct already registered in TypeObjectRegistry for a different type.");
        }
    }
}

