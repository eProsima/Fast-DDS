// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file struct_struct.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__STRUCT_STRUCT_HPP
#define FAST_DDS_GENERATED__STRUCT_STRUCT_HPP

#include <cstdint>
#include <string>
#include <utility>
#include <fastcdr/cdr/fixed_size_string.hpp>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(STRUCT_STRUCT_SOURCE)
#define STRUCT_STRUCT_DllAPI __declspec( dllexport )
#else
#define STRUCT_STRUCT_DllAPI __declspec( dllimport )
#endif // STRUCT_STRUCT_SOURCE
#else
#define STRUCT_STRUCT_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define STRUCT_STRUCT_DllAPI
#endif // _WIN32

namespace TrialModule {

namespace StructModule {

/*!
 * @brief This class represents the structure StructType defined by the user in the IDL file.
 * @ingroup struct_struct
 */
class StructType
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StructType()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StructType()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StructType that will be copied.
     */
    eProsima_user_DllExport StructType(
            const StructType& x)
    {
                    m_struct_data = x.m_struct_data;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StructType that will be copied.
     */
    eProsima_user_DllExport StructType(
            StructType&& x) noexcept
    {
        m_struct_data = std::move(x.m_struct_data);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StructType that will be copied.
     */
    eProsima_user_DllExport StructType& operator =(
            const StructType& x)
    {

                    m_struct_data = x.m_struct_data;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StructType that will be copied.
     */
    eProsima_user_DllExport StructType& operator =(
            StructType&& x) noexcept
    {

        m_struct_data = std::move(x.m_struct_data);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x StructType object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StructType& x) const
    {
        return (m_struct_data == x.m_struct_data);
    }

    /*!
     * @brief Comparison operator.
     * @param x StructType object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StructType& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member struct_data
     * @param _struct_data New value to be copied in member struct_data
     */
    eProsima_user_DllExport void struct_data(
            const std::string& _struct_data)
    {
        m_struct_data = _struct_data;
    }

    /*!
     * @brief This function moves the value in member struct_data
     * @param _struct_data New value to be moved in member struct_data
     */
    eProsima_user_DllExport void struct_data(
            std::string&& _struct_data)
    {
        m_struct_data = std::move(_struct_data);
    }

    /*!
     * @brief This function returns a constant reference to member struct_data
     * @return Constant reference to member struct_data
     */
    eProsima_user_DllExport const std::string& struct_data() const
    {
        return m_struct_data;
    }

    /*!
     * @brief This function returns a reference to member struct_data
     * @return Reference to member struct_data
     */
    eProsima_user_DllExport std::string& struct_data()
    {
        return m_struct_data;
    }



private:

    std::string m_struct_data;

};

} // namespace StructModule

} // namespace TrialModule
/*!
 * @brief This class represents the structure TrialStruct defined by the user in the IDL file.
 * @ingroup struct_struct
 */
class TrialStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport TrialStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~TrialStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object TrialStruct that will be copied.
     */
    eProsima_user_DllExport TrialStruct(
            const TrialStruct& x)
    {
                    m_struct_member = x.m_struct_member;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object TrialStruct that will be copied.
     */
    eProsima_user_DllExport TrialStruct(
            TrialStruct&& x) noexcept
    {
        m_struct_member = std::move(x.m_struct_member);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object TrialStruct that will be copied.
     */
    eProsima_user_DllExport TrialStruct& operator =(
            const TrialStruct& x)
    {

                    m_struct_member = x.m_struct_member;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object TrialStruct that will be copied.
     */
    eProsima_user_DllExport TrialStruct& operator =(
            TrialStruct&& x) noexcept
    {

        m_struct_member = std::move(x.m_struct_member);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x TrialStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const TrialStruct& x) const
    {
        return (m_struct_member == x.m_struct_member);
    }

    /*!
     * @brief Comparison operator.
     * @param x TrialStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const TrialStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member struct_member
     * @param _struct_member New value to be copied in member struct_member
     */
    eProsima_user_DllExport void struct_member(
            const TrialModule::StructModule::StructType& _struct_member)
    {
        m_struct_member = _struct_member;
    }

    /*!
     * @brief This function moves the value in member struct_member
     * @param _struct_member New value to be moved in member struct_member
     */
    eProsima_user_DllExport void struct_member(
            TrialModule::StructModule::StructType&& _struct_member)
    {
        m_struct_member = std::move(_struct_member);
    }

    /*!
     * @brief This function returns a constant reference to member struct_member
     * @return Constant reference to member struct_member
     */
    eProsima_user_DllExport const TrialModule::StructModule::StructType& struct_member() const
    {
        return m_struct_member;
    }

    /*!
     * @brief This function returns a reference to member struct_member
     * @return Reference to member struct_member
     */
    eProsima_user_DllExport TrialModule::StructModule::StructType& struct_member()
    {
        return m_struct_member;
    }



private:

    TrialModule::StructModule::StructType m_struct_member;

};

#endif // _FAST_DDS_GENERATED_STRUCT_STRUCT_HPP_


