// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file union_structTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "union_structTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "union_struct.hpp"


using namespace eprosima::fastdds::dds::xtypes;

namespace TrialModule {
namespace UnionModule {
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_UnionType_type_identifier(
        TypeIdentifierPair& type_ids_UnionType)
{
    ReturnCode_t return_code_UnionType {eprosima::fastdds::dds::RETCODE_OK};
    return_code_UnionType =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "TrialModule::UnionModule::UnionType", type_ids_UnionType);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_UnionType)
    {
        UnionTypeFlag union_flags_UnionType = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_UnionType = "TrialModule::UnionModule::UnionType";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_UnionType;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_UnionType;
        CompleteTypeDetail detail_UnionType = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_UnionType, ann_custom_UnionType, type_name_UnionType.to_string());
        CompleteUnionHeader header_UnionType = TypeObjectUtils::build_complete_union_header(detail_UnionType);
        UnionDiscriminatorFlag member_flags_UnionType = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                false);
        return_code_UnionType =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "_int32_t", type_ids_UnionType);

        if (return_code_UnionType != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
        CommonDiscriminatorMember common_UnionType;
        if (EK_COMPLETE == type_ids_UnionType.type_identifier1()._d() || TK_NONE == type_ids_UnionType.type_identifier2()._d())
        {
            common_UnionType = TypeObjectUtils::build_common_discriminator_member(member_flags_UnionType, type_ids_UnionType.type_identifier1());
        }
        else if (EK_COMPLETE == type_ids_UnionType.type_identifier2()._d())
        {
            common_UnionType = TypeObjectUtils::build_common_discriminator_member(member_flags_UnionType, type_ids_UnionType.type_identifier2());
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "TrialModule::UnionModule::UnionType discriminator TypeIdentifier inconsistent.");
            return;
        }
        type_ann_builtin_UnionType.reset();
        ann_custom_UnionType.reset();
        CompleteDiscriminatorMember discriminator_UnionType = TypeObjectUtils::build_complete_discriminator_member(common_UnionType,
                type_ann_builtin_UnionType, ann_custom_UnionType);
        CompleteUnionMemberSeq member_seq_UnionType;
        {
            return_code_UnionType =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_UnionType);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_UnionType)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "case_long Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionMemberFlag member_flags_case_long = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false);
            UnionCaseLabelSeq label_seq_case_long;
            TypeObjectUtils::add_union_case_label(label_seq_case_long, static_cast<int32_t>(0));
            MemberId member_id_case_long = 0x00000001;
            bool common_case_long_ec {false};
            CommonUnionMember common_case_long {TypeObjectUtils::build_common_union_member(member_id_case_long,
                    member_flags_case_long, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_UnionType,
                        common_case_long_ec), label_seq_case_long)};
            if (!common_case_long_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Union case_long member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_case_long = "case_long";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_case_long;
            ann_custom_UnionType.reset();
            CompleteMemberDetail detail_case_long = TypeObjectUtils::build_complete_member_detail(name_case_long, member_ann_builtin_case_long, ann_custom_UnionType);
            CompleteUnionMember member_case_long = TypeObjectUtils::build_complete_union_member(common_case_long, detail_case_long);
            TypeObjectUtils::add_complete_union_member(member_seq_UnionType, member_case_long);
        }
        {
            return_code_UnionType =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_UnionType);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_UnionType)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "case_float Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionMemberFlag member_flags_case_float = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false);
            UnionCaseLabelSeq label_seq_case_float;
            TypeObjectUtils::add_union_case_label(label_seq_case_float, static_cast<int32_t>(1));
            MemberId member_id_case_float = 0x00000002;
            bool common_case_float_ec {false};
            CommonUnionMember common_case_float {TypeObjectUtils::build_common_union_member(member_id_case_float,
                    member_flags_case_float, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_UnionType,
                        common_case_float_ec), label_seq_case_float)};
            if (!common_case_float_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Union case_float member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_case_float = "case_float";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_case_float;
            ann_custom_UnionType.reset();
            CompleteMemberDetail detail_case_float = TypeObjectUtils::build_complete_member_detail(name_case_float, member_ann_builtin_case_float, ann_custom_UnionType);
            CompleteUnionMember member_case_float = TypeObjectUtils::build_complete_union_member(common_case_float, detail_case_float);
            TypeObjectUtils::add_complete_union_member(member_seq_UnionType, member_case_float);
        }
        {
            return_code_UnionType =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_UnionType);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_UnionType)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_UnionType))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            UnionMemberFlag member_flags_case_string = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    true, false);
            UnionCaseLabelSeq label_seq_case_string;
            MemberId member_id_case_string = 0x00000003;
            bool common_case_string_ec {false};
            CommonUnionMember common_case_string {TypeObjectUtils::build_common_union_member(member_id_case_string,
                    member_flags_case_string, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_UnionType,
                        common_case_string_ec), label_seq_case_string)};
            if (!common_case_string_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Union case_string member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_case_string = "case_string";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_case_string;
            ann_custom_UnionType.reset();
            CompleteMemberDetail detail_case_string = TypeObjectUtils::build_complete_member_detail(name_case_string, member_ann_builtin_case_string, ann_custom_UnionType);
            CompleteUnionMember member_case_string = TypeObjectUtils::build_complete_union_member(common_case_string, detail_case_string);
            TypeObjectUtils::add_complete_union_member(member_seq_UnionType, member_case_string);
        }
        CompleteUnionType union_type_UnionType = TypeObjectUtils::build_complete_union_type(union_flags_UnionType, header_UnionType, discriminator_UnionType,
                member_seq_UnionType);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_union_type_object(union_type_UnionType, type_name_UnionType.to_string(), type_ids_UnionType))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "TrialModule::UnionModule::UnionType already registered in TypeObjectRegistry for a different type.");
        }
    }
}

} // namespace UnionModule

} // namespace TrialModule
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_TrialStruct_type_identifier(
        TypeIdentifierPair& type_ids_TrialStruct)
{

    ReturnCode_t return_code_TrialStruct {eprosima::fastdds::dds::RETCODE_OK};
    return_code_TrialStruct =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "TrialStruct", type_ids_TrialStruct);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_TrialStruct)
    {
        StructTypeFlag struct_flags_TrialStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_TrialStruct = "TrialStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_TrialStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_TrialStruct;
        CompleteTypeDetail detail_TrialStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_TrialStruct, ann_custom_TrialStruct, type_name_TrialStruct.to_string());
        CompleteStructHeader header_TrialStruct;
        header_TrialStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_TrialStruct);
        CompleteStructMemberSeq member_seq_TrialStruct;
        {
            TypeIdentifierPair type_ids_union_member;
            ReturnCode_t return_code_union_member {eprosima::fastdds::dds::RETCODE_OK};
            return_code_union_member =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "TrialModule::UnionModule::UnionType", type_ids_union_member);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_union_member)
            {
                TrialModule::UnionModule::register_UnionType_type_identifier(type_ids_union_member);
            }
            StructMemberFlag member_flags_union_member = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_union_member = 0x00000000;
            bool common_union_member_ec {false};
            CommonStructMember common_union_member {TypeObjectUtils::build_common_struct_member(member_id_union_member, member_flags_union_member, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_union_member, common_union_member_ec))};
            if (!common_union_member_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure union_member member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_union_member = "union_member";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_union_member;
            ann_custom_TrialStruct.reset();
            CompleteMemberDetail detail_union_member = TypeObjectUtils::build_complete_member_detail(name_union_member, member_ann_builtin_union_member, ann_custom_TrialStruct);
            CompleteStructMember member_union_member = TypeObjectUtils::build_complete_struct_member(common_union_member, detail_union_member);
            TypeObjectUtils::add_complete_struct_member(member_seq_TrialStruct, member_union_member);
        }
        CompleteStructType struct_type_TrialStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_TrialStruct, header_TrialStruct, member_seq_TrialStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_TrialStruct, type_name_TrialStruct.to_string(), type_ids_TrialStruct))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "TrialStruct already registered in TypeObjectRegistry for a different type.");
        }
    }
}

