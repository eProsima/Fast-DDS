// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file struct_structCdrAux.ipp
 * This source file contains some declarations of CDR related functions.
 *
 * This file was generated by the tool fastddsgen (version: 4.1.0).
 */

#ifndef FAST_DDS_GENERATED__STRUCT_STRUCTCDRAUX_IPP
#define FAST_DDS_GENERATED__STRUCT_STRUCTCDRAUX_IPP

#include "struct_structCdrAux.hpp"

#include <fastcdr/Cdr.h>
#include <fastcdr/CdrSizeCalculator.hpp>

#include <fastdds/dds/core/policy/QosPolicies.hpp>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

namespace eprosima {
namespace fastcdr {


eProsima_user_DllExport bool is_GrandparentStruct_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const GrandparentStruct& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.my_long(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const GrandparentStruct& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.my_long()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const GrandparentStruct* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_GrandparentStruct_cdr_plain(data_representation) &&
                sizeof(GrandparentStruct) == GrandparentStruct_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(GrandparentStruct));

            scdr.jump((array_size -1) * sizeof(GrandparentStruct));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        GrandparentStruct& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.my_long();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        GrandparentStruct* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_GrandparentStruct_cdr_plain(data_representation) &&
            sizeof(GrandparentStruct) == GrandparentStruct_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(GrandparentStruct));

            scdr.jump((array_size - 1) * sizeof(GrandparentStruct));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const GrandparentStruct& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.my_long();

}



eProsima_user_DllExport bool is_ParentStruct_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const ParentStruct& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.my_long(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.my_short(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(2),
                data.my_string(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(3),
                data.my_grandparent(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const ParentStruct& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.my_long()
        << eprosima::fastcdr::MemberId(1) << data.my_short()
        << eprosima::fastcdr::MemberId(2) << data.my_string()
        << eprosima::fastcdr::MemberId(3) << data.my_grandparent()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const ParentStruct* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_ParentStruct_cdr_plain(data_representation) &&
                sizeof(ParentStruct) == ParentStruct_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(ParentStruct));

            scdr.jump((array_size -1) * sizeof(ParentStruct));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        ParentStruct& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.my_long();
                                            break;

                                        case 1:
                                                dcdr >> data.my_short();
                                            break;

                                        case 2:
                                                dcdr >> data.my_string();
                                            break;

                                        case 3:
                                                dcdr >> data.my_grandparent();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        ParentStruct* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_ParentStruct_cdr_plain(data_representation) &&
            sizeof(ParentStruct) == ParentStruct_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(ParentStruct));

            scdr.jump((array_size - 1) * sizeof(ParentStruct));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const ParentStruct& data)
{
    extern void serialize_key(
            Cdr& scdr,
            const GrandparentStruct& data);
    serialize_key(scdr, static_cast<const GrandparentStruct&>(data));
}



eProsima_user_DllExport bool is_NestedStructElement_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const NestedStructElement& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.my_boolean(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const NestedStructElement& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.my_boolean()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const NestedStructElement* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_NestedStructElement_cdr_plain(data_representation) &&
                sizeof(NestedStructElement) == NestedStructElement_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(NestedStructElement));

            scdr.jump((array_size -1) * sizeof(NestedStructElement));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        NestedStructElement& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.my_boolean();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        NestedStructElement* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_NestedStructElement_cdr_plain(data_representation) &&
            sizeof(NestedStructElement) == NestedStructElement_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(NestedStructElement));

            scdr.jump((array_size - 1) * sizeof(NestedStructElement));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const NestedStructElement& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.my_boolean();

}



eProsima_user_DllExport bool is_StructStruct_cdr_plain(
        eprosima::fastdds::dds::DataRepresentationId_t data_representation)
{
    static_cast<void>(data_representation);
    return false;
}

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const StructStruct& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.my_long(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.my_short(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(2),
                data.my_string(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(3),
                data.my_grandparent(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(4),
                data.my_nested_element(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(5),
                data.my_char(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const StructStruct& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.my_long()
        << eprosima::fastcdr::MemberId(1) << data.my_short()
        << eprosima::fastcdr::MemberId(2) << data.my_string()
        << eprosima::fastcdr::MemberId(3) << data.my_grandparent()
        << eprosima::fastcdr::MemberId(4) << data.my_nested_element()
        << eprosima::fastcdr::MemberId(5) << data.my_char()
;
    scdr.end_serialize_type(current_state);
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void serialize_array(
        eprosima::fastcdr::Cdr& scdr,
        const StructStruct* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_StructStruct_cdr_plain(data_representation) &&
                sizeof(StructStruct) == StructStruct_max_cdr_typesize)
        {
            // Serialize the first element
            // to ensure correct alignment
            scdr.serialize(
                array_ptr[0]);

            ++array_ptr;

            std::memcpy(
                scdr.get_current_position(),
                array_ptr,
                (array_size - 1) * sizeof(StructStruct));

            scdr.jump((array_size -1) * sizeof(StructStruct));
        }
        else
        {
            scdr.serialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        StructStruct& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.my_long();
                                            break;

                                        case 1:
                                                dcdr >> data.my_short();
                                            break;

                                        case 2:
                                                dcdr >> data.my_string();
                                            break;

                                        case 3:
                                                dcdr >> data.my_grandparent();
                                            break;

                                        case 4:
                                                dcdr >> data.my_nested_element();
                                            break;

                                        case 5:
                                                dcdr >> data.my_char();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

#if FASTCDR_VERSION_MAJOR > 2
template<>
eProsima_user_DllExport void deserialize_array(
        eprosima::fastcdr::Cdr& scdr,
        StructStruct* array_ptr,
        const std::size_t array_size)
{
    if (array_size > 0)
    {
        using namespace ::eprosima::fastdds::dds;
        DataRepresentationId_t data_representation = (scdr.get_cdr_version() == eprosima::fastcdr::CdrVersion::XCDRv1 ?
                    DataRepresentationId_t::XCDR_DATA_REPRESENTATION : DataRepresentationId_t::XCDR2_DATA_REPRESENTATION);

        if (is_StructStruct_cdr_plain(data_representation) &&
            sizeof(StructStruct) == StructStruct_max_cdr_typesize)
        {
            // Deserialize the first element
            // accounting for alignment
            scdr.deserialize_array(&array_ptr[0], 1);
            ++array_ptr;

            std::memcpy(
                reinterpret_cast<char*>(array_ptr),
                scdr.get_current_position(),
                (array_size - 1) * sizeof(StructStruct));

            scdr.jump((array_size - 1) * sizeof(StructStruct));
        }
        else
        {
            scdr.deserialize_array(array_ptr, array_size);
        }
    }
}
#endif // FASTCDR_VERSION_MAJOR > 2

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const StructStruct& data)
{
    extern void serialize_key(
            Cdr& scdr,
            const ParentStruct& data);
    serialize_key(scdr, static_cast<const ParentStruct&>(data));
}



} // namespace fastcdr
} // namespace eprosima

#endif // FAST_DDS_GENERATED__STRUCT_STRUCTCDRAUX_IPP

