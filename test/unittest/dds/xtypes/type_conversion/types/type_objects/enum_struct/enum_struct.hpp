// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file enum_struct.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_ENUM_STRUCT_HPP_
#define _FAST_DDS_GENERATED_ENUM_STRUCT_HPP_

#include <cstdint>
#include <utility>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(ENUM_STRUCT_SOURCE)
#define ENUM_STRUCT_DllAPI __declspec( dllexport )
#else
#define ENUM_STRUCT_DllAPI __declspec( dllimport )
#endif // ENUM_STRUCT_SOURCE
#else
#define ENUM_STRUCT_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define ENUM_STRUCT_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the enumeration ColorEnum defined by the user in the IDL file.
 * @ingroup enum_struct
 */
enum class ColorEnum : uint32_t
{
    RED,
    GREEN,
    BLUE
};
/*!
 * @brief This class represents the structure enum_struct defined by the user in the IDL file.
 * @ingroup enum_struct
 */
class enum_struct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport enum_struct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~enum_struct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object enum_struct that will be copied.
     */
    eProsima_user_DllExport enum_struct(
            const enum_struct& x)
    {
                    m_index = x.m_index;

                    m_enum_value = x.m_enum_value;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object enum_struct that will be copied.
     */
    eProsima_user_DllExport enum_struct(
            enum_struct&& x) noexcept
    {
        m_index = x.m_index;
        m_enum_value = x.m_enum_value;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object enum_struct that will be copied.
     */
    eProsima_user_DllExport enum_struct& operator =(
            const enum_struct& x)
    {

                    m_index = x.m_index;

                    m_enum_value = x.m_enum_value;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object enum_struct that will be copied.
     */
    eProsima_user_DllExport enum_struct& operator =(
            enum_struct&& x) noexcept
    {

        m_index = x.m_index;
        m_enum_value = x.m_enum_value;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x enum_struct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const enum_struct& x) const
    {
        return (m_index == x.m_index &&
           m_enum_value == x.m_enum_value);
    }

    /*!
     * @brief Comparison operator.
     * @param x enum_struct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const enum_struct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member index
     * @param _index New value for member index
     */
    eProsima_user_DllExport void index(
            uint32_t _index)
    {
        m_index = _index;
    }

    /*!
     * @brief This function returns the value of member index
     * @return Value of member index
     */
    eProsima_user_DllExport uint32_t index() const
    {
        return m_index;
    }

    /*!
     * @brief This function returns a reference to member index
     * @return Reference to member index
     */
    eProsima_user_DllExport uint32_t& index()
    {
        return m_index;
    }


    /*!
     * @brief This function sets a value in member enum_value
     * @param _enum_value New value for member enum_value
     */
    eProsima_user_DllExport void enum_value(
            ColorEnum _enum_value)
    {
        m_enum_value = _enum_value;
    }

    /*!
     * @brief This function returns the value of member enum_value
     * @return Value of member enum_value
     */
    eProsima_user_DllExport ColorEnum enum_value() const
    {
        return m_enum_value;
    }

    /*!
     * @brief This function returns a reference to member enum_value
     * @return Reference to member enum_value
     */
    eProsima_user_DllExport ColorEnum& enum_value()
    {
        return m_enum_value;
    }



private:

    uint32_t m_index{0};
    ColorEnum m_enum_value{ColorEnum::RED};

};

#endif // _FAST_DDS_GENERATED_ENUM_STRUCT_HPP_


