// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file extensibility_struct.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_EXTENSIBILITY_STRUCT_HPP_
#define _FAST_DDS_GENERATED_EXTENSIBILITY_STRUCT_HPP_

#include <cstdint>
#include <utility>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(EXTENSIBILITY_STRUCT_SOURCE)
#define EXTENSIBILITY_STRUCT_DllAPI __declspec( dllexport )
#else
#define EXTENSIBILITY_STRUCT_DllAPI __declspec( dllimport )
#endif // EXTENSIBILITY_STRUCT_SOURCE
#else
#define EXTENSIBILITY_STRUCT_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define EXTENSIBILITY_STRUCT_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the structure FinalStruct defined by the user in the IDL file.
 * @ingroup extensibility_struct
 */
class FinalStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport FinalStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~FinalStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object FinalStruct that will be copied.
     */
    eProsima_user_DllExport FinalStruct(
            const FinalStruct& x)
    {
                    m_color = x.m_color;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object FinalStruct that will be copied.
     */
    eProsima_user_DllExport FinalStruct(
            FinalStruct&& x) noexcept
    {
        m_color = x.m_color;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object FinalStruct that will be copied.
     */
    eProsima_user_DllExport FinalStruct& operator =(
            const FinalStruct& x)
    {

                    m_color = x.m_color;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object FinalStruct that will be copied.
     */
    eProsima_user_DllExport FinalStruct& operator =(
            FinalStruct&& x) noexcept
    {

        m_color = x.m_color;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x FinalStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const FinalStruct& x) const
    {
        return (m_color == x.m_color);
    }

    /*!
     * @brief Comparison operator.
     * @param x FinalStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const FinalStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member color
     * @param _color New value for member color
     */
    eProsima_user_DllExport void color(
            uint8_t _color)
    {
        m_color = _color;
    }

    /*!
     * @brief This function returns the value of member color
     * @return Value of member color
     */
    eProsima_user_DllExport uint8_t color() const
    {
        return m_color;
    }

    /*!
     * @brief This function returns a reference to member color
     * @return Reference to member color
     */
    eProsima_user_DllExport uint8_t& color()
    {
        return m_color;
    }



private:

    uint8_t m_color{0};

};
/*!
 * @brief This class represents the structure MutableStruct defined by the user in the IDL file.
 * @ingroup extensibility_struct
 */
class MutableStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MutableStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MutableStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MutableStruct that will be copied.
     */
    eProsima_user_DllExport MutableStruct(
            const MutableStruct& x)
    {
                    m_color = x.m_color;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MutableStruct that will be copied.
     */
    eProsima_user_DllExport MutableStruct(
            MutableStruct&& x) noexcept
    {
        m_color = x.m_color;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MutableStruct that will be copied.
     */
    eProsima_user_DllExport MutableStruct& operator =(
            const MutableStruct& x)
    {

                    m_color = x.m_color;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MutableStruct that will be copied.
     */
    eProsima_user_DllExport MutableStruct& operator =(
            MutableStruct&& x) noexcept
    {

        m_color = x.m_color;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x MutableStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MutableStruct& x) const
    {
        return (m_color == x.m_color);
    }

    /*!
     * @brief Comparison operator.
     * @param x MutableStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MutableStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member color
     * @param _color New value for member color
     */
    eProsima_user_DllExport void color(
            uint8_t _color)
    {
        m_color = _color;
    }

    /*!
     * @brief This function returns the value of member color
     * @return Value of member color
     */
    eProsima_user_DllExport uint8_t color() const
    {
        return m_color;
    }

    /*!
     * @brief This function returns a reference to member color
     * @return Reference to member color
     */
    eProsima_user_DllExport uint8_t& color()
    {
        return m_color;
    }



private:

    uint8_t m_color{0};

};
/*!
 * @brief This class represents the structure AppendableStruct defined by the user in the IDL file.
 * @ingroup extensibility_struct
 */
class AppendableStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AppendableStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AppendableStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AppendableStruct that will be copied.
     */
    eProsima_user_DllExport AppendableStruct(
            const AppendableStruct& x)
    {
                    m_color = x.m_color;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AppendableStruct that will be copied.
     */
    eProsima_user_DllExport AppendableStruct(
            AppendableStruct&& x) noexcept
    {
        m_color = x.m_color;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AppendableStruct that will be copied.
     */
    eProsima_user_DllExport AppendableStruct& operator =(
            const AppendableStruct& x)
    {

                    m_color = x.m_color;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AppendableStruct that will be copied.
     */
    eProsima_user_DllExport AppendableStruct& operator =(
            AppendableStruct&& x) noexcept
    {

        m_color = x.m_color;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x AppendableStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AppendableStruct& x) const
    {
        return (m_color == x.m_color);
    }

    /*!
     * @brief Comparison operator.
     * @param x AppendableStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AppendableStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member color
     * @param _color New value for member color
     */
    eProsima_user_DllExport void color(
            uint8_t _color)
    {
        m_color = _color;
    }

    /*!
     * @brief This function returns the value of member color
     * @return Value of member color
     */
    eProsima_user_DllExport uint8_t color() const
    {
        return m_color;
    }

    /*!
     * @brief This function returns a reference to member color
     * @return Reference to member color
     */
    eProsima_user_DllExport uint8_t& color()
    {
        return m_color;
    }



private:

    uint8_t m_color{0};

};
/*!
 * @brief This class represents the structure extensibility_struct defined by the user in the IDL file.
 * @ingroup extensibility_struct
 */
class extensibility_struct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport extensibility_struct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~extensibility_struct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object extensibility_struct that will be copied.
     */
    eProsima_user_DllExport extensibility_struct(
            const extensibility_struct& x)
    {
                    m_red = x.m_red;

                    m_blue = x.m_blue;

                    m_green = x.m_green;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object extensibility_struct that will be copied.
     */
    eProsima_user_DllExport extensibility_struct(
            extensibility_struct&& x) noexcept
    {
        m_red = std::move(x.m_red);
        m_blue = std::move(x.m_blue);
        m_green = std::move(x.m_green);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object extensibility_struct that will be copied.
     */
    eProsima_user_DllExport extensibility_struct& operator =(
            const extensibility_struct& x)
    {

                    m_red = x.m_red;

                    m_blue = x.m_blue;

                    m_green = x.m_green;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object extensibility_struct that will be copied.
     */
    eProsima_user_DllExport extensibility_struct& operator =(
            extensibility_struct&& x) noexcept
    {

        m_red = std::move(x.m_red);
        m_blue = std::move(x.m_blue);
        m_green = std::move(x.m_green);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x extensibility_struct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const extensibility_struct& x) const
    {
        return (m_red == x.m_red &&
           m_blue == x.m_blue &&
           m_green == x.m_green);
    }

    /*!
     * @brief Comparison operator.
     * @param x extensibility_struct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const extensibility_struct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member red
     * @param _red New value to be copied in member red
     */
    eProsima_user_DllExport void red(
            const FinalStruct& _red)
    {
        m_red = _red;
    }

    /*!
     * @brief This function moves the value in member red
     * @param _red New value to be moved in member red
     */
    eProsima_user_DllExport void red(
            FinalStruct&& _red)
    {
        m_red = std::move(_red);
    }

    /*!
     * @brief This function returns a constant reference to member red
     * @return Constant reference to member red
     */
    eProsima_user_DllExport const FinalStruct& red() const
    {
        return m_red;
    }

    /*!
     * @brief This function returns a reference to member red
     * @return Reference to member red
     */
    eProsima_user_DllExport FinalStruct& red()
    {
        return m_red;
    }


    /*!
     * @brief This function copies the value in member blue
     * @param _blue New value to be copied in member blue
     */
    eProsima_user_DllExport void blue(
            const MutableStruct& _blue)
    {
        m_blue = _blue;
    }

    /*!
     * @brief This function moves the value in member blue
     * @param _blue New value to be moved in member blue
     */
    eProsima_user_DllExport void blue(
            MutableStruct&& _blue)
    {
        m_blue = std::move(_blue);
    }

    /*!
     * @brief This function returns a constant reference to member blue
     * @return Constant reference to member blue
     */
    eProsima_user_DllExport const MutableStruct& blue() const
    {
        return m_blue;
    }

    /*!
     * @brief This function returns a reference to member blue
     * @return Reference to member blue
     */
    eProsima_user_DllExport MutableStruct& blue()
    {
        return m_blue;
    }


    /*!
     * @brief This function copies the value in member green
     * @param _green New value to be copied in member green
     */
    eProsima_user_DllExport void green(
            const AppendableStruct& _green)
    {
        m_green = _green;
    }

    /*!
     * @brief This function moves the value in member green
     * @param _green New value to be moved in member green
     */
    eProsima_user_DllExport void green(
            AppendableStruct&& _green)
    {
        m_green = std::move(_green);
    }

    /*!
     * @brief This function returns a constant reference to member green
     * @return Constant reference to member green
     */
    eProsima_user_DllExport const AppendableStruct& green() const
    {
        return m_green;
    }

    /*!
     * @brief This function returns a reference to member green
     * @return Reference to member green
     */
    eProsima_user_DllExport AppendableStruct& green()
    {
        return m_green;
    }



private:

    FinalStruct m_red;
    MutableStruct m_blue;
    AppendableStruct m_green;

};

#endif // _FAST_DDS_GENERATED_EXTENSIBILITY_STRUCT_HPP_


