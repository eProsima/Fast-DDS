// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file inheritance_struct.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_INHERITANCE_STRUCT_HPP_
#define _FAST_DDS_GENERATED_INHERITANCE_STRUCT_HPP_

#include <cstdint>
#include <utility>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(INHERITANCE_STRUCT_SOURCE)
#define INHERITANCE_STRUCT_DllAPI __declspec( dllexport )
#else
#define INHERITANCE_STRUCT_DllAPI __declspec( dllimport )
#endif // INHERITANCE_STRUCT_SOURCE
#else
#define INHERITANCE_STRUCT_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define INHERITANCE_STRUCT_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the structure GreatgrandfatherStruct defined by the user in the IDL file.
 * @ingroup inheritance_struct
 */
class GreatgrandfatherStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport GreatgrandfatherStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~GreatgrandfatherStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object GreatgrandfatherStruct that will be copied.
     */
    eProsima_user_DllExport GreatgrandfatherStruct(
            const GreatgrandfatherStruct& x)
    {
                    m_greatgrandfather = x.m_greatgrandfather;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object GreatgrandfatherStruct that will be copied.
     */
    eProsima_user_DllExport GreatgrandfatherStruct(
            GreatgrandfatherStruct&& x) noexcept
    {
        m_greatgrandfather = x.m_greatgrandfather;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object GreatgrandfatherStruct that will be copied.
     */
    eProsima_user_DllExport GreatgrandfatherStruct& operator =(
            const GreatgrandfatherStruct& x)
    {

                    m_greatgrandfather = x.m_greatgrandfather;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object GreatgrandfatherStruct that will be copied.
     */
    eProsima_user_DllExport GreatgrandfatherStruct& operator =(
            GreatgrandfatherStruct&& x) noexcept
    {

        m_greatgrandfather = x.m_greatgrandfather;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x GreatgrandfatherStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const GreatgrandfatherStruct& x) const
    {
        return (m_greatgrandfather == x.m_greatgrandfather);
    }

    /*!
     * @brief Comparison operator.
     * @param x GreatgrandfatherStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const GreatgrandfatherStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member greatgrandfather
     * @param _greatgrandfather New value for member greatgrandfather
     */
    eProsima_user_DllExport void greatgrandfather(
            int32_t _greatgrandfather)
    {
        m_greatgrandfather = _greatgrandfather;
    }

    /*!
     * @brief This function returns the value of member greatgrandfather
     * @return Value of member greatgrandfather
     */
    eProsima_user_DllExport int32_t greatgrandfather() const
    {
        return m_greatgrandfather;
    }

    /*!
     * @brief This function returns a reference to member greatgrandfather
     * @return Reference to member greatgrandfather
     */
    eProsima_user_DllExport int32_t& greatgrandfather()
    {
        return m_greatgrandfather;
    }



private:

    int32_t m_greatgrandfather{0};

};
/*!
 * @brief This class represents the structure GrandfatherStruct defined by the user in the IDL file.
 * @ingroup inheritance_struct
 */
class GrandfatherStruct : public GreatgrandfatherStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport GrandfatherStruct()
        : GreatgrandfatherStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~GrandfatherStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object GrandfatherStruct that will be copied.
     */
    eProsima_user_DllExport GrandfatherStruct(
            const GrandfatherStruct& x)
        : GreatgrandfatherStruct(x)
    {
                    m_grandfather = x.m_grandfather;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object GrandfatherStruct that will be copied.
     */
    eProsima_user_DllExport GrandfatherStruct(
            GrandfatherStruct&& x) noexcept
        : GreatgrandfatherStruct(std::move(x))

    {
        m_grandfather = x.m_grandfather;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object GrandfatherStruct that will be copied.
     */
    eProsima_user_DllExport GrandfatherStruct& operator =(
            const GrandfatherStruct& x)
    {
        GreatgrandfatherStruct::operator =(x);

                    m_grandfather = x.m_grandfather;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object GrandfatherStruct that will be copied.
     */
    eProsima_user_DllExport GrandfatherStruct& operator =(
            GrandfatherStruct&& x) noexcept
    {
        GreatgrandfatherStruct::operator =(std::move(x));

        m_grandfather = x.m_grandfather;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x GrandfatherStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const GrandfatherStruct& x) const
    {
        if (GreatgrandfatherStruct::operator !=(x))
                {
                    return false;
                }
        return (m_grandfather == x.m_grandfather);
    }

    /*!
     * @brief Comparison operator.
     * @param x GrandfatherStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const GrandfatherStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member grandfather
     * @param _grandfather New value for member grandfather
     */
    eProsima_user_DllExport void grandfather(
            int32_t _grandfather)
    {
        m_grandfather = _grandfather;
    }

    /*!
     * @brief This function returns the value of member grandfather
     * @return Value of member grandfather
     */
    eProsima_user_DllExport int32_t grandfather() const
    {
        return m_grandfather;
    }

    /*!
     * @brief This function returns a reference to member grandfather
     * @return Reference to member grandfather
     */
    eProsima_user_DllExport int32_t& grandfather()
    {
        return m_grandfather;
    }



private:

    int32_t m_grandfather{0};

};
/*!
 * @brief This class represents the structure FatherStruct defined by the user in the IDL file.
 * @ingroup inheritance_struct
 */
class FatherStruct : public GrandfatherStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport FatherStruct()
        : GrandfatherStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~FatherStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object FatherStruct that will be copied.
     */
    eProsima_user_DllExport FatherStruct(
            const FatherStruct& x)
        : GrandfatherStruct(x)
    {
                    m_father = x.m_father;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object FatherStruct that will be copied.
     */
    eProsima_user_DllExport FatherStruct(
            FatherStruct&& x) noexcept
        : GrandfatherStruct(std::move(x))

    {
        m_father = x.m_father;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object FatherStruct that will be copied.
     */
    eProsima_user_DllExport FatherStruct& operator =(
            const FatherStruct& x)
    {
        GrandfatherStruct::operator =(x);

                    m_father = x.m_father;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object FatherStruct that will be copied.
     */
    eProsima_user_DllExport FatherStruct& operator =(
            FatherStruct&& x) noexcept
    {
        GrandfatherStruct::operator =(std::move(x));

        m_father = x.m_father;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x FatherStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const FatherStruct& x) const
    {
        if (GrandfatherStruct::operator !=(x))
                {
                    return false;
                }
        return (m_father == x.m_father);
    }

    /*!
     * @brief Comparison operator.
     * @param x FatherStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const FatherStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member father
     * @param _father New value for member father
     */
    eProsima_user_DllExport void father(
            int32_t _father)
    {
        m_father = _father;
    }

    /*!
     * @brief This function returns the value of member father
     * @return Value of member father
     */
    eProsima_user_DllExport int32_t father() const
    {
        return m_father;
    }

    /*!
     * @brief This function returns a reference to member father
     * @return Reference to member father
     */
    eProsima_user_DllExport int32_t& father()
    {
        return m_father;
    }



private:

    int32_t m_father{0};

};
/*!
 * @brief This class represents the structure SonStruct defined by the user in the IDL file.
 * @ingroup inheritance_struct
 */
class SonStruct : public FatherStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SonStruct()
        : FatherStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SonStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SonStruct that will be copied.
     */
    eProsima_user_DllExport SonStruct(
            const SonStruct& x)
        : FatherStruct(x)
    {
                    m_son = x.m_son;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SonStruct that will be copied.
     */
    eProsima_user_DllExport SonStruct(
            SonStruct&& x) noexcept
        : FatherStruct(std::move(x))

    {
        m_son = x.m_son;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SonStruct that will be copied.
     */
    eProsima_user_DllExport SonStruct& operator =(
            const SonStruct& x)
    {
        FatherStruct::operator =(x);

                    m_son = x.m_son;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SonStruct that will be copied.
     */
    eProsima_user_DllExport SonStruct& operator =(
            SonStruct&& x) noexcept
    {
        FatherStruct::operator =(std::move(x));

        m_son = x.m_son;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x SonStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SonStruct& x) const
    {
        if (FatherStruct::operator !=(x))
                {
                    return false;
                }
        return (m_son == x.m_son);
    }

    /*!
     * @brief Comparison operator.
     * @param x SonStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SonStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member son
     * @param _son New value for member son
     */
    eProsima_user_DllExport void son(
            int32_t _son)
    {
        m_son = _son;
    }

    /*!
     * @brief This function returns the value of member son
     * @return Value of member son
     */
    eProsima_user_DllExport int32_t son() const
    {
        return m_son;
    }

    /*!
     * @brief This function returns a reference to member son
     * @return Reference to member son
     */
    eProsima_user_DllExport int32_t& son()
    {
        return m_son;
    }



private:

    int32_t m_son{0};

};
/*!
 * @brief This class represents the structure GrandsonStruct defined by the user in the IDL file.
 * @ingroup inheritance_struct
 */
class GrandsonStruct : public SonStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport GrandsonStruct()
        : SonStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~GrandsonStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object GrandsonStruct that will be copied.
     */
    eProsima_user_DllExport GrandsonStruct(
            const GrandsonStruct& x)
        : SonStruct(x)
    {
                    m_grandson = x.m_grandson;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object GrandsonStruct that will be copied.
     */
    eProsima_user_DllExport GrandsonStruct(
            GrandsonStruct&& x) noexcept
        : SonStruct(std::move(x))

    {
        m_grandson = x.m_grandson;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object GrandsonStruct that will be copied.
     */
    eProsima_user_DllExport GrandsonStruct& operator =(
            const GrandsonStruct& x)
    {
        SonStruct::operator =(x);

                    m_grandson = x.m_grandson;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object GrandsonStruct that will be copied.
     */
    eProsima_user_DllExport GrandsonStruct& operator =(
            GrandsonStruct&& x) noexcept
    {
        SonStruct::operator =(std::move(x));

        m_grandson = x.m_grandson;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x GrandsonStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const GrandsonStruct& x) const
    {
        if (SonStruct::operator !=(x))
                {
                    return false;
                }
        return (m_grandson == x.m_grandson);
    }

    /*!
     * @brief Comparison operator.
     * @param x GrandsonStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const GrandsonStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member grandson
     * @param _grandson New value for member grandson
     */
    eProsima_user_DllExport void grandson(
            int32_t _grandson)
    {
        m_grandson = _grandson;
    }

    /*!
     * @brief This function returns the value of member grandson
     * @return Value of member grandson
     */
    eProsima_user_DllExport int32_t grandson() const
    {
        return m_grandson;
    }

    /*!
     * @brief This function returns a reference to member grandson
     * @return Reference to member grandson
     */
    eProsima_user_DllExport int32_t& grandson()
    {
        return m_grandson;
    }



private:

    int32_t m_grandson{0};

};
/*!
 * @brief This class represents the structure inheritance_struct defined by the user in the IDL file.
 * @ingroup inheritance_struct
 */
class inheritance_struct : public GrandsonStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport inheritance_struct()
        : GrandsonStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~inheritance_struct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object inheritance_struct that will be copied.
     */
    eProsima_user_DllExport inheritance_struct(
            const inheritance_struct& x)
        : GrandsonStruct(x)
    {
                    m_value = x.m_value;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object inheritance_struct that will be copied.
     */
    eProsima_user_DllExport inheritance_struct(
            inheritance_struct&& x) noexcept
        : GrandsonStruct(std::move(x))

    {
        m_value = x.m_value;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object inheritance_struct that will be copied.
     */
    eProsima_user_DllExport inheritance_struct& operator =(
            const inheritance_struct& x)
    {
        GrandsonStruct::operator =(x);

                    m_value = x.m_value;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object inheritance_struct that will be copied.
     */
    eProsima_user_DllExport inheritance_struct& operator =(
            inheritance_struct&& x) noexcept
    {
        GrandsonStruct::operator =(std::move(x));

        m_value = x.m_value;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x inheritance_struct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const inheritance_struct& x) const
    {
        if (GrandsonStruct::operator !=(x))
                {
                    return false;
                }
        return (m_value == x.m_value);
    }

    /*!
     * @brief Comparison operator.
     * @param x inheritance_struct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const inheritance_struct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member value
     * @param _value New value for member value
     */
    eProsima_user_DllExport void value(
            int32_t _value)
    {
        m_value = _value;
    }

    /*!
     * @brief This function returns the value of member value
     * @return Value of member value
     */
    eProsima_user_DllExport int32_t value() const
    {
        return m_value;
    }

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport int32_t& value()
    {
        return m_value;
    }



private:

    int32_t m_value{0};

};

#endif // _FAST_DDS_GENERATED_INHERITANCE_STRUCT_HPP_


