// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file key_struct.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_KEY_STRUCT_HPP_
#define _FAST_DDS_GENERATED_KEY_STRUCT_HPP_

#include <cstdint>
#include <utility>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(KEY_STRUCT_SOURCE)
#define KEY_STRUCT_DllAPI __declspec( dllexport )
#else
#define KEY_STRUCT_DllAPI __declspec( dllimport )
#endif // KEY_STRUCT_SOURCE
#else
#define KEY_STRUCT_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define KEY_STRUCT_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the structure key_struct defined by the user in the IDL file.
 * @ingroup key_struct
 */
class key_struct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport key_struct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~key_struct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object key_struct that will be copied.
     */
    eProsima_user_DllExport key_struct(
            const key_struct& x)
    {
                    m_small_num = x.m_small_num;

                    m_big_num = x.m_big_num;

                    m_huge_num = x.m_huge_num;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object key_struct that will be copied.
     */
    eProsima_user_DllExport key_struct(
            key_struct&& x) noexcept
    {
        m_small_num = x.m_small_num;
        m_big_num = x.m_big_num;
        m_huge_num = x.m_huge_num;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object key_struct that will be copied.
     */
    eProsima_user_DllExport key_struct& operator =(
            const key_struct& x)
    {

                    m_small_num = x.m_small_num;

                    m_big_num = x.m_big_num;

                    m_huge_num = x.m_huge_num;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object key_struct that will be copied.
     */
    eProsima_user_DllExport key_struct& operator =(
            key_struct&& x) noexcept
    {

        m_small_num = x.m_small_num;
        m_big_num = x.m_big_num;
        m_huge_num = x.m_huge_num;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x key_struct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const key_struct& x) const
    {
        return (m_small_num == x.m_small_num &&
           m_big_num == x.m_big_num &&
           m_huge_num == x.m_huge_num);
    }

    /*!
     * @brief Comparison operator.
     * @param x key_struct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const key_struct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member small_num
     * @param _small_num New value for member small_num
     */
    eProsima_user_DllExport void small_num(
            int16_t _small_num)
    {
        m_small_num = _small_num;
    }

    /*!
     * @brief This function returns the value of member small_num
     * @return Value of member small_num
     */
    eProsima_user_DllExport int16_t small_num() const
    {
        return m_small_num;
    }

    /*!
     * @brief This function returns a reference to member small_num
     * @return Reference to member small_num
     */
    eProsima_user_DllExport int16_t& small_num()
    {
        return m_small_num;
    }


    /*!
     * @brief This function sets a value in member big_num
     * @param _big_num New value for member big_num
     */
    eProsima_user_DllExport void big_num(
            int32_t _big_num)
    {
        m_big_num = _big_num;
    }

    /*!
     * @brief This function returns the value of member big_num
     * @return Value of member big_num
     */
    eProsima_user_DllExport int32_t big_num() const
    {
        return m_big_num;
    }

    /*!
     * @brief This function returns a reference to member big_num
     * @return Reference to member big_num
     */
    eProsima_user_DllExport int32_t& big_num()
    {
        return m_big_num;
    }


    /*!
     * @brief This function sets a value in member huge_num
     * @param _huge_num New value for member huge_num
     */
    eProsima_user_DllExport void huge_num(
            uint64_t _huge_num)
    {
        m_huge_num = _huge_num;
    }

    /*!
     * @brief This function returns the value of member huge_num
     * @return Value of member huge_num
     */
    eProsima_user_DllExport uint64_t huge_num() const
    {
        return m_huge_num;
    }

    /*!
     * @brief This function returns a reference to member huge_num
     * @return Reference to member huge_num
     */
    eProsima_user_DllExport uint64_t& huge_num()
    {
        return m_huge_num;
    }



private:

    int16_t m_small_num{0};
    int32_t m_big_num{0};
    uint64_t m_huge_num{0};

};

#endif // _FAST_DDS_GENERATED_KEY_STRUCT_HPP_


