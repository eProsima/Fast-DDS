// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file nested_struct.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_NESTED_STRUCT_HPP_
#define _FAST_DDS_GENERATED_NESTED_STRUCT_HPP_

#include <cstdint>
#include <utility>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(NESTED_STRUCT_SOURCE)
#define NESTED_STRUCT_DllAPI __declspec( dllexport )
#else
#define NESTED_STRUCT_DllAPI __declspec( dllimport )
#endif // NESTED_STRUCT_SOURCE
#else
#define NESTED_STRUCT_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define NESTED_STRUCT_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the structure FirstStruct defined by the user in the IDL file.
 * @ingroup nested_struct
 */
class FirstStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport FirstStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~FirstStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object FirstStruct that will be copied.
     */
    eProsima_user_DllExport FirstStruct(
            const FirstStruct& x)
    {
                    m_value = x.m_value;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object FirstStruct that will be copied.
     */
    eProsima_user_DllExport FirstStruct(
            FirstStruct&& x) noexcept
    {
        m_value = x.m_value;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object FirstStruct that will be copied.
     */
    eProsima_user_DllExport FirstStruct& operator =(
            const FirstStruct& x)
    {

                    m_value = x.m_value;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object FirstStruct that will be copied.
     */
    eProsima_user_DllExport FirstStruct& operator =(
            FirstStruct&& x) noexcept
    {

        m_value = x.m_value;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x FirstStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const FirstStruct& x) const
    {
        return (m_value == x.m_value);
    }

    /*!
     * @brief Comparison operator.
     * @param x FirstStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const FirstStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member value
     * @param _value New value for member value
     */
    eProsima_user_DllExport void value(
            int32_t _value)
    {
        m_value = _value;
    }

    /*!
     * @brief This function returns the value of member value
     * @return Value of member value
     */
    eProsima_user_DllExport int32_t value() const
    {
        return m_value;
    }

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport int32_t& value()
    {
        return m_value;
    }



private:

    int32_t m_value{0};

};
/*!
 * @brief This class represents the structure SecondStruct defined by the user in the IDL file.
 * @ingroup nested_struct
 */
class SecondStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SecondStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SecondStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SecondStruct that will be copied.
     */
    eProsima_user_DllExport SecondStruct(
            const SecondStruct& x)
    {
                    m_first = x.m_first;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SecondStruct that will be copied.
     */
    eProsima_user_DllExport SecondStruct(
            SecondStruct&& x) noexcept
    {
        m_first = std::move(x.m_first);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SecondStruct that will be copied.
     */
    eProsima_user_DllExport SecondStruct& operator =(
            const SecondStruct& x)
    {

                    m_first = x.m_first;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SecondStruct that will be copied.
     */
    eProsima_user_DllExport SecondStruct& operator =(
            SecondStruct&& x) noexcept
    {

        m_first = std::move(x.m_first);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x SecondStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SecondStruct& x) const
    {
        return (m_first == x.m_first);
    }

    /*!
     * @brief Comparison operator.
     * @param x SecondStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SecondStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member first
     * @param _first New value to be copied in member first
     */
    eProsima_user_DllExport void first(
            const FirstStruct& _first)
    {
        m_first = _first;
    }

    /*!
     * @brief This function moves the value in member first
     * @param _first New value to be moved in member first
     */
    eProsima_user_DllExport void first(
            FirstStruct&& _first)
    {
        m_first = std::move(_first);
    }

    /*!
     * @brief This function returns a constant reference to member first
     * @return Constant reference to member first
     */
    eProsima_user_DllExport const FirstStruct& first() const
    {
        return m_first;
    }

    /*!
     * @brief This function returns a reference to member first
     * @return Reference to member first
     */
    eProsima_user_DllExport FirstStruct& first()
    {
        return m_first;
    }



private:

    FirstStruct m_first;

};
/*!
 * @brief This class represents the structure ThirdStruct defined by the user in the IDL file.
 * @ingroup nested_struct
 */
class ThirdStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ThirdStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ThirdStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ThirdStruct that will be copied.
     */
    eProsima_user_DllExport ThirdStruct(
            const ThirdStruct& x)
    {
                    m_second = x.m_second;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ThirdStruct that will be copied.
     */
    eProsima_user_DllExport ThirdStruct(
            ThirdStruct&& x) noexcept
    {
        m_second = std::move(x.m_second);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ThirdStruct that will be copied.
     */
    eProsima_user_DllExport ThirdStruct& operator =(
            const ThirdStruct& x)
    {

                    m_second = x.m_second;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ThirdStruct that will be copied.
     */
    eProsima_user_DllExport ThirdStruct& operator =(
            ThirdStruct&& x) noexcept
    {

        m_second = std::move(x.m_second);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x ThirdStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ThirdStruct& x) const
    {
        return (m_second == x.m_second);
    }

    /*!
     * @brief Comparison operator.
     * @param x ThirdStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ThirdStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member second
     * @param _second New value to be copied in member second
     */
    eProsima_user_DllExport void second(
            const SecondStruct& _second)
    {
        m_second = _second;
    }

    /*!
     * @brief This function moves the value in member second
     * @param _second New value to be moved in member second
     */
    eProsima_user_DllExport void second(
            SecondStruct&& _second)
    {
        m_second = std::move(_second);
    }

    /*!
     * @brief This function returns a constant reference to member second
     * @return Constant reference to member second
     */
    eProsima_user_DllExport const SecondStruct& second() const
    {
        return m_second;
    }

    /*!
     * @brief This function returns a reference to member second
     * @return Reference to member second
     */
    eProsima_user_DllExport SecondStruct& second()
    {
        return m_second;
    }



private:

    SecondStruct m_second;

};
/*!
 * @brief This class represents the structure FourthStruct defined by the user in the IDL file.
 * @ingroup nested_struct
 */
class FourthStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport FourthStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~FourthStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object FourthStruct that will be copied.
     */
    eProsima_user_DllExport FourthStruct(
            const FourthStruct& x)
    {
                    m_third = x.m_third;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object FourthStruct that will be copied.
     */
    eProsima_user_DllExport FourthStruct(
            FourthStruct&& x) noexcept
    {
        m_third = std::move(x.m_third);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object FourthStruct that will be copied.
     */
    eProsima_user_DllExport FourthStruct& operator =(
            const FourthStruct& x)
    {

                    m_third = x.m_third;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object FourthStruct that will be copied.
     */
    eProsima_user_DllExport FourthStruct& operator =(
            FourthStruct&& x) noexcept
    {

        m_third = std::move(x.m_third);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x FourthStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const FourthStruct& x) const
    {
        return (m_third == x.m_third);
    }

    /*!
     * @brief Comparison operator.
     * @param x FourthStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const FourthStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member third
     * @param _third New value to be copied in member third
     */
    eProsima_user_DllExport void third(
            const ThirdStruct& _third)
    {
        m_third = _third;
    }

    /*!
     * @brief This function moves the value in member third
     * @param _third New value to be moved in member third
     */
    eProsima_user_DllExport void third(
            ThirdStruct&& _third)
    {
        m_third = std::move(_third);
    }

    /*!
     * @brief This function returns a constant reference to member third
     * @return Constant reference to member third
     */
    eProsima_user_DllExport const ThirdStruct& third() const
    {
        return m_third;
    }

    /*!
     * @brief This function returns a reference to member third
     * @return Reference to member third
     */
    eProsima_user_DllExport ThirdStruct& third()
    {
        return m_third;
    }



private:

    ThirdStruct m_third;

};
/*!
 * @brief This class represents the structure FifthStruct defined by the user in the IDL file.
 * @ingroup nested_struct
 */
class FifthStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport FifthStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~FifthStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object FifthStruct that will be copied.
     */
    eProsima_user_DllExport FifthStruct(
            const FifthStruct& x)
    {
                    m_fourth = x.m_fourth;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object FifthStruct that will be copied.
     */
    eProsima_user_DllExport FifthStruct(
            FifthStruct&& x) noexcept
    {
        m_fourth = std::move(x.m_fourth);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object FifthStruct that will be copied.
     */
    eProsima_user_DllExport FifthStruct& operator =(
            const FifthStruct& x)
    {

                    m_fourth = x.m_fourth;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object FifthStruct that will be copied.
     */
    eProsima_user_DllExport FifthStruct& operator =(
            FifthStruct&& x) noexcept
    {

        m_fourth = std::move(x.m_fourth);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x FifthStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const FifthStruct& x) const
    {
        return (m_fourth == x.m_fourth);
    }

    /*!
     * @brief Comparison operator.
     * @param x FifthStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const FifthStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member fourth
     * @param _fourth New value to be copied in member fourth
     */
    eProsima_user_DllExport void fourth(
            const FourthStruct& _fourth)
    {
        m_fourth = _fourth;
    }

    /*!
     * @brief This function moves the value in member fourth
     * @param _fourth New value to be moved in member fourth
     */
    eProsima_user_DllExport void fourth(
            FourthStruct&& _fourth)
    {
        m_fourth = std::move(_fourth);
    }

    /*!
     * @brief This function returns a constant reference to member fourth
     * @return Constant reference to member fourth
     */
    eProsima_user_DllExport const FourthStruct& fourth() const
    {
        return m_fourth;
    }

    /*!
     * @brief This function returns a reference to member fourth
     * @return Reference to member fourth
     */
    eProsima_user_DllExport FourthStruct& fourth()
    {
        return m_fourth;
    }



private:

    FourthStruct m_fourth;

};
/*!
 * @brief This class represents the structure nested_struct defined by the user in the IDL file.
 * @ingroup nested_struct
 */
class nested_struct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport nested_struct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~nested_struct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object nested_struct that will be copied.
     */
    eProsima_user_DllExport nested_struct(
            const nested_struct& x)
    {
                    m_first = x.m_first;

                    m_second = x.m_second;

                    m_third = x.m_third;

                    m_fourth = x.m_fourth;

                    m_fifth = x.m_fifth;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object nested_struct that will be copied.
     */
    eProsima_user_DllExport nested_struct(
            nested_struct&& x) noexcept
    {
        m_first = std::move(x.m_first);
        m_second = std::move(x.m_second);
        m_third = std::move(x.m_third);
        m_fourth = std::move(x.m_fourth);
        m_fifth = std::move(x.m_fifth);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object nested_struct that will be copied.
     */
    eProsima_user_DllExport nested_struct& operator =(
            const nested_struct& x)
    {

                    m_first = x.m_first;

                    m_second = x.m_second;

                    m_third = x.m_third;

                    m_fourth = x.m_fourth;

                    m_fifth = x.m_fifth;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object nested_struct that will be copied.
     */
    eProsima_user_DllExport nested_struct& operator =(
            nested_struct&& x) noexcept
    {

        m_first = std::move(x.m_first);
        m_second = std::move(x.m_second);
        m_third = std::move(x.m_third);
        m_fourth = std::move(x.m_fourth);
        m_fifth = std::move(x.m_fifth);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x nested_struct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const nested_struct& x) const
    {
        return (m_first == x.m_first &&
           m_second == x.m_second &&
           m_third == x.m_third &&
           m_fourth == x.m_fourth &&
           m_fifth == x.m_fifth);
    }

    /*!
     * @brief Comparison operator.
     * @param x nested_struct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const nested_struct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member first
     * @param _first New value to be copied in member first
     */
    eProsima_user_DllExport void first(
            const FirstStruct& _first)
    {
        m_first = _first;
    }

    /*!
     * @brief This function moves the value in member first
     * @param _first New value to be moved in member first
     */
    eProsima_user_DllExport void first(
            FirstStruct&& _first)
    {
        m_first = std::move(_first);
    }

    /*!
     * @brief This function returns a constant reference to member first
     * @return Constant reference to member first
     */
    eProsima_user_DllExport const FirstStruct& first() const
    {
        return m_first;
    }

    /*!
     * @brief This function returns a reference to member first
     * @return Reference to member first
     */
    eProsima_user_DllExport FirstStruct& first()
    {
        return m_first;
    }


    /*!
     * @brief This function copies the value in member second
     * @param _second New value to be copied in member second
     */
    eProsima_user_DllExport void second(
            const SecondStruct& _second)
    {
        m_second = _second;
    }

    /*!
     * @brief This function moves the value in member second
     * @param _second New value to be moved in member second
     */
    eProsima_user_DllExport void second(
            SecondStruct&& _second)
    {
        m_second = std::move(_second);
    }

    /*!
     * @brief This function returns a constant reference to member second
     * @return Constant reference to member second
     */
    eProsima_user_DllExport const SecondStruct& second() const
    {
        return m_second;
    }

    /*!
     * @brief This function returns a reference to member second
     * @return Reference to member second
     */
    eProsima_user_DllExport SecondStruct& second()
    {
        return m_second;
    }


    /*!
     * @brief This function copies the value in member third
     * @param _third New value to be copied in member third
     */
    eProsima_user_DllExport void third(
            const ThirdStruct& _third)
    {
        m_third = _third;
    }

    /*!
     * @brief This function moves the value in member third
     * @param _third New value to be moved in member third
     */
    eProsima_user_DllExport void third(
            ThirdStruct&& _third)
    {
        m_third = std::move(_third);
    }

    /*!
     * @brief This function returns a constant reference to member third
     * @return Constant reference to member third
     */
    eProsima_user_DllExport const ThirdStruct& third() const
    {
        return m_third;
    }

    /*!
     * @brief This function returns a reference to member third
     * @return Reference to member third
     */
    eProsima_user_DllExport ThirdStruct& third()
    {
        return m_third;
    }


    /*!
     * @brief This function copies the value in member fourth
     * @param _fourth New value to be copied in member fourth
     */
    eProsima_user_DllExport void fourth(
            const FourthStruct& _fourth)
    {
        m_fourth = _fourth;
    }

    /*!
     * @brief This function moves the value in member fourth
     * @param _fourth New value to be moved in member fourth
     */
    eProsima_user_DllExport void fourth(
            FourthStruct&& _fourth)
    {
        m_fourth = std::move(_fourth);
    }

    /*!
     * @brief This function returns a constant reference to member fourth
     * @return Constant reference to member fourth
     */
    eProsima_user_DllExport const FourthStruct& fourth() const
    {
        return m_fourth;
    }

    /*!
     * @brief This function returns a reference to member fourth
     * @return Reference to member fourth
     */
    eProsima_user_DllExport FourthStruct& fourth()
    {
        return m_fourth;
    }


    /*!
     * @brief This function copies the value in member fifth
     * @param _fifth New value to be copied in member fifth
     */
    eProsima_user_DllExport void fifth(
            const FifthStruct& _fifth)
    {
        m_fifth = _fifth;
    }

    /*!
     * @brief This function moves the value in member fifth
     * @param _fifth New value to be moved in member fifth
     */
    eProsima_user_DllExport void fifth(
            FifthStruct&& _fifth)
    {
        m_fifth = std::move(_fifth);
    }

    /*!
     * @brief This function returns a constant reference to member fifth
     * @return Constant reference to member fifth
     */
    eProsima_user_DllExport const FifthStruct& fifth() const
    {
        return m_fifth;
    }

    /*!
     * @brief This function returns a reference to member fifth
     * @return Reference to member fifth
     */
    eProsima_user_DllExport FifthStruct& fifth()
    {
        return m_fifth;
    }



private:

    FirstStruct m_first;
    SecondStruct m_second;
    ThirdStruct m_third;
    FourthStruct m_fourth;
    FifthStruct m_fifth;

};

#endif // _FAST_DDS_GENERATED_NESTED_STRUCT_HPP_


