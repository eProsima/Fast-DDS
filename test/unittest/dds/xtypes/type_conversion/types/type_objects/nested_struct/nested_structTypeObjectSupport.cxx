// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file nested_structTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "nested_structTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "nested_struct.hpp"


using namespace eprosima::fastdds::dds::xtypes;

// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_FirstStruct_type_identifier(
        TypeIdentifierPair& type_ids_FirstStruct)
{

    ReturnCode_t return_code_FirstStruct {eprosima::fastdds::dds::RETCODE_OK};
    return_code_FirstStruct =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "FirstStruct", type_ids_FirstStruct);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_FirstStruct)
    {
        StructTypeFlag struct_flags_FirstStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_FirstStruct = "FirstStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_FirstStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_FirstStruct;
        CompleteTypeDetail detail_FirstStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_FirstStruct, ann_custom_FirstStruct, type_name_FirstStruct.to_string());
        CompleteStructHeader header_FirstStruct;
        header_FirstStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_FirstStruct);
        CompleteStructMemberSeq member_seq_FirstStruct;
        {
            TypeIdentifierPair type_ids_value;
            ReturnCode_t return_code_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "value Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_value = 0x00000000;
            bool common_value_ec {false};
            CommonStructMember common_value {TypeObjectUtils::build_common_struct_member(member_id_value, member_flags_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, common_value_ec))};
            if (!common_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_value = "value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_value;
            ann_custom_FirstStruct.reset();
            CompleteMemberDetail detail_value = TypeObjectUtils::build_complete_member_detail(name_value, member_ann_builtin_value, ann_custom_FirstStruct);
            CompleteStructMember member_value = TypeObjectUtils::build_complete_struct_member(common_value, detail_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_FirstStruct, member_value);
        }
        CompleteStructType struct_type_FirstStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_FirstStruct, header_FirstStruct, member_seq_FirstStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_FirstStruct, type_name_FirstStruct.to_string(), type_ids_FirstStruct))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "FirstStruct already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_SecondStruct_type_identifier(
        TypeIdentifierPair& type_ids_SecondStruct)
{

    ReturnCode_t return_code_SecondStruct {eprosima::fastdds::dds::RETCODE_OK};
    return_code_SecondStruct =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "SecondStruct", type_ids_SecondStruct);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_SecondStruct)
    {
        StructTypeFlag struct_flags_SecondStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_SecondStruct = "SecondStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SecondStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SecondStruct;
        CompleteTypeDetail detail_SecondStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SecondStruct, ann_custom_SecondStruct, type_name_SecondStruct.to_string());
        CompleteStructHeader header_SecondStruct;
        header_SecondStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SecondStruct);
        CompleteStructMemberSeq member_seq_SecondStruct;
        {
            TypeIdentifierPair type_ids_first;
            ReturnCode_t return_code_first {eprosima::fastdds::dds::RETCODE_OK};
            return_code_first =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "FirstStruct", type_ids_first);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_first)
            {
            ::register_FirstStruct_type_identifier(type_ids_first);
            }
            StructMemberFlag member_flags_first = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_first = 0x00000000;
            bool common_first_ec {false};
            CommonStructMember common_first {TypeObjectUtils::build_common_struct_member(member_id_first, member_flags_first, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_first, common_first_ec))};
            if (!common_first_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure first member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_first = "first";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_first;
            ann_custom_SecondStruct.reset();
            CompleteMemberDetail detail_first = TypeObjectUtils::build_complete_member_detail(name_first, member_ann_builtin_first, ann_custom_SecondStruct);
            CompleteStructMember member_first = TypeObjectUtils::build_complete_struct_member(common_first, detail_first);
            TypeObjectUtils::add_complete_struct_member(member_seq_SecondStruct, member_first);
        }
        CompleteStructType struct_type_SecondStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_SecondStruct, header_SecondStruct, member_seq_SecondStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SecondStruct, type_name_SecondStruct.to_string(), type_ids_SecondStruct))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SecondStruct already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_ThirdStruct_type_identifier(
        TypeIdentifierPair& type_ids_ThirdStruct)
{

    ReturnCode_t return_code_ThirdStruct {eprosima::fastdds::dds::RETCODE_OK};
    return_code_ThirdStruct =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "ThirdStruct", type_ids_ThirdStruct);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_ThirdStruct)
    {
        StructTypeFlag struct_flags_ThirdStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_ThirdStruct = "ThirdStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ThirdStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ThirdStruct;
        CompleteTypeDetail detail_ThirdStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ThirdStruct, ann_custom_ThirdStruct, type_name_ThirdStruct.to_string());
        CompleteStructHeader header_ThirdStruct;
        header_ThirdStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_ThirdStruct);
        CompleteStructMemberSeq member_seq_ThirdStruct;
        {
            TypeIdentifierPair type_ids_second;
            ReturnCode_t return_code_second {eprosima::fastdds::dds::RETCODE_OK};
            return_code_second =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "SecondStruct", type_ids_second);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_second)
            {
            ::register_SecondStruct_type_identifier(type_ids_second);
            }
            StructMemberFlag member_flags_second = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_second = 0x00000000;
            bool common_second_ec {false};
            CommonStructMember common_second {TypeObjectUtils::build_common_struct_member(member_id_second, member_flags_second, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_second, common_second_ec))};
            if (!common_second_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure second member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_second = "second";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_second;
            ann_custom_ThirdStruct.reset();
            CompleteMemberDetail detail_second = TypeObjectUtils::build_complete_member_detail(name_second, member_ann_builtin_second, ann_custom_ThirdStruct);
            CompleteStructMember member_second = TypeObjectUtils::build_complete_struct_member(common_second, detail_second);
            TypeObjectUtils::add_complete_struct_member(member_seq_ThirdStruct, member_second);
        }
        CompleteStructType struct_type_ThirdStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_ThirdStruct, header_ThirdStruct, member_seq_ThirdStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_ThirdStruct, type_name_ThirdStruct.to_string(), type_ids_ThirdStruct))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "ThirdStruct already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_FourthStruct_type_identifier(
        TypeIdentifierPair& type_ids_FourthStruct)
{

    ReturnCode_t return_code_FourthStruct {eprosima::fastdds::dds::RETCODE_OK};
    return_code_FourthStruct =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "FourthStruct", type_ids_FourthStruct);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_FourthStruct)
    {
        StructTypeFlag struct_flags_FourthStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_FourthStruct = "FourthStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_FourthStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_FourthStruct;
        CompleteTypeDetail detail_FourthStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_FourthStruct, ann_custom_FourthStruct, type_name_FourthStruct.to_string());
        CompleteStructHeader header_FourthStruct;
        header_FourthStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_FourthStruct);
        CompleteStructMemberSeq member_seq_FourthStruct;
        {
            TypeIdentifierPair type_ids_third;
            ReturnCode_t return_code_third {eprosima::fastdds::dds::RETCODE_OK};
            return_code_third =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "ThirdStruct", type_ids_third);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_third)
            {
            ::register_ThirdStruct_type_identifier(type_ids_third);
            }
            StructMemberFlag member_flags_third = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_third = 0x00000000;
            bool common_third_ec {false};
            CommonStructMember common_third {TypeObjectUtils::build_common_struct_member(member_id_third, member_flags_third, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_third, common_third_ec))};
            if (!common_third_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure third member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_third = "third";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_third;
            ann_custom_FourthStruct.reset();
            CompleteMemberDetail detail_third = TypeObjectUtils::build_complete_member_detail(name_third, member_ann_builtin_third, ann_custom_FourthStruct);
            CompleteStructMember member_third = TypeObjectUtils::build_complete_struct_member(common_third, detail_third);
            TypeObjectUtils::add_complete_struct_member(member_seq_FourthStruct, member_third);
        }
        CompleteStructType struct_type_FourthStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_FourthStruct, header_FourthStruct, member_seq_FourthStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_FourthStruct, type_name_FourthStruct.to_string(), type_ids_FourthStruct))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "FourthStruct already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_FifthStruct_type_identifier(
        TypeIdentifierPair& type_ids_FifthStruct)
{

    ReturnCode_t return_code_FifthStruct {eprosima::fastdds::dds::RETCODE_OK};
    return_code_FifthStruct =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "FifthStruct", type_ids_FifthStruct);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_FifthStruct)
    {
        StructTypeFlag struct_flags_FifthStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_FifthStruct = "FifthStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_FifthStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_FifthStruct;
        CompleteTypeDetail detail_FifthStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_FifthStruct, ann_custom_FifthStruct, type_name_FifthStruct.to_string());
        CompleteStructHeader header_FifthStruct;
        header_FifthStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_FifthStruct);
        CompleteStructMemberSeq member_seq_FifthStruct;
        {
            TypeIdentifierPair type_ids_fourth;
            ReturnCode_t return_code_fourth {eprosima::fastdds::dds::RETCODE_OK};
            return_code_fourth =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "FourthStruct", type_ids_fourth);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_fourth)
            {
            ::register_FourthStruct_type_identifier(type_ids_fourth);
            }
            StructMemberFlag member_flags_fourth = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_fourth = 0x00000000;
            bool common_fourth_ec {false};
            CommonStructMember common_fourth {TypeObjectUtils::build_common_struct_member(member_id_fourth, member_flags_fourth, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_fourth, common_fourth_ec))};
            if (!common_fourth_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure fourth member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_fourth = "fourth";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_fourth;
            ann_custom_FifthStruct.reset();
            CompleteMemberDetail detail_fourth = TypeObjectUtils::build_complete_member_detail(name_fourth, member_ann_builtin_fourth, ann_custom_FifthStruct);
            CompleteStructMember member_fourth = TypeObjectUtils::build_complete_struct_member(common_fourth, detail_fourth);
            TypeObjectUtils::add_complete_struct_member(member_seq_FifthStruct, member_fourth);
        }
        CompleteStructType struct_type_FifthStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_FifthStruct, header_FifthStruct, member_seq_FifthStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_FifthStruct, type_name_FifthStruct.to_string(), type_ids_FifthStruct))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "FifthStruct already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_nested_struct_type_identifier(
        TypeIdentifierPair& type_ids_nested_struct)
{

    ReturnCode_t return_code_nested_struct {eprosima::fastdds::dds::RETCODE_OK};
    return_code_nested_struct =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "nested_struct", type_ids_nested_struct);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_nested_struct)
    {
        StructTypeFlag struct_flags_nested_struct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_nested_struct = "nested_struct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_nested_struct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_nested_struct;
        CompleteTypeDetail detail_nested_struct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_nested_struct, ann_custom_nested_struct, type_name_nested_struct.to_string());
        CompleteStructHeader header_nested_struct;
        header_nested_struct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_nested_struct);
        CompleteStructMemberSeq member_seq_nested_struct;
        {
            TypeIdentifierPair type_ids_first;
            ReturnCode_t return_code_first {eprosima::fastdds::dds::RETCODE_OK};
            return_code_first =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "FirstStruct", type_ids_first);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_first)
            {
            ::register_FirstStruct_type_identifier(type_ids_first);
            }
            StructMemberFlag member_flags_first = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_first = 0x00000000;
            bool common_first_ec {false};
            CommonStructMember common_first {TypeObjectUtils::build_common_struct_member(member_id_first, member_flags_first, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_first, common_first_ec))};
            if (!common_first_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure first member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_first = "first";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_first;
            ann_custom_nested_struct.reset();
            CompleteMemberDetail detail_first = TypeObjectUtils::build_complete_member_detail(name_first, member_ann_builtin_first, ann_custom_nested_struct);
            CompleteStructMember member_first = TypeObjectUtils::build_complete_struct_member(common_first, detail_first);
            TypeObjectUtils::add_complete_struct_member(member_seq_nested_struct, member_first);
        }
        {
            TypeIdentifierPair type_ids_second;
            ReturnCode_t return_code_second {eprosima::fastdds::dds::RETCODE_OK};
            return_code_second =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "SecondStruct", type_ids_second);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_second)
            {
            ::register_SecondStruct_type_identifier(type_ids_second);
            }
            StructMemberFlag member_flags_second = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_second = 0x00000001;
            bool common_second_ec {false};
            CommonStructMember common_second {TypeObjectUtils::build_common_struct_member(member_id_second, member_flags_second, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_second, common_second_ec))};
            if (!common_second_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure second member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_second = "second";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_second;
            ann_custom_nested_struct.reset();
            CompleteMemberDetail detail_second = TypeObjectUtils::build_complete_member_detail(name_second, member_ann_builtin_second, ann_custom_nested_struct);
            CompleteStructMember member_second = TypeObjectUtils::build_complete_struct_member(common_second, detail_second);
            TypeObjectUtils::add_complete_struct_member(member_seq_nested_struct, member_second);
        }
        {
            TypeIdentifierPair type_ids_third;
            ReturnCode_t return_code_third {eprosima::fastdds::dds::RETCODE_OK};
            return_code_third =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "ThirdStruct", type_ids_third);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_third)
            {
            ::register_ThirdStruct_type_identifier(type_ids_third);
            }
            StructMemberFlag member_flags_third = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_third = 0x00000002;
            bool common_third_ec {false};
            CommonStructMember common_third {TypeObjectUtils::build_common_struct_member(member_id_third, member_flags_third, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_third, common_third_ec))};
            if (!common_third_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure third member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_third = "third";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_third;
            ann_custom_nested_struct.reset();
            CompleteMemberDetail detail_third = TypeObjectUtils::build_complete_member_detail(name_third, member_ann_builtin_third, ann_custom_nested_struct);
            CompleteStructMember member_third = TypeObjectUtils::build_complete_struct_member(common_third, detail_third);
            TypeObjectUtils::add_complete_struct_member(member_seq_nested_struct, member_third);
        }
        {
            TypeIdentifierPair type_ids_fourth;
            ReturnCode_t return_code_fourth {eprosima::fastdds::dds::RETCODE_OK};
            return_code_fourth =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "FourthStruct", type_ids_fourth);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_fourth)
            {
            ::register_FourthStruct_type_identifier(type_ids_fourth);
            }
            StructMemberFlag member_flags_fourth = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_fourth = 0x00000003;
            bool common_fourth_ec {false};
            CommonStructMember common_fourth {TypeObjectUtils::build_common_struct_member(member_id_fourth, member_flags_fourth, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_fourth, common_fourth_ec))};
            if (!common_fourth_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure fourth member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_fourth = "fourth";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_fourth;
            ann_custom_nested_struct.reset();
            CompleteMemberDetail detail_fourth = TypeObjectUtils::build_complete_member_detail(name_fourth, member_ann_builtin_fourth, ann_custom_nested_struct);
            CompleteStructMember member_fourth = TypeObjectUtils::build_complete_struct_member(common_fourth, detail_fourth);
            TypeObjectUtils::add_complete_struct_member(member_seq_nested_struct, member_fourth);
        }
        {
            TypeIdentifierPair type_ids_fifth;
            ReturnCode_t return_code_fifth {eprosima::fastdds::dds::RETCODE_OK};
            return_code_fifth =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "FifthStruct", type_ids_fifth);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_fifth)
            {
            ::register_FifthStruct_type_identifier(type_ids_fifth);
            }
            StructMemberFlag member_flags_fifth = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_fifth = 0x00000004;
            bool common_fifth_ec {false};
            CommonStructMember common_fifth {TypeObjectUtils::build_common_struct_member(member_id_fifth, member_flags_fifth, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_fifth, common_fifth_ec))};
            if (!common_fifth_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure fifth member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_fifth = "fifth";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_fifth;
            ann_custom_nested_struct.reset();
            CompleteMemberDetail detail_fifth = TypeObjectUtils::build_complete_member_detail(name_fifth, member_ann_builtin_fifth, ann_custom_nested_struct);
            CompleteStructMember member_fifth = TypeObjectUtils::build_complete_struct_member(common_fifth, detail_fifth);
            TypeObjectUtils::add_complete_struct_member(member_seq_nested_struct, member_fifth);
        }
        CompleteStructType struct_type_nested_struct = TypeObjectUtils::build_complete_struct_type(struct_flags_nested_struct, header_nested_struct, member_seq_nested_struct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_nested_struct, type_name_nested_struct.to_string(), type_ids_nested_struct))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "nested_struct already registered in TypeObjectRegistry for a different type.");
        }
    }
}

